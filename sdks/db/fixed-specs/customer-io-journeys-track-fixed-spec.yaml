openapi: 3.0.0
info:
  title: Journeys Track API
  description: >
    Our Track API provides ways to send real-time customer data to your
    Customer.io workspace.


    # Overview


    <div class="fly-panel fly-light regionUS">

    <div class="fly-panel-body us-server">

    <p class="text--bold">You're looking at our US regional endpoints</p>

    <p>The only difference in our US and European Union (EU) regions is the
    subdomain—<code>track-eu</code> for the EU region rather than just
    <code>track</code>; there are no other differences between the two regions.
    If your account is based in the European Union (EU) data center, <a
    id='eu-anchor' onClick="anchorToRegion(this.id)">click here</a> to show EU
    endpoints in our code samples and documentation below. Note that if your
    account is in the EU region and you send traffic to our US endpoints, we'll
    redirect it accordingly but this traffic still passes through US servers and
    data could be logged in the US.</p>

    <p>If you don't know your region, you can <b>find your account region</b> on
    <a href="https://fly.customer.io/settings/privacy">your account's privacy
    page</a>, or <a href="#operation/getRegion">get your region using the
    API</a>.</p>

    </div>

    <div class="fly-panel-body eu-server">

    <p class="text--bold">You're looking at our EU regional endpoints</p>

    <p>The only difference in our US and European Union (EU) regions is the
    subdomain—<code>track</code> for our US region rather than
    <code>track-eu</code>; there are no other differences between the two
    regions. If your account is based in the European Union (EU) data center,
    you can <a id='us-anchor' onClick="anchorToRegion(this.id)">click here</a>
    to to show US endpoints in our code samples and documentation below.</p>

    <p>Note that if your account is based in the United States (US) data center
    and you send requests to the EU region, your requests will fail. If you
    don't know your region, you can <b>find your account region</b> on <a
    href="https://fly.customer.io/settings/privacy">your account's privacy
    page</a>, or <a href="#operation/getRegion">get your region using the
    API</a>.</p>

    </div></div>



    Customer.io hosts services in the United States (US) and European Union (EU,
    host subdomains are suffixed with `-eu`). Select the appropriate region for
    server addresses that apply to your region.


    <table id="hosts">
      <tr><th>Host/Server</th><th>Purpose</th></tr>
      <tr><td class='server-url'><a href='#tag/trackOverview'><code>https://track.customer.io/api/</code></a></td><td>Use the <b>Track API</b> to report customer attributes and track customer events/activity. You cannot retrieve data using this API. Track endpoints support minimal validation to ensure as close to real-time processing as possible.</td></tr> 
    </table>


    # Use our Postman collection


    We've generated a Postman collection with **all** of our APIs—not just the
    ones on this page—with a starter environment (called "CIO Env") containing
    variables for authorization and path parameters.


    If you fork this collection, you might want to disable the *Watch original
    collection* option. We automatically update our Postman collection whenever
    we release changes to our documentation, even if we don't change our
    APIs—which happens daily! Rather than being flooded with Postman
    notifications, you can check out our [Release
    Notes](https://customer.io/docs/api/track/) for updates to our APIs.


    **NOTE**: Postman endpoints default to our US APIs. If you're in our
    European (EU) region, you'll need to add `-eu` server variables
    (*track_api_url* and *app_api_url*).


    <div class="postman-run-button primary-btn"

    data-postman-action="collection/fork"

    data-postman-var-1="23697545-0f7ae1e8-8177-46fc-808a-2fd363dd52b9"

    data-postman-collection-url="entityId=23697545-0f7ae1e8-8177-46fc-808a-2fd363dd52b9&entityType=collection&workspaceId=b886877f-fc09-475f-84fe-6221a98f4d18"

    data-postman-param="env%5BCIO%20Env%5D=W3sia2V5IjoidXNlcm5hbWUiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjowfSx7ImtleSI6InBhc3N3b3JkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoic2VjcmV0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoxfSx7ImtleSI6ImJlYXJlciIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjJ9LHsia2V5IjoiaW1wb3J0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6M30seyJrZXkiOiJlbWFpbF9hZGRyZXNzIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6NH0seyJrZXkiOiJzdXBwcmVzc2lvbl90eXBlIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6NX0seyJrZXkiOiJjb2xsZWN0aW9uX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6Nn0seyJrZXkiOiJzbmlwcGV0X25hbWUiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4Ijo3fSx7ImtleSI6IndlYmhvb2tfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4Ijo4fSx7ImtleSI6InNlbmRlcl9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjl9LHsia2V5IjoiZXhwb3J0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MTB9LHsia2V5IjoibWVzc2FnZV9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjExfSx7ImtleSI6InNlZ21lbnRfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoxMn0seyJrZXkiOiJuZXdzbGV0dGVyX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MTN9LHsia2V5IjoiY29udGVudF9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjE0fSx7ImtleSI6ImNhbXBhaWduX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MTV9LHsia2V5IjoiYWN0aW9uX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MTZ9LHsia2V5IjoiY3VzdG9tZXJfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoxN30seyJrZXkiOiJ0cmFuc2FjdGlvbmFsX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MTh9LHsia2V5IjoiYnJvYWRjYXN0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MTl9LHsia2V5IjoidHJpZ2dlcl9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjIwfSx7ImtleSI6ImZvcm1faWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoyMX0seyJrZXkiOiJpZGVudGlmaWVyIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MjJ9LHsia2V5IjoiZGV2aWNlX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoiZGVmYXVsdCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6MjN9LHsia2V5IjoiZGVsaXZlcnlfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoyNH1d"></div>

    <script type="text/javascript">
      (function (p,o,s,t,m,a,n) {
        !p[s] && (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); });
        !o.getElementById(s+t) && o.getElementsByTagName("head")[0].appendChild((
          (n = o.createElement("script")),
          (n.id = s+t), (n.async = 1), (n.src = m), n
        ));
      }(window, document, "_pm", "PostmanRunObject", "https://run.pstmn.io/button.js"));
    </script>



    # Authentication 


    You can find all of your API authentication information in your [Account
    Settings](https://fly.customer.io/settings/api_credentials). Our Tracking
    API uses HTTP basic authorization. The App API uses bearer authorization,
    and you can generate tokens supporting different scopes. Each operation in
    this document references the authorization header it requires.



    <!-- ReDoc-Inject: <security-definitions> -->


    # Track API limits


    The Behavioral Tracking API (`track.customer.io`) has a fair-use rate limit
    of 100/requests per second for both active data integrations and historical
    backfill scripts; these limits apply to both our v1 and v2 APIs. However,
    there is no strictly enforced rate limit at which point Customer.io will
    drop your data.


    If track.customer.io calls unexpectedly exceed 100 requests per second, we
    may reach out to help you correct your integration. We also reserve the
    right to block your API calls if your integration exceeds this limit in a
    way that degrades performance for our other customers. 


    Below are the payload size limits for the Track API. If any of these limits
    are too restrictive for your needs, contact support to let us know your
    situation as we may be able to accommodate special circumstances. 


    ## Customer limits


    These limits apply to people and their attributes, often referred to as
    "customers" in our APIs.


    | Data Type | Limit | Description |

    | -- | -- | -- |

    | ID | 150 bytes | Max length of a person's ID value |

    | Attribute Name | 150 bytes | Max length of each attribute name |

    | Attribute Value | 1000 bytes | Max length of attribute values |

    | Unique attributes | 300 | Max number of attributes allowed per person or
    Identify call |


    ## Object and relationship limits


    Objects (groups) and relationships between people and objects can have their
    own attributes. Their limits are similar to people (customers).


    | Data Type | Limit | Description |

    | -- | -- | -- |

    | Object ID | 150 bytes | Max length of a object's ID |

    | Attribute Names | 150 bytes | Max length of each attribute name |

    | Attribute Values | 1000 bytes | Max length of attribute values |

    | Unique attributes | 300 | Max number of attributes allowed per object or
    relationship |

    | Total attribute size | 100 Kilobytes | Max size of all attributes
    associated with an object or relationship |


    ## Track API Event limits


    These limits apply to events that you'll send with the `/v1/track` call.


    | Data Type | Limit | Description |

    | -- | -- | -- |

    | Event Name | 100 bytes | Max length of each event name |

    | Event Data | 100000 bytes | Max length of each event data |



    ## v2 API Limits


    The v2 API has two endpoints, both of which have limits on the total size of
    requests. 

    * `/single` is limited to requests 32kb or smaller. 

    * `/batch` is limited to requests 500kb or smaller.
  version: 1.0.0
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - description: >-
      The base URL for the Track API. Track endpoints use basic authentication
      with your Site ID as the user name and your secret key as the password.
    url: https://track.customer.io
tags:
  - description: >-
      Add, modify, suppress, or unsuppress people (referred to as "customers" in
      our APIs). You can also use these endpoints to set attributes on people.
    name: Track Customers
    x-displayName: Customers
  - description: >-
      Use customer events to trigger campaigns or add users to segments. You can
      attribute events directly to customers or send anonymous events and
      associate them with users later when you identify them.
    name: Track Events
    x-displayName: Events
  - description: >
      Manual segments are lists of people that you incorporate using the API or
      by uploading CSVs. You can add people to, or remove people from, manual
      segments with these endpoints. These endpoints do _not_ let you modify
      data-driven segments.


      **NOTE**: These endpoints do not yet support workspaces that use both
      `email` and `id` as identifiers.


      A segment must exist before you can add people to it. You can create
      manual segments using the [App API `/segments`
      endpoints](https://customer.io/docs/api/track/).
    name: Track Segments
    x-displayName: Segments
  - description: >
      This new version of our edge API has only two endpoints, but supports the
      majority of our traditional v1 track operations and then some based on the
      `type` and `action` keys that you set in your request. 
        
      You can use the `/batch` call to send multiple requests at the same time.
      Unlike the v1 API, you can also make requests affecting objects and
      deliveries. Objects are a grouping mechanism for people—like an account
      people belong to or an online course that they enroll in. Deliveries are
      events based on messages sent from Customer.io.


      The chart below lists the type of `action` you can perform for each
      `type`. Our requests below are broken out by `type`; use the `action`
      dropdown to see the specific payload structure for each action.


      | Action | Person | Object | Delivery | 

      | :-- | :--: | :--: | :--: |

      | identify | &#9989; | &#9989; | |

      | delete | &#9989; | &#9989; | |

      | event | &#9989; | | &#9989; |

      | screen | &#9989; | | |

      | page | &#9989; | | |

      | add_relationships | &#9989; | &#9989; | |

      | delete_relationships | &#9989; | &#9989; | |

      | add_device | &#9989; | | | 

      | delete_device | &#9989; | | |

      | merge | &#9989; | | |

      | suppress | &#9989; | | |

      | unsuppress | &#9989; | | |
    name: track_v2
    x-displayName: Track v2 Overview
  - description: >
      Determine whether your account and data are hosted in the US or EU data
      center using your [Track API
      Key](https://fly.customer.io/settings/api_credentials).
    name: trackRegion
    x-displayName: Account Region
  - description: >-
      Connect forms to your workspace to identify people, apply form responses
      to people, and trigger campaigns for people who fill out forms on your
      website or in your app.
    name: Forms
  - description: >
      ## Web SDK vs Backend Integrations 


      ```
        <script type="text/javascript">
            var _cio = _cio || [];
            (function() {
                var a,b,c;a=function(f){return function(){_cio.push([f].
                concat(Array.prototype.slice.call(arguments,0)))}};b=["load","identify",
                "sidentify","track","page"];for(c=0;c<b.length;c++){_cio[b[c]]=a(b[c])};
                var t = document.createElement('script'),
                    s = document.getElementsByTagName('script')[0];
                t.async = true;
                t.id    = 'cio-tracker';
                t.setAttribute('data-site-id', 'YOUR_SITE_ID');
                t.setAttribute('data-use-array-params', 'true');
                t.src = 'https://assets.customer.io/assets/track.js';
                s.parentNode.insertBefore(t, s);
            })();
        </script>
        ```
        You can integrate with this API using a javascript snippet, by consuming the API directly, or both.

        You can simply copy/paste the Javascript snippet to your site to track basic customer behaviors directly from your website. In many cases, using the Javascript snippet is easier to integrate with your app, but there are several reasons why you may want to send events from your backend systems:
        
        * Ad blockers are becoming more prevalent as people and browsers increasingly try to avoid 3rd-party JS trackers.
        * You don't plan to trigger emails based on how customers interact with your website (e.g. users who haven’t visited the site in X days).
        * You use the Javascript snippet, but have a few events you’d like to send from your backend system. They will work well together!
        * You would rather not have another Javascript snippet slowing down your frontend. Our snippet is asynchronous (doesn’t affect initial page load) and very small, but we understand.

        You should base your decision to send events from your backend or a Javascript snippet on what works best for you. You can fully integrate with Customer.io using either approach.

      ## Client libraries


      Check out our [Track API section](https://customer.io/docs/api/track/) if
      you're looking for information about the Javascript snippet.


      We provide client libraries to support integrations with our Track and App
      APIs in whatever language you prefer. Take advantage of our client
      libraries to simplify your integration and take advantage of operations
      tailored to your language of choice. 


      NOTE: Where possible, code samples on this page for our Track and App APIs
      reflect an integration with a relevant library. Otherwise, our code
      samples show HTTP client operations. 


      * [Node.js](https://github.com/customerio/customerio-node)

      * [Python](https://github.com/customerio/customerio-python)

      * [Go](https://github.com/customerio/go-customerio)

      * [Ruby](https://github.com/customerio/customerio-ruby)
    name: Track v1 Overview
  - description: >
      These schemas all use `"type": "object"`. An "object" is a way to group
      people and relate them to common data—like all the people who belong to an
      account or sign up for an online class. An object can store attributes and
      relationships to people, but it *cannot* perform events or be related to
      another object.


      ## Identify object

      <SchemaDefinition schemaRef="#/components/schemas/object_identify" />


      ## Identify an object and relate it to anonymous people


      The `identify_anonymous` action lets you create or update an object and
      associate it with one or more people by `anonymous_id`. This helps you
      relate objects to people before you identify people by their `id` or
      `email`. 


      When you identify a person by `id` or `email` and pass their
      `anonymous_id`, we'll merge their anonymous information—including any
      objects they're related to—with their identified profile.


      <SchemaDefinition
      schemaRef="#/components/schemas/object_identify_anonymous" />


      ## Delete object

      <SchemaDefinition schemaRef="#/components/schemas/object_delete" />


      ## Add relationships to an object

      <SchemaDefinition
      schemaRef="#/components/schemas/object_add_relationships" />


      ## Remove relationships from an object

      <SchemaDefinition
      schemaRef="#/components/schemas/object_delete_relationships" />
    name: Object Schemas
  - description: >
      These schemas all use `"type": "person"`. These are operations that
      reflect people, the data you know about them, the events they perform, and
      the objects they're related to.


      ## Identify a person

      <SchemaDefinition schemaRef="#/components/schemas/identify_person" />


      ## Delete a person

      <SchemaDefinition schemaRef="#/components/schemas/person_delete" />


      ## Send events for a person

      <SchemaDefinition schemaRef="#/components/schemas/person_event" />


      ## Send page events for a person

      <SchemaDefinition schemaRef="#/components/schemas/person_page" />


      ## Send screen events for a person

      <SchemaDefinition schemaRef="#/components/schemas/person_screen" />


      ## Add relationships to a person

      <SchemaDefinition
      schemaRef="#/components/schemas/person_add_relationships" />


      ## Remove relationships from a person

      <SchemaDefinition
      schemaRef="#/components/schemas/person_delete_relationships" />


      ## Add a person's devices

      <SchemaDefinition schemaRef="#/components/schemas/person_add_device" />


      ## Delete a person's devices

      <SchemaDefinition schemaRef="#/components/schemas/person_delete_device" />


      ## Merge duplicate people

      <SchemaDefinition schemaRef="#/components/schemas/person_merge" />


      ## Suppress a person

      <SchemaDefinition schemaRef="#/components/schemas/person_suppress" />


      ## Unsuppress a person

      <SchemaDefinition schemaRef="#/components/schemas/person_unsuppress" />
    name: Person Schemas
  - description: >
      These schemas all use `"type": "delivery"`. These schemas reflect metrics
      for push and in-app notifications. Unlike email and SMS, metrics
      representing customer activities—like clicks and opens—don't come through
      a delivery service. If you don't use [our
      SDKs](https://customer.io/docs/api/track/), you need to report these
      metrics back to us—that's what the `delivery` type is for.


      <SchemaDefinition schemaRef="#/components/schemas/delivery_operations" />
    name: Deliveries
paths:
  /api/v1/accounts/region:
    get:
      servers:
        - description: This endpoint is a part of the Track API.
          url: https://track.customer.io
      tags:
        - trackRegion
      summary: Find your account region
      operationId: TrackRegion_findAccountRegion
      security:
        - Tracking-API-Key: []
      description: >
        This endpoint returns the appropriate region and URL for your Track API
        credentials. Use it to determine the URLs you should use to successfully
        complete other requests.


        You can perform this operation against either of the track API regional
        URLs; it returns your region in either case. 


        This endpoint also returns an `environment_id`, which represents the
        workspace the credentials are valid for. 
      responses:
        '200':
          description: Your credentials are valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackRegionFindAccountRegionResponse'
        '400':
          description: Your credentials are not valid.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://track.customer.io/api/v1/accounts/region \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)"
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/accounts/region",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Ruby + Native
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://track.customer.io/api/v1/accounts/region")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            response = http.request(request)
            puts response.read_body
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("track.customer.io")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/api/v1/accounts/region", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/accounts/region\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/customers/{identifier}:
    put:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Add or update a customer
      operationId: TrackCustomers_addOrUpdatePerson
      security:
        - Tracking-API-Key: []
      description: >
        Adds or updates a person.


        If your request does _not_ include `cio_id` and the identifiers in the
        request body do not belong to a person, your request adds a person.


        If a person already exists with the identifier in the request path, your
        request updates that person. If the identifier in the path does not
        belong to a person but you use an identifier in your request body that
        _does_ belong to a person, your request updates the person and assigns
        them the identifier in the path.


        If the identifier in the path and request body belong to different
        people, your request may return `200 OK` but produce an *Attribute
        Update Failure* for the identifier in the payload.


        If you want to update a person's identifiers after they are set, you
        must reference them using their `cio_id` in the format
        `cio_<cio_id_value>`—unless when updating an `email` with the [Allow
        updates to email using ID](https://customer.io/docs/api/track/) setting
        enabled. You can get the `cio_id` value from the [App
        API](https://customer.io/docs/api/track/). If your request includes a
        `cio_id`, we'll attempt to update that person, including any identifiers
        in the request. If the `cio_id` does not exist or belongs to a person
        who was deleted, we'll drop the request.


        For workspaces using `email` as an identifier, `email` is
        case-insensitive. The addresses `person@example.com` and
        `PERSON@example.com` would represent the same person.
      parameters:
        - description: >
            The unique value representing a person. The values you use to
            identify a person may be an `id`, `email` address, or the `cio_id`
            (when updating people), depending on your workspace settings. When
            you reference people by `cio_id`, you must prefix the value with
            `cio_`.
          name: identifier
          required: true
          in: path
          schema:
            oneOf:
              - title: id
                description: >-
                  The unique identifier for a person that you want to create or
                  modify.
                type: string
                example: 12345
              - title: email
                description: >-
                  A person's email address. If adding a new person in an
                  email-based workspace, you must use this value.
                type: string
                example: person@example.com
              - title: cio_id
                description: >
                  A canonical identifier assigned by Customer.io when you add a
                  person. When referencing a person by this value, you must
                  prefix the value with `cio_`. You can [look up a person using
                  the App API](https://customer.io/docs/api/track/) to find
                  their `cio_id`. 


                  You must use this value to update a person's other
                  identifiers—their `id` or `email`, unless you enable your
                  workspace's [Allow updates to email using
                  ID](https://customer.io/docs/api/track/) setting.
                type: string
                format: cio_[a-zA-Z0-9]*
                example: cio_03000001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackCustomersAddOrUpdatePersonRequest'
            example:
              email: customer@example.com
              created_at: 1361205308
              first_name: Bob
              plan: basic
              cio_relationships:
                action: add_relationships
                relationships:
                  - identifiers:
                      object_type_id: '1'
                      object_id: 01H5Q5SZVQDJ71SBME2SMDXS88
                    relationship_attributes:
                      role: admin
                  - identifiers:
                      object_type_id: '2'
                      object_id: 1171SBME
                    relationship_attributes:
                      role: viewer
              cio_subscription_preferences:
                topics:
                  topic_1: true
                  topic_2: true
                  topic_3: false
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://track.customer.io/api/v1/customers/{identifier} \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"id":"string","email":"user@example.com","anonymous_id":"string","created_at":0,"_update":true,"cio_relationships":{"action":"add_relationships","relationships":[{"identifiers":{"object_type_id":"1","object_id":"acme"},"relationship_attributes":{"role":"admin"}}]},"unsubscribed":true,"cio_subscription_preferences":{"topics":{"topic_<id>1":true,"topic_<id>2":true}},"Attributes1":"string","Attributes2":"string"}'
        - lang: Node + Native
          source: |
            const { TrackClient, RegionUS } = require('customerio-node');
            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });

            cio.identify(5, {
              email: 'customer@example.com',
              created_at: 1361205308,
              first_name: 'Bob',
              plan: 'basic'
            });
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            $customerio.identify(
              :id => 5,
              :email => "bob@example.com",
              :created_at => customer.created_at.to_i,
              :first_name => "Bob",
              :plan => "basic"
            )
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            cio.identify(id="5", email='customer@example.com', name='Bob',
            plan='premium')
        - lang: Go + Native
          source: >
            track := customerio.NewTrackClient("YOUR SITE ID", "YOUR API SECRET
            KEY", customerio.WithRegion(customerio.RegionUS))


            if err := track.Identify("5", map[string]interface{}{
              "email": "bob@example.com",
              "created_at": time.Now().Unix(),
              "first_name": "Bob",
              "plan": "basic",
            }); err != nil {
              // do something with error
            }
    delete:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Delete a customer
      operationId: TrackCustomers_removeCustomer
      security:
        - Tracking-API-Key: []
      description: >
        Deleting a customer removes them, and all of their information, from
        Customer.io.


        **NOTE**: Calls that update customers by ID can also create a customer.
        If you send data to Customer.io through other means (like the Javascript
        snippet), after you delete a customer, you may accidentally recreate the
        customer. You cannot delete a customer using the Javascript snippet
        alone.
      parameters:
        - description: >
            The unique value representing a person. The values you use to
            identify a person may be an `id`, `email` address, or the `cio_id`
            (when updating people), depending on your workspace settings. When
            you reference people by `cio_id`, you must prefix the value with
            `cio_`.
          name: identifier
          required: true
          in: path
          schema:
            oneOf:
              - title: id
                description: >-
                  The unique identifier for a person that you want to create or
                  modify.
                type: string
                example: 12345
              - title: email
                description: >-
                  A person's email address. If adding a new person in an
                  email-based workspace, you must use this value.
                type: string
                example: person@example.com
              - title: cio_id
                description: >
                  A canonical identifier assigned by Customer.io when you add a
                  person. When referencing a person by this value, you must
                  prefix the value with `cio_`. You can [look up a person using
                  the App API](https://customer.io/docs/api/track/) to find
                  their `cio_id`. 


                  You must use this value to update a person's other
                  identifiers—their `id` or `email`, unless you enable your
                  workspace's [Allow updates to email using
                  ID](https://customer.io/docs/api/track/) setting.
                type: string
                format: cio_[a-zA-Z0-9]*
                example: cio_03000001
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Node + Native
          source: >
            const { TrackClient, RegionUS } = require('customerio-node');

            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });


            // Depending on your workspace settings, the id (5) may be an email
            address.

            cio.destroy(5);
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            // Depending on your workspace settings, the id (5) may be an email
            address.

            $customerio.delete(5)
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            // Depending on your workspace settings, the customer_id may be an
            email address.

            cio.delete(customer_id="5")
        - lang: Go + Native
          source: >
            track := customerio.NewTrackClient("YOUR SITE ID", "YOUR API SECRET
            KEY", customerio.WithRegion(customerio.RegionUS))


            // Depending on your workspace settings, the id (5) may be an email
            address.

            if err := track.Delete("5"); err != nil {
              // do something with error
            }
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://track.customer.io/api/v1/customers/{identifier} \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)"
  /api/v1/customers/{identifier}/devices:
    parameters:
      - description: >
          The unique value representing a person. The values you use to identify
          a person may be an `id`, `email` address, or the `cio_id` (when
          updating people), depending on your workspace settings. When you
          reference people by `cio_id`, you must prefix the value with `cio_`.
        name: identifier
        required: true
        in: path
        schema:
          oneOf:
            - title: id
              description: >-
                The unique identifier for a person that you want to create or
                modify.
              type: string
              example: 12345
            - title: email
              description: >-
                A person's email address. If adding a new person in an
                email-based workspace, you must use this value.
              type: string
              example: person@example.com
            - title: cio_id
              description: >
                A canonical identifier assigned by Customer.io when you add a
                person. When referencing a person by this value, you must prefix
                the value with `cio_`. You can [look up a person using the App
                API](https://customer.io/docs/api/track/) to find their
                `cio_id`. 


                You must use this value to update a person's other
                identifiers—their `id` or `email`, unless you enable your
                workspace's [Allow updates to email using
                ID](https://customer.io/docs/api/track/) setting.
              type: string
              format: cio_[a-zA-Z0-9]*
              example: cio_03000001
    put:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Add or update a customer device
      operationId: add_device
      security:
        - Tracking-API-Key: []
      description: >-
        Customers can have more than one device. Use this method to add iOS and
        Android devices to, or update devices for, a customer profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDeviceRequest'
      responses:
        '200':
          description: A successful request returns an empty object response.
        '400':
          description: Invalid or malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDeviceResponse'
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://track.customer.io/api/v1/customers/{identifier}/devices \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"device":{"id":"string","last_used":0,"platform":"ios","attributes":{"device_os":"string","device_model":"string","app_version":"string","cio_sdk_version":"string","device_locale":"string","push_enabled":"true","Custom Device Attributes1":"string","Custom Device Attributes2":"string"}}}'
        - lang: Node + Native
          source: >
            const { TrackClient, RegionUS } = require('customerio-node');

            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });


            // Depending on your workspace settings, the id (5) may be an email
            address.

            cio.addDevice(5, "device_id", "ios", { primary: true });
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            // Depending on your workspace settings, the id (5) may be an email
            address.

            $customerio.add_device(5, "my_ios_device_id", "ios")

            $customerio.add_device(5, "my_android_device_id", "android")
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            // Depending on your workspace settings, the customer_id may be an
            email address.

            cio.add_device(customer_id="1", device_id='device_hash',
            platform='ios', last_used=1514764800})
        - lang: Go + Native
          source: >
            track := customerio.NewTrackClient("YOUR SITE ID", "YOUR API SECRET
            KEY", customerio.WithRegion(customerio.RegionUS))


            // Depending on your workspace settings, the id (5) may be an email
            address.

            if err := track.AddDevice("5", "messaging token", "android",
            map[string]interface{}{
              "last_used": time.Now().Unix(),
            }) err != nil {
              // do something with error
            }
  /api/v1/customers/{identifier}/devices/{device_id}:
    parameters:
      - description: >
          The unique value representing a person. The values you use to identify
          a person may be an `id`, `email` address, or the `cio_id` (when
          updating people), depending on your workspace settings. When you
          reference people by `cio_id`, you must prefix the value with `cio_`.
        name: identifier
        required: true
        in: path
        schema:
          oneOf:
            - title: id
              description: >-
                The unique identifier for a person that you want to create or
                modify.
              type: string
              example: 12345
            - title: email
              description: >-
                A person's email address. If adding a new person in an
                email-based workspace, you must use this value.
              type: string
              example: person@example.com
            - title: cio_id
              description: >
                A canonical identifier assigned by Customer.io when you add a
                person. When referencing a person by this value, you must prefix
                the value with `cio_`. You can [look up a person using the App
                API](https://customer.io/docs/api/track/) to find their
                `cio_id`. 


                You must use this value to update a person's other
                identifiers—their `id` or `email`, unless you enable your
                workspace's [Allow updates to email using
                ID](https://customer.io/docs/api/track/) setting.
              type: string
              format: cio_[a-zA-Z0-9]*
              example: cio_03000001
      - description: The ID of the device you want to perform an operation against.
        name: device_id
        in: path
        required: true
        schema:
          type: string
    delete:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Delete a customer device
      operationId: delete_device
      security:
        - Tracking-API-Key: []
      description: >-
        Remove a device from a customer profile. If you continue sending data
        about a device to Customer.io, you may inadvertently re-add the device
        to the customer profile.
      responses:
        '200':
          description: A successful request returns an empty object response.
        '400':
          description: Invalid or malformed request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDeviceResponse'
        '401':
          description: A successful request returns an empty object response.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://track.customer.io/api/v1/customers/{identifier}/devices/{device_id} \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)"
        - lang: Node + Native
          source: >
            const { TrackClient, RegionUS } = require('customerio-node');

            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });


            // Depending on your workspace settings, the id (5) may be an email
            address.

            cio.deleteDevice(5, "device_token")
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            // Depending on your workspace settings, the id (5) may be an email
            address.

            $customerio.delete_device(5, "my_device_token")
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            // Depending on your workspace settings, the customer_id may be an
            email address.

            cio.delete_device(customer_id="5", device_id='device_hash')
        - lang: Go + Native
          source: >
            track := customerio.NewTrackClient("YOUR SITE ID", "YOUR API SECRET
            KEY", customerio.WithRegion(customerio.RegionUS))


            // Depending on your workspace settings, the id (5) may be an email
            address.

            if err := track.DeleteDevice("5", "messaging-token"); err != nil {
              // do something with error
            }
  /api/v1/customers/{identifier}/suppress:
    parameters:
      - description: >
          The unique value representing a person. The values you use to identify
          a person may be an `id`, `email` address, or the `cio_id` (when
          updating people), depending on your workspace settings. When you
          reference people by `cio_id`, you must prefix the value with `cio_`.
        name: identifier
        required: true
        in: path
        schema:
          oneOf:
            - title: id
              description: >-
                The unique identifier for a person that you want to create or
                modify.
              type: string
              example: 12345
            - title: email
              description: >-
                A person's email address. If adding a new person in an
                email-based workspace, you must use this value.
              type: string
              example: person@example.com
            - title: cio_id
              description: >
                A canonical identifier assigned by Customer.io when you add a
                person. When referencing a person by this value, you must prefix
                the value with `cio_`. You can [look up a person using the App
                API](https://customer.io/docs/api/track/) to find their
                `cio_id`. 


                You must use this value to update a person's other
                identifiers—their `id` or `email`, unless you enable your
                workspace's [Allow updates to email using
                ID](https://customer.io/docs/api/track/) setting.
              type: string
              format: cio_[a-zA-Z0-9]*
              example: cio_03000001
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Suppress a customer profile
      operationId: TrackCustomers_suppressCustomerProfile
      security:
        - Tracking-API-Key: []
      description: >
        Delete a customer profile and prevent the person's identifier(s) from
        being re-added to your workspace. Any future API calls or operations
        referencing the specified ID are ignored. If you suppress a person in a
        workspace set that identifies people by *email or ID* and both
        identifiers are set, both the person's email and ID are suppressed.


        <div class="fly-panel bg-warning">

        <div class="fly-panel-body">

        <p class="callout-head text--bold text-warning mrg-t-none"><svg
        class="api-icon"><path fill-rule="evenodd" clip-rule="evenodd"
        d="M15.4127 13.3333L9.18133 1.43333C8.95116 0.994094 8.49623 0.718884
        8.00033 0.718884C7.50444 0.718884 7.04951 0.994094 6.81933
        1.43333L0.587332 13.3333C0.370821 13.7467 0.386147 14.2431 0.627743
        14.6423C0.869339 15.0415 1.30205 15.2854 1.76867 15.2853H14.2313C14.698
        15.2854 15.1307 15.0415 15.3723 14.6423C15.6139 14.2431 15.6292 13.7467
        15.4127 13.3333ZM7.33333 5.61533C7.33333 5.24714 7.63181 4.94867 8
        4.94867C8.36819 4.94867 8.66667 5.24714 8.66667 5.61533V9.61533C8.66667
        9.98352 8.36819 10.282 8 10.282C7.63181 10.282 7.33333 9.98352 7.33333
        9.61533V5.61533ZM8.01466 13.2887H8.03333C8.29806 13.2844 8.54988 13.1735
        8.73182 12.9812C8.91376 12.7888 9.01044 12.5312 9 12.2667C8.97854
        11.7209 8.53019 11.2893 7.984 11.2887H7.96533C7.70125 11.2935 7.4502
        11.4043 7.26865 11.5961C7.0871 11.788 6.99029 12.0447 7 12.3087C7.02073
        12.8546 7.46838 13.2869 8.01466 13.2887Z" /></svg>&nbsp;This API
        permanently deletes people</p>

        <div class="text-warning"><p>Suppressing a person way deletes their
        profile <i>and</i> suppresses the identifier you reference in the path
        of this call, preventing you from re-adding a person using the same
        identifier (until you unsuppress the identifier). You cannot recover a
        profile after you suppress it. In general, should use this API
        sparingly—for GDPR/CCPA requests, etc. </p>

        <p>If you want to keep a record of a person but prevent them from
        receiving messages, you should set the person's unsubscribed attribute
        (or use other attributes to represent complex subscription preferences)
        instead.</p></div>

        </div>

        </div>
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/customers/{identifier}/suppress \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)"
        - lang: Node + Native
          source: >
            const { TrackClient, RegionUS } = require('customerio-node');

            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });


            // Depending on your workspace settings, the id (5) may be an email
            address.

            cio.suppress(5)
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            // Depending on your workspace settings, the id (5) may be an email
            address.

            $customerio.suppress(5)
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            // Depending on your workspace settings, customer_id may be an email
            address.

            cio.suppress(customer_id="5")
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/customers/{identifier}/suppress\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/customers/{identifier}/unsuppress:
    parameters:
      - description: >
          The unique value representing a person. The values you use to identify
          a person may be an `id`, `email` address, or the `cio_id` (when
          updating people), depending on your workspace settings. When you
          reference people by `cio_id`, you must prefix the value with `cio_`.
        name: identifier
        required: true
        in: path
        schema:
          oneOf:
            - title: id
              description: >-
                The unique identifier for a person that you want to create or
                modify.
              type: string
              example: 12345
            - title: email
              description: >-
                A person's email address. If adding a new person in an
                email-based workspace, you must use this value.
              type: string
              example: person@example.com
            - title: cio_id
              description: >
                A canonical identifier assigned by Customer.io when you add a
                person. When referencing a person by this value, you must prefix
                the value with `cio_`. You can [look up a person using the App
                API](https://customer.io/docs/api/track/) to find their
                `cio_id`. 


                You must use this value to update a person's other
                identifiers—their `id` or `email`, unless you enable your
                workspace's [Allow updates to email using
                ID](https://customer.io/docs/api/track/) setting.
              type: string
              format: cio_[a-zA-Z0-9]*
              example: cio_03000001
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Unsuppress a customer profile
      operationId: TrackCustomers_unsuppressProfile
      security:
        - Tracking-API-Key: []
      description: >
        Unsuppressing a profile allows you to add the customer back to
        Customer.io. If you unsuppress a person in a workspace set that
        identifies people by *email or ID* and the suppressed person had both an
        email and ID, both the person's email and ID are unsuppressed.


        Unsuppressing a profile does not recreate the profile that you
        previously suppressed. Rather, it just makes the identifier available
        again. Identifying a person after unsuppressing them creates a new
        profile, with none of the history of the previously suppressed
        identifier.
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/customers/{identifier}/unsuppress \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)"
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/customers/{identifier}/unsuppress",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            // Depending on your workspace settings, the id (5) may be an email
            address.

            $customerio.unsuppress(5)
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            // Depending on your workspace settings, customer_id may be an email
            address.

            cio.unsuppress(customer_id="5")
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/customers/{identifier}/unsuppress\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /unsubscribe/{delivery_id}:
    parameters:
      - description: The delivery resulting in a request to unsubscribe.
        name: delivery_id
        in: path
        required: true
        schema:
          type: string
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. This endpoint does not
            require authorization.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Custom unsubscribe handling
      operationId: TrackCustomers_handleUnsubscribe
      security: []
      description: >
        This endpoint lets you set a global unsubscribed status outside of the
        subscription pathways native to Customer.io. If you use [custom
        unsubscribe links](https://customer.io/docs/api/track/), you can host a
        custom unsubscribe page and use this API to send unsubscribe data,
        associated with a particular delivery, to Customer.io.


        **NOTE**: This endpoint **requires** a `Content-type: application/json`
        header. This endpoint **does not require** an `Authorization` header.


        Your request sets a person's `unsubscribed` attribute to `true`,
        attributes their unsubscribe request to the individual email/delivery
        that they unsubscribed from, and lets you segment your audience based on
        `email_unsubscribed` events when you use a custom subscription center.


        If you use a custom subscription center (managing subscriptions to
        various types of messages with custom attributes), this request *does
        not* set a custom attribute. You must perform a [separate
        request](https://customer.io/docs/api/track/) to update a person's
        custom subscription attributes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackCustomersHandleUnsubscribeRequest'
      responses:
        '200':
          description: A successful request returns an empty object response.
        '400':
          description: The `delivery_id` format is incorrect or the request is malformed.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/unsubscribe/{delivery_id} \
              --header 'content-type: application/json' \
              --data '{"unsubscribe":true}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/unsubscribe/{delivery_id}",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({unsubscribe: true}));
            req.end();
        - lang: Ruby + Native
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://track.customer.io/unsubscribe/{delivery_id}")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request["content-type"] = 'application/json'
            request.body = "{\"unsubscribe\":true}"

            response = http.request(request)
            puts response.read_body
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("track.customer.io")

            payload = "{\"unsubscribe\":true}"

            headers = { 'content-type': "application/json" }

            conn.request("POST", "/unsubscribe/{delivery_id}", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/unsubscribe/{delivery_id}\"\n\n\tpayload := strings.NewReader(\"{\\\"unsubscribe\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/customers/{identifier}/events:
    parameters:
      - description: >
          The unique value representing a person. You may identify a person by
          `id`, `email` address, or the `cio_id` (when updating people),
          depending on your workspace settings.
        name: identifier
        required: true
        in: path
        schema:
          oneOf:
            - title: id
              description: The unique identifier you assigned to a person.
              type: string
              example: 12345
            - title: email
              description: A person's email address.
              type: string
              example: person@example.com
            - title: cio_id
              description: >
                A canonical identifier assigned by Customer.io when you add a
                person. When referencing a person by this value, you must prefix
                the value with `cio_`. You can [look up a person using the App
                API](https://customer.io/docs/api/track/) to find their
                `cio_id`, but you must prefix this value with `cio_` when using
                it to reference a person.


                You can use this value to update a person's other
                identifiers—their `id` or `email`.
              type: string
              format: cio_[a-zA-Z0-9]*
              example: cio_03000001
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Events
      summary: Track a customer event
      operationId: TrackEvents_postCustomerEvent
      security:
        - Tracking-API-Key: []
      description: >
        Send an event associated with a person, referenced by the identifier in
        the path. There are three defined event `type` values: `page`, `screen`
        and `event`. Page and screen events represent website page views and
        mobile app screen views respectively; the `name` for these event types
        is intended to be the page or screen a person visited or viewed. Any
        other event, is given the `event` type.


        We automatically trim leading and trailing spaces from event names.


        **Reserved Properties**


        There are a few important values which, if sent with the events that
        trigger campaigns, will override your campaign settings:


        * `from_address`

        * `recipient`

        * `reply_to`


        When using the Javascript snippet to track events, you must call the
        Behavioral Tracking API call after identifying the customer or the event
        will not associate with the customer’s profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEventsPostCustomerEventRequest'
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/customers/{identifier}/events \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"name":"purchase","data":{"price":23.45,"product":"socks"}}'
        - lang: Node + Native
          source: >
            const { TrackClient, RegionUS } = require('customerio-node');

            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });


            // Depending on your workspace settings, customer_id may be an email
            address.

            cio.track(5, {
              name: 'purchase',
              data: {
                price: '23.45',
                product: 'socks'
              }
            });
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            // Depending on your workspace settings, customer_id may be an email
            address.

            $customerio.track(5, "purchase", :type => "socks", :price =>
            "13.99", :timestamp => 1365436200)
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            // Depending on your workspace settings, customer_id may be an email
            address.

            cio.track(customer_id="5", name='purchased', price=23.45,
            product="widget")
        - lang: Go + Native
          source: >
            track := customerio.NewTrackClient("YOUR SITE ID", "YOUR API SECRET
            KEY", customerio.WithRegion(customerio.RegionUS))


            if err := track.Track("5", "purchase", map[string]interface{}{
                "type": "socks",
                "price": "13.99",
            }); err != nil {
                // do something with error
            }
  /api/v1/events:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Events
      summary: Track an anonymous event
      operationId: TrackEvents_createAnonymousEvent
      security:
        - Tracking-API-Key: []
      description: >
        An anonymous event represents a person you haven't identified yet. When
        you identify a person, you can set their `anonymous_id` attribute. If
        [event merging](https://customer.io/docs/api/track/) is turned on in
        your workspace, and the attribute matches the `anonymous_id` in one or
        more events that were logged within the last 30 days, we associate those
        events with the person. If you associate an event with a person within
        72 hours of the timestamp on the event, you can trigger campaigns from
        the event.


        There are three possible event `type` values: `page`, `screen` and
        `event`. Page and screen events represent website page views and mobile
        app screen views respectively; the `name` for these event types is
        intended to be the page or screen a person visited or viewed. Any other
        event, is given the `event` type.


        **Note**: Avoid using names with leading or trailing spaces, because you
        can't reference event names with leading or trailing spaces in
        campaigns, etc. In workspaces created after September 21, 2021, we trim
        leading and trailing spaces from event names automatically to fix this
        issue.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEventsCreateAnonymousEventRequest'
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/events \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"name":"watched_video","anonymous_id":"abc123","data":{"video":"intro-to-platform"}}'
        - lang: Node + Native
          source: |
            const { TrackClient, RegionUS } = require('customerio-node');
            let cio = new TrackClient(siteId, apiKey, { region: RegionUS });

            cio.trackAnonymous('anonymous-id', {
              name: 'updated',
              data: {
                updated: true,
                plan: 'free'
              }
            });
        - lang: Ruby + Native
          source: >
            $customerio = Customerio::Client.new("YOUR SITE ID", "YOUR API
            SECRET KEY", region: Customerio::Regions::US)


            $customerio.track_anonymous(anonymous_id, "help_enquiry", :subject
            => 'anon-events')
        - lang: Python + Python3
          source: >
            from customerio import CustomerIO, Regions

            cio = CustomerIO(site_id, api_key, region=Regions.US)


            cio.track_anonymous(anonymous_id="anon-person", name="purchased",
            price=23.45, product="widget")
        - lang: Go + Native
          source: >
            track := customerio.NewTrackClient("YOUR SITE ID", "YOUR API SECRET
            KEY", customerio.WithRegion(customerio.RegionUS))


            if err := track.TrackAnonymous(anonymous_id, "new_app",
            map[string]interface{}{
              "first_name": "Alex",
              "source": "OldApp",
            }); err != nil {
              // do something with error
            }
  /api/v1/forms/{form_id}/submit:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Forms
      summary: Submit a form
      operationId: Forms_submitFormResponse
      security:
        - Tracking-API-Key: []
      description: >
        Submit a form response. If Customer.io does not recognize the `form_id`
        we create a new form connection (found on the *Data & Integrations* >
        *Integrations* > *Forms* page). Form submissions with the same ID are
        treated as submissions from the same form.


        The `data` object _must_ contain at least one of `id` or `email`
        (depending on the identifiers supported in your workspace)—or a field
        that is mapped to one of these identifiers—to identify the form
        respondent. If the person who submitted the form does not already exist,
        we create them (like an [identify](https://customer.io/docs/api/track/)
        request).


        Additional keys in the `data` object represent form fields and values
        from the form that a person submitted. By default, we map form fields in
        your request directly to attributes, e.g. if you have a form field
        called `first_name`, we map that field to the `first_name` attribute.


        **NOTES**: 
          * You cannot disable fields that you send to this API. If you send a field (as `data`) to this API, we'll include it in the form submission.
          * If an identifier in your form is called something like `email_address` rather than `email` in your initial request, you'll receive a `400`, but we'll still add your form on the **Data & Integrations** > **Integrations** > **Forms** page. You can then re-map your `email_address` field to `email`, and your form will begin working normally.
          * Customer.io reserves `form_id`, `form_name`, `form_type`, `form_url`, and `form_url_param` keys. If your request includes these keys, Customer.io ignores them.
      parameters:
        - description: >-
            The identifier for a form. If Customer.io does not recognize the
            `form_id`, we create a new form connection (found on the *Data &
            Integrations* > *Forms* page). Use a value that makes sense to you,
            or something that you can trace to your backend system.
          name: form_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormsSubmitFormResponseRequest'
      responses:
        '204':
          description: Successful requests do not return anything.
        '400':
          description: >-
            Invalid or malformed request. One or more form values may not be
            properly formatted as strings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormsSubmitFormResponseResponse'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/forms/{form_id}/submit \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"data":{"email":"cool.person@example.com","first_name":"cool","last_name":"person","fav_food":"pizza"}}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/forms/{form_id}/submit",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              data: {
                email: 'cool.person@example.com',
                first_name: 'cool',
                last_name: 'person',
                fav_food: 'pizza'
              }
            }));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://track.customer.io/api/v1/forms/{form_id}/submit")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request.body =
            "{\"data\":{\"email\":\"cool.person@example.com\",\"first_name\":\"cool\",\"last_name\":\"person\",\"fav_food\":\"pizza\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload =
            "{\"data\":{\"email\":\"cool.person@example.com\",\"first_name\":\"cool\",\"last_name\":\"person\",\"fav_food\":\"pizza\"}}"


            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/api/v1/forms/{form_id}/submit", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/forms/{form_id}/submit\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"email\\\":\\\"cool.person@example.com\\\",\\\"first_name\\\":\\\"cool\\\",\\\"last_name\\\":\\\"person\\\",\\\"fav_food\\\":\\\"pizza\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/merge_customers:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Customers
      summary: Merge duplicate people
      operationId: TrackCustomers_mergePeople
      security:
        - Tracking-API-Key: []
      description: >
        Merge two customer profiles together. The payload contains `primary` and
        `secondary` profile objects. The primary profile remains after the merge
        and the secondary is deleted. This operation is _not_ reversible. 


        The following information is merged into the primary profile from the
        secondary profile:

        * Attributes that are not set, or are empty, on the primary.

        * The most recent 30-days of event history. Events merged from the
        secondary person cannot trigger campaigns.

        * Manual segments that the primary person did not already belong to.

        * Message delivery history. 

        * Campaign journeys that the primary person has not entered. If the
        secondary person has started a journey that the primary person has not,
        the primary person continues on that campaign journey after the merge.
        If the secondary person has completed journeys that the primary person
        has not, the primary person gains these historical journeys after the
        merge. This may be important for determining entry (or re-entry)
        criteria for subsequent campaigns, segments, etc.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackCustomersMergePeopleRequest'
            example:
              primary:
                email: cool.person@company.com
              secondary:
                email: cperson@gmail.com
      responses:
        '200':
          description: A successful request returns an empty object response.
        '400':
          description: >-
            The request was malformed. You cannot have multiple identifiers (id,
            email, etc) in the `primary` or `secondary` objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackCustomersMergePeopleResponse'
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/merge_customers \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"primary":{"id":"42"},"secondary":{"id":"42"}}'
        - lang: Node + Native
          source: >-
            const http = require("https");


            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/merge_customers",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };


            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });


            req.write(JSON.stringify({primary: {id: '42'}, secondary: {id:
            '42'}}));

            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://track.customer.io/api/v1/merge_customers")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request.body =
            "{\"primary\":{\"id\":\"42\"},\"secondary\":{\"id\":\"42\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload =
            "{\"primary\":{\"id\":\"42\"},\"secondary\":{\"id\":\"42\"}}"


            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/api/v1/merge_customers", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/merge_customers\"\n\n\tpayload := strings.NewReader(\"{\\\"primary\\\":{\\\"id\\\":\\\"42\\\"},\\\"secondary\\\":{\\\"id\\\":\\\"42\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/metrics:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. It does not require
            authentication.
          url: https://track.customer.io
      tags:
        - Track Events
      summary: Report metrics
      operationId: TrackEvents_reportMetrics
      security: []
      description: >
        This endpoint helps you report metrics from channels that aren't native
        to Customer.io or don't rely on our SDKs. When we deliver a message, we
        include a CIO-Delivery-ID header. This is the `delivery_id` in the
        payload. You can use it as a UTL and you can pass it as a UTM parameter
        in links, etc to track metrics when people click, convert, etc.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEventsReportMetricsRequest'
      responses:
        '200':
          description: The request was received.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/metrics \
              --header 'content-type: application/json' \
              --data '{"delivery_id":"RPILAgUBcRhIBqSfeiIwdIYJKxTY","timestamp":1613063089,"metric":"bounced","recipient":"string","reason":"string","href":"string"}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/metrics",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              delivery_id: 'RPILAgUBcRhIBqSfeiIwdIYJKxTY',
              timestamp: 1613063089,
              metric: 'bounced',
              recipient: 'string',
              reason: 'string',
              href: 'string'
            }));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://track.customer.io/api/v1/metrics")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request.body =
            "{\"delivery_id\":\"RPILAgUBcRhIBqSfeiIwdIYJKxTY\",\"timestamp\":1613063089,\"metric\":\"bounced\",\"recipient\":\"string\",\"reason\":\"string\",\"href\":\"string\"}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload =
            "{\"delivery_id\":\"RPILAgUBcRhIBqSfeiIwdIYJKxTY\",\"timestamp\":1613063089,\"metric\":\"bounced\",\"recipient\":\"string\",\"reason\":\"string\",\"href\":\"string\"}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "/api/v1/metrics", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/metrics\"\n\n\tpayload := strings.NewReader(\"{\\\"delivery_id\\\":\\\"RPILAgUBcRhIBqSfeiIwdIYJKxTY\\\",\\\"timestamp\\\":1613063089,\\\"metric\\\":\\\"bounced\\\",\\\"recipient\\\":\\\"string\\\",\\\"reason\\\":\\\"string\\\",\\\"href\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/push/events:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. It does not require
            authentication.
          url: https://track.customer.io
      tags:
        - Track Events
      summary: Report push metrics
      operationId: TrackEvents_reportPushMetrics
      security: []
      description: >
        While this endpoint still works, you should take advantage of our
        [universal metrics endpoint](https://customer.io/docs/api/track/). It
        supports channels besides push and lets you provide additional
        information with some metrics.


        Use this endpoint to report device-side push metrics—opened, converted,
        and delivered—back to Customer.io, so you can track the effectiveness of
        your push notifications. Customer.io has no way of knowing about these
        metrics, or associating metrics with a specific message, unless you
        report them back to us.


        When Customer.io delivers a push notification, we include
        `CIO-Delivery-ID` and `CIO-Delivery-Token` parameters. Reference these
        in your payload as the `delivery_id` and `device_id` respectively with
        the type of device-side `event` metric that you want to associate with
        your push notification and the person represented by the `device_id`. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackEventsReportPushMetricsRequest'
      responses:
        '200':
          description: The request was received.
      deprecated: true
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/push/events \
              --header 'content-type: application/json' \
              --data '{"delivery_id":"RPILAgUBcRhIBqSfeiIwdIYJKxTY","event":"opened","device_id":"CIO-Delivery-Token from the notification","timestamp":1613063089}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/push/events",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              delivery_id: 'RPILAgUBcRhIBqSfeiIwdIYJKxTY',
              event: 'opened',
              device_id: 'CIO-Delivery-Token from the notification',
              timestamp: 1613063089
            }));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://track.customer.io/api/v1/push/events")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request.body =
            "{\"delivery_id\":\"RPILAgUBcRhIBqSfeiIwdIYJKxTY\",\"event\":\"opened\",\"device_id\":\"CIO-Delivery-Token
            from the notification\",\"timestamp\":1613063089}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload =
            "{\"delivery_id\":\"RPILAgUBcRhIBqSfeiIwdIYJKxTY\",\"event\":\"opened\",\"device_id\":\"CIO-Delivery-Token
            from the notification\",\"timestamp\":1613063089}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "/api/v1/push/events", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/push/events\"\n\n\tpayload := strings.NewReader(\"{\\\"delivery_id\\\":\\\"RPILAgUBcRhIBqSfeiIwdIYJKxTY\\\",\\\"event\\\":\\\"opened\\\",\\\"device_id\\\":\\\"CIO-Delivery-Token from the notification\\\",\\\"timestamp\\\":1613063089}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/segments/{segment_id}/add_customers:
    parameters:
      - description: >-
          The identifier for a segment. You can find your segment's ID on its
          page in the dashboard—go to *Segments*, select your segment, and find
          the ID under *Usage*. Or you can find your segment using the [App
          API](https://customer.io/docs/api/track/).
        name: segment_id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: >-
          The type of `ids` you want to use. All of the values in the `ids`
          array must be of this type. If you don't provide this parameter, we
          assume that the `ids` array contains `id` values.
        name: id_type
        required: false
        in: query
        schema:
          type: string
          enum:
            - id
            - email
            - cio_id
          default: id
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Segments
      summary: Add people to a manual segment
      operationId: TrackSegments_addCustomersToManualSegment
      security:
        - Tracking-API-Key: []
      description: >
        Add people to a manual segment by ID. You are limited to 1000 customer
        IDs per request.


        This endpoint requires people to have `id` attributes. If your workspace
        does not use `id` as an identifier, or you have not assigned people `id`
        values, you cannot add people to manual segments using the API. Our user
        interface does not have this limitation. You can add people to manual
        segments through the UI when you upload a CSV of people or as a part of
        a campaign. If you pass an `id` that does not belong to anybody in your
        workspace, we'll ignore it.


        This endpoint lets you add people to manual segments, but a segment must
        exist before you can add people to it. You can create and find manual
        segments using the [App API](https://customer.io/docs/api/track/).


        **NOTE**: You cannot add people to data-driven segments using the API.
        See [our documentation on segments](https://customer.io/docs/api/track/)
        for more information about segments.
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/TrackSegmentsAddCustomersToManualSegmentRequest
            example:
              ids:
                - customer_id1
                - customer_id2
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
        '404':
          description: The segment does not exist. Check the segment ID and try again.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/TrackSegmentsAddCustomersToManualSegmentResponse
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/segments/{segment_id}/add_customers \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"ids":["string"]}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/segments/{segment_id}/add_customers",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ids: ['string']}));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://track.customer.io/api/v1/segments/{segment_id}/add_customers")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request.body = "{\"ids\":[\"string\"]}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload = "{\"ids\":[\"string\"]}"


            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/api/v1/segments/{segment_id}/add_customers",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/segments/{segment_id}/add_customers\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v1/segments/{segment_id}/remove_customers:
    parameters:
      - description: >-
          The identifier for a segment. You can find your segment's ID on its
          page in the dashboard—go to *Segments*, select your segment, and find
          the ID under *Usage*. Or you can find your segment using the [App
          API](https://customer.io/docs/api/track/).
        name: segment_id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: >-
          The type of `ids` you want to use. All of the values in the `ids`
          array must be of this type. If you don't provide this parameter, we
          assume that the `ids` array contains `id` values.
        name: id_type
        required: false
        in: query
        schema:
          type: string
          enum:
            - id
            - email
            - cio_id
          default: id
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - Track Segments
      summary: Remove people from a manual segment
      operationId: TrackSegments_removeCustomers
      security:
        - Tracking-API-Key: []
      description: >
        You can remove users from a manual segment by ID. You are limited to
        1000 customer IDs per request.


        This endpoint requires people to have `id` attributes. If your workspace
        does not use `id` as an identifier, or you have not assigned people `id`
        values, you cannot remove people from manual segments using the API. Our
        user interface does not have this limitation. You can remove people from
        manual segments through the UI as a part of a campaign workflow.


        **NOTE**: You cannot remove people from data-driven segments using the
        API. See [our documentation on
        segments](https://customer.io/docs/api/track/) for more information
        about segments.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackSegmentsRemoveCustomersRequest'
            example:
              ids:
                - customer_id1
                - customer_id2
      responses:
        '200':
          description: A successful request returns an empty object response.
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
        '404':
          description: The segment does not exist. Check the segment ID and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackSegmentsRemoveCustomersResponse'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v1/segments/{segment_id}/remove_customers \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"ids":["string"]}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v1/segments/{segment_id}/remove_customers",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ids: ['string']}));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url =
            URI("https://track.customer.io/api/v1/segments/{segment_id}/remove_customers")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request.body = "{\"ids\":[\"string\"]}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload = "{\"ids\":[\"string\"]}"


            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST",
            "/api/v1/segments/{segment_id}/remove_customers", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v1/segments/{segment_id}/remove_customers\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v2/entity:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - track_v2
      summary: Make a single request
      operationId: Trackv2_createEntity
      security:
        - Tracking-API-Key: []
      description: >
        This endpoint lets you create, update, or delete a single person or
        object—including managing relationships between objects and people. 


        An "object" is any kind of non-person entity that you want to associate
        with one or more people—like a company, an educational course that
        people signed up for, a product, etc. 


        Your request must be smaller than 32kb. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trackv2CreateEntityRequest'
      responses:
        '200':
          description: A successful request returns an empty object response.
        '400':
          description: The request was malformed or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trackv2CreateEntityResponse'
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v2/entity \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"type":"person","identifiers":{"id":"42"},"action":"identify","attributes":{"cio_subscription_preferences":{"topic_1":true,"topic_2":false,"topic_3":true}},"cio_relationships":[{"identifiers":{"object_type_id":"1","object_id":"acme"},"relationship_attributes":{"role":"admin"}}]}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v2/entity",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              type: 'person',
              identifiers: {id: '42'},
              action: 'identify',
              attributes: {cio_subscription_preferences: {topic_1: true, topic_2: false, topic_3: true}},
              cio_relationships: [
                {
                  identifiers: {object_type_id: '1', object_id: 'acme'},
                  relationship_attributes: {role: 'admin'}
                }
              ]
            }));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://track.customer.io/api/v2/entity")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request.body =
            "{\"type\":\"person\",\"identifiers\":{\"id\":\"42\"},\"action\":\"identify\",\"attributes\":{\"cio_subscription_preferences\":{\"topic_1\":true,\"topic_2\":false,\"topic_3\":true}},\"cio_relationships\":[{\"identifiers\":{\"object_type_id\":\"1\",\"object_id\":\"acme\"},\"relationship_attributes\":{\"role\":\"admin\"}}]}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload =
            "{\"type\":\"person\",\"identifiers\":{\"id\":\"42\"},\"action\":\"identify\",\"attributes\":{\"cio_subscription_preferences\":{\"topic_1\":true,\"topic_2\":false,\"topic_3\":true}},\"cio_relationships\":[{\"identifiers\":{\"object_type_id\":\"1\",\"object_id\":\"acme\"},\"relationship_attributes\":{\"role\":\"admin\"}}]}"


            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/api/v2/entity", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v2/entity\"\n\n\tpayload := strings.NewReader(\"{\\\"type\\\":\\\"person\\\",\\\"identifiers\\\":{\\\"id\\\":\\\"42\\\"},\\\"action\\\":\\\"identify\\\",\\\"attributes\\\":{\\\"cio_subscription_preferences\\\":{\\\"topic_1\\\":true,\\\"topic_2\\\":false,\\\"topic_3\\\":true}},\\\"cio_relationships\\\":[{\\\"identifiers\\\":{\\\"object_type_id\\\":\\\"1\\\",\\\"object_id\\\":\\\"acme\\\"},\\\"relationship_attributes\\\":{\\\"role\\\":\\\"admin\\\"}}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
  /api/v2/batch:
    post:
      servers:
        - description: >-
            This endpoint is a part of the Track API. Track endpoints use basic
            authentication with your Site ID as the user name and your secret
            key as the password.
          url: https://track.customer.io
      tags:
        - track_v2
      summary: Send multiple requests
      operationId: Trackv2_sendMultipleRequests
      security:
        - Tracking-API-Key: []
      description: >
        This endpoint lets you batch requests for different people and objects
        in a single request. Each object in your array represents an individual
        "entity" operation—it represents a change for a person, an object, or a
        delivery. 


        You can mix types in this request; you are not limited to a batch
        containing only objects or only people. An "object" is a non-person
        entity that you want to associate with one or more people—like a
        company, an educational course that people enroll in, etc.


        Your request must be smaller than 500kb.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trackv2SendMultipleRequestsRequest'
      responses:
        '200':
          description: A successful request returns an empty object response.
        '207':
          description: >-
            At least one object in the batch was invalid; all other requests are
            accepted. This response contains a list of errors for the invalid
            objects in the batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trackv2SendMultipleRequestsResponse'
        '400':
          description: The entire request was malformed or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trackv2SendMultipleRequests400Response'
        '401':
          description: >-
            Unauthorized request. Make sure that you provided the right
            credentials.
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://track.customer.io/api/v2/batch \
              --header "Authorization: Basic $(echo -n site_id:api_key | base64)" \
              --header 'content-type: application/json' \
              --data '{"batch":[{"type":"person","identifiers":{"id":"42"},"action":"identify","attributes":{"cio_subscription_preferences":{"topic_1":true,"topic_2":false,"topic_3":true}},"cio_relationships":[{"identifiers":{"object_type_id":"1","object_id":"acme"},"relationship_attributes":{"role":"admin"}}]}]}'
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "track.customer.io",
              "port": null,
              "path": "/api/v2/batch",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              batch: [
                {
                  type: 'person',
                  identifiers: {id: '42'},
                  action: 'identify',
                  attributes: {cio_subscription_preferences: {topic_1: true, topic_2: false, topic_3: true}},
                  cio_relationships: [
                    {
                      identifiers: {object_type_id: '1', object_id: 'acme'},
                      relationship_attributes: {role: 'admin'}
                    }
                  ]
                }
              ]
            }));
            req.end();
        - lang: Ruby + Native
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://track.customer.io/api/v2/batch")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["Authorization"] = 'Basic REPLACE_BASIC_AUTH'

            request.body =
            "{\"batch\":[{\"type\":\"person\",\"identifiers\":{\"id\":\"42\"},\"action\":\"identify\",\"attributes\":{\"cio_subscription_preferences\":{\"topic_1\":true,\"topic_2\":false,\"topic_3\":true}},\"cio_relationships\":[{\"identifiers\":{\"object_type_id\":\"1\",\"object_id\":\"acme\"},\"relationship_attributes\":{\"role\":\"admin\"}}]}]}"


            response = http.request(request)

            puts response.read_body
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("track.customer.io")


            payload =
            "{\"batch\":[{\"type\":\"person\",\"identifiers\":{\"id\":\"42\"},\"action\":\"identify\",\"attributes\":{\"cio_subscription_preferences\":{\"topic_1\":true,\"topic_2\":false,\"topic_3\":true}},\"cio_relationships\":[{\"identifiers\":{\"object_type_id\":\"1\",\"object_id\":\"acme\"},\"relationship_attributes\":{\"role\":\"admin\"}}]}]}"


            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/api/v2/batch", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://track.customer.io/api/v2/batch\"\n\n\tpayload := strings.NewReader(\"{\\\"batch\\\":[{\\\"type\\\":\\\"person\\\",\\\"identifiers\\\":{\\\"id\\\":\\\"42\\\"},\\\"action\\\":\\\"identify\\\",\\\"attributes\\\":{\\\"cio_subscription_preferences\\\":{\\\"topic_1\\\":true,\\\"topic_2\\\":false,\\\"topic_3\\\":true}},\\\"cio_relationships\\\":[{\\\"identifiers\\\":{\\\"object_type_id\\\":\\\"1\\\",\\\"object_id\\\":\\\"acme\\\"},\\\"relationship_attributes\\\":{\\\"role\\\":\\\"admin\\\"}}]}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
components:
  parameters:
    object_type_id:
      description: >-
        The object type an object belongs to—like "Companies" or "Accounts".
        Object type IDs begin at `1` and increment for each new type.
      name: object_type_id
      in: path
      required: true
      schema:
        type: integer
        example: 1
    object_id:
      description: >-
        The `object_id` or `cio_object_id` of an object, depending on the
        `id_type` specified in query params. `id_type` defaults to `object_id`.
      name: object_id
      in: path
      required: true
      schema:
        type: string
        example: abc123
    suppression_type:
      description: >-
        The reason a person's email address was suppressed by the email service
        provider (ESP).
      name: suppression_type
      in: path
      required: true
      schema:
        type: string
        enum:
          - bounces
          - blocks
          - spam_reports
          - invalid_emails
    transactional_id:
      description: >-
        The identifier of your transactional message. You'll find this in the UI
        or URL of your transactional message. For example, if this is the path
        of a transactional message URL - `/transactional/3/templates/139` - the
        `transactional_id` is 3.
      name: transactional_id
      in: path
      required: true
      schema:
        type: integer
    collection_id:
      description: The identifier for a collection.
      name: collection_id
      in: path
      required: true
      schema:
        type: integer
    delivery_id:
      description: The delivery resulting in a request to unsubscribe.
      name: delivery_id
      in: path
      required: true
      schema:
        type: string
    activityTypes:
      description: >-
        The type of activity you want to search for. Types with
        `_o:<object_type_id>` are for objects and types with
        `_r:<object_type_id>` are for relationships.
      name: type
      in: query
      required: false
      schema:
        description: >-
          The type of activity. Types with `_o:<object_type_id>` are for objects
          and types with `_r:<object_type_id>` are for relationships.
        type: string
        enum:
          - attempted_action
          - attribute_change
          - failed_attribute_change
          - failed_batch_update
          - skipped_update
          - failed_query_collection
          - event
          - failed_event
          - page
          - drafted_email
          - attempted_email
          - sent_email
          - delivered_email
          - opened_email
          - clicked_email
          - converted_email
          - bounced_email
          - failed_email
          - unsubscribed_email
          - topic_unsubscribed_email
          - spammed_email
          - dropped_email
          - undeliverable_email
          - drafted_action
          - delivered_action
          - bounced_action
          - sent_action
          - opened_action
          - clicked_action
          - failed_action
          - converted_action
          - device_change
          - deferred_email
          - unsubscribed_action
          - dropped_action
          - undeliverable_action
          - deferred_action
          - profile_create
          - profile_delete
          - profile_merge
          - anon_merge
          - screen
          - webhook_event
          - add_relationship
          - delete_relationship
          - _o:<object_type_id>:create
          - _o:<object_type_id>:attribute_change
          - _o:<object_type_id>:failed_attribute_change
          - _o:<object_type_id>:delete
          - _o:<object_type_id>:add_relationship
          - _o:<object_type_id>:delete_relationship
          - _r:<object_type_id>:attribute_change
          - _r:<object_type_id>:failed_attribute_change
          - failed_object_journeys
        example: sent_email
    sender_id:
      description: The identifier of a sender.
      name: sender_id
      in: path
      required: true
      schema:
        type: integer
    sort:
      description: >-
        Determine how you want to sort results, `asc` for chronological order
        and `desc` for reverse chronological order.
      name: sort
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
    activityName:
      description: The name of the event or attribute you want to return.
      name: name
      in: query
      required: false
      schema:
        type: string
        example: something_happened
    deleted:
      description: If true, return results for deleted people.
      name: deleted
      in: query
      required: false
      schema:
        type: boolean
        default: false
    customer_id_query:
      description: >
        The `identifier` of the person you want to look up. By default, this is
        a person's `id`. You can use the `id_type` parameter to look up a person
        by `email` or `cio_id`.


        If you use a person's `cio_id`, you must prefix the value value with
        `cio_` when using it to find or reference a person (i.e. `cio_03000010`
        for a `cio_id` value of 03000010).
      name: customer_id
      required: false
      in: query
      schema:
        type: string
    object_id_type:
      name: id_type
      required: false
      in: query
      schema:
        type: string
        enum:
          - object_id
          - cio_object_id
        default: object_id
    id_type:
      description: >-
        The type of `customer_id` you want to use to reference a person. If you
        don't provide this parameter, we assume that the `customer_id` in your
        request is a person's `id`.
      name: id_type
      required: false
      in: query
      schema:
        type: string
        enum:
          - id
          - email
          - cio_id
    export_id:
      description: The export_id you want to access.
      name: export_id
      in: path
      required: true
      schema:
        type: integer
    language-1:
      description: >-
        A [language tag](https://customer.io/docs/api/track/) you want the
        content translated in. If none is provided, the content will be sent in
        the default language of your subscription center.
      name: language
      required: false
      in: query
      schema:
        type: string
    language-2:
      description: >-
        A [language tag](https://customer.io/docs/api/track/) of a language
        variant. If you don't provide a language, we target your default
        template. If the language variant does not exist, we throw an error.
      name: language
      in: path
      nullable: true
      required: false
      schema:
        type: string
    newsletter_id:
      description: The identifier of a newsletter.
      name: newsletter_id
      in: path
      required: true
      schema:
        type: integer
    content_id:
      description: >-
        The identifier of a newsletter variant—a language in a multi-language
        message or an individual test in an A/B test. You can [list your
        newsletter's variants](https://customer.io/docs/api/track/) to find your
        newsletter's variants.
      name: content_id
      in: path
      required: true
      schema:
        type: integer
    webhook_id:
      description: The identifier of a webhook.
      name: webhook_id
      in: path
      required: true
      schema:
        type: integer
    message_id:
      description: The identifier of a message.
      name: message_id
      in: path
      required: true
      schema:
        type: string
    campaign_id_query:
      description: The campaign you want to filter for.
      name: campaign_id
      in: query
      required: false
      schema:
        type: integer
    newsletter_id_query:
      description: The newsletter you want to filter for.
      name: newsletter_id
      in: query
      required: false
      schema:
        type: integer
    action_id_query:
      description: The action you want to filter for.
      name: action_id
      in: query
      required: false
      schema:
        type: integer
    campaign_id:
      description: >-
        The ID of the campaign that you want to trigger or return information
        about.
      name: campaign_id
      in: path
      required: true
      schema:
        type: integer
        example: 2
    trigger_id:
      description: The ID of the campaign trigger that you want to return information for.
      name: trigger_id
      in: path
      required: true
      schema:
        type: integer
        example: 3
    track_customer_id:
      description: >
        The unique value representing a person. The values you use to identify a
        person may be an `id`, `email` address, or the `cio_id` (when updating
        people), depending on your workspace settings. When you reference people
        by `cio_id`, you must prefix the value with `cio_`.
      name: identifier
      required: true
      in: path
      schema:
        oneOf:
          - title: id
            description: >-
              The unique identifier for a person that you want to create or
              modify.
            type: string
            example: 12345
          - title: email
            description: >-
              A person's email address. If adding a new person in an email-based
              workspace, you must use this value.
            type: string
            example: person@example.com
          - title: cio_id
            description: >
              A canonical identifier assigned by Customer.io when you add a
              person. When referencing a person by this value, you must prefix
              the value with `cio_`. You can [look up a person using the App
              API](https://customer.io/docs/api/track/) to find their `cio_id`. 


              You must use this value to update a person's other
              identifiers—their `id` or `email`, unless you enable your
              workspace's [Allow updates to email using
              ID](https://customer.io/docs/api/track/) setting.
            type: string
            format: cio_[a-zA-Z0-9]*
            example: cio_03000001
    trackEvent_customer_id:
      description: >
        The unique value representing a person. You may identify a person by
        `id`, `email` address, or the `cio_id` (when updating people), depending
        on your workspace settings.
      name: identifier
      required: true
      in: path
      schema:
        oneOf:
          - title: id
            description: The unique identifier you assigned to a person.
            type: string
            example: 12345
          - title: email
            description: A person's email address.
            type: string
            example: person@example.com
          - title: cio_id
            description: >
              A canonical identifier assigned by Customer.io when you add a
              person. When referencing a person by this value, you must prefix
              the value with `cio_`. You can [look up a person using the App
              API](https://customer.io/docs/api/track/) to find their `cio_id`,
              but you must prefix this value with `cio_` when using it to
              reference a person.


              You can use this value to update a person's other
              identifiers—their `id` or `email`.
            type: string
            format: cio_[a-zA-Z0-9]*
            example: cio_03000001
    customer_id:
      description: The ID of the customer you want to perform an operation against.
      name: customer_id
      required: true
      in: path
      schema:
        type: string
        example: 12345
    device_id:
      description: The ID of the device you want to perform an operation against.
      name: device_id
      in: path
      required: true
      schema:
        type: string
    segment_id:
      description: >-
        The identifier for a segment. You can find your segment's ID on its page
        in the dashboard—go to *Segments*, select your segment, and find the ID
        under *Usage*. Or you can find your segment using the [App
        API](https://customer.io/docs/api/track/).
      name: segment_id
      in: path
      required: true
      schema:
        type: integer
        format: int32
    start:
      description: >-
        The token for the page of results you want to return. Responses contain
        a `next` property. Use this property as the `start` value to return the
        next page of results.
      name: start
      in: query
      required: false
      schema:
        type: string
    limit:
      description: The maximum number of results you want to retrieve per page.
      name: limit
      in: query
      required: false
      schema:
        type: integer
    limit-10-100:
      description: The maximum number of results you want to retrieve per page.
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 10
        maximum: 100
    limit-50-1000:
      description: The maximum number of results you want to retrieve per page.
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 50
        maximum: 1000
    limit-100-1000:
      description: The maximum number of results you want to retrieve per page.
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 100
        maximum: 1000
    offset:
      description: The number of records to skip before retrieving results.
      name: offset
      in: query
      required: false
      schema:
        type: integer
        default: 0
    action_id:
      description: The action you want to lookup or act on.
      name: action_id
      in: path
      required: true
      schema:
        type: integer
    period:
      description: The unit of time for your report.
      name: period
      in: query
      required: false
      schema:
        type: string
        default: days
        enum:
          - hours
          - days
          - weeks
          - months
    steps:
      description: >-
        The number of periods you want to return. Defaults to the maximum
        available, or `12` if the period is in `months`. Maximums are 24 hours,
        45 days, 12 weeks, or 120 months.
      name: steps
      in: query
      required: false
      schema:
        type: integer
    metricType:
      description: >-
        The type of item you want to return metrics for. When empty, the
        response contains metrics for all possible types.
      name: type
      in: query
      required: false
      schema:
        type: string
        enum:
          - email
          - webhook
          - twilio
          - slack
          - push
          - in_app
    metric:
      description: Determines the metric(s) you want to return.
      name: metric
      in: query
      required: false
      schema:
        type: string
        enum:
          - attempted
          - sent
          - delivered
          - opened
          - clicked
          - converted
          - bounced
          - spammed
          - unsubscribed
          - dropped
          - failed
          - undeliverable
    unique:
      description: >-
        If true, the response contains only unique customer results, i.e. a
        customer who clicks a link twice is only counted once. If false, the
        response contains the total number of results without regard to
        uniqueness.
      name: unique
      in: query
      required: false
      schema:
        type: boolean
        default: false
    drafts:
      description: If true, your request returns drafts rather than active/sent messages.
      name: drafts
      in: query
      required: false
      schema:
        type: boolean
    get_apitb_broadcast_id:
      description: The ID of the broadcast that you want to return information about.
      name: broadcast_id
      in: path
      required: true
      schema:
        type: integer
    broadcast_id:
      description: The identifier of a broadcast.
      name: broadcast_id
      in: path
      required: true
      schema:
        type: integer
    state:
      description: The state of a broadcast.
      name: state
      in: query
      required: false
      schema:
        type: string
        enum:
          - failed
          - sent
          - drafted
          - attempted
    start_ts:
      description: The beginning timestamp for your query.
      name: start_ts
      in: query
      required: false
      schema:
        type: integer
        format: unix timestamp
    end_ts:
      description: The ending timestamp for your query.
      name: end_ts
      in: query
      required: false
      schema:
        type: integer
        format: unix timestamp
    id_type_segment:
      description: >-
        The type of `ids` you want to use. All of the values in the `ids` array
        must be of this type. If you don't provide this parameter, we assume
        that the `ids` array contains `id` values.
      name: id_type
      required: false
      in: query
      schema:
        type: string
        enum:
          - id
          - email
          - cio_id
        default: id
  responses:
    '200':
      description: A successful request returns an empty object response.
    '400':
      description: Invalid or malformed request.
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
                properties:
                  errors:
                    description: An array of errors.
                    type: array
                    items:
                      description: Error descriptions.
                      type: string
    '401':
      description: Unauthorized request. Make sure that you provided the right credentials.
    '429':
      description: Your request is over the 10-per-second limit.
    segment_404:
      description: The segment does not exist. Check the segment ID and try again.
      content:
        application/json:
          schema:
            type: string
            example: Segment not found
  schemas:
    anyType:
      description: Can be any type of value.
    anonymous_id:
      description: >-
        An identifier for an anonymous event, like a cookie. If set as an
        attribute on a person, any events bearing the same anonymous value are
        associated with this person. This value must be unique and is not
        reusable.
      type: string
    cio_id:
      description: >-
        A unique identifier set by Customer.io, used to reference a person if
        you want to update their identifiers.
      type: string
      example: a3000001
    collectionResponse:
      type: object
      properties:
        bytes:
          description: The size of the collection in bytes.
          type: integer
          example: 296
        created_at:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated_at:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        id:
          description: >-
            The identifier for the collection. This is how you'll reference the
            collection from the API.
          type: integer
          example: 1
        name:
          description: >-
            The name of the collection. This is how you'll reference the
            collection in liquid, e.g. `{{collection_name.data_property}}`.
          type: string
          example: upcoming events
        rows:
          description: >-
            Represents the number of objects in the `data` array or CSV rows in
            your collection schema.
          type: integer
          example: 2
        schema:
          description: >-
            Lists the top-level keys that you can reference within this
            collection. Customer.io does not enforce any of these keys as
            required from your `data`.
          type: array
          items:
            type: string
          example:
            - eventDate
            - eventName
            - presents
    exportSharedProps:
      description: Contains properties shared by export filters.
      type: object
      properties:
        start:
          description: The unix timestamp representing the beginning of the export.
          type: integer
          format: unix timestamp
          example: 1517529600
        end:
          description: The unix timestamp representing the end of the export.
          type: integer
          format: unix timestamp
          example: 1517702400
        attributes:
          description: >-
            The names of attributes you want to include in your export; each
            attribute name is an additional column in the export. If your
            message included liquid, you may add the attribute names used in
            your message so you can see the values populated for each delivery.
          type: array
          items:
            type: string
        metric:
          description: Determines the metric(s) you want to return.
          type: string
          enum:
            - created
            - attempted
            - sent
            - delivered
            - opened
            - clicked
            - converted
            - bounced
            - spammed
            - unsubscribed
            - dropped
            - failed
            - undeliverable
        drafts:
          description: If true, your request returns both drafts and active/sent messages.
          type: boolean
    next:
      description: >-
        Indicates the next page of results. Add `?start=<next_value>` to the
        request to get the next page of results.
      type: string
    anonymousEventsRequest:
      description: >-
        An event attributed to an unknown person. If you provide an
        `anonymous_id` with the event, you can associate the event with a person
        later (using the anonymous ID).
      oneOf:
        - title: Standard anonymous event
          type: object
          required:
            - name
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. This is how you'll reference the event in
                campaigns or segments.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Sets the event type. If your event isn't a `page` or `screen`
                type event, we automatically set this property to `event`.
              type: string
              enum:
                - event
                - page
                - screen
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`). You can include `from_address`
                and `reply_to`, but the event can only trigger a campaign if it
                is associated with a person within 72 hours of its timestamp.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
              properties:
                from_address:
                  description: >-
                    The address you want to trigger messages from, overriding
                    the `from` field in emails triggered by the event.
                  type: string
                  format: email
                reply_to:
                  description: >-
                    The address that receives replies for the message, if
                    applicable.
                  type: string
                  example: replyto@example.com
          example:
            name: watched_video
            anonymous_id: abc123
            data:
              video: intro-to-platform
        - title: Page view
          type: object
          required:
            - name
            - type
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. In general, this should be the URL of the
                page a person visited, making it easy to segment your audience
                or trigger campaigns using this event. Make sure you trim
                leading and trailing spaces from this field.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a page view. See ["page
                view" events](https://customer.io/docs/api/track/), for more
                information.
              type: string
              enum:
                - page
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: https://mysite.com/page
            type: page
            anonymous_id: abc123
            data:
              first_name: Person
        - title: Mobile screen view
          type: object
          required:
            - name
            - type
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. In general, this should be the name of
                the screen or deep link path that a person viewed, making it
                easy to segment your audience or trigger campaigns using this
                event. Make sure you trim leading and trailing spaces from this
                field.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a mobile screen view. You
                can also capture screen events directly with [our iOS
                SDK](https://customer.io/docs/api/track/).
              type: string
              enum:
                - screen
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: homepage
            type: screen
            anonymous_id: abc123
    dedupe_id:
      description: >-
        An identifier used to deduplicate events. This value must be a
        [ULID](https://github.com/ulid/spec). If an event has the same value as
        an event we previously received, we won't show or process the duplicate.
        Note - our Python and Ruby libraries do not pass this id.
      type: string
      format: ulid
    eventsRequest:
      oneOf:
        - title: Standard event
          type: object
          required:
            - name
          properties:
            name:
              description: >-
                The name of the event. This is how you'll reference the event in
                campaigns or segments.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Sets the event type. If your event isn't a `page` or `screen`
                type event, we automatically set this property to `event`.
              type: string
              enum:
                - event
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.


                **NOTE**: Events with a timestamp in the past 72 hours can
                trigger campaigns.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: liquid merge data
              properties:
                recipient:
                  description: The recipient address for an action.
                  type: string
                  example: '{{customer.email}}'
                from_address:
                  description: >-
                    The address you want to trigger messages from, overriding
                    the `from` field in emails triggered by the event.
                  type: string
                  format: email
                reply_to:
                  description: >-
                    The address that receives replies for the message, if
                    applicable.
                  type: string
                  example: replyto@example.com
          example:
            name: purchase
            data:
              price: 23.45
              product: socks
        - title: Page view
          type: object
          required:
            - name
            - type
          properties:
            name:
              description: >-
                The name of the event. This is how you'll reference the event in
                campaigns or segments.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a page view. See ["page
                view" events](https://customer.io/docs/api/track/), for more
                information.
              type: string
              enum:
                - page
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: https://mysite.com/page
            type: page
            data:
              first_name: Cool
              last_name: Person
        - title: Mobile screen view
          type: object
          required:
            - anonymous_id
            - name
            - type
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. In general, this should be the name of
                the screen or deep link path that a person viewed, making it
                easy to segment your audience or trigger campaigns from these
                events. Make sure you trim leading and trailing spaces from this
                field.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a mobile screen view. You
                can also capture screen events directly with [our iOS
                SDK](https://customer.io/docs/api/track/).
              type: string
              enum:
                - screen
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: homepage
            type: screen
            data:
              from: push-notification
    activityObject:
      type: object
      properties:
        customer_id:
          description: >-
            The ID of a customer profile, analogous to a "person" in the UI. If
            your workspace supports multiple identifiers (email and ID), this
            value can be null.
          type: string
          nullable: true
          example: '42'
        customer_identifiers:
          description: >
            Contains identifiers for the person represented in a response—`id`,
            `cio_id`, and `email` (if your workspace uses the *Email or ID*
            setting). If the person's `id` or `email` is not set, the value will
            be null.


            We recommend that you use this object rather than the less
            descriptive `customer_id`.
          type: object
          required:
            - email
            - id
            - cio_id
          properties:
            email:
              description: A person's email address, if set.
              type: string
              nullable: true
              format: email
              example: test@example.com
            id:
              description: >-
                A person's unique ID, if set. This is the same as the
                `customer_id` if present.
              type: string
              nullable: true
              example: 2
            cio_id:
              description: >-
                A unique identifier set by Customer.io, used to reference a
                person if you want to update their identifiers.
              type: string
              example: a3000001
        data:
          oneOf:
            - title: Message delivery
              type: object
              properties:
                delivered:
                  description: The date-time when the message was delivered, if applicable.
                  type: integer
                  format: unix timestamp
                  nullable: true
                delivery_id:
                  description: The message ID.
                  type: string
                opened:
                  description: >-
                    Indicates whether or not a customer opened a message, if the
                    message was delivered.
                  type: boolean
                  nullable: true
              example:
                delivery_id: ZAIAAVTJVG0QcCok0-0ZKj6yiQ==
                opened: null
                delivered: null
            - title: Attribute change
              description: The name of the object is the attribute that changed.
              type: object
              additionalProperties:
                x-additionalPropertyName: Attribute Name
                type: object
                properties:
                  from:
                    description: >-
                      The old attribute value. If empty, the customer probably
                      didn't bear the attribute before this action.
                    type: string
                  to:
                    description: The new attribute value.
                    type: string
              example:
                email:
                  from: newPerson@example.com
                  to: newPerson@customer.io
        delivery_id:
          description: The message ID.
          type: string
          example: ZAIAAVTJVG0QcCok0-0ZKj6yiQ==
        delivery_type:
          description: The recipient device, if applicable.
          type: string
          enum:
            - ios
            - android
            - email
            - phone
          example: email
        id:
          description: The identifier for the action.
          type: string
          example: 01AK4N8V8G8KVA4HN8Y50CCZ59
        timestamp:
          description: The date and time when the action occurred.
          type: integer
          format: unix timestamp
          example: 1397566226
        type:
          description: >-
            The type of activity. Types with `_o:<object_type_id>` are for
            objects and types with `_r:<object_type_id>` are for relationships.
          type: string
          enum:
            - attempted_action
            - attribute_change
            - failed_attribute_change
            - failed_batch_update
            - skipped_update
            - failed_query_collection
            - event
            - failed_event
            - page
            - drafted_email
            - attempted_email
            - sent_email
            - delivered_email
            - opened_email
            - clicked_email
            - converted_email
            - bounced_email
            - failed_email
            - unsubscribed_email
            - topic_unsubscribed_email
            - spammed_email
            - dropped_email
            - undeliverable_email
            - drafted_action
            - delivered_action
            - bounced_action
            - sent_action
            - opened_action
            - clicked_action
            - failed_action
            - converted_action
            - device_change
            - deferred_email
            - unsubscribed_action
            - dropped_action
            - undeliverable_action
            - deferred_action
            - profile_create
            - profile_delete
            - profile_merge
            - anon_merge
            - screen
            - webhook_event
            - add_relationship
            - delete_relationship
            - _o:<object_type_id>:create
            - _o:<object_type_id>:attribute_change
            - _o:<object_type_id>:failed_attribute_change
            - _o:<object_type_id>:delete
            - _o:<object_type_id>:add_relationship
            - _o:<object_type_id>:delete_relationship
            - _r:<object_type_id>:attribute_change
            - _r:<object_type_id>:failed_attribute_change
            - failed_object_journeys
          example: sent_email
    delivery_id:
      description: The instance of a message sent to a person.
      type: string
      example: ZAIAAVTJVG0QcCok0-0ZKj6yiQ==
    activityTypes:
      description: >-
        The type of activity. Types with `_o:<object_type_id>` are for objects
        and types with `_r:<object_type_id>` are for relationships.
      type: string
      enum:
        - attempted_action
        - attribute_change
        - failed_attribute_change
        - failed_batch_update
        - skipped_update
        - failed_query_collection
        - event
        - failed_event
        - page
        - drafted_email
        - attempted_email
        - sent_email
        - delivered_email
        - opened_email
        - clicked_email
        - converted_email
        - bounced_email
        - failed_email
        - unsubscribed_email
        - topic_unsubscribed_email
        - spammed_email
        - dropped_email
        - undeliverable_email
        - drafted_action
        - delivered_action
        - bounced_action
        - sent_action
        - opened_action
        - clicked_action
        - failed_action
        - converted_action
        - device_change
        - deferred_email
        - unsubscribed_action
        - dropped_action
        - undeliverable_action
        - deferred_action
        - profile_create
        - profile_delete
        - profile_merge
        - anon_merge
        - screen
        - webhook_event
        - add_relationship
        - delete_relationship
        - _o:<object_type_id>:create
        - _o:<object_type_id>:attribute_change
        - _o:<object_type_id>:failed_attribute_change
        - _o:<object_type_id>:delete
        - _o:<object_type_id>:add_relationship
        - _o:<object_type_id>:delete_relationship
        - _r:<object_type_id>:attribute_change
        - _r:<object_type_id>:failed_attribute_change
        - failed_object_journeys
      example: sent_email
    attributeChangeAction:
      type: object
      properties:
        from:
          description: >-
            The old attribute value. If empty, the customer probably didn't bear
            the attribute before this action.
          type: string
        to:
          description: The new attribute value.
          type: string
    segmentAudienceFilter:
      title: segment
      description: Provide the `id` of a segment containing people you want to search for.
      type: object
      properties:
        id:
          description: The ID of the segment you want to return people from.
          type: integer
          example: 4
    attributeAudienceFilter:
      title: attribute
      description: Filter your audience by attribute.
      type: object
      required:
        - field
        - operator
      properties:
        field:
          description: The name of the attribute you want to filter against.
          type: string
          example: first_name
        operator:
          description: >-
            Determine how to evaluate criteria against the field—`exists`
            returns results if a person in the audience has the attribute; `eq`
            returns results if the audience has the attribute and the attribute
            has the `value` you specify.
          type: string
          enum:
            - eq
            - exists
        value:
          description: >-
            The value you want to match for this attribute. You must include a
            value if you use the `eq` operator.
          type: string
      example:
        field: unsubscribed
        operator: eq
        value: true
    simpleAudienceFilter:
      anyOf:
        - title: segment
          description: Filter for people who belong to a segment.
          type: object
          properties:
            segment:
              title: segment
              description: >-
                Provide the `id` of a segment containing people you want to
                search for.
              type: object
              properties:
                id:
                  description: The ID of the segment you want to return people from.
                  type: integer
                  example: 4
        - title: audience
          description: filter for people who have an attribute or an attribute value.
          type: object
          properties:
            attribute:
              title: attribute
              description: Filter your audience by attribute.
              type: object
              required:
                - field
                - operator
              properties:
                field:
                  description: The name of the attribute you want to filter against.
                  type: string
                  example: first_name
                operator:
                  description: >-
                    Determine how to evaluate criteria against the
                    field—`exists` returns results if a person in the audience
                    has the attribute; `eq` returns results if the audience has
                    the attribute and the attribute has the `value` you specify.
                  type: string
                  enum:
                    - eq
                    - exists
                value:
                  description: >-
                    The value you want to match for this attribute. You must
                    include a value if you use the `eq` operator.
                  type: string
              example:
                field: unsubscribed
                operator: eq
                value: true
    complexAudienceFilter:
      title: People Filter
      description: >-
        When filtering for people, you can use `and` and `or` arrays to
        determine the logic for a group of filter conditions. `not` reverses the
        filter condition and matches when the condition is false. `segment` and
        `attribute` represent the individual conditions you can filter a group
        of people for.
      type: object
      properties:
        and:
          description: Returns results matching *all* conditions.
          type: array
          items:
            anyOf:
              - title: segment
                description: Filter for people who belong to a segment.
                type: object
                properties:
                  segment:
                    title: segment
                    description: >-
                      Provide the `id` of a segment containing people you want
                      to search for.
                    type: object
                    properties:
                      id:
                        description: The ID of the segment you want to return people from.
                        type: integer
                        example: 4
              - title: audience
                description: filter for people who have an attribute or an attribute value.
                type: object
                properties:
                  attribute:
                    title: attribute
                    description: Filter your audience by attribute.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: first_name
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if a person in the
                          audience has the attribute; `eq` returns results if
                          the audience has the attribute and the attribute has
                          the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: unsubscribed
                      operator: eq
                      value: true
        or:
          description: Returns results matching *any* conditions.
          type: array
          items:
            anyOf:
              - title: segment
                description: Filter for people who belong to a segment.
                type: object
                properties:
                  segment:
                    title: segment
                    description: >-
                      Provide the `id` of a segment containing people you want
                      to search for.
                    type: object
                    properties:
                      id:
                        description: The ID of the segment you want to return people from.
                        type: integer
                        example: 4
              - title: audience
                description: filter for people who have an attribute or an attribute value.
                type: object
                properties:
                  attribute:
                    title: attribute
                    description: Filter your audience by attribute.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: first_name
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if a person in the
                          audience has the attribute; `eq` returns results if
                          the audience has the attribute and the attribute has
                          the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: unsubscribed
                      operator: eq
                      value: true
        not:
          description: >-
            Returns results if a condition is false. While and/or support an
            array of items, `not` supports a single filter object.
          oneOf:
            - title: and
              type: object
              properties:
                and:
                  description: Match *all* conditions to return results.
                  type: array
                  items:
                    anyOf:
                      - title: segment
                        description: Filter for people who belong to a segment.
                        type: object
                        properties:
                          segment:
                            title: segment
                            description: >-
                              Provide the `id` of a segment containing people
                              you want to search for.
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of the segment you want to return
                                  people from.
                                type: integer
                                example: 4
                      - title: audience
                        description: >-
                          filter for people who have an attribute or an
                          attribute value.
                        type: object
                        properties:
                          attribute:
                            title: attribute
                            description: Filter your audience by attribute.
                            type: object
                            required:
                              - field
                              - operator
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: first_name
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if a person in
                                  the audience has the attribute; `eq` returns
                                  results if the audience has the attribute and
                                  the attribute has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                            example:
                              field: unsubscribed
                              operator: eq
                              value: true
            - title: or
              type: object
              properties:
                or:
                  description: Match *any* condition to return results.
                  type: array
                  items:
                    anyOf:
                      - title: segment
                        description: Filter for people who belong to a segment.
                        type: object
                        properties:
                          segment:
                            title: segment
                            description: >-
                              Provide the `id` of a segment containing people
                              you want to search for.
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of the segment you want to return
                                  people from.
                                type: integer
                                example: 4
                      - title: audience
                        description: >-
                          filter for people who have an attribute or an
                          attribute value.
                        type: object
                        properties:
                          attribute:
                            title: attribute
                            description: Filter your audience by attribute.
                            type: object
                            required:
                              - field
                              - operator
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: first_name
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if a person in
                                  the audience has the attribute; `eq` returns
                                  results if the audience has the attribute and
                                  the attribute has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                            example:
                              field: unsubscribed
                              operator: eq
                              value: true
            - title: segment
              type: object
              properties:
                segment:
                  title: segment
                  description: >-
                    Provide the `id` of a segment containing people you want to
                    search for.
                  type: object
                  properties:
                    id:
                      description: The ID of the segment you want to return people from.
                      type: integer
                      example: 4
            - title: attribute
              type: object
              properties:
                attribute:
                  title: attribute
                  description: Filter your audience by attribute.
                  type: object
                  required:
                    - field
                    - operator
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: first_name
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if a person in the
                        audience has the attribute; `eq` returns results if the
                        audience has the attribute and the attribute has the
                        `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                  example:
                    field: unsubscribed
                    operator: eq
                    value: true
        segment:
          title: segment
          description: >-
            Provide the `id` of a segment containing people you want to search
            for.
          type: object
          properties:
            id:
              description: The ID of the segment you want to return people from.
              type: integer
              example: 4
        attribute:
          title: attribute
          description: Filter your audience by attribute.
          type: object
          required:
            - field
            - operator
          properties:
            field:
              description: The name of the attribute you want to filter against.
              type: string
              example: first_name
            operator:
              description: >-
                Determine how to evaluate criteria against the field—`exists`
                returns results if a person in the audience has the attribute;
                `eq` returns results if the audience has the attribute and the
                attribute has the `value` you specify.
              type: string
              enum:
                - eq
                - exists
            value:
              description: >-
                The value you want to match for this attribute. You must include
                a value if you use the `eq` operator.
              type: string
          example:
            field: unsubscribed
            operator: eq
            value: true
    andAudienceFilter:
      title: and
      type: object
      properties:
        and:
          description: Match *all* conditions to return results.
          type: array
          items:
            type: object
            properties:
              or:
                description: Returns results matching *any* conditions.
                type: array
                items:
                  anyOf:
                    - title: segment
                      description: Filter for people who belong to a segment.
                      type: object
                      properties:
                        segment:
                          title: segment
                          description: >-
                            Provide the `id` of a segment containing people you
                            want to search for.
                          type: object
                          properties:
                            id:
                              description: >-
                                The ID of the segment you want to return people
                                from.
                              type: integer
                              example: 4
                    - title: audience
                      description: >-
                        filter for people who have an attribute or an attribute
                        value.
                      type: object
                      properties:
                        attribute:
                          title: attribute
                          description: Filter your audience by attribute.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: first_name
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if a person in
                                the audience has the attribute; `eq` returns
                                results if the audience has the attribute and
                                the attribute has the `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: unsubscribed
                            operator: eq
                            value: true
              not:
                description: >-
                  Returns results if a condition is false. While and/or support
                  an array of items, `not` supports a single filter object.
                oneOf:
                  - title: and
                    type: object
                    properties:
                      and:
                        description: Match *all* conditions to return results.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                  - title: or
                    type: object
                    properties:
                      or:
                        description: Match *any* condition to return results.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                  - title: segment
                    type: object
                    properties:
                      segment:
                        title: segment
                        description: >-
                          Provide the `id` of a segment containing people you
                          want to search for.
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of the segment you want to return people
                              from.
                            type: integer
                            example: 4
                  - title: attribute
                    type: object
                    properties:
                      attribute:
                        title: attribute
                        description: Filter your audience by attribute.
                        type: object
                        required:
                          - field
                          - operator
                        properties:
                          field:
                            description: >-
                              The name of the attribute you want to filter
                              against.
                            type: string
                            example: first_name
                          operator:
                            description: >-
                              Determine how to evaluate criteria against the
                              field—`exists` returns results if a person in the
                              audience has the attribute; `eq` returns results
                              if the audience has the attribute and the
                              attribute has the `value` you specify.
                            type: string
                            enum:
                              - eq
                              - exists
                          value:
                            description: >-
                              The value you want to match for this attribute.
                              You must include a value if you use the `eq`
                              operator.
                            type: string
                        example:
                          field: unsubscribed
                          operator: eq
                          value: true
              segment:
                title: segment
                description: >-
                  Provide the `id` of a segment containing people you want to
                  search for.
                type: object
                properties:
                  id:
                    description: The ID of the segment you want to return people from.
                    type: integer
                    example: 4
              attribute:
                title: attribute
                description: Filter your audience by attribute.
                type: object
                required:
                  - field
                  - operator
                properties:
                  field:
                    description: The name of the attribute you want to filter against.
                    type: string
                    example: first_name
                  operator:
                    description: >-
                      Determine how to evaluate criteria against the
                      field—`exists` returns results if a person in the audience
                      has the attribute; `eq` returns results if the audience
                      has the attribute and the attribute has the `value` you
                      specify.
                    type: string
                    enum:
                      - eq
                      - exists
                  value:
                    description: >-
                      The value you want to match for this attribute. You must
                      include a value if you use the `eq` operator.
                    type: string
                example:
                  field: unsubscribed
                  operator: eq
                  value: true
    orAudienceFilter:
      title: or
      type: object
      properties:
        or:
          description: Match *any* condition to return results.
          type: array
          items:
            type: object
            properties:
              and:
                description: Returns results matching *all* conditions.
                type: array
                items:
                  anyOf:
                    - title: segment
                      description: Filter for people who belong to a segment.
                      type: object
                      properties:
                        segment:
                          title: segment
                          description: >-
                            Provide the `id` of a segment containing people you
                            want to search for.
                          type: object
                          properties:
                            id:
                              description: >-
                                The ID of the segment you want to return people
                                from.
                              type: integer
                              example: 4
                    - title: audience
                      description: >-
                        filter for people who have an attribute or an attribute
                        value.
                      type: object
                      properties:
                        attribute:
                          title: attribute
                          description: Filter your audience by attribute.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: first_name
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if a person in
                                the audience has the attribute; `eq` returns
                                results if the audience has the attribute and
                                the attribute has the `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: unsubscribed
                            operator: eq
                            value: true
              not:
                description: >-
                  Returns results if a condition is false. While and/or support
                  an array of items, `not` supports a single filter object.
                oneOf:
                  - title: and
                    type: object
                    properties:
                      and:
                        description: Match *all* conditions to return results.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                  - title: or
                    type: object
                    properties:
                      or:
                        description: Match *any* condition to return results.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                  - title: segment
                    type: object
                    properties:
                      segment:
                        title: segment
                        description: >-
                          Provide the `id` of a segment containing people you
                          want to search for.
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of the segment you want to return people
                              from.
                            type: integer
                            example: 4
                  - title: attribute
                    type: object
                    properties:
                      attribute:
                        title: attribute
                        description: Filter your audience by attribute.
                        type: object
                        required:
                          - field
                          - operator
                        properties:
                          field:
                            description: >-
                              The name of the attribute you want to filter
                              against.
                            type: string
                            example: first_name
                          operator:
                            description: >-
                              Determine how to evaluate criteria against the
                              field—`exists` returns results if a person in the
                              audience has the attribute; `eq` returns results
                              if the audience has the attribute and the
                              attribute has the `value` you specify.
                            type: string
                            enum:
                              - eq
                              - exists
                          value:
                            description: >-
                              The value you want to match for this attribute.
                              You must include a value if you use the `eq`
                              operator.
                            type: string
                        example:
                          field: unsubscribed
                          operator: eq
                          value: true
              segment:
                title: segment
                description: >-
                  Provide the `id` of a segment containing people you want to
                  search for.
                type: object
                properties:
                  id:
                    description: The ID of the segment you want to return people from.
                    type: integer
                    example: 4
              attribute:
                title: attribute
                description: Filter your audience by attribute.
                type: object
                required:
                  - field
                  - operator
                properties:
                  field:
                    description: The name of the attribute you want to filter against.
                    type: string
                    example: first_name
                  operator:
                    description: >-
                      Determine how to evaluate criteria against the
                      field—`exists` returns results if a person in the audience
                      has the attribute; `eq` returns results if the audience
                      has the attribute and the attribute has the `value` you
                      specify.
                    type: string
                    enum:
                      - eq
                      - exists
                  value:
                    description: >-
                      The value you want to match for this attribute. You must
                      include a value if you use the `eq` operator.
                    type: string
                example:
                  field: unsubscribed
                  operator: eq
                  value: true
    notAudienceFilter:
      title: not
      description: >-
        Returns results if a condition is false. While and/or support an array
        of items, `not` supports a single filter object.
      oneOf:
        - title: and
          type: object
          properties:
            and:
              description: Match *all* conditions to return results.
              type: array
              items:
                title: People Filter
                description: >-
                  When filtering for people, you can use `and` and `or` arrays
                  to determine the logic for a group of filter conditions. `not`
                  reverses the filter condition and matches when the condition
                  is false. `segment` and `attribute` represent the individual
                  conditions you can filter a group of people for.
                type: object
                properties:
                  and:
                    description: Returns results matching *all* conditions.
                    type: array
                    items:
                      anyOf:
                        - title: segment
                          description: Filter for people who belong to a segment.
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: audience
                          description: >-
                            filter for people who have an attribute or an
                            attribute value.
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                  or:
                    description: Returns results matching *any* conditions.
                    type: array
                    items:
                      anyOf:
                        - title: segment
                          description: Filter for people who belong to a segment.
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: audience
                          description: >-
                            filter for people who have an attribute or an
                            attribute value.
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                  not:
                    description: >-
                      Returns results if a condition is false. While and/or
                      support an array of items, `not` supports a single filter
                      object.
                    oneOf:
                      - title: and
                        type: object
                        properties:
                          and:
                            description: Match *all* conditions to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: or
                        type: object
                        properties:
                          or:
                            description: Match *any* condition to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: segment
                        type: object
                        properties:
                          segment:
                            title: segment
                            description: >-
                              Provide the `id` of a segment containing people
                              you want to search for.
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of the segment you want to return
                                  people from.
                                type: integer
                                example: 4
                      - title: attribute
                        type: object
                        properties:
                          attribute:
                            title: attribute
                            description: Filter your audience by attribute.
                            type: object
                            required:
                              - field
                              - operator
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: first_name
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if a person in
                                  the audience has the attribute; `eq` returns
                                  results if the audience has the attribute and
                                  the attribute has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                            example:
                              field: unsubscribed
                              operator: eq
                              value: true
                  segment:
                    title: segment
                    description: >-
                      Provide the `id` of a segment containing people you want
                      to search for.
                    type: object
                    properties:
                      id:
                        description: The ID of the segment you want to return people from.
                        type: integer
                        example: 4
                  attribute:
                    title: attribute
                    description: Filter your audience by attribute.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: first_name
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if a person in the
                          audience has the attribute; `eq` returns results if
                          the audience has the attribute and the attribute has
                          the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: unsubscribed
                      operator: eq
                      value: true
        - title: or
          type: object
          properties:
            or:
              description: Match *any* condition to return results.
              type: array
              items:
                title: People Filter
                description: >-
                  When filtering for people, you can use `and` and `or` arrays
                  to determine the logic for a group of filter conditions. `not`
                  reverses the filter condition and matches when the condition
                  is false. `segment` and `attribute` represent the individual
                  conditions you can filter a group of people for.
                type: object
                properties:
                  and:
                    description: Returns results matching *all* conditions.
                    type: array
                    items:
                      anyOf:
                        - title: segment
                          description: Filter for people who belong to a segment.
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: audience
                          description: >-
                            filter for people who have an attribute or an
                            attribute value.
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                  or:
                    description: Returns results matching *any* conditions.
                    type: array
                    items:
                      anyOf:
                        - title: segment
                          description: Filter for people who belong to a segment.
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: audience
                          description: >-
                            filter for people who have an attribute or an
                            attribute value.
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                  not:
                    description: >-
                      Returns results if a condition is false. While and/or
                      support an array of items, `not` supports a single filter
                      object.
                    oneOf:
                      - title: and
                        type: object
                        properties:
                          and:
                            description: Match *all* conditions to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: or
                        type: object
                        properties:
                          or:
                            description: Match *any* condition to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: segment
                        type: object
                        properties:
                          segment:
                            title: segment
                            description: >-
                              Provide the `id` of a segment containing people
                              you want to search for.
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of the segment you want to return
                                  people from.
                                type: integer
                                example: 4
                      - title: attribute
                        type: object
                        properties:
                          attribute:
                            title: attribute
                            description: Filter your audience by attribute.
                            type: object
                            required:
                              - field
                              - operator
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: first_name
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if a person in
                                  the audience has the attribute; `eq` returns
                                  results if the audience has the attribute and
                                  the attribute has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                            example:
                              field: unsubscribed
                              operator: eq
                              value: true
                  segment:
                    title: segment
                    description: >-
                      Provide the `id` of a segment containing people you want
                      to search for.
                    type: object
                    properties:
                      id:
                        description: The ID of the segment you want to return people from.
                        type: integer
                        example: 4
                  attribute:
                    title: attribute
                    description: Filter your audience by attribute.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: first_name
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if a person in the
                          audience has the attribute; `eq` returns results if
                          the audience has the attribute and the attribute has
                          the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: unsubscribed
                      operator: eq
                      value: true
        - title: segment
          type: object
          properties:
            segment:
              title: segment
              description: >-
                Provide the `id` of a segment containing people you want to
                search for.
              type: object
              properties:
                id:
                  description: The ID of the segment you want to return people from.
                  type: integer
                  example: 4
        - title: attribute
          type: object
          properties:
            attribute:
              title: attribute
              description: Filter your audience by attribute.
              type: object
              required:
                - field
                - operator
              properties:
                field:
                  description: The name of the attribute you want to filter against.
                  type: string
                  example: first_name
                operator:
                  description: >-
                    Determine how to evaluate criteria against the
                    field—`exists` returns results if a person in the audience
                    has the attribute; `eq` returns results if the audience has
                    the attribute and the attribute has the `value` you specify.
                  type: string
                  enum:
                    - eq
                    - exists
                value:
                  description: >-
                    The value you want to match for this attribute. You must
                    include a value if you use the `eq` operator.
                  type: string
              example:
                field: unsubscribed
                operator: eq
                value: true
    audienceFilter:
      title: Audience Filter
      description: >
        When filtering for people, you can use `and` and `or` arrays to
        determine the logic for a group of filter conditions. `not` reverses the
        filter condition and matches when the condition is false. `segment` and
        `attribute` represent the individual conditions you can filter a group
        of people for.


        The top level of this object can only contain a single property, but you
        can nest `and` and `or` properties to produce complex filters.
      oneOf:
        - title: and
          type: object
          properties:
            and:
              description: Match *all* conditions to return results.
              type: array
              items:
                type: object
                properties:
                  or:
                    description: Returns results matching *any* conditions.
                    type: array
                    items:
                      anyOf:
                        - title: segment
                          description: Filter for people who belong to a segment.
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: audience
                          description: >-
                            filter for people who have an attribute or an
                            attribute value.
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                  not:
                    description: >-
                      Returns results if a condition is false. While and/or
                      support an array of items, `not` supports a single filter
                      object.
                    oneOf:
                      - title: and
                        type: object
                        properties:
                          and:
                            description: Match *all* conditions to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: or
                        type: object
                        properties:
                          or:
                            description: Match *any* condition to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: segment
                        type: object
                        properties:
                          segment:
                            title: segment
                            description: >-
                              Provide the `id` of a segment containing people
                              you want to search for.
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of the segment you want to return
                                  people from.
                                type: integer
                                example: 4
                      - title: attribute
                        type: object
                        properties:
                          attribute:
                            title: attribute
                            description: Filter your audience by attribute.
                            type: object
                            required:
                              - field
                              - operator
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: first_name
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if a person in
                                  the audience has the attribute; `eq` returns
                                  results if the audience has the attribute and
                                  the attribute has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                            example:
                              field: unsubscribed
                              operator: eq
                              value: true
                  segment:
                    title: segment
                    description: >-
                      Provide the `id` of a segment containing people you want
                      to search for.
                    type: object
                    properties:
                      id:
                        description: The ID of the segment you want to return people from.
                        type: integer
                        example: 4
                  attribute:
                    title: attribute
                    description: Filter your audience by attribute.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: first_name
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if a person in the
                          audience has the attribute; `eq` returns results if
                          the audience has the attribute and the attribute has
                          the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: unsubscribed
                      operator: eq
                      value: true
        - title: or
          type: object
          properties:
            or:
              description: Match *any* condition to return results.
              type: array
              items:
                type: object
                properties:
                  and:
                    description: Returns results matching *all* conditions.
                    type: array
                    items:
                      anyOf:
                        - title: segment
                          description: Filter for people who belong to a segment.
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: audience
                          description: >-
                            filter for people who have an attribute or an
                            attribute value.
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                  not:
                    description: >-
                      Returns results if a condition is false. While and/or
                      support an array of items, `not` supports a single filter
                      object.
                    oneOf:
                      - title: and
                        type: object
                        properties:
                          and:
                            description: Match *all* conditions to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: or
                        type: object
                        properties:
                          or:
                            description: Match *any* condition to return results.
                            type: array
                            items:
                              anyOf:
                                - title: segment
                                  description: Filter for people who belong to a segment.
                                  type: object
                                  properties:
                                    segment:
                                      title: segment
                                      description: >-
                                        Provide the `id` of a segment containing
                                        people you want to search for.
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of the segment you want to return
                                            people from.
                                          type: integer
                                          example: 4
                                - title: audience
                                  description: >-
                                    filter for people who have an attribute or
                                    an attribute value.
                                  type: object
                                  properties:
                                    attribute:
                                      title: attribute
                                      description: Filter your audience by attribute.
                                      type: object
                                      required:
                                        - field
                                        - operator
                                      properties:
                                        field:
                                          description: >-
                                            The name of the attribute you want to
                                            filter against.
                                          type: string
                                          example: first_name
                                        operator:
                                          description: >-
                                            Determine how to evaluate criteria
                                            against the field—`exists` returns
                                            results if a person in the audience has
                                            the attribute; `eq` returns results if
                                            the audience has the attribute and the
                                            attribute has the `value` you specify.
                                          type: string
                                          enum:
                                            - eq
                                            - exists
                                        value:
                                          description: >-
                                            The value you want to match for this
                                            attribute. You must include a value if
                                            you use the `eq` operator.
                                          type: string
                                      example:
                                        field: unsubscribed
                                        operator: eq
                                        value: true
                      - title: segment
                        type: object
                        properties:
                          segment:
                            title: segment
                            description: >-
                              Provide the `id` of a segment containing people
                              you want to search for.
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of the segment you want to return
                                  people from.
                                type: integer
                                example: 4
                      - title: attribute
                        type: object
                        properties:
                          attribute:
                            title: attribute
                            description: Filter your audience by attribute.
                            type: object
                            required:
                              - field
                              - operator
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: first_name
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if a person in
                                  the audience has the attribute; `eq` returns
                                  results if the audience has the attribute and
                                  the attribute has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                            example:
                              field: unsubscribed
                              operator: eq
                              value: true
                  segment:
                    title: segment
                    description: >-
                      Provide the `id` of a segment containing people you want
                      to search for.
                    type: object
                    properties:
                      id:
                        description: The ID of the segment you want to return people from.
                        type: integer
                        example: 4
                  attribute:
                    title: attribute
                    description: Filter your audience by attribute.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: first_name
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if a person in the
                          audience has the attribute; `eq` returns results if
                          the audience has the attribute and the attribute has
                          the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: unsubscribed
                      operator: eq
                      value: true
        - title: not
          description: >-
            Returns results if a condition is false. While and/or support an
            array of items, `not` supports a single filter object.
          oneOf:
            - title: and
              type: object
              properties:
                and:
                  description: Match *all* conditions to return results.
                  type: array
                  items:
                    title: People Filter
                    description: >-
                      When filtering for people, you can use `and` and `or`
                      arrays to determine the logic for a group of filter
                      conditions. `not` reverses the filter condition and
                      matches when the condition is false. `segment` and
                      `attribute` represent the individual conditions you can
                      filter a group of people for.
                    type: object
                    properties:
                      and:
                        description: Returns results matching *all* conditions.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                      or:
                        description: Returns results matching *any* conditions.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                      not:
                        description: >-
                          Returns results if a condition is false. While and/or
                          support an array of items, `not` supports a single
                          filter object.
                        oneOf:
                          - title: and
                            type: object
                            properties:
                              and:
                                description: Match *all* conditions to return results.
                                type: array
                                items:
                                  anyOf:
                                    - title: segment
                                      description: >-
                                        Filter for people who belong to a
                                        segment.
                                      type: object
                                      properties:
                                        segment:
                                          title: segment
                                          description: >-
                                            Provide the `id` of a segment containing
                                            people you want to search for.
                                          type: object
                                          properties:
                                            id:
                                              description: >-
                                                The ID of the segment you want to return
                                                people from.
                                              type: integer
                                              example: 4
                                    - title: audience
                                      description: >-
                                        filter for people who have an attribute
                                        or an attribute value.
                                      type: object
                                      properties:
                                        attribute:
                                          title: attribute
                                          description: Filter your audience by attribute.
                                          type: object
                                          required:
                                            - field
                                            - operator
                                          properties:
                                            field:
                                              description: >-
                                                The name of the attribute you want to
                                                filter against.
                                              type: string
                                              example: first_name
                                            operator:
                                              description: >-
                                                Determine how to evaluate criteria
                                                against the field—`exists` returns
                                                results if a person in the audience has
                                                the attribute; `eq` returns results if
                                                the audience has the attribute and the
                                                attribute has the `value` you specify.
                                              type: string
                                              enum:
                                                - eq
                                                - exists
                                            value:
                                              description: >-
                                                The value you want to match for this
                                                attribute. You must include a value if
                                                you use the `eq` operator.
                                              type: string
                                          example:
                                            field: unsubscribed
                                            operator: eq
                                            value: true
                          - title: or
                            type: object
                            properties:
                              or:
                                description: Match *any* condition to return results.
                                type: array
                                items:
                                  anyOf:
                                    - title: segment
                                      description: >-
                                        Filter for people who belong to a
                                        segment.
                                      type: object
                                      properties:
                                        segment:
                                          title: segment
                                          description: >-
                                            Provide the `id` of a segment containing
                                            people you want to search for.
                                          type: object
                                          properties:
                                            id:
                                              description: >-
                                                The ID of the segment you want to return
                                                people from.
                                              type: integer
                                              example: 4
                                    - title: audience
                                      description: >-
                                        filter for people who have an attribute
                                        or an attribute value.
                                      type: object
                                      properties:
                                        attribute:
                                          title: attribute
                                          description: Filter your audience by attribute.
                                          type: object
                                          required:
                                            - field
                                            - operator
                                          properties:
                                            field:
                                              description: >-
                                                The name of the attribute you want to
                                                filter against.
                                              type: string
                                              example: first_name
                                            operator:
                                              description: >-
                                                Determine how to evaluate criteria
                                                against the field—`exists` returns
                                                results if a person in the audience has
                                                the attribute; `eq` returns results if
                                                the audience has the attribute and the
                                                attribute has the `value` you specify.
                                              type: string
                                              enum:
                                                - eq
                                                - exists
                                            value:
                                              description: >-
                                                The value you want to match for this
                                                attribute. You must include a value if
                                                you use the `eq` operator.
                                              type: string
                                          example:
                                            field: unsubscribed
                                            operator: eq
                                            value: true
                          - title: segment
                            type: object
                            properties:
                              segment:
                                title: segment
                                description: >-
                                  Provide the `id` of a segment containing
                                  people you want to search for.
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of the segment you want to return
                                      people from.
                                    type: integer
                                    example: 4
                          - title: attribute
                            type: object
                            properties:
                              attribute:
                                title: attribute
                                description: Filter your audience by attribute.
                                type: object
                                required:
                                  - field
                                  - operator
                                properties:
                                  field:
                                    description: >-
                                      The name of the attribute you want to
                                      filter against.
                                    type: string
                                    example: first_name
                                  operator:
                                    description: >-
                                      Determine how to evaluate criteria against
                                      the field—`exists` returns results if a
                                      person in the audience has the attribute;
                                      `eq` returns results if the audience has
                                      the attribute and the attribute has the
                                      `value` you specify.
                                    type: string
                                    enum:
                                      - eq
                                      - exists
                                  value:
                                    description: >-
                                      The value you want to match for this
                                      attribute. You must include a value if you
                                      use the `eq` operator.
                                    type: string
                                example:
                                  field: unsubscribed
                                  operator: eq
                                  value: true
                      segment:
                        title: segment
                        description: >-
                          Provide the `id` of a segment containing people you
                          want to search for.
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of the segment you want to return people
                              from.
                            type: integer
                            example: 4
                      attribute:
                        title: attribute
                        description: Filter your audience by attribute.
                        type: object
                        required:
                          - field
                          - operator
                        properties:
                          field:
                            description: >-
                              The name of the attribute you want to filter
                              against.
                            type: string
                            example: first_name
                          operator:
                            description: >-
                              Determine how to evaluate criteria against the
                              field—`exists` returns results if a person in the
                              audience has the attribute; `eq` returns results
                              if the audience has the attribute and the
                              attribute has the `value` you specify.
                            type: string
                            enum:
                              - eq
                              - exists
                          value:
                            description: >-
                              The value you want to match for this attribute.
                              You must include a value if you use the `eq`
                              operator.
                            type: string
                        example:
                          field: unsubscribed
                          operator: eq
                          value: true
            - title: or
              type: object
              properties:
                or:
                  description: Match *any* condition to return results.
                  type: array
                  items:
                    title: People Filter
                    description: >-
                      When filtering for people, you can use `and` and `or`
                      arrays to determine the logic for a group of filter
                      conditions. `not` reverses the filter condition and
                      matches when the condition is false. `segment` and
                      `attribute` represent the individual conditions you can
                      filter a group of people for.
                    type: object
                    properties:
                      and:
                        description: Returns results matching *all* conditions.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                      or:
                        description: Returns results matching *any* conditions.
                        type: array
                        items:
                          anyOf:
                            - title: segment
                              description: Filter for people who belong to a segment.
                              type: object
                              properties:
                                segment:
                                  title: segment
                                  description: >-
                                    Provide the `id` of a segment containing
                                    people you want to search for.
                                  type: object
                                  properties:
                                    id:
                                      description: >-
                                        The ID of the segment you want to return
                                        people from.
                                      type: integer
                                      example: 4
                            - title: audience
                              description: >-
                                filter for people who have an attribute or an
                                attribute value.
                              type: object
                              properties:
                                attribute:
                                  title: attribute
                                  description: Filter your audience by attribute.
                                  type: object
                                  required:
                                    - field
                                    - operator
                                  properties:
                                    field:
                                      description: >-
                                        The name of the attribute you want to
                                        filter against.
                                      type: string
                                      example: first_name
                                    operator:
                                      description: >-
                                        Determine how to evaluate criteria
                                        against the field—`exists` returns
                                        results if a person in the audience has
                                        the attribute; `eq` returns results if
                                        the audience has the attribute and the
                                        attribute has the `value` you specify.
                                      type: string
                                      enum:
                                        - eq
                                        - exists
                                    value:
                                      description: >-
                                        The value you want to match for this
                                        attribute. You must include a value if
                                        you use the `eq` operator.
                                      type: string
                                  example:
                                    field: unsubscribed
                                    operator: eq
                                    value: true
                      not:
                        description: >-
                          Returns results if a condition is false. While and/or
                          support an array of items, `not` supports a single
                          filter object.
                        oneOf:
                          - title: and
                            type: object
                            properties:
                              and:
                                description: Match *all* conditions to return results.
                                type: array
                                items:
                                  anyOf:
                                    - title: segment
                                      description: >-
                                        Filter for people who belong to a
                                        segment.
                                      type: object
                                      properties:
                                        segment:
                                          title: segment
                                          description: >-
                                            Provide the `id` of a segment containing
                                            people you want to search for.
                                          type: object
                                          properties:
                                            id:
                                              description: >-
                                                The ID of the segment you want to return
                                                people from.
                                              type: integer
                                              example: 4
                                    - title: audience
                                      description: >-
                                        filter for people who have an attribute
                                        or an attribute value.
                                      type: object
                                      properties:
                                        attribute:
                                          title: attribute
                                          description: Filter your audience by attribute.
                                          type: object
                                          required:
                                            - field
                                            - operator
                                          properties:
                                            field:
                                              description: >-
                                                The name of the attribute you want to
                                                filter against.
                                              type: string
                                              example: first_name
                                            operator:
                                              description: >-
                                                Determine how to evaluate criteria
                                                against the field—`exists` returns
                                                results if a person in the audience has
                                                the attribute; `eq` returns results if
                                                the audience has the attribute and the
                                                attribute has the `value` you specify.
                                              type: string
                                              enum:
                                                - eq
                                                - exists
                                            value:
                                              description: >-
                                                The value you want to match for this
                                                attribute. You must include a value if
                                                you use the `eq` operator.
                                              type: string
                                          example:
                                            field: unsubscribed
                                            operator: eq
                                            value: true
                          - title: or
                            type: object
                            properties:
                              or:
                                description: Match *any* condition to return results.
                                type: array
                                items:
                                  anyOf:
                                    - title: segment
                                      description: >-
                                        Filter for people who belong to a
                                        segment.
                                      type: object
                                      properties:
                                        segment:
                                          title: segment
                                          description: >-
                                            Provide the `id` of a segment containing
                                            people you want to search for.
                                          type: object
                                          properties:
                                            id:
                                              description: >-
                                                The ID of the segment you want to return
                                                people from.
                                              type: integer
                                              example: 4
                                    - title: audience
                                      description: >-
                                        filter for people who have an attribute
                                        or an attribute value.
                                      type: object
                                      properties:
                                        attribute:
                                          title: attribute
                                          description: Filter your audience by attribute.
                                          type: object
                                          required:
                                            - field
                                            - operator
                                          properties:
                                            field:
                                              description: >-
                                                The name of the attribute you want to
                                                filter against.
                                              type: string
                                              example: first_name
                                            operator:
                                              description: >-
                                                Determine how to evaluate criteria
                                                against the field—`exists` returns
                                                results if a person in the audience has
                                                the attribute; `eq` returns results if
                                                the audience has the attribute and the
                                                attribute has the `value` you specify.
                                              type: string
                                              enum:
                                                - eq
                                                - exists
                                            value:
                                              description: >-
                                                The value you want to match for this
                                                attribute. You must include a value if
                                                you use the `eq` operator.
                                              type: string
                                          example:
                                            field: unsubscribed
                                            operator: eq
                                            value: true
                          - title: segment
                            type: object
                            properties:
                              segment:
                                title: segment
                                description: >-
                                  Provide the `id` of a segment containing
                                  people you want to search for.
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of the segment you want to return
                                      people from.
                                    type: integer
                                    example: 4
                          - title: attribute
                            type: object
                            properties:
                              attribute:
                                title: attribute
                                description: Filter your audience by attribute.
                                type: object
                                required:
                                  - field
                                  - operator
                                properties:
                                  field:
                                    description: >-
                                      The name of the attribute you want to
                                      filter against.
                                    type: string
                                    example: first_name
                                  operator:
                                    description: >-
                                      Determine how to evaluate criteria against
                                      the field—`exists` returns results if a
                                      person in the audience has the attribute;
                                      `eq` returns results if the audience has
                                      the attribute and the attribute has the
                                      `value` you specify.
                                    type: string
                                    enum:
                                      - eq
                                      - exists
                                  value:
                                    description: >-
                                      The value you want to match for this
                                      attribute. You must include a value if you
                                      use the `eq` operator.
                                    type: string
                                example:
                                  field: unsubscribed
                                  operator: eq
                                  value: true
                      segment:
                        title: segment
                        description: >-
                          Provide the `id` of a segment containing people you
                          want to search for.
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of the segment you want to return people
                              from.
                            type: integer
                            example: 4
                      attribute:
                        title: attribute
                        description: Filter your audience by attribute.
                        type: object
                        required:
                          - field
                          - operator
                        properties:
                          field:
                            description: >-
                              The name of the attribute you want to filter
                              against.
                            type: string
                            example: first_name
                          operator:
                            description: >-
                              Determine how to evaluate criteria against the
                              field—`exists` returns results if a person in the
                              audience has the attribute; `eq` returns results
                              if the audience has the attribute and the
                              attribute has the `value` you specify.
                            type: string
                            enum:
                              - eq
                              - exists
                          value:
                            description: >-
                              The value you want to match for this attribute.
                              You must include a value if you use the `eq`
                              operator.
                            type: string
                        example:
                          field: unsubscribed
                          operator: eq
                          value: true
            - title: segment
              type: object
              properties:
                segment:
                  title: segment
                  description: >-
                    Provide the `id` of a segment containing people you want to
                    search for.
                  type: object
                  properties:
                    id:
                      description: The ID of the segment you want to return people from.
                      type: integer
                      example: 4
            - title: attribute
              type: object
              properties:
                attribute:
                  title: attribute
                  description: Filter your audience by attribute.
                  type: object
                  required:
                    - field
                    - operator
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: first_name
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if a person in the
                        audience has the attribute; `eq` returns results if the
                        audience has the attribute and the attribute has the
                        `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                  example:
                    field: unsubscribed
                    operator: eq
                    value: true
        - title: segment
          description: Filter for people who belong to a segment.
          type: object
          properties:
            segment:
              title: segment
              description: >-
                Provide the `id` of a segment containing people you want to
                search for.
              type: object
              properties:
                id:
                  description: The ID of the segment you want to return people from.
                  type: integer
                  example: 4
        - title: audience
          description: filter for people who have an attribute or an attribute value.
          type: object
          properties:
            attribute:
              title: attribute
              description: Filter your audience by attribute.
              type: object
              required:
                - field
                - operator
              properties:
                field:
                  description: The name of the attribute you want to filter against.
                  type: string
                  example: first_name
                operator:
                  description: >-
                    Determine how to evaluate criteria against the
                    field—`exists` returns results if a person in the audience
                    has the attribute; `eq` returns results if the audience has
                    the attribute and the attribute has the `value` you specify.
                  type: string
                  enum:
                    - eq
                    - exists
                value:
                  description: >-
                    The value you want to match for this attribute. You must
                    include a value if you use the `eq` operator.
                  type: string
              example:
                field: unsubscribed
                operator: eq
                value: true
    objectattributeFilter:
      title: object attribute
      description: Filter your objects by their attributes.
      type: object
      required:
        - field
        - operator
        - type_id
      properties:
        field:
          description: The name of the attribute you want to filter against.
          type: string
          example: location
        operator:
          description: >-
            Determine how to evaluate criteria against the field—`exists`
            returns results if an object has the attribute; `eq` returns results
            an object's attribute exists and the attribute has the `value` you
            specify.
          type: string
          enum:
            - eq
            - exists
        value:
          description: >-
            The value you want to match for this attribute. You must include a
            value if you use the `eq` operator.
          type: string
        type_id:
          description: >-
            The object type an object belongs to—like "Companies" or "Accounts".
            Object type IDs are string-formatted integers that begin at `1` and
            increment for each new type.
          type: string
          nullable: false
          example: '1'
      example:
        field: cancelled
        operator: eq
        value: true
        type_id: 1
    objectFilter-2:
      title: object attribute
      description: Filter your objects by their attributes.
      type: object
      required:
        - field
        - operator
      properties:
        field:
          description: The name of the attribute you want to filter against.
          type: string
          example: location
        operator:
          description: >-
            Determine how to evaluate criteria against the field—`exists`
            returns results if an object has the attribute; `eq` returns results
            an object's attribute exists and the attribute has the `value` you
            specify.
          type: string
          enum:
            - eq
            - exists
        value:
          description: >-
            The value you want to match for this attribute. You must include a
            value if you use the `eq` operator.
          type: string
      example:
        field: cancelled
        operator: eq
        value: true
    complexObjectFilter:
      title: Object Filter
      description: >-
        When filtering for objects, you can use `and` and `or` arrays to
        determine the logic for a group of filter conditions. `not` reverses the
        filter condition and matches when the condition is false.
      type: object
      properties:
        and:
          description: Returns results matching *all* conditions.
          type: array
          items:
            title: object attribute
            description: Filter your objects by their attributes.
            type: object
            required:
              - field
              - operator
            properties:
              field:
                description: The name of the attribute you want to filter against.
                type: string
                example: location
              operator:
                description: >-
                  Determine how to evaluate criteria against the field—`exists`
                  returns results if an object has the attribute; `eq` returns
                  results an object's attribute exists and the attribute has the
                  `value` you specify.
                type: string
                enum:
                  - eq
                  - exists
              value:
                description: >-
                  The value you want to match for this attribute. You must
                  include a value if you use the `eq` operator.
                type: string
            example:
              field: cancelled
              operator: eq
              value: true
        or:
          description: Returns results matching *any* conditions.
          type: array
          items:
            title: object attribute
            description: Filter your objects by their attributes.
            type: object
            required:
              - field
              - operator
            properties:
              field:
                description: The name of the attribute you want to filter against.
                type: string
                example: location
              operator:
                description: >-
                  Determine how to evaluate criteria against the field—`exists`
                  returns results if an object has the attribute; `eq` returns
                  results an object's attribute exists and the attribute has the
                  `value` you specify.
                type: string
                enum:
                  - eq
                  - exists
              value:
                description: >-
                  The value you want to match for this attribute. You must
                  include a value if you use the `eq` operator.
                type: string
            example:
              field: cancelled
              operator: eq
              value: true
        not:
          description: >-
            Returns results if a condition is false. While and/or support an
            array of items, `not` supports a single filter object.
          oneOf:
            - title: and
              type: object
              properties:
                and:
                  description: Match *all* conditions to return results.
                  type: array
                  items:
                    title: object attribute
                    description: Filter your objects by their attributes.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: location
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if an object has the
                          attribute; `eq` returns results an object's attribute
                          exists and the attribute has the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: cancelled
                      operator: eq
                      value: true
            - title: or
              type: object
              properties:
                or:
                  description: Match *any* condition to return results.
                  type: array
                  items:
                    title: object attribute
                    description: Filter your objects by their attributes.
                    type: object
                    required:
                      - field
                      - operator
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: location
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if an object has the
                          attribute; `eq` returns results an object's attribute
                          exists and the attribute has the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                    example:
                      field: cancelled
                      operator: eq
                      value: true
            - title: object attribute
              type: object
              properties:
                object_attribute:
                  title: object attribute
                  description: Filter your objects by their attributes.
                  type: object
                  required:
                    - field
                    - operator
                    - type_id
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: location
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if an object has the
                        attribute; `eq` returns results an object's attribute
                        exists and the attribute has the `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                    type_id:
                      description: >-
                        The object type an object belongs to—like "Companies" or
                        "Accounts". Object type IDs are string-formatted
                        integers that begin at `1` and increment for each new
                        type.
                      type: string
                      nullable: false
                      example: '1'
                  example:
                    field: cancelled
                    operator: eq
                    value: true
                    type_id: 1
        object_attribute:
          title: object attribute
          description: Filter your objects by their attributes.
          type: object
          required:
            - field
            - operator
            - type_id
          properties:
            field:
              description: The name of the attribute you want to filter against.
              type: string
              example: location
            operator:
              description: >-
                Determine how to evaluate criteria against the field—`exists`
                returns results if an object has the attribute; `eq` returns
                results an object's attribute exists and the attribute has the
                `value` you specify.
              type: string
              enum:
                - eq
                - exists
            value:
              description: >-
                The value you want to match for this attribute. You must include
                a value if you use the `eq` operator.
              type: string
            type_id:
              description: >-
                The object type an object belongs to—like "Companies" or
                "Accounts". Object type IDs are string-formatted integers that
                begin at `1` and increment for each new type.
              type: string
              nullable: false
              example: '1'
          example:
            field: cancelled
            operator: eq
            value: true
            type_id: 1
    objectFilterAnd:
      title: and
      type: object
      properties:
        and:
          description: Match *all* conditions to return results.
          type: array
          items:
            type: object
            properties:
              or:
                description: Returns results matching *any* conditions.
                type: array
                items:
                  title: object attribute
                  description: Filter your objects by their attributes.
                  type: object
                  required:
                    - field
                    - operator
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: location
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if an object has the
                        attribute; `eq` returns results an object's attribute
                        exists and the attribute has the `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                  example:
                    field: cancelled
                    operator: eq
                    value: true
              not:
                description: >-
                  Returns results if a condition is false. While and/or support
                  an array of items, `not` supports a single filter object.
                oneOf:
                  - title: and
                    type: object
                    properties:
                      and:
                        description: Match *all* conditions to return results.
                        type: array
                        items:
                          title: object attribute
                          description: Filter your objects by their attributes.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: location
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if an object has
                                the attribute; `eq` returns results an object's
                                attribute exists and the attribute has the
                                `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: cancelled
                            operator: eq
                            value: true
                  - title: or
                    type: object
                    properties:
                      or:
                        description: Match *any* condition to return results.
                        type: array
                        items:
                          title: object attribute
                          description: Filter your objects by their attributes.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: location
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if an object has
                                the attribute; `eq` returns results an object's
                                attribute exists and the attribute has the
                                `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: cancelled
                            operator: eq
                            value: true
                  - title: object attribute
                    type: object
                    properties:
                      object_attribute:
                        title: object attribute
                        description: Filter your objects by their attributes.
                        type: object
                        required:
                          - field
                          - operator
                          - type_id
                        properties:
                          field:
                            description: >-
                              The name of the attribute you want to filter
                              against.
                            type: string
                            example: location
                          operator:
                            description: >-
                              Determine how to evaluate criteria against the
                              field—`exists` returns results if an object has
                              the attribute; `eq` returns results an object's
                              attribute exists and the attribute has the `value`
                              you specify.
                            type: string
                            enum:
                              - eq
                              - exists
                          value:
                            description: >-
                              The value you want to match for this attribute.
                              You must include a value if you use the `eq`
                              operator.
                            type: string
                          type_id:
                            description: >-
                              The object type an object belongs to—like
                              "Companies" or "Accounts". Object type IDs are
                              string-formatted integers that begin at `1` and
                              increment for each new type.
                            type: string
                            nullable: false
                            example: '1'
                        example:
                          field: cancelled
                          operator: eq
                          value: true
                          type_id: 1
              object_attribute:
                title: object attribute
                description: Filter your objects by their attributes.
                type: object
                required:
                  - field
                  - operator
                  - type_id
                properties:
                  field:
                    description: The name of the attribute you want to filter against.
                    type: string
                    example: location
                  operator:
                    description: >-
                      Determine how to evaluate criteria against the
                      field—`exists` returns results if an object has the
                      attribute; `eq` returns results an object's attribute
                      exists and the attribute has the `value` you specify.
                    type: string
                    enum:
                      - eq
                      - exists
                  value:
                    description: >-
                      The value you want to match for this attribute. You must
                      include a value if you use the `eq` operator.
                    type: string
                  type_id:
                    description: >-
                      The object type an object belongs to—like "Companies" or
                      "Accounts". Object type IDs are string-formatted integers
                      that begin at `1` and increment for each new type.
                    type: string
                    nullable: false
                    example: '1'
                example:
                  field: cancelled
                  operator: eq
                  value: true
                  type_id: 1
    objectFilterOr:
      title: or
      type: object
      properties:
        or:
          description: Match *any* condition to return results.
          type: array
          items:
            type: object
            properties:
              and:
                description: Returns results matching *all* conditions.
                type: array
                items:
                  title: object attribute
                  description: Filter your objects by their attributes.
                  type: object
                  required:
                    - field
                    - operator
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: location
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if an object has the
                        attribute; `eq` returns results an object's attribute
                        exists and the attribute has the `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                  example:
                    field: cancelled
                    operator: eq
                    value: true
              not:
                description: >-
                  Returns results if a condition is false. While and/or support
                  an array of items, `not` supports a single filter object.
                oneOf:
                  - title: and
                    type: object
                    properties:
                      and:
                        description: Match *all* conditions to return results.
                        type: array
                        items:
                          title: object attribute
                          description: Filter your objects by their attributes.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: location
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if an object has
                                the attribute; `eq` returns results an object's
                                attribute exists and the attribute has the
                                `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: cancelled
                            operator: eq
                            value: true
                  - title: or
                    type: object
                    properties:
                      or:
                        description: Match *any* condition to return results.
                        type: array
                        items:
                          title: object attribute
                          description: Filter your objects by their attributes.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: location
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if an object has
                                the attribute; `eq` returns results an object's
                                attribute exists and the attribute has the
                                `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: cancelled
                            operator: eq
                            value: true
                  - title: object attribute
                    type: object
                    properties:
                      object_attribute:
                        title: object attribute
                        description: Filter your objects by their attributes.
                        type: object
                        required:
                          - field
                          - operator
                          - type_id
                        properties:
                          field:
                            description: >-
                              The name of the attribute you want to filter
                              against.
                            type: string
                            example: location
                          operator:
                            description: >-
                              Determine how to evaluate criteria against the
                              field—`exists` returns results if an object has
                              the attribute; `eq` returns results an object's
                              attribute exists and the attribute has the `value`
                              you specify.
                            type: string
                            enum:
                              - eq
                              - exists
                          value:
                            description: >-
                              The value you want to match for this attribute.
                              You must include a value if you use the `eq`
                              operator.
                            type: string
                          type_id:
                            description: >-
                              The object type an object belongs to—like
                              "Companies" or "Accounts". Object type IDs are
                              string-formatted integers that begin at `1` and
                              increment for each new type.
                            type: string
                            nullable: false
                            example: '1'
                        example:
                          field: cancelled
                          operator: eq
                          value: true
                          type_id: 1
              object_attribute:
                title: object attribute
                description: Filter your objects by their attributes.
                type: object
                required:
                  - field
                  - operator
                  - type_id
                properties:
                  field:
                    description: The name of the attribute you want to filter against.
                    type: string
                    example: location
                  operator:
                    description: >-
                      Determine how to evaluate criteria against the
                      field—`exists` returns results if an object has the
                      attribute; `eq` returns results an object's attribute
                      exists and the attribute has the `value` you specify.
                    type: string
                    enum:
                      - eq
                      - exists
                  value:
                    description: >-
                      The value you want to match for this attribute. You must
                      include a value if you use the `eq` operator.
                    type: string
                  type_id:
                    description: >-
                      The object type an object belongs to—like "Companies" or
                      "Accounts". Object type IDs are string-formatted integers
                      that begin at `1` and increment for each new type.
                    type: string
                    nullable: false
                    example: '1'
                example:
                  field: cancelled
                  operator: eq
                  value: true
                  type_id: 1
    objectFilterNot:
      title: not
      description: null
      type: object
      properties:
        not:
          description: >-
            Returns results if a condition is false. While and/or support an
            array of items, `not` supports a single filter object.
          type: array
          items:
            type: object
            properties:
              and:
                description: Returns results matching *all* conditions.
                type: array
                items:
                  title: object attribute
                  description: Filter your objects by their attributes.
                  type: object
                  required:
                    - field
                    - operator
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: location
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if an object has the
                        attribute; `eq` returns results an object's attribute
                        exists and the attribute has the `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                  example:
                    field: cancelled
                    operator: eq
                    value: true
              or:
                description: Returns results matching *any* conditions.
                type: array
                items:
                  title: object attribute
                  description: Filter your objects by their attributes.
                  type: object
                  required:
                    - field
                    - operator
                  properties:
                    field:
                      description: The name of the attribute you want to filter against.
                      type: string
                      example: location
                    operator:
                      description: >-
                        Determine how to evaluate criteria against the
                        field—`exists` returns results if an object has the
                        attribute; `eq` returns results an object's attribute
                        exists and the attribute has the `value` you specify.
                      type: string
                      enum:
                        - eq
                        - exists
                    value:
                      description: >-
                        The value you want to match for this attribute. You must
                        include a value if you use the `eq` operator.
                      type: string
                  example:
                    field: cancelled
                    operator: eq
                    value: true
              object_attribute:
                title: object attribute
                description: Filter your objects by their attributes.
                type: object
                required:
                  - field
                  - operator
                  - type_id
                properties:
                  field:
                    description: The name of the attribute you want to filter against.
                    type: string
                    example: location
                  operator:
                    description: >-
                      Determine how to evaluate criteria against the
                      field—`exists` returns results if an object has the
                      attribute; `eq` returns results an object's attribute
                      exists and the attribute has the `value` you specify.
                    type: string
                    enum:
                      - eq
                      - exists
                  value:
                    description: >-
                      The value you want to match for this attribute. You must
                      include a value if you use the `eq` operator.
                    type: string
                  type_id:
                    description: >-
                      The object type an object belongs to—like "Companies" or
                      "Accounts". Object type IDs are string-formatted integers
                      that begin at `1` and increment for each new type.
                    type: string
                    nullable: false
                    example: '1'
                example:
                  field: cancelled
                  operator: eq
                  value: true
                  type_id: 1
    objectFilter:
      title: Object Filter
      description: >
        When filtering for objects, you can use `and` and `or` arrays to
        determine the logic for a group of filter conditions. `not` reverses the
        filter condition and matches when the condition is false.
        `object_attribute` represents the individual conditions you can filter a
        group of people for.


        The top level of this object can only contain a single property, but you
        can nest `and` and `or` properties to produce complex filters.
      oneOf:
        - title: and
          type: object
          properties:
            and:
              description: Match *all* conditions to return results.
              type: array
              items:
                type: object
                properties:
                  or:
                    description: Returns results matching *any* conditions.
                    type: array
                    items:
                      title: object attribute
                      description: Filter your objects by their attributes.
                      type: object
                      required:
                        - field
                        - operator
                      properties:
                        field:
                          description: >-
                            The name of the attribute you want to filter
                            against.
                          type: string
                          example: location
                        operator:
                          description: >-
                            Determine how to evaluate criteria against the
                            field—`exists` returns results if an object has the
                            attribute; `eq` returns results an object's
                            attribute exists and the attribute has the `value`
                            you specify.
                          type: string
                          enum:
                            - eq
                            - exists
                        value:
                          description: >-
                            The value you want to match for this attribute. You
                            must include a value if you use the `eq` operator.
                          type: string
                      example:
                        field: cancelled
                        operator: eq
                        value: true
                  not:
                    description: >-
                      Returns results if a condition is false. While and/or
                      support an array of items, `not` supports a single filter
                      object.
                    oneOf:
                      - title: and
                        type: object
                        properties:
                          and:
                            description: Match *all* conditions to return results.
                            type: array
                            items:
                              title: object attribute
                              description: Filter your objects by their attributes.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: location
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if an
                                    object has the attribute; `eq` returns
                                    results an object's attribute exists and the
                                    attribute has the `value` you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: cancelled
                                operator: eq
                                value: true
                      - title: or
                        type: object
                        properties:
                          or:
                            description: Match *any* condition to return results.
                            type: array
                            items:
                              title: object attribute
                              description: Filter your objects by their attributes.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: location
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if an
                                    object has the attribute; `eq` returns
                                    results an object's attribute exists and the
                                    attribute has the `value` you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: cancelled
                                operator: eq
                                value: true
                      - title: object attribute
                        type: object
                        properties:
                          object_attribute:
                            title: object attribute
                            description: Filter your objects by their attributes.
                            type: object
                            required:
                              - field
                              - operator
                              - type_id
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: location
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if an object
                                  has the attribute; `eq` returns results an
                                  object's attribute exists and the attribute
                                  has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                              type_id:
                                description: >-
                                  The object type an object belongs to—like
                                  "Companies" or "Accounts". Object type IDs are
                                  string-formatted integers that begin at `1`
                                  and increment for each new type.
                                type: string
                                nullable: false
                                example: '1'
                            example:
                              field: cancelled
                              operator: eq
                              value: true
                              type_id: 1
                  object_attribute:
                    title: object attribute
                    description: Filter your objects by their attributes.
                    type: object
                    required:
                      - field
                      - operator
                      - type_id
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: location
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if an object has the
                          attribute; `eq` returns results an object's attribute
                          exists and the attribute has the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                      type_id:
                        description: >-
                          The object type an object belongs to—like "Companies"
                          or "Accounts". Object type IDs are string-formatted
                          integers that begin at `1` and increment for each new
                          type.
                        type: string
                        nullable: false
                        example: '1'
                    example:
                      field: cancelled
                      operator: eq
                      value: true
                      type_id: 1
        - title: or
          type: object
          properties:
            or:
              description: Match *any* condition to return results.
              type: array
              items:
                type: object
                properties:
                  and:
                    description: Returns results matching *all* conditions.
                    type: array
                    items:
                      title: object attribute
                      description: Filter your objects by their attributes.
                      type: object
                      required:
                        - field
                        - operator
                      properties:
                        field:
                          description: >-
                            The name of the attribute you want to filter
                            against.
                          type: string
                          example: location
                        operator:
                          description: >-
                            Determine how to evaluate criteria against the
                            field—`exists` returns results if an object has the
                            attribute; `eq` returns results an object's
                            attribute exists and the attribute has the `value`
                            you specify.
                          type: string
                          enum:
                            - eq
                            - exists
                        value:
                          description: >-
                            The value you want to match for this attribute. You
                            must include a value if you use the `eq` operator.
                          type: string
                      example:
                        field: cancelled
                        operator: eq
                        value: true
                  not:
                    description: >-
                      Returns results if a condition is false. While and/or
                      support an array of items, `not` supports a single filter
                      object.
                    oneOf:
                      - title: and
                        type: object
                        properties:
                          and:
                            description: Match *all* conditions to return results.
                            type: array
                            items:
                              title: object attribute
                              description: Filter your objects by their attributes.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: location
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if an
                                    object has the attribute; `eq` returns
                                    results an object's attribute exists and the
                                    attribute has the `value` you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: cancelled
                                operator: eq
                                value: true
                      - title: or
                        type: object
                        properties:
                          or:
                            description: Match *any* condition to return results.
                            type: array
                            items:
                              title: object attribute
                              description: Filter your objects by their attributes.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: location
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if an
                                    object has the attribute; `eq` returns
                                    results an object's attribute exists and the
                                    attribute has the `value` you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: cancelled
                                operator: eq
                                value: true
                      - title: object attribute
                        type: object
                        properties:
                          object_attribute:
                            title: object attribute
                            description: Filter your objects by their attributes.
                            type: object
                            required:
                              - field
                              - operator
                              - type_id
                            properties:
                              field:
                                description: >-
                                  The name of the attribute you want to filter
                                  against.
                                type: string
                                example: location
                              operator:
                                description: >-
                                  Determine how to evaluate criteria against the
                                  field—`exists` returns results if an object
                                  has the attribute; `eq` returns results an
                                  object's attribute exists and the attribute
                                  has the `value` you specify.
                                type: string
                                enum:
                                  - eq
                                  - exists
                              value:
                                description: >-
                                  The value you want to match for this
                                  attribute. You must include a value if you use
                                  the `eq` operator.
                                type: string
                              type_id:
                                description: >-
                                  The object type an object belongs to—like
                                  "Companies" or "Accounts". Object type IDs are
                                  string-formatted integers that begin at `1`
                                  and increment for each new type.
                                type: string
                                nullable: false
                                example: '1'
                            example:
                              field: cancelled
                              operator: eq
                              value: true
                              type_id: 1
                  object_attribute:
                    title: object attribute
                    description: Filter your objects by their attributes.
                    type: object
                    required:
                      - field
                      - operator
                      - type_id
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: location
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if an object has the
                          attribute; `eq` returns results an object's attribute
                          exists and the attribute has the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                      type_id:
                        description: >-
                          The object type an object belongs to—like "Companies"
                          or "Accounts". Object type IDs are string-formatted
                          integers that begin at `1` and increment for each new
                          type.
                        type: string
                        nullable: false
                        example: '1'
                    example:
                      field: cancelled
                      operator: eq
                      value: true
                      type_id: 1
        - title: not
          description: null
          type: object
          properties:
            not:
              description: >-
                Returns results if a condition is false. While and/or support an
                array of items, `not` supports a single filter object.
              type: array
              items:
                type: object
                properties:
                  and:
                    description: Returns results matching *all* conditions.
                    type: array
                    items:
                      title: object attribute
                      description: Filter your objects by their attributes.
                      type: object
                      required:
                        - field
                        - operator
                      properties:
                        field:
                          description: >-
                            The name of the attribute you want to filter
                            against.
                          type: string
                          example: location
                        operator:
                          description: >-
                            Determine how to evaluate criteria against the
                            field—`exists` returns results if an object has the
                            attribute; `eq` returns results an object's
                            attribute exists and the attribute has the `value`
                            you specify.
                          type: string
                          enum:
                            - eq
                            - exists
                        value:
                          description: >-
                            The value you want to match for this attribute. You
                            must include a value if you use the `eq` operator.
                          type: string
                      example:
                        field: cancelled
                        operator: eq
                        value: true
                  or:
                    description: Returns results matching *any* conditions.
                    type: array
                    items:
                      title: object attribute
                      description: Filter your objects by their attributes.
                      type: object
                      required:
                        - field
                        - operator
                      properties:
                        field:
                          description: >-
                            The name of the attribute you want to filter
                            against.
                          type: string
                          example: location
                        operator:
                          description: >-
                            Determine how to evaluate criteria against the
                            field—`exists` returns results if an object has the
                            attribute; `eq` returns results an object's
                            attribute exists and the attribute has the `value`
                            you specify.
                          type: string
                          enum:
                            - eq
                            - exists
                        value:
                          description: >-
                            The value you want to match for this attribute. You
                            must include a value if you use the `eq` operator.
                          type: string
                      example:
                        field: cancelled
                        operator: eq
                        value: true
                  object_attribute:
                    title: object attribute
                    description: Filter your objects by their attributes.
                    type: object
                    required:
                      - field
                      - operator
                      - type_id
                    properties:
                      field:
                        description: The name of the attribute you want to filter against.
                        type: string
                        example: location
                      operator:
                        description: >-
                          Determine how to evaluate criteria against the
                          field—`exists` returns results if an object has the
                          attribute; `eq` returns results an object's attribute
                          exists and the attribute has the `value` you specify.
                        type: string
                        enum:
                          - eq
                          - exists
                      value:
                        description: >-
                          The value you want to match for this attribute. You
                          must include a value if you use the `eq` operator.
                        type: string
                      type_id:
                        description: >-
                          The object type an object belongs to—like "Companies"
                          or "Accounts". Object type IDs are string-formatted
                          integers that begin at `1` and increment for each new
                          type.
                        type: string
                        nullable: false
                        example: '1'
                    example:
                      field: cancelled
                      operator: eq
                      value: true
                      type_id: 1
        - title: object attribute
          description: A simple filter to find objects matching an attribute condition.
          type: object
          properties:
            object_attribute:
              title: object attribute
              description: Filter your objects by their attributes.
              type: object
              required:
                - field
                - operator
                - type_id
              properties:
                field:
                  description: The name of the attribute you want to filter against.
                  type: string
                  example: location
                operator:
                  description: >-
                    Determine how to evaluate criteria against the
                    field—`exists` returns results if an object has the
                    attribute; `eq` returns results an object's attribute exists
                    and the attribute has the `value` you specify.
                  type: string
                  enum:
                    - eq
                    - exists
                value:
                  description: >-
                    The value you want to match for this attribute. You must
                    include a value if you use the `eq` operator.
                  type: string
                type_id:
                  description: >-
                    The object type an object belongs to—like "Companies" or
                    "Accounts". Object type IDs are string-formatted integers
                    that begin at `1` and increment for each new type.
                  type: string
                  nullable: false
                  example: '1'
              example:
                field: cancelled
                operator: eq
                value: true
                type_id: 1
    device_object_common:
      description: Device information common to the v1 and v2 APIs.
      type: object
      required:
        - platform
      properties:
        last_used:
          description: >-
            The `timestamp` when you last identified this device. If you don't
            pass a timestamp when you add or update a device, we use the time of
            the request itself. Our SDKs identify a device when a person
            launches their app.
          type: integer
          format: unix timestamp
        platform:
          description: The device/messaging platform.
          type: string
          enum:
            - ios
            - android
        attributes:
          description: >-
            Attributes that you can reference to segment your audience—like a
            person's attributes, but specific to a device. These can be either
            the attributes defined below or custom key-value attributes.
          type: object
          properties:
            device_os:
              description: The operating system, including the version, on the device.
              type: string
            device_model:
              description: The model of the device a person uses.
              type: string
            app_version:
              description: >-
                The version of your app that a customer uses. You might target
                app versions to let people know when they need to update, or
                expose them to new features when they do.
              type: string
            cio_sdk_version:
              description: The version of the Customer.io SDK in the app.
              type: string
            _last_status:
              description: >-
                The delivery status of the last message sent to the device—sent,
                bounced, or suppressed. An empty string indicates that that the
                device hasn't received a push yet.
              type: string
              readOnly: true
              enum:
                - ''
                - bounced
                - sent
                - suppressed
            device_locale:
              description: >-
                The four-letter [IETF language
                code](https://customer.io/docs/api/track/) for the device. For
                example, `en-MX` (indicating an app in Spanish formatted for a
                user in Mexico) or `es-ES` (indicating an app in Spanish
                formatted for a user in Spain).
              type: string
            push_enabled:
              description: >-
                If `"true"`, the device is opted-in and can receive push
                notifications.
              type: string
              enum:
                - 'true'
                - 'false'
          additionalProperties:
            description: Custom properties that you want to associate with the device.
            x-additionalPropertiesName: Custom Device Attributes
            type: string
    device_object_cdp_common:
      description: Device information common to the v1 and v2 APIs.
      type: object
      required:
        - platform
      properties:
        last_used:
          description: >-
            The `timestamp` when you last identified this device. If you don't
            pass a timestamp when you add or update a device, we use the time of
            the request itself. Our SDKs identify a device when a person
            launches their app.
          type: integer
          format: unix timestamp
        platform:
          description: The device/messaging platform.
          type: string
          enum:
            - ios
            - android
        attributes:
          description: >-
            Attributes that you can reference to segment your audience—like a
            person's attributes, but specific to a device. These can be either
            the attributes defined below or custom key-value attributes.
          type: object
          properties:
            device_os:
              description: The operating system, including the version, on the device.
              type: string
            device_model:
              description: The model of the device a person uses.
              type: string
            app_version:
              description: >-
                The version of your app that a customer uses. You might target
                app versions to let people know when they need to update, or
                expose them to new features when they do.
              type: string
            cio_sdk_version:
              description: The version of the Customer.io SDK in the app.
              type: string
            _last_status:
              description: >-
                The delivery status of the last message sent to the device—sent,
                bounced, or suppressed. An empty string indicates that that the
                device hasn't received a push yet.
              type: string
              readOnly: true
              enum:
                - ''
                - bounced
                - sent
                - suppressed
            device_locale:
              description: >-
                The four-letter [IETF language
                code](https://customer.io/docs/api/track/) for the device. For
                example, `en-MX` (indicating an app in Spanish formatted for a
                user in Mexico) or `es-ES` (indicating an app in Spanish
                formatted for a user in Spain).
              type: string
            push_enabled:
              description: >-
                If `"true"`, the device is opted-in and can receive push
                notifications.
              type: string
              enum:
                - 'true'
                - 'false'
            network_bluetooth:
              description: If `true`, the device's bluetooth connection is on.
              type: boolean
            network_cellular:
              description: If `true`, the device's cellular connection is on.
              type: boolean
            network_wifi:
              description: If `true`, the device's WiFi connection is on.
              type: boolean
            screen_height:
              description: The height of the device's screen in pixels.
              type: integer
            screen_width:
              description: The width of the device's screen in pixels.
              type: integer
            timezone:
              description: The timezone of the device.
              type: string
          additionalProperties:
            description: Custom properties that you want to associate with the device.
            x-additionalPropertiesName: Custom Device Attributes
            type: string
    device_object:
      description: >-
        The properties representing an individual device. [Our
        SDK's](https://customer.io/docs/api/track/) gather all the properties
        defined below automatically, unless you disable the
        `autoTrackDeviceAttributes` setting. You can reference the properties
        outside the `attributes` object in segments or in Liquid.
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              description: The device token.
              type: string
        - description: Device information common to the v1 and v2 APIs.
          type: object
          required:
            - platform
          properties:
            last_used:
              description: >-
                The `timestamp` when you last identified this device. If you
                don't pass a timestamp when you add or update a device, we use
                the time of the request itself. Our SDKs identify a device when
                a person launches their app.
              type: integer
              format: unix timestamp
            platform:
              description: The device/messaging platform.
              type: string
              enum:
                - ios
                - android
            attributes:
              description: >-
                Attributes that you can reference to segment your audience—like
                a person's attributes, but specific to a device. These can be
                either the attributes defined below or custom key-value
                attributes.
              type: object
              properties:
                device_os:
                  description: The operating system, including the version, on the device.
                  type: string
                device_model:
                  description: The model of the device a person uses.
                  type: string
                app_version:
                  description: >-
                    The version of your app that a customer uses. You might
                    target app versions to let people know when they need to
                    update, or expose them to new features when they do.
                  type: string
                cio_sdk_version:
                  description: The version of the Customer.io SDK in the app.
                  type: string
                _last_status:
                  description: >-
                    The delivery status of the last message sent to the
                    device—sent, bounced, or suppressed. An empty string
                    indicates that that the device hasn't received a push yet.
                  type: string
                  readOnly: true
                  enum:
                    - ''
                    - bounced
                    - sent
                    - suppressed
                device_locale:
                  description: >-
                    The four-letter [IETF language
                    code](https://customer.io/docs/api/track/) for the device.
                    For example, `en-MX` (indicating an app in Spanish formatted
                    for a user in Mexico) or `es-ES` (indicating an app in
                    Spanish formatted for a user in Spain).
                  type: string
                push_enabled:
                  description: >-
                    If `"true"`, the device is opted-in and can receive push
                    notifications.
                  type: string
                  enum:
                    - 'true'
                    - 'false'
              additionalProperties:
                description: Custom properties that you want to associate with the device.
                x-additionalPropertiesName: Custom Device Attributes
                type: string
    device_object_cdp:
      description: >-
        The properties representing an individual device in Journeys when sent
        from a Customer.io SDK that natively supports Data Pipelines (like iOS
        3.x or later). [Our CDP-enabled
        SDK's](https://customer.io/docs/api/track/) gather all the properties
        defined below automatically, unless you disable the
        `autoTrackDeviceAttributes` setting.
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              description: The device token.
              type: string
        - description: Device information common to the v1 and v2 APIs.
          type: object
          required:
            - platform
          properties:
            last_used:
              description: >-
                The `timestamp` when you last identified this device. If you
                don't pass a timestamp when you add or update a device, we use
                the time of the request itself. Our SDKs identify a device when
                a person launches their app.
              type: integer
              format: unix timestamp
            platform:
              description: The device/messaging platform.
              type: string
              enum:
                - ios
                - android
            attributes:
              description: >-
                Attributes that you can reference to segment your audience—like
                a person's attributes, but specific to a device. These can be
                either the attributes defined below or custom key-value
                attributes.
              type: object
              properties:
                device_os:
                  description: The operating system, including the version, on the device.
                  type: string
                device_model:
                  description: The model of the device a person uses.
                  type: string
                app_version:
                  description: >-
                    The version of your app that a customer uses. You might
                    target app versions to let people know when they need to
                    update, or expose them to new features when they do.
                  type: string
                cio_sdk_version:
                  description: The version of the Customer.io SDK in the app.
                  type: string
                _last_status:
                  description: >-
                    The delivery status of the last message sent to the
                    device—sent, bounced, or suppressed. An empty string
                    indicates that that the device hasn't received a push yet.
                  type: string
                  readOnly: true
                  enum:
                    - ''
                    - bounced
                    - sent
                    - suppressed
                device_locale:
                  description: >-
                    The four-letter [IETF language
                    code](https://customer.io/docs/api/track/) for the device.
                    For example, `en-MX` (indicating an app in Spanish formatted
                    for a user in Mexico) or `es-ES` (indicating an app in
                    Spanish formatted for a user in Spain).
                  type: string
                push_enabled:
                  description: >-
                    If `"true"`, the device is opted-in and can receive push
                    notifications.
                  type: string
                  enum:
                    - 'true'
                    - 'false'
                network_bluetooth:
                  description: If `true`, the device's bluetooth connection is on.
                  type: boolean
                network_cellular:
                  description: If `true`, the device's cellular connection is on.
                  type: boolean
                network_wifi:
                  description: If `true`, the device's WiFi connection is on.
                  type: boolean
                screen_height:
                  description: The height of the device's screen in pixels.
                  type: integer
                screen_width:
                  description: The width of the device's screen in pixels.
                  type: integer
                timezone:
                  description: The timezone of the device.
                  type: string
              additionalProperties:
                description: Custom properties that you want to associate with the device.
                x-additionalPropertiesName: Custom Device Attributes
                type: string
    import_request:
      oneOf:
        - title: people
          description: Contains your import parameters.
          type: object
          required:
            - data_file_url
            - name
            - type
            - identifier
          properties:
            description:
              description: >-
                A helpful description that can help you find and recognize your
                import operation.
              type: string
            name:
              description: >-
                A friendly name for your import. This helps you identify your
                import.
              type: string
            data_file_url:
              description: The URL or path to the CSV file you want to import.
              type: string
            type:
              description: The type of import.
              type: string
              enum:
                - people
            identifier:
              description: >-
                The type of identifier you want to use to identify people in
                your sheet—`id` or `email`. At least one column in the CSV must
                contain an identifier.
              type: string
              enum:
                - id
                - email
            data_to_process:
              description: >
                Determines whether your import operation performs `all`
                add/update operations, only adds items (`only_new`), or only
                updates existing items (`only_existing`). Defaults to `all`. If
                `import_type` is `event`, you can only use `all` or
                `only_existing`. 


                This field was previously called `people_to_process` - we still
                support it but will deprecate it soon.
              type: string
              enum:
                - all
                - only_new
                - only_existing
        - title: event
          description: Contains your import parameters.
          type: object
          required:
            - data_file_url
            - name
            - type
            - identifier
          properties:
            description:
              description: >-
                A helpful description that can help you find and recognize your
                import operation.
              type: string
            name:
              description: >-
                A friendly name for your import. This helps you identify your
                import.
              type: string
            data_file_url:
              description: The URL or path to the CSV file you want to import.
              type: string
            type:
              description: The type of import.
              type: string
              enum:
                - event
            identifier:
              description: >-
                The type of identifier you want to use to identify people in
                your sheet—`id` or `email`. At least one column in the CSV must
                contain an identifier.
              type: string
              enum:
                - id
                - email
            data_to_process:
              description: >
                Determines whether your import operation performs `all`
                add/update operations, only adds items (`only_new`), or only
                updates existing items (`only_existing`). Defaults to `all`. If
                `import_type` is `event`, you can only use `all` or
                `only_existing`. 


                This field was previously called `people_to_process` - we still
                support it but will deprecate it soon.
              type: string
              enum:
                - all
                - only_new
                - only_existing
        - title: relationship
          description: Contains your import parameters.
          type: object
          required:
            - data_file_url
            - name
            - type
            - identifier
            - object_type_id
          properties:
            description:
              description: >-
                A helpful description that can help you find and recognize your
                import operation.
              type: string
            name:
              description: >-
                A friendly name for your import. This helps you identify your
                import.
              type: string
            data_file_url:
              description: The URL or path to the CSV file you want to import.
              type: string
            type:
              description: The type of import.
              type: string
              enum:
                - relationship
            identifier:
              description: >-
                The type of identifier you want to use to identify people in
                your sheet—`id` or `email`. At least one column in the CSV must
                contain an identifier.
              type: string
              enum:
                - id
                - email
            data_to_process:
              description: >
                Determines whether your import operation performs `all`
                add/update operations, only adds items (`only_new`), or only
                updates existing items (`only_existing`). Defaults to `all`. If
                `import_type` is `event`, you can only use `all` or
                `only_existing`. 


                This field was previously called `people_to_process` - we still
                support it but will deprecate it soon.
              type: string
              enum:
                - all
                - only_new
                - only_existing
        - title: object
          description: Contains your import parameters.
          type: object
          required:
            - data_file_url
            - name
            - type
            - object_type_id
          properties:
            description:
              description: >-
                A helpful description that can help you find and recognize your
                import operation.
              type: string
            name:
              description: >-
                A friendly name for your import. This helps you identify your
                import.
              type: string
            data_file_url:
              description: The URL or path to the CSV file you want to import.
              type: string
            object_type_id:
              description: >-
                The object type an object belongs to—like "Companies" or
                "Accounts". Object type IDs are string-formatted integers that
                begin at `1` and increment for each new type.
              type: string
              nullable: false
              example: '1'
            type:
              description: The type of import.
              type: string
              enum:
                - object
            data_to_process:
              description: >
                Determines whether your import operation performs `all`
                add/update operations, only adds items (`only_new`), or only
                updates existing items (`only_existing`). Defaults to `all`. If
                `import_type` is `event`, you can only use `all` or
                `only_existing`. 


                This field was previously called `people_to_process` - we still
                support it but will deprecate it soon.
              type: string
              enum:
                - all
                - only_new
                - only_existing
    import_name:
      description: A friendly name for your import. This helps you identify your import.
      type: string
    import_type:
      description: The type of import.
      type: string
      enum:
        - people
        - event
        - object
        - relationship
    import_description:
      description: >-
        A helpful description that can help you find and recognize your import
        operation.
      type: string
    import_state:
      description: >-
        The state of the import—whether your import is being processed, fully
        completed (`imported`), or if it failed.
      type: string
      enum:
        - preprocessing
        - preprocessed
        - validating
        - validated
        - importing
        - imported
        - failed
        - canceled
    rows_to_import:
      description: The total number of importable rows we found in the CSV.
      type: integer
    rows_imported:
      description: The number of rows we imported from the CSV.
      type: integer
    data_to_process:
      description: >
        Determines whether your import operation performs `all` add/update
        operations, only adds items (`only_new`), or only updates existing items
        (`only_existing`). Defaults to `all`. If `import_type` is `event`, you
        can only use `all` or `only_existing`. 


        This field was previously called `people_to_process` - we still support
        it but will deprecate it soon.
      type: string
      enum:
        - all
        - only_new
        - only_existing
    import_identifier:
      description: >-
        The type of identifier you want to use to identify people in your
        sheet—`id` or `email`. At least one column in the CSV must contain an
        identifier.
      type: string
      enum:
        - id
        - email
    import_object:
      description: Represents an import operation.
      type: object
      properties:
        description:
          description: >-
            A helpful description that can help you find and recognize your
            import operation.
          type: string
        id:
          description: >-
            This is the `import_id` you'll use if you want to [lookup your
            import operation](https://customer.io/docs/api/track/).
          type: integer
        created_at:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated_at:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        name:
          description: >-
            A friendly name for your import. This helps you identify your
            import.
          type: string
        rows_to_import:
          description: The total number of importable rows we found in the CSV.
          type: integer
        rows_imported:
          description: The number of rows we imported from the CSV.
          type: integer
        state:
          description: >-
            The state of the import—whether your import is being processed,
            fully completed (`imported`), or if it failed.
          type: string
          enum:
            - preprocessing
            - preprocessed
            - validating
            - validated
            - importing
            - imported
            - failed
            - canceled
        type:
          description: The type of import.
          type: string
          enum:
            - people
            - event
            - object
            - relationship
        identifier:
          description: >-
            The type of identifier you used to identify people in your CSV. Not
            applicable for object imports.
          type: string
          enum:
            - id
            - email
        data_to_process:
          description: >
            Determines whether your import operation performs `all` add/update
            operations, only adds items (`only_new`), or only updates existing
            items (`only_existing`). Defaults to `all`. If `import_type` is
            `event`, you can only use `all` or `only_existing`. 


            This field was previously called `people_to_process` - we still
            support it but will deprecate it soon.
          type: string
          enum:
            - all
            - only_new
            - only_existing
        people_to_process:
          description: >
            Returned for people and event imports, even if you imported using
            the field `data_to_process`. This field will be deprecated soon.
          type: string
          enum:
            - all
            - only_new
            - only_existing
        object_type_id:
          description: >-
            The object type an object belongs to—like "Companies" or "Accounts".
            Only applies to object imports.
          type: string
          nullable: false
          example: '1'
        error:
          description: If your import fails, this helps you understand why.
          type: string
      example:
        description: importing accounts
        id: 30
        name: account-object-import
        created_at: 1706081641
        updated_at: 1706081645
        rows_to_import: 3
        rows_imported: 3
        state: imported
        type: object
        data_to_process: all
        people_to_process: all
        object_type_id: 1
        error: possible error - The specified Object Type does not exist.
    customerAttributesObject:
      type: object
      properties:
        customer:
          description: The profile you referenced by ID in the request.
          type: object
          properties:
            id:
              description: The customer ID referenced in the request.
              type: string
            identifiers:
              description: >
                Contains identifiers for the person represented in a
                response—`id`, `cio_id`, and `email` (if your workspace uses the
                *Email or ID* setting). If the person's `id` or `email` is not
                set, the value will be null.


                We recommend that you use this object rather than the less
                descriptive `customer_id`.
              type: object
              required:
                - email
                - id
                - cio_id
              properties:
                email:
                  description: A person's email address, if set.
                  type: string
                  nullable: true
                  format: email
                  example: test@example.com
                id:
                  description: >-
                    A person's unique ID, if set. This is the same as the
                    `customer_id` if present.
                  type: string
                  nullable: true
                  example: 2
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
            attributes:
              description: >-
                Contains attributes assigned to this profile, including your
                workspace's people-identifiers (by default, these are `id`,
                `email`, and `cio_id`). Attributes are all stored as strings.
              type: object
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI. If your workspace supports multiple identifiers (email
                    and ID), this value can be null.
                  type: string
                  nullable: true
                  example: '42'
                email:
                  description: The email address of the customer.
                  type: string
                  nullable: true
                  example: test@example.com
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
                cio_subscription_preferences:
                  description: >
                    A person's stringified subscription preferences. These are
                    preferences that a person set through the subscription
                    center or attributes that you set on a person. A person who
                    hasn't set their subscription preferences has computed
                    preferences based on the nature of your topics (opt-in or
                    opt-out). See the `_cio_subscription_preferences_computed`
                    attribute for computed preferences.
                  type: string
                _cio_subscription_preferences_computed:
                  description: >
                    Returns the computed subscription preferences for a
                    person—any subscription preferences set on a person and the
                    defaults for any subscription preferences _not_ set on a
                    person—as stringified JSON. For example, if you have an
                    "opt-in" topic that a person hasn't set a preference for,
                    that topic would show `false`—even though a person doesn't
                    have that attribute on their profile. [Learn more about
                    topics](https://customer.io/docs/api/track/).  
                  type: string
              additionalProperties:
                description: Non-identifier attributes assigned to this person.
                x-additionalPropertiesName: additional attributes
                type: string
            timestamps:
              description: >-
                The epoch timestamps when corresponding attributes were set on
                the customer profile.
              type: object
              properties:
                cio_id:
                  description: The date-time when `cio_id` was assigned.
                  type: integer
                  format: unix timestamp
                _last_emailed:
                  description: The date-time when you last emailed a person.
                  type: integer
                  format: unix timestamp
                email:
                  description: The date-time when the person's email address was added.
                  type: integer
                  format: unix timestamp
                id:
                  description: The date-time when the person's ID was generated.
                  type: integer
                  format: unix timestamp
                unsubscribed:
                  description: The date-time when the person unsubscribed.
                  type: integer
                  format: unix timestamp
                _cio_subscription_preferences_computed:
                  description: >-
                    Because this value is computed and not actually set on a
                    person, this value is always 0
                  type: integer
                cio_subscription_preferences:
                  description: >-
                    The datetime when a person's subscription preferences were
                    last updated.
                  type: integer
                  format: unix timestamp
                additionalProperties:
                  description: Timestamps when attributes assigned to the person were set.
                  x-additionalPropertiesName: additional attribute timestamps
                  format: unix timestamp
            unsubscribed:
              description: If true, the person is unsubscribed from messages.
              type: boolean
            devices:
              description: Lists the devices associated with the customer profile.
              type: array
              items:
                description: >-
                  The properties representing an individual device. [Our
                  SDK's](https://customer.io/docs/api/track/) gather all the
                  properties defined below automatically, unless you disable the
                  `autoTrackDeviceAttributes` setting. You can reference the
                  properties outside the `attributes` object in segments or in
                  Liquid.
                allOf:
                  - type: object
                    required:
                      - id
                    properties:
                      id:
                        description: The device token.
                        type: string
                  - description: Device information common to the v1 and v2 APIs.
                    type: object
                    required:
                      - platform
                    properties:
                      last_used:
                        description: >-
                          The `timestamp` when you last identified this device.
                          If you don't pass a timestamp when you add or update a
                          device, we use the time of the request itself. Our
                          SDKs identify a device when a person launches their
                          app.
                        type: integer
                        format: unix timestamp
                      platform:
                        description: The device/messaging platform.
                        type: string
                        enum:
                          - ios
                          - android
                      attributes:
                        description: >-
                          Attributes that you can reference to segment your
                          audience—like a person's attributes, but specific to a
                          device. These can be either the attributes defined
                          below or custom key-value attributes.
                        type: object
                        properties:
                          device_os:
                            description: >-
                              The operating system, including the version, on
                              the device.
                            type: string
                          device_model:
                            description: The model of the device a person uses.
                            type: string
                          app_version:
                            description: >-
                              The version of your app that a customer uses. You
                              might target app versions to let people know when
                              they need to update, or expose them to new
                              features when they do.
                            type: string
                          cio_sdk_version:
                            description: The version of the Customer.io SDK in the app.
                            type: string
                          _last_status:
                            description: >-
                              The delivery status of the last message sent to
                              the device—sent, bounced, or suppressed. An empty
                              string indicates that that the device hasn't
                              received a push yet.
                            type: string
                            readOnly: true
                            enum:
                              - ''
                              - bounced
                              - sent
                              - suppressed
                          device_locale:
                            description: >-
                              The four-letter [IETF language
                              code](https://customer.io/docs/api/track/) for the
                              device. For example, `en-MX` (indicating an app in
                              Spanish formatted for a user in Mexico) or `es-ES`
                              (indicating an app in Spanish formatted for a user
                              in Spain).
                            type: string
                          push_enabled:
                            description: >-
                              If `"true"`, the device is opted-in and can
                              receive push notifications.
                            type: string
                            enum:
                              - 'true'
                              - 'false'
                        additionalProperties:
                          description: >-
                            Custom properties that you want to associate with
                            the device.
                          x-additionalPropertiesName: Custom Device Attributes
                          type: string
      example:
        customer:
          id: '1'
          attributes:
            title: tester
            _last_emailed: '1528932553'
            created_at: '1489014595'
            email: test@example.com
            department: qa
            id: 1X
            cio_id: '03000001'
            cio_subscription_preferences: '{"topics":{"topic_7":false,"topic_8":false}}'
            _cio_subscription_preferences_computed: '{"topics":{"topic_6":false,"topic_7":false,"topic_8":false}}'
          timestamps:
            title: 1508932553
            cio_id: 1489014595
            _last_emailed: 1528932553
            created_at: 1489014595
            email: 1508932553
            id: 1489014595
            department: 1508932553
            _cio_subscription_preferences_computed: 0
            cio_subscription_preferences: 1673987303
          unsubscribed: false
          devices:
            - id: my_android_device_id
              last_used: 1514764800
              platform: android
            - id: my_ios_device_id
              last_used: 1514764800
              platform: ios
    preheader:
      description: >-
        Also known as "preview text", this is the block block of text that users
        see next to, or underneath, the subject line in their inbox.
      type: string
    body_plain:
      description: >-
        By default, we generate a plaintext version of your message body for
        each delivery. Use this key to override the default plain text body.
      type: string
    attachments:
      description: >
        A dictionary of attachments where the filename is the key and the value
        is the base64-encoded contents. The total size of all attachments must
        be less than 2 MB. Some filetype extensions are restricted.
      type: array
      items:
        type: object
        additionalProperties:
          type: string
          format: base64
          x-additionalPropertiesName: Attachment Names
          x-doNotRender: true
    headers:
      description: >-
        Headers must be strings and cannot contain any non-ASCII characters or
        empty spaces. Some headers are reserved and cannot be overwritten.
      type: array
      items:
        type: object
        properties:
          name:
            description: name of header
            type: string
            example: X-Mailgun-Tag
          value:
            description: value of header
            type: string
            example: tag-name-for-tracking
    disable_message_retention:
      description: >-
        If true, the message body is not retained in delivery history. Setting
        this value overrides the value set in the settings of your
        `transactional_message_id`.
      type: boolean
      default: false
    send_to_unsubscribed:
      description: >-
        If false, your message is not sent to unsubscribed recipients. Setting
        this value overrides the value set in the settings of your
        `transactional_message_id`.
      type: boolean
      default: true
    tracked:
      description: If true, Customer.io tracks opens and link clicks in your message.
      type: boolean
      default: true
    queue_draft:
      description: >-
        If true, your transactional message is held as a draft in Customer.io
        and not sent directly to your audience. You must go to the Deliveries
        and Drafts page to send your message.
      type: boolean
      default: false
    customer_identifiers:
      description: >
        Contains identifiers for the person represented in a response—`id`,
        `cio_id`, and `email` (if your workspace uses the *Email or ID*
        setting). If the person's `id` or `email` is not set, the value will be
        null.


        We recommend that you use this object rather than the less descriptive
        `customer_id`.
      type: object
      required:
        - email
        - id
        - cio_id
      properties:
        email:
          description: A person's email address, if set.
          type: string
          nullable: true
          format: email
          example: test@example.com
        id:
          description: >-
            A person's unique ID, if set. This is the same as the `customer_id`
            if present.
          type: string
          nullable: true
          example: 2
        cio_id:
          description: >-
            A unique identifier set by Customer.io, used to reference a person
            if you want to update their identifiers.
          type: string
          example: a3000001
    transactionalSharedEmailObject:
      type: object
      properties:
        to:
          description: >
            The message recipient(s). Supports multiple addresses separated by
            commas. Your request can contain up to 15 total recipients between
            the `to` and `bcc` keys.


            You can include a display or "friendly" name in "to" address, but we
            recommend that you use quotation marks around the friendly name to
            avoid potential issues with special characters, e.g. `\"Person\"
            <person@example.com>`.            
          type: string
          example: cool.person@example.com
        bcc:
          description: >-
            Blind copy message recipients. Supports multiple addresses separated
            by commas. Your request can contain up to 15 total recipients
            between the `to` and `bcc` keys.
          type: string
          example: bcc@example.com
        fake_bcc:
          description: >
            If true, rather than sending true copies to BCC addresses,
            Customer.io sends a copy of the message with the subject line
            containing the recipient address(es).
          type: boolean
        reply_to:
          description: >-
            The address that recipients can reply to, if different from the
            `from` address.
          type: string
          example: replyto@example.com
        preheader:
          description: >-
            Also known as "preview text", this is the block block of text that
            users see next to, or underneath, the subject line in their inbox.
          type: string
        body_plain:
          description: >-
            By default, we generate a plaintext version of your message body for
            each delivery. Use this key to override the default plain text body.
          type: string
        attachments:
          description: >
            A dictionary of attachments where the filename is the key and the
            value is the base64-encoded contents. The total size of all
            attachments must be less than 2 MB. Some filetype extensions are
            restricted.
          type: array
          items:
            type: object
            additionalProperties:
              type: string
              format: base64
              x-additionalPropertiesName: Attachment Names
              x-doNotRender: true
        headers:
          description: >-
            Headers must be strings and cannot contain any non-ASCII characters
            or empty spaces. Some headers are reserved and cannot be
            overwritten.
          type: array
          items:
            type: object
            properties:
              name:
                description: name of header
                type: string
                example: X-Mailgun-Tag
              value:
                description: value of header
                type: string
                example: tag-name-for-tracking
        disable_css_preprocessing:
          description: >-
            Set to `true` to disable CSS preprocessing. This setting overrides
            the CSS preprocessing setting on the `transactional_message_id` as
            set in the user interface. Transactional emails have CSS
            preprocessing enabled by default.
          type: boolean
          example: false
          default: false
        tracked:
          description: If true, Customer.io tracks opens and link clicks in your message.
          type: boolean
          default: true
    transactionalSharedPushObject:
      type: object
      properties:
        title:
          description: >-
            The title for your notification. This overrides the title of the
            transactional template (referenced by `transactional_message_id`).
          type: string
        to:
          description: >-
            The person's device(s) you want to send this push to. One of `all`,
            `last_used`, or a custom device token which belongs to the profile
            from the Identifiers block. Defaults to 'all'. This overrides To
            from the transactional template (referenced by
            `transactional_message_id`).
          type: string
          enum:
            - all
            - last_used
            - $device_token
          default: all
        message:
          description: >-
            The message body for your notification. This overrides the
            notification body of the transactional template (referenced by
            `transactional_message_id`).
          type: string
        image_url:
          description: >-
            An image URL to show in the push. This overrides Image from the
            transactional template (referenced by `transactional_message_id`).
          type: string
        link:
          description: >-
            A deep link to open when the push is tapped. This overrides Link
            from the transactional template (referenced by
            `transactional_message_id`).
          type: string
        sound:
          description: >
            **For iOS Only**: your notification can alert users with the
            device's default notification sound or play no sound at all. 
          type: string
          enum:
            - default
            - none
          default: default
        custom_data:
          description: >-
            An optional list of key/value pairs to attach to the push payload.
            Due to a Firebase limitation we only support sending string key
            value pairs. This overrides Custom Data from the transactional
            template (referenced by `transactional_message_id`).
          type: object
        custom_device:
          description: >-
            A device to perform an upsert operation at the time of send. The
            device will be added/updated on the profile from the Identifiers
            block.
          allOf:
            - type: object
              required:
                - token
              properties:
                token:
                  description: The device token.
                  type: string
            - description: Device information common to the v1 and v2 APIs.
              type: object
              required:
                - platform
              properties:
                last_used:
                  description: >-
                    The `timestamp` when you last identified this device. If you
                    don't pass a timestamp when you add or update a device, we
                    use the time of the request itself. Our SDKs identify a
                    device when a person launches their app.
                  type: integer
                  format: unix timestamp
                platform:
                  description: The device/messaging platform.
                  type: string
                  enum:
                    - ios
                    - android
                attributes:
                  description: >-
                    Attributes that you can reference to segment your
                    audience—like a person's attributes, but specific to a
                    device. These can be either the attributes defined below or
                    custom key-value attributes.
                  type: object
                  properties:
                    device_os:
                      description: >-
                        The operating system, including the version, on the
                        device.
                      type: string
                    device_model:
                      description: The model of the device a person uses.
                      type: string
                    app_version:
                      description: >-
                        The version of your app that a customer uses. You might
                        target app versions to let people know when they need to
                        update, or expose them to new features when they do.
                      type: string
                    cio_sdk_version:
                      description: The version of the Customer.io SDK in the app.
                      type: string
                    _last_status:
                      description: >-
                        The delivery status of the last message sent to the
                        device—sent, bounced, or suppressed. An empty string
                        indicates that that the device hasn't received a push
                        yet.
                      type: string
                      readOnly: true
                      enum:
                        - ''
                        - bounced
                        - sent
                        - suppressed
                    device_locale:
                      description: >-
                        The four-letter [IETF language
                        code](https://customer.io/docs/api/track/) for the
                        device. For example, `en-MX` (indicating an app in
                        Spanish formatted for a user in Mexico) or `es-ES`
                        (indicating an app in Spanish formatted for a user in
                        Spain).
                      type: string
                    push_enabled:
                      description: >-
                        If `"true"`, the device is opted-in and can receive push
                        notifications.
                      type: string
                      enum:
                        - 'true'
                        - 'false'
                  additionalProperties:
                    description: >-
                      Custom properties that you want to associate with the
                      device.
                    x-additionalPropertiesName: Custom Device Attributes
                    type: string
        custom_payload:
          description: >-
            An optional list of key/value pairs to attach to the push payload.
            Due to a Firebase limitation we only support sending string key
            value pairs. This overrides every other parameter, including any
            Custom Payload from the transactional template (referenced by
            `transactional_message_id`).
          type: object
          properties:
            ios:
              description: >-
                Your payload changes depending on whether you send to iOS
                devices through Google's Firebase Cloud Messaging (FCM) or
                Apple's Push Notification service (APNs).
              oneOf:
                - title: FCM
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      description: The base object for all FCM payloads.
                      type: object
                      required:
                        - apns
                      properties:
                        apns:
                          description: >-
                            Defines a payload for iOS devices sent through
                            Firebase Cloud Messaging (FCM).
                          type: object
                          required:
                            - payload
                          properties:
                            headers:
                              description: >-
                                Headers defined by [Apple's payload
                                reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns)
                                that you want to pass through FCM.
                              type: object
                            payload:
                              description: Contains a push payload.
                              type: object
                              properties:
                                CIO:
                                  description: >-
                                    Contains properties interpreted by the
                                    Customer.io iOS SDK.
                                  type: object
                                  required:
                                    - push
                                  properties:
                                    push:
                                      description: A push payload for the iOS SDK.
                                      type: object
                                      properties:
                                        title:
                                          description: The title of your push notification.
                                          type: string
                                        body:
                                          description: The body of your push notification.
                                          type: string
                                        link:
                                          description: >-
                                            A deep link (to a page in your app), or
                                            a link to a web page.
                                          type: string
                                        image:
                                          description: >-
                                            The URL of an HTTPS image that you want
                                            to use for your message.
                                          type: string
                                aps:
                                  description: A push payload intended for an iOS device.
                                  type: object
                                  properties:
                                    alert:
                                      oneOf:
                                        - title: Simple alert
                                          description: A simple alert message.
                                          type: string
                                        - title: Complex alert
                                          type: object
                                          properties:
                                            title:
                                              description: The title of your push notification.
                                              type: string
                                            body:
                                              description: The body of your push notification.
                                              type: string
                                            subtitle:
                                              description: >-
                                                Additional information that explains the
                                                purpose of the notification.
                                              type: string
                                            launch-image:
                                              description: >-
                                                The name of the launch image file you
                                                want to display. When a user launches
                                                your app, they'll see this image or
                                                storyboard file rather than your app’s
                                                normal launch image.
                                              type: string
                                            title-loc-key:
                                              description: >-
                                                The key for a localized title string in
                                                your app’s Localizable.strings files.
                                              type: string
                                            title-loc-args:
                                              description: >-
                                                An array of replacement value strings
                                                for variables in your title string. Each
                                                %@ character in the title-loc-key is
                                                replaced by a value from this array, in
                                                the order they appear in the title
                                                string.
                                              type: array
                                              items:
                                                type: string
                                            subtitle-loc-key:
                                              description: >-
                                                The key for a localized subtitle string
                                                in your app’s Localizable.strings file.
                                              type: string
                                            subtitle-loc-args:
                                              description: >-
                                                An array of replacement value strings
                                                for variables in your subtitle string.
                                                Each %@ character in the
                                                subtitle-loc-key is replaced by a value
                                                from this array, in the order they
                                                appear in the subtitle string.
                                              type: array
                                              items:
                                                type: string
                                            loc-key:
                                              description: >-
                                                The key for a localized message string
                                                in your app’s Localizable.strings file.
                                              type: string
                                            loc-args:
                                              description: >-
                                                An array of replacement value strings
                                                for variables in your message text. Each
                                                %@ character in the loc-key is replaced
                                                by a value from this array, in the order
                                                they appear in the message body.
                                              type: array
                                              items:
                                                type: string
                                    badge:
                                      description: >-
                                        The number you want to display on your
                                        app's icon. Set to 0 to remove the
                                        current badge, if any.
                                      type: integer
                                    sound:
                                      oneOf:
                                        - title: Regular alert
                                          description: >-
                                            The name of a sound file in your app’s
                                            main bundle or in the Library/Sounds
                                            folder of your app’s container
                                            directory. Use “default” to play the
                                            system sound. For critical alerts,
                                            you'll pass an object instead.
                                          type: string
                                        - title: Critical alert
                                          type: object
                                          properties:
                                            critical:
                                              description: 1 indicates critical. 0 is not critical.
                                              type: integer
                                            name:
                                              description: >-
                                                The name of a sound file in your app’s
                                                main bundle or in the Library/Sounds
                                                folder of your app’s container
                                                directory. Use “default” to play the
                                                system sound.
                                              type: string
                                            volume:
                                              description: >-
                                                The volume for a critical alert between
                                                0 and 1, where 0 is silent and 1 is full
                                                volume.
                                              type: number
                                    thread-id:
                                      description: >-
                                        An identifier to group related
                                        notifications.
                                      type: string
                                    category:
                                      description: >-
                                        The notification’s type. This string
                                        must correspond to the identifier of one
                                        of the `UNNotificationCategory` objects
                                        you register at launch time.
                                      type: string
                                    content-available:
                                      description: >-
                                        The background notification flag. Use
                                        `1` without an `alert` to perform a
                                        silent update. `0` indicates a normal
                                        push notification.
                                      type: integer
                                    mutable-content:
                                      description: >-
                                        The notification service app extension
                                        flag. If the value is 1, your
                                        notification is passed to your
                                        notification service app extension
                                        before delivery. Use your extension to
                                        modify the notification’s content.
                                      type: integer
                                    target-content-id:
                                      description: >-
                                        The identifier of the window brought
                                        forward.
                                      type: string
                                    interruption-level:
                                      description: >-
                                        Indicates the importance and delivery
                                        timing of a notification.
                                      type: string
                                      enum:
                                        - passive
                                        - active
                                        - time-sensitive
                                        - critical
                                    relevance-score:
                                      description: >-
                                        A number between 0 and 1. The highest
                                        score is considered the "most relevant" 
                                        and is featured in the notification
                                        summary.
                                      type: number
                              additionalProperties:
                                description: >-
                                  Additional properties that you've set up your
                                  app to interpret outside of the Customer.io
                                  SDK.
                                x-additionalPropertiesName: Custom key-value pairs
                - title: APNS
                  type: object
                  properties:
                    CIO:
                      description: Contains options supported by the Customer.io SDK.
                      type: object
                      required:
                        - push
                      properties:
                        push:
                          description: >-
                            Describes push notification options supported by the
                            CIO SDK.
                          type: object
                          properties:
                            link:
                              description: >-
                                A deep link (to a page in your app), or a link
                                to a web page.
                              type: string
                            image:
                              description: >-
                                The URL of an HTTPS image that you want to use
                                for your message.
                              type: string
                    aps:
                      description: A push payload intended for an iOS device.
                      type: object
                      properties:
                        alert:
                          oneOf:
                            - title: Simple alert
                              description: A simple alert message.
                              type: string
                            - title: Complex alert
                              type: object
                              properties:
                                title:
                                  description: The title of your push notification.
                                  type: string
                                body:
                                  description: The body of your push notification.
                                  type: string
                                subtitle:
                                  description: >-
                                    Additional information that explains the
                                    purpose of the notification.
                                  type: string
                                launch-image:
                                  description: >-
                                    The name of the launch image file you want
                                    to display. When a user launches your app,
                                    they'll see this image or storyboard file
                                    rather than your app’s normal launch image.
                                  type: string
                                title-loc-key:
                                  description: >-
                                    The key for a localized title string in your
                                    app’s Localizable.strings files.
                                  type: string
                                title-loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your title string. Each %@
                                    character in the title-loc-key is replaced
                                    by a value from this array, in the order
                                    they appear in the title string.
                                  type: array
                                  items:
                                    type: string
                                subtitle-loc-key:
                                  description: >-
                                    The key for a localized subtitle string in
                                    your app’s Localizable.strings file.
                                  type: string
                                subtitle-loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your subtitle string. Each %@
                                    character in the subtitle-loc-key is
                                    replaced by a value from this array, in the
                                    order they appear in the subtitle string.
                                  type: array
                                  items:
                                    type: string
                                loc-key:
                                  description: >-
                                    The key for a localized message string in
                                    your app’s Localizable.strings file.
                                  type: string
                                loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your message text. Each %@
                                    character in the loc-key is replaced by a
                                    value from this array, in the order they
                                    appear in the message body.
                                  type: array
                                  items:
                                    type: string
                        badge:
                          description: >-
                            The number you want to display on your app's icon.
                            Set to 0 to remove the current badge, if any.
                          type: integer
                        sound:
                          oneOf:
                            - title: Regular alert
                              description: >-
                                The name of a sound file in your app’s main
                                bundle or in the Library/Sounds folder of your
                                app’s container directory. Use “default” to play
                                the system sound. For critical alerts, you'll
                                pass an object instead.
                              type: string
                            - title: Critical alert
                              type: object
                              properties:
                                critical:
                                  description: 1 indicates critical. 0 is not critical.
                                  type: integer
                                name:
                                  description: >-
                                    The name of a sound file in your app’s main
                                    bundle or in the Library/Sounds folder of
                                    your app’s container directory. Use
                                    “default” to play the system sound.
                                  type: string
                                volume:
                                  description: >-
                                    The volume for a critical alert between 0
                                    and 1, where 0 is silent and 1 is full
                                    volume.
                                  type: number
                        thread-id:
                          description: An identifier to group related notifications.
                          type: string
                        category:
                          description: >-
                            The notification’s type. This string must correspond
                            to the identifier of one of the
                            `UNNotificationCategory` objects you register at
                            launch time.
                          type: string
                        content-available:
                          description: >-
                            The background notification flag. Use `1` without an
                            `alert` to perform a silent update. `0` indicates a
                            normal push notification.
                          type: integer
                        mutable-content:
                          description: >-
                            The notification service app extension flag. If the
                            value is 1, your notification is passed to your
                            notification service app extension before delivery.
                            Use your extension to modify the notification’s
                            content.
                          type: integer
                        target-content-id:
                          description: The identifier of the window brought forward.
                          type: string
                        interruption-level:
                          description: >-
                            Indicates the importance and delivery timing of a
                            notification.
                          type: string
                          enum:
                            - passive
                            - active
                            - time-sensitive
                            - critical
                        relevance-score:
                          description: >-
                            A number between 0 and 1. The highest score is
                            considered the "most relevant"  and is featured in
                            the notification summary.
                          type: number
            android:
              description: A custom push payload for Android devices.
              type: object
              required:
                - message
              properties:
                message:
                  description: The parent object for Android custom push payloads.
                  type: object
                  properties:
                    notification:
                      description: Contains the push body and title.
                      type: object
                      properties:
                        title:
                          description: The title of your push notification.
                          type: string
                        body:
                          description: The body of your push notification.
                          type: string
                    data:
                      description: Contains key-value pairs that your app interprets.
                      type: object
                      additionalProperties:
                        x-additionalPropertiesName: Attachment Names
                        x-doNotRender: true
                        type: string
                    android:
                      description: Contains custom push options for your notification.
                      type: object
                      properties:
                        notification:
                          description: Properties supported specifically by Android on FCM.
                          type: object
                          properties:
                            icon:
                              description: >-
                                Sets the notification icon to `myicon` for
                                drawable resource `myicon`. If you don't send
                                this key, FCM displays the launcher icon from
                                your app manifest.
                              type: string
                            sound:
                              description: >-
                                The sound that plays when the device receives
                                the notification. Supports `"default"` or the
                                filename of a sound resource bundled in your
                                app. Sound files must reside in `/res/raw/`.
                              type: string
                            tag:
                              description: >
                                Identifier to replace existing notifications in
                                the notification drawer. If empty, each request
                                creates a new notification.


                                If you specify a tag, and a notification with
                                the same tag is already being shown, the new
                                notification replaces the existing one in the
                                notification drawer. 
                              type: string
                            color:
                              description: >-
                                The notification's icon color in `#rrggbb`
                                format.
                              type: string
                            click_action:
                              description: >-
                                The action that occurs when a user taps on the
                                notification. Launches an activity with a
                                matching intent filter when a person taps the
                                notification.
                              type: string
                            body_loc_key:
                              description: >-
                                The key to the body string in the app's string
                                resources that you want to use to localize the
                                body text to the user's current localization.
                                See [String
                                Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                for more information.
                              type: string
                            body_loc_arg:
                              description: >-
                                Variable string values used in place of the
                                format specifiers in `body_loc_key` to localize
                                the body text to the user's current
                                localization. See Formatting and Styling for
                                more information.
                              type: string
                            title_loc_key:
                              description: >-
                                The key to the title string in the app's string
                                resources that you want to use to localize the
                                title text to the user's current localization.
                                See [String
                                Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                for more information.
                              type: string
                            title_loc_arg:
                              description: >-
                                Variable string values used in place of the
                                format specifiers in `title_loc_key` to localize
                                the title text to the user's current
                                localization. See Formatting and Styling for
                                more information.
                              type: string
        language:
          description: >-
            Overrides language preferences for the person you want to send your
            transactional message to. Use one of our [supported two- or
            four-letter language codes](https://customer.io/docs/api/track/).
          type: string
    transactionalSharedObject:
      type: object
      required:
        - to
        - identifiers
      properties:
        identifiers:
          description: >-
            Identifies the person represented by your transactional message by
            one of, and only one of, `id`, `email`, or `cio_id`.
          oneOf:
            - title: id
              type: object
              required:
                - id
              properties:
                id:
                  description: >
                    The identifier for the person represented by the
                    transactional message. **NOTE**: If your workspace
                    identifies people by email, use the `email` identifier
                    instead.
                  type: string
                  example: 12345
            - title: email
              type: object
              required:
                - email
              properties:
                email:
                  description: >-
                    The identifier for the person represented by the
                    transactional message. Use this option if your workspace
                    identifies people by email rather than by `id`.
                  type: string
                  example: cool.person@example.com
            - title: cio_id
              type: object
              required:
                - cio_id
              properties:
                cio_id:
                  description: >-
                    A unique, immutable identifier for a person, set by
                    Customer.io when you add a person.
                  type: string
                  example: 3000001
        message_data:
          description: >-
            An object containing the key-value pairs referenced using liquid in
            your message.
          type: object
          additionalProperties:
            description: Insert key-values that you want to reference in your message here.
            x-additionalPropertiesName: Liquid Data
          example:
            password_reset_token: abcde-12345-fghij-d888
            account_id: 123dj
        send_at:
          description: >-
            A unix timestamp (seconds since epoch) determining when the message
            will be sent. The timestamp can be up to 90 days in the future. If
            this value is in the past, your message is sent immediately.
          type: integer
        disable_message_retention:
          description: >-
            If true, the message body is not retained in delivery history.
            Setting this value overrides the value set in the settings of your
            `transactional_message_id`.
          type: boolean
          default: false
        send_to_unsubscribed:
          description: >-
            If false, your message is not sent to unsubscribed recipients.
            Setting this value overrides the value set in the settings of your
            `transactional_message_id`.
          type: boolean
          default: true
        queue_draft:
          description: >-
            If true, your transactional message is held as a draft in
            Customer.io and not sent directly to your audience. You must go to
            the Deliveries and Drafts page to send your message.
          type: boolean
          default: false
    snippet:
      description: >-
        describes a piece of reusable content. You must provide a name for the
        snippet and the `value`—the content that appears in messages that use
        the snippet.
      type: object
      required:
        - name
        - value
      properties:
        name:
          description: The name of the snippet, must be unique.
          type: string
        value:
          description: The contents of the snippet.
          type: string
        updated_at:
          description: The last date-time the snippet was updated.
          type: integer
          format: unix timestamp
          readOnly: true
      example:
        name: address
        value: <strong>My Company</strong></br>1234 Fake St<br/>Fake,NY<br/>10111
        updated_at: 1582500000
    senderIdentityObject:
      description: Information about a sender.
      type: object
      properties:
        id:
          description: The identifier of a sender.
          type: integer
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        name:
          description: The name of the sender.
          type: string
        email:
          description: The email address of the sender.
          type: string
        address:
          description: >-
            The sender name and email address in the format `name
            <name@example.com>`.
          type: string
        template_type:
          description: The type of sender.
          type: string
          enum:
            - email
            - phone
        auto_generated:
          description: If true, the sender is automatically generated by Customer.io.
          type: boolean
      example:
        id: 4534
        deduplicate_id: '4534:1478035647'
        name: Cher Ami
        email: test@example.com
        address: Cher Ami <test@example.com>
        template_type: email
        auto_generated: false
    export_id:
      description: The identifier for the export.
      type: integer
      example: 110
    export_type:
      description: The type of information contained in the export.
      type: string
      enum:
        - customers
        - deliveries
      example: customers
    export_failed:
      description: If true, the export was unsuccessful.
      type: boolean
      example: false
    export_description:
      description: A description of the export.
      type: string
      example: Customers with segment filters—in Purchased Flowers
    export_downloads:
      description: Counts the total number of times the export has been downloaded.
      type: integer
      example: 2
    metric:
      description: Determines the metric(s) you want to return.
      type: string
      enum:
        - created
        - attempted
        - sent
        - delivered
        - opened
        - clicked
        - converted
        - bounced
        - spammed
        - unsubscribed
        - dropped
        - failed
        - undeliverable
    start:
      description: The unix timestamp representing the beginning of the export.
      type: integer
      format: unix timestamp
      example: 1517529600
    end:
      description: The unix timestamp representing the end of the export.
      type: integer
      format: unix timestamp
      example: 1517702400
    drafts:
      description: If true, your request returns both drafts and active/sent messages.
      type: boolean
    exportObject:
      description: Metadata about an export.
      type: object
      properties:
        description:
          description: A description of the export.
          type: string
          example: Customers with segment filters—in Purchased Flowers
        id:
          description: The identifier for the export.
          type: integer
          example: 110
        user_id:
          description: The user who created the export.
          type: integer
        user_email:
          description: The email of the user who created the export.
          type: string
        total:
          description: The number of entries in the export. Exports report 0 until done.
          type: integer
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        type:
          description: The type of information contained in the export.
          type: string
          enum:
            - customers
            - deliveries
          example: customers
        failed:
          description: If true, the export was unsuccessful.
          type: boolean
          example: false
        downloads:
          description: Counts the total number of times the export has been downloaded.
          type: integer
          example: 2
        created_at:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated_at:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        status:
          description: >-
            The state of your export where `done` indicates an export that you
            can download, `pending`, indicates that your export is not ready to
            download, and `failed` indicates an export that has failed and will
            not be downloadable.
          type: string
          enum:
            - done
            - pending
            - failed
      example:
        description: Customers with segment filters—in \Purchased Flowers\
        id: 110
        user_id: 0
        user_email: person@email.com
        total: 1234
        deduplicate_id: '110:1530296738'
        type: customers
        failed: false
        status: done
        downloads: 2
        created_at: 1530296738
        updated_at: 1530296738
    variant_id:
      description: >-
        The identifier of a newsletter variant—a language in a multi-language
        newsletter or a test in an A/B test.
      type: integer
      readOnly: true
    subscription_topic_id:
      description: >-
        The identifier of a subscription topic. Remember, subscription topics
        are assigned an incrementing number, starting at 1.
      type: integer
      example: 1
    newsletterObject:
      type: object
      properties:
        tags:
          description: An array of tags you set on this newsletter.
          type: array
          items:
            type: string
        id:
          description: The identifier for a newsletter.
          type: integer
          example: 10
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        name:
          description: The name of the newsletter.
          type: string
          readOnly: true
        created:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        sent_at:
          description: The last time the newsletter was sent.
          type: integer
          format: unix timestamp
        recipient_segment_ids:
          description: >-
            A list of segments used in a newsletter's recipient filter, returned
            if newsletter recipients were filtered by one or more segments.
          type: array
          items:
            type: integer
        content_ids:
          description: >-
            A list of languages in a multi-language newsletter and/or A/B test
            variants for this message. [Look up a newsletter
            variant](https://customer.io/docs/api/track/) to get more
            information about an individual content ID.
          type: array
          items:
            type: integer
        type:
          description: The type of newsletter—`email`, `twilio`, etc.
          type: string
          enum:
            - email
            - webhook
            - twilio
            - slack
            - push
            - in_app
        subscription_topic_id:
          description: >-
            The identifier of a subscription topic. Remember, subscription
            topics are assigned an incrementing number, starting at 1.
          type: integer
          example: 1
      example:
        tags:
          - Example Tag
        id: 128275
        deduplicate_id: '128275:1484870424'
        type: email
        content_ids:
          - 45
          - 90
        name: Example Newsletter
        sent_at: null
        created: 1481653929
        updated: 1484870424
        recipient_segment_ids:
          - 10
        subscription_topic_id: 1
    customer_events:
      description: Describes the customer events reported from Customer.io to a webhook.
      type: object
      properties:
        customer_subscribed:
          description: >-
            A person's `unsubscribed` attribute was explicitly set to `false`.
            Set to true to report `subscribed` events.
          type: boolean
        customer_unsubscribed:
          description: >-
            A person's `unsubscribed` attribute was explicitly set to `true`.
            Set to true to report `unsubscribed` events.
          type: boolean
        cio_subscription_preferences_changed:
          description: >-
            A person's subscription preferences changed. [Learn more about the
            subscription center](https://customer.io/docs/api/track/).
          type: boolean
    email_events:
      description: Describes the email events reported from Customer.io to a webhook.
      type: object
      properties:
        email_attempted:
          description: >-
            Reports when a message cannot be sent to the delivery provider and
            will retry. Set to true to report this event type.
          type: boolean
        email_bounced:
          description: >-
            Reports when the delivery provider is unable to deliver a message.
            Set to true to report this event type.
          type: boolean
        email_clicked:
          description: >-
            Reports when a person clicks a tracked link in a message. Set to
            true to report this event type.
          type: boolean
        email_converted:
          description: Reports a conversion. Set to true to report this event type.
          type: boolean
        email_deferred:
          description: >-
            Reports when the delivery provider couldn't send a message and will
            retry. Set to true to report this event type.
          type: boolean
        email_delivered:
          description: >-
            Reports when the delivery provider reports that a message is
            delivered to an inbox. Set to true to report this event type.
          type: boolean
        email_drafted:
          description: >-
            Reports when a message draft is created. Set to true to report this
            event type.
          type: boolean
        email_dropped:
          description: >-
            Reports when a message isn't sent because the recipient is
            suppressed. Set to true to report this event type.
          type: boolean
        email_failed:
          description: >-
            Reports when an email couldn't be sent to the delivery provider. Set
            to true to report this event type.
          type: boolean
        email_opened:
          description: >-
            Reports when a recipient opens a message. Set to true to report this
            event type.
          type: boolean
        email_sent:
          description: >-
            Reports when a message is sent from Customer.io to the delivery
            provider. Set to true to report this event type.
          type: boolean
        email_spammed:
          description: >-
            Reports a recipient marks a message as spam. Set to true to report
            this even type.
          type: boolean
        email_unsubscribed:
          description: >-
            Reports when a person unsubscribes through a particular email. Set
            to true to report this event type.
          type: boolean
    push_events:
      description: Describes the push events reported from Customer.io to a webhook.
      type: object
      properties:
        push_attempted:
          description: >-
            Reports when a push notification could not be sent to the delivery
            provider will retry. Set to true to report this event type.
          type: boolean
        push_bounced:
          description: >-
            Reports when the delivery provider is unable to deliver a message.
            Set to true to report this event type.
          type: boolean
        push_clicked:
          description: >-
            Reports when a person clicks a tracked link in a message. Set to
            true to report this event type.
          type: boolean
        push_converted:
          description: Reports a conversion. Set to true to report this event type.
          type: boolean
        push_delivered:
          description: >-
            An app reports that the recipient's device received a message. Set
            to true to report this event type.
          type: boolean
        push_drafted:
          description: >-
            Reports when a message draft is created. Set to true to report this
            event type.
          type: boolean
        push_dropped:
          description: >-
            Reports when a message isn't sent because the recipient is
            suppressed. Set to true to report this event type.
          type: boolean
        push_failed:
          description: >-
            Reports when a message couldn't be sent to the delivery provider.
            Set to true to report this event type.
          type: boolean
        push_opened:
          description: >-
            The app on a recipient's device reports that the recipient opened
            the message. Set to true to report this event type.
          type: boolean
        push_sent:
          description: >-
            Reports when a message is sent from Customer.io to the delivery
            provider. Set to true to report this event type.
          type: boolean
    sms_events:
      description: Describes the SMS events reported from Customer.io to a webhook.
      type: object
      properties:
        sms_attempted:
          description: >-
            Reports when a push notification could not be sent to the delivery
            provider will retry. Set to true to report this event type.
          type: boolean
        sms_bounced:
          description: >-
            Reports when the delivery provider is unable to deliver a message to
            the recipient. Set to true to report this event type.
          type: boolean
        sms_clicked:
          description: >-
            Reports when a person clicks a tracked link in a message. Set to
            true to report this event type.
          type: boolean
        sms_converted:
          description: >-
            Reports when a person matches a conversion goal attributed to a a
            message. Set to true to report this event type.
          type: boolean
        sms_delivered:
          description: >-
            The delivery provider reports that the message is delivered. Set to
            true to report this event type.
          type: boolean
        sms_drafted:
          description: >-
            Reports when a message draft is created. Set to true to report this
            event type.
          type: boolean
        sms_failed:
          description: >-
            Reports when a message couldn't be sent to the delivery provider.
            Set to true to report this event type.
          type: boolean
        sms_sent:
          description: >-
            Reports when a message is sent from Customer.io to the delivery
            provider. Set to true to report this event type.
          type: boolean
    slack_events:
      description: Describes the slack events reported from Customer.io to a webhook.
      type: object
      properties:
        slack_attempted:
          description: >-
            Reports when a message could not be sent to the delivery provider
            will retry. Set to true to report this event type.
          type: boolean
        slack_clicked:
          description: >-
            Reports when a person clicks a tracked link in a message. Set to
            true to report this event type.
          type: boolean
        slack_converted:
          description: >-
            Reports when a person matches a conversion goal attributed to a a
            message. Set to true to report this event type.
          type: boolean
        slack_drafted:
          description: >-
            Reports when a message draft is created. Set to true to report this
            event type.
          type: boolean
        slack_failed:
          description: >-
            Reports when a message couldn't be sent to the delivery provider.
            Set to true to report this event type.
          type: boolean
        slack_sent:
          description: >-
            Reports when a message is sent from Customer.io to the delivery
            provider. Set to true to report this event type.
          type: boolean
    webhook_events:
      description: Describes the webhook events reported from Customer.io to a webhook.
      type: object
      properties:
        webhook_attempted:
          description: >-
            Reports when a webhook could not be sent and will retry. Set to true
            to report this event type.
          type: boolean
        webhook_clicked:
          description: >-
            Reports when a tracked link in a webhook payload is opened. Set to
            true to report this event type.
          type: boolean
        webhook_drafted:
          description: A webhook draft is created. Set to true to report this event type.
          type: boolean
        webhook_failed:
          description: >-
            Reports when a webhook couldn't be sent to the webhook URL. Set to
            true to report this event type.
          type: boolean
        webhook_sent:
          description: >-
            Reports when a webhook is sent from Customer.io to the webhook URL.
            Set to true to report this event type.
          type: boolean
    body_content:
      description: >-
        If your reporting webhook includes content (the *Body Content* box is
        checked) and the `metric` is `sent, this contains the body of the
        messages. If the message is an email, this also contains email headers.
        For push and in-app messages, this is the stringified payload for your
        message.
      type: string
    reportingWebhook:
      type: object
      required:
        - name
        - endpoint
        - events
      properties:
        name:
          description: The name of your webhook.
          type: string
          example: my cool webhook
        id:
          description: The identifier for the webhook.
          type: integer
          readOnly: true
          example: 4
        endpoint:
          description: The webhook URL.
          type: string
          format: url
          example: http://example.com/webhook
        disabled:
          description: >-
            Set to `true` to quit sending events to the webhook URL. Set to
            `false` to enable the webhook.
          type: boolean
          example: false
        full_resolution:
          description: >-
            Set to `false` to send unique open and click events to the webhook.
            Set to `true` to send all events.
          type: boolean
          default: false
          example: true
        with_content:
          description: Set to `true` to include the message `body` in `_sent` events.
          type: boolean
          example: false
        events:
          description: >-
            Specifies the types of events you want to report to your webhook.
            See our [reporting webhooks
            reference](https://customer.io/docs/api/track/) for more information
            about event types and the information they return.
          type: array
          minItems: 1
          items:
            type: string
            enum:
              - customer_subscribed
              - customer_unsubscribed
              - cio_subscription_preferences_changed
              - email_drafted
              - email_attempted
              - email_sent
              - email_delivered
              - email_opened
              - email_clicked
              - email_converted
              - email_bounced
              - email_dropped
              - email_deferred
              - email_spammed
              - email_failed
              - email_unsubscribed
              - email_undeliverable
              - push_drafted
              - push_attempted
              - push_sent
              - push_delivered
              - push_opened
              - push_clicked
              - push_converted
              - push_bounced
              - push_dropped
              - push_failed
              - push_undeliverable
              - slack_drafted
              - slack_attempted
              - slack_sent
              - slack_clicked
              - slack_converted
              - slack_failed
              - sms_drafted
              - sms_attempted
              - sms_sent
              - sms_delivered
              - sms_clicked
              - sms_converted
              - sms_bounced
              - sms_failed
              - sms_undeliverable
              - webhook_drafted
              - webhook_attempted
              - webhook_sent
              - webhook_clicked
              - webhook_converted
              - webhook_failed
              - webhook_undeliverable
          example:
            - email_failed
            - webhook_failed
    url:
      description: The URL of a webhook or action.
      type: string
      example: http://example.com/webhook
    request_method:
      description: The method used in conjunction with a webhook `url`.
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
      example: POST
    forgotten:
      description: If true, Customer.io does not retain the message content.
      type: boolean
      example: false
    archivedMessageObject:
      description: |
        An archived message, including a complete message body.
      type: object
      properties:
        id:
          description: >-
            The identifier for a delivery—the instance of a message intended for
            an individual recipient.
          type: string
          readOnly: true
          example: dgOq6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=
        body:
          description: >-
            The body of the variant. You cannot modify the body if you created
            it with our drag-and-drop editor.
          type: string
          example: >-
            <!DOCTYPE html><html><head>\n<meta http-equiv=\"Content-Type\"
            content=\"text/html; charset=UTF-8\"/><h1>Hello
            World</h1>\n\n</body></html>
        from:
          description: >-
            The address that the message is from, relevant if the action `type`
            is `email`.
          type: string
          readOnly: true
          example: sentFrom@example.com
        reply_to:
          description: The address that receives replies for the message, if applicable.
          type: string
          readOnly: true
          example: replyto@example.com
        recipient:
          description: The recipient address for an action.
          type: string
          example: person@example.com
        subject:
          description: The subject line for an `email` action.
          type: string
          example: Did you get that thing I sent you?
        bcc:
          description: The blind-copy address(es) for this action.
          readOnly: true
          type: string
        fake_bcc:
          description: >
            If true, rather than sending true copies to BCC addresses,
            Customer.io sends a copy of the message with the subject line
            containing the recipient address(es).
          readOnly: true
          type: boolean
        preheader_text:
          description: >-
            Also known as "preview text", this specifies the small block of text
            shown in an end-user's email inbox, next to, or underneath, the
            subject line.
          type: string
        url:
          description: The URL of a webhook or action.
          type: string
          example: http://example.com/webhook
        request_method:
          description: The method used in conjunction with a webhook `url`.
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
          example: POST
        headers:
          description: >-
            Headers must be strings and cannot contain any non-ASCII characters
            or empty spaces. Some headers are reserved and cannot be
            overwritten.
          type: array
          items:
            type: object
            properties:
              name:
                description: name of header
                type: string
                example: X-Mailgun-Tag
              value:
                description: value of header
                type: string
                example: tag-name-for-tracking
        forgotten:
          description: If true, Customer.io does not retain the message content.
          type: boolean
          example: false
    commonTriggerProps:
      type: object
      properties:
        data:
          description: Contains information you want to use to populate your broadcast.
          type: object
          additionalProperties:
            description: Insert key-values that you want to reference in your message here.
            x-additionalPropertiesName: Broadcast liquid data
          example:
            headline: Roadrunner spotted in Albuquerque!
            date: 1511315635
            text: >-
              We received reports of a roadrunner in your immediate area! Head
              to your dashboard to view more information!
        email_add_duplicates:
          description: >-
            an email address associated with more than one profile id is an
            error.
          type: boolean
          default: false
        email_ignore_missing:
          description: If false a missing email address is an error.
          type: boolean
          default: false
        id_ignore_missing:
          description: If false, a missing customer ID is an error.
          type: boolean
          default: false
    campaignRequest:
      oneOf:
        - title: Default audience
          description: >-
            Send your broadcast to the default set of recipients defined in the
            UI.
          type: object
          properties:
            data:
              description: Contains information you want to use to populate your broadcast.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: Broadcast liquid data
              example:
                headline: Roadrunner spotted in Albuquerque!
                date: 1511315635
                text: >-
                  We received reports of a roadrunner in your immediate area!
                  Head to your dashboard to view more information!
            email_add_duplicates:
              description: >-
                an email address associated with more than one profile id is an
                error.
              type: boolean
              default: false
            email_ignore_missing:
              description: If false a missing email address is an error.
              type: boolean
              default: false
            id_ignore_missing:
              description: If false, a missing customer ID is an error.
              type: boolean
              default: false
        - title: Custom recipients
          description: >-
            Send your broadcast to a group of people defined by a set of
            filters.
          allOf:
            - type: object
              required:
                - recipients
              properties:
                recipients:
                  title: Audience Filter
                  description: >-
                    A filter defining the group of people that you want send the
                    broadcast to.
                  oneOf:
                    - title: and
                      type: object
                      properties:
                        and:
                          description: Match *all* conditions to return results.
                          type: array
                          items:
                            type: object
                            properties:
                              or:
                                description: Returns results matching *any* conditions.
                                type: array
                                items:
                                  anyOf:
                                    - title: segment
                                      description: >-
                                        Filter for people who belong to a
                                        segment.
                                      type: object
                                      properties:
                                        segment:
                                          title: segment
                                          description: >-
                                            Provide the `id` of a segment containing
                                            people you want to search for.
                                          type: object
                                          properties:
                                            id:
                                              description: >-
                                                The ID of the segment you want to return
                                                people from.
                                              type: integer
                                              example: 4
                                    - title: audience
                                      description: >-
                                        filter for people who have an attribute
                                        or an attribute value.
                                      type: object
                                      properties:
                                        attribute:
                                          title: attribute
                                          description: Filter your audience by attribute.
                                          type: object
                                          required:
                                            - field
                                            - operator
                                          properties:
                                            field:
                                              description: >-
                                                The name of the attribute you want to
                                                filter against.
                                              type: string
                                              example: first_name
                                            operator:
                                              description: >-
                                                Determine how to evaluate criteria
                                                against the field—`exists` returns
                                                results if a person in the audience has
                                                the attribute; `eq` returns results if
                                                the audience has the attribute and the
                                                attribute has the `value` you specify.
                                              type: string
                                              enum:
                                                - eq
                                                - exists
                                            value:
                                              description: >-
                                                The value you want to match for this
                                                attribute. You must include a value if
                                                you use the `eq` operator.
                                              type: string
                                          example:
                                            field: unsubscribed
                                            operator: eq
                                            value: true
                              not:
                                description: >-
                                  Returns results if a condition is false. While
                                  and/or support an array of items, `not`
                                  supports a single filter object.
                                oneOf:
                                  - title: and
                                    type: object
                                    properties:
                                      and:
                                        description: >-
                                          Match *all* conditions to return
                                          results.
                                        type: array
                                        items:
                                          anyOf:
                                            - title: segment
                                              description: >-
                                                Filter for people who belong to a
                                                segment.
                                              type: object
                                              properties:
                                                segment:
                                                  title: segment
                                                  description: >-
                                                    Provide the `id` of a segment containing
                                                    people you want to search for.
                                                  type: object
                                                  properties:
                                                    id:
                                                      description: >-
                                                        The ID of the segment you want to return
                                                        people from.
                                                      type: integer
                                                      example: 4
                                            - title: audience
                                              description: >-
                                                filter for people who have an attribute
                                                or an attribute value.
                                              type: object
                                              properties:
                                                attribute:
                                                  title: attribute
                                                  description: Filter your audience by attribute.
                                                  type: object
                                                  required:
                                                    - field
                                                    - operator
                                                  properties:
                                                    field:
                                                      description: >-
                                                        The name of the attribute you want to
                                                        filter against.
                                                      type: string
                                                      example: first_name
                                                    operator:
                                                      description: >-
                                                        Determine how to evaluate criteria
                                                        against the field—`exists` returns
                                                        results if a person in the audience has
                                                        the attribute; `eq` returns results if
                                                        the audience has the attribute and the
                                                        attribute has the `value` you specify.
                                                      type: string
                                                      enum:
                                                        - eq
                                                        - exists
                                                    value:
                                                      description: >-
                                                        The value you want to match for this
                                                        attribute. You must include a value if
                                                        you use the `eq` operator.
                                                      type: string
                                                  example:
                                                    field: unsubscribed
                                                    operator: eq
                                                    value: true
                                  - title: or
                                    type: object
                                    properties:
                                      or:
                                        description: Match *any* condition to return results.
                                        type: array
                                        items:
                                          anyOf:
                                            - title: segment
                                              description: >-
                                                Filter for people who belong to a
                                                segment.
                                              type: object
                                              properties:
                                                segment:
                                                  title: segment
                                                  description: >-
                                                    Provide the `id` of a segment containing
                                                    people you want to search for.
                                                  type: object
                                                  properties:
                                                    id:
                                                      description: >-
                                                        The ID of the segment you want to return
                                                        people from.
                                                      type: integer
                                                      example: 4
                                            - title: audience
                                              description: >-
                                                filter for people who have an attribute
                                                or an attribute value.
                                              type: object
                                              properties:
                                                attribute:
                                                  title: attribute
                                                  description: Filter your audience by attribute.
                                                  type: object
                                                  required:
                                                    - field
                                                    - operator
                                                  properties:
                                                    field:
                                                      description: >-
                                                        The name of the attribute you want to
                                                        filter against.
                                                      type: string
                                                      example: first_name
                                                    operator:
                                                      description: >-
                                                        Determine how to evaluate criteria
                                                        against the field—`exists` returns
                                                        results if a person in the audience has
                                                        the attribute; `eq` returns results if
                                                        the audience has the attribute and the
                                                        attribute has the `value` you specify.
                                                      type: string
                                                      enum:
                                                        - eq
                                                        - exists
                                                    value:
                                                      description: >-
                                                        The value you want to match for this
                                                        attribute. You must include a value if
                                                        you use the `eq` operator.
                                                      type: string
                                                  example:
                                                    field: unsubscribed
                                                    operator: eq
                                                    value: true
                                  - title: segment
                                    type: object
                                    properties:
                                      segment:
                                        title: segment
                                        description: >-
                                          Provide the `id` of a segment containing
                                          people you want to search for.
                                        type: object
                                        properties:
                                          id:
                                            description: >-
                                              The ID of the segment you want to return
                                              people from.
                                            type: integer
                                            example: 4
                                  - title: attribute
                                    type: object
                                    properties:
                                      attribute:
                                        title: attribute
                                        description: Filter your audience by attribute.
                                        type: object
                                        required:
                                          - field
                                          - operator
                                        properties:
                                          field:
                                            description: >-
                                              The name of the attribute you want to
                                              filter against.
                                            type: string
                                            example: first_name
                                          operator:
                                            description: >-
                                              Determine how to evaluate criteria
                                              against the field—`exists` returns
                                              results if a person in the audience has
                                              the attribute; `eq` returns results if
                                              the audience has the attribute and the
                                              attribute has the `value` you specify.
                                            type: string
                                            enum:
                                              - eq
                                              - exists
                                          value:
                                            description: >-
                                              The value you want to match for this
                                              attribute. You must include a value if
                                              you use the `eq` operator.
                                            type: string
                                        example:
                                          field: unsubscribed
                                          operator: eq
                                          value: true
                              segment:
                                title: segment
                                description: >-
                                  Provide the `id` of a segment containing
                                  people you want to search for.
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of the segment you want to return
                                      people from.
                                    type: integer
                                    example: 4
                              attribute:
                                title: attribute
                                description: Filter your audience by attribute.
                                type: object
                                required:
                                  - field
                                  - operator
                                properties:
                                  field:
                                    description: >-
                                      The name of the attribute you want to
                                      filter against.
                                    type: string
                                    example: first_name
                                  operator:
                                    description: >-
                                      Determine how to evaluate criteria against
                                      the field—`exists` returns results if a
                                      person in the audience has the attribute;
                                      `eq` returns results if the audience has
                                      the attribute and the attribute has the
                                      `value` you specify.
                                    type: string
                                    enum:
                                      - eq
                                      - exists
                                  value:
                                    description: >-
                                      The value you want to match for this
                                      attribute. You must include a value if you
                                      use the `eq` operator.
                                    type: string
                                example:
                                  field: unsubscribed
                                  operator: eq
                                  value: true
                    - title: or
                      type: object
                      properties:
                        or:
                          description: Match *any* condition to return results.
                          type: array
                          items:
                            type: object
                            properties:
                              and:
                                description: Returns results matching *all* conditions.
                                type: array
                                items:
                                  anyOf:
                                    - title: segment
                                      description: >-
                                        Filter for people who belong to a
                                        segment.
                                      type: object
                                      properties:
                                        segment:
                                          title: segment
                                          description: >-
                                            Provide the `id` of a segment containing
                                            people you want to search for.
                                          type: object
                                          properties:
                                            id:
                                              description: >-
                                                The ID of the segment you want to return
                                                people from.
                                              type: integer
                                              example: 4
                                    - title: audience
                                      description: >-
                                        filter for people who have an attribute
                                        or an attribute value.
                                      type: object
                                      properties:
                                        attribute:
                                          title: attribute
                                          description: Filter your audience by attribute.
                                          type: object
                                          required:
                                            - field
                                            - operator
                                          properties:
                                            field:
                                              description: >-
                                                The name of the attribute you want to
                                                filter against.
                                              type: string
                                              example: first_name
                                            operator:
                                              description: >-
                                                Determine how to evaluate criteria
                                                against the field—`exists` returns
                                                results if a person in the audience has
                                                the attribute; `eq` returns results if
                                                the audience has the attribute and the
                                                attribute has the `value` you specify.
                                              type: string
                                              enum:
                                                - eq
                                                - exists
                                            value:
                                              description: >-
                                                The value you want to match for this
                                                attribute. You must include a value if
                                                you use the `eq` operator.
                                              type: string
                                          example:
                                            field: unsubscribed
                                            operator: eq
                                            value: true
                              not:
                                description: >-
                                  Returns results if a condition is false. While
                                  and/or support an array of items, `not`
                                  supports a single filter object.
                                oneOf:
                                  - title: and
                                    type: object
                                    properties:
                                      and:
                                        description: >-
                                          Match *all* conditions to return
                                          results.
                                        type: array
                                        items:
                                          anyOf:
                                            - title: segment
                                              description: >-
                                                Filter for people who belong to a
                                                segment.
                                              type: object
                                              properties:
                                                segment:
                                                  title: segment
                                                  description: >-
                                                    Provide the `id` of a segment containing
                                                    people you want to search for.
                                                  type: object
                                                  properties:
                                                    id:
                                                      description: >-
                                                        The ID of the segment you want to return
                                                        people from.
                                                      type: integer
                                                      example: 4
                                            - title: audience
                                              description: >-
                                                filter for people who have an attribute
                                                or an attribute value.
                                              type: object
                                              properties:
                                                attribute:
                                                  title: attribute
                                                  description: Filter your audience by attribute.
                                                  type: object
                                                  required:
                                                    - field
                                                    - operator
                                                  properties:
                                                    field:
                                                      description: >-
                                                        The name of the attribute you want to
                                                        filter against.
                                                      type: string
                                                      example: first_name
                                                    operator:
                                                      description: >-
                                                        Determine how to evaluate criteria
                                                        against the field—`exists` returns
                                                        results if a person in the audience has
                                                        the attribute; `eq` returns results if
                                                        the audience has the attribute and the
                                                        attribute has the `value` you specify.
                                                      type: string
                                                      enum:
                                                        - eq
                                                        - exists
                                                    value:
                                                      description: >-
                                                        The value you want to match for this
                                                        attribute. You must include a value if
                                                        you use the `eq` operator.
                                                      type: string
                                                  example:
                                                    field: unsubscribed
                                                    operator: eq
                                                    value: true
                                  - title: or
                                    type: object
                                    properties:
                                      or:
                                        description: Match *any* condition to return results.
                                        type: array
                                        items:
                                          anyOf:
                                            - title: segment
                                              description: >-
                                                Filter for people who belong to a
                                                segment.
                                              type: object
                                              properties:
                                                segment:
                                                  title: segment
                                                  description: >-
                                                    Provide the `id` of a segment containing
                                                    people you want to search for.
                                                  type: object
                                                  properties:
                                                    id:
                                                      description: >-
                                                        The ID of the segment you want to return
                                                        people from.
                                                      type: integer
                                                      example: 4
                                            - title: audience
                                              description: >-
                                                filter for people who have an attribute
                                                or an attribute value.
                                              type: object
                                              properties:
                                                attribute:
                                                  title: attribute
                                                  description: Filter your audience by attribute.
                                                  type: object
                                                  required:
                                                    - field
                                                    - operator
                                                  properties:
                                                    field:
                                                      description: >-
                                                        The name of the attribute you want to
                                                        filter against.
                                                      type: string
                                                      example: first_name
                                                    operator:
                                                      description: >-
                                                        Determine how to evaluate criteria
                                                        against the field—`exists` returns
                                                        results if a person in the audience has
                                                        the attribute; `eq` returns results if
                                                        the audience has the attribute and the
                                                        attribute has the `value` you specify.
                                                      type: string
                                                      enum:
                                                        - eq
                                                        - exists
                                                    value:
                                                      description: >-
                                                        The value you want to match for this
                                                        attribute. You must include a value if
                                                        you use the `eq` operator.
                                                      type: string
                                                  example:
                                                    field: unsubscribed
                                                    operator: eq
                                                    value: true
                                  - title: segment
                                    type: object
                                    properties:
                                      segment:
                                        title: segment
                                        description: >-
                                          Provide the `id` of a segment containing
                                          people you want to search for.
                                        type: object
                                        properties:
                                          id:
                                            description: >-
                                              The ID of the segment you want to return
                                              people from.
                                            type: integer
                                            example: 4
                                  - title: attribute
                                    type: object
                                    properties:
                                      attribute:
                                        title: attribute
                                        description: Filter your audience by attribute.
                                        type: object
                                        required:
                                          - field
                                          - operator
                                        properties:
                                          field:
                                            description: >-
                                              The name of the attribute you want to
                                              filter against.
                                            type: string
                                            example: first_name
                                          operator:
                                            description: >-
                                              Determine how to evaluate criteria
                                              against the field—`exists` returns
                                              results if a person in the audience has
                                              the attribute; `eq` returns results if
                                              the audience has the attribute and the
                                              attribute has the `value` you specify.
                                            type: string
                                            enum:
                                              - eq
                                              - exists
                                          value:
                                            description: >-
                                              The value you want to match for this
                                              attribute. You must include a value if
                                              you use the `eq` operator.
                                            type: string
                                        example:
                                          field: unsubscribed
                                          operator: eq
                                          value: true
                              segment:
                                title: segment
                                description: >-
                                  Provide the `id` of a segment containing
                                  people you want to search for.
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of the segment you want to return
                                      people from.
                                    type: integer
                                    example: 4
                              attribute:
                                title: attribute
                                description: Filter your audience by attribute.
                                type: object
                                required:
                                  - field
                                  - operator
                                properties:
                                  field:
                                    description: >-
                                      The name of the attribute you want to
                                      filter against.
                                    type: string
                                    example: first_name
                                  operator:
                                    description: >-
                                      Determine how to evaluate criteria against
                                      the field—`exists` returns results if a
                                      person in the audience has the attribute;
                                      `eq` returns results if the audience has
                                      the attribute and the attribute has the
                                      `value` you specify.
                                    type: string
                                    enum:
                                      - eq
                                      - exists
                                  value:
                                    description: >-
                                      The value you want to match for this
                                      attribute. You must include a value if you
                                      use the `eq` operator.
                                    type: string
                                example:
                                  field: unsubscribed
                                  operator: eq
                                  value: true
                    - title: not
                      description: >-
                        Returns results if a condition is false. While and/or
                        support an array of items, `not` supports a single
                        filter object.
                      oneOf:
                        - title: and
                          type: object
                          properties:
                            and:
                              description: Match *all* conditions to return results.
                              type: array
                              items:
                                title: People Filter
                                description: >-
                                  When filtering for people, you can use `and`
                                  and `or` arrays to determine the logic for a
                                  group of filter conditions. `not` reverses the
                                  filter condition and matches when the
                                  condition is false. `segment` and `attribute`
                                  represent the individual conditions you can
                                  filter a group of people for.
                                type: object
                                properties:
                                  and:
                                    description: Returns results matching *all* conditions.
                                    type: array
                                    items:
                                      anyOf:
                                        - title: segment
                                          description: >-
                                            Filter for people who belong to a
                                            segment.
                                          type: object
                                          properties:
                                            segment:
                                              title: segment
                                              description: >-
                                                Provide the `id` of a segment containing
                                                people you want to search for.
                                              type: object
                                              properties:
                                                id:
                                                  description: >-
                                                    The ID of the segment you want to return
                                                    people from.
                                                  type: integer
                                                  example: 4
                                        - title: audience
                                          description: >-
                                            filter for people who have an attribute
                                            or an attribute value.
                                          type: object
                                          properties:
                                            attribute:
                                              title: attribute
                                              description: Filter your audience by attribute.
                                              type: object
                                              required:
                                                - field
                                                - operator
                                              properties:
                                                field:
                                                  description: >-
                                                    The name of the attribute you want to
                                                    filter against.
                                                  type: string
                                                  example: first_name
                                                operator:
                                                  description: >-
                                                    Determine how to evaluate criteria
                                                    against the field—`exists` returns
                                                    results if a person in the audience has
                                                    the attribute; `eq` returns results if
                                                    the audience has the attribute and the
                                                    attribute has the `value` you specify.
                                                  type: string
                                                  enum:
                                                    - eq
                                                    - exists
                                                value:
                                                  description: >-
                                                    The value you want to match for this
                                                    attribute. You must include a value if
                                                    you use the `eq` operator.
                                                  type: string
                                              example:
                                                field: unsubscribed
                                                operator: eq
                                                value: true
                                  or:
                                    description: Returns results matching *any* conditions.
                                    type: array
                                    items:
                                      anyOf:
                                        - title: segment
                                          description: >-
                                            Filter for people who belong to a
                                            segment.
                                          type: object
                                          properties:
                                            segment:
                                              title: segment
                                              description: >-
                                                Provide the `id` of a segment containing
                                                people you want to search for.
                                              type: object
                                              properties:
                                                id:
                                                  description: >-
                                                    The ID of the segment you want to return
                                                    people from.
                                                  type: integer
                                                  example: 4
                                        - title: audience
                                          description: >-
                                            filter for people who have an attribute
                                            or an attribute value.
                                          type: object
                                          properties:
                                            attribute:
                                              title: attribute
                                              description: Filter your audience by attribute.
                                              type: object
                                              required:
                                                - field
                                                - operator
                                              properties:
                                                field:
                                                  description: >-
                                                    The name of the attribute you want to
                                                    filter against.
                                                  type: string
                                                  example: first_name
                                                operator:
                                                  description: >-
                                                    Determine how to evaluate criteria
                                                    against the field—`exists` returns
                                                    results if a person in the audience has
                                                    the attribute; `eq` returns results if
                                                    the audience has the attribute and the
                                                    attribute has the `value` you specify.
                                                  type: string
                                                  enum:
                                                    - eq
                                                    - exists
                                                value:
                                                  description: >-
                                                    The value you want to match for this
                                                    attribute. You must include a value if
                                                    you use the `eq` operator.
                                                  type: string
                                              example:
                                                field: unsubscribed
                                                operator: eq
                                                value: true
                                  not:
                                    description: >-
                                      Returns results if a condition is false.
                                      While and/or support an array of items,
                                      `not` supports a single filter object.
                                    oneOf:
                                      - title: and
                                        type: object
                                        properties:
                                          and:
                                            description: >-
                                              Match *all* conditions to return
                                              results.
                                            type: array
                                            items:
                                              anyOf:
                                                - title: segment
                                                  description: >-
                                                    Filter for people who belong to a
                                                    segment.
                                                  type: object
                                                  properties:
                                                    segment:
                                                      title: segment
                                                      description: >-
                                                        Provide the `id` of a segment containing
                                                        people you want to search for.
                                                      type: object
                                                      properties:
                                                        id:
                                                          description: >-
                                                            The ID of the segment you want to return
                                                            people from.
                                                          type: integer
                                                          example: 4
                                                - title: audience
                                                  description: >-
                                                    filter for people who have an attribute
                                                    or an attribute value.
                                                  type: object
                                                  properties:
                                                    attribute:
                                                      title: attribute
                                                      description: Filter your audience by attribute.
                                                      type: object
                                                      required:
                                                        - field
                                                        - operator
                                                      properties:
                                                        field:
                                                          description: >-
                                                            The name of the attribute you want to
                                                            filter against.
                                                          type: string
                                                          example: first_name
                                                        operator:
                                                          description: >-
                                                            Determine how to evaluate criteria
                                                            against the field—`exists` returns
                                                            results if a person in the audience has
                                                            the attribute; `eq` returns results if
                                                            the audience has the attribute and the
                                                            attribute has the `value` you specify.
                                                          type: string
                                                          enum:
                                                            - eq
                                                            - exists
                                                        value:
                                                          description: >-
                                                            The value you want to match for this
                                                            attribute. You must include a value if
                                                            you use the `eq` operator.
                                                          type: string
                                                      example:
                                                        field: unsubscribed
                                                        operator: eq
                                                        value: true
                                      - title: or
                                        type: object
                                        properties:
                                          or:
                                            description: Match *any* condition to return results.
                                            type: array
                                            items:
                                              anyOf:
                                                - title: segment
                                                  description: >-
                                                    Filter for people who belong to a
                                                    segment.
                                                  type: object
                                                  properties:
                                                    segment:
                                                      title: segment
                                                      description: >-
                                                        Provide the `id` of a segment containing
                                                        people you want to search for.
                                                      type: object
                                                      properties:
                                                        id:
                                                          description: >-
                                                            The ID of the segment you want to return
                                                            people from.
                                                          type: integer
                                                          example: 4
                                                - title: audience
                                                  description: >-
                                                    filter for people who have an attribute
                                                    or an attribute value.
                                                  type: object
                                                  properties:
                                                    attribute:
                                                      title: attribute
                                                      description: Filter your audience by attribute.
                                                      type: object
                                                      required:
                                                        - field
                                                        - operator
                                                      properties:
                                                        field:
                                                          description: >-
                                                            The name of the attribute you want to
                                                            filter against.
                                                          type: string
                                                          example: first_name
                                                        operator:
                                                          description: >-
                                                            Determine how to evaluate criteria
                                                            against the field—`exists` returns
                                                            results if a person in the audience has
                                                            the attribute; `eq` returns results if
                                                            the audience has the attribute and the
                                                            attribute has the `value` you specify.
                                                          type: string
                                                          enum:
                                                            - eq
                                                            - exists
                                                        value:
                                                          description: >-
                                                            The value you want to match for this
                                                            attribute. You must include a value if
                                                            you use the `eq` operator.
                                                          type: string
                                                      example:
                                                        field: unsubscribed
                                                        operator: eq
                                                        value: true
                                      - title: segment
                                        type: object
                                        properties:
                                          segment:
                                            title: segment
                                            description: >-
                                              Provide the `id` of a segment containing
                                              people you want to search for.
                                            type: object
                                            properties:
                                              id:
                                                description: >-
                                                  The ID of the segment you want to return
                                                  people from.
                                                type: integer
                                                example: 4
                                      - title: attribute
                                        type: object
                                        properties:
                                          attribute:
                                            title: attribute
                                            description: Filter your audience by attribute.
                                            type: object
                                            required:
                                              - field
                                              - operator
                                            properties:
                                              field:
                                                description: >-
                                                  The name of the attribute you want to
                                                  filter against.
                                                type: string
                                                example: first_name
                                              operator:
                                                description: >-
                                                  Determine how to evaluate criteria
                                                  against the field—`exists` returns
                                                  results if a person in the audience has
                                                  the attribute; `eq` returns results if
                                                  the audience has the attribute and the
                                                  attribute has the `value` you specify.
                                                type: string
                                                enum:
                                                  - eq
                                                  - exists
                                              value:
                                                description: >-
                                                  The value you want to match for this
                                                  attribute. You must include a value if
                                                  you use the `eq` operator.
                                                type: string
                                            example:
                                              field: unsubscribed
                                              operator: eq
                                              value: true
                                  segment:
                                    title: segment
                                    description: >-
                                      Provide the `id` of a segment containing
                                      people you want to search for.
                                    type: object
                                    properties:
                                      id:
                                        description: >-
                                          The ID of the segment you want to return
                                          people from.
                                        type: integer
                                        example: 4
                                  attribute:
                                    title: attribute
                                    description: Filter your audience by attribute.
                                    type: object
                                    required:
                                      - field
                                      - operator
                                    properties:
                                      field:
                                        description: >-
                                          The name of the attribute you want to
                                          filter against.
                                        type: string
                                        example: first_name
                                      operator:
                                        description: >-
                                          Determine how to evaluate criteria
                                          against the field—`exists` returns
                                          results if a person in the audience has
                                          the attribute; `eq` returns results if
                                          the audience has the attribute and the
                                          attribute has the `value` you specify.
                                        type: string
                                        enum:
                                          - eq
                                          - exists
                                      value:
                                        description: >-
                                          The value you want to match for this
                                          attribute. You must include a value if
                                          you use the `eq` operator.
                                        type: string
                                    example:
                                      field: unsubscribed
                                      operator: eq
                                      value: true
                        - title: or
                          type: object
                          properties:
                            or:
                              description: Match *any* condition to return results.
                              type: array
                              items:
                                title: People Filter
                                description: >-
                                  When filtering for people, you can use `and`
                                  and `or` arrays to determine the logic for a
                                  group of filter conditions. `not` reverses the
                                  filter condition and matches when the
                                  condition is false. `segment` and `attribute`
                                  represent the individual conditions you can
                                  filter a group of people for.
                                type: object
                                properties:
                                  and:
                                    description: Returns results matching *all* conditions.
                                    type: array
                                    items:
                                      anyOf:
                                        - title: segment
                                          description: >-
                                            Filter for people who belong to a
                                            segment.
                                          type: object
                                          properties:
                                            segment:
                                              title: segment
                                              description: >-
                                                Provide the `id` of a segment containing
                                                people you want to search for.
                                              type: object
                                              properties:
                                                id:
                                                  description: >-
                                                    The ID of the segment you want to return
                                                    people from.
                                                  type: integer
                                                  example: 4
                                        - title: audience
                                          description: >-
                                            filter for people who have an attribute
                                            or an attribute value.
                                          type: object
                                          properties:
                                            attribute:
                                              title: attribute
                                              description: Filter your audience by attribute.
                                              type: object
                                              required:
                                                - field
                                                - operator
                                              properties:
                                                field:
                                                  description: >-
                                                    The name of the attribute you want to
                                                    filter against.
                                                  type: string
                                                  example: first_name
                                                operator:
                                                  description: >-
                                                    Determine how to evaluate criteria
                                                    against the field—`exists` returns
                                                    results if a person in the audience has
                                                    the attribute; `eq` returns results if
                                                    the audience has the attribute and the
                                                    attribute has the `value` you specify.
                                                  type: string
                                                  enum:
                                                    - eq
                                                    - exists
                                                value:
                                                  description: >-
                                                    The value you want to match for this
                                                    attribute. You must include a value if
                                                    you use the `eq` operator.
                                                  type: string
                                              example:
                                                field: unsubscribed
                                                operator: eq
                                                value: true
                                  or:
                                    description: Returns results matching *any* conditions.
                                    type: array
                                    items:
                                      anyOf:
                                        - title: segment
                                          description: >-
                                            Filter for people who belong to a
                                            segment.
                                          type: object
                                          properties:
                                            segment:
                                              title: segment
                                              description: >-
                                                Provide the `id` of a segment containing
                                                people you want to search for.
                                              type: object
                                              properties:
                                                id:
                                                  description: >-
                                                    The ID of the segment you want to return
                                                    people from.
                                                  type: integer
                                                  example: 4
                                        - title: audience
                                          description: >-
                                            filter for people who have an attribute
                                            or an attribute value.
                                          type: object
                                          properties:
                                            attribute:
                                              title: attribute
                                              description: Filter your audience by attribute.
                                              type: object
                                              required:
                                                - field
                                                - operator
                                              properties:
                                                field:
                                                  description: >-
                                                    The name of the attribute you want to
                                                    filter against.
                                                  type: string
                                                  example: first_name
                                                operator:
                                                  description: >-
                                                    Determine how to evaluate criteria
                                                    against the field—`exists` returns
                                                    results if a person in the audience has
                                                    the attribute; `eq` returns results if
                                                    the audience has the attribute and the
                                                    attribute has the `value` you specify.
                                                  type: string
                                                  enum:
                                                    - eq
                                                    - exists
                                                value:
                                                  description: >-
                                                    The value you want to match for this
                                                    attribute. You must include a value if
                                                    you use the `eq` operator.
                                                  type: string
                                              example:
                                                field: unsubscribed
                                                operator: eq
                                                value: true
                                  not:
                                    description: >-
                                      Returns results if a condition is false.
                                      While and/or support an array of items,
                                      `not` supports a single filter object.
                                    oneOf:
                                      - title: and
                                        type: object
                                        properties:
                                          and:
                                            description: >-
                                              Match *all* conditions to return
                                              results.
                                            type: array
                                            items:
                                              anyOf:
                                                - title: segment
                                                  description: >-
                                                    Filter for people who belong to a
                                                    segment.
                                                  type: object
                                                  properties:
                                                    segment:
                                                      title: segment
                                                      description: >-
                                                        Provide the `id` of a segment containing
                                                        people you want to search for.
                                                      type: object
                                                      properties:
                                                        id:
                                                          description: >-
                                                            The ID of the segment you want to return
                                                            people from.
                                                          type: integer
                                                          example: 4
                                                - title: audience
                                                  description: >-
                                                    filter for people who have an attribute
                                                    or an attribute value.
                                                  type: object
                                                  properties:
                                                    attribute:
                                                      title: attribute
                                                      description: Filter your audience by attribute.
                                                      type: object
                                                      required:
                                                        - field
                                                        - operator
                                                      properties:
                                                        field:
                                                          description: >-
                                                            The name of the attribute you want to
                                                            filter against.
                                                          type: string
                                                          example: first_name
                                                        operator:
                                                          description: >-
                                                            Determine how to evaluate criteria
                                                            against the field—`exists` returns
                                                            results if a person in the audience has
                                                            the attribute; `eq` returns results if
                                                            the audience has the attribute and the
                                                            attribute has the `value` you specify.
                                                          type: string
                                                          enum:
                                                            - eq
                                                            - exists
                                                        value:
                                                          description: >-
                                                            The value you want to match for this
                                                            attribute. You must include a value if
                                                            you use the `eq` operator.
                                                          type: string
                                                      example:
                                                        field: unsubscribed
                                                        operator: eq
                                                        value: true
                                      - title: or
                                        type: object
                                        properties:
                                          or:
                                            description: Match *any* condition to return results.
                                            type: array
                                            items:
                                              anyOf:
                                                - title: segment
                                                  description: >-
                                                    Filter for people who belong to a
                                                    segment.
                                                  type: object
                                                  properties:
                                                    segment:
                                                      title: segment
                                                      description: >-
                                                        Provide the `id` of a segment containing
                                                        people you want to search for.
                                                      type: object
                                                      properties:
                                                        id:
                                                          description: >-
                                                            The ID of the segment you want to return
                                                            people from.
                                                          type: integer
                                                          example: 4
                                                - title: audience
                                                  description: >-
                                                    filter for people who have an attribute
                                                    or an attribute value.
                                                  type: object
                                                  properties:
                                                    attribute:
                                                      title: attribute
                                                      description: Filter your audience by attribute.
                                                      type: object
                                                      required:
                                                        - field
                                                        - operator
                                                      properties:
                                                        field:
                                                          description: >-
                                                            The name of the attribute you want to
                                                            filter against.
                                                          type: string
                                                          example: first_name
                                                        operator:
                                                          description: >-
                                                            Determine how to evaluate criteria
                                                            against the field—`exists` returns
                                                            results if a person in the audience has
                                                            the attribute; `eq` returns results if
                                                            the audience has the attribute and the
                                                            attribute has the `value` you specify.
                                                          type: string
                                                          enum:
                                                            - eq
                                                            - exists
                                                        value:
                                                          description: >-
                                                            The value you want to match for this
                                                            attribute. You must include a value if
                                                            you use the `eq` operator.
                                                          type: string
                                                      example:
                                                        field: unsubscribed
                                                        operator: eq
                                                        value: true
                                      - title: segment
                                        type: object
                                        properties:
                                          segment:
                                            title: segment
                                            description: >-
                                              Provide the `id` of a segment containing
                                              people you want to search for.
                                            type: object
                                            properties:
                                              id:
                                                description: >-
                                                  The ID of the segment you want to return
                                                  people from.
                                                type: integer
                                                example: 4
                                      - title: attribute
                                        type: object
                                        properties:
                                          attribute:
                                            title: attribute
                                            description: Filter your audience by attribute.
                                            type: object
                                            required:
                                              - field
                                              - operator
                                            properties:
                                              field:
                                                description: >-
                                                  The name of the attribute you want to
                                                  filter against.
                                                type: string
                                                example: first_name
                                              operator:
                                                description: >-
                                                  Determine how to evaluate criteria
                                                  against the field—`exists` returns
                                                  results if a person in the audience has
                                                  the attribute; `eq` returns results if
                                                  the audience has the attribute and the
                                                  attribute has the `value` you specify.
                                                type: string
                                                enum:
                                                  - eq
                                                  - exists
                                              value:
                                                description: >-
                                                  The value you want to match for this
                                                  attribute. You must include a value if
                                                  you use the `eq` operator.
                                                type: string
                                            example:
                                              field: unsubscribed
                                              operator: eq
                                              value: true
                                  segment:
                                    title: segment
                                    description: >-
                                      Provide the `id` of a segment containing
                                      people you want to search for.
                                    type: object
                                    properties:
                                      id:
                                        description: >-
                                          The ID of the segment you want to return
                                          people from.
                                        type: integer
                                        example: 4
                                  attribute:
                                    title: attribute
                                    description: Filter your audience by attribute.
                                    type: object
                                    required:
                                      - field
                                      - operator
                                    properties:
                                      field:
                                        description: >-
                                          The name of the attribute you want to
                                          filter against.
                                        type: string
                                        example: first_name
                                      operator:
                                        description: >-
                                          Determine how to evaluate criteria
                                          against the field—`exists` returns
                                          results if a person in the audience has
                                          the attribute; `eq` returns results if
                                          the audience has the attribute and the
                                          attribute has the `value` you specify.
                                        type: string
                                        enum:
                                          - eq
                                          - exists
                                      value:
                                        description: >-
                                          The value you want to match for this
                                          attribute. You must include a value if
                                          you use the `eq` operator.
                                        type: string
                                    example:
                                      field: unsubscribed
                                      operator: eq
                                      value: true
                        - title: segment
                          type: object
                          properties:
                            segment:
                              title: segment
                              description: >-
                                Provide the `id` of a segment containing people
                                you want to search for.
                              type: object
                              properties:
                                id:
                                  description: >-
                                    The ID of the segment you want to return
                                    people from.
                                  type: integer
                                  example: 4
                        - title: attribute
                          type: object
                          properties:
                            attribute:
                              title: attribute
                              description: Filter your audience by attribute.
                              type: object
                              required:
                                - field
                                - operator
                              properties:
                                field:
                                  description: >-
                                    The name of the attribute you want to filter
                                    against.
                                  type: string
                                  example: first_name
                                operator:
                                  description: >-
                                    Determine how to evaluate criteria against
                                    the field—`exists` returns results if a
                                    person in the audience has the attribute;
                                    `eq` returns results if the audience has the
                                    attribute and the attribute has the `value`
                                    you specify.
                                  type: string
                                  enum:
                                    - eq
                                    - exists
                                value:
                                  description: >-
                                    The value you want to match for this
                                    attribute. You must include a value if you
                                    use the `eq` operator.
                                  type: string
                              example:
                                field: unsubscribed
                                operator: eq
                                value: true
                    - title: segment
                      description: Filter for people who belong to a segment.
                      type: object
                      properties:
                        segment:
                          title: segment
                          description: >-
                            Provide the `id` of a segment containing people you
                            want to search for.
                          type: object
                          properties:
                            id:
                              description: >-
                                The ID of the segment you want to return people
                                from.
                              type: integer
                              example: 4
                    - title: audience
                      description: >-
                        filter for people who have an attribute or an attribute
                        value.
                      type: object
                      properties:
                        attribute:
                          title: attribute
                          description: Filter your audience by attribute.
                          type: object
                          required:
                            - field
                            - operator
                          properties:
                            field:
                              description: >-
                                The name of the attribute you want to filter
                                against.
                              type: string
                              example: first_name
                            operator:
                              description: >-
                                Determine how to evaluate criteria against the
                                field—`exists` returns results if a person in
                                the audience has the attribute; `eq` returns
                                results if the audience has the attribute and
                                the attribute has the `value` you specify.
                              type: string
                              enum:
                                - eq
                                - exists
                            value:
                              description: >-
                                The value you want to match for this attribute.
                                You must include a value if you use the `eq`
                                operator.
                              type: string
                          example:
                            field: unsubscribed
                            operator: eq
                            value: true
            - type: object
              properties:
                data:
                  description: >-
                    Contains information you want to use to populate your
                    broadcast.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Broadcast liquid data
                  example:
                    headline: Roadrunner spotted in Albuquerque!
                    date: 1511315635
                    text: >-
                      We received reports of a roadrunner in your immediate
                      area! Head to your dashboard to view more information!
                email_add_duplicates:
                  description: >-
                    an email address associated with more than one profile id is
                    an error.
                  type: boolean
                  default: false
                email_ignore_missing:
                  description: If false a missing email address is an error.
                  type: boolean
                  default: false
                id_ignore_missing:
                  description: If false, a missing customer ID is an error.
                  type: boolean
                  default: false
          example:
            recipients:
              and:
                - segment:
                    id: 3
                - or:
                    - attribute:
                        field: interest
                        operator: eq
                        value: roadrunners
                    - attribute:
                        field: state
                        operator: eq
                        value: NM
                    - not:
                        attribute:
                          field: species
                          operator: eq
                          value: roadrunners
            data:
              headline: Roadrunner spotted in Albuquerque!
              date: 1511315635
              text: >-
                We received reports of a roadrunner in your immediate area! Head
                to your dashboard to view more information!
        - title: Emails
          description: >-
            An array of emails you want to send the broadcast to. These
            addresses must already exist; your request cannot create a new
            person.
          allOf:
            - type: object
              required:
                - emails
              properties:
                emails:
                  description: >-
                    An array of email addresses you want to send the broadcast
                    to. These addresses must already exist; your request cannot
                    create a new person.
                  type: array
                  items:
                    type: string
                    format: email
                  example:
                    - recipient1@example.com
                    - anotherRecipient@example.com
            - type: object
              properties:
                data:
                  description: >-
                    Contains information you want to use to populate your
                    broadcast.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Broadcast liquid data
                  example:
                    headline: Roadrunner spotted in Albuquerque!
                    date: 1511315635
                    text: >-
                      We received reports of a roadrunner in your immediate
                      area! Head to your dashboard to view more information!
                email_add_duplicates:
                  description: >-
                    an email address associated with more than one profile id is
                    an error.
                  type: boolean
                  default: false
                email_ignore_missing:
                  description: If false a missing email address is an error.
                  type: boolean
                  default: false
                id_ignore_missing:
                  description: If false, a missing customer ID is an error.
                  type: boolean
                  default: false
        - title: IDs
          description: >-
            An array of customer ids that you want to send the broadcast to.
            These IDs must already exist; your request cannot create a new
            person.
          allOf:
            - type: object
              required:
                - ids
              properties:
                ids:
                  description: >
                    An array of IDs you want to send a broadcast to. **NOTE**:
                    If your workspace identifies people by `email`, don't use
                    this option. Identify your audience by `emails` instead.
                  type: array
                  maxItems: 10000
                  items:
                    type: string
                  example:
                    - id1
                    - id4
            - type: object
              properties:
                data:
                  description: >-
                    Contains information you want to use to populate your
                    broadcast.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Broadcast liquid data
                  example:
                    headline: Roadrunner spotted in Albuquerque!
                    date: 1511315635
                    text: >-
                      We received reports of a roadrunner in your immediate
                      area! Head to your dashboard to view more information!
                email_add_duplicates:
                  description: >-
                    an email address associated with more than one profile id is
                    an error.
                  type: boolean
                  default: false
                email_ignore_missing:
                  description: If false a missing email address is an error.
                  type: boolean
                  default: false
                id_ignore_missing:
                  description: If false, a missing customer ID is an error.
                  type: boolean
                  default: false
        - title: User Maps
          description: >-
            An array of JSON objects containing `id` or `email` keys and a
            `data` key. Each object represents a person you want to send the
            broadcast to and data you want to personalize their message with
            using liquid.
          allOf:
            - type: object
              required:
                - per_user_data
              properties:
                per_user_data:
                  description: >
                    An array of people you want to send a broadcast to and
                    custom data for each person. Each object in the array
                    represents a person, with additional data you want to use to
                    personalize their message. **When you trigger a broadcast,
                    the people in your request must already exist in your
                    workspace.** Requests to trigger a broadcast cannot create
                    new people. 


                    **Remove line-breaks from `per_user_data`**. We've added
                    line breaks in examples to make the code easy to read, but
                    you must remove line breaks (collapsing/uglifying your
                    payload) to prevent errors.
                  type: array
                  maxItems: 10000
                  items:
                    oneOf:
                      - title: ids
                        type: object
                        required:
                          - id
                        properties:
                          id:
                            description: The ID of the recipient.
                            type: string
                            example: 1
                          data:
                            description: Merge data associated with the recipient.
                            type: object
                            additionalProperties:
                              description: >-
                                Insert key-values that you want to reference in
                                your message here.
                              x-additionalPropertiesName: Liquid merge data
                            example:
                              firstName: Hugh
                              lastName: Mann
                              purchase: shoes
                      - title: emails
                        type: object
                        required:
                          - email
                        properties:
                          email:
                            description: >-
                              The email address of the recipient. This address
                              must be unique in your workspace. If more than one
                              person has the same `email` attribute, your
                              request will produce an error.
                            type: string
                            example: recipient1@example.com
                          data:
                            description: Merge data associated with the recipient.
                            type: object
                            additionalProperties:
                              description: >-
                                Insert key-values that you want to reference in
                                your message here.
                              x-additionalPropertiesName: Liquid merge data
                            example:
                              firstName: Hugh
                              lastName: Mann
                              purchase: shoes
                  example:
                    - id: wiley_coyote
                      data:
                        voucher_code: FESwYm
                    - email: road@runner.net
                      data:
                        voucher_code: cYm6XJ
            - type: object
              properties:
                data:
                  description: >-
                    Contains information you want to use to populate your
                    broadcast.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Broadcast liquid data
                  example:
                    headline: Roadrunner spotted in Albuquerque!
                    date: 1511315635
                    text: >-
                      We received reports of a roadrunner in your immediate
                      area! Head to your dashboard to view more information!
                email_add_duplicates:
                  description: >-
                    an email address associated with more than one profile id is
                    an error.
                  type: boolean
                  default: false
                email_ignore_missing:
                  description: If false a missing email address is an error.
                  type: boolean
                  default: false
                id_ignore_missing:
                  description: If false, a missing customer ID is an error.
                  type: boolean
                  default: false
        - title: Data file URL
          description: >
            The URL of a data file containing per-user data, each line
            containing a json map with either `id` and `data` or `email` and
            `data` keys. **When you trigger a broadcast, the people represented
            by `id` and `email` must already exist in your workspace.** Requests
            to trigger a broadcast cannot create new people.
          allOf:
            - type: object
              required:
                - data_file_url
              properties:
                data_file_url:
                  description: >
                    The URL of a data file containing per-user data. Each line
                    is a single object representing a person: either a json map
                    of `id` and `data` or `email` and `data` keys. For example,
                    `{"email":"road@runner.net","data":{"voucher_code":
                    "coyote"}}`.


                    The IDs or emails in your data file must already exist in
                    your workspace. Your broadcast cannot add new people to your
                    workspace and won't send messages for IDs or email addresses
                    that don't match a person in your workspace.
                  type: string
                  format: url
                  example: https://myFile.example.com
            - type: object
              properties:
                data:
                  description: >-
                    Contains information you want to use to populate your
                    broadcast.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Broadcast liquid data
                  example:
                    headline: Roadrunner spotted in Albuquerque!
                    date: 1511315635
                    text: >-
                      We received reports of a roadrunner in your immediate
                      area! Head to your dashboard to view more information!
                email_add_duplicates:
                  description: >-
                    an email address associated with more than one profile id is
                    an error.
                  type: boolean
                  default: false
                email_ignore_missing:
                  description: If false a missing email address is an error.
                  type: boolean
                  default: false
                id_ignore_missing:
                  description: If false, a missing customer ID is an error.
                  type: boolean
                  default: false
    customer_id:
      description: >-
        The ID of a customer profile, analogous to a "person" in the UI. If your
        workspace supports multiple identifiers (email and ID), this value can
        be null.
      type: string
      nullable: true
      example: '42'
    object_type_id:
      description: >-
        The object type an object belongs to—like "Companies" or "Accounts".
        Object type IDs are string-formatted integers that begin at `1` and
        increment for each new type.
      type: string
      nullable: false
      example: '1'
    object_identifiers:
      type: object
      required:
        - identifiers
      properties:
        identifiers:
          description: >-
            Represents an individual object, where the `object_type_id`
            represents the type of object and the `object_id` is the individual
            identifier for the object.
          type: object
          required:
            - object_type_id
            - object_id
          properties:
            object_type_id:
              description: >-
                The object type an object belongs to—like "Companies" or
                "Accounts". Object type IDs are string-formatted integers that
                begin at `1` and increment for each new type.
              type: string
              nullable: false
              example: '1'
            object_id:
              description: >-
                The unique identifier for an object. If you use an `object_id`
                that already exists, we'll update the object accordingly.
              type: string
              nullable: false
              example: acme
    not_nullable_customer_id:
      description: The ID of a customer profile, analogous to a "person" in the UI.
      type: string
      example: '42'
    not_nullable_email_address:
      description: The email address of the customer.
      type: string
      example: test@example.com
    email_address:
      description: The email address of the customer.
      type: string
      nullable: true
      example: test@example.com
    device_id:
      description: The identifier for a person's device—typically a device token.
      type: string
    created:
      description: The date time when the referenced ID was created.
      type: integer
      format: unix timestamp
      example: 1552341937
      readOnly: true
    updated:
      description: The date time when the referenced ID was last updated.
      type: integer
      format: unix timestamp
      example: 1552341937
      readOnly: true
    segment_id:
      description: The identifier for a segment.
      type: integer
      example: 7
    deduplicate_id:
      description: >-
        An identifier in the format `id:timestamp` where the id is the id of the
        object you are working with (Campaigns, Deliveries, Exports, Identities,
        Newsletters, Segments, and Templates), and the timestamp is the last
        time the object was updated.
      type: string
      readOnly: true
      example: '15:1492548073'
    segment_name:
      description: The name of the segment.
      type: string
      example: Manual Segment 1
    segment_description:
      description: >-
        A description for the segment. This can help you understand the purpose
        of the segment when you encounter it in other requests or in the UI.
      type: string
      example: My first manual segment
    segmentResponseObject:
      type: object
      properties:
        tags:
          description: >-
            The tags assigned to the segment, if any. Tags may help you sort
            through your segments.
          type: array
          nullable: true
          items:
            type: string
          example: null
        description:
          description: >-
            A description for the segment. This can help you understand the
            purpose of the segment when you encounter it in other requests or in
            the UI.
          type: string
          example: My first manual segment
        id:
          description: The identifier for a segment.
          type: integer
          example: 7
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        name:
          description: The name of the segment.
          type: string
          example: Manual Segment 1
        state:
          description: |
            The state of the segment. 
          type: string
          enum:
            - finished
        progress:
          description: >-
            If Customer.io has not finished processing the segment, this
            indicates the percentage complete. Otherwise, this key is null.
          type: integer
          nullable: true
          example: .nan
        type:
          description: The type of segment.
          type: string
          enum:
            - dynamic
            - manual
          example: manual
    broadcast_id:
      description: The identifier for a broadcast.
      type: integer
      example: 2
    msg_template_ids:
      description: Indicates the message template(s) used in this broadcast.
      type: array
      deprecated: true
      items:
        type: object
        properties:
          id:
            description: The identifier for the template.
            type: integer
          type:
            description: The type of template.
            type: string
            enum:
              - email
              - webhook
              - push
              - sms
              - slack
    broadcastTriggerObject:
      description: >-
        You can get triggers to know when you triggered a broadcast and whether
        or not it's been processed.
      type: object
      properties:
        id:
          description: The identifier for a broadcast trigger.
          type: integer
        broadcast_id:
          description: The identifier for a broadcast.
          type: integer
          example: 2
        created_at:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        processed_at:
          description: The date-time when Customer.io processed the trigger.
          type: integer
          format: unix timestamp
    broadcastObject:
      type: object
      properties:
        tags:
          description: An array of tags you set on this broadcast.
          type: array
          items:
            type: string
        id:
          description: The identifier for a broadcast.
          type: integer
          example: 2
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        name:
          description: The name of the broadcast.
          type: string
          readOnly: true
        created:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        active:
          description: If true, the broadcast is active.
          type: boolean
        msg_template_ids:
          description: Indicates the message template(s) used in this broadcast.
          type: array
          deprecated: true
          items:
            type: object
            properties:
              id:
                description: The identifier for the template.
                type: integer
              type:
                description: The type of template.
                type: string
                enum:
                  - email
                  - webhook
                  - push
                  - sms
                  - slack
        actions:
          description: A list of actions used by the broadcast.
          type: array
          items:
            type: object
            properties:
              id:
                description: The identifier for the action.
                type: integer
              type:
                description: The type of action.
                type: string
                enum:
                  - email
                  - webhook
                  - push
                  - sms
                  - slack
      example:
        tags: nil
        id: 2
        deduplicate_id: '2:1520467200'
        created: 1520467200
        type: triggered_broadcast
        updated: 1520467200
        name: basic
        active: true
        actions:
          - id: 3
            type: email
          - id: 4
          - type: webhook
        first_started: 1520467200
        created_by: ExamplePerson
    sendpush:
      description: The payload of a transactional push message.
      allOf:
        - type: object
          required:
            - transactional_message_id
          properties:
            transactional_message_id:
              description: >-
                The transactional message template that you want to use for your
                message. You can call the template by its numerical ID or by the
                *Trigger Name* that you assigned the template (case
                insensitive).
              oneOf:
                - title: ID (integer)
                  description: The ID of the transactional message you want to send.
                  type: integer
                  example: 44
                - title: Trigger Name (string)
                  description: >-
                    The name of trigger for the transactional message you want
                    to send; you set the trigger name in the *Configure
                    Settings* step when setting up your message. This is case
                    insensitive.
                  type: string
                  example: pwdreset
        - type: object
          properties:
            title:
              description: >-
                The title for your notification. This overrides the title of the
                transactional template (referenced by
                `transactional_message_id`).
              type: string
            to:
              description: >-
                The person's device(s) you want to send this push to. One of
                `all`, `last_used`, or a custom device token which belongs to
                the profile from the Identifiers block. Defaults to 'all'. This
                overrides To from the transactional template (referenced by
                `transactional_message_id`).
              type: string
              enum:
                - all
                - last_used
                - $device_token
              default: all
            message:
              description: >-
                The message body for your notification. This overrides the
                notification body of the transactional template (referenced by
                `transactional_message_id`).
              type: string
            image_url:
              description: >-
                An image URL to show in the push. This overrides Image from the
                transactional template (referenced by
                `transactional_message_id`).
              type: string
            link:
              description: >-
                A deep link to open when the push is tapped. This overrides Link
                from the transactional template (referenced by
                `transactional_message_id`).
              type: string
            sound:
              description: >
                **For iOS Only**: your notification can alert users with the
                device's default notification sound or play no sound at all. 
              type: string
              enum:
                - default
                - none
              default: default
            custom_data:
              description: >-
                An optional list of key/value pairs to attach to the push
                payload. Due to a Firebase limitation we only support sending
                string key value pairs. This overrides Custom Data from the
                transactional template (referenced by
                `transactional_message_id`).
              type: object
            custom_device:
              description: >-
                A device to perform an upsert operation at the time of send. The
                device will be added/updated on the profile from the Identifiers
                block.
              allOf:
                - type: object
                  required:
                    - token
                  properties:
                    token:
                      description: The device token.
                      type: string
                - description: Device information common to the v1 and v2 APIs.
                  type: object
                  required:
                    - platform
                  properties:
                    last_used:
                      description: >-
                        The `timestamp` when you last identified this device. If
                        you don't pass a timestamp when you add or update a
                        device, we use the time of the request itself. Our SDKs
                        identify a device when a person launches their app.
                      type: integer
                      format: unix timestamp
                    platform:
                      description: The device/messaging platform.
                      type: string
                      enum:
                        - ios
                        - android
                    attributes:
                      description: >-
                        Attributes that you can reference to segment your
                        audience—like a person's attributes, but specific to a
                        device. These can be either the attributes defined below
                        or custom key-value attributes.
                      type: object
                      properties:
                        device_os:
                          description: >-
                            The operating system, including the version, on the
                            device.
                          type: string
                        device_model:
                          description: The model of the device a person uses.
                          type: string
                        app_version:
                          description: >-
                            The version of your app that a customer uses. You
                            might target app versions to let people know when
                            they need to update, or expose them to new features
                            when they do.
                          type: string
                        cio_sdk_version:
                          description: The version of the Customer.io SDK in the app.
                          type: string
                        _last_status:
                          description: >-
                            The delivery status of the last message sent to the
                            device—sent, bounced, or suppressed. An empty string
                            indicates that that the device hasn't received a
                            push yet.
                          type: string
                          readOnly: true
                          enum:
                            - ''
                            - bounced
                            - sent
                            - suppressed
                        device_locale:
                          description: >-
                            The four-letter [IETF language
                            code](https://customer.io/docs/api/track/) for the
                            device. For example, `en-MX` (indicating an app in
                            Spanish formatted for a user in Mexico) or `es-ES`
                            (indicating an app in Spanish formatted for a user
                            in Spain).
                          type: string
                        push_enabled:
                          description: >-
                            If `"true"`, the device is opted-in and can receive
                            push notifications.
                          type: string
                          enum:
                            - 'true'
                            - 'false'
                      additionalProperties:
                        description: >-
                          Custom properties that you want to associate with the
                          device.
                        x-additionalPropertiesName: Custom Device Attributes
                        type: string
            custom_payload:
              description: >-
                An optional list of key/value pairs to attach to the push
                payload. Due to a Firebase limitation we only support sending
                string key value pairs. This overrides every other parameter,
                including any Custom Payload from the transactional template
                (referenced by `transactional_message_id`).
              type: object
              properties:
                ios:
                  description: >-
                    Your payload changes depending on whether you send to iOS
                    devices through Google's Firebase Cloud Messaging (FCM) or
                    Apple's Push Notification service (APNs).
                  oneOf:
                    - title: FCM
                      type: object
                      required:
                        - message
                      properties:
                        message:
                          description: The base object for all FCM payloads.
                          type: object
                          required:
                            - apns
                          properties:
                            apns:
                              description: >-
                                Defines a payload for iOS devices sent through
                                Firebase Cloud Messaging (FCM).
                              type: object
                              required:
                                - payload
                              properties:
                                headers:
                                  description: >-
                                    Headers defined by [Apple's payload
                                    reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns)
                                    that you want to pass through FCM.
                                  type: object
                                payload:
                                  description: Contains a push payload.
                                  type: object
                                  properties:
                                    CIO:
                                      description: >-
                                        Contains properties interpreted by the
                                        Customer.io iOS SDK.
                                      type: object
                                      required:
                                        - push
                                      properties:
                                        push:
                                          description: A push payload for the iOS SDK.
                                          type: object
                                          properties:
                                            title:
                                              description: The title of your push notification.
                                              type: string
                                            body:
                                              description: The body of your push notification.
                                              type: string
                                            link:
                                              description: >-
                                                A deep link (to a page in your app), or
                                                a link to a web page.
                                              type: string
                                            image:
                                              description: >-
                                                The URL of an HTTPS image that you want
                                                to use for your message.
                                              type: string
                                    aps:
                                      description: >-
                                        A push payload intended for an iOS
                                        device.
                                      type: object
                                      properties:
                                        alert:
                                          oneOf:
                                            - title: Simple alert
                                              description: A simple alert message.
                                              type: string
                                            - title: Complex alert
                                              type: object
                                              properties:
                                                title:
                                                  description: The title of your push notification.
                                                  type: string
                                                body:
                                                  description: The body of your push notification.
                                                  type: string
                                                subtitle:
                                                  description: >-
                                                    Additional information that explains the
                                                    purpose of the notification.
                                                  type: string
                                                launch-image:
                                                  description: >-
                                                    The name of the launch image file you
                                                    want to display. When a user launches
                                                    your app, they'll see this image or
                                                    storyboard file rather than your app’s
                                                    normal launch image.
                                                  type: string
                                                title-loc-key:
                                                  description: >-
                                                    The key for a localized title string in
                                                    your app’s Localizable.strings files.
                                                  type: string
                                                title-loc-args:
                                                  description: >-
                                                    An array of replacement value strings
                                                    for variables in your title string. Each
                                                    %@ character in the title-loc-key is
                                                    replaced by a value from this array, in
                                                    the order they appear in the title
                                                    string.
                                                  type: array
                                                  items:
                                                    type: string
                                                subtitle-loc-key:
                                                  description: >-
                                                    The key for a localized subtitle string
                                                    in your app’s Localizable.strings file.
                                                  type: string
                                                subtitle-loc-args:
                                                  description: >-
                                                    An array of replacement value strings
                                                    for variables in your subtitle string.
                                                    Each %@ character in the
                                                    subtitle-loc-key is replaced by a value
                                                    from this array, in the order they
                                                    appear in the subtitle string.
                                                  type: array
                                                  items:
                                                    type: string
                                                loc-key:
                                                  description: >-
                                                    The key for a localized message string
                                                    in your app’s Localizable.strings file.
                                                  type: string
                                                loc-args:
                                                  description: >-
                                                    An array of replacement value strings
                                                    for variables in your message text. Each
                                                    %@ character in the loc-key is replaced
                                                    by a value from this array, in the order
                                                    they appear in the message body.
                                                  type: array
                                                  items:
                                                    type: string
                                        badge:
                                          description: >-
                                            The number you want to display on your
                                            app's icon. Set to 0 to remove the
                                            current badge, if any.
                                          type: integer
                                        sound:
                                          oneOf:
                                            - title: Regular alert
                                              description: >-
                                                The name of a sound file in your app’s
                                                main bundle or in the Library/Sounds
                                                folder of your app’s container
                                                directory. Use “default” to play the
                                                system sound. For critical alerts,
                                                you'll pass an object instead.
                                              type: string
                                            - title: Critical alert
                                              type: object
                                              properties:
                                                critical:
                                                  description: 1 indicates critical. 0 is not critical.
                                                  type: integer
                                                name:
                                                  description: >-
                                                    The name of a sound file in your app’s
                                                    main bundle or in the Library/Sounds
                                                    folder of your app’s container
                                                    directory. Use “default” to play the
                                                    system sound.
                                                  type: string
                                                volume:
                                                  description: >-
                                                    The volume for a critical alert between
                                                    0 and 1, where 0 is silent and 1 is full
                                                    volume.
                                                  type: number
                                        thread-id:
                                          description: >-
                                            An identifier to group related
                                            notifications.
                                          type: string
                                        category:
                                          description: >-
                                            The notification’s type. This string
                                            must correspond to the identifier of one
                                            of the `UNNotificationCategory` objects
                                            you register at launch time.
                                          type: string
                                        content-available:
                                          description: >-
                                            The background notification flag. Use
                                            `1` without an `alert` to perform a
                                            silent update. `0` indicates a normal
                                            push notification.
                                          type: integer
                                        mutable-content:
                                          description: >-
                                            The notification service app extension
                                            flag. If the value is 1, your
                                            notification is passed to your
                                            notification service app extension
                                            before delivery. Use your extension to
                                            modify the notification’s content.
                                          type: integer
                                        target-content-id:
                                          description: >-
                                            The identifier of the window brought
                                            forward.
                                          type: string
                                        interruption-level:
                                          description: >-
                                            Indicates the importance and delivery
                                            timing of a notification.
                                          type: string
                                          enum:
                                            - passive
                                            - active
                                            - time-sensitive
                                            - critical
                                        relevance-score:
                                          description: >-
                                            A number between 0 and 1. The highest
                                            score is considered the "most relevant" 
                                            and is featured in the notification
                                            summary.
                                          type: number
                                  additionalProperties:
                                    description: >-
                                      Additional properties that you've set up
                                      your app to interpret outside of the
                                      Customer.io SDK.
                                    x-additionalPropertiesName: Custom key-value pairs
                    - title: APNS
                      type: object
                      properties:
                        CIO:
                          description: Contains options supported by the Customer.io SDK.
                          type: object
                          required:
                            - push
                          properties:
                            push:
                              description: >-
                                Describes push notification options supported by
                                the CIO SDK.
                              type: object
                              properties:
                                link:
                                  description: >-
                                    A deep link (to a page in your app), or a
                                    link to a web page.
                                  type: string
                                image:
                                  description: >-
                                    The URL of an HTTPS image that you want to
                                    use for your message.
                                  type: string
                        aps:
                          description: A push payload intended for an iOS device.
                          type: object
                          properties:
                            alert:
                              oneOf:
                                - title: Simple alert
                                  description: A simple alert message.
                                  type: string
                                - title: Complex alert
                                  type: object
                                  properties:
                                    title:
                                      description: The title of your push notification.
                                      type: string
                                    body:
                                      description: The body of your push notification.
                                      type: string
                                    subtitle:
                                      description: >-
                                        Additional information that explains the
                                        purpose of the notification.
                                      type: string
                                    launch-image:
                                      description: >-
                                        The name of the launch image file you
                                        want to display. When a user launches
                                        your app, they'll see this image or
                                        storyboard file rather than your app’s
                                        normal launch image.
                                      type: string
                                    title-loc-key:
                                      description: >-
                                        The key for a localized title string in
                                        your app’s Localizable.strings files.
                                      type: string
                                    title-loc-args:
                                      description: >-
                                        An array of replacement value strings
                                        for variables in your title string. Each
                                        %@ character in the title-loc-key is
                                        replaced by a value from this array, in
                                        the order they appear in the title
                                        string.
                                      type: array
                                      items:
                                        type: string
                                    subtitle-loc-key:
                                      description: >-
                                        The key for a localized subtitle string
                                        in your app’s Localizable.strings file.
                                      type: string
                                    subtitle-loc-args:
                                      description: >-
                                        An array of replacement value strings
                                        for variables in your subtitle string.
                                        Each %@ character in the
                                        subtitle-loc-key is replaced by a value
                                        from this array, in the order they
                                        appear in the subtitle string.
                                      type: array
                                      items:
                                        type: string
                                    loc-key:
                                      description: >-
                                        The key for a localized message string
                                        in your app’s Localizable.strings file.
                                      type: string
                                    loc-args:
                                      description: >-
                                        An array of replacement value strings
                                        for variables in your message text. Each
                                        %@ character in the loc-key is replaced
                                        by a value from this array, in the order
                                        they appear in the message body.
                                      type: array
                                      items:
                                        type: string
                            badge:
                              description: >-
                                The number you want to display on your app's
                                icon. Set to 0 to remove the current badge, if
                                any.
                              type: integer
                            sound:
                              oneOf:
                                - title: Regular alert
                                  description: >-
                                    The name of a sound file in your app’s main
                                    bundle or in the Library/Sounds folder of
                                    your app’s container directory. Use
                                    “default” to play the system sound. For
                                    critical alerts, you'll pass an object
                                    instead.
                                  type: string
                                - title: Critical alert
                                  type: object
                                  properties:
                                    critical:
                                      description: 1 indicates critical. 0 is not critical.
                                      type: integer
                                    name:
                                      description: >-
                                        The name of a sound file in your app’s
                                        main bundle or in the Library/Sounds
                                        folder of your app’s container
                                        directory. Use “default” to play the
                                        system sound.
                                      type: string
                                    volume:
                                      description: >-
                                        The volume for a critical alert between
                                        0 and 1, where 0 is silent and 1 is full
                                        volume.
                                      type: number
                            thread-id:
                              description: An identifier to group related notifications.
                              type: string
                            category:
                              description: >-
                                The notification’s type. This string must
                                correspond to the identifier of one of the
                                `UNNotificationCategory` objects you register at
                                launch time.
                              type: string
                            content-available:
                              description: >-
                                The background notification flag. Use `1`
                                without an `alert` to perform a silent update.
                                `0` indicates a normal push notification.
                              type: integer
                            mutable-content:
                              description: >-
                                The notification service app extension flag. If
                                the value is 1, your notification is passed to
                                your notification service app extension before
                                delivery. Use your extension to modify the
                                notification’s content.
                              type: integer
                            target-content-id:
                              description: The identifier of the window brought forward.
                              type: string
                            interruption-level:
                              description: >-
                                Indicates the importance and delivery timing of
                                a notification.
                              type: string
                              enum:
                                - passive
                                - active
                                - time-sensitive
                                - critical
                            relevance-score:
                              description: >-
                                A number between 0 and 1. The highest score is
                                considered the "most relevant"  and is featured
                                in the notification summary.
                              type: number
                android:
                  description: A custom push payload for Android devices.
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      description: The parent object for Android custom push payloads.
                      type: object
                      properties:
                        notification:
                          description: Contains the push body and title.
                          type: object
                          properties:
                            title:
                              description: The title of your push notification.
                              type: string
                            body:
                              description: The body of your push notification.
                              type: string
                        data:
                          description: Contains key-value pairs that your app interprets.
                          type: object
                          additionalProperties:
                            x-additionalPropertiesName: Attachment Names
                            x-doNotRender: true
                            type: string
                        android:
                          description: Contains custom push options for your notification.
                          type: object
                          properties:
                            notification:
                              description: >-
                                Properties supported specifically by Android on
                                FCM.
                              type: object
                              properties:
                                icon:
                                  description: >-
                                    Sets the notification icon to `myicon` for
                                    drawable resource `myicon`. If you don't
                                    send this key, FCM displays the launcher
                                    icon from your app manifest.
                                  type: string
                                sound:
                                  description: >-
                                    The sound that plays when the device
                                    receives the notification. Supports
                                    `"default"` or the filename of a sound
                                    resource bundled in your app. Sound files
                                    must reside in `/res/raw/`.
                                  type: string
                                tag:
                                  description: >
                                    Identifier to replace existing notifications
                                    in the notification drawer. If empty, each
                                    request creates a new notification.


                                    If you specify a tag, and a notification
                                    with the same tag is already being shown,
                                    the new notification replaces the existing
                                    one in the notification drawer. 
                                  type: string
                                color:
                                  description: >-
                                    The notification's icon color in `#rrggbb`
                                    format.
                                  type: string
                                click_action:
                                  description: >-
                                    The action that occurs when a user taps on
                                    the notification. Launches an activity with
                                    a matching intent filter when a person taps
                                    the notification.
                                  type: string
                                body_loc_key:
                                  description: >-
                                    The key to the body string in the app's
                                    string resources that you want to use to
                                    localize the body text to the user's current
                                    localization. See [String
                                    Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                    for more information.
                                  type: string
                                body_loc_arg:
                                  description: >-
                                    Variable string values used in place of the
                                    format specifiers in `body_loc_key` to
                                    localize the body text to the user's current
                                    localization. See Formatting and Styling for
                                    more information.
                                  type: string
                                title_loc_key:
                                  description: >-
                                    The key to the title string in the app's
                                    string resources that you want to use to
                                    localize the title text to the user's
                                    current localization. See [String
                                    Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                    for more information.
                                  type: string
                                title_loc_arg:
                                  description: >-
                                    Variable string values used in place of the
                                    format specifiers in `title_loc_key` to
                                    localize the title text to the user's
                                    current localization. See Formatting and
                                    Styling for more information.
                                  type: string
            language:
              description: >-
                Overrides language preferences for the person you want to send
                your transactional message to. Use one of our [supported two- or
                four-letter language
                codes](https://customer.io/docs/api/track/).
              type: string
        - type: object
          required:
            - to
            - identifiers
          properties:
            identifiers:
              description: >-
                Identifies the person represented by your transactional message
                by one of, and only one of, `id`, `email`, or `cio_id`.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >
                        The identifier for the person represented by the
                        transactional message. **NOTE**: If your workspace
                        identifies people by email, use the `email` identifier
                        instead.
                      type: string
                      example: 12345
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: >-
                        The identifier for the person represented by the
                        transactional message. Use this option if your workspace
                        identifies people by email rather than by `id`.
                      type: string
                      example: cool.person@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique, immutable identifier for a person, set by
                        Customer.io when you add a person.
                      type: string
                      example: 3000001
            message_data:
              description: >-
                An object containing the key-value pairs referenced using liquid
                in your message.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: Liquid Data
              example:
                password_reset_token: abcde-12345-fghij-d888
                account_id: 123dj
            send_at:
              description: >-
                A unix timestamp (seconds since epoch) determining when the
                message will be sent. The timestamp can be up to 90 days in the
                future. If this value is in the past, your message is sent
                immediately.
              type: integer
            disable_message_retention:
              description: >-
                If true, the message body is not retained in delivery history.
                Setting this value overrides the value set in the settings of
                your `transactional_message_id`.
              type: boolean
              default: false
            send_to_unsubscribed:
              description: >-
                If false, your message is not sent to unsubscribed recipients.
                Setting this value overrides the value set in the settings of
                your `transactional_message_id`.
              type: boolean
              default: true
            queue_draft:
              description: >-
                If true, your transactional message is held as a draft in
                Customer.io and not sent directly to your audience. You must go
                to the Deliveries and Drafts page to send your message.
              type: boolean
              default: false
      example:
        title: Did you really login from a new location?
        transactional_message_id: 44
        identifiers:
          id: 12345
        message_data:
          password_reset_token: abcde-12345-fghij-d888
          account_id: 123dj
    sendemail:
      description: The payload of a transactional message.
      oneOf:
        - title: With template
          description: >-
            Send a transactional message using a template that you set up in
            Customer.io.
          allOf:
            - type: object
              required:
                - transactional_message_id
              properties:
                transactional_message_id:
                  description: >-
                    The transactional message template that you want to use for
                    your message. You can call the template by its numerical ID
                    or by the *Trigger Name* that you assigned the template
                    (case insensitive).
                  oneOf:
                    - title: ID (integer)
                      description: The ID of the transactional message you want to send.
                      type: integer
                      example: 44
                    - title: Trigger Name (string)
                      description: >-
                        The name of trigger for the transactional message you
                        want to send; you set the trigger name in the *Configure
                        Settings* step when setting up your message. This is
                        case insensitive.
                      type: string
                      example: pwdreset
            - type: object
              properties:
                body:
                  description: >-
                    The HTML body of your message. This overrides the body of
                    the transactional template (referenced by
                    `transactional_message_id`). If you send an AMP-enabled
                    email (with `body_amp`), and the recipient's email client
                    doesn't support AMP, this is the fallback email.
                  type: string
                body_amp:
                  description: >-
                    If your message is an email, this is the AMP-enabled body of
                    your message. If your recipient's email client doesn't
                    support AMP, the `body` represents your fallback message.
                  type: string
                body_plain:
                  description: >-
                    The plaintext body of your message. This overrides the body
                    of your transactional template (referenced by
                    `transactional_message_id`).
                  type: string
                subject:
                  description: >-
                    The subject line for your message. This overrides the
                    subject of the transactional template (referenced by
                    `transactional_message_id`).
                  type: string
                from:
                  description: >-
                    The address that your email is from. This address must be
                    verified by Customer.io. This overrides the from address set
                    within the transactional template (referenced by
                    `transactional_message_id`). You can include a
                    display/friendly name in your from address, but we recommend
                    that you use quotation marks around the friendly name to
                    avoid potential issues with special characters, e.g.
                    `\"Person\" <person@example.com>`.
                  type: string
                  example: support@example.com
                language:
                  description: >-
                    Overrides language preferences for the person you want to
                    send your transactional message to. Use one of our
                    [supported two- or four-letter language
                    codes](https://customer.io/docs/api/track/).
                  type: string
            - type: object
              required:
                - to
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Identifies the person represented by your transactional
                    message by one of, and only one of, `id`, `email`, or
                    `cio_id`.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >
                            The identifier for the person represented by the
                            transactional message. **NOTE**: If your workspace
                            identifies people by email, use the `email`
                            identifier instead.
                          type: string
                          example: 12345
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: >-
                            The identifier for the person represented by the
                            transactional message. Use this option if your
                            workspace identifies people by email rather than by
                            `id`.
                          type: string
                          example: cool.person@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique, immutable identifier for a person, set by
                            Customer.io when you add a person.
                          type: string
                          example: 3000001
                message_data:
                  description: >-
                    An object containing the key-value pairs referenced using
                    liquid in your message.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Liquid Data
                  example:
                    password_reset_token: abcde-12345-fghij-d888
                    account_id: 123dj
                send_at:
                  description: >-
                    A unix timestamp (seconds since epoch) determining when the
                    message will be sent. The timestamp can be up to 90 days in
                    the future. If this value is in the past, your message is
                    sent immediately.
                  type: integer
                disable_message_retention:
                  description: >-
                    If true, the message body is not retained in delivery
                    history. Setting this value overrides the value set in the
                    settings of your `transactional_message_id`.
                  type: boolean
                  default: false
                send_to_unsubscribed:
                  description: >-
                    If false, your message is not sent to unsubscribed
                    recipients. Setting this value overrides the value set in
                    the settings of your `transactional_message_id`.
                  type: boolean
                  default: true
                queue_draft:
                  description: >-
                    If true, your transactional message is held as a draft in
                    Customer.io and not sent directly to your audience. You must
                    go to the Deliveries and Drafts page to send your message.
                  type: boolean
                  default: false
            - type: object
              properties:
                to:
                  description: >
                    The message recipient(s). Supports multiple addresses
                    separated by commas. Your request can contain up to 15 total
                    recipients between the `to` and `bcc` keys.


                    You can include a display or "friendly" name in "to"
                    address, but we recommend that you use quotation marks
                    around the friendly name to avoid potential issues with
                    special characters, e.g. `\"Person\"
                    <person@example.com>`.            
                  type: string
                  example: cool.person@example.com
                bcc:
                  description: >-
                    Blind copy message recipients. Supports multiple addresses
                    separated by commas. Your request can contain up to 15 total
                    recipients between the `to` and `bcc` keys.
                  type: string
                  example: bcc@example.com
                fake_bcc:
                  description: >
                    If true, rather than sending true copies to BCC addresses,
                    Customer.io sends a copy of the message with the subject
                    line containing the recipient address(es).
                  type: boolean
                reply_to:
                  description: >-
                    The address that recipients can reply to, if different from
                    the `from` address.
                  type: string
                  example: replyto@example.com
                preheader:
                  description: >-
                    Also known as "preview text", this is the block block of
                    text that users see next to, or underneath, the subject line
                    in their inbox.
                  type: string
                body_plain:
                  description: >-
                    By default, we generate a plaintext version of your message
                    body for each delivery. Use this key to override the default
                    plain text body.
                  type: string
                attachments:
                  description: >
                    A dictionary of attachments where the filename is the key
                    and the value is the base64-encoded contents. The total size
                    of all attachments must be less than 2 MB. Some filetype
                    extensions are restricted.
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
                      format: base64
                      x-additionalPropertiesName: Attachment Names
                      x-doNotRender: true
                headers:
                  description: >-
                    Headers must be strings and cannot contain any non-ASCII
                    characters or empty spaces. Some headers are reserved and
                    cannot be overwritten.
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        description: name of header
                        type: string
                        example: X-Mailgun-Tag
                      value:
                        description: value of header
                        type: string
                        example: tag-name-for-tracking
                disable_css_preprocessing:
                  description: >-
                    Set to `true` to disable CSS preprocessing. This setting
                    overrides the CSS preprocessing setting on the
                    `transactional_message_id` as set in the user interface.
                    Transactional emails have CSS preprocessing enabled by
                    default.
                  type: boolean
                  example: false
                  default: false
                tracked:
                  description: >-
                    If true, Customer.io tracks opens and link clicks in your
                    message.
                  type: boolean
                  default: true
          example:
            transactional_message_id: 44
            to: cool.person@example.com
            from: override-templated-address@example.com
            subject: Did you really login from a new location?
            identifiers:
              email: cool.person@example.com
            message_data:
              password_reset_token: abcde-12345-fghij-d888
              account_id: 123dj
            bcc: bcc@example.com
            disable_message_retention: false
            send_to_unsubscribed: true
            tracked: true
            queue_draft: false
            disable_css_preprocessing: true
        - title: Without template
          description: Create your own message from scratch.
          allOf:
            - type: object
              required:
                - body
                - subject
                - from
              properties:
                body:
                  description: The body of your message.
                  type: string
                  example: >-
                    Your temporary password is
                    {{message_data.password_reset_token}}
                subject:
                  description: The subject line for your message.
                  type: string
                  example: Reset your password!
                from:
                  description: >-
                    The address that your email is from. This address must be
                    verified by Customer.io. You can include a display/friendly
                    name in your from address in the format `Person
                    <person@example.com>`.
                  type: string
                  example: support@example.com
            - type: object
              required:
                - to
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Identifies the person represented by your transactional
                    message by one of, and only one of, `id`, `email`, or
                    `cio_id`.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >
                            The identifier for the person represented by the
                            transactional message. **NOTE**: If your workspace
                            identifies people by email, use the `email`
                            identifier instead.
                          type: string
                          example: 12345
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: >-
                            The identifier for the person represented by the
                            transactional message. Use this option if your
                            workspace identifies people by email rather than by
                            `id`.
                          type: string
                          example: cool.person@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique, immutable identifier for a person, set by
                            Customer.io when you add a person.
                          type: string
                          example: 3000001
                message_data:
                  description: >-
                    An object containing the key-value pairs referenced using
                    liquid in your message.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: Liquid Data
                  example:
                    password_reset_token: abcde-12345-fghij-d888
                    account_id: 123dj
                send_at:
                  description: >-
                    A unix timestamp (seconds since epoch) determining when the
                    message will be sent. The timestamp can be up to 90 days in
                    the future. If this value is in the past, your message is
                    sent immediately.
                  type: integer
                disable_message_retention:
                  description: >-
                    If true, the message body is not retained in delivery
                    history. Setting this value overrides the value set in the
                    settings of your `transactional_message_id`.
                  type: boolean
                  default: false
                send_to_unsubscribed:
                  description: >-
                    If false, your message is not sent to unsubscribed
                    recipients. Setting this value overrides the value set in
                    the settings of your `transactional_message_id`.
                  type: boolean
                  default: true
                queue_draft:
                  description: >-
                    If true, your transactional message is held as a draft in
                    Customer.io and not sent directly to your audience. You must
                    go to the Deliveries and Drafts page to send your message.
                  type: boolean
                  default: false
            - type: object
              properties:
                to:
                  description: >
                    The message recipient(s). Supports multiple addresses
                    separated by commas. Your request can contain up to 15 total
                    recipients between the `to` and `bcc` keys.


                    You can include a display or "friendly" name in "to"
                    address, but we recommend that you use quotation marks
                    around the friendly name to avoid potential issues with
                    special characters, e.g. `\"Person\"
                    <person@example.com>`.            
                  type: string
                  example: cool.person@example.com
                bcc:
                  description: >-
                    Blind copy message recipients. Supports multiple addresses
                    separated by commas. Your request can contain up to 15 total
                    recipients between the `to` and `bcc` keys.
                  type: string
                  example: bcc@example.com
                fake_bcc:
                  description: >
                    If true, rather than sending true copies to BCC addresses,
                    Customer.io sends a copy of the message with the subject
                    line containing the recipient address(es).
                  type: boolean
                reply_to:
                  description: >-
                    The address that recipients can reply to, if different from
                    the `from` address.
                  type: string
                  example: replyto@example.com
                preheader:
                  description: >-
                    Also known as "preview text", this is the block block of
                    text that users see next to, or underneath, the subject line
                    in their inbox.
                  type: string
                body_plain:
                  description: >-
                    By default, we generate a plaintext version of your message
                    body for each delivery. Use this key to override the default
                    plain text body.
                  type: string
                attachments:
                  description: >
                    A dictionary of attachments where the filename is the key
                    and the value is the base64-encoded contents. The total size
                    of all attachments must be less than 2 MB. Some filetype
                    extensions are restricted.
                  type: array
                  items:
                    type: object
                    additionalProperties:
                      type: string
                      format: base64
                      x-additionalPropertiesName: Attachment Names
                      x-doNotRender: true
                headers:
                  description: >-
                    Headers must be strings and cannot contain any non-ASCII
                    characters or empty spaces. Some headers are reserved and
                    cannot be overwritten.
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        description: name of header
                        type: string
                        example: X-Mailgun-Tag
                      value:
                        description: value of header
                        type: string
                        example: tag-name-for-tracking
                disable_css_preprocessing:
                  description: >-
                    Set to `true` to disable CSS preprocessing. This setting
                    overrides the CSS preprocessing setting on the
                    `transactional_message_id` as set in the user interface.
                    Transactional emails have CSS preprocessing enabled by
                    default.
                  type: boolean
                  example: false
                  default: false
                tracked:
                  description: >-
                    If true, Customer.io tracks opens and link clicks in your
                    message.
                  type: boolean
                  default: true
          example:
            from: Support <support@example.com>
            subject: Your password reset request!
            body: Your temporary password is {{message_data.password_reset_token}}
            to: cool.person@example.com
            identifiers:
              id: 12345
            message_data:
              password_reset_token: abcde-12345-fghij-d888
              account_id: 123dj
            bcc: bcc@example.com
            disable_message_retention: false
            send_to_unsubscribed: true
            tracked: true
            queue_draft: false
            disable_css_preprocessing: true
    transactionalObject:
      description: Contains information about a transactional message.
      type: object
      properties:
        description:
          description: A description of the transactional message.
          type: string
          example: >-
            sends a temporary password and lets the customer reset their
            password.
        id:
          description: The identifier Customer.io assigned to the transactional message
          type: integer
          example: 2
        name:
          description: The name you set for the transactional message.
          type: string
          example: password reset
        send_to_unsubscribed:
          description: >-
            If true, people with an `unsubscribed` attribute set to `true` can
            trigger the message.
          type: boolean
        link_tracking:
          description: If true, link tracking is enabled for this message.
          type: boolean
        open_tracking:
          description: If true, open-tracking is enabled for this message.
          type: boolean
        hide_message_body:
          description: >-
            If true, message contents are not retained in delivery history—you
            cannot recall the exact contents of the message.
          type: boolean
        queue_drafts:
          description: >-
            If true, messages do not send automatically, and queue as drafts
            instead. You must send drafts through the *Deliveries & Drafts* page
            in the user interface.
          type: boolean
        created_at:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated_at:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
    contentObject:
      type: object
      properties:
        id:
          description: >-
            The identifier of a newsletter variant—a language in a
            multi-language newsletter or a test in an A/B test.
          type: integer
          readOnly: true
        newsletter_id:
          description: The identifier for a newsletter.
          readOnly: true
          type: integer
          example: 10
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        name:
          description: The name of the variant, if it exists.
          type: string
          readOnly: true
          example: newsletter variant A
        layout:
          description: The layout used for the variant, if it exists.
          type: string
          example: <html><body>{{ content }}</body></html>
          readOnly: true
        body:
          description: >-
            The body of the variant. You cannot modify the body if you created
            it with our drag-and-drop editor.
          type: string
          example: <strong>Hello from the API</strong>
        body_amp:
          description: >-
            If your message is an email, this is the AMP-enabled body of your
            message. If your recipient's email client doesn't support AMP, the
            `body` represents your fallback message.
          type: string
        language:
          description: >-
            The language variant for your message. If you don't use our
            [localization feature](https://customer.io/docs/api/track/), or this
            is the default message, this value is an empty string.
          type: string
          example: fr
          readOnly: true
        type:
          description: The type of message/action.
          type: string
          enum:
            - email
            - webhook
            - twilio
            - slack
            - push
          readOnly: true
          example: email
        from:
          description: >-
            The address that the message is from, relevant if the action `type`
            is `email`.
          type: string
          readOnly: true
          example: sentFrom@example.com
        from_id:
          description: >-
            The identifier of the `from` address, commonly known as the
            "sender". You can [list your sender
            identities](https://customer.io/docs/api/track/) to match the ID to
            a specific address.
          type: integer
          example: 1
        reply_to:
          description: The address that receives replies for the message, if applicable.
          type: string
          readOnly: true
          example: replyto@example.com
        reply_to_id:
          description: >-
            The identifier for the `reply_to` address, if applicable. You can
            [list your sender identities](https://customer.io/docs/api/track/)
            to match the ID to a specific address.
          type: integer
          nullable: true
          example: 38
        preprocessor:
          description: >-
            By default, we process CSS before emails leave Customer.io using
            Premailer. If your message included CSS and pre-processing is not
            disabled, this key indicates the pre-processor.
          type: string
          enum:
            - premailer
          readOnly: true
        recipient:
          description: The recipient address for an action.
          type: string
          example: '{{customer.email}}'
        subject:
          description: The subject line for an `email` action.
          type: string
          example: Did you get that thing I sent you?
        bcc:
          description: The blind-copy address(es) for this action.
          readOnly: true
          type: string
        fake_bcc:
          description: >
            If true, rather than sending true copies to BCC addresses,
            Customer.io sends a copy of the message with the subject line
            containing the recipient address(es).
          readOnly: true
          type: boolean
        preheader_text:
          description: >-
            Also known as "preview text", this specifies the small block of text
            shown in an end-user's email inbox, next to, or underneath, the
            subject line.
          type: string
        headers:
          description: >-
            Headers must be strings and cannot contain any non-ASCII characters
            or empty spaces. Some headers are reserved and cannot be
            overwritten.
          type: array
          items:
            type: object
            properties:
              name:
                description: name of header
                type: string
                example: X-Mailgun-Tag
              value:
                description: value of header
                type: string
                example: tag-name-for-tracking
    action_id:
      description: The identifier for an action.
      type: integer
      readOnly: true
      example: 96
      nullable: true
    campaign_id:
      description: The identifier for a campaign.
      type: integer
      example: 5
    message_id:
      description: >-
        The identifier for a delivery—the instance of a message intended for an
        individual recipient.
      type: string
      readOnly: true
      example: dgOq6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=
    message_template_id:
      description: The identifier of the message template used to create a message.
      type: integer
      readOnly: true
      deprecated: true
    recipient:
      description: The recipient address for an action.
      type: string
      example: '{{customer.email}}'
    recipient_not_templated:
      description: The recipient address for an action.
      type: string
      example: test@example.com
    subject:
      description: The subject line for an `email` action.
      type: string
      example: Did you get that thing I sent you?
    newsletter_id:
      description: The identifier for a newsletter.
      type: integer
      example: 10
    content_id:
      description: The identifier for a newsletter variant.
      type: integer
      readOnly: true
      example: 1
      nullable: true
    messageType:
      description: The type of message/action.
      type: string
      enum:
        - email
        - webhook
        - twilio
        - slack
        - push
      readOnly: true
      example: email
    from:
      description: >-
        The address that the message is from, relevant if the action `type` is
        `email`.
      type: string
      readOnly: true
      example: sentFrom@example.com
    from_id:
      description: >-
        The identifier of the `from` address, commonly known as the "sender".
        You can [list your sender
        identities](https://customer.io/docs/api/track/) to match the ID to a
        specific address.
      type: integer
      example: 1
    reply_to:
      description: The address that receives replies for the message, if applicable.
      type: string
      readOnly: true
      example: replyto@example.com
    reply_to_settable:
      description: The address that receives replies for the message, if applicable.
      type: string
      example: replyto@example.com
    from_address:
      description: >-
        The address you want to trigger messages from, overriding the `from`
        field in emails triggered by the event.
      type: string
      format: email
    reply_to_id:
      description: >-
        The identifier for the `reply_to` address, if applicable. You can [list
        your sender identities](https://customer.io/docs/api/track/) to match
        the ID to a specific address.
      type: integer
      nullable: true
      example: 38
    preprocessor:
      description: >-
        By default, we process CSS before emails leave Customer.io using
        Premailer. If your message included CSS and pre-processing is not
        disabled, this key indicates the pre-processor.
      type: string
      enum:
        - premailer
      readOnly: true
    bcc:
      description: The blind-copy address(es) for this action.
      readOnly: true
      type: string
    fake_bcc:
      description: >
        If true, rather than sending true copies to BCC addresses, Customer.io
        sends a copy of the message with the subject line containing the
        recipient address(es).
      readOnly: true
      type: boolean
    preheader_text:
      description: >-
        Also known as "preview text", this specifies the small block of text
        shown in an end-user's email inbox, next to, or underneath, the subject
        line.
      type: string
    trigger_event_id:
      description: The ID of an event that triggered a campaign or action.
      type: string
      nullable: true
    body_amp:
      description: >-
        If your message is an email, this is the AMP-enabled body of your
        message. If your recipient's email client doesn't support AMP, the
        `body` represents your fallback message.
      type: string
    language:
      description: >-
        The language variant for your message. If you don't use our
        [localization feature](https://customer.io/docs/api/track/), or this is
        the default message, this value is an empty string.
      type: string
      example: fr
      readOnly: true
    messageObject:
      description: >-
        Describes an individual message delivery. The object contains keys for
        all possible parents of the message (`newsletter_id`, `broadcast_id`,
        etc) but only the parents of the delivery are populated. Other parent
        IDs are null.
      type: object
      properties:
        id:
          description: >-
            The identifier for a delivery—the instance of a message intended for
            an individual recipient.
          type: string
          readOnly: true
          example: dgOq6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        message_template_id:
          description: The identifier of the message template used to create a message.
          type: integer
          readOnly: true
          deprecated: true
        customer_id:
          description: >-
            The ID of a customer profile, analogous to a "person" in the UI. If
            your workspace supports multiple identifiers (email and ID), this
            value can be null.
          type: string
          nullable: true
          example: '42'
        customer_identifiers:
          description: >
            Contains identifiers for the person represented in a response—`id`,
            `cio_id`, and `email` (if your workspace uses the *Email or ID*
            setting). If the person's `id` or `email` is not set, the value will
            be null.


            We recommend that you use this object rather than the less
            descriptive `customer_id`.
          type: object
          required:
            - email
            - id
            - cio_id
          properties:
            email:
              description: A person's email address, if set.
              type: string
              nullable: true
              format: email
              example: test@example.com
            id:
              description: >-
                A person's unique ID, if set. This is the same as the
                `customer_id` if present.
              type: string
              nullable: true
              example: 2
            cio_id:
              description: >-
                A unique identifier set by Customer.io, used to reference a
                person if you want to update their identifiers.
              type: string
              example: a3000001
        recipient:
          description: The recipient address for an action.
          type: string
          example: '{{customer.email}}'
        subject:
          description: The subject line for an `email` action.
          type: string
          example: Did you get that thing I sent you?
        metrics:
          description: >-
            Metrics for an individual instance of a message; each item in the
            object represents the timestamp when a message achieved a particular
            metric. This object only contains metrics that have been recorded.
          type: object
          properties:
            bounced:
              description: The timestamp when the message `bounced`.
              type: integer
            clicked:
              description: The timestamp when the message was `clicked`.
              type: integer
            converted:
              description: The timestamp when the message was `converted`.
              type: integer
            created:
              description: The timestamp when the message was `created`.
              type: integer
            delivered:
              description: The timestamp when the message was `delivered`.
              type: integer
            drafted:
              description: The timestamp when the message was `drafted`.
              type: integer
            dropped:
              description: The timestamp when the message was `dropped`.
              type: integer
            failed:
              description: The timestamp when the message `failed`.
              type: integer
            opened:
              description: The timestamp when the message was `opened`.
              type: integer
            sent:
              description: The timestamp when the message was `sent`.
              type: integer
            spammed:
              description: The timestamp when the message was marked as spam.
              type: integer
            undeliverable:
              description: The timestamp when the message became `undeliverable`.
              type: integer
            unsubscribed:
              description: The timestamp when a person unsubscribed based on this message.
              type: integer
        created:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        failure_message:
          description: Explains why a message failed, if applicable.
          type: string
          nullable: true
        campaign_id:
          description: The identifier for a campaign.
          nullable: true
          type: integer
          example: 5
        action_id:
          description: The identifier for an action.
          type: integer
          readOnly: true
          example: 96
          nullable: true
        parent_action_id:
          description: >-
            The ID of the parent action, if the action occurred within a
            campaign and has a parent (like a randomized split, etc).
          type: integer
          example: 1
          readOnly: true
        newsletter_id:
          description: The identifier for a newsletter.
          nullable: true
          type: integer
          example: 10
        content_id:
          description: The identifier for a newsletter variant.
          type: integer
          readOnly: true
          example: 1
          nullable: true
        broadcast_id:
          description: The identifier for a broadcast.
          nullable: true
          type: integer
          example: 2
        trigger_event_id:
          description: The ID of an event that triggered a campaign or action.
          type: string
          nullable: true
        type:
          description: The type of message/action.
          type: string
          enum:
            - email
            - webhook
            - twilio
            - slack
            - push
          readOnly: true
          example: email
        forgotten:
          description: If true message contents are not retained by Customer.io.
          type: boolean
      example:
        id: ag1q6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=
        deduplicate_id: ag1q6QWq6QUBAAF4_CGoeVX7mFkDbRFu7ek=:1619137768
        msg_template_id: 43
        action_id: 215
        parent_action_id: null
        customer_id: null
        recipient: person@example.com
        subject: Did you get that thing I sent you?
        metrics:
          delivered: 1619137768
          sent: 1619137768
        created: 1619137767
        failure_message: null
        newsletter_id: null
        content_id: null
        campaign_id: 23
        broadcast_id: null
        trigger_event_id: null
        type: email
        forgotten: false
    broadcastActionObject:
      oneOf:
        - title: Email / message
          type: object
          properties:
            id:
              description: The identifier for an action.
              type: integer
              readOnly: true
              example: 96
              nullable: true
            broadcast_id:
              description: The identifier for a broadcast.
              readOnly: true
              type: integer
              example: 2
            deduplicate_id:
              description: >-
                An identifier in the format `id:timestamp` where the id is the
                id of the object you are working with (Campaigns, Deliveries,
                Exports, Identities, Newsletters, Segments, and Templates), and
                the timestamp is the last time the object was updated.
              type: string
              readOnly: true
              example: '15:1492548073'
            name:
              description: The name of the action, if it exists.
              type: string
              readOnly: true
              example: Opening Message
            layout:
              description: The layout used for the action, if it exists.
              type: string
              readOnly: true
            created:
              description: The date time when the referenced ID was created.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            updated:
              description: The date time when the referenced ID was last updated.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            body:
              description: >-
                The body of the action. You cannot modify the body if you
                created it with our drag-and-drop editor.
              type: string
            type:
              description: The type of action.
              type: string
              enum:
                - email
                - in_app
                - push
                - twilio
                - slack
              readOnly: true
            sending_state:
              description: >-
                Determines the sending behavior for the action. `automatic`
                sends the action automatically when triggered; `draft` queues
                drafts when the action is triggered; or `off` to disable the
                action.
              type: string
              enum:
                - automatic
                - draft
                - 'off'
            language:
              description: >-
                The language variant for your message. If you don't use our
                [localization feature](https://customer.io/docs/api/track/), or
                this is the default message, this value is an empty string.
              type: string
              example: fr
              readOnly: true
            from:
              description: >-
                The address that the message is from, relevant if the action
                `type` is `email`.
              type: string
              readOnly: true
              example: sentFrom@example.com
            from_id:
              description: >-
                The identifier of the `from` address, commonly known as the
                "sender". You can [list your sender
                identities](https://customer.io/docs/api/track/) to match the ID
                to a specific address.
              type: integer
              example: 1
            reply_to:
              description: >-
                The address that receives replies for the message, if
                applicable.
              type: string
              readOnly: true
              example: replyto@example.com
            reply_to_id:
              description: >-
                The identifier for the `reply_to` address, if applicable. You
                can [list your sender
                identities](https://customer.io/docs/api/track/) to match the ID
                to a specific address.
              type: integer
              nullable: true
              example: 38
            preprocessor:
              description: >-
                By default, we process CSS before emails leave Customer.io using
                Premailer. If your message included CSS and pre-processing is
                not disabled, this key indicates the pre-processor.
              type: string
              enum:
                - premailer
              readOnly: true
            recipient:
              description: The recipient address for an action.
              type: string
              example: '{{customer.email}}'
            subject:
              description: The subject line for an `email` action.
              type: string
              example: Did you get that thing I sent you?
            bcc:
              description: The blind-copy address(es) for this action.
              readOnly: true
              type: string
            fake_bcc:
              description: >
                If true, rather than sending true copies to BCC addresses,
                Customer.io sends a copy of the message with the subject line
                containing the recipient address(es).
              readOnly: true
              type: boolean
            preheader_text:
              description: >-
                Also known as "preview text", this specifies the small block of
                text shown in an end-user's email inbox, next to, or underneath,
                the subject line.
              type: string
            headers:
              description: >-
                Headers must be strings and cannot contain any non-ASCII
                characters or empty spaces. Some headers are reserved and cannot
                be overwritten.
              type: array
              items:
                type: object
                properties:
                  name:
                    description: name of header
                    type: string
                    example: X-Mailgun-Tag
                  value:
                    description: value of header
                    type: string
                    example: tag-name-for-tracking
            body_amp:
              description: >-
                If your message is an email, this is the AMP-enabled body of
                your message. If your recipient's email client doesn't support
                AMP, the `body` represents your fallback message.
              type: string
        - title: Webhook
          type: object
          properties:
            id:
              description: The identifier for an action.
              type: integer
              readOnly: true
              example: 96
              nullable: true
            broadcast_id:
              description: The identifier for a broadcast.
              type: integer
              example: 2
            deduplicate_id:
              description: >-
                An identifier in the format `id:timestamp` where the id is the
                id of the object you are working with (Campaigns, Deliveries,
                Exports, Identities, Newsletters, Segments, and Templates), and
                the timestamp is the last time the object was updated.
              type: string
              readOnly: true
              example: '15:1492548073'
            name:
              description: The name of the action, if it exists.
              type: string
              readOnly: true
              example: Opening Message
            layout:
              description: The layout used for the action, if it exists.
              type: string
              readOnly: true
            created:
              description: The date time when the referenced ID was created.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            updated:
              description: The date time when the referenced ID was last updated.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            body:
              description: >-
                The body of the action. You cannot modify the body if you
                created it with our drag-and-drop editor.
              type: string
            type:
              description: The type of action.
              type: string
              enum:
                - webhook
              readOnly: true
            url:
              description: The URL to send a webhook to, applies to `webhook` type actions.
              type: string
              example: https://my.example.com/webhook
            headers:
              description: >-
                Headers must be strings and cannot contain any non-ASCII
                characters or empty spaces. Some headers are reserved and cannot
                be overwritten.
              type: array
              items:
                type: object
                properties:
                  name:
                    description: name of header
                    type: string
                    example: X-Mailgun-Tag
                  value:
                    description: value of header
                    type: string
                    example: tag-name-for-tracking
            method:
              description: The HTTP method for your webhook.
              type: string
              enum:
                - get
                - post
                - put
                - delete
                - patch
              example: post
            sending_state:
              description: >-
                Determines the sending behavior for the action. `automatic`
                sends the action automatically when triggered; `draft` queues
                drafts when the action is triggered; or `off` to disable the
                action.
              type: string
              enum:
                - automatic
                - draft
                - 'off'
    transactionalActionObject:
      type: object
      properties:
        id:
          description: The identifier for an action.
          type: integer
          readOnly: true
          example: 96
          nullable: true
        name:
          description: The name of the transactional message.
          type: string
          readOnly: true
          example: Receipt
        created:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        body:
          description: >-
            The body of the transactional message. You cannot modify the body if
            you created it with our drag-and-drop editor.
          type: string
        language:
          description: >-
            The language variant for your message. If you don't use our
            [localization feature](https://customer.io/docs/api/track/), or this
            is the default message, this value is an empty string.
          type: string
          example: fr
          readOnly: true
        type:
          description: The type of message.
          type: string
          enum:
            - email
            - push
          readOnly: true
        from:
          description: >-
            The address that the message is from, relevant if the action `type`
            is `email`.
          type: string
          readOnly: true
          example: sentFrom@example.com
        from_id:
          description: >-
            The identifier of the `from` address, commonly known as the
            "sender". You can [list your sender
            identities](https://customer.io/docs/api/track/) to match the ID to
            a specific address.
          type: integer
          example: 1
        reply_to:
          description: The address that receives replies for the message, if applicable.
          type: string
          readOnly: true
          example: replyto@example.com
        reply_to_id:
          description: >-
            The identifier for the `reply_to` address, if applicable. You can
            [list your sender identities](https://customer.io/docs/api/track/)
            to match the ID to a specific address.
          type: integer
          nullable: true
          example: 38
        preprocessor:
          description: >-
            By default, we process CSS before emails leave Customer.io using
            Premailer. If your message included CSS and pre-processing is not
            disabled, this key indicates the pre-processor.
          type: string
          enum:
            - premailer
          readOnly: true
        recipient:
          description: The recipient address for an action.
          readOnly: true
          type: string
          example: '{{customer.email}}'
        subject:
          description: The subject line for an `email` action.
          type: string
          example: Did you get that thing I sent you?
        bcc:
          description: The blind-copy address(es) for this action.
          readOnly: true
          type: string
        fake_bcc:
          description: >
            If true, rather than sending true copies to BCC addresses,
            Customer.io sends a copy of the message with the subject line
            containing the recipient address(es).
          readOnly: true
          type: boolean
        preheader_text:
          description: >-
            Also known as "preview text", this specifies the small block of text
            shown in an end-user's email inbox, next to, or underneath, the
            subject line.
          type: string
        headers:
          description: >-
            Headers must be strings and cannot contain any non-ASCII characters
            or empty spaces. Some headers are reserved and cannot be
            overwritten.
          type: array
          items:
            type: object
            properties:
              name:
                description: name of header
                type: string
                example: X-Mailgun-Tag
              value:
                description: value of header
                type: string
                example: tag-name-for-tracking
        body_amp:
          description: >-
            If your message is an email, this is the AMP-enabled body of your
            message. If your recipient's email client doesn't support AMP, the
            `body` represents your fallback message.
          type: string
    parent_action_id:
      description: >-
        The ID of the parent action, if the action occurred within a campaign
        and has a parent (like a randomized split, etc).
      type: integer
      example: 1
      readOnly: true
    actionObject:
      oneOf:
        - title: Email / message
          type: object
          properties:
            id:
              description: The identifier for an action.
              type: integer
              readOnly: true
              example: 96
              nullable: true
            campaign_id:
              description: The identifier for a campaign.
              readOnly: true
              type: integer
              example: 5
            parent_action_id:
              description: >-
                The ID of the parent action, if the action occurred within a
                campaign and has a parent (like a randomized split, etc).
              type: integer
              example: 1
              readOnly: true
            deduplicate_id:
              description: >-
                An identifier in the format `id:timestamp` where the id is the
                id of the object you are working with (Campaigns, Deliveries,
                Exports, Identities, Newsletters, Segments, and Templates), and
                the timestamp is the last time the object was updated.
              type: string
              readOnly: true
              example: '15:1492548073'
            name:
              description: The name of the action, if it exists.
              type: string
              readOnly: true
              example: Opening Message
            layout:
              description: The layout used for the action, if it exists.
              type: string
              readOnly: true
            created:
              description: The date time when the referenced ID was created.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            updated:
              description: The date time when the referenced ID was last updated.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            body:
              description: >-
                The body of the action. For emails, this is the HTML-body of a
                message. You cannot modify the body if you created it with our
                drag-and-drop editor.
              type: string
            body_amp:
              description: >-
                If your message is an email, this is the AMP-enabled body of
                your message. If your recipient's email client doesn't support
                AMP, the `body` represents your fallback message.
              type: string
            language:
              description: >-
                The language variant for your message. If you don't use our
                [localization feature](https://customer.io/docs/api/track/), or
                this is the default message, this value is an empty string.
              type: string
              example: fr
              readOnly: true
            type:
              description: The type of action.
              type: string
              enum:
                - email
                - in_app
                - push
                - twilio
                - slack
              readOnly: true
            sending_state:
              description: >-
                Determines the sending behavior for the action. `automatic`
                sends the action automatically when triggered; `draft` queues
                drafts when the action is triggered; or `off` to disable the
                action.
              type: string
              enum:
                - automatic
                - draft
                - 'off'
            from:
              description: >-
                The address that the message is from, relevant if the action
                `type` is `email`.
              type: string
              readOnly: true
              example: sentFrom@example.com
            from_id:
              description: >-
                The identifier of the `from` address, commonly known as the
                "sender". You can [list your sender
                identities](https://customer.io/docs/api/track/) to match the ID
                to a specific address.
              type: integer
              example: 1
            reply_to:
              description: >-
                The address that receives replies for the message, if
                applicable.
              type: string
              readOnly: true
              example: replyto@example.com
            reply_to_id:
              description: >-
                The identifier for the `reply_to` address, if applicable. You
                can [list your sender
                identities](https://customer.io/docs/api/track/) to match the ID
                to a specific address.
              type: integer
              nullable: true
              example: 38
            preprocessor:
              description: >-
                By default, we process CSS before emails leave Customer.io using
                Premailer. If your message included CSS and pre-processing is
                not disabled, this key indicates the pre-processor.
              type: string
              enum:
                - premailer
              readOnly: true
            recipient:
              description: The recipient address for an action.
              type: string
              example: '{{customer.email}}'
            subject:
              description: The subject line for an `email` action.
              type: string
              example: Did you get that thing I sent you?
            bcc:
              description: The blind-copy address(es) for this action.
              readOnly: true
              type: string
            fake_bcc:
              description: >
                If true, rather than sending true copies to BCC addresses,
                Customer.io sends a copy of the message with the subject line
                containing the recipient address(es).
              readOnly: true
              type: boolean
            preheader_text:
              description: >-
                Also known as "preview text", this specifies the small block of
                text shown in an end-user's email inbox, next to, or underneath,
                the subject line.
              type: string
            headers:
              description: >-
                Headers must be strings and cannot contain any non-ASCII
                characters or empty spaces. Some headers are reserved and cannot
                be overwritten.
              type: array
              items:
                type: object
                properties:
                  name:
                    description: name of header
                    type: string
                    example: X-Mailgun-Tag
                  value:
                    description: value of header
                    type: string
                    example: tag-name-for-tracking
        - title: Webhook
          type: object
          properties:
            id:
              description: The identifier for an action.
              type: integer
              readOnly: true
              example: 96
              nullable: true
            campaign_id:
              description: The identifier for a campaign.
              type: integer
              example: 5
            parent_action_id:
              description: >-
                The ID of the parent action, if the action occurred within a
                campaign and has a parent (like a randomized split, etc).
              type: integer
              example: 1
              readOnly: true
            deduplicate_id:
              description: >-
                An identifier in the format `id:timestamp` where the id is the
                id of the object you are working with (Campaigns, Deliveries,
                Exports, Identities, Newsletters, Segments, and Templates), and
                the timestamp is the last time the object was updated.
              type: string
              readOnly: true
              example: '15:1492548073'
            name:
              description: The name of the action, if it exists.
              type: string
              readOnly: true
              example: Set attribute
            layout:
              description: The layout used for the action, if it exists.
              type: string
              readOnly: true
            created:
              description: The date time when the referenced ID was created.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            updated:
              description: The date time when the referenced ID was last updated.
              type: integer
              format: unix timestamp
              example: 1552341937
              readOnly: true
            body:
              description: The payload for your webhook.
              type: string
              example: '{"attribute":"cool-webhook"}'
            type:
              description: The type of action.
              type: string
              enum:
                - webhook
              readOnly: true
            url:
              description: The URL to send a webhook to, applies to `webhook` type actions.
              type: string
              example: https://my.example.com/webhook
            headers:
              description: >-
                Headers must be strings and cannot contain any non-ASCII
                characters or empty spaces. Some headers are reserved and cannot
                be overwritten.
              type: array
              items:
                type: object
                properties:
                  name:
                    description: name of header
                    type: string
                    example: X-Mailgun-Tag
                  value:
                    description: value of header
                    type: string
                    example: tag-name-for-tracking
            method:
              description: The HTTP method for your webhook.
              type: string
              enum:
                - get
                - post
                - put
                - delete
                - patch
              example: post
            sending_state:
              description: >-
                Determines the sending behavior for the action. `automatic`
                sends the action automatically when triggered; `draft` queues
                drafts when the action is triggered; or `off` to disable the
                action.
              type: string
              enum:
                - automatic
                - draft
                - 'off'
    sending_state:
      description: >-
        Determines the sending behavior for the action. `automatic` sends the
        action automatically when triggered; `draft` queues drafts when the
        action is triggered; or `off` to disable the action.
      type: string
      enum:
        - automatic
        - draft
        - 'off'
    periodWebhookMetrics:
      description: >-
        Returns metrics in accordance with the `period` you requested. Each
        property in this object is an array and each entry in the array
        represents a metric period, i.e. if your `period` is days `[0, 1]` would
        represent 0 metrics for the first day, 1 for the second, etc.
      type: object
      properties:
        2xx:
          description: 2xx responses by period, representative of webhook performance.
          type: array
          items:
            type: integer
        3xx:
          description: 3xx responses by period, representative of webhook performance.
          type: array
          items:
            type: integer
        4xx:
          description: 4xx responses by period, representative of webhook performance.
          type: array
          items:
            type: integer
        5xx:
          description: 5xx responses by period, representative of webhook performance.
          type: array
          items:
            type: integer
    periodMessageMetrics:
      description: >-
        Returns metrics in accordance with the `period` you requested. Each
        property in this object is an array and each entry in the array
        represents a metric period, i.e. if your `period` is days `[0, 1]` would
        represent 0 metrics for the first day, 1 for the second, etc.
      type: object
      properties:
        attempted:
          description: The number of `attempted` messages.
          type: array
          items:
            type: integer
        bounced:
          description: The number of `bounced` messages.
          type: array
          items:
            type: integer
        clicked:
          description: The number of `clicked` messages.
          type: array
          items:
            type: integer
        converted:
          description: The number of `converted` messages.
          type: array
          items:
            type: integer
        created:
          description: The number of `created` messages.
          type: array
          items:
            type: integer
        deferred:
          description: The number of `deferred` messages.
          type: array
          items:
            type: integer
        delivered:
          description: The number of `delivered` messages.
          type: array
          items:
            type: integer
        drafted:
          description: The number of `drafted` messages.
          type: array
          items:
            type: integer
        failed:
          description: The number of `failed` messages.
          type: array
          items:
            type: integer
        opened:
          description: The number of `opened` messages.
          type: array
          items:
            type: integer
        sent:
          description: The number of sent messages.
          type: array
          items:
            type: integer
        spammed:
          description: The number of spam complaints.
          type: array
          items:
            type: integer
        suppressed:
          description: The number of `suppressed` messages.
          type: array
          items:
            type: integer
        undeliverable:
          description: The number of `undeliverable` messages.
          type: array
          items:
            type: integer
        topic_unsubscribed:
          description: The number of topic unsubscribes in a given period.
          type: array
          items:
            type: integer
        unsubscribed:
          description: The number of unsubscribes attributed to the campaign or message.
          type: array
          items:
            type: integer
    webhookMetrics:
      type: object
      properties:
        2xx:
          description: The number of 2xx responses.
          type: integer
        3xx:
          description: The number of 3xx responses.
          type: integer
        4xx:
          description: The number of 4xx responses.
          type: integer
        5xx:
          description: The number of 5xx responses.
          type: integer
    messageMetrics:
      description: >-
        Metrics for an individual instance of a message; each item in the object
        represents the timestamp when a message achieved a particular metric.
        This object only contains metrics that have been recorded.
      type: object
      properties:
        bounced:
          description: The timestamp when the message `bounced`.
          type: integer
        clicked:
          description: The timestamp when the message was `clicked`.
          type: integer
        converted:
          description: The timestamp when the message was `converted`.
          type: integer
        created:
          description: The timestamp when the message was `created`.
          type: integer
        delivered:
          description: The timestamp when the message was `delivered`.
          type: integer
        drafted:
          description: The timestamp when the message was `drafted`.
          type: integer
        dropped:
          description: The timestamp when the message was `dropped`.
          type: integer
        failed:
          description: The timestamp when the message `failed`.
          type: integer
        opened:
          description: The timestamp when the message was `opened`.
          type: integer
        sent:
          description: The timestamp when the message was `sent`.
          type: integer
        spammed:
          description: The timestamp when the message was marked as spam.
          type: integer
        undeliverable:
          description: The timestamp when the message became `undeliverable`.
          type: integer
        unsubscribed:
          description: The timestamp when a person unsubscribed based on this message.
          type: integer
    messageTotalMetrics:
      description: Total metrics over the lifespan of the requested item.
      type: object
      properties:
        bounced:
          description: The number of `bounced` messages.
          type: integer
        clicked:
          description: The number of `clicked` messages.
          type: integer
        converted:
          description: The number of `converted` messages.
          type: integer
        created:
          description: The number of `created` messages.
          type: integer
        delivered:
          description: The number of `delivered` messages.
          type: integer
        drafted:
          description: The number of `drafted` messages.
          type: integer
        dropped:
          description: The number of `dropped` messages.
          type: integer
        failed:
          description: The number of `failed` messages.
          type: integer
        opened:
          description: The number of `opened` messages
          type: integer
        sent:
          description: The number of `sent` messages
          type: integer
        spammed:
          description: The number of messages marked as spam.
          type: integer
        undeliverable:
          description: The number of `undeliverable` messages.
          type: integer
        unsubscribed:
          description: The number of unsubscribes attributed to messages.
          type: integer
    linkMetrics:
      type: object
      properties:
        link:
          type: object
          properties:
            id:
              description: The ID of the link.
              type: integer
              example: 1234
            href:
              description: The link destination—a URL, mailto, etc.
              type: string
              example: https://customer.io/docs
        metric:
          description: Contains metrics for the link.
          type: object
          properties:
            series:
              type: object
              properties:
                clicked:
                  description: >-
                    An array of results from oldest to newest, where each result
                    indicates a period.
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 3
                    - 5
                    - 7
    campaignObject:
      type: object
      properties:
        tags:
          description: An array of tags you set on this campaign.
          type: array
          items:
            type: string
          example:
            - new
            - welcome
        id:
          description: The identifier for a campaign.
          type: integer
          example: 5
        deduplicate_id:
          description: >-
            An identifier in the format `id:timestamp` where the id is the id of
            the object you are working with (Campaigns, Deliveries, Exports,
            Identities, Newsletters, Segments, and Templates), and the timestamp
            is the last time the object was updated.
          type: string
          readOnly: true
          example: '15:1492548073'
        name:
          description: The name of the campaign.
          type: string
          readOnly: true
        type:
          description: The type of campaign.
          type: string
          enum:
            - segment
        created:
          description: The date time when the referenced ID was created.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        updated:
          description: The date time when the referenced ID was last updated.
          type: integer
          format: unix timestamp
          example: 1552341937
          readOnly: true
        filter_segment_ids:
          description: >-
            A list of segments used in the campaign filter, returned if the
            campaign audience was filtered on one or more segments.
          type: array
          items:
            type: integer
          example:
            - 21
            - 42
        trigger_segment_ids:
          description: >-
            A list of segments used in the campaign trigger, returned if the
            campaign trigger included one or more segment conditions.
          type: array
          items:
            type: integer
          example:
            - 90
        active:
          description: If true, the campaign is active and can still send messages.
          type: boolean
        msg_templates:
          description: Indicates the message templates used in this campaign.
          type: array
          deprecated: true
          items:
            type: object
            properties:
              type:
                description: The message type the template represents.
                type: string
                enum:
                  - email
                  - sms
                  - push
                  - slack
              id:
                description: The identifier for the template.
                type: integer
        actions:
          description: An array of actions contained within the campaign.
          type: array
          items:
            type: object
            properties:
              type:
                description: The message type actions resulting from the campaign.
                type: string
                enum:
                  - email
                  - sms
                  - push
                  - slack
                  - webhook
              id:
                description: The identifier for the action.
                type: integer
        first_started:
          description: >-
            The date and time when you first started the campaign and it first
            became eligible to be triggered.
          type: integer
          format: unix timestamp
          example: 1552341937
        created_by:
          description: The email address of the person who created the campaign.
          type: string
          format: email
          example: hugh.mann@example.com
    esp_suppression:
      type: object
      properties:
        category:
          description: The reason the addresses are suppressed.
          type: string
          enum:
            - bounces
            - blocks
            - spam
            - invalid
          example: bounces
        suppressions:
          description: The addresses suppressed in this category.
          type: array
          items:
            type: object
            properties:
              created:
                description: >-
                  The timestamp (in seconds), when the ESP suppressed the
                  address.
                type: integer
                format: Unix timestamp
                example: 1650895738
              email:
                description: The email address that the ESP suppressed.
                type: string
                example: bounced.person@example.com
              reason:
                description: >-
                  The reason for the suppression, as [recorded by
                  Mailgun](https://documentation.mailgun.com/en/latest/api-suppressions.html).
                type: string
                example: Uploaded manually via api.customer.io
              status:
                description: >-
                  The status code for the suppression, as [recorded by
                  mailgun](https://documentation.mailgun.com/en/latest/api-suppressions.html).
                  This is normally `550`.
                type: string
                example: '550'
    pushTitle:
      description: The title of your push notification.
      type: string
    pushBody:
      description: The body of your push notification.
      type: string
    pushLink:
      description: A deep link (to a page in your app), or a link to a web page.
      type: string
    pushImage:
      description: The URL of an HTTPS image that you want to use for your message.
      type: string
    customAndroidProps:
      description: Properties supported specifically by Android on FCM.
      type: object
      properties:
        icon:
          description: >-
            Sets the notification icon to `myicon` for drawable resource
            `myicon`. If you don't send this key, FCM displays the launcher icon
            from your app manifest.
          type: string
        sound:
          description: >-
            The sound that plays when the device receives the notification.
            Supports `"default"` or the filename of a sound resource bundled in
            your app. Sound files must reside in `/res/raw/`.
          type: string
        tag:
          description: >
            Identifier to replace existing notifications in the notification
            drawer. If empty, each request creates a new notification.


            If you specify a tag, and a notification with the same tag is
            already being shown, the new notification replaces the existing one
            in the notification drawer. 
          type: string
        color:
          description: The notification's icon color in `#rrggbb` format.
          type: string
        click_action:
          description: >-
            The action that occurs when a user taps on the notification.
            Launches an activity with a matching intent filter when a person
            taps the notification.
          type: string
        body_loc_key:
          description: >-
            The key to the body string in the app's string resources that you
            want to use to localize the body text to the user's current
            localization. See [String
            Resources](https://developer.android.com/guide/topics/resources/string-resource/)
            for more information.
          type: string
        body_loc_arg:
          description: >-
            Variable string values used in place of the format specifiers in
            `body_loc_key` to localize the body text to the user's current
            localization. See Formatting and Styling for more information.
          type: string
        title_loc_key:
          description: >-
            The key to the title string in the app's string resources that you
            want to use to localize the title text to the user's current
            localization. See [String
            Resources](https://developer.android.com/guide/topics/resources/string-resource/)
            for more information.
          type: string
        title_loc_arg:
          description: >-
            Variable string values used in place of the format specifiers in
            `title_loc_key` to localize the title text to the user's current
            localization. See Formatting and Styling for more information.
          type: string
    allAndroidProps:
      allOf:
        - type: object
          properties:
            title:
              description: The title of your push notification.
              type: string
            body:
              description: The body of your push notification.
              type: string
        - description: Properties supported specifically by Android on FCM.
          type: object
          properties:
            icon:
              description: >-
                Sets the notification icon to `myicon` for drawable resource
                `myicon`. If you don't send this key, FCM displays the launcher
                icon from your app manifest.
              type: string
            sound:
              description: >-
                The sound that plays when the device receives the notification.
                Supports `"default"` or the filename of a sound resource bundled
                in your app. Sound files must reside in `/res/raw/`.
              type: string
            tag:
              description: >
                Identifier to replace existing notifications in the notification
                drawer. If empty, each request creates a new notification.


                If you specify a tag, and a notification with the same tag is
                already being shown, the new notification replaces the existing
                one in the notification drawer. 
              type: string
            color:
              description: The notification's icon color in `#rrggbb` format.
              type: string
            click_action:
              description: >-
                The action that occurs when a user taps on the notification.
                Launches an activity with a matching intent filter when a person
                taps the notification.
              type: string
            body_loc_key:
              description: >-
                The key to the body string in the app's string resources that
                you want to use to localize the body text to the user's current
                localization. See [String
                Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                for more information.
              type: string
            body_loc_arg:
              description: >-
                Variable string values used in place of the format specifiers in
                `body_loc_key` to localize the body text to the user's current
                localization. See Formatting and Styling for more information.
              type: string
            title_loc_key:
              description: >-
                The key to the title string in the app's string resources that
                you want to use to localize the title text to the user's current
                localization. See [String
                Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                for more information.
              type: string
            title_loc_arg:
              description: >-
                Variable string values used in place of the format specifiers in
                `title_loc_key` to localize the title text to the user's current
                localization. See Formatting and Styling for more information.
              type: string
    fcmBasicPush:
      type: object
      required:
        - message
      properties:
        message:
          description: The parent object for all custom push payloads.
          type: object
          required:
            - notification
          properties:
            notification:
              description: >-
                Contains properties interpreted by the SDK except for the
                `link`.
              type: object
              required:
                - body
              properties:
                title:
                  description: The title of your push notification.
                  type: string
                body:
                  description: The body of your push notification.
                  type: string
                image:
                  description: >-
                    The URL of an HTTPS image that you want to use for your
                    message.
                  type: string
            data:
              description: >-
                Contains the `link` property (interpreted by the SDK) and
                additional properties that you want to pass to your app.
              type: object
              properties:
                link:
                  description: >-
                    A deep link (to a page in your app), or a link to a web
                    page.
                  type: string
    fcmAndroidWithSdk:
      type: object
      required:
        - message
      properties:
        message:
          description: The parent object for all push payloads.
          oneOf:
            - title: Data object only
              type: object
              required:
                - data
              properties:
                data:
                  description: Contains all properties interpreted by the SDK.
                  type: object
                  properties:
                    title:
                      description: The title of your push notification.
                      type: string
                    body:
                      description: The body of your push notification.
                      type: string
                    image:
                      description: >-
                        The URL of an HTTPS image that you want to use for your
                        message.
                      type: string
                    link:
                      description: >-
                        A deep link (to a page in your app), or a link to a web
                        page.
                      type: string
                android:
                  description: >-
                    Contains properties that are **not** interpreted by the SDK
                    but are defined by FCM. You need to write your own code to
                    handle these Android push features.
                  type: object
                  properties:
                    notification:
                      description: Properties supported specifically by Android on FCM.
                      type: object
                      properties:
                        icon:
                          description: >-
                            Sets the notification icon to `myicon` for drawable
                            resource `myicon`. If you don't send this key, FCM
                            displays the launcher icon from your app manifest.
                          type: string
                        sound:
                          description: >-
                            The sound that plays when the device receives the
                            notification. Supports `"default"` or the filename
                            of a sound resource bundled in your app. Sound files
                            must reside in `/res/raw/`.
                          type: string
                        tag:
                          description: >
                            Identifier to replace existing notifications in the
                            notification drawer. If empty, each request creates
                            a new notification.


                            If you specify a tag, and a notification with the
                            same tag is already being shown, the new
                            notification replaces the existing one in the
                            notification drawer. 
                          type: string
                        color:
                          description: The notification's icon color in `#rrggbb` format.
                          type: string
                        click_action:
                          description: >-
                            The action that occurs when a user taps on the
                            notification. Launches an activity with a matching
                            intent filter when a person taps the notification.
                          type: string
                        body_loc_key:
                          description: >-
                            The key to the body string in the app's string
                            resources that you want to use to localize the body
                            text to the user's current localization. See [String
                            Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                            for more information.
                          type: string
                        body_loc_arg:
                          description: >-
                            Variable string values used in place of the format
                            specifiers in `body_loc_key` to localize the body
                            text to the user's current localization. See
                            Formatting and Styling for more information.
                          type: string
                        title_loc_key:
                          description: >-
                            The key to the title string in the app's string
                            resources that you want to use to localize the title
                            text to the user's current localization. See [String
                            Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                            for more information.
                          type: string
                        title_loc_arg:
                          description: >-
                            Variable string values used in place of the format
                            specifiers in `title_loc_key` to localize the title
                            text to the user's current localization. See
                            Formatting and Styling for more information.
                          type: string
            - title: Notification and data object
              type: object
              required:
                - notification
              properties:
                notification:
                  description: >-
                    Contains properties interpreted by the SDK except for the
                    `link`.
                  type: object
                  properties:
                    title:
                      description: The title of your push notification.
                      type: string
                    body:
                      description: The body of your push notification.
                      type: string
                    image:
                      description: >-
                        The URL of an HTTPS image that you want to use for your
                        message.
                      type: string
                data:
                  description: >-
                    Contains the `link` property (interpreted by the SDK) and
                    additional properties that you want to pass to your app.
                  type: object
                  properties:
                    link:
                      description: >-
                        A deep link (to a page in your app), or a link to a web
                        page.
                      type: string
                android:
                  description: >-
                    Contains properties that are **not** interpreted by the SDK
                    but are defined by FCM. You need to write your own code to
                    handle these Android push features.
                  type: object
                  properties:
                    notification:
                      description: Properties supported specifically by Android on FCM.
                      type: object
                      properties:
                        icon:
                          description: >-
                            Sets the notification icon to `myicon` for drawable
                            resource `myicon`. If you don't send this key, FCM
                            displays the launcher icon from your app manifest.
                          type: string
                        sound:
                          description: >-
                            The sound that plays when the device receives the
                            notification. Supports `"default"` or the filename
                            of a sound resource bundled in your app. Sound files
                            must reside in `/res/raw/`.
                          type: string
                        tag:
                          description: >
                            Identifier to replace existing notifications in the
                            notification drawer. If empty, each request creates
                            a new notification.


                            If you specify a tag, and a notification with the
                            same tag is already being shown, the new
                            notification replaces the existing one in the
                            notification drawer. 
                          type: string
                        color:
                          description: The notification's icon color in `#rrggbb` format.
                          type: string
                        click_action:
                          description: >-
                            The action that occurs when a user taps on the
                            notification. Launches an activity with a matching
                            intent filter when a person taps the notification.
                          type: string
                        body_loc_key:
                          description: >-
                            The key to the body string in the app's string
                            resources that you want to use to localize the body
                            text to the user's current localization. See [String
                            Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                            for more information.
                          type: string
                        body_loc_arg:
                          description: >-
                            Variable string values used in place of the format
                            specifiers in `body_loc_key` to localize the body
                            text to the user's current localization. See
                            Formatting and Styling for more information.
                          type: string
                        title_loc_key:
                          description: >-
                            The key to the title string in the app's string
                            resources that you want to use to localize the title
                            text to the user's current localization. See [String
                            Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                            for more information.
                          type: string
                        title_loc_arg:
                          description: >-
                            Variable string values used in place of the format
                            specifiers in `title_loc_key` to localize the title
                            text to the user's current localization. See
                            Formatting and Styling for more information.
                          type: string
    fcmAndroidWithoutSdk:
      description: A custom push payload for Android devices.
      type: object
      required:
        - message
      properties:
        message:
          description: The parent object for Android custom push payloads.
          type: object
          properties:
            notification:
              description: Contains the push body and title.
              type: object
              properties:
                title:
                  description: The title of your push notification.
                  type: string
                body:
                  description: The body of your push notification.
                  type: string
            data:
              description: Contains key-value pairs that your app interprets.
              type: object
              additionalProperties:
                x-additionalPropertiesName: Attachment Names
                x-doNotRender: true
                type: string
            android:
              description: Contains custom push options for your notification.
              type: object
              properties:
                notification:
                  description: Properties supported specifically by Android on FCM.
                  type: object
                  properties:
                    icon:
                      description: >-
                        Sets the notification icon to `myicon` for drawable
                        resource `myicon`. If you don't send this key, FCM
                        displays the launcher icon from your app manifest.
                      type: string
                    sound:
                      description: >-
                        The sound that plays when the device receives the
                        notification. Supports `"default"` or the filename of a
                        sound resource bundled in your app. Sound files must
                        reside in `/res/raw/`.
                      type: string
                    tag:
                      description: >
                        Identifier to replace existing notifications in the
                        notification drawer. If empty, each request creates a
                        new notification.


                        If you specify a tag, and a notification with the same
                        tag is already being shown, the new notification
                        replaces the existing one in the notification drawer. 
                      type: string
                    color:
                      description: The notification's icon color in `#rrggbb` format.
                      type: string
                    click_action:
                      description: >-
                        The action that occurs when a user taps on the
                        notification. Launches an activity with a matching
                        intent filter when a person taps the notification.
                      type: string
                    body_loc_key:
                      description: >-
                        The key to the body string in the app's string resources
                        that you want to use to localize the body text to the
                        user's current localization. See [String
                        Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                        for more information.
                      type: string
                    body_loc_arg:
                      description: >-
                        Variable string values used in place of the format
                        specifiers in `body_loc_key` to localize the body text
                        to the user's current localization. See Formatting and
                        Styling for more information.
                      type: string
                    title_loc_key:
                      description: >-
                        The key to the title string in the app's string
                        resources that you want to use to localize the title
                        text to the user's current localization. See [String
                        Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                        for more information.
                      type: string
                    title_loc_arg:
                      description: >-
                        Variable string values used in place of the format
                        specifiers in `title_loc_key` to localize the title text
                        to the user's current localization. See Formatting and
                        Styling for more information.
                      type: string
    fcmAndroid:
      oneOf:
        - title: SDK Integration
          type: object
          required:
            - message
          properties:
            message:
              type: object
              required:
                - message
              properties:
                message:
                  description: The parent object for all push payloads.
                  oneOf:
                    - title: Data object only
                      type: object
                      required:
                        - data
                      properties:
                        data:
                          description: Contains all properties interpreted by the SDK.
                          type: object
                          properties:
                            title:
                              description: The title of your push notification.
                              type: string
                            body:
                              description: The body of your push notification.
                              type: string
                            image:
                              description: >-
                                The URL of an HTTPS image that you want to use
                                for your message.
                              type: string
                            link:
                              description: >-
                                A deep link (to a page in your app), or a link
                                to a web page.
                              type: string
                        android:
                          description: >-
                            Contains properties that are **not** interpreted by
                            the SDK but are defined by FCM. You need to write
                            your own code to handle these Android push features.
                          type: object
                          properties:
                            notification:
                              description: >-
                                Properties supported specifically by Android on
                                FCM.
                              type: object
                              properties:
                                icon:
                                  description: >-
                                    Sets the notification icon to `myicon` for
                                    drawable resource `myicon`. If you don't
                                    send this key, FCM displays the launcher
                                    icon from your app manifest.
                                  type: string
                                sound:
                                  description: >-
                                    The sound that plays when the device
                                    receives the notification. Supports
                                    `"default"` or the filename of a sound
                                    resource bundled in your app. Sound files
                                    must reside in `/res/raw/`.
                                  type: string
                                tag:
                                  description: >
                                    Identifier to replace existing notifications
                                    in the notification drawer. If empty, each
                                    request creates a new notification.


                                    If you specify a tag, and a notification
                                    with the same tag is already being shown,
                                    the new notification replaces the existing
                                    one in the notification drawer. 
                                  type: string
                                color:
                                  description: >-
                                    The notification's icon color in `#rrggbb`
                                    format.
                                  type: string
                                click_action:
                                  description: >-
                                    The action that occurs when a user taps on
                                    the notification. Launches an activity with
                                    a matching intent filter when a person taps
                                    the notification.
                                  type: string
                                body_loc_key:
                                  description: >-
                                    The key to the body string in the app's
                                    string resources that you want to use to
                                    localize the body text to the user's current
                                    localization. See [String
                                    Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                    for more information.
                                  type: string
                                body_loc_arg:
                                  description: >-
                                    Variable string values used in place of the
                                    format specifiers in `body_loc_key` to
                                    localize the body text to the user's current
                                    localization. See Formatting and Styling for
                                    more information.
                                  type: string
                                title_loc_key:
                                  description: >-
                                    The key to the title string in the app's
                                    string resources that you want to use to
                                    localize the title text to the user's
                                    current localization. See [String
                                    Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                    for more information.
                                  type: string
                                title_loc_arg:
                                  description: >-
                                    Variable string values used in place of the
                                    format specifiers in `title_loc_key` to
                                    localize the title text to the user's
                                    current localization. See Formatting and
                                    Styling for more information.
                                  type: string
                    - title: Notification and data object
                      type: object
                      required:
                        - notification
                      properties:
                        notification:
                          description: >-
                            Contains properties interpreted by the SDK except
                            for the `link`.
                          type: object
                          properties:
                            title:
                              description: The title of your push notification.
                              type: string
                            body:
                              description: The body of your push notification.
                              type: string
                            image:
                              description: >-
                                The URL of an HTTPS image that you want to use
                                for your message.
                              type: string
                        data:
                          description: >-
                            Contains the `link` property (interpreted by the
                            SDK) and additional properties that you want to pass
                            to your app.
                          type: object
                          properties:
                            link:
                              description: >-
                                A deep link (to a page in your app), or a link
                                to a web page.
                              type: string
                        android:
                          description: >-
                            Contains properties that are **not** interpreted by
                            the SDK but are defined by FCM. You need to write
                            your own code to handle these Android push features.
                          type: object
                          properties:
                            notification:
                              description: >-
                                Properties supported specifically by Android on
                                FCM.
                              type: object
                              properties:
                                icon:
                                  description: >-
                                    Sets the notification icon to `myicon` for
                                    drawable resource `myicon`. If you don't
                                    send this key, FCM displays the launcher
                                    icon from your app manifest.
                                  type: string
                                sound:
                                  description: >-
                                    The sound that plays when the device
                                    receives the notification. Supports
                                    `"default"` or the filename of a sound
                                    resource bundled in your app. Sound files
                                    must reside in `/res/raw/`.
                                  type: string
                                tag:
                                  description: >
                                    Identifier to replace existing notifications
                                    in the notification drawer. If empty, each
                                    request creates a new notification.


                                    If you specify a tag, and a notification
                                    with the same tag is already being shown,
                                    the new notification replaces the existing
                                    one in the notification drawer. 
                                  type: string
                                color:
                                  description: >-
                                    The notification's icon color in `#rrggbb`
                                    format.
                                  type: string
                                click_action:
                                  description: >-
                                    The action that occurs when a user taps on
                                    the notification. Launches an activity with
                                    a matching intent filter when a person taps
                                    the notification.
                                  type: string
                                body_loc_key:
                                  description: >-
                                    The key to the body string in the app's
                                    string resources that you want to use to
                                    localize the body text to the user's current
                                    localization. See [String
                                    Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                    for more information.
                                  type: string
                                body_loc_arg:
                                  description: >-
                                    Variable string values used in place of the
                                    format specifiers in `body_loc_key` to
                                    localize the body text to the user's current
                                    localization. See Formatting and Styling for
                                    more information.
                                  type: string
                                title_loc_key:
                                  description: >-
                                    The key to the title string in the app's
                                    string resources that you want to use to
                                    localize the title text to the user's
                                    current localization. See [String
                                    Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                    for more information.
                                  type: string
                                title_loc_arg:
                                  description: >-
                                    Variable string values used in place of the
                                    format specifiers in `title_loc_key` to
                                    localize the title text to the user's
                                    current localization. See Formatting and
                                    Styling for more information.
                                  type: string
        - title: Custom Integration
          type: object
          required:
            - message
          properties:
            message:
              description: A custom push payload for Android devices.
              type: object
              required:
                - message
              properties:
                message:
                  description: The parent object for Android custom push payloads.
                  type: object
                  properties:
                    notification:
                      description: Contains the push body and title.
                      type: object
                      properties:
                        title:
                          description: The title of your push notification.
                          type: string
                        body:
                          description: The body of your push notification.
                          type: string
                    data:
                      description: Contains key-value pairs that your app interprets.
                      type: object
                      additionalProperties:
                        x-additionalPropertiesName: Attachment Names
                        x-doNotRender: true
                        type: string
                    android:
                      description: Contains custom push options for your notification.
                      type: object
                      properties:
                        notification:
                          description: Properties supported specifically by Android on FCM.
                          type: object
                          properties:
                            icon:
                              description: >-
                                Sets the notification icon to `myicon` for
                                drawable resource `myicon`. If you don't send
                                this key, FCM displays the launcher icon from
                                your app manifest.
                              type: string
                            sound:
                              description: >-
                                The sound that plays when the device receives
                                the notification. Supports `"default"` or the
                                filename of a sound resource bundled in your
                                app. Sound files must reside in `/res/raw/`.
                              type: string
                            tag:
                              description: >
                                Identifier to replace existing notifications in
                                the notification drawer. If empty, each request
                                creates a new notification.


                                If you specify a tag, and a notification with
                                the same tag is already being shown, the new
                                notification replaces the existing one in the
                                notification drawer. 
                              type: string
                            color:
                              description: >-
                                The notification's icon color in `#rrggbb`
                                format.
                              type: string
                            click_action:
                              description: >-
                                The action that occurs when a user taps on the
                                notification. Launches an activity with a
                                matching intent filter when a person taps the
                                notification.
                              type: string
                            body_loc_key:
                              description: >-
                                The key to the body string in the app's string
                                resources that you want to use to localize the
                                body text to the user's current localization.
                                See [String
                                Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                for more information.
                              type: string
                            body_loc_arg:
                              description: >-
                                Variable string values used in place of the
                                format specifiers in `body_loc_key` to localize
                                the body text to the user's current
                                localization. See Formatting and Styling for
                                more information.
                              type: string
                            title_loc_key:
                              description: >-
                                The key to the title string in the app's string
                                resources that you want to use to localize the
                                title text to the user's current localization.
                                See [String
                                Resources](https://developer.android.com/guide/topics/resources/string-resource/)
                                for more information.
                              type: string
                            title_loc_arg:
                              description: >-
                                Variable string values used in place of the
                                format specifiers in `title_loc_key` to localize
                                the title text to the user's current
                                localization. See Formatting and Styling for
                                more information.
                              type: string
    iosSharedOptions:
      description: A push payload intended for an iOS device.
      type: object
      properties:
        alert:
          oneOf:
            - title: Simple alert
              description: A simple alert message.
              type: string
            - title: Complex alert
              type: object
              properties:
                title:
                  description: The title of your push notification.
                  type: string
                body:
                  description: The body of your push notification.
                  type: string
                subtitle:
                  description: >-
                    Additional information that explains the purpose of the
                    notification.
                  type: string
                launch-image:
                  description: >-
                    The name of the launch image file you want to display. When
                    a user launches your app, they'll see this image or
                    storyboard file rather than your app’s normal launch image.
                  type: string
                title-loc-key:
                  description: >-
                    The key for a localized title string in your app’s
                    Localizable.strings files.
                  type: string
                title-loc-args:
                  description: >-
                    An array of replacement value strings for variables in your
                    title string. Each %@ character in the title-loc-key is
                    replaced by a value from this array, in the order they
                    appear in the title string.
                  type: array
                  items:
                    type: string
                subtitle-loc-key:
                  description: >-
                    The key for a localized subtitle string in your app’s
                    Localizable.strings file.
                  type: string
                subtitle-loc-args:
                  description: >-
                    An array of replacement value strings for variables in your
                    subtitle string. Each %@ character in the subtitle-loc-key
                    is replaced by a value from this array, in the order they
                    appear in the subtitle string.
                  type: array
                  items:
                    type: string
                loc-key:
                  description: >-
                    The key for a localized message string in your app’s
                    Localizable.strings file.
                  type: string
                loc-args:
                  description: >-
                    An array of replacement value strings for variables in your
                    message text. Each %@ character in the loc-key is replaced
                    by a value from this array, in the order they appear in the
                    message body.
                  type: array
                  items:
                    type: string
        badge:
          description: >-
            The number you want to display on your app's icon. Set to 0 to
            remove the current badge, if any.
          type: integer
        sound:
          oneOf:
            - title: Regular alert
              description: >-
                The name of a sound file in your app’s main bundle or in the
                Library/Sounds folder of your app’s container directory. Use
                “default” to play the system sound. For critical alerts, you'll
                pass an object instead.
              type: string
            - title: Critical alert
              type: object
              properties:
                critical:
                  description: 1 indicates critical. 0 is not critical.
                  type: integer
                name:
                  description: >-
                    The name of a sound file in your app’s main bundle or in the
                    Library/Sounds folder of your app’s container directory. Use
                    “default” to play the system sound.
                  type: string
                volume:
                  description: >-
                    The volume for a critical alert between 0 and 1, where 0 is
                    silent and 1 is full volume.
                  type: number
        thread-id:
          description: An identifier to group related notifications.
          type: string
        category:
          description: >-
            The notification’s type. This string must correspond to the
            identifier of one of the `UNNotificationCategory` objects you
            register at launch time.
          type: string
        content-available:
          description: >-
            The background notification flag. Use `1` without an `alert` to
            perform a silent update. `0` indicates a normal push notification.
          type: integer
        mutable-content:
          description: >-
            The notification service app extension flag. If the value is 1, your
            notification is passed to your notification service app extension
            before delivery. Use your extension to modify the notification’s
            content.
          type: integer
        target-content-id:
          description: The identifier of the window brought forward.
          type: string
        interruption-level:
          description: Indicates the importance and delivery timing of a notification.
          type: string
          enum:
            - passive
            - active
            - time-sensitive
            - critical
        relevance-score:
          description: >-
            A number between 0 and 1. The highest score is considered the "most
            relevant"  and is featured in the notification summary.
          type: number
    fcmIosWithSdk:
      type: object
      required:
        - message
      properties:
        message:
          description: The base object for all FCM payloads.
          type: object
          required:
            - apns
          properties:
            apns:
              description: >-
                Defines a payload for iOS devices sent through Firebase Cloud
                Messaging (FCM).
              type: object
              required:
                - payload
              properties:
                headers:
                  description: >-
                    Headers defined by [Apple's payload
                    reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns)
                    that you want to pass through FCM.
                  type: object
                payload:
                  description: Contains a push payload.
                  type: object
                  properties:
                    CIO:
                      description: >-
                        Contains properties interpreted by the Customer.io iOS
                        SDK.
                      type: object
                      required:
                        - push
                      properties:
                        push:
                          description: A push payload for the iOS SDK.
                          type: object
                          properties:
                            title:
                              description: The title of your push notification.
                              type: string
                            body:
                              description: The body of your push notification.
                              type: string
                            link:
                              description: >-
                                A deep link (to a page in your app), or a link
                                to a web page.
                              type: string
                            image:
                              description: >-
                                The URL of an HTTPS image that you want to use
                                for your message.
                              type: string
                    aps:
                      description: A push payload intended for an iOS device.
                      type: object
                      properties:
                        alert:
                          oneOf:
                            - title: Simple alert
                              description: A simple alert message.
                              type: string
                            - title: Complex alert
                              type: object
                              properties:
                                title:
                                  description: The title of your push notification.
                                  type: string
                                body:
                                  description: The body of your push notification.
                                  type: string
                                subtitle:
                                  description: >-
                                    Additional information that explains the
                                    purpose of the notification.
                                  type: string
                                launch-image:
                                  description: >-
                                    The name of the launch image file you want
                                    to display. When a user launches your app,
                                    they'll see this image or storyboard file
                                    rather than your app’s normal launch image.
                                  type: string
                                title-loc-key:
                                  description: >-
                                    The key for a localized title string in your
                                    app’s Localizable.strings files.
                                  type: string
                                title-loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your title string. Each %@
                                    character in the title-loc-key is replaced
                                    by a value from this array, in the order
                                    they appear in the title string.
                                  type: array
                                  items:
                                    type: string
                                subtitle-loc-key:
                                  description: >-
                                    The key for a localized subtitle string in
                                    your app’s Localizable.strings file.
                                  type: string
                                subtitle-loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your subtitle string. Each %@
                                    character in the subtitle-loc-key is
                                    replaced by a value from this array, in the
                                    order they appear in the subtitle string.
                                  type: array
                                  items:
                                    type: string
                                loc-key:
                                  description: >-
                                    The key for a localized message string in
                                    your app’s Localizable.strings file.
                                  type: string
                                loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your message text. Each %@
                                    character in the loc-key is replaced by a
                                    value from this array, in the order they
                                    appear in the message body.
                                  type: array
                                  items:
                                    type: string
                        badge:
                          description: >-
                            The number you want to display on your app's icon.
                            Set to 0 to remove the current badge, if any.
                          type: integer
                        sound:
                          oneOf:
                            - title: Regular alert
                              description: >-
                                The name of a sound file in your app’s main
                                bundle or in the Library/Sounds folder of your
                                app’s container directory. Use “default” to play
                                the system sound. For critical alerts, you'll
                                pass an object instead.
                              type: string
                            - title: Critical alert
                              type: object
                              properties:
                                critical:
                                  description: 1 indicates critical. 0 is not critical.
                                  type: integer
                                name:
                                  description: >-
                                    The name of a sound file in your app’s main
                                    bundle or in the Library/Sounds folder of
                                    your app’s container directory. Use
                                    “default” to play the system sound.
                                  type: string
                                volume:
                                  description: >-
                                    The volume for a critical alert between 0
                                    and 1, where 0 is silent and 1 is full
                                    volume.
                                  type: number
                        thread-id:
                          description: An identifier to group related notifications.
                          type: string
                        category:
                          description: >-
                            The notification’s type. This string must correspond
                            to the identifier of one of the
                            `UNNotificationCategory` objects you register at
                            launch time.
                          type: string
                        content-available:
                          description: >-
                            The background notification flag. Use `1` without an
                            `alert` to perform a silent update. `0` indicates a
                            normal push notification.
                          type: integer
                        mutable-content:
                          description: >-
                            The notification service app extension flag. If the
                            value is 1, your notification is passed to your
                            notification service app extension before delivery.
                            Use your extension to modify the notification’s
                            content.
                          type: integer
                        target-content-id:
                          description: The identifier of the window brought forward.
                          type: string
                        interruption-level:
                          description: >-
                            Indicates the importance and delivery timing of a
                            notification.
                          type: string
                          enum:
                            - passive
                            - active
                            - time-sensitive
                            - critical
                        relevance-score:
                          description: >-
                            A number between 0 and 1. The highest score is
                            considered the "most relevant"  and is featured in
                            the notification summary.
                          type: number
                  additionalProperties:
                    description: >-
                      Additional properties that you've set up your app to
                      interpret outside of the Customer.io SDK.
                    x-additionalPropertiesName: Custom key-value pairs
    fcmIosWithoutSdk:
      type: object
      required:
        - message
      properties:
        message:
          description: The base object for all Firebase payloads.
          type: object
          required:
            - apns
          properties:
            apns:
              description: Defines a push notification for iOS devices.
              type: object
              required:
                - payload
              properties:
                headers:
                  description: >-
                    Headers defined by [Apple's payload
                    reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns)
                    that you want to pass through FCM.
                  type: object
                payload:
                  type: object
                  properties:
                    aps:
                      description: A push payload intended for an iOS device.
                      type: object
                      properties:
                        alert:
                          oneOf:
                            - title: Simple alert
                              description: A simple alert message.
                              type: string
                            - title: Complex alert
                              type: object
                              properties:
                                title:
                                  description: The title of your push notification.
                                  type: string
                                body:
                                  description: The body of your push notification.
                                  type: string
                                subtitle:
                                  description: >-
                                    Additional information that explains the
                                    purpose of the notification.
                                  type: string
                                launch-image:
                                  description: >-
                                    The name of the launch image file you want
                                    to display. When a user launches your app,
                                    they'll see this image or storyboard file
                                    rather than your app’s normal launch image.
                                  type: string
                                title-loc-key:
                                  description: >-
                                    The key for a localized title string in your
                                    app’s Localizable.strings files.
                                  type: string
                                title-loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your title string. Each %@
                                    character in the title-loc-key is replaced
                                    by a value from this array, in the order
                                    they appear in the title string.
                                  type: array
                                  items:
                                    type: string
                                subtitle-loc-key:
                                  description: >-
                                    The key for a localized subtitle string in
                                    your app’s Localizable.strings file.
                                  type: string
                                subtitle-loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your subtitle string. Each %@
                                    character in the subtitle-loc-key is
                                    replaced by a value from this array, in the
                                    order they appear in the subtitle string.
                                  type: array
                                  items:
                                    type: string
                                loc-key:
                                  description: >-
                                    The key for a localized message string in
                                    your app’s Localizable.strings file.
                                  type: string
                                loc-args:
                                  description: >-
                                    An array of replacement value strings for
                                    variables in your message text. Each %@
                                    character in the loc-key is replaced by a
                                    value from this array, in the order they
                                    appear in the message body.
                                  type: array
                                  items:
                                    type: string
                        badge:
                          description: >-
                            The number you want to display on your app's icon.
                            Set to 0 to remove the current badge, if any.
                          type: integer
                        sound:
                          oneOf:
                            - title: Regular alert
                              description: >-
                                The name of a sound file in your app’s main
                                bundle or in the Library/Sounds folder of your
                                app’s container directory. Use “default” to play
                                the system sound. For critical alerts, you'll
                                pass an object instead.
                              type: string
                            - title: Critical alert
                              type: object
                              properties:
                                critical:
                                  description: 1 indicates critical. 0 is not critical.
                                  type: integer
                                name:
                                  description: >-
                                    The name of a sound file in your app’s main
                                    bundle or in the Library/Sounds folder of
                                    your app’s container directory. Use
                                    “default” to play the system sound.
                                  type: string
                                volume:
                                  description: >-
                                    The volume for a critical alert between 0
                                    and 1, where 0 is silent and 1 is full
                                    volume.
                                  type: number
                        thread-id:
                          description: An identifier to group related notifications.
                          type: string
                        category:
                          description: >-
                            The notification’s type. This string must correspond
                            to the identifier of one of the
                            `UNNotificationCategory` objects you register at
                            launch time.
                          type: string
                        content-available:
                          description: >-
                            The background notification flag. Use `1` without an
                            `alert` to perform a silent update. `0` indicates a
                            normal push notification.
                          type: integer
                        mutable-content:
                          description: >-
                            The notification service app extension flag. If the
                            value is 1, your notification is passed to your
                            notification service app extension before delivery.
                            Use your extension to modify the notification’s
                            content.
                          type: integer
                        target-content-id:
                          description: The identifier of the window brought forward.
                          type: string
                        interruption-level:
                          description: >-
                            Indicates the importance and delivery timing of a
                            notification.
                          type: string
                          enum:
                            - passive
                            - active
                            - time-sensitive
                            - critical
                        relevance-score:
                          description: >-
                            A number between 0 and 1. The highest score is
                            considered the "most relevant"  and is featured in
                            the notification summary.
                          type: number
    apsBasicPush:
      type: object
      required:
        - aps
      properties:
        aps:
          description: A push payload intended for an iOS device.
          type: object
          required:
            - alert
          properties:
            alert:
              description: An object containing the push title and body
              type: object
              required:
                - body
              properties:
                title:
                  description: The title of your push notification.
                  type: string
                body:
                  description: The body of your push notification.
                  type: string
        CIO:
          description: Contains options supported by the Customer.io SDK.
          type: object
          required:
            - push
          properties:
            push:
              description: Describes push notification options supported by the CIO SDK.
              type: object
              properties:
                link:
                  description: >-
                    A deep link (to a page in your app), or a link to a web
                    page.
                  type: string
                image:
                  description: >-
                    The URL of an HTTPS image that you want to use for your
                    message.
                  type: string
    apnsWithoutSdk:
      type: object
      properties:
        aps:
          description: A push payload intended for an iOS device.
          type: object
          properties:
            alert:
              oneOf:
                - title: Simple alert
                  description: A simple alert message.
                  type: string
                - title: Complex alert
                  type: object
                  properties:
                    title:
                      description: The title of your push notification.
                      type: string
                    body:
                      description: The body of your push notification.
                      type: string
                    subtitle:
                      description: >-
                        Additional information that explains the purpose of the
                        notification.
                      type: string
                    launch-image:
                      description: >-
                        The name of the launch image file you want to display.
                        When a user launches your app, they'll see this image or
                        storyboard file rather than your app’s normal launch
                        image.
                      type: string
                    title-loc-key:
                      description: >-
                        The key for a localized title string in your app’s
                        Localizable.strings files.
                      type: string
                    title-loc-args:
                      description: >-
                        An array of replacement value strings for variables in
                        your title string. Each %@ character in the
                        title-loc-key is replaced by a value from this array, in
                        the order they appear in the title string.
                      type: array
                      items:
                        type: string
                    subtitle-loc-key:
                      description: >-
                        The key for a localized subtitle string in your app’s
                        Localizable.strings file.
                      type: string
                    subtitle-loc-args:
                      description: >-
                        An array of replacement value strings for variables in
                        your subtitle string. Each %@ character in the
                        subtitle-loc-key is replaced by a value from this array,
                        in the order they appear in the subtitle string.
                      type: array
                      items:
                        type: string
                    loc-key:
                      description: >-
                        The key for a localized message string in your app’s
                        Localizable.strings file.
                      type: string
                    loc-args:
                      description: >-
                        An array of replacement value strings for variables in
                        your message text. Each %@ character in the loc-key is
                        replaced by a value from this array, in the order they
                        appear in the message body.
                      type: array
                      items:
                        type: string
            badge:
              description: >-
                The number you want to display on your app's icon. Set to 0 to
                remove the current badge, if any.
              type: integer
            sound:
              oneOf:
                - title: Regular alert
                  description: >-
                    The name of a sound file in your app’s main bundle or in the
                    Library/Sounds folder of your app’s container directory. Use
                    “default” to play the system sound. For critical alerts,
                    you'll pass an object instead.
                  type: string
                - title: Critical alert
                  type: object
                  properties:
                    critical:
                      description: 1 indicates critical. 0 is not critical.
                      type: integer
                    name:
                      description: >-
                        The name of a sound file in your app’s main bundle or in
                        the Library/Sounds folder of your app’s container
                        directory. Use “default” to play the system sound.
                      type: string
                    volume:
                      description: >-
                        The volume for a critical alert between 0 and 1, where 0
                        is silent and 1 is full volume.
                      type: number
            thread-id:
              description: An identifier to group related notifications.
              type: string
            category:
              description: >-
                The notification’s type. This string must correspond to the
                identifier of one of the `UNNotificationCategory` objects you
                register at launch time.
              type: string
            content-available:
              description: >-
                The background notification flag. Use `1` without an `alert` to
                perform a silent update. `0` indicates a normal push
                notification.
              type: integer
            mutable-content:
              description: >-
                The notification service app extension flag. If the value is 1,
                your notification is passed to your notification service app
                extension before delivery. Use your extension to modify the
                notification’s content.
              type: integer
            target-content-id:
              description: The identifier of the window brought forward.
              type: string
            interruption-level:
              description: Indicates the importance and delivery timing of a notification.
              type: string
              enum:
                - passive
                - active
                - time-sensitive
                - critical
            relevance-score:
              description: >-
                A number between 0 and 1. The highest score is considered the
                "most relevant"  and is featured in the notification summary.
              type: number
    iosFcmAndApns:
      description: >-
        Your payload changes depending on whether you send to iOS devices
        through Google's Firebase Cloud Messaging (FCM) or Apple's Push
        Notification service (APNs).
      oneOf:
        - title: FCM
          type: object
          required:
            - message
          properties:
            message:
              description: The base object for all FCM payloads.
              type: object
              required:
                - apns
              properties:
                apns:
                  description: >-
                    Defines a payload for iOS devices sent through Firebase
                    Cloud Messaging (FCM).
                  type: object
                  required:
                    - payload
                  properties:
                    headers:
                      description: >-
                        Headers defined by [Apple's payload
                        reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns)
                        that you want to pass through FCM.
                      type: object
                    payload:
                      description: Contains a push payload.
                      type: object
                      properties:
                        CIO:
                          description: >-
                            Contains properties interpreted by the Customer.io
                            iOS SDK.
                          type: object
                          required:
                            - push
                          properties:
                            push:
                              description: A push payload for the iOS SDK.
                              type: object
                              properties:
                                title:
                                  description: The title of your push notification.
                                  type: string
                                body:
                                  description: The body of your push notification.
                                  type: string
                                link:
                                  description: >-
                                    A deep link (to a page in your app), or a
                                    link to a web page.
                                  type: string
                                image:
                                  description: >-
                                    The URL of an HTTPS image that you want to
                                    use for your message.
                                  type: string
                        aps:
                          description: A push payload intended for an iOS device.
                          type: object
                          properties:
                            alert:
                              oneOf:
                                - title: Simple alert
                                  description: A simple alert message.
                                  type: string
                                - title: Complex alert
                                  type: object
                                  properties:
                                    title:
                                      description: The title of your push notification.
                                      type: string
                                    body:
                                      description: The body of your push notification.
                                      type: string
                                    subtitle:
                                      description: >-
                                        Additional information that explains the
                                        purpose of the notification.
                                      type: string
                                    launch-image:
                                      description: >-
                                        The name of the launch image file you
                                        want to display. When a user launches
                                        your app, they'll see this image or
                                        storyboard file rather than your app’s
                                        normal launch image.
                                      type: string
                                    title-loc-key:
                                      description: >-
                                        The key for a localized title string in
                                        your app’s Localizable.strings files.
                                      type: string
                                    title-loc-args:
                                      description: >-
                                        An array of replacement value strings
                                        for variables in your title string. Each
                                        %@ character in the title-loc-key is
                                        replaced by a value from this array, in
                                        the order they appear in the title
                                        string.
                                      type: array
                                      items:
                                        type: string
                                    subtitle-loc-key:
                                      description: >-
                                        The key for a localized subtitle string
                                        in your app’s Localizable.strings file.
                                      type: string
                                    subtitle-loc-args:
                                      description: >-
                                        An array of replacement value strings
                                        for variables in your subtitle string.
                                        Each %@ character in the
                                        subtitle-loc-key is replaced by a value
                                        from this array, in the order they
                                        appear in the subtitle string.
                                      type: array
                                      items:
                                        type: string
                                    loc-key:
                                      description: >-
                                        The key for a localized message string
                                        in your app’s Localizable.strings file.
                                      type: string
                                    loc-args:
                                      description: >-
                                        An array of replacement value strings
                                        for variables in your message text. Each
                                        %@ character in the loc-key is replaced
                                        by a value from this array, in the order
                                        they appear in the message body.
                                      type: array
                                      items:
                                        type: string
                            badge:
                              description: >-
                                The number you want to display on your app's
                                icon. Set to 0 to remove the current badge, if
                                any.
                              type: integer
                            sound:
                              oneOf:
                                - title: Regular alert
                                  description: >-
                                    The name of a sound file in your app’s main
                                    bundle or in the Library/Sounds folder of
                                    your app’s container directory. Use
                                    “default” to play the system sound. For
                                    critical alerts, you'll pass an object
                                    instead.
                                  type: string
                                - title: Critical alert
                                  type: object
                                  properties:
                                    critical:
                                      description: 1 indicates critical. 0 is not critical.
                                      type: integer
                                    name:
                                      description: >-
                                        The name of a sound file in your app’s
                                        main bundle or in the Library/Sounds
                                        folder of your app’s container
                                        directory. Use “default” to play the
                                        system sound.
                                      type: string
                                    volume:
                                      description: >-
                                        The volume for a critical alert between
                                        0 and 1, where 0 is silent and 1 is full
                                        volume.
                                      type: number
                            thread-id:
                              description: An identifier to group related notifications.
                              type: string
                            category:
                              description: >-
                                The notification’s type. This string must
                                correspond to the identifier of one of the
                                `UNNotificationCategory` objects you register at
                                launch time.
                              type: string
                            content-available:
                              description: >-
                                The background notification flag. Use `1`
                                without an `alert` to perform a silent update.
                                `0` indicates a normal push notification.
                              type: integer
                            mutable-content:
                              description: >-
                                The notification service app extension flag. If
                                the value is 1, your notification is passed to
                                your notification service app extension before
                                delivery. Use your extension to modify the
                                notification’s content.
                              type: integer
                            target-content-id:
                              description: The identifier of the window brought forward.
                              type: string
                            interruption-level:
                              description: >-
                                Indicates the importance and delivery timing of
                                a notification.
                              type: string
                              enum:
                                - passive
                                - active
                                - time-sensitive
                                - critical
                            relevance-score:
                              description: >-
                                A number between 0 and 1. The highest score is
                                considered the "most relevant"  and is featured
                                in the notification summary.
                              type: number
                      additionalProperties:
                        description: >-
                          Additional properties that you've set up your app to
                          interpret outside of the Customer.io SDK.
                        x-additionalPropertiesName: Custom key-value pairs
        - title: APNS
          type: object
          properties:
            CIO:
              description: Contains options supported by the Customer.io SDK.
              type: object
              required:
                - push
              properties:
                push:
                  description: >-
                    Describes push notification options supported by the CIO
                    SDK.
                  type: object
                  properties:
                    link:
                      description: >-
                        A deep link (to a page in your app), or a link to a web
                        page.
                      type: string
                    image:
                      description: >-
                        The URL of an HTTPS image that you want to use for your
                        message.
                      type: string
            aps:
              description: A push payload intended for an iOS device.
              type: object
              properties:
                alert:
                  oneOf:
                    - title: Simple alert
                      description: A simple alert message.
                      type: string
                    - title: Complex alert
                      type: object
                      properties:
                        title:
                          description: The title of your push notification.
                          type: string
                        body:
                          description: The body of your push notification.
                          type: string
                        subtitle:
                          description: >-
                            Additional information that explains the purpose of
                            the notification.
                          type: string
                        launch-image:
                          description: >-
                            The name of the launch image file you want to
                            display. When a user launches your app, they'll see
                            this image or storyboard file rather than your app’s
                            normal launch image.
                          type: string
                        title-loc-key:
                          description: >-
                            The key for a localized title string in your app’s
                            Localizable.strings files.
                          type: string
                        title-loc-args:
                          description: >-
                            An array of replacement value strings for variables
                            in your title string. Each %@ character in the
                            title-loc-key is replaced by a value from this
                            array, in the order they appear in the title string.
                          type: array
                          items:
                            type: string
                        subtitle-loc-key:
                          description: >-
                            The key for a localized subtitle string in your
                            app’s Localizable.strings file.
                          type: string
                        subtitle-loc-args:
                          description: >-
                            An array of replacement value strings for variables
                            in your subtitle string. Each %@ character in the
                            subtitle-loc-key is replaced by a value from this
                            array, in the order they appear in the subtitle
                            string.
                          type: array
                          items:
                            type: string
                        loc-key:
                          description: >-
                            The key for a localized message string in your app’s
                            Localizable.strings file.
                          type: string
                        loc-args:
                          description: >-
                            An array of replacement value strings for variables
                            in your message text. Each %@ character in the
                            loc-key is replaced by a value from this array, in
                            the order they appear in the message body.
                          type: array
                          items:
                            type: string
                badge:
                  description: >-
                    The number you want to display on your app's icon. Set to 0
                    to remove the current badge, if any.
                  type: integer
                sound:
                  oneOf:
                    - title: Regular alert
                      description: >-
                        The name of a sound file in your app’s main bundle or in
                        the Library/Sounds folder of your app’s container
                        directory. Use “default” to play the system sound. For
                        critical alerts, you'll pass an object instead.
                      type: string
                    - title: Critical alert
                      type: object
                      properties:
                        critical:
                          description: 1 indicates critical. 0 is not critical.
                          type: integer
                        name:
                          description: >-
                            The name of a sound file in your app’s main bundle
                            or in the Library/Sounds folder of your app’s
                            container directory. Use “default” to play the
                            system sound.
                          type: string
                        volume:
                          description: >-
                            The volume for a critical alert between 0 and 1,
                            where 0 is silent and 1 is full volume.
                          type: number
                thread-id:
                  description: An identifier to group related notifications.
                  type: string
                category:
                  description: >-
                    The notification’s type. This string must correspond to the
                    identifier of one of the `UNNotificationCategory` objects
                    you register at launch time.
                  type: string
                content-available:
                  description: >-
                    The background notification flag. Use `1` without an `alert`
                    to perform a silent update. `0` indicates a normal push
                    notification.
                  type: integer
                mutable-content:
                  description: >-
                    The notification service app extension flag. If the value is
                    1, your notification is passed to your notification service
                    app extension before delivery. Use your extension to modify
                    the notification’s content.
                  type: integer
                target-content-id:
                  description: The identifier of the window brought forward.
                  type: string
                interruption-level:
                  description: >-
                    Indicates the importance and delivery timing of a
                    notification.
                  type: string
                  enum:
                    - passive
                    - active
                    - time-sensitive
                    - critical
                relevance-score:
                  description: >-
                    A number between 0 and 1. The highest score is considered
                    the "most relevant"  and is featured in the notification
                    summary.
                  type: number
    apnsWithSdk:
      type: object
      properties:
        CIO:
          description: Contains options supported by the Customer.io SDK.
          type: object
          required:
            - push
          properties:
            push:
              description: Describes push notification options supported by the CIO SDK.
              type: object
              properties:
                link:
                  description: >-
                    A deep link (to a page in your app), or a link to a web
                    page.
                  type: string
                image:
                  description: >-
                    The URL of an HTTPS image that you want to use for your
                    message.
                  type: string
        aps:
          description: A push payload intended for an iOS device.
          type: object
          properties:
            alert:
              oneOf:
                - title: Simple alert
                  description: A simple alert message.
                  type: string
                - title: Complex alert
                  type: object
                  properties:
                    title:
                      description: The title of your push notification.
                      type: string
                    body:
                      description: The body of your push notification.
                      type: string
                    subtitle:
                      description: >-
                        Additional information that explains the purpose of the
                        notification.
                      type: string
                    launch-image:
                      description: >-
                        The name of the launch image file you want to display.
                        When a user launches your app, they'll see this image or
                        storyboard file rather than your app’s normal launch
                        image.
                      type: string
                    title-loc-key:
                      description: >-
                        The key for a localized title string in your app’s
                        Localizable.strings files.
                      type: string
                    title-loc-args:
                      description: >-
                        An array of replacement value strings for variables in
                        your title string. Each %@ character in the
                        title-loc-key is replaced by a value from this array, in
                        the order they appear in the title string.
                      type: array
                      items:
                        type: string
                    subtitle-loc-key:
                      description: >-
                        The key for a localized subtitle string in your app’s
                        Localizable.strings file.
                      type: string
                    subtitle-loc-args:
                      description: >-
                        An array of replacement value strings for variables in
                        your subtitle string. Each %@ character in the
                        subtitle-loc-key is replaced by a value from this array,
                        in the order they appear in the subtitle string.
                      type: array
                      items:
                        type: string
                    loc-key:
                      description: >-
                        The key for a localized message string in your app’s
                        Localizable.strings file.
                      type: string
                    loc-args:
                      description: >-
                        An array of replacement value strings for variables in
                        your message text. Each %@ character in the loc-key is
                        replaced by a value from this array, in the order they
                        appear in the message body.
                      type: array
                      items:
                        type: string
            badge:
              description: >-
                The number you want to display on your app's icon. Set to 0 to
                remove the current badge, if any.
              type: integer
            sound:
              oneOf:
                - title: Regular alert
                  description: >-
                    The name of a sound file in your app’s main bundle or in the
                    Library/Sounds folder of your app’s container directory. Use
                    “default” to play the system sound. For critical alerts,
                    you'll pass an object instead.
                  type: string
                - title: Critical alert
                  type: object
                  properties:
                    critical:
                      description: 1 indicates critical. 0 is not critical.
                      type: integer
                    name:
                      description: >-
                        The name of a sound file in your app’s main bundle or in
                        the Library/Sounds folder of your app’s container
                        directory. Use “default” to play the system sound.
                      type: string
                    volume:
                      description: >-
                        The volume for a critical alert between 0 and 1, where 0
                        is silent and 1 is full volume.
                      type: number
            thread-id:
              description: An identifier to group related notifications.
              type: string
            category:
              description: >-
                The notification’s type. This string must correspond to the
                identifier of one of the `UNNotificationCategory` objects you
                register at launch time.
              type: string
            content-available:
              description: >-
                The background notification flag. Use `1` without an `alert` to
                perform a silent update. `0` indicates a normal push
                notification.
              type: integer
            mutable-content:
              description: >-
                The notification service app extension flag. If the value is 1,
                your notification is passed to your notification service app
                extension before delivery. Use your extension to modify the
                notification’s content.
              type: integer
            target-content-id:
              description: The identifier of the window brought forward.
              type: string
            interruption-level:
              description: Indicates the importance and delivery timing of a notification.
              type: string
              enum:
                - passive
                - active
                - time-sensitive
                - critical
            relevance-score:
              description: >-
                A number between 0 and 1. The highest score is considered the
                "most relevant"  and is featured in the notification summary.
              type: number
    widgetColor:
      description: >-
        The color you want to use for this content. You can only set values here
        that are defined under [**Content** > **In-App
        Messages**](https://fly.customer.io/env/last/in-app-messages).
      type: string
    widgetRadius:
      description: >-
        Sets the radius of corners for an item in pixels, similar to the
        `border-radius` CSS property.
      type: integer
    widgetHeight:
      description: >-
        The height of the component in pixels, if you want to constrain it. If
        you don't set a height or width, we'll scale your content to fit your
        message or container.
      type: integer
    widgetWidth:
      description: >-
        The width of the component in pixels, if you want to constrain it. If
        you don't set a height or width, we'll scale your content to fit your
        message or container.
      type: integer
    widgetComponents:
      description: >-
        An array of child components that you want to make available inside this
        widget.
      type: array
      items:
        type: object
    widgetMainAxisAlignment:
      description: The mainAxisAlignment property supports the following options.
      type: string
      enum:
        - start
        - end
        - spaceBetween
        - spaceAround
        - spaceEvenly
    widgetCrossAxisAlignment:
      description: The crossAxisAlignment property supports the following options
      type: string
      enum:
        - center
        - start
        - end
        - stretch
        - baseline
    textWidget:
      description: Displays text in your message.
      type: object
      required:
        - type
        - text
      properties:
        type:
          description: Defines the widget type.
          type: string
          enum:
            - textWidget
        text:
          description: The text you want to display.
          type: string
          example: $person.name
        style:
          description: >-
            The style of text you want to display. You can only set values here
            that are defined under [**Content** > **In-App
            Messages**](https://fly.customer.io/env/last/in-app-messages).
          type: string
        color:
          description: >-
            The color you want to use for this content. You can only set values
            here that are defined under [**Content** > **In-App
            Messages**](https://fly.customer.io/env/last/in-app-messages).
          type: string
        textAlign:
          description: How you want to align this text.
          type: string
          enum:
            - center
            - right
            - left
            - start
            - end
            - justify
        maxLines:
          description: >-
            The maximum lines of text you want to display. Text over this limit
            is controlled by the `overflow` property. If unset, the message
            displays an unlimited number of lines.
          type: integer
        overflow:
          description: >-
            Determines how to handle text that overflows the `maxLines` limit
            (if set). By default, we cut off overflowing text with ellipsis
            (`...`).
          type: string
          enum:
            - ellipsis
            - fade
            - clip
    imageWidget:
      description: >-
        Displays an image. You can provide the URL of an image. Or, if you use
        the template designer, you can upload an image and host it directly.
      type: object
      required:
        - type
        - image
      properties:
        type:
          description: Defines the widget type.
          type: string
          enum:
            - imageWidget
        image:
          description: The URL of the image that you want ot use in your message.
          example: $person.imageUrl
        fit:
          description: Determines how the image fits your message. Defaults to `cover`.
          type: string
          enum:
            - none
            - fitWidth
            - cover
            - contain
            - scaleDown
            - fill
            - fitHeight
        height:
          description: >-
            The height of the component in pixels, if you want to constrain it.
            If you don't set a height or width, we'll scale your content to fit
            your message or container.
          type: integer
        width:
          description: >-
            The width of the component in pixels, if you want to constrain it.
            If you don't set a height or width, we'll scale your content to fit
            your message or container.
          type: integer
        cornerRadius:
          description: >-
            Sets the radius of corners for an item in pixels, similar to the
            `border-radius` CSS property.
          type: integer
        fadeInDuration:
          description: >-
            The durration for the image to fade in, in milliseconds, similar to
            the `fadeIn` CSS transition property.
          type: integer
    iconWidget:
      description: >-
        Displays an icon from an icon font that you've loaded into your app or
        project. You must load your icon font in the assets section of your app
        configuration.
      type: object
      required:
        - type
        - color
        - value
      properties:
        type:
          description: Defines the widget type.
          type: string
          enum:
            - iconWidget
        color:
          description: >-
            The color you want to use for this content. You can only set values
            here that are defined under [**Content** > **In-App
            Messages**](https://fly.customer.io/env/last/in-app-messages).
          type: string
        font:
          description: The icon font you want to use.
        size:
          description: The pixel size of the icon.
          type: integer
        value:
          description: >-
            The value of the icon that you want to use. For example, for
            font-awesome, you'd use the name of the icon.
          type: string
    blockWidget:
      description: A widget that provides visual design for one or more child components.
      type: object
      properties:
        components:
          description: >-
            An array of child components that you want to make available inside
            this widget.
          type: array
          items:
            type: object
        type:
          description: Defines the widget type.
          type: string
          enum:
            - blockWidget
        safeInsets:
          description: >-
            Based on the env `safe-area-inset-*` CSS properties. Set to true to
            ensure that the block can't overflow the defined screen or the
            defined area of your message. Defaults to `false`.
          type: boolean
          default: false
        padding:
          description: >-
            Defines padding for the block, based on the values set under
            *Branding* > *Padding*. As with the CSS `padding` property, values
            in the array represent top, right, bottom, and left padding.
          type: array
          maxItems: 4
          items:
            description: The padding label you set under *Branding* > *Padding*.
            type: string
        backgroundColor:
          description: >-
            The background color for your block. You must set a value defined
            under *Branding* > *Colors*.
          type: string
        borderColor:
          description: >-
            The border color for your block, if you set a border width greater
            than 0. You must set a value defined under *Branding* > *Colors*.
          type: string
        borderWidth:
          description: The width of the border for this block in pixels.
          type: integer
        borderRadius:
          description: >-
            Sets the radius of corners for an item in pixels, similar to the
            `border-radius` CSS property.
          type: integer
        height:
          description: >-
            The height of the component in pixels, if you want to constrain it.
            If you don't set a height or width, we'll scale your content to fit
            your message or container.
          type: integer
        backgroundImage:
          description: Set a background image for the block
          type: string
          example: $user.backgroundImage,
        flex:
          description: >-
            The single digit syntax for the CSS `flex` property. The value you
            use here determines the propotional amount of space the block
            consumes in a parent container.
          type: integer
    conditionalWidget:
      description: >-
        Set a true/false condition determining which content to show. Use a
        variable in your condition to populate the condition when you set up
        your message in Customer.io.
      type: object
      properties:
        type:
          description: Defines the widget type.
          type: string
          enum:
            - conditionalWidget
        condition:
          description: >-
            The condition you want to evaluate. You can evaluate a condition
            using `>`, `<`, `==` & `in` operators. If you don't use an operator,
            the condition checks if the property is null.
          type: string
        'true':
          description: The component you want to show when your condition is true.
          type: object
        'false':
          description: The component you want to show when your condition is false.
          type: object
    actionWidget:
      description: >-
        An action is either a link or a way to dismiss your message. The
        `behaviour` property determines how your app treats the action.
      type: object
      required:
        - type
        - component
        - action
      properties:
        type:
          description: Defines the widget type.
          type: string
          enum:
            - actionWidget
        action:
          description: >-
            The link or place you want to send a person. This is either a deep
            link in your app, a web address, a `mailto` link, or a way to close
            the message (`gist://close`).
          type: string
        behaviour:
          description: >
            * `push`: pushes a new route into the navigation stack.

            * `system`: offloads the action onto the operating system. Actions
            like `mailto:support@bourbon.sh` will open the default email client.

            * `back`: pops the navigation stack one step back.

            * `retain`: retain replaces the current view with a new route.
          type: string
          enum:
            - push
            - system
            - back
            - retain
        component:
          description: >-
            The component a person taps to perform the action defined in this
            widget.
          type: object
    fixedListWidget:
      description: Displays a series of components in a vertical list.
      type: object
      properties:
        components:
          description: >-
            An array of child components that you want to make available inside
            this widget.
          type: array
          items:
            type: object
        type:
          description: Defines the widget type.
          enum:
            - fixedListWidget
          type: string
        mainAxisAlignment:
          description: The mainAxisAlignment property supports the following options.
          type: string
          enum:
            - start
            - end
            - spaceBetween
            - spaceAround
            - spaceEvenly
        crossAxisAlignment:
          description: The crossAxisAlignment property supports the following options
          type: string
          enum:
            - center
            - start
            - end
            - stretch
            - baseline
    fixedHorizontalListWidget:
      description: >-
        Displays a series of components in a horizontal list, like if you want
        to put an image and text next to each other.
      type: object
      properties:
        components:
          description: >-
            An array of child components that you want to make available inside
            this widget.
          type: array
          items:
            type: object
        type:
          description: Defines the widget type.
          type: string
          enum:
            - fixedHorizontalListWidget
        mainAxisAlignment:
          description: The mainAxisAlignment property supports the following options.
          type: string
          enum:
            - start
            - end
            - spaceBetween
            - spaceAround
            - spaceEvenly
        crossAxisAlignment:
          description: The crossAxisAlignment property supports the following options
          type: string
          enum:
            - center
            - start
            - end
            - stretch
            - baseline
    fixedHorizontalScrollWidget:
      description: A series of components that you can scroll through, like a carousel.
      type: object
      properties:
        components:
          description: >-
            An array of child components that you want to make available inside
            this widget.
          type: array
          items:
            type: object
        type:
          description: Defines the widget type
          type: string
          enum:
            - fixedHorizontalListScrollWidget
        height:
          description: The height of the widget in pixels.
          type: integer
    fixedGridWidget:
      description: Used to layout an in-app message in a fixed grid.
      type: object
      required:
        - type
        - components
        - columns
      properties:
        components:
          description: >-
            An array of child components that you want to make available inside
            this widget.
          type: array
          items:
            type: object
        type:
          description: Defines the widget type.
          type: string
          enum:
            - fixedGridWidget
        itemPadding:
          description: The padding between items in your grid.
          type: string
        columns:
          description: The number of columns in your grid.
          type: integer
        childAspectRatio:
          description: The aspect ratio for items in the grid. Defaults to 1.0
          type: number
    inAppMessageEventDetail:
      description: An object containing message specific data depending on the event type.
      type: object
      properties:
        messageId:
          description: Identifier string of the in-app message.
          type: string
        deliveryId:
          description: >-
            Delivery Id for the corresponding in-app message (not present in
            test message).
          type: string
    inAppMessageOpenedEvent:
      description: >-
        Event object passed to the listener function when user is shown an
        in-app message.
      type: object
      properties:
        type:
          description: Defines the event type.
          type: string
          enum:
            - in-app:message-opened
        detail:
          description: >-
            An object containing message specific data depending on the event
            type.
          type: object
          properties:
            messageId:
              description: Identifier string of the in-app message.
              type: string
            deliveryId:
              description: >-
                Delivery Id for the corresponding in-app message (not present in
                test message).
              type: string
    inAppMessageDismissedEvent:
      description: >-
        Event object passed to the listener function when user dismisses an
        in-app message.
      type: object
      properties:
        type:
          description: Defines the event type.
          type: string
          enum:
            - in-app:message-dismissed
        detail:
          description: >-
            An object containing message specific data depending on the event
            type.
          type: object
          properties:
            messageId:
              description: Identifier string of the in-app message.
              type: string
            deliveryId:
              description: >-
                Delivery Id for the corresponding in-app message (not present in
                test message).
              type: string
    inAppMessageActionEvent:
      description: >-
        Event object passed to the listener function when user performs an
        action in the in-app message.
      type: object
      properties:
        type:
          description: Defines the event type.
          type: string
          enum:
            - in-app:message-action
        detail:
          type: object
          properties:
            messageId:
              description: Identifier string of the in-app message.
              type: string
            deliveryId:
              description: >-
                Delivery Id for the corresponding in-app message (not present in
                test message).
              type: string
            actionName:
              description: >-
                The name of the action specified when building the in-app
                message.
              type: string
            actionValue:
              description: The type of action that triggered the event.
              type: string
    inAppMessageErrorEvent:
      description: Event object passed to the listener function when an error occurs.
      type: object
      properties:
        type:
          description: Defines the event type.
          type: string
          enum:
            - in-app:message-error
        detail:
          description: >-
            An object containing message specific data depending on the event
            type.
          type: object
          properties:
            messageId:
              description: Identifier string of the in-app message.
              type: string
            deliveryId:
              description: >-
                Delivery Id for the corresponding in-app message (not present in
                test message).
              type: string
    errors:
      description: An array of errors, where each object represents a different error.
      type: array
      items:
        type: object
        properties:
          reason:
            description: The reason for the error.
            type: string
          field:
            description: The field containing the error.
            type: string
          message:
            description: A detailed description of the error in the offending field.
            type: string
    object_operations:
      title: Object
      oneOf:
        - title: identify
          description: >
            The `action` determines the type of operation you want to perform
            with an object. If `identifiers.object_id` does not exist, we'll
            create a new object; if it exists, we'll update the object
            accordingly.
          type: object
          allOf:
            - allOf:
                - type: object
                  required:
                    - identifiers
                  properties:
                    identifiers:
                      description: >-
                        Represents an individual object, where the
                        `object_type_id` represents the type of object and the
                        `object_id` is the individual identifier for the object.
                      type: object
                      required:
                        - object_type_id
                        - object_id
                      properties:
                        object_type_id:
                          description: >-
                            The object type an object belongs to—like
                            "Companies" or "Accounts". Object type IDs are
                            string-formatted integers that begin at `1` and
                            increment for each new type.
                          type: string
                          nullable: false
                          example: '1'
                        object_id:
                          description: >-
                            The unique identifier for an object. If you use an
                            `object_id` that already exists, we'll update the
                            object accordingly.
                          type: string
                          nullable: false
                          example: acme
                - type: object
                  required:
                    - type
                  properties:
                    type:
                      description: The operation modifies a single object—non person data.
                      type: string
                      enum:
                        - object
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Indicates that the operation will `identify` the the item of
                    the specified `type`.
                  type: string
                  enum:
                    - identify
                attributes:
                  description: >-
                    The data that belongs to the object. This is information you
                    might want to associate with people later (through
                    `cio_relationships`). Passing `null` or an empty string
                    removes the attribute from the object.
                  type: object
                cio_relationships:
                  description: >-
                    The people you want to associate with an object. Each object
                    in the array represents a person.
                  type: array
                  items:
                    type: object
                    properties:
                      identifiers:
                        oneOf:
                          - title: id
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of a customer profile, analogous to a
                                  "person" in the UI.
                                type: string
                                example: '42'
                          - title: email
                            type: object
                            properties:
                              email:
                                description: The email address of the customer.
                                type: string
                                example: test@example.com
                          - title: cio_id
                            type: object
                            properties:
                              cio_id:
                                description: >-
                                  A unique identifier set by Customer.io, used
                                  to reference a person if you want to update
                                  their identifiers.
                                type: string
                                example: a3000001
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                    example:
                      identifiers:
                        id: '42'
                      relationship_attributes:
                        role: admin
                        date_created: 1702480414
        - title: identify_anonymous
          description: >-
            The `identify_anonymous` action lets you relate an object to a
            person who hasn't yet identified themselves by anonymous_id. When
            you identify the person, their anonymous relationship will carry
            over to the identified profile.
          allOf:
            - allOf:
                - type: object
                  required:
                    - identifiers
                  properties:
                    identifiers:
                      description: >-
                        Represents an individual object, where the
                        `object_type_id` represents the type of object and the
                        `object_id` is the individual identifier for the object.
                      type: object
                      required:
                        - object_type_id
                        - object_id
                      properties:
                        object_type_id:
                          description: >-
                            The object type an object belongs to—like
                            "Companies" or "Accounts". Object type IDs are
                            string-formatted integers that begin at `1` and
                            increment for each new type.
                          type: string
                          nullable: false
                          example: '1'
                        object_id:
                          description: >-
                            The unique identifier for an object. If you use an
                            `object_id` that already exists, we'll update the
                            object accordingly.
                          type: string
                          nullable: false
                          example: acme
                - type: object
                  required:
                    - type
                  properties:
                    type:
                      description: The operation modifies a single object—non person data.
                      type: string
                      enum:
                        - object
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Indicates that the operation will `identify` the item of the
                    specified `type` and relate it to an `anonymous_id`.
                  type: string
                  enum:
                    - identify_anonymous
                attributes:
                  description: >-
                    The data that belongs to the object. This is information you
                    might want to associate with people later (through
                    `cio_relationships`). Passing `null` or an empty string
                    removes the attribute from the object.
                  type: object
                cio_relationships:
                  description: >-
                    The anonymous people you want to associate with an object.
                    Each object in the array contains an `anonymous_id`
                    representing a person you haven't yet identified by `id` or
                    `email`.
                  type: array
                  items:
                    type: object
                    properties:
                      identifiers:
                        type: object
                        properties:
                          anonymous_id:
                            description: >-
                              An identifier for an anonymous event, like a
                              cookie. If set as an attribute on a person, any
                              events bearing the same anonymous value are
                              associated with this person. This value must be
                              unique and is not reusable.
                            type: string
                      relationship_attributes:
                        description: >-
                          Coming October 2023 - The attributes associated with a
                          relationship. Passing null or an empty string removes
                          the attribute from the relationship.
                        type: object
        - title: delete
          description: |
            Delete an object. This also removes relationships from people.
          allOf:
            - allOf:
                - type: object
                  required:
                    - identifiers
                  properties:
                    identifiers:
                      description: >-
                        Represents an individual object, where the
                        `object_type_id` represents the type of object and the
                        `object_id` is the individual identifier for the object.
                      type: object
                      required:
                        - object_type_id
                        - object_id
                      properties:
                        object_type_id:
                          description: >-
                            The object type an object belongs to—like
                            "Companies" or "Accounts". Object type IDs are
                            string-formatted integers that begin at `1` and
                            increment for each new type.
                          type: string
                          nullable: false
                          example: '1'
                        object_id:
                          description: >-
                            The unique identifier for an object. If you use an
                            `object_id` that already exists, we'll update the
                            object accordingly.
                          type: string
                          nullable: false
                          example: acme
                - type: object
                  required:
                    - type
                  properties:
                    type:
                      description: The operation modifies a single object—non person data.
                      type: string
                      enum:
                        - object
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Indicates that the operation will `delete` the the item of
                    the specified `type`.
                  type: string
                  enum:
                    - delete
        - title: add_relationships
          description: Add relationships between an object and one or more people.
          allOf:
            - allOf:
                - type: object
                  required:
                    - identifiers
                  properties:
                    identifiers:
                      description: >-
                        Represents an individual object, where the
                        `object_type_id` represents the type of object and the
                        `object_id` is the individual identifier for the object.
                      type: object
                      required:
                        - object_type_id
                        - object_id
                      properties:
                        object_type_id:
                          description: >-
                            The object type an object belongs to—like
                            "Companies" or "Accounts". Object type IDs are
                            string-formatted integers that begin at `1` and
                            increment for each new type.
                          type: string
                          nullable: false
                          example: '1'
                        object_id:
                          description: >-
                            The unique identifier for an object. If you use an
                            `object_id` that already exists, we'll update the
                            object accordingly.
                          type: string
                          nullable: false
                          example: acme
                - type: object
                  required:
                    - type
                  properties:
                    type:
                      description: The operation modifies a single object—non person data.
                      type: string
                      enum:
                        - object
            - type: object
              required:
                - action
                - cio_relationships
              properties:
                action:
                  description: This operation associates an object with one or more people.
                  type: string
                  enum:
                    - add_relationships
                cio_relationships:
                  description: >-
                    The people you want to associate with an object. Each object
                    in the array represents a person.
                  type: array
                  items:
                    type: object
                    properties:
                      identifiers:
                        oneOf:
                          - title: id
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of a customer profile, analogous to a
                                  "person" in the UI.
                                type: string
                                example: '42'
                          - title: email
                            type: object
                            properties:
                              email:
                                description: The email address of the customer.
                                type: string
                                example: test@example.com
                          - title: cio_id
                            type: object
                            properties:
                              cio_id:
                                description: >-
                                  A unique identifier set by Customer.io, used
                                  to reference a person if you want to update
                                  their identifiers.
                                type: string
                                example: a3000001
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                    example:
                      identifiers:
                        id: 42X
                      relationship_attributes:
                        role: admin
                        date_created: 1702480414
        - title: delete_relationships
          description: Delete relationships between an object and one or more people.
          allOf:
            - allOf:
                - type: object
                  required:
                    - identifiers
                  properties:
                    identifiers:
                      description: >-
                        Represents an individual object, where the
                        `object_type_id` represents the type of object and the
                        `object_id` is the individual identifier for the object.
                      type: object
                      required:
                        - object_type_id
                        - object_id
                      properties:
                        object_type_id:
                          description: >-
                            The object type an object belongs to—like
                            "Companies" or "Accounts". Object type IDs are
                            string-formatted integers that begin at `1` and
                            increment for each new type.
                          type: string
                          nullable: false
                          example: '1'
                        object_id:
                          description: >-
                            The unique identifier for an object. If you use an
                            `object_id` that already exists, we'll update the
                            object accordingly.
                          type: string
                          nullable: false
                          example: acme
                - type: object
                  required:
                    - type
                  properties:
                    type:
                      description: The operation modifies a single object—non person data.
                      type: string
                      enum:
                        - object
            - type: object
              required:
                - action
                - cio_relationships
              properties:
                action:
                  description: >-
                    This operation deletes an object relationship from one or
                    more people.
                  type: string
                  enum:
                    - delete_relationships
                cio_relationships:
                  description: >-
                    The people you want to associate with an object. Each object
                    in the array represents a person.
                  type: array
                  items:
                    type: object
                    properties:
                      identifiers:
                        oneOf:
                          - title: id
                            type: object
                            properties:
                              id:
                                description: >-
                                  The ID of a customer profile, analogous to a
                                  "person" in the UI.
                                type: string
                                example: '42'
                          - title: email
                            type: object
                            properties:
                              email:
                                description: The email address of the customer.
                                type: string
                                example: test@example.com
                          - title: cio_id
                            type: object
                            properties:
                              cio_id:
                                description: >-
                                  A unique identifier set by Customer.io, used
                                  to reference a person if you want to update
                                  their identifiers.
                                type: string
                                example: a3000001
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                    example:
                      identifiers:
                        id: 42X
                      relationship_attributes:
                        role: admin
                        date_created: 1702480414
      discriminator:
        propertyName: action
        mapping:
          identify: '#/components/schemas/object_identify'
          identify_anonymous: '#/components/schemas/object_identify_anonymous'
          delete: '#/components/schemas/object_delete'
          add_relationships: '#/components/schemas/object_add_relationships'
          delete_relationships: '#/components/schemas/object_delete_relationships'
    person_operations:
      title: Person
      oneOf:
        - title: identify
          description: Add or update a person.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Indicates that the operation will `identify` the the item of
                    the specified `type`.
                  type: string
                  enum:
                    - identify
                attributes:
                  description: Attributes that you want to add or update for this person.
                  type: object
                  properties:
                    cio_subscription_preferences:
                      description: >-
                        Stores your audience's subscription preferences if you
                        enable our [subscription
                        center](https://customer.io/docs/api/track/) feature.
                        These items are set automatically when people use the
                        unsubscribe link in your messages, but you can set
                        preferences outside the subscription flow. To update
                        select topic preferences while preserving those set for
                        other topics, use JSON dot notation
                        `"cio_subscription_preferences.topics.topic_<topic
                        ID>":<boolean>`.
                      type: object
                      properties:
                        topics:
                          description: >-
                            Contains active topics in your workspace, named
                            `topic_<id>`.
                          type: object
                          additionalProperties:
                            description: >-
                              Each property is a boolean named `topic_<id>`.
                              Topic `id` values begin at `1` and increment for
                              each new topic. You can find your topic ids in
                              [Workspace
                              Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
                              or by querying our [App
                              API](https://customer.io/docs/api/app/#operation/getTopics).
                              For each boolean, `true` means that a person is
                              subscribed to the topic; false means they are
                              unsubscribed. An empty or missing value reverts to
                              the default preference for the topic (opt-in or
                              opt-out).
                            x-additionalPropertiesName: topic_<id>
                            type: boolean
                      example:
                        topic_1: true
                        topic_2: false
                        topic_3: true
                cio_relationships:
                  description: >-
                    Each object in the array represents a relationship you want
                    to add to, or remove from, a person.
                  type: array
                  items:
                    allOf:
                      - type: object
                        required:
                          - identifiers
                        properties:
                          identifiers:
                            description: >-
                              Represents an individual object, where the
                              `object_type_id` represents the type of object and
                              the `object_id` is the individual identifier for
                              the object.
                            type: object
                            required:
                              - object_type_id
                              - object_id
                            properties:
                              object_type_id:
                                description: >-
                                  The object type an object belongs to—like
                                  "Companies" or "Accounts". Object type IDs are
                                  string-formatted integers that begin at `1`
                                  and increment for each new type.
                                type: string
                                nullable: false
                                example: '1'
                              object_id:
                                description: >-
                                  The unique identifier for an object. If you
                                  use an `object_id` that already exists, we'll
                                  update the object accordingly.
                                type: string
                                nullable: false
                                example: acme
                      - type: object
                        properties:
                          relationship_attributes:
                            description: >
                              [Coming January
                              2024](https://customer.io/docs/api/track/) - If we
                              have not rolled out relationship attributes to
                              your account yet and you send them with your
                              request, your request will go through but we won't
                              store your relationship attributes. The attributes
                              associated with a relationship. Passing null or an
                              empty string removes the attribute from the
                              relationship.
                            type: object
                            additionalProperties:
                              x-additionalPropertiesName: Relationship Attributes
                            example:
                              role: admin
        - title: delete
          description: Delete a person from your workspace.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Indicates that the operation will `delete` the the item of
                    the specified `type`.
                  type: string
                  enum:
                    - delete
        - description: >-
            A custom event attributed to a person. You can use events to trigger
            campaigns, or reference event information using liquid in your
            messages.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - name
              properties:
                action:
                  description: A custom event attributed to the specified person.
                  type: string
                  enum:
                    - event
                id:
                  description: >-
                    A valid ULID used to deduplicate events. Note - our Python
                    and Ruby libraries do not pass this id.
                  type: string
                  format: ULID
                name:
                  description: >-
                    The name of the event. This is how you'll find your event in
                    Customer.io or select it when using events as campaign
                    triggers.
                  type: string
                timestamp:
                  description: The Unix timestamp when the event happened.
                  type: integer
                attributes:
                  description: >
                    Additional information that you might want to reference in a
                    message using liquid or use to set attributes on the
                    identified person.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: liquid merge data
                  properties:
                    recipient:
                      description: >-
                        The email address of the person associated with the
                        event, overriding the `to` field in emails triggered by
                        the event.
                      type: string
                      format: email
                    from_address:
                      description: >-
                        The address you want to trigger messages from,
                        overriding the `from` field in emails triggered by the
                        event.
                      type: string
                      format: email
                    reply_to:
                      description: >-
                        The address you want to receive replies to, overriding
                        the `reply to` field for emails triggered by the event.
                      type: string
                      format: email
        - description: >-
            A mobile "screenview" event attributed to a person. Our `screen` and
            `page` event types are more specific than our standard `event`, and
            help you track and target people based on the pages people visit in
            your mobile app or website.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - name
              properties:
                action:
                  description: >-
                    A mobile "screenview" event attributed to a person. Our
                    `screen` and `page` event types are more specific than our
                    standard `event`, and help you track and target people based
                    on the pages people visit in your mobile app or website.
                  type: string
                  enum:
                    - screen
                id:
                  description: >-
                    A valid ULID used to deduplicate events. Note - our Python
                    and Ruby libraries do not pass this id.
                  type: string
                  format: ULID
                name:
                  description: >-
                    The name of the screen a person visited. This is how you'll
                    find and select screen view events in Customer.io.
                  type: string
                timestamp:
                  description: The Unix timestamp when the event happened.
                  type: integer
                attributes:
                  description: >-
                    Additional information that you might want to reference in a
                    message using liquid or use to set attributes on the
                    identified person.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: liquid merge data
        - description: >-
            A web "pageview" event attributed to a person. Our `screen` and
            `page` event types are more specific than our standard `event`, and
            help you track and target people based on the pages people visit in
            your mobile app or website.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - name
              properties:
                action:
                  description: >-
                    A web "pageview" event attributed to a person. Our `screen`
                    and `page` event types are more specific than our standard
                    `event`, and help you track and target people based on the
                    pages people visit in your mobile app or website.
                  type: string
                  enum:
                    - screen
                id:
                  description: >-
                    A valid ULID used to deduplicate events. Note - our Python
                    and Ruby libraries do not pass this id.
                  type: string
                  format: ULID
                name:
                  description: >-
                    The name of the page or page path that a person visited.
                    This is how you'll find and select page view events in
                    Customer.io.
                  type: string
                timestamp:
                  description: The Unix timestamp when the event happened.
                  type: integer
                attributes:
                  description: >-
                    Additional information that you might want to reference in a
                    message using liquid or use to set attributes on the
                    identified person.
                  type: object
                  additionalProperties:
                    description: >-
                      Insert key-values that you want to reference in your
                      message here.
                    x-additionalPropertiesName: liquid merge data
        - title: add_relationships
          description: Associate multiple objects with a person.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - cio_relationships
              properties:
                action:
                  description: This operation associates a person with one or more objects.
                  type: string
                  enum:
                    - add_relationships
                cio_relationships:
                  description: >-
                    Each object in the array represents a relationship you want
                    to add to, or remove from, a person.
                  type: array
                  items:
                    allOf:
                      - type: object
                        required:
                          - identifiers
                        properties:
                          identifiers:
                            description: >-
                              Represents an individual object, where the
                              `object_type_id` represents the type of object and
                              the `object_id` is the individual identifier for
                              the object.
                            type: object
                            required:
                              - object_type_id
                              - object_id
                            properties:
                              object_type_id:
                                description: >-
                                  The object type an object belongs to—like
                                  "Companies" or "Accounts". Object type IDs are
                                  string-formatted integers that begin at `1`
                                  and increment for each new type.
                                type: string
                                nullable: false
                                example: '1'
                              object_id:
                                description: >-
                                  The unique identifier for an object. If you
                                  use an `object_id` that already exists, we'll
                                  update the object accordingly.
                                type: string
                                nullable: false
                                example: acme
                      - type: object
                        properties:
                          relationship_attributes:
                            description: >
                              [Coming January
                              2024](https://customer.io/docs/api/track/) - If we
                              have not rolled out relationship attributes to
                              your account yet and you send them with your
                              request, your request will go through but we won't
                              store your relationship attributes. The attributes
                              associated with a relationship. Passing null or an
                              empty string removes the attribute from the
                              relationship.
                            type: object
                            additionalProperties:
                              x-additionalPropertiesName: Relationship Attributes
                            example:
                              role: admin
        - title: delete_relationships
          description: Remove multiple object relationships from a person.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - cio_relationships
              properties:
                action:
                  description: >-
                    This operation deletes an object relationship from one or
                    more people.
                  type: string
                  enum:
                    - delete_relationships
                cio_relationships:
                  description: >-
                    Each object in the array represents a relationship you want
                    to add to, or remove from, a person.
                  type: array
                  items:
                    allOf:
                      - type: object
                        required:
                          - identifiers
                        properties:
                          identifiers:
                            description: >-
                              Represents an individual object, where the
                              `object_type_id` represents the type of object and
                              the `object_id` is the individual identifier for
                              the object.
                            type: object
                            required:
                              - object_type_id
                              - object_id
                            properties:
                              object_type_id:
                                description: >-
                                  The object type an object belongs to—like
                                  "Companies" or "Accounts". Object type IDs are
                                  string-formatted integers that begin at `1`
                                  and increment for each new type.
                                type: string
                                nullable: false
                                example: '1'
                              object_id:
                                description: >-
                                  The unique identifier for an object. If you
                                  use an `object_id` that already exists, we'll
                                  update the object accordingly.
                                type: string
                                nullable: false
                                example: acme
                      - type: object
                        properties:
                          relationship_attributes:
                            description: >
                              [Coming January
                              2024](https://customer.io/docs/api/track/) - If we
                              have not rolled out relationship attributes to
                              your account yet and you send them with your
                              request, your request will go through but we won't
                              store your relationship attributes. The attributes
                              associated with a relationship. Passing null or an
                              empty string removes the attribute from the
                              relationship.
                            type: object
                            additionalProperties:
                              x-additionalPropertiesName: Relationship Attributes
                            example:
                              role: admin
        - title: add_device
          description: Assign devices to a person.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - device
              properties:
                action:
                  description: Add a mobile device to a person's profile.
                  type: string
                  enum:
                    - add_device
                device:
                  description: >-
                    The properties representing an individual device. [Our
                    SDK's](https://customer.io/docs/api/track/) gather all the
                    properties defined below automatically, unless you disable
                    the `autoTrackDeviceAttributes` setting. You can reference
                    the properties outside the `attributes` object in segments.
                  allOf:
                    - type: object
                      required:
                        - token
                      properties:
                        token:
                          description: The device token.
                          type: string
                    - description: Device information common to the v1 and v2 APIs.
                      type: object
                      required:
                        - platform
                      properties:
                        last_used:
                          description: >-
                            The `timestamp` when you last identified this
                            device. If you don't pass a timestamp when you add
                            or update a device, we use the time of the request
                            itself. Our SDKs identify a device when a person
                            launches their app.
                          type: integer
                          format: unix timestamp
                        platform:
                          description: The device/messaging platform.
                          type: string
                          enum:
                            - ios
                            - android
                        attributes:
                          description: >-
                            Attributes that you can reference to segment your
                            audience—like a person's attributes, but specific to
                            a device. These can be either the attributes defined
                            below or custom key-value attributes.
                          type: object
                          properties:
                            device_os:
                              description: >-
                                The operating system, including the version, on
                                the device.
                              type: string
                            device_model:
                              description: The model of the device a person uses.
                              type: string
                            app_version:
                              description: >-
                                The version of your app that a customer uses.
                                You might target app versions to let people know
                                when they need to update, or expose them to new
                                features when they do.
                              type: string
                            cio_sdk_version:
                              description: The version of the Customer.io SDK in the app.
                              type: string
                            _last_status:
                              description: >-
                                The delivery status of the last message sent to
                                the device—sent, bounced, or suppressed. An
                                empty string indicates that that the device
                                hasn't received a push yet.
                              type: string
                              readOnly: true
                              enum:
                                - ''
                                - bounced
                                - sent
                                - suppressed
                            device_locale:
                              description: >-
                                The four-letter [IETF language
                                code](https://customer.io/docs/api/track/) for
                                the device. For example, `en-MX` (indicating an
                                app in Spanish formatted for a user in Mexico)
                                or `es-ES` (indicating an app in Spanish
                                formatted for a user in Spain).
                              type: string
                            push_enabled:
                              description: >-
                                If `"true"`, the device is opted-in and can
                                receive push notifications.
                              type: string
                              enum:
                                - 'true'
                                - 'false'
                          additionalProperties:
                            description: >-
                              Custom properties that you want to associate with
                              the device.
                            x-additionalPropertiesName: Custom Device Attributes
                            type: string
        - title: delete_device
          description: Delete devices that belong to a person.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
                - device
              properties:
                action:
                  description: Delete a device from a person's profile.
                  type: string
                  enum:
                    - delete_device
                device:
                  description: The device you want to remove.
                  type: object
                  required:
                    - token
                  properties:
                    token:
                      description: The token of the device you want to remove.
                      type: string
        - description: >
            Merge two people. You'll merge the `secondary` person into the
            `primary`. The primary profile remains after the merge and the
            secondary is deleted. This operation is _not_ reversible. See our
            page on [merging duplicate
            people](https://customer.io/docs/api/track/) for more information.
          type: object
          required:
            - type
            - primary
            - secondary
            - action
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            action:
              description: >
                Merge two people. You'll merge the `secondary` person into the
                `primary`. The primary profile remains after the merge and the
                secondary is deleted. This operation is _not_ reversible. See
                our page on [merging duplicate
                people](https://customer.io/docs/api/track/) for more
                information.
              type: string
              enum:
                - merge
            primary:
              description: >-
                The person that you want to remain after the merge, identified
                by one of `id`, `email`, or `cio_id`. This person receives
                information from the secondary person in the merge.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
            secondary:
              description: >-
                The person that you want to delete after the merge, identified
                by one of `id`, `email`, or `cio_id`. This person's information
                is merged into the primary person's profile and then it is
                deleted.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - title: suppress
          description: >-
            Suppress a person's identifier(s) in Customer.io, so that you can't
            message a person or add their identifiers back to your workspace.
            This is separate from suppressions performed by your email provider.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Suppress a person's identifier(s) in Customer.io, so that
                    you can't message a person or add their identifiers back to
                    your workspace. This is separate from suppressions performed
                    by your email provider.
                  type: string
                  enum:
                    - suppress
        - title: unsuppress
          description: >-
            Unsuppress a person's identifier(s) in Customer.io, so that you can
            message a person or add their identifiers back to your workspace.
            This does not unsuppress addresses that were previously suppressed
            by your email provider.
          allOf:
            - type: object
              required:
                - type
                - identifiers
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                identifiers:
                  description: >-
                    The person you want to perform an action for—one of either
                    `id`, `email`, or `cio_id`. You cannot pass multiple
                    identifiers.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - type: object
              required:
                - action
              properties:
                action:
                  description: >-
                    Unsuppress a person's identifier(s) in Customer.io, so that
                    you can message a person or add their identifiers back to
                    your workspace. This does not unsuppress addresses that were
                    previously suppressed by your email provider.
                  type: string
                  enum:
                    - unsuppress
      discriminator:
        propertyName: action
        mapping:
          identify: '#/components/schemas/identify_person'
          delete: '#/components/schemas/person_delete'
          event: '#/components/schemas/person_event'
          screen: '#/components/schemas/person_screen'
          page: '#/components/schemas/person_page'
          add_relationships: '#/components/schemas/person_add_relationships'
          delete_relationships: '#/components/schemas/person_delete_relationships'
          add_device: '#/components/schemas/person_add_device'
          delete_device: '#/components/schemas/person_delete_device'
          merge: '#/components/schemas/person_merge'
          suppress: '#/components/schemas/person_suppress'
          unsuppress: '#/components/schemas/person_unsuppress'
    person_common:
      type: object
      required:
        - type
        - identifiers
      properties:
        type:
          description: The operation modifies a person in Customer.io
          type: string
          enum:
            - person
        identifiers:
          description: >-
            The person you want to perform an action for—one of either `id`,
            `email`, or `cio_id`. You cannot pass multiple identifiers.
          oneOf:
            - title: id
              type: object
              required:
                - id
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI.
                  type: string
                  example: '42'
            - title: email
              type: object
              required:
                - email
              properties:
                email:
                  description: The email address of the customer.
                  type: string
                  example: test@example.com
            - title: cio_id
              type: object
              required:
                - cio_id
              properties:
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
    person_attributes:
      description: Attributes that you want to add or update for this person.
      type: object
      properties:
        cio_subscription_preferences:
          description: >-
            Stores your audience's subscription preferences if you enable our
            [subscription center](https://customer.io/docs/api/track/) feature.
            These items are set automatically when people use the unsubscribe
            link in your messages, but you can set preferences outside the
            subscription flow. To update select topic preferences while
            preserving those set for other topics, use JSON dot notation
            `"cio_subscription_preferences.topics.topic_<topic ID>":<boolean>`.
          type: object
          properties:
            topics:
              description: Contains active topics in your workspace, named `topic_<id>`.
              type: object
              additionalProperties:
                description: >-
                  Each property is a boolean named `topic_<id>`. Topic `id`
                  values begin at `1` and increment for each new topic. You can
                  find your topic ids in [Workspace
                  Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
                  or by querying our [App
                  API](https://customer.io/docs/api/app/#operation/getTopics).
                  For each boolean, `true` means that a person is subscribed to
                  the topic; false means they are unsubscribed. An empty or
                  missing value reverts to the default preference for the topic
                  (opt-in or opt-out).
                x-additionalPropertiesName: topic_<id>
                type: boolean
          example:
            topic_1: true
            topic_2: false
            topic_3: true
    object_relationships:
      description: >-
        Each object in the array represents a relationship you want to add to,
        or remove from, a person.
      type: array
      items:
        allOf:
          - type: object
            required:
              - identifiers
            properties:
              identifiers:
                description: >-
                  Represents an individual object, where the `object_type_id`
                  represents the type of object and the `object_id` is the
                  individual identifier for the object.
                type: object
                required:
                  - object_type_id
                  - object_id
                properties:
                  object_type_id:
                    description: >-
                      The object type an object belongs to—like "Companies" or
                      "Accounts". Object type IDs are string-formatted integers
                      that begin at `1` and increment for each new type.
                    type: string
                    nullable: false
                    example: '1'
                  object_id:
                    description: >-
                      The unique identifier for an object. If you use an
                      `object_id` that already exists, we'll update the object
                      accordingly.
                    type: string
                    nullable: false
                    example: acme
          - type: object
            properties:
              relationship_attributes:
                description: >
                  [Coming January 2024](https://customer.io/docs/api/track/) -
                  If we have not rolled out relationship attributes to your
                  account yet and you send them with your request, your request
                  will go through but we won't store your relationship
                  attributes. The attributes associated with a relationship.
                  Passing null or an empty string removes the attribute from the
                  relationship.
                type: object
                additionalProperties:
                  x-additionalPropertiesName: Relationship Attributes
                example:
                  role: admin
    relationship_attributes:
      description: >
        [Coming January 2024](https://customer.io/docs/api/track/) - If we have
        not rolled out relationship attributes to your account yet and you send
        them with your request, your request will go through but we won't store
        your relationship attributes. The attributes associated with a
        relationship. Passing null or an empty string removes the attribute from
        the relationship.
      type: object
      additionalProperties:
        x-additionalPropertiesName: Relationship Attributes
      example:
        role: admin
    object_attributes:
      description: >-
        The data that belongs to the object. This is information you might want
        to associate with people later (through `cio_relationships`). Passing
        `null` or an empty string removes the attribute from the object.
      type: object
    object_common:
      allOf:
        - type: object
          required:
            - identifiers
          properties:
            identifiers:
              description: >-
                Represents an individual object, where the `object_type_id`
                represents the type of object and the `object_id` is the
                individual identifier for the object.
              type: object
              required:
                - object_type_id
                - object_id
              properties:
                object_type_id:
                  description: >-
                    The object type an object belongs to—like "Companies" or
                    "Accounts". Object type IDs are string-formatted integers
                    that begin at `1` and increment for each new type.
                  type: string
                  nullable: false
                  example: '1'
                object_id:
                  description: >-
                    The unique identifier for an object. If you use an
                    `object_id` that already exists, we'll update the object
                    accordingly.
                  type: string
                  nullable: false
                  example: acme
        - type: object
          required:
            - type
          properties:
            type:
              description: The operation modifies a single object—non person data.
              type: string
              enum:
                - object
    v2_cio_relationships:
      description: >-
        The people you want to associate with an object. Each object in the
        array represents a person.
      type: array
      items:
        type: object
        properties:
          identifiers:
            oneOf:
              - title: id
                type: object
                properties:
                  id:
                    description: >-
                      The ID of a customer profile, analogous to a "person" in
                      the UI.
                    type: string
                    example: '42'
              - title: email
                type: object
                properties:
                  email:
                    description: The email address of the customer.
                    type: string
                    example: test@example.com
              - title: cio_id
                type: object
                properties:
                  cio_id:
                    description: >-
                      A unique identifier set by Customer.io, used to reference
                      a person if you want to update their identifiers.
                    type: string
                    example: a3000001
          relationship_attributes:
            description: >
              [Coming January 2024](https://customer.io/docs/api/track/) - If we
              have not rolled out relationship attributes to your account yet
              and you send them with your request, your request will go through
              but we won't store your relationship attributes. The attributes
              associated with a relationship. Passing null or an empty string
              removes the attribute from the relationship.
            type: object
            additionalProperties:
              x-additionalPropertiesName: Relationship Attributes
        example:
          identifiers:
            id: 42X
          relationship_attributes:
            role: admin
            date_created: 1702480414
    v1_cio_relationships:
      description: >-
        Describes relationships to an entity—a non-person object in Customer.io,
        like a company, educational course, job board, etc.
      type: object
      properties:
        action:
          description: >-
            This determines whether the `relationships` array adds relationships
            to a person or removes them from a person.
          type: string
          enum:
            - add_relationships
            - delete_relationships
        relationships:
          description: >-
            Each object in the array represents a relationship you want to add
            to, or remove from, a person.
          type: array
          items:
            allOf:
              - type: object
                required:
                  - identifiers
                properties:
                  identifiers:
                    description: >-
                      Represents an individual object, where the
                      `object_type_id` represents the type of object and the
                      `object_id` is the individual identifier for the object.
                    type: object
                    required:
                      - object_type_id
                      - object_id
                    properties:
                      object_type_id:
                        description: >-
                          The object type an object belongs to—like "Companies"
                          or "Accounts". Object type IDs are string-formatted
                          integers that begin at `1` and increment for each new
                          type.
                        type: string
                        nullable: false
                        example: '1'
                      object_id:
                        description: >-
                          The unique identifier for an object. If you use an
                          `object_id` that already exists, we'll update the
                          object accordingly.
                        type: string
                        nullable: false
                        example: acme
              - type: object
                properties:
                  relationship_attributes:
                    description: >
                      [Coming January 2024](https://customer.io/docs/api/track/)
                      - If we have not rolled out relationship attributes to
                      your account yet and you send them with your request, your
                      request will go through but we won't store your
                      relationship attributes. The attributes associated with a
                      relationship. Passing null or an empty string removes the
                      attribute from the relationship.
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: Relationship Attributes
                    example:
                      role: admin
    object_identify:
      title: identify
      description: >
        The `action` determines the type of operation you want to perform with
        an object. If `identifiers.object_id` does not exist, we'll create a new
        object; if it exists, we'll update the object accordingly.
      type: object
      allOf:
        - allOf:
            - type: object
              required:
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Represents an individual object, where the `object_type_id`
                    represents the type of object and the `object_id` is the
                    individual identifier for the object.
                  type: object
                  required:
                    - object_type_id
                    - object_id
                  properties:
                    object_type_id:
                      description: >-
                        The object type an object belongs to—like "Companies" or
                        "Accounts". Object type IDs are string-formatted
                        integers that begin at `1` and increment for each new
                        type.
                      type: string
                      nullable: false
                      example: '1'
                    object_id:
                      description: >-
                        The unique identifier for an object. If you use an
                        `object_id` that already exists, we'll update the object
                        accordingly.
                      type: string
                      nullable: false
                      example: acme
            - type: object
              required:
                - type
              properties:
                type:
                  description: The operation modifies a single object—non person data.
                  type: string
                  enum:
                    - object
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Indicates that the operation will `identify` the the item of the
                specified `type`.
              type: string
              enum:
                - identify
            attributes:
              description: >-
                The data that belongs to the object. This is information you
                might want to associate with people later (through
                `cio_relationships`). Passing `null` or an empty string removes
                the attribute from the object.
              type: object
            cio_relationships:
              description: >-
                The people you want to associate with an object. Each object in
                the array represents a person.
              type: array
              items:
                type: object
                properties:
                  identifiers:
                    oneOf:
                      - title: id
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of a customer profile, analogous to a
                              "person" in the UI.
                            type: string
                            example: '42'
                      - title: email
                        type: object
                        properties:
                          email:
                            description: The email address of the customer.
                            type: string
                            example: test@example.com
                      - title: cio_id
                        type: object
                        properties:
                          cio_id:
                            description: >-
                              A unique identifier set by Customer.io, used to
                              reference a person if you want to update their
                              identifiers.
                            type: string
                            example: a3000001
                  relationship_attributes:
                    description: >
                      [Coming January 2024](https://customer.io/docs/api/track/)
                      - If we have not rolled out relationship attributes to
                      your account yet and you send them with your request, your
                      request will go through but we won't store your
                      relationship attributes. The attributes associated with a
                      relationship. Passing null or an empty string removes the
                      attribute from the relationship.
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: Relationship Attributes
                example:
                  identifiers:
                    id: 42X
                  relationship_attributes:
                    role: admin
                    date_created: 1702480414
    object_identify_anonymous:
      title: identify_anonymous
      description: >-
        The `identify_anonymous` action lets you relate an object to a person
        who hasn't yet identified themselves by anonymous_id. When you identify
        the person, their anonymous relationship will carry over to the
        identified profile.
      allOf:
        - allOf:
            - type: object
              required:
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Represents an individual object, where the `object_type_id`
                    represents the type of object and the `object_id` is the
                    individual identifier for the object.
                  type: object
                  required:
                    - object_type_id
                    - object_id
                  properties:
                    object_type_id:
                      description: >-
                        The object type an object belongs to—like "Companies" or
                        "Accounts". Object type IDs are string-formatted
                        integers that begin at `1` and increment for each new
                        type.
                      type: string
                      nullable: false
                      example: '1'
                    object_id:
                      description: >-
                        The unique identifier for an object. If you use an
                        `object_id` that already exists, we'll update the object
                        accordingly.
                      type: string
                      nullable: false
                      example: acme
            - type: object
              required:
                - type
              properties:
                type:
                  description: The operation modifies a single object—non person data.
                  type: string
                  enum:
                    - object
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Indicates that the operation will `identify` the item of the
                specified `type` and relate it to an `anonymous_id`.
              type: string
              enum:
                - identify_anonymous
            attributes:
              description: >-
                The data that belongs to the object. This is information you
                might want to associate with people later (through
                `cio_relationships`). Passing `null` or an empty string removes
                the attribute from the object.
              type: object
            cio_relationships:
              description: >-
                The anonymous people you want to associate with an object. Each
                object in the array contains an `anonymous_id` representing a
                person you haven't yet identified by `id` or `email`.
              type: array
              items:
                type: object
                properties:
                  identifiers:
                    type: object
                    properties:
                      anonymous_id:
                        description: >-
                          An identifier for an anonymous event, like a cookie.
                          If set as an attribute on a person, any events bearing
                          the same anonymous value are associated with this
                          person. This value must be unique and is not reusable.
                        type: string
                  relationship_attributes:
                    description: >-
                      Coming October 2023 - The attributes associated with a
                      relationship. Passing null or an empty string removes the
                      attribute from the relationship.
                    type: object
    object_add_relationships:
      title: add_relationships
      description: Add relationships between an object and one or more people.
      allOf:
        - allOf:
            - type: object
              required:
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Represents an individual object, where the `object_type_id`
                    represents the type of object and the `object_id` is the
                    individual identifier for the object.
                  type: object
                  required:
                    - object_type_id
                    - object_id
                  properties:
                    object_type_id:
                      description: >-
                        The object type an object belongs to—like "Companies" or
                        "Accounts". Object type IDs are string-formatted
                        integers that begin at `1` and increment for each new
                        type.
                      type: string
                      nullable: false
                      example: '1'
                    object_id:
                      description: >-
                        The unique identifier for an object. If you use an
                        `object_id` that already exists, we'll update the object
                        accordingly.
                      type: string
                      nullable: false
                      example: acme
            - type: object
              required:
                - type
              properties:
                type:
                  description: The operation modifies a single object—non person data.
                  type: string
                  enum:
                    - object
        - type: object
          required:
            - action
            - cio_relationships
          properties:
            action:
              description: This operation associates an object with one or more people.
              type: string
              enum:
                - add_relationships
            cio_relationships:
              description: >-
                The people you want to associate with an object. Each object in
                the array represents a person.
              type: array
              items:
                type: object
                properties:
                  identifiers:
                    oneOf:
                      - title: id
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of a customer profile, analogous to a
                              "person" in the UI.
                            type: string
                            example: '42'
                      - title: email
                        type: object
                        properties:
                          email:
                            description: The email address of the customer.
                            type: string
                            example: test@example.com
                      - title: cio_id
                        type: object
                        properties:
                          cio_id:
                            description: >-
                              A unique identifier set by Customer.io, used to
                              reference a person if you want to update their
                              identifiers.
                            type: string
                            example: a3000001
                  relationship_attributes:
                    description: >
                      [Coming January 2024](https://customer.io/docs/api/track/)
                      - If we have not rolled out relationship attributes to
                      your account yet and you send them with your request, your
                      request will go through but we won't store your
                      relationship attributes. The attributes associated with a
                      relationship. Passing null or an empty string removes the
                      attribute from the relationship.
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: Relationship Attributes
                example:
                  identifiers:
                    id: 42X
                  relationship_attributes:
                    role: admin
                    date_created: 1702480414
    person_add_relationships:
      title: add_relationships
      description: Associate multiple objects with a person.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - cio_relationships
          properties:
            action:
              description: This operation associates a person with one or more objects.
              type: string
              enum:
                - add_relationships
            cio_relationships:
              description: >-
                Each object in the array represents a relationship you want to
                add to, or remove from, a person.
              type: array
              items:
                allOf:
                  - type: object
                    required:
                      - identifiers
                    properties:
                      identifiers:
                        description: >-
                          Represents an individual object, where the
                          `object_type_id` represents the type of object and the
                          `object_id` is the individual identifier for the
                          object.
                        type: object
                        required:
                          - object_type_id
                          - object_id
                        properties:
                          object_type_id:
                            description: >-
                              The object type an object belongs to—like
                              "Companies" or "Accounts". Object type IDs are
                              string-formatted integers that begin at `1` and
                              increment for each new type.
                            type: string
                            nullable: false
                            example: '1'
                          object_id:
                            description: >-
                              The unique identifier for an object. If you use an
                              `object_id` that already exists, we'll update the
                              object accordingly.
                            type: string
                            nullable: false
                            example: acme
                  - type: object
                    properties:
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                        example:
                          role: admin
    object_delete_relationships:
      title: delete_relationships
      description: Delete relationships between an object and one or more people.
      allOf:
        - allOf:
            - type: object
              required:
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Represents an individual object, where the `object_type_id`
                    represents the type of object and the `object_id` is the
                    individual identifier for the object.
                  type: object
                  required:
                    - object_type_id
                    - object_id
                  properties:
                    object_type_id:
                      description: >-
                        The object type an object belongs to—like "Companies" or
                        "Accounts". Object type IDs are string-formatted
                        integers that begin at `1` and increment for each new
                        type.
                      type: string
                      nullable: false
                      example: '1'
                    object_id:
                      description: >-
                        The unique identifier for an object. If you use an
                        `object_id` that already exists, we'll update the object
                        accordingly.
                      type: string
                      nullable: false
                      example: acme
            - type: object
              required:
                - type
              properties:
                type:
                  description: The operation modifies a single object—non person data.
                  type: string
                  enum:
                    - object
        - type: object
          required:
            - action
            - cio_relationships
          properties:
            action:
              description: >-
                This operation deletes an object relationship from one or more
                people.
              type: string
              enum:
                - delete_relationships
            cio_relationships:
              description: >-
                The people you want to associate with an object. Each object in
                the array represents a person.
              type: array
              items:
                type: object
                properties:
                  identifiers:
                    oneOf:
                      - title: id
                        type: object
                        properties:
                          id:
                            description: >-
                              The ID of a customer profile, analogous to a
                              "person" in the UI.
                            type: string
                            example: '42'
                      - title: email
                        type: object
                        properties:
                          email:
                            description: The email address of the customer.
                            type: string
                            example: test@example.com
                      - title: cio_id
                        type: object
                        properties:
                          cio_id:
                            description: >-
                              A unique identifier set by Customer.io, used to
                              reference a person if you want to update their
                              identifiers.
                            type: string
                            example: a3000001
                  relationship_attributes:
                    description: >
                      [Coming January 2024](https://customer.io/docs/api/track/)
                      - If we have not rolled out relationship attributes to
                      your account yet and you send them with your request, your
                      request will go through but we won't store your
                      relationship attributes. The attributes associated with a
                      relationship. Passing null or an empty string removes the
                      attribute from the relationship.
                    type: object
                    additionalProperties:
                      x-additionalPropertiesName: Relationship Attributes
                example:
                  identifiers:
                    id: 42X
                  relationship_attributes:
                    role: admin
                    date_created: 1702480414
    person_delete_relationships:
      title: delete_relationships
      description: Remove multiple object relationships from a person.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - cio_relationships
          properties:
            action:
              description: >-
                This operation deletes an object relationship from one or more
                people.
              type: string
              enum:
                - delete_relationships
            cio_relationships:
              description: >-
                Each object in the array represents a relationship you want to
                add to, or remove from, a person.
              type: array
              items:
                allOf:
                  - type: object
                    required:
                      - identifiers
                    properties:
                      identifiers:
                        description: >-
                          Represents an individual object, where the
                          `object_type_id` represents the type of object and the
                          `object_id` is the individual identifier for the
                          object.
                        type: object
                        required:
                          - object_type_id
                          - object_id
                        properties:
                          object_type_id:
                            description: >-
                              The object type an object belongs to—like
                              "Companies" or "Accounts". Object type IDs are
                              string-formatted integers that begin at `1` and
                              increment for each new type.
                            type: string
                            nullable: false
                            example: '1'
                          object_id:
                            description: >-
                              The unique identifier for an object. If you use an
                              `object_id` that already exists, we'll update the
                              object accordingly.
                            type: string
                            nullable: false
                            example: acme
                  - type: object
                    properties:
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                        example:
                          role: admin
    object_delete:
      title: delete
      description: |
        Delete an object. This also removes relationships from people.
      allOf:
        - allOf:
            - type: object
              required:
                - identifiers
              properties:
                identifiers:
                  description: >-
                    Represents an individual object, where the `object_type_id`
                    represents the type of object and the `object_id` is the
                    individual identifier for the object.
                  type: object
                  required:
                    - object_type_id
                    - object_id
                  properties:
                    object_type_id:
                      description: >-
                        The object type an object belongs to—like "Companies" or
                        "Accounts". Object type IDs are string-formatted
                        integers that begin at `1` and increment for each new
                        type.
                      type: string
                      nullable: false
                      example: '1'
                    object_id:
                      description: >-
                        The unique identifier for an object. If you use an
                        `object_id` that already exists, we'll update the object
                        accordingly.
                      type: string
                      nullable: false
                      example: acme
            - type: object
              required:
                - type
              properties:
                type:
                  description: The operation modifies a single object—non person data.
                  type: string
                  enum:
                    - object
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Indicates that the operation will `delete` the the item of the
                specified `type`.
              type: string
              enum:
                - delete
    identify_person:
      title: identify
      description: Add or update a person.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Indicates that the operation will `identify` the the item of the
                specified `type`.
              type: string
              enum:
                - identify
            attributes:
              description: Attributes that you want to add or update for this person.
              type: object
              properties:
                cio_subscription_preferences:
                  description: >-
                    Stores your audience's subscription preferences if you
                    enable our [subscription
                    center](https://customer.io/docs/api/track/) feature. These
                    items are set automatically when people use the unsubscribe
                    link in your messages, but you can set preferences outside
                    the subscription flow. To update select topic preferences
                    while preserving those set for other topics, use JSON dot
                    notation `"cio_subscription_preferences.topics.topic_<topic
                    ID>":<boolean>`.
                  type: object
                  properties:
                    topics:
                      description: >-
                        Contains active topics in your workspace, named
                        `topic_<id>`.
                      type: object
                      additionalProperties:
                        description: >-
                          Each property is a boolean named `topic_<id>`. Topic
                          `id` values begin at `1` and increment for each new
                          topic. You can find your topic ids in [Workspace
                          Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
                          or by querying our [App
                          API](https://customer.io/docs/api/app/#operation/getTopics).
                          For each boolean, `true` means that a person is
                          subscribed to the topic; false means they are
                          unsubscribed. An empty or missing value reverts to the
                          default preference for the topic (opt-in or opt-out).
                        x-additionalPropertiesName: topic_<id>
                        type: boolean
                  example:
                    topic_1: true
                    topic_2: false
                    topic_3: true
            cio_relationships:
              description: >-
                Each object in the array represents a relationship you want to
                add to, or remove from, a person.
              type: array
              items:
                allOf:
                  - type: object
                    required:
                      - identifiers
                    properties:
                      identifiers:
                        description: >-
                          Represents an individual object, where the
                          `object_type_id` represents the type of object and the
                          `object_id` is the individual identifier for the
                          object.
                        type: object
                        required:
                          - object_type_id
                          - object_id
                        properties:
                          object_type_id:
                            description: >-
                              The object type an object belongs to—like
                              "Companies" or "Accounts". Object type IDs are
                              string-formatted integers that begin at `1` and
                              increment for each new type.
                            type: string
                            nullable: false
                            example: '1'
                          object_id:
                            description: >-
                              The unique identifier for an object. If you use an
                              `object_id` that already exists, we'll update the
                              object accordingly.
                            type: string
                            nullable: false
                            example: acme
                  - type: object
                    properties:
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                        example:
                          role: admin
    person_delete:
      title: delete
      description: Delete a person from your workspace.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Indicates that the operation will `delete` the the item of the
                specified `type`.
              type: string
              enum:
                - delete
    person_add_device:
      title: add_device
      description: Assign devices to a person.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - device
          properties:
            action:
              description: Add a mobile device to a person's profile.
              type: string
              enum:
                - add_device
            device:
              description: >-
                The properties representing an individual device. [Our
                SDK's](https://customer.io/docs/api/track/) gather all the
                properties defined below automatically, unless you disable the
                `autoTrackDeviceAttributes` setting. You can reference the
                properties outside the `attributes` object in segments.
              allOf:
                - type: object
                  required:
                    - token
                  properties:
                    token:
                      description: The device token.
                      type: string
                - description: Device information common to the v1 and v2 APIs.
                  type: object
                  required:
                    - platform
                  properties:
                    last_used:
                      description: >-
                        The `timestamp` when you last identified this device. If
                        you don't pass a timestamp when you add or update a
                        device, we use the time of the request itself. Our SDKs
                        identify a device when a person launches their app.
                      type: integer
                      format: unix timestamp
                    platform:
                      description: The device/messaging platform.
                      type: string
                      enum:
                        - ios
                        - android
                    attributes:
                      description: >-
                        Attributes that you can reference to segment your
                        audience—like a person's attributes, but specific to a
                        device. These can be either the attributes defined below
                        or custom key-value attributes.
                      type: object
                      properties:
                        device_os:
                          description: >-
                            The operating system, including the version, on the
                            device.
                          type: string
                        device_model:
                          description: The model of the device a person uses.
                          type: string
                        app_version:
                          description: >-
                            The version of your app that a customer uses. You
                            might target app versions to let people know when
                            they need to update, or expose them to new features
                            when they do.
                          type: string
                        cio_sdk_version:
                          description: The version of the Customer.io SDK in the app.
                          type: string
                        _last_status:
                          description: >-
                            The delivery status of the last message sent to the
                            device—sent, bounced, or suppressed. An empty string
                            indicates that that the device hasn't received a
                            push yet.
                          type: string
                          readOnly: true
                          enum:
                            - ''
                            - bounced
                            - sent
                            - suppressed
                        device_locale:
                          description: >-
                            The four-letter [IETF language
                            code](https://customer.io/docs/api/track/) for the
                            device. For example, `en-MX` (indicating an app in
                            Spanish formatted for a user in Mexico) or `es-ES`
                            (indicating an app in Spanish formatted for a user
                            in Spain).
                          type: string
                        push_enabled:
                          description: >-
                            If `"true"`, the device is opted-in and can receive
                            push notifications.
                          type: string
                          enum:
                            - 'true'
                            - 'false'
                      additionalProperties:
                        description: >-
                          Custom properties that you want to associate with the
                          device.
                        x-additionalPropertiesName: Custom Device Attributes
                        type: string
    person_delete_device:
      title: delete_device
      description: Delete devices that belong to a person.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - device
          properties:
            action:
              description: Delete a device from a person's profile.
              type: string
              enum:
                - delete_device
            device:
              description: The device you want to remove.
              type: object
              required:
                - token
              properties:
                token:
                  description: The token of the device you want to remove.
                  type: string
    person_suppress:
      title: suppress
      description: >-
        Suppress a person's identifier(s) in Customer.io, so that you can't
        message a person or add their identifiers back to your workspace. This
        is separate from suppressions performed by your email provider.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Suppress a person's identifier(s) in Customer.io, so that you
                can't message a person or add their identifiers back to your
                workspace. This is separate from suppressions performed by your
                email provider.
              type: string
              enum:
                - suppress
    person_unsuppress:
      title: unsuppress
      description: >-
        Unsuppress a person's identifier(s) in Customer.io, so that you can
        message a person or add their identifiers back to your workspace. This
        does not unsuppress addresses that were previously suppressed by your
        email provider.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
          properties:
            action:
              description: >-
                Unsuppress a person's identifier(s) in Customer.io, so that you
                can message a person or add their identifiers back to your
                workspace. This does not unsuppress addresses that were
                previously suppressed by your email provider.
              type: string
              enum:
                - unsuppress
    person_merge:
      description: >
        Merge two people. You'll merge the `secondary` person into the
        `primary`. The primary profile remains after the merge and the secondary
        is deleted. This operation is _not_ reversible. See our page on [merging
        duplicate people](https://customer.io/docs/api/track/) for more
        information.
      type: object
      required:
        - type
        - primary
        - secondary
        - action
      properties:
        type:
          description: The operation modifies a person in Customer.io
          type: string
          enum:
            - person
        action:
          description: >
            Merge two people. You'll merge the `secondary` person into the
            `primary`. The primary profile remains after the merge and the
            secondary is deleted. This operation is _not_ reversible. See our
            page on [merging duplicate
            people](https://customer.io/docs/api/track/) for more information.
          type: string
          enum:
            - merge
        primary:
          description: >-
            The person that you want to remain after the merge, identified by
            one of `id`, `email`, or `cio_id`. This person receives information
            from the secondary person in the merge.
          oneOf:
            - title: id
              type: object
              required:
                - id
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI.
                  type: string
                  example: '42'
            - title: email
              type: object
              required:
                - email
              properties:
                email:
                  description: The email address of the customer.
                  type: string
                  example: test@example.com
            - title: cio_id
              type: object
              required:
                - cio_id
              properties:
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
        secondary:
          description: >-
            The person that you want to delete after the merge, identified by
            one of `id`, `email`, or `cio_id`. This person's information is
            merged into the primary person's profile and then it is deleted.
          oneOf:
            - title: id
              type: object
              required:
                - id
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI.
                  type: string
                  example: '42'
            - title: email
              type: object
              required:
                - email
              properties:
                email:
                  description: The email address of the customer.
                  type: string
                  example: test@example.com
            - title: cio_id
              type: object
              required:
                - cio_id
              properties:
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
    person_event:
      description: >-
        A custom event attributed to a person. You can use events to trigger
        campaigns, or reference event information using liquid in your messages.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - name
          properties:
            action:
              description: A custom event attributed to the specified person.
              type: string
              enum:
                - event
            id:
              description: >-
                A valid ULID used to deduplicate events. Note - our Python and
                Ruby libraries do not pass this id.
              type: string
              format: ULID
            name:
              description: >-
                The name of the event. This is how you'll find your event in
                Customer.io or select it when using events as campaign triggers.
              type: string
            timestamp:
              description: The Unix timestamp when the event happened.
              type: integer
            attributes:
              description: >
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on the identified
                person.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: liquid merge data
              properties:
                recipient:
                  description: >-
                    The email address of the person associated with the event,
                    overriding the `to` field in emails triggered by the event.
                  type: string
                  format: email
                from_address:
                  description: >-
                    The address you want to trigger messages from, overriding
                    the `from` field in emails triggered by the event.
                  type: string
                  format: email
                reply_to:
                  description: >-
                    The address you want to receive replies to, overriding the
                    `reply to` field for emails triggered by the event.
                  type: string
                  format: email
    person_screen:
      description: >-
        A mobile "screenview" event attributed to a person. Our `screen` and
        `page` event types are more specific than our standard `event`, and help
        you track and target people based on the pages people visit in your
        mobile app or website.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - name
          properties:
            action:
              description: >-
                A mobile "screenview" event attributed to a person. Our `screen`
                and `page` event types are more specific than our standard
                `event`, and help you track and target people based on the pages
                people visit in your mobile app or website.
              type: string
              enum:
                - screen
            id:
              description: >-
                A valid ULID used to deduplicate events. Note - our Python and
                Ruby libraries do not pass this id.
              type: string
              format: ULID
            name:
              description: >-
                The name of the screen a person visited. This is how you'll find
                and select screen view events in Customer.io.
              type: string
            timestamp:
              description: The Unix timestamp when the event happened.
              type: integer
            attributes:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on the identified
                person.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: liquid merge data
    person_page:
      description: >-
        A web "pageview" event attributed to a person. Our `screen` and `page`
        event types are more specific than our standard `event`, and help you
        track and target people based on the pages people visit in your mobile
        app or website.
      allOf:
        - type: object
          required:
            - type
            - identifiers
          properties:
            type:
              description: The operation modifies a person in Customer.io
              type: string
              enum:
                - person
            identifiers:
              description: >-
                The person you want to perform an action for—one of either `id`,
                `email`, or `cio_id`. You cannot pass multiple identifiers.
              oneOf:
                - title: id
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: >-
                        The ID of a customer profile, analogous to a "person" in
                        the UI.
                      type: string
                      example: '42'
                - title: email
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the customer.
                      type: string
                      example: test@example.com
                - title: cio_id
                  type: object
                  required:
                    - cio_id
                  properties:
                    cio_id:
                      description: >-
                        A unique identifier set by Customer.io, used to
                        reference a person if you want to update their
                        identifiers.
                      type: string
                      example: a3000001
        - type: object
          required:
            - action
            - name
          properties:
            action:
              description: >-
                A web "pageview" event attributed to a person. Our `screen` and
                `page` event types are more specific than our standard `event`,
                and help you track and target people based on the pages people
                visit in your mobile app or website.
              type: string
              enum:
                - screen
            id:
              description: >-
                A valid ULID used to deduplicate events. Note - our Python and
                Ruby libraries do not pass this id.
              type: string
              format: ULID
            name:
              description: >-
                The name of the page or page path that a person visited. This is
                how you'll find and select page view events in Customer.io.
              type: string
            timestamp:
              description: The Unix timestamp when the event happened.
              type: integer
            attributes:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on the identified
                person.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: liquid merge data
    track-metrics:
      description: The base properties shared across multiple metric types.
      type: object
      required:
        - delivery_id
      properties:
        delivery_id:
          description: >-
            The CIO-Delivery-ID from the notification that you want to associate
            the `event` with.
          type: string
          example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
        timestamp:
          description: The unix timestamp when the event occurred.
          type: integer
          format: unix timestamp
          example: 1613063089
    delivery_operations:
      title: Delivery
      description: >-
        The "delivery" type lets you attribute metrics to messages that don't
        self-report back to Customer.io, like push and in-app notifications.
      type: object
      required:
        - type
        - action
        - identifiers
        - name
        - attributes
      properties:
        type:
          description: >-
            The "delivery" type lets you attribute metrics to messages that
            don't self-report back to Customer.io, like push and in-app
            notifications.
          type: string
          enum:
            - delivery
        action:
          description: >-
            An `event` action indicates a delivery event. Use the `name` to
            determine the specific metric that you want to attribute to this
            delivery.
          type: string
          enum:
            - event
        identifiers:
          description: Contains identifiers for the delivery itself.
          type: object
          properties:
            id:
              description: >-
                The `delivery_id` for the delivery that you want to attribute
                metrics to.
              type: string
        name:
          description: The name of the metric you want to attribute to this "delivery".
          type: string
          enum:
            - opened
            - converted
            - delivered
        attributes:
          description: >-
            Contains information about the delivery and the individual who
            received the message.
          type: object
          required:
            - device_token
          properties:
            device_token:
              description: The device that received the message.
              type: string
    cio_subscription_preferences:
      description: >-
        Stores your audience's subscription preferences if you enable our
        [subscription center](https://customer.io/docs/api/track/) feature.
        These items are set automatically when people use the unsubscribe link
        in your messages, but you can set preferences outside the subscription
        flow. To update select topic preferences while preserving those set for
        other topics, use JSON dot notation
        `"cio_subscription_preferences.topics.topic_<topic ID>":<boolean>`.
      type: object
      properties:
        topics:
          description: Contains active topics in your workspace, named `topic_<id>`.
          type: object
          additionalProperties:
            description: >-
              Each property is a boolean named `topic_<id>`. Topic `id` values
              begin at `1` and increment for each new topic. You can find your
              topic ids in [Workspace
              Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
              or by querying our [App
              API](https://customer.io/docs/api/app/#operation/getTopics). For
              each boolean, `true` means that a person is subscribed to the
              topic; false means they are unsubscribed. An empty or missing
              value reverts to the default preference for the topic (opt-in or
              opt-out).
            x-additionalPropertiesName: topic_<id>
            type: boolean
      example:
        topic_1: true
        topic_2: false
        topic_3: true
    workspace:
      description: >-
        Contains workspace properties including the count of messages, people,
        and objects. Customer.io caches these counts, so your data may be up to
        two hours old.
      type: object
      properties:
        id:
          description: The id of the workspace.
          type: integer
          example: 13
        name:
          description: The name of the workspace.
          type: string
          example: Workspace 1
        messages_sent:
          description: >-
            The count of [messages sent](https://customer.io/docs/api/track/)
            via any channel (email, SMS, in-app, push, slack) in the current
            billing period.
          type: integer
          example: 100202
        billable_messages_sent:
          description: >-
            The count of [emails sent](https://customer.io/docs/api/track/) that
            are considered for billing in your current billing period.
            Ultimately, we only bill for the overages on your plan.
          type: integer
          example: 75124
        people:
          description: >-
            The current count of people profiles in the workspace. Updates
            roughly every hour.
          type: integer
          example: 25666
        object_types:
          description: >-
            The current count of object types in the workspace. Updates roughly
            every hour.
          type: integer
          example: 4
        objects:
          description: >-
            The current count of object profiles in the workspace. Updates
            roughly every hour.
          type: integer
          example: 10
    TrackCustomersAddOrUpdatePersonRequest:
      description: >
        The body of the request contains key-value pairs representing attributes
        that you want to assign to, or update for, a person.


        If your request body contains "identifiers" (like `id` or `email`), your
        request attempts to update that person. If the identifier in the path
        and identifiers in the request body belong to different people, your
        request will produce an *Attribute Update Failure*.
      type: object
      additionalProperties:
        description: >-
          Set attributes on customers. Attributes can have string, integer, or
          boolean values.
        x-additionalPropertiesName: Attributes
        oneOf:
          - type: string
          - type: integer
          - type: boolean
      properties:
        id:
          description: >-
            A customer's ID. You can set a person's ID if you identify them by
            email (in the path); you can update this value if you identify a
            person by `cio_id`.
          type: string
        email:
          description: The email address of the customer.
          type: string
          format: email
        anonymous_id:
          description: >-
            An identifier for an anonymous event, like a cookie. If set as an
            attribute on a person, any events bearing the same anonymous value
            are associated with this person. This value must be unique and is
            not reusable.
          type: string
        created_at:
          description: The Unix timestamp when the user was created.
          type: integer
        _update:
          description: >
            If you perform multiple requests in rapid succession when you create
            a person, there's a danger that you could create multiple profiles.
            If you know that a profile already exists and you want to update it,
            set `_update:true`, and Customer.io will _not_ create a new profile,
            even if the `identifier` in the path isn't found.


            If the identifiers in your path or request don't belong to an
            existing person, the request produces a *Failed Attribute Change*
            event in your activity log.
          type: boolean
        cio_relationships:
          description: >-
            Describes relationships to an entity—a non-person object in
            Customer.io, like a company, educational course, job board, etc.
          type: object
          properties:
            action:
              description: >-
                This determines whether the `relationships` array adds
                relationships to a person or removes them from a person.
              type: string
              enum:
                - add_relationships
                - delete_relationships
            relationships:
              description: >-
                Each object in the array represents a relationship you want to
                add to, or remove from, a person.
              type: array
              items:
                allOf:
                  - type: object
                    required:
                      - identifiers
                    properties:
                      identifiers:
                        description: >-
                          Represents an individual object, where the
                          `object_type_id` represents the type of object and the
                          `object_id` is the individual identifier for the
                          object.
                        type: object
                        required:
                          - object_type_id
                          - object_id
                        properties:
                          object_type_id:
                            description: >-
                              The object type an object belongs to—like
                              "Companies" or "Accounts". Object type IDs are
                              string-formatted integers that begin at `1` and
                              increment for each new type.
                            type: string
                            nullable: false
                            example: '1'
                          object_id:
                            description: >-
                              The unique identifier for an object. If you use an
                              `object_id` that already exists, we'll update the
                              object accordingly.
                            type: string
                            nullable: false
                            example: acme
                  - type: object
                    properties:
                      relationship_attributes:
                        description: >
                          [Coming January
                          2024](https://customer.io/docs/api/track/) - If we
                          have not rolled out relationship attributes to your
                          account yet and you send them with your request, your
                          request will go through but we won't store your
                          relationship attributes. The attributes associated
                          with a relationship. Passing null or an empty string
                          removes the attribute from the relationship.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Relationship Attributes
                        example:
                          role: admin
        unsubscribed:
          description: >-
            If true, a person is unsubscribed from all messages. If false, or
            absent, a person is eligible to receive messages as determined by
            their `cio_subscription_preferences`. Like subscription preferences,
            this attribute is automatically set or updated when a person clicks
            the "unsubscribe" link in your emails.
          type: boolean
        cio_subscription_preferences:
          description: >-
            Stores your audience's subscription preferences if you enable our
            [subscription center](https://customer.io/docs/api/track/) feature.
            These items are set automatically when people use the unsubscribe
            link in your messages, but you can set preferences outside the
            subscription flow. To update select topic preferences while
            preserving those set for other topics, use JSON dot notation
            `"cio_subscription_preferences.topics.topic_<topic ID>":<boolean>`.
          type: object
          properties:
            topics:
              description: Contains active topics in your workspace, named `topic_<id>`.
              type: object
              additionalProperties:
                description: >-
                  Each property is a boolean named `topic_<id>`. Topic `id`
                  values begin at `1` and increment for each new topic. You can
                  find your topic ids in [Workspace
                  Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
                  or by querying our [App
                  API](https://customer.io/docs/api/app/#operation/getTopics).
                  For each boolean, `true` means that a person is subscribed to
                  the topic; false means they are unsubscribed. An empty or
                  missing value reverts to the default preference for the topic
                  (opt-in or opt-out).
                x-additionalPropertiesName: topic_<id>
                type: boolean
    AddDeviceRequest:
      description: Define the device you want to add to the customer profile.
      type: object
      required:
        - device
      properties:
        device:
          description: >-
            The properties representing an individual device. [Our
            SDK's](https://customer.io/docs/api/track/) gather all the
            properties defined below automatically, unless you disable the
            `autoTrackDeviceAttributes` setting. You can reference the
            properties outside the `attributes` object in segments or in Liquid.
          allOf:
            - type: object
              required:
                - id
              properties:
                id:
                  description: The device token.
                  type: string
            - description: Device information common to the v1 and v2 APIs.
              type: object
              required:
                - platform
              properties:
                last_used:
                  description: >-
                    The `timestamp` when you last identified this device. If you
                    don't pass a timestamp when you add or update a device, we
                    use the time of the request itself. Our SDKs identify a
                    device when a person launches their app.
                  type: integer
                  format: unix timestamp
                platform:
                  description: The device/messaging platform.
                  type: string
                  enum:
                    - ios
                    - android
                attributes:
                  description: >-
                    Attributes that you can reference to segment your
                    audience—like a person's attributes, but specific to a
                    device. These can be either the attributes defined below or
                    custom key-value attributes.
                  type: object
                  properties:
                    device_os:
                      description: >-
                        The operating system, including the version, on the
                        device.
                      type: string
                    device_model:
                      description: The model of the device a person uses.
                      type: string
                    app_version:
                      description: >-
                        The version of your app that a customer uses. You might
                        target app versions to let people know when they need to
                        update, or expose them to new features when they do.
                      type: string
                    cio_sdk_version:
                      description: The version of the Customer.io SDK in the app.
                      type: string
                    _last_status:
                      description: >-
                        The delivery status of the last message sent to the
                        device—sent, bounced, or suppressed. An empty string
                        indicates that that the device hasn't received a push
                        yet.
                      type: string
                      readOnly: true
                      enum:
                        - ''
                        - bounced
                        - sent
                        - suppressed
                    device_locale:
                      description: >-
                        The four-letter [IETF language
                        code](https://customer.io/docs/api/track/) for the
                        device. For example, `en-MX` (indicating an app in
                        Spanish formatted for a user in Mexico) or `es-ES`
                        (indicating an app in Spanish formatted for a user in
                        Spain).
                      type: string
                    push_enabled:
                      description: >-
                        If `"true"`, the device is opted-in and can receive push
                        notifications.
                      type: string
                      enum:
                        - 'true'
                        - 'false'
                  additionalProperties:
                    description: >-
                      Custom properties that you want to associate with the
                      device.
                    x-additionalPropertiesName: Custom Device Attributes
                    type: string
    TrackCustomersHandleUnsubscribeRequest:
      type: object
      properties:
        unsubscribe:
          description: >-
            If true, a person's `unsubscribed` attribute is set to true and the
            unsubscription is attributed to the delivery.
          type: boolean
          example: true
    TrackEventsPostCustomerEventRequest:
      oneOf:
        - title: Standard event
          type: object
          required:
            - name
          properties:
            name:
              description: >-
                The name of the event. This is how you'll reference the event in
                campaigns or segments.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Sets the event type. If your event isn't a `page` or `screen`
                type event, we automatically set this property to `event`.
              type: string
              enum:
                - event
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.


                **NOTE**: Events with a timestamp in the past 72 hours can
                trigger campaigns.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in your message
                  here.
                x-additionalPropertiesName: liquid merge data
              properties:
                recipient:
                  description: The recipient address for an action.
                  type: string
                  example: '{{customer.email}}'
                from_address:
                  description: >-
                    The address you want to trigger messages from, overriding
                    the `from` field in emails triggered by the event.
                  type: string
                  format: email
                reply_to:
                  description: >-
                    The address that receives replies for the message, if
                    applicable.
                  type: string
                  example: replyto@example.com
          example:
            name: purchase
            data:
              price: 23.45
              product: socks
        - title: Page view
          type: object
          required:
            - name
            - type
          properties:
            name:
              description: >-
                The name of the event. This is how you'll reference the event in
                campaigns or segments.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a page view. See ["page
                view" events](https://customer.io/docs/api/track/), for more
                information.
              type: string
              enum:
                - page
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: https://mysite.com/page
            type: page
            data:
              first_name: Cool
              last_name: Person
        - title: Mobile screen view
          type: object
          required:
            - anonymous_id
            - name
            - type
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. In general, this should be the name of
                the screen or deep link path that a person viewed, making it
                easy to segment your audience or trigger campaigns from these
                events. Make sure you trim leading and trailing spaces from this
                field.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a mobile screen view. You
                can also capture screen events directly with [our iOS
                SDK](https://customer.io/docs/api/track/).
              type: string
              enum:
                - screen
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: homepage
            type: screen
            data:
              from: push-notification
    TrackEventsCreateAnonymousEventRequest:
      description: >-
        An event attributed to an unknown person. If you provide an
        `anonymous_id` with the event, you can associate the event with a person
        later (using the anonymous ID).
      oneOf:
        - title: Standard anonymous event
          type: object
          required:
            - name
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. This is how you'll reference the event in
                campaigns or segments.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Sets the event type. If your event isn't a `page` or `screen`
                type event, we automatically set this property to `event`.
              type: string
              enum:
                - event
                - page
                - screen
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`). You can include `from_address`
                and `reply_to`, but the event can only trigger a campaign if it
                is associated with a person within 72 hours of its timestamp.
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
              properties:
                from_address:
                  description: >-
                    The address you want to trigger messages from, overriding
                    the `from` field in emails triggered by the event.
                  type: string
                  format: email
                reply_to:
                  description: >-
                    The address that receives replies for the message, if
                    applicable.
                  type: string
                  example: replyto@example.com
          example:
            name: watched_video
            anonymous_id: abc123
            data:
              video: intro-to-platform
        - title: Page view
          type: object
          required:
            - name
            - type
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. In general, this should be the URL of the
                page a person visited, making it easy to segment your audience
                or trigger campaigns using this event. Make sure you trim
                leading and trailing spaces from this field.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a page view. See ["page
                view" events](https://customer.io/docs/api/track/), for more
                information.
              type: string
              enum:
                - page
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: https://mysite.com/page
            type: page
            anonymous_id: abc123
            data:
              first_name: Person
        - title: Mobile screen view
          type: object
          required:
            - name
            - type
          properties:
            anonymous_id:
              description: >-
                An identifier for an anonymous event, like a cookie. If set as
                an attribute on a person, any events bearing the same anonymous
                value are associated with this person. This value must be unique
                and is not reusable.
              type: string
            name:
              description: >-
                The name of the event. In general, this should be the name of
                the screen or deep link path that a person viewed, making it
                easy to segment your audience or trigger campaigns using this
                event. Make sure you trim leading and trailing spaces from this
                field.
              type: string
            id:
              description: >-
                An identifier used to deduplicate events. This value must be a
                [ULID](https://github.com/ulid/spec). If an event has the same
                value as an event we previously received, we won't show or
                process the duplicate. Note - our Python and Ruby libraries do
                not pass this id.
              type: string
              format: ulid
            type:
              description: >-
                Indicates that the event represents a mobile screen view. You
                can also capture screen events directly with [our iOS
                SDK](https://customer.io/docs/api/track/).
              type: string
              enum:
                - screen
            timestamp:
              description: >
                The unix timestamp when the event took place. If you don't
                provide this value, we use the date-time when we receive the
                event.
              type: integer
              format: unix timestamp
            data:
              description: >-
                Additional information that you might want to reference in a
                message using liquid or use to set attributes on your customer
                (referenced by `customer_id`).
              type: object
              additionalProperties:
                description: >-
                  Insert key-values that you want to reference in messages or
                  convert to attributes if/when you associate this event with a
                  person.
                x-additionalPropertiesName: liquid merge data
          example:
            name: homepage
            type: screen
            anonymous_id: abc123
    FormsSubmitFormResponseRequest:
      description: >
        The body of the request contains key-value pairs representing form
        fields; these values are mapped to attributes. Your request must contain
        one of—and only one of—`email` or `id` to identify a person (depending
        on the identifiers supported in your workspace). If the person who
        filled out your form does not already exist, the request creates them.
        If your request includes more than one identifier, you'll receive an
        error.


        **NOTE**: If your form field is called something like `email_address`,
        you'll receive a `400`, but we'll still add your form on the **Data &
        Integrations** > **Integrations** > **Forms** page. You can then re-map
        your `email_address` field to `email`, and your form will begin working
        normally.
         
        Additional keys in the `data` object represent form fields from the form
        that a person submitted. By default, we map form fields in your request
        directly to attributes, e.g. if you have a form field called
        `first_name`, we map that field to the `first_name` attribute. However,
        if you added or edited this form on the *Data & Integration* > *Forms*
        page, you can re-map form fields to attributes. If you turned off a form
        field on the *Forms* page, you can still include it in your request, but
        it is not applied to the person your form identifies.
      type: object
      required:
        - data
      properties:
        data:
          description: >
            Represents your form data. By default, we assume that form fields
            map directly to attributes (e.g. if your form field is called
            `name`, we assume it represents an attribute called "name").
            However, you can re-map form fields to attributes on the **Forms**
            page in your workspace.


            Values for form fields _must_ be formatted as strings.
          oneOf:
            - title: identify by email
              description: Identify the person who submitted your form by email.
              type: object
              required:
                - email
              properties:
                email:
                  description: The email address of the customer.
                  type: string
                  nullable: true
                  example: test@example.com
              additionalProperties:
                description: >
                  Fields from the form and associated values; values _must_ be
                  formatted as strings. Each key represents an a form field. You
                  can map form fields to attributes in the UI; by default, we
                  assume that a form field maps directly to an attribute name.


                  Customer.io reserves `form_id`, `form_name`, `form_type`,
                  `form_url`, and `form_url_param` keys. If your request
                  includes these keys, Customer.io ignores them.
                x-additionalPropertiesName: Form fields
                type: string
              example:
                email: cool.person@example.com
                first_name: cool
                last_name: person
                fav_food: pizza
            - title: identify by id
              description: Identify the person who submitted your form by ID.
              type: object
              required:
                - id
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI. If your workspace supports multiple identifiers (email
                    and ID), this value can be null.
                  type: string
                  nullable: true
                  example: '42'
              additionalProperties:
                description: >
                  Fields from the form and associated values; values _must_ be
                  formatted as strings. Each key represents an a form field. You
                  can map form fields to attributes in the UI; by default, we
                  assume that a form field maps directly to an attribute name.


                  Customer.io reserves `form_id`, `form_name`, and `form_type`
                  keys. If your request includes these keys, Customer.io ignores
                  them.
                x-additionalPropertiesName: Form fields
                type: string
              example:
                id: 12345
                first_name: cool
                last_name: person
                fav_food: pizza
    TrackCustomersMergePeopleRequest:
      description: >-
        Provide identifiers for the `primary` and `secondary` people you want to
        merge together.
      type: object
      required:
        - primary
        - secondary
      properties:
        primary:
          description: >-
            The person that you want to remain after the merge, identified by
            one of `id`, `email`, or `cio_id`. This person receives information
            from the secondary person in the merge.
          oneOf:
            - title: ID
              type: object
              maxProperties: 1
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI.
                  type: string
                  example: '42'
            - title: email
              type: object
              maxProperties: 1
              properties:
                email:
                  description: The email address of the customer.
                  type: string
                  example: test@example.com
            - title: cio_id
              type: object
              maxProperties: 1
              properties:
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
        secondary:
          description: >-
            The person that you want to delete after the merge, identified by
            one of `id`, `email`, or `cio_id`. This person's information is
            merged into the primary person's profile and then it is deleted.
          oneOf:
            - title: ID
              type: object
              maxProperties: 1
              properties:
                id:
                  description: >-
                    The ID of a customer profile, analogous to a "person" in the
                    UI.
                  type: string
                  example: '42'
            - title: email
              type: object
              maxProperties: 1
              properties:
                email:
                  description: The email address of the customer.
                  type: string
                  example: test@example.com
            - title: cio_id
              type: object
              maxProperties: 1
              properties:
                cio_id:
                  description: >-
                    A unique identifier set by Customer.io, used to reference a
                    person if you want to update their identifiers.
                  type: string
                  example: a3000001
    TrackEventsReportMetricsRequest:
      oneOf:
        - title: Email
          allOf:
            - description: The base properties shared across multiple metric types.
              type: object
              required:
                - delivery_id
              properties:
                delivery_id:
                  description: >-
                    The CIO-Delivery-ID from the notification that you want to
                    associate the `event` with.
                  type: string
                  example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
                timestamp:
                  description: The unix timestamp when the event occurred.
                  type: integer
                  format: unix timestamp
                  example: 1613063089
            - type: object
              required:
                - metric
              properties:
                metric:
                  description: The email metric you want to report back to Customer.io.
                  type: string
                  enum:
                    - bounced
                    - clicked
                    - converted
                    - deferred
                    - delivered
                    - dropped
                    - opened
                    - spammed
                recipient:
                  description: The email of the person who received the message.
                  type: string
                reason:
                  description: >-
                    For metrics indicating a failure (like `bounced`), this
                    field provides the reason for the failure.
                  type: string
                href:
                  description: >-
                    For `clicked` metrics, this is the link the recipient
                    clicked.
                  type: string
        - title: In-app
          allOf:
            - description: The base properties shared across multiple metric types.
              type: object
              required:
                - delivery_id
              properties:
                delivery_id:
                  description: >-
                    The CIO-Delivery-ID from the notification that you want to
                    associate the `event` with.
                  type: string
                  example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
                timestamp:
                  description: The unix timestamp when the event occurred.
                  type: integer
                  format: unix timestamp
                  example: 1613063089
            - type: object
              required:
                - metric
              properties:
                metric:
                  description: >-
                    The type of device-side event you want to report back to
                    Customer.io.
                  type: string
                  enum:
                    - clicked
                    - converted
                    - opened
                recipient:
                  description: >-
                    The email address or ID of the recipient (depending on the
                    value you use to target in-app messages).
                  type: string
                href:
                  description: >-
                    For `clicked` metrics, this is the link the recipient
                    clicked.
                  type: string
        - title: Push
          allOf:
            - description: The base properties shared across multiple metric types.
              type: object
              required:
                - delivery_id
              properties:
                delivery_id:
                  description: >-
                    The CIO-Delivery-ID from the notification that you want to
                    associate the `event` with.
                  type: string
                  example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
                timestamp:
                  description: The unix timestamp when the event occurred.
                  type: integer
                  format: unix timestamp
                  example: 1613063089
            - type: object
              required:
                - metric
              properties:
                metric:
                  description: >-
                    The type of device-side event you want to report back to
                    Customer.io.
                  type: string
                  enum:
                    - converted
                    - delivered
                    - opened
                recipient:
                  description: The device ID that the message was sent to.
                  type: string
        - title: Slack
          allOf:
            - description: The base properties shared across multiple metric types.
              type: object
              required:
                - delivery_id
              properties:
                delivery_id:
                  description: >-
                    The CIO-Delivery-ID from the notification that you want to
                    associate the `event` with.
                  type: string
                  example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
                timestamp:
                  description: The unix timestamp when the event occurred.
                  type: integer
                  format: unix timestamp
                  example: 1613063089
            - type: object
              required:
                - metric
              properties:
                metric:
                  description: The metric you want to report back to Customer.io.
                  type: string
                  enum:
                    - clicked
                    - converted
                    - delivered
                    - opened
                href:
                  description: >-
                    For `clicked` metrics, this is the link the recipient
                    clicked.
                  type: string
        - title: SMS
          allOf:
            - description: The base properties shared across multiple metric types.
              type: object
              required:
                - delivery_id
              properties:
                delivery_id:
                  description: >-
                    The CIO-Delivery-ID from the notification that you want to
                    associate the `event` with.
                  type: string
                  example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
                timestamp:
                  description: The unix timestamp when the event occurred.
                  type: integer
                  format: unix timestamp
                  example: 1613063089
            - type: object
              required:
                - metric
              properties:
                metric:
                  description: The SMS metric you want to report back to Customer.io.
                  type: string
                  enum:
                    - bounced
                    - clicked
                    - delivered
                    - opened
                recipient:
                  description: The phone number of the person who received the message.
                  type: integer
                reason:
                  description: >-
                    For metrics indicating a failure (like `bounced`), this
                    field provides the reason for the failure.
                  type: string
                href:
                  description: >-
                    For `clicked` metrics, this is the link the recipient
                    clicked.
                  type: string
        - title: Webhook
          allOf:
            - description: The base properties shared across multiple metric types.
              type: object
              required:
                - delivery_id
              properties:
                delivery_id:
                  description: >-
                    The CIO-Delivery-ID from the notification that you want to
                    associate the `event` with.
                  type: string
                  example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
                timestamp:
                  description: The unix timestamp when the event occurred.
                  type: integer
                  format: unix timestamp
                  example: 1613063089
            - type: object
              required:
                - metric
              properties:
                metric:
                  description: >-
                    The type of device-side event you want to report back to
                    Customer.io.
                  type: string
                  enum:
                    - bounced
                    - clicked
                    - converted
                    - deferred
                    - delivered
                    - dropped
                    - opened
                    - spammed
                reason:
                  description: >-
                    For metrics indicating a failure (like `bounced`), this
                    field provides the reason for the failure.
                  type: string
                href:
                  description: >-
                    For `clicked` metrics, this is the link the recipient
                    clicked.
                  type: string
    TrackEventsReportPushMetricsRequest:
      type: object
      properties:
        delivery_id:
          description: >-
            The CIO-Delivery-ID from the notification that you want to associate
            the `event` with.
          type: string
          example: RPILAgUBcRhIBqSfeiIwdIYJKxTY
        event:
          description: >-
            The type of device-side event you want to report back to
            Customer.io.
          type: string
          enum:
            - opened
            - converted
            - delivered
        device_id:
          description: >-
            The CIO-Delivery-Token representing the device that received the
            original notification.
          type: string
          example: CIO-Delivery-Token from the notification
        timestamp:
          description: The unix timestamp when the event occurred.
          type: integer
          format: unix timestamp
          example: 1613063089
    TrackSegmentsAddCustomersToManualSegmentRequest:
      description: The IDs of people you want to add to the segment.
      type: object
      required:
        - ids
      properties:
        ids:
          description: The customer IDs you want to add to the segment.
          type: array
          maxItems: 1000
          minItems: 1
          items:
            description: The customer IDs you want to add to the segment.
            type: string
    TrackSegmentsRemoveCustomersRequest:
      description: The IDs of people you want to remove from the segment.
      type: object
      required:
        - ids
      properties:
        ids:
          description: The customer IDs you want to remove from the segment.
          type: array
          maxItems: 1000
          minItems: 1
          items:
            description: The customer IDs you want to remove from the segment.
            type: string
    Trackv2CreateEntityRequest:
      oneOf:
        - title: Person
          oneOf:
            - title: identify
              description: Add or update a person.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Indicates that the operation will `identify` the the
                        item of the specified `type`.
                      type: string
                      enum:
                        - identify
                    attributes:
                      description: >-
                        Attributes that you want to add or update for this
                        person.
                      type: object
                      properties:
                        cio_subscription_preferences:
                          description: >-
                            Stores your audience's subscription preferences if
                            you enable our [subscription
                            center](https://customer.io/docs/api/track/)
                            feature. These items are set automatically when
                            people use the unsubscribe link in your messages,
                            but you can set preferences outside the subscription
                            flow. To update select topic preferences while
                            preserving those set for other topics, use JSON dot
                            notation
                            `"cio_subscription_preferences.topics.topic_<topic
                            ID>":<boolean>`.
                          type: object
                          properties:
                            topics:
                              description: >-
                                Contains active topics in your workspace, named
                                `topic_<id>`.
                              type: object
                              additionalProperties:
                                description: >-
                                  Each property is a boolean named `topic_<id>`.
                                  Topic `id` values begin at `1` and increment
                                  for each new topic. You can find your topic
                                  ids in [Workspace
                                  Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
                                  or by querying our [App
                                  API](https://customer.io/docs/api/app/#operation/getTopics).
                                  For each boolean, `true` means that a person
                                  is subscribed to the topic; false means they
                                  are unsubscribed. An empty or missing value
                                  reverts to the default preference for the
                                  topic (opt-in or opt-out).
                                x-additionalPropertiesName: topic_<id>
                                type: boolean
                          example:
                            topic_1: true
                            topic_2: false
                            topic_3: true
                    cio_relationships:
                      description: >-
                        Each object in the array represents a relationship you
                        want to add to, or remove from, a person.
                      type: array
                      items:
                        allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            properties:
                              relationship_attributes:
                                description: >
                                  [Coming January
                                  2024](https://customer.io/docs/api/track/) -
                                  If we have not rolled out relationship
                                  attributes to your account yet and you send
                                  them with your request, your request will go
                                  through but we won't store your relationship
                                  attributes. The attributes associated with a
                                  relationship. Passing null or an empty string
                                  removes the attribute from the relationship.
                                type: object
                                additionalProperties:
                                  x-additionalPropertiesName: Relationship Attributes
                                example:
                                  role: admin
            - title: delete
              description: Delete a person from your workspace.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Indicates that the operation will `delete` the the item
                        of the specified `type`.
                      type: string
                      enum:
                        - delete
            - description: >-
                A custom event attributed to a person. You can use events to
                trigger campaigns, or reference event information using liquid
                in your messages.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - name
                  properties:
                    action:
                      description: A custom event attributed to the specified person.
                      type: string
                      enum:
                        - event
                    id:
                      description: >-
                        A valid ULID used to deduplicate events. Note - our
                        Python and Ruby libraries do not pass this id.
                      type: string
                      format: ULID
                    name:
                      description: >-
                        The name of the event. This is how you'll find your
                        event in Customer.io or select it when using events as
                        campaign triggers.
                      type: string
                    timestamp:
                      description: The Unix timestamp when the event happened.
                      type: integer
                    attributes:
                      description: >
                        Additional information that you might want to reference
                        in a message using liquid or use to set attributes on
                        the identified person.
                      type: object
                      additionalProperties:
                        description: >-
                          Insert key-values that you want to reference in your
                          message here.
                        x-additionalPropertiesName: liquid merge data
                      properties:
                        recipient:
                          description: >-
                            The email address of the person associated with the
                            event, overriding the `to` field in emails triggered
                            by the event.
                          type: string
                          format: email
                        from_address:
                          description: >-
                            The address you want to trigger messages from,
                            overriding the `from` field in emails triggered by
                            the event.
                          type: string
                          format: email
                        reply_to:
                          description: >-
                            The address you want to receive replies to,
                            overriding the `reply to` field for emails triggered
                            by the event.
                          type: string
                          format: email
            - description: >-
                A mobile "screenview" event attributed to a person. Our `screen`
                and `page` event types are more specific than our standard
                `event`, and help you track and target people based on the pages
                people visit in your mobile app or website.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - name
                  properties:
                    action:
                      description: >-
                        A mobile "screenview" event attributed to a person. Our
                        `screen` and `page` event types are more specific than
                        our standard `event`, and help you track and target
                        people based on the pages people visit in your mobile
                        app or website.
                      type: string
                      enum:
                        - screen
                    id:
                      description: >-
                        A valid ULID used to deduplicate events. Note - our
                        Python and Ruby libraries do not pass this id.
                      type: string
                      format: ULID
                    name:
                      description: >-
                        The name of the screen a person visited. This is how
                        you'll find and select screen view events in
                        Customer.io.
                      type: string
                    timestamp:
                      description: The Unix timestamp when the event happened.
                      type: integer
                    attributes:
                      description: >-
                        Additional information that you might want to reference
                        in a message using liquid or use to set attributes on
                        the identified person.
                      type: object
                      additionalProperties:
                        description: >-
                          Insert key-values that you want to reference in your
                          message here.
                        x-additionalPropertiesName: liquid merge data
            - description: >-
                A web "pageview" event attributed to a person. Our `screen` and
                `page` event types are more specific than our standard `event`,
                and help you track and target people based on the pages people
                visit in your mobile app or website.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - name
                  properties:
                    action:
                      description: >-
                        A web "pageview" event attributed to a person. Our
                        `screen` and `page` event types are more specific than
                        our standard `event`, and help you track and target
                        people based on the pages people visit in your mobile
                        app or website.
                      type: string
                      enum:
                        - screen
                    id:
                      description: >-
                        A valid ULID used to deduplicate events. Note - our
                        Python and Ruby libraries do not pass this id.
                      type: string
                      format: ULID
                    name:
                      description: >-
                        The name of the page or page path that a person visited.
                        This is how you'll find and select page view events in
                        Customer.io.
                      type: string
                    timestamp:
                      description: The Unix timestamp when the event happened.
                      type: integer
                    attributes:
                      description: >-
                        Additional information that you might want to reference
                        in a message using liquid or use to set attributes on
                        the identified person.
                      type: object
                      additionalProperties:
                        description: >-
                          Insert key-values that you want to reference in your
                          message here.
                        x-additionalPropertiesName: liquid merge data
            - title: add_relationships
              description: Associate multiple objects with a person.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - cio_relationships
                  properties:
                    action:
                      description: >-
                        This operation associates a person with one or more
                        objects.
                      type: string
                      enum:
                        - add_relationships
                    cio_relationships:
                      description: >-
                        Each object in the array represents a relationship you
                        want to add to, or remove from, a person.
                      type: array
                      items:
                        allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            properties:
                              relationship_attributes:
                                description: >
                                  [Coming January
                                  2024](https://customer.io/docs/api/track/) -
                                  If we have not rolled out relationship
                                  attributes to your account yet and you send
                                  them with your request, your request will go
                                  through but we won't store your relationship
                                  attributes. The attributes associated with a
                                  relationship. Passing null or an empty string
                                  removes the attribute from the relationship.
                                type: object
                                additionalProperties:
                                  x-additionalPropertiesName: Relationship Attributes
                                example:
                                  role: admin
            - title: delete_relationships
              description: Remove multiple object relationships from a person.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - cio_relationships
                  properties:
                    action:
                      description: >-
                        This operation deletes an object relationship from one
                        or more people.
                      type: string
                      enum:
                        - delete_relationships
                    cio_relationships:
                      description: >-
                        Each object in the array represents a relationship you
                        want to add to, or remove from, a person.
                      type: array
                      items:
                        allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            properties:
                              relationship_attributes:
                                description: >
                                  [Coming January
                                  2024](https://customer.io/docs/api/track/) -
                                  If we have not rolled out relationship
                                  attributes to your account yet and you send
                                  them with your request, your request will go
                                  through but we won't store your relationship
                                  attributes. The attributes associated with a
                                  relationship. Passing null or an empty string
                                  removes the attribute from the relationship.
                                type: object
                                additionalProperties:
                                  x-additionalPropertiesName: Relationship Attributes
                                example:
                                  role: admin
            - title: add_device
              description: Assign devices to a person.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - device
                  properties:
                    action:
                      description: Add a mobile device to a person's profile.
                      type: string
                      enum:
                        - add_device
                    device:
                      description: >-
                        The properties representing an individual device. [Our
                        SDK's](https://customer.io/docs/api/track/) gather all
                        the properties defined below automatically, unless you
                        disable the `autoTrackDeviceAttributes` setting. You can
                        reference the properties outside the `attributes` object
                        in segments.
                      allOf:
                        - type: object
                          required:
                            - token
                          properties:
                            token:
                              description: The device token.
                              type: string
                        - description: Device information common to the v1 and v2 APIs.
                          type: object
                          required:
                            - platform
                          properties:
                            last_used:
                              description: >-
                                The `timestamp` when you last identified this
                                device. If you don't pass a timestamp when you
                                add or update a device, we use the time of the
                                request itself. Our SDKs identify a device when
                                a person launches their app.
                              type: integer
                              format: unix timestamp
                            platform:
                              description: The device/messaging platform.
                              type: string
                              enum:
                                - ios
                                - android
                            attributes:
                              description: >-
                                Attributes that you can reference to segment
                                your audience—like a person's attributes, but
                                specific to a device. These can be either the
                                attributes defined below or custom key-value
                                attributes.
                              type: object
                              properties:
                                device_os:
                                  description: >-
                                    The operating system, including the version,
                                    on the device.
                                  type: string
                                device_model:
                                  description: The model of the device a person uses.
                                  type: string
                                app_version:
                                  description: >-
                                    The version of your app that a customer
                                    uses. You might target app versions to let
                                    people know when they need to update, or
                                    expose them to new features when they do.
                                  type: string
                                cio_sdk_version:
                                  description: >-
                                    The version of the Customer.io SDK in the
                                    app.
                                  type: string
                                _last_status:
                                  description: >-
                                    The delivery status of the last message sent
                                    to the device—sent, bounced, or suppressed.
                                    An empty string indicates that that the
                                    device hasn't received a push yet.
                                  type: string
                                  readOnly: true
                                  enum:
                                    - ''
                                    - bounced
                                    - sent
                                    - suppressed
                                device_locale:
                                  description: >-
                                    The four-letter [IETF language
                                    code](https://customer.io/docs/api/track/)
                                    for the device. For example, `en-MX`
                                    (indicating an app in Spanish formatted for
                                    a user in Mexico) or `es-ES` (indicating an
                                    app in Spanish formatted for a user in
                                    Spain).
                                  type: string
                                push_enabled:
                                  description: >-
                                    If `"true"`, the device is opted-in and can
                                    receive push notifications.
                                  type: string
                                  enum:
                                    - 'true'
                                    - 'false'
                              additionalProperties:
                                description: >-
                                  Custom properties that you want to associate
                                  with the device.
                                x-additionalPropertiesName: Custom Device Attributes
                                type: string
            - title: delete_device
              description: Delete devices that belong to a person.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                    - device
                  properties:
                    action:
                      description: Delete a device from a person's profile.
                      type: string
                      enum:
                        - delete_device
                    device:
                      description: The device you want to remove.
                      type: object
                      required:
                        - token
                      properties:
                        token:
                          description: The token of the device you want to remove.
                          type: string
            - description: >
                Merge two people. You'll merge the `secondary` person into the
                `primary`. The primary profile remains after the merge and the
                secondary is deleted. This operation is _not_ reversible. See
                our page on [merging duplicate
                people](https://customer.io/docs/api/track/) for more
                information.
              type: object
              required:
                - type
                - primary
                - secondary
                - action
              properties:
                type:
                  description: The operation modifies a person in Customer.io
                  type: string
                  enum:
                    - person
                action:
                  description: >
                    Merge two people. You'll merge the `secondary` person into
                    the `primary`. The primary profile remains after the merge
                    and the secondary is deleted. This operation is _not_
                    reversible. See our page on [merging duplicate
                    people](https://customer.io/docs/api/track/) for more
                    information.
                  type: string
                  enum:
                    - merge
                primary:
                  description: >-
                    The person that you want to remain after the merge,
                    identified by one of `id`, `email`, or `cio_id`. This person
                    receives information from the secondary person in the merge.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
                secondary:
                  description: >-
                    The person that you want to delete after the merge,
                    identified by one of `id`, `email`, or `cio_id`. This
                    person's information is merged into the primary person's
                    profile and then it is deleted.
                  oneOf:
                    - title: id
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          description: >-
                            The ID of a customer profile, analogous to a
                            "person" in the UI.
                          type: string
                          example: '42'
                    - title: email
                      type: object
                      required:
                        - email
                      properties:
                        email:
                          description: The email address of the customer.
                          type: string
                          example: test@example.com
                    - title: cio_id
                      type: object
                      required:
                        - cio_id
                      properties:
                        cio_id:
                          description: >-
                            A unique identifier set by Customer.io, used to
                            reference a person if you want to update their
                            identifiers.
                          type: string
                          example: a3000001
            - title: suppress
              description: >-
                Suppress a person's identifier(s) in Customer.io, so that you
                can't message a person or add their identifiers back to your
                workspace. This is separate from suppressions performed by your
                email provider.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Suppress a person's identifier(s) in Customer.io, so
                        that you can't message a person or add their identifiers
                        back to your workspace. This is separate from
                        suppressions performed by your email provider.
                      type: string
                      enum:
                        - suppress
            - title: unsuppress
              description: >-
                Unsuppress a person's identifier(s) in Customer.io, so that you
                can message a person or add their identifiers back to your
                workspace. This does not unsuppress addresses that were
                previously suppressed by your email provider.
              allOf:
                - type: object
                  required:
                    - type
                    - identifiers
                  properties:
                    type:
                      description: The operation modifies a person in Customer.io
                      type: string
                      enum:
                        - person
                    identifiers:
                      description: >-
                        The person you want to perform an action for—one of
                        either `id`, `email`, or `cio_id`. You cannot pass
                        multiple identifiers.
                      oneOf:
                        - title: id
                          type: object
                          required:
                            - id
                          properties:
                            id:
                              description: >-
                                The ID of a customer profile, analogous to a
                                "person" in the UI.
                              type: string
                              example: '42'
                        - title: email
                          type: object
                          required:
                            - email
                          properties:
                            email:
                              description: The email address of the customer.
                              type: string
                              example: test@example.com
                        - title: cio_id
                          type: object
                          required:
                            - cio_id
                          properties:
                            cio_id:
                              description: >-
                                A unique identifier set by Customer.io, used to
                                reference a person if you want to update their
                                identifiers.
                              type: string
                              example: a3000001
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Unsuppress a person's identifier(s) in Customer.io, so
                        that you can message a person or add their identifiers
                        back to your workspace. This does not unsuppress
                        addresses that were previously suppressed by your email
                        provider.
                      type: string
                      enum:
                        - unsuppress
          discriminator:
            propertyName: action
            mapping:
              identify: '#/components/schemas/identify_person'
              delete: '#/components/schemas/person_delete'
              event: '#/components/schemas/person_event'
              screen: '#/components/schemas/person_screen'
              page: '#/components/schemas/person_page'
              add_relationships: '#/components/schemas/person_add_relationships'
              delete_relationships: '#/components/schemas/person_delete_relationships'
              add_device: '#/components/schemas/person_add_device'
              delete_device: '#/components/schemas/person_delete_device'
              merge: '#/components/schemas/person_merge'
              suppress: '#/components/schemas/person_suppress'
              unsuppress: '#/components/schemas/person_unsuppress'
        - title: Object
          oneOf:
            - title: identify
              description: >
                The `action` determines the type of operation you want to
                perform with an object. If `identifiers.object_id` does not
                exist, we'll create a new object; if it exists, we'll update the
                object accordingly.
              type: object
              allOf:
                - allOf:
                    - type: object
                      required:
                        - identifiers
                      properties:
                        identifiers:
                          description: >-
                            Represents an individual object, where the
                            `object_type_id` represents the type of object and
                            the `object_id` is the individual identifier for the
                            object.
                          type: object
                          required:
                            - object_type_id
                            - object_id
                          properties:
                            object_type_id:
                              description: >-
                                The object type an object belongs to—like
                                "Companies" or "Accounts". Object type IDs are
                                string-formatted integers that begin at `1` and
                                increment for each new type.
                              type: string
                              nullable: false
                              example: '1'
                            object_id:
                              description: >-
                                The unique identifier for an object. If you use
                                an `object_id` that already exists, we'll update
                                the object accordingly.
                              type: string
                              nullable: false
                              example: acme
                    - type: object
                      required:
                        - type
                      properties:
                        type:
                          description: >-
                            The operation modifies a single object—non person
                            data.
                          type: string
                          enum:
                            - object
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Indicates that the operation will `identify` the the
                        item of the specified `type`.
                      type: string
                      enum:
                        - identify
                    attributes:
                      description: >-
                        The data that belongs to the object. This is information
                        you might want to associate with people later (through
                        `cio_relationships`). Passing `null` or an empty string
                        removes the attribute from the object.
                      type: object
                    cio_relationships:
                      description: >-
                        The people you want to associate with an object. Each
                        object in the array represents a person.
                      type: array
                      items:
                        type: object
                        properties:
                          identifiers:
                            oneOf:
                              - title: id
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                          relationship_attributes:
                            description: >
                              [Coming January
                              2024](https://customer.io/docs/api/track/) - If we
                              have not rolled out relationship attributes to
                              your account yet and you send them with your
                              request, your request will go through but we won't
                              store your relationship attributes. The attributes
                              associated with a relationship. Passing null or an
                              empty string removes the attribute from the
                              relationship.
                            type: object
                            additionalProperties:
                              x-additionalPropertiesName: Relationship Attributes
                        example:
                          identifiers:
                            id: 42X
                          relationship_attributes:
                            role: admin
                            date_created: 1702480414
            - title: identify_anonymous
              description: >-
                The `identify_anonymous` action lets you relate an object to a
                person who hasn't yet identified themselves by anonymous_id.
                When you identify the person, their anonymous relationship will
                carry over to the identified profile.
              allOf:
                - allOf:
                    - type: object
                      required:
                        - identifiers
                      properties:
                        identifiers:
                          description: >-
                            Represents an individual object, where the
                            `object_type_id` represents the type of object and
                            the `object_id` is the individual identifier for the
                            object.
                          type: object
                          required:
                            - object_type_id
                            - object_id
                          properties:
                            object_type_id:
                              description: >-
                                The object type an object belongs to—like
                                "Companies" or "Accounts". Object type IDs are
                                string-formatted integers that begin at `1` and
                                increment for each new type.
                              type: string
                              nullable: false
                              example: '1'
                            object_id:
                              description: >-
                                The unique identifier for an object. If you use
                                an `object_id` that already exists, we'll update
                                the object accordingly.
                              type: string
                              nullable: false
                              example: acme
                    - type: object
                      required:
                        - type
                      properties:
                        type:
                          description: >-
                            The operation modifies a single object—non person
                            data.
                          type: string
                          enum:
                            - object
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Indicates that the operation will `identify` the item of
                        the specified `type` and relate it to an `anonymous_id`.
                      type: string
                      enum:
                        - identify_anonymous
                    attributes:
                      description: >-
                        The data that belongs to the object. This is information
                        you might want to associate with people later (through
                        `cio_relationships`). Passing `null` or an empty string
                        removes the attribute from the object.
                      type: object
                    cio_relationships:
                      description: >-
                        The anonymous people you want to associate with an
                        object. Each object in the array contains an
                        `anonymous_id` representing a person you haven't yet
                        identified by `id` or `email`.
                      type: array
                      items:
                        type: object
                        properties:
                          identifiers:
                            type: object
                            properties:
                              anonymous_id:
                                description: >-
                                  An identifier for an anonymous event, like a
                                  cookie. If set as an attribute on a person,
                                  any events bearing the same anonymous value
                                  are associated with this person. This value
                                  must be unique and is not reusable.
                                type: string
                          relationship_attributes:
                            description: >-
                              Coming October 2023 - The attributes associated
                              with a relationship. Passing null or an empty
                              string removes the attribute from the
                              relationship.
                            type: object
            - title: delete
              description: |
                Delete an object. This also removes relationships from people.
              allOf:
                - allOf:
                    - type: object
                      required:
                        - identifiers
                      properties:
                        identifiers:
                          description: >-
                            Represents an individual object, where the
                            `object_type_id` represents the type of object and
                            the `object_id` is the individual identifier for the
                            object.
                          type: object
                          required:
                            - object_type_id
                            - object_id
                          properties:
                            object_type_id:
                              description: >-
                                The object type an object belongs to—like
                                "Companies" or "Accounts". Object type IDs are
                                string-formatted integers that begin at `1` and
                                increment for each new type.
                              type: string
                              nullable: false
                              example: '1'
                            object_id:
                              description: >-
                                The unique identifier for an object. If you use
                                an `object_id` that already exists, we'll update
                                the object accordingly.
                              type: string
                              nullable: false
                              example: acme
                    - type: object
                      required:
                        - type
                      properties:
                        type:
                          description: >-
                            The operation modifies a single object—non person
                            data.
                          type: string
                          enum:
                            - object
                - type: object
                  required:
                    - action
                  properties:
                    action:
                      description: >-
                        Indicates that the operation will `delete` the the item
                        of the specified `type`.
                      type: string
                      enum:
                        - delete
            - title: add_relationships
              description: Add relationships between an object and one or more people.
              allOf:
                - allOf:
                    - type: object
                      required:
                        - identifiers
                      properties:
                        identifiers:
                          description: >-
                            Represents an individual object, where the
                            `object_type_id` represents the type of object and
                            the `object_id` is the individual identifier for the
                            object.
                          type: object
                          required:
                            - object_type_id
                            - object_id
                          properties:
                            object_type_id:
                              description: >-
                                The object type an object belongs to—like
                                "Companies" or "Accounts". Object type IDs are
                                string-formatted integers that begin at `1` and
                                increment for each new type.
                              type: string
                              nullable: false
                              example: '1'
                            object_id:
                              description: >-
                                The unique identifier for an object. If you use
                                an `object_id` that already exists, we'll update
                                the object accordingly.
                              type: string
                              nullable: false
                              example: acme
                    - type: object
                      required:
                        - type
                      properties:
                        type:
                          description: >-
                            The operation modifies a single object—non person
                            data.
                          type: string
                          enum:
                            - object
                - type: object
                  required:
                    - action
                    - cio_relationships
                  properties:
                    action:
                      description: >-
                        This operation associates an object with one or more
                        people.
                      type: string
                      enum:
                        - add_relationships
                    cio_relationships:
                      description: >-
                        The people you want to associate with an object. Each
                        object in the array represents a person.
                      type: array
                      items:
                        type: object
                        properties:
                          identifiers:
                            oneOf:
                              - title: id
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                          relationship_attributes:
                            description: >
                              [Coming January
                              2024](https://customer.io/docs/api/track/) - If we
                              have not rolled out relationship attributes to
                              your account yet and you send them with your
                              request, your request will go through but we won't
                              store your relationship attributes. The attributes
                              associated with a relationship. Passing null or an
                              empty string removes the attribute from the
                              relationship.
                            type: object
                            additionalProperties:
                              x-additionalPropertiesName: Relationship Attributes
                        example:
                          identifiers:
                            id: 42X
                          relationship_attributes:
                            role: admin
                            date_created: 1702480414
            - title: delete_relationships
              description: Delete relationships between an object and one or more people.
              allOf:
                - allOf:
                    - type: object
                      required:
                        - identifiers
                      properties:
                        identifiers:
                          description: >-
                            Represents an individual object, where the
                            `object_type_id` represents the type of object and
                            the `object_id` is the individual identifier for the
                            object.
                          type: object
                          required:
                            - object_type_id
                            - object_id
                          properties:
                            object_type_id:
                              description: >-
                                The object type an object belongs to—like
                                "Companies" or "Accounts". Object type IDs are
                                string-formatted integers that begin at `1` and
                                increment for each new type.
                              type: string
                              nullable: false
                              example: '1'
                            object_id:
                              description: >-
                                The unique identifier for an object. If you use
                                an `object_id` that already exists, we'll update
                                the object accordingly.
                              type: string
                              nullable: false
                              example: acme
                    - type: object
                      required:
                        - type
                      properties:
                        type:
                          description: >-
                            The operation modifies a single object—non person
                            data.
                          type: string
                          enum:
                            - object
                - type: object
                  required:
                    - action
                    - cio_relationships
                  properties:
                    action:
                      description: >-
                        This operation deletes an object relationship from one
                        or more people.
                      type: string
                      enum:
                        - delete_relationships
                    cio_relationships:
                      description: >-
                        The people you want to associate with an object. Each
                        object in the array represents a person.
                      type: array
                      items:
                        type: object
                        properties:
                          identifiers:
                            oneOf:
                              - title: id
                                type: object
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                          relationship_attributes:
                            description: >
                              [Coming January
                              2024](https://customer.io/docs/api/track/) - If we
                              have not rolled out relationship attributes to
                              your account yet and you send them with your
                              request, your request will go through but we won't
                              store your relationship attributes. The attributes
                              associated with a relationship. Passing null or an
                              empty string removes the attribute from the
                              relationship.
                            type: object
                            additionalProperties:
                              x-additionalPropertiesName: Relationship Attributes
                        example:
                          identifiers:
                            id: 42X
                          relationship_attributes:
                            role: admin
                            date_created: 1702480414
          discriminator:
            propertyName: action
            mapping:
              identify: '#/components/schemas/object_identify'
              identify_anonymous: '#/components/schemas/object_identify_anonymous'
              delete: '#/components/schemas/object_delete'
              add_relationships: '#/components/schemas/object_add_relationships'
              delete_relationships: '#/components/schemas/object_delete_relationships'
        - title: Delivery
          description: >-
            The "delivery" type lets you attribute metrics to messages that
            don't self-report back to Customer.io, like push and in-app
            notifications.
          type: object
          required:
            - type
            - action
            - identifiers
            - name
            - attributes
          properties:
            type:
              description: >-
                The "delivery" type lets you attribute metrics to messages that
                don't self-report back to Customer.io, like push and in-app
                notifications.
              type: string
              enum:
                - delivery
            action:
              description: >-
                An `event` action indicates a delivery event. Use the `name` to
                determine the specific metric that you want to attribute to this
                delivery.
              type: string
              enum:
                - event
            identifiers:
              description: Contains identifiers for the delivery itself.
              type: object
              properties:
                id:
                  description: >-
                    The `delivery_id` for the delivery that you want to
                    attribute metrics to.
                  type: string
            name:
              description: The name of the metric you want to attribute to this "delivery".
              type: string
              enum:
                - opened
                - converted
                - delivered
            attributes:
              description: >-
                Contains information about the delivery and the individual who
                received the message.
              type: object
              required:
                - device_token
              properties:
                device_token:
                  description: The device that received the message.
                  type: string
    Trackv2SendMultipleRequestsRequest:
      type: object
      properties:
        batch:
          description: >-
            A batch of requests, where each object is any individual [entity
            payload](https://customer.io/docs/api/track/)—modifying a single
            person or object.
          type: array
          items:
            anyOf:
              - title: Person
                anyOf:
                  - title: identify
                    description: Add or update a person.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Indicates that the operation will `identify` the
                              the item of the specified `type`.
                            type: string
                            enum:
                              - identify
                          attributes:
                            description: >-
                              Attributes that you want to add or update for this
                              person.
                            type: object
                            properties:
                              cio_subscription_preferences:
                                description: >-
                                  Stores your audience's subscription
                                  preferences if you enable our [subscription
                                  center](https://customer.io/docs/api/track/)
                                  feature. These items are set automatically
                                  when people use the unsubscribe link in your
                                  messages, but you can set preferences outside
                                  the subscription flow. To update select topic
                                  preferences while preserving those set for
                                  other topics, use JSON dot notation
                                  `"cio_subscription_preferences.topics.topic_<topic
                                  ID>":<boolean>`.
                                type: object
                                properties:
                                  topics:
                                    description: >-
                                      Contains active topics in your workspace,
                                      named `topic_<id>`.
                                    type: object
                                    additionalProperties:
                                      description: >-
                                        Each property is a boolean named
                                        `topic_<id>`. Topic `id` values begin at
                                        `1` and increment for each new topic.
                                        You can find your topic ids in
                                        [Workspace
                                        Settings](https://fly.customer.io/workspaces/last/settings/subscription_center/topics)
                                        or by querying our [App
                                        API](https://customer.io/docs/api/app/#operation/getTopics).
                                        For each boolean, `true` means that a
                                        person is subscribed to the topic; false
                                        means they are unsubscribed. An empty or
                                        missing value reverts to the default
                                        preference for the topic (opt-in or
                                        opt-out).
                                      x-additionalPropertiesName: topic_<id>
                                      type: boolean
                                example:
                                  topic_1: true
                                  topic_2: false
                                  topic_3: true
                          cio_relationships:
                            description: >-
                              Each object in the array represents a relationship
                              you want to add to, or remove from, a person.
                            type: array
                            items:
                              allOf:
                                - type: object
                                  required:
                                    - identifiers
                                  properties:
                                    identifiers:
                                      description: >-
                                        Represents an individual object, where
                                        the `object_type_id` represents the type
                                        of object and the `object_id` is the
                                        individual identifier for the object.
                                      type: object
                                      required:
                                        - object_type_id
                                        - object_id
                                      properties:
                                        object_type_id:
                                          description: >-
                                            The object type an object belongs
                                            to—like "Companies" or "Accounts".
                                            Object type IDs are string-formatted
                                            integers that begin at `1` and increment
                                            for each new type.
                                          type: string
                                          nullable: false
                                          example: '1'
                                        object_id:
                                          description: >-
                                            The unique identifier for an object. If
                                            you use an `object_id` that already
                                            exists, we'll update the object
                                            accordingly.
                                          type: string
                                          nullable: false
                                          example: acme
                                - type: object
                                  properties:
                                    relationship_attributes:
                                      description: >
                                        [Coming January
                                        2024](https://customer.io/docs/api/track/)
                                        - If we have not rolled out relationship
                                        attributes to your account yet and you
                                        send them with your request, your
                                        request will go through but we won't
                                        store your relationship attributes. The
                                        attributes associated with a
                                        relationship. Passing null or an empty
                                        string removes the attribute from the
                                        relationship.
                                      type: object
                                      additionalProperties:
                                        x-additionalPropertiesName: Relationship Attributes
                                      example:
                                        role: admin
                  - title: delete
                    description: Delete a person from your workspace.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Indicates that the operation will `delete` the the
                              item of the specified `type`.
                            type: string
                            enum:
                              - delete
                  - description: >-
                      A custom event attributed to a person. You can use events
                      to trigger campaigns, or reference event information using
                      liquid in your messages.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - name
                        properties:
                          action:
                            description: A custom event attributed to the specified person.
                            type: string
                            enum:
                              - event
                          id:
                            description: >-
                              A valid ULID used to deduplicate events. Note -
                              our Python and Ruby libraries do not pass this id.
                            type: string
                            format: ULID
                          name:
                            description: >-
                              The name of the event. This is how you'll find
                              your event in Customer.io or select it when using
                              events as campaign triggers.
                            type: string
                          timestamp:
                            description: The Unix timestamp when the event happened.
                            type: integer
                          attributes:
                            description: >
                              Additional information that you might want to
                              reference in a message using liquid or use to set
                              attributes on the identified person.
                            type: object
                            additionalProperties:
                              description: >-
                                Insert key-values that you want to reference in
                                your message here.
                              x-additionalPropertiesName: liquid merge data
                            properties:
                              recipient:
                                description: >-
                                  The email address of the person associated
                                  with the event, overriding the `to` field in
                                  emails triggered by the event.
                                type: string
                                format: email
                              from_address:
                                description: >-
                                  The address you want to trigger messages from,
                                  overriding the `from` field in emails
                                  triggered by the event.
                                type: string
                                format: email
                              reply_to:
                                description: >-
                                  The address you want to receive replies to,
                                  overriding the `reply to` field for emails
                                  triggered by the event.
                                type: string
                                format: email
                  - description: >-
                      A mobile "screenview" event attributed to a person. Our
                      `screen` and `page` event types are more specific than our
                      standard `event`, and help you track and target people
                      based on the pages people visit in your mobile app or
                      website.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - name
                        properties:
                          action:
                            description: >-
                              A mobile "screenview" event attributed to a
                              person. Our `screen` and `page` event types are
                              more specific than our standard `event`, and help
                              you track and target people based on the pages
                              people visit in your mobile app or website.
                            type: string
                            enum:
                              - screen
                          id:
                            description: >-
                              A valid ULID used to deduplicate events. Note -
                              our Python and Ruby libraries do not pass this id.
                            type: string
                            format: ULID
                          name:
                            description: >-
                              The name of the screen a person visited. This is
                              how you'll find and select screen view events in
                              Customer.io.
                            type: string
                          timestamp:
                            description: The Unix timestamp when the event happened.
                            type: integer
                          attributes:
                            description: >-
                              Additional information that you might want to
                              reference in a message using liquid or use to set
                              attributes on the identified person.
                            type: object
                            additionalProperties:
                              description: >-
                                Insert key-values that you want to reference in
                                your message here.
                              x-additionalPropertiesName: liquid merge data
                  - description: >-
                      A web "pageview" event attributed to a person. Our
                      `screen` and `page` event types are more specific than our
                      standard `event`, and help you track and target people
                      based on the pages people visit in your mobile app or
                      website.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - name
                        properties:
                          action:
                            description: >-
                              A web "pageview" event attributed to a person. Our
                              `screen` and `page` event types are more specific
                              than our standard `event`, and help you track and
                              target people based on the pages people visit in
                              your mobile app or website.
                            type: string
                            enum:
                              - screen
                          id:
                            description: >-
                              A valid ULID used to deduplicate events. Note -
                              our Python and Ruby libraries do not pass this id.
                            type: string
                            format: ULID
                          name:
                            description: >-
                              The name of the page or page path that a person
                              visited. This is how you'll find and select page
                              view events in Customer.io.
                            type: string
                          timestamp:
                            description: The Unix timestamp when the event happened.
                            type: integer
                          attributes:
                            description: >-
                              Additional information that you might want to
                              reference in a message using liquid or use to set
                              attributes on the identified person.
                            type: object
                            additionalProperties:
                              description: >-
                                Insert key-values that you want to reference in
                                your message here.
                              x-additionalPropertiesName: liquid merge data
                  - title: add_relationships
                    description: Associate multiple objects with a person.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - cio_relationships
                        properties:
                          action:
                            description: >-
                              This operation associates a person with one or
                              more objects.
                            type: string
                            enum:
                              - add_relationships
                          cio_relationships:
                            description: >-
                              Each object in the array represents a relationship
                              you want to add to, or remove from, a person.
                            type: array
                            items:
                              allOf:
                                - type: object
                                  required:
                                    - identifiers
                                  properties:
                                    identifiers:
                                      description: >-
                                        Represents an individual object, where
                                        the `object_type_id` represents the type
                                        of object and the `object_id` is the
                                        individual identifier for the object.
                                      type: object
                                      required:
                                        - object_type_id
                                        - object_id
                                      properties:
                                        object_type_id:
                                          description: >-
                                            The object type an object belongs
                                            to—like "Companies" or "Accounts".
                                            Object type IDs are string-formatted
                                            integers that begin at `1` and increment
                                            for each new type.
                                          type: string
                                          nullable: false
                                          example: '1'
                                        object_id:
                                          description: >-
                                            The unique identifier for an object. If
                                            you use an `object_id` that already
                                            exists, we'll update the object
                                            accordingly.
                                          type: string
                                          nullable: false
                                          example: acme
                                - type: object
                                  properties:
                                    relationship_attributes:
                                      description: >
                                        [Coming January
                                        2024](https://customer.io/docs/api/track/)
                                        - If we have not rolled out relationship
                                        attributes to your account yet and you
                                        send them with your request, your
                                        request will go through but we won't
                                        store your relationship attributes. The
                                        attributes associated with a
                                        relationship. Passing null or an empty
                                        string removes the attribute from the
                                        relationship.
                                      type: object
                                      additionalProperties:
                                        x-additionalPropertiesName: Relationship Attributes
                                      example:
                                        role: admin
                  - title: delete_relationships
                    description: Remove multiple object relationships from a person.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - cio_relationships
                        properties:
                          action:
                            description: >-
                              This operation deletes an object relationship from
                              one or more people.
                            type: string
                            enum:
                              - delete_relationships
                          cio_relationships:
                            description: >-
                              Each object in the array represents a relationship
                              you want to add to, or remove from, a person.
                            type: array
                            items:
                              allOf:
                                - type: object
                                  required:
                                    - identifiers
                                  properties:
                                    identifiers:
                                      description: >-
                                        Represents an individual object, where
                                        the `object_type_id` represents the type
                                        of object and the `object_id` is the
                                        individual identifier for the object.
                                      type: object
                                      required:
                                        - object_type_id
                                        - object_id
                                      properties:
                                        object_type_id:
                                          description: >-
                                            The object type an object belongs
                                            to—like "Companies" or "Accounts".
                                            Object type IDs are string-formatted
                                            integers that begin at `1` and increment
                                            for each new type.
                                          type: string
                                          nullable: false
                                          example: '1'
                                        object_id:
                                          description: >-
                                            The unique identifier for an object. If
                                            you use an `object_id` that already
                                            exists, we'll update the object
                                            accordingly.
                                          type: string
                                          nullable: false
                                          example: acme
                                - type: object
                                  properties:
                                    relationship_attributes:
                                      description: >
                                        [Coming January
                                        2024](https://customer.io/docs/api/track/)
                                        - If we have not rolled out relationship
                                        attributes to your account yet and you
                                        send them with your request, your
                                        request will go through but we won't
                                        store your relationship attributes. The
                                        attributes associated with a
                                        relationship. Passing null or an empty
                                        string removes the attribute from the
                                        relationship.
                                      type: object
                                      additionalProperties:
                                        x-additionalPropertiesName: Relationship Attributes
                                      example:
                                        role: admin
                  - title: add_device
                    description: Assign devices to a person.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - device
                        properties:
                          action:
                            description: Add a mobile device to a person's profile.
                            type: string
                            enum:
                              - add_device
                          device:
                            description: >-
                              The properties representing an individual device.
                              [Our SDK's](https://customer.io/docs/api/track/)
                              gather all the properties defined below
                              automatically, unless you disable the
                              `autoTrackDeviceAttributes` setting. You can
                              reference the properties outside the `attributes`
                              object in segments.
                            allOf:
                              - type: object
                                required:
                                  - token
                                properties:
                                  token:
                                    description: The device token.
                                    type: string
                              - description: >-
                                  Device information common to the v1 and v2
                                  APIs.
                                type: object
                                required:
                                  - platform
                                properties:
                                  last_used:
                                    description: >-
                                      The `timestamp` when you last identified
                                      this device. If you don't pass a timestamp
                                      when you add or update a device, we use
                                      the time of the request itself. Our SDKs
                                      identify a device when a person launches
                                      their app.
                                    type: integer
                                    format: unix timestamp
                                  platform:
                                    description: The device/messaging platform.
                                    type: string
                                    enum:
                                      - ios
                                      - android
                                  attributes:
                                    description: >-
                                      Attributes that you can reference to
                                      segment your audience—like a person's
                                      attributes, but specific to a device.
                                      These can be either the attributes defined
                                      below or custom key-value attributes.
                                    type: object
                                    properties:
                                      device_os:
                                        description: >-
                                          The operating system, including the
                                          version, on the device.
                                        type: string
                                      device_model:
                                        description: The model of the device a person uses.
                                        type: string
                                      app_version:
                                        description: >-
                                          The version of your app that a customer
                                          uses. You might target app versions to
                                          let people know when they need to
                                          update, or expose them to new features
                                          when they do.
                                        type: string
                                      cio_sdk_version:
                                        description: >-
                                          The version of the Customer.io SDK in
                                          the app.
                                        type: string
                                      _last_status:
                                        description: >-
                                          The delivery status of the last message
                                          sent to the device—sent, bounced, or
                                          suppressed. An empty string indicates
                                          that that the device hasn't received a
                                          push yet.
                                        type: string
                                        readOnly: true
                                        enum:
                                          - ''
                                          - bounced
                                          - sent
                                          - suppressed
                                      device_locale:
                                        description: >-
                                          The four-letter [IETF language
                                          code](https://customer.io/docs/api/track/)
                                          for the device. For example, `en-MX`
                                          (indicating an app in Spanish formatted
                                          for a user in Mexico) or `es-ES`
                                          (indicating an app in Spanish formatted
                                          for a user in Spain).
                                        type: string
                                      push_enabled:
                                        description: >-
                                          If `"true"`, the device is opted-in and
                                          can receive push notifications.
                                        type: string
                                        enum:
                                          - 'true'
                                          - 'false'
                                    additionalProperties:
                                      description: >-
                                        Custom properties that you want to
                                        associate with the device.
                                      x-additionalPropertiesName: Custom Device Attributes
                                      type: string
                  - title: delete_device
                    description: Delete devices that belong to a person.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                          - device
                        properties:
                          action:
                            description: Delete a device from a person's profile.
                            type: string
                            enum:
                              - delete_device
                          device:
                            description: The device you want to remove.
                            type: object
                            required:
                              - token
                            properties:
                              token:
                                description: The token of the device you want to remove.
                                type: string
                  - description: >
                      Merge two people. You'll merge the `secondary` person into
                      the `primary`. The primary profile remains after the merge
                      and the secondary is deleted. This operation is _not_
                      reversible. See our page on [merging duplicate
                      people](https://customer.io/docs/api/track/) for more
                      information.
                    type: object
                    required:
                      - type
                      - primary
                      - secondary
                      - action
                    properties:
                      type:
                        description: The operation modifies a person in Customer.io
                        type: string
                        enum:
                          - person
                      action:
                        description: >
                          Merge two people. You'll merge the `secondary` person
                          into the `primary`. The primary profile remains after
                          the merge and the secondary is deleted. This operation
                          is _not_ reversible. See our page on [merging
                          duplicate people](https://customer.io/docs/api/track/)
                          for more information.
                        type: string
                        enum:
                          - merge
                      primary:
                        description: >-
                          The person that you want to remain after the merge,
                          identified by one of `id`, `email`, or `cio_id`. This
                          person receives information from the secondary person
                          in the merge.
                        oneOf:
                          - title: id
                            type: object
                            required:
                              - id
                            properties:
                              id:
                                description: >-
                                  The ID of a customer profile, analogous to a
                                  "person" in the UI.
                                type: string
                                example: '42'
                          - title: email
                            type: object
                            required:
                              - email
                            properties:
                              email:
                                description: The email address of the customer.
                                type: string
                                example: test@example.com
                          - title: cio_id
                            type: object
                            required:
                              - cio_id
                            properties:
                              cio_id:
                                description: >-
                                  A unique identifier set by Customer.io, used
                                  to reference a person if you want to update
                                  their identifiers.
                                type: string
                                example: a3000001
                      secondary:
                        description: >-
                          The person that you want to delete after the merge,
                          identified by one of `id`, `email`, or `cio_id`. This
                          person's information is merged into the primary
                          person's profile and then it is deleted.
                        oneOf:
                          - title: id
                            type: object
                            required:
                              - id
                            properties:
                              id:
                                description: >-
                                  The ID of a customer profile, analogous to a
                                  "person" in the UI.
                                type: string
                                example: '42'
                          - title: email
                            type: object
                            required:
                              - email
                            properties:
                              email:
                                description: The email address of the customer.
                                type: string
                                example: test@example.com
                          - title: cio_id
                            type: object
                            required:
                              - cio_id
                            properties:
                              cio_id:
                                description: >-
                                  A unique identifier set by Customer.io, used
                                  to reference a person if you want to update
                                  their identifiers.
                                type: string
                                example: a3000001
                  - title: suppress
                    description: >-
                      Suppress a person's identifier(s) in Customer.io, so that
                      you can't message a person or add their identifiers back
                      to your workspace. This is separate from suppressions
                      performed by your email provider.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Suppress a person's identifier(s) in Customer.io,
                              so that you can't message a person or add their
                              identifiers back to your workspace. This is
                              separate from suppressions performed by your email
                              provider.
                            type: string
                            enum:
                              - suppress
                  - title: unsuppress
                    description: >-
                      Unsuppress a person's identifier(s) in Customer.io, so
                      that you can message a person or add their identifiers
                      back to your workspace. This does not unsuppress addresses
                      that were previously suppressed by your email provider.
                    allOf:
                      - type: object
                        required:
                          - type
                          - identifiers
                        properties:
                          type:
                            description: The operation modifies a person in Customer.io
                            type: string
                            enum:
                              - person
                          identifiers:
                            description: >-
                              The person you want to perform an action for—one
                              of either `id`, `email`, or `cio_id`. You cannot
                              pass multiple identifiers.
                            oneOf:
                              - title: id
                                type: object
                                required:
                                  - id
                                properties:
                                  id:
                                    description: >-
                                      The ID of a customer profile, analogous to
                                      a "person" in the UI.
                                    type: string
                                    example: '42'
                              - title: email
                                type: object
                                required:
                                  - email
                                properties:
                                  email:
                                    description: The email address of the customer.
                                    type: string
                                    example: test@example.com
                              - title: cio_id
                                type: object
                                required:
                                  - cio_id
                                properties:
                                  cio_id:
                                    description: >-
                                      A unique identifier set by Customer.io,
                                      used to reference a person if you want to
                                      update their identifiers.
                                    type: string
                                    example: a3000001
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Unsuppress a person's identifier(s) in
                              Customer.io, so that you can message a person or
                              add their identifiers back to your workspace. This
                              does not unsuppress addresses that were previously
                              suppressed by your email provider.
                            type: string
                            enum:
                              - unsuppress
                discriminator:
                  propertyName: action
                  mapping:
                    identify: '#/components/schemas/identify_person'
                    delete: '#/components/schemas/person_delete'
                    event: '#/components/schemas/person_event'
                    screen: '#/components/schemas/person_screen'
                    page: '#/components/schemas/person_page'
                    add_relationships: '#/components/schemas/person_add_relationships'
                    delete_relationships: '#/components/schemas/person_delete_relationships'
                    add_device: '#/components/schemas/person_add_device'
                    delete_device: '#/components/schemas/person_delete_device'
                    merge: '#/components/schemas/person_merge'
                    suppress: '#/components/schemas/person_suppress'
                    unsuppress: '#/components/schemas/person_unsuppress'
              - title: Object
                anyOf:
                  - title: identify
                    description: >
                      The `action` determines the type of operation you want to
                      perform with an object. If `identifiers.object_id` does
                      not exist, we'll create a new object; if it exists, we'll
                      update the object accordingly.
                    type: object
                    allOf:
                      - allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            required:
                              - type
                            properties:
                              type:
                                description: >-
                                  The operation modifies a single object—non
                                  person data.
                                type: string
                                enum:
                                  - object
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Indicates that the operation will `identify` the
                              the item of the specified `type`.
                            type: string
                            enum:
                              - identify
                          attributes:
                            description: >-
                              The data that belongs to the object. This is
                              information you might want to associate with
                              people later (through `cio_relationships`).
                              Passing `null` or an empty string removes the
                              attribute from the object.
                            type: object
                          cio_relationships:
                            description: >-
                              The people you want to associate with an object.
                              Each object in the array represents a person.
                            type: array
                            items:
                              type: object
                              properties:
                                identifiers:
                                  oneOf:
                                    - title: id
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of a customer profile, analogous
                                            to a "person" in the UI.
                                          type: string
                                          example: '42'
                                    - title: email
                                      type: object
                                      properties:
                                        email:
                                          description: The email address of the customer.
                                          type: string
                                          example: test@example.com
                                    - title: cio_id
                                      type: object
                                      properties:
                                        cio_id:
                                          description: >-
                                            A unique identifier set by Customer.io,
                                            used to reference a person if you want
                                            to update their identifiers.
                                          type: string
                                          example: a3000001
                                relationship_attributes:
                                  description: >
                                    [Coming January
                                    2024](https://customer.io/docs/api/track/) -
                                    If we have not rolled out relationship
                                    attributes to your account yet and you send
                                    them with your request, your request will go
                                    through but we won't store your relationship
                                    attributes. The attributes associated with a
                                    relationship. Passing null or an empty
                                    string removes the attribute from the
                                    relationship.
                                  type: object
                                  additionalProperties:
                                    x-additionalPropertiesName: Relationship Attributes
                              example:
                                identifiers:
                                  id: 42X
                                relationship_attributes:
                                  role: admin
                                  date_created: 1702480414
                  - title: identify_anonymous
                    description: >-
                      The `identify_anonymous` action lets you relate an object
                      to a person who hasn't yet identified themselves by
                      anonymous_id. When you identify the person, their
                      anonymous relationship will carry over to the identified
                      profile.
                    allOf:
                      - allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            required:
                              - type
                            properties:
                              type:
                                description: >-
                                  The operation modifies a single object—non
                                  person data.
                                type: string
                                enum:
                                  - object
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Indicates that the operation will `identify` the
                              item of the specified `type` and relate it to an
                              `anonymous_id`.
                            type: string
                            enum:
                              - identify_anonymous
                          attributes:
                            description: >-
                              The data that belongs to the object. This is
                              information you might want to associate with
                              people later (through `cio_relationships`).
                              Passing `null` or an empty string removes the
                              attribute from the object.
                            type: object
                          cio_relationships:
                            description: >-
                              The anonymous people you want to associate with an
                              object. Each object in the array contains an
                              `anonymous_id` representing a person you haven't
                              yet identified by `id` or `email`.
                            type: array
                            items:
                              type: object
                              properties:
                                identifiers:
                                  type: object
                                  properties:
                                    anonymous_id:
                                      description: >-
                                        An identifier for an anonymous event,
                                        like a cookie. If set as an attribute on
                                        a person, any events bearing the same
                                        anonymous value are associated with this
                                        person. This value must be unique and is
                                        not reusable.
                                      type: string
                                relationship_attributes:
                                  description: >-
                                    Coming October 2023 - The attributes
                                    associated with a relationship. Passing null
                                    or an empty string removes the attribute
                                    from the relationship.
                                  type: object
                  - title: delete
                    description: >
                      Delete an object. This also removes relationships from
                      people.
                    allOf:
                      - allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            required:
                              - type
                            properties:
                              type:
                                description: >-
                                  The operation modifies a single object—non
                                  person data.
                                type: string
                                enum:
                                  - object
                      - type: object
                        required:
                          - action
                        properties:
                          action:
                            description: >-
                              Indicates that the operation will `delete` the the
                              item of the specified `type`.
                            type: string
                            enum:
                              - delete
                  - title: add_relationships
                    description: >-
                      Add relationships between an object and one or more
                      people.
                    allOf:
                      - allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            required:
                              - type
                            properties:
                              type:
                                description: >-
                                  The operation modifies a single object—non
                                  person data.
                                type: string
                                enum:
                                  - object
                      - type: object
                        required:
                          - action
                          - cio_relationships
                        properties:
                          action:
                            description: >-
                              This operation associates an object with one or
                              more people.
                            type: string
                            enum:
                              - add_relationships
                          cio_relationships:
                            description: >-
                              The people you want to associate with an object.
                              Each object in the array represents a person.
                            type: array
                            items:
                              type: object
                              properties:
                                identifiers:
                                  oneOf:
                                    - title: id
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of a customer profile, analogous
                                            to a "person" in the UI.
                                          type: string
                                          example: '42'
                                    - title: email
                                      type: object
                                      properties:
                                        email:
                                          description: The email address of the customer.
                                          type: string
                                          example: test@example.com
                                    - title: cio_id
                                      type: object
                                      properties:
                                        cio_id:
                                          description: >-
                                            A unique identifier set by Customer.io,
                                            used to reference a person if you want
                                            to update their identifiers.
                                          type: string
                                          example: a3000001
                                relationship_attributes:
                                  description: >
                                    [Coming January
                                    2024](https://customer.io/docs/api/track/) -
                                    If we have not rolled out relationship
                                    attributes to your account yet and you send
                                    them with your request, your request will go
                                    through but we won't store your relationship
                                    attributes. The attributes associated with a
                                    relationship. Passing null or an empty
                                    string removes the attribute from the
                                    relationship.
                                  type: object
                                  additionalProperties:
                                    x-additionalPropertiesName: Relationship Attributes
                              example:
                                identifiers:
                                  id: 42X
                                relationship_attributes:
                                  role: admin
                                  date_created: 1702480414
                  - title: delete_relationships
                    description: >-
                      Delete relationships between an object and one or more
                      people.
                    allOf:
                      - allOf:
                          - type: object
                            required:
                              - identifiers
                            properties:
                              identifiers:
                                description: >-
                                  Represents an individual object, where the
                                  `object_type_id` represents the type of object
                                  and the `object_id` is the individual
                                  identifier for the object.
                                type: object
                                required:
                                  - object_type_id
                                  - object_id
                                properties:
                                  object_type_id:
                                    description: >-
                                      The object type an object belongs to—like
                                      "Companies" or "Accounts". Object type IDs
                                      are string-formatted integers that begin
                                      at `1` and increment for each new type.
                                    type: string
                                    nullable: false
                                    example: '1'
                                  object_id:
                                    description: >-
                                      The unique identifier for an object. If
                                      you use an `object_id` that already
                                      exists, we'll update the object
                                      accordingly.
                                    type: string
                                    nullable: false
                                    example: acme
                          - type: object
                            required:
                              - type
                            properties:
                              type:
                                description: >-
                                  The operation modifies a single object—non
                                  person data.
                                type: string
                                enum:
                                  - object
                      - type: object
                        required:
                          - action
                          - cio_relationships
                        properties:
                          action:
                            description: >-
                              This operation deletes an object relationship from
                              one or more people.
                            type: string
                            enum:
                              - delete_relationships
                          cio_relationships:
                            description: >-
                              The people you want to associate with an object.
                              Each object in the array represents a person.
                            type: array
                            items:
                              type: object
                              properties:
                                identifiers:
                                  oneOf:
                                    - title: id
                                      type: object
                                      properties:
                                        id:
                                          description: >-
                                            The ID of a customer profile, analogous
                                            to a "person" in the UI.
                                          type: string
                                          example: '42'
                                    - title: email
                                      type: object
                                      properties:
                                        email:
                                          description: The email address of the customer.
                                          type: string
                                          example: test@example.com
                                    - title: cio_id
                                      type: object
                                      properties:
                                        cio_id:
                                          description: >-
                                            A unique identifier set by Customer.io,
                                            used to reference a person if you want
                                            to update their identifiers.
                                          type: string
                                          example: a3000001
                                relationship_attributes:
                                  description: >
                                    [Coming January
                                    2024](https://customer.io/docs/api/track/) -
                                    If we have not rolled out relationship
                                    attributes to your account yet and you send
                                    them with your request, your request will go
                                    through but we won't store your relationship
                                    attributes. The attributes associated with a
                                    relationship. Passing null or an empty
                                    string removes the attribute from the
                                    relationship.
                                  type: object
                                  additionalProperties:
                                    x-additionalPropertiesName: Relationship Attributes
                              example:
                                identifiers:
                                  id: 42X
                                relationship_attributes:
                                  role: admin
                                  date_created: 1702480414
                discriminator:
                  propertyName: action
                  mapping:
                    identify: '#/components/schemas/object_identify'
                    identify_anonymous: '#/components/schemas/object_identify_anonymous'
                    delete: '#/components/schemas/object_delete'
                    add_relationships: '#/components/schemas/object_add_relationships'
                    delete_relationships: '#/components/schemas/object_delete_relationships'
              - title: Delivery
                description: >-
                  The "delivery" type lets you attribute metrics to messages
                  that don't self-report back to Customer.io, like push and
                  in-app notifications.
                type: object
                required:
                  - type
                  - action
                  - identifiers
                  - name
                  - attributes
                properties:
                  type:
                    description: >-
                      The "delivery" type lets you attribute metrics to messages
                      that don't self-report back to Customer.io, like push and
                      in-app notifications.
                    type: string
                    enum:
                      - delivery
                  action:
                    description: >-
                      An `event` action indicates a delivery event. Use the
                      `name` to determine the specific metric that you want to
                      attribute to this delivery.
                    type: string
                    enum:
                      - event
                  identifiers:
                    description: Contains identifiers for the delivery itself.
                    type: object
                    properties:
                      id:
                        description: >-
                          The `delivery_id` for the delivery that you want to
                          attribute metrics to.
                        type: string
                  name:
                    description: >-
                      The name of the metric you want to attribute to this
                      "delivery".
                    type: string
                    enum:
                      - opened
                      - converted
                      - delivered
                  attributes:
                    description: >-
                      Contains information about the delivery and the individual
                      who received the message.
                    type: object
                    required:
                      - device_token
                    properties:
                      device_token:
                        description: The device that received the message.
                        type: string
    TrackRegionFindAccountRegionResponse:
      type: object
      properties:
        url:
          description: The URL you will use for future Track API calls.
          type: string
          enum:
            - https://track.customer.io
            - https://track-eu.customer.io
          example: https://track.customer.io
        region:
          description: >-
            The 'region' that your account is in. While the `url` relates to the
            Track API, this tells you which region of the Customer.io API to
            use. If this value is `eu`, you can append the subdomain any of the
            Customer.io API URLs with `-eu` to route your request to the
            appropriate region.
          type: string
          enum:
            - us
            - eu
          example: us
        environment_id:
          description: >-
            The identifier for the workspace that your credentials grant access
            to.
          type: integer
          example: 3
    AddDeviceResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            errors:
              description: An array of errors.
              type: array
              items:
                description: Error descriptions.
                type: string
    DeleteDeviceResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            errors:
              description: An array of errors.
              type: array
              items:
                description: Error descriptions.
                type: string
    FormsSubmitFormResponseResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            errors:
              description: An array of errors.
              type: array
              items:
                description: Error descriptions.
                type: string
    TrackCustomersMergePeopleResponse:
      type: object
      properties:
        meta:
          description: Contains errors.
          type: object
          properties:
            error:
              description: Describes the error that caused your request to fail.
              type: string
    TrackSegmentsAddCustomersToManualSegmentResponse:
      type: string
      example: Segment not found
    TrackSegmentsRemoveCustomersResponse:
      type: string
      example: Segment not found
    Trackv2CreateEntityResponse:
      type: object
      properties:
        errors:
          description: An array of errors, where each object represents a different error.
          type: array
          items:
            type: object
            properties:
              reason:
                description: The reason for the error.
                type: string
              field:
                description: The field containing the error.
                type: string
              message:
                description: A detailed description of the error in the offending field.
                type: string
    Trackv2SendMultipleRequestsResponse:
      type: object
      properties:
        errors:
          description: An array of errors, where each object represents a different error.
          type: array
          items:
            type: object
            properties:
              reason:
                description: The reason for the error.
                type: string
              field:
                description: The field containing the error.
                type: string
              message:
                description: A detailed description of the error in the offending field.
                type: string
    Trackv2SendMultipleRequests400Response:
      type: object
      properties:
        errors:
          description: An array of errors, where each object represents a different error.
          type: array
          items:
            type: object
            properties:
              reason:
                description: The reason for the error.
                type: string
              field:
                description: The field containing the error.
                type: string
              message:
                description: A detailed description of the error in the offending field.
                type: string
  securitySchemes:
    Tracking-API-Key:
      description: >
        The Track API uses a basic authentication scheme. Your credentials are
        your **Site ID** and your **API key**, **Base-64 encoded** in the format
        `site_id:api_key`.


        You can find your Site ID and API key on the [Track API Keys
        page](https://fly.customer.io/settings/api_credentials).
      type: http
      scheme: basic
x-tagGroups:
  - tags:
      - track_v2
      - Person Schemas
      - Object Schemas
      - Delivery Schema
    name: Track v2 API
  - tags:
      - Track v1 Overview
      - trackRegion
      - Track Customers
      - Track Events
      - Forms
      - Track Segments
    name: Track v1 API
