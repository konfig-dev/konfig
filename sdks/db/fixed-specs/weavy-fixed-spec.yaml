openapi: 3.0.1
info:
  title: Weavy API
  description: >-
    Weavy is a complete toolkit for developers to add collaboration,
    productivity, and community features to web and mobile apps at a fraction of
    the cost and time. Our API, SDKs and UI Kits for Chat, Files, and Feeds
    enable dev teams to increase functionality and connect users, while focusing
    on your core product.
  version: 22.1.0
  x-api-status-urls: false
servers:
  - url: https://{WEAVY-SERVER}
tags:
  - description: The Files API has methods for managing files.
    name: Files
  - description: The Apps API has methods for creating, and managing apps.
    name: Apps
  - description: The Comments API supports managing comments.
    name: Comments
  - description: The Reactions API enables you to create, list and delete reactions.
    name: Reactions
  - description: The Users API has methods for managing users.
    name: Users
  - description: "The Conversations API has methods for creating, and managing conversations.\r\nA conversation is a non-contextual chat app, and is mainly used by the Messenger building block."
    name: Conversations
  - description: The Posts API supports managing posts.
    name: Posts
  - description: The Messages API supports managing chat messages.
    name: Messages
  - description: The Directories API has endpoints for managing user directories.
    name: Directories
  - description: The Notifications API has methods for managing notifications.
    name: Notifications
  - description: "The Webhooks API enable you to register and manage webhooks.\r\nYou can also use the API to list webhook deliveries for a webhook."
    name: Webhooks
  - description: >-
      The Blobs API enables the uploading of blobs. Blobs are used as references
      when creating files and attachments.
    name: Blobs
  - description: The Options API supports managing poll options.
    name: Options
  - description: The Stars API enables bookmarking things for reference and/or follow-up.
    name: Stars
  - description: >-
      The Embeds API converts URLs into embedded videos, images and rich article
      previews.
    name: Embeds
  - description: >-
      The Meetings API enabled you to create meetings (which can later be
      attached to messages).
    name: Meetings
paths:
  /api/apps:
    post:
      tags:
        - Apps
      summary: Create app
      operationId: Apps_createAppWithTypeAndUid
      description: Create app with specified `type` and `uid`.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppIn'
          text/json:
            schema:
              $ref: '#/components/schemas/AppIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AppIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AppIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Create
      x-method: POST
      x-path: /api/apps
      x-curl: "curl https://{WEAVY-SERVER}/api/apps\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'type': 'chat', 'uid': 'acme-chat', 'access': 'write' }\""
      x-order: 106
    get:
      tags:
        - Apps
      summary: List apps
      operationId: Apps_getList
      description: Returns a list of apps.
      parameters:
        - description: "`true` to lists contextual apps, `false` to list non-contextual apps; when not specified both types are listed.\r\n            Default value is `true`."
          name: contextual
          in: query
          schema:
            type: boolean
        - description: >-
            Guids of app types to list. Can be used to return only conversations
            of a specified type. When not specied all types of apps are
            returned.
          name: type
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: List
      x-method: GET
      x-path: /api/apps
      x-curl: "curl https://{WEAVY-SERVER}/api/apps?top=10\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/apps/init:
    post:
      tags:
        - Apps
      summary: Init app with user
      operationId: Apps_initAppWithUser
      description: >-
        Initialize an app (get existing or create new) and ensure user is member
        (if specified).
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInitWithUser'
          text/json:
            schema:
              $ref: '#/components/schemas/AppInitWithUser'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AppInitWithUser'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AppInitWithUser'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
      deprecated: true
      x-controller: Apps
      x-action: Init
      x-method: POST
      x-path: /api/apps/init
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/init\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{'app': { 'uid': 'acme-chat', 'type': 'chat', 'name': 'Chat for ACME project' }, 'user': { 'uid': 'user-1' } }\""
      x-order: 10004
  /api/apps/{app}:
    get:
      tags:
        - Apps
      summary: Get app
      operationId: Apps_getData
      description: Returns data for the specified app.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: '`true` to return app even if trashed, otherwise `false`.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Get
      x-method: GET
      x-path: /api/apps/{app}
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Apps
      summary: Update app
      operationId: Apps_updateAppById
      description: Update an existing app.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUp'
          text/json:
            schema:
              $ref: '#/components/schemas/AppUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AppUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AppUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Update
      x-method: PATCH
      x-path: /api/apps/{app}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'description': 'Chat for ACME project' }\""
      x-order: 306
    delete:
      tags:
        - Apps
      summary: Delete app
      operationId: Apps_removeAppContent
      description: Permanently deletes an app and all it's content.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Delete
      x-method: DELETE
      x-path: /api/apps/{app}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10306
  /api/apps/{uid}:
    put:
      tags:
        - Apps
      summary: Upsert app
      operationId: Apps_upsertAppByUid
      description: >-
        Update and return app with specified `uid`. If the app does not exist it
        is created.
      parameters:
        - description: Unique app identifier.
          name: uid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUpsert'
          text/json:
            schema:
              $ref: '#/components/schemas/AppUpsert'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AppUpsert'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AppUpsert'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Upsert
      x-method: PUT
      x-path: /api/apps/{uid}
      x-curl: "curl -X PUT https://{WEAVY-SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'type': 'chat', 'access': 'write' }\""
      x-order: 406
  /api/apps/{app}/subscribe:
    post:
      tags:
        - Apps
      summary: Subscribe to app
      operationId: Apps_subscribeToApp
      description: Subscribe authenticated user to notifications for activity in the app.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Subscribe
      x-method: POST
      x-path: /api/apps/{app}/subscribe
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/subscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 809
  /api/apps/{app}/unsubscribe:
    post:
      tags:
        - Apps
      summary: Unsubscribe from app
      operationId: Apps_unsubscribeFromApp
      description: >-
        Unsubscribe authenticated user from notifications for activity in the
        app.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Unsubscribe
      x-method: POST
      x-path: /api/apps/{app}/unsubscribe
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/unsubscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 911
  /api/apps/{app}/trash:
    post:
      tags:
        - Apps
      summary: Trash app
      operationId: Apps_moveToTrash
      description: Move an app to the trash.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Trash
      x-method: POST
      x-path: /api/apps/{app}/trash
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10105
  /api/apps/{app}/restore:
    post:
      tags:
        - Apps
      summary: Restore app
      operationId: Apps_restoreAppFromTrash
      description: Restore an app from the trash.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: Restore
      x-method: POST
      x-path: /api/apps/{app}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10207
  /api/apps/{app}/members:
    get:
      tags:
        - Apps
      summary: List members
      operationId: Apps_listMembers
      description: List members of the specified app.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: >-
            Indicates whether to list suspended members or not, `null` returns
            all members.
          name: suspended
          in: query
          schema:
            type: boolean
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: ListMembers
      x-method: GET
      x-path: /api/apps/{app}/members
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 699
    post:
      tags:
        - Apps
      summary: Add members
      operationId: Apps_addMembersToApp
      description: >-
        Add multiple members to an app. Can also be used to update `access` of
        existing members.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Members to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppsAddMembersToAppRequest1'
          text/json:
            schema:
              $ref: '#/components/schemas/AppsAddMembersToAppRequest2'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AppsAddMembersToAppRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AppsAddMembersToAppRequest3'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: AddMembers
      x-method: POST
      x-path: /api/apps/{app}/members
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"[ { 'uid': 'acme-user' }, { 'uid': 'daffy-duck', 'access': 'read' } ]\""
      x-order: 610
    delete:
      tags:
        - Apps
      summary: Remove members
      operationId: Apps_removeMultipleMembers
      description: Remove multiple app members.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User identifiers (`id` or `uid`) of members to remove.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppsRemoveMultipleMembersRequest1'
          text/json:
            schema:
              $ref: '#/components/schemas/AppsRemoveMultipleMembersRequest2'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AppsRemoveMultipleMembersRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AppsRemoveMultipleMembersRequest3'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: RemoveMembers
      x-method: DELETE
      x-path: /api/apps/{app}/members
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"['bugs-bunny', 'daffy-duck']\""
      x-order: 713
  /api/apps/{app}/members/{user}:
    put:
      tags:
        - Apps
      summary: Add member
      operationId: Apps_addMember
      description: Add (or update) an app member.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: User identifier (`id` or `uid`).
          name: user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberOptions'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberOptions'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberOptions'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberOptions'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: AddMember
      x-method: PUT
      x-path: /api/apps/{app}/members/{user}
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/apps/acme-chat/members/acme-user\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'access': 'read' }\""
      x-order: 599
    delete:
      tags:
        - Apps
      summary: Remove member
      operationId: Apps_removeMember
      description: Remove an app member.
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: User identifier (`id` or `uid`).
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Apps
      x-action: RemoveMember
      x-method: DELETE
      x-path: /api/apps/{app}/members/{user}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat/members/bugs-bunny\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 712
  /api/blobs/{id}:
    get:
      tags:
        - Blobs
      summary: Get blob
      operationId: Blobs_getMetadata
      description: Get the metadata of a blob.
      parameters:
        - description: Id of blob.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Blobs
      x-action: Get
      x-method: GET
      x-path: /api/blobs/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/blobs/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
  /api/blobs:
    post:
      tags:
        - Blobs
      summary: Upload blob
      operationId: Blobs_uploadBlob
      description: Uploads a blob using `multipart/form-data`.
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Blobs
      x-action: Upload
      x-method: POST
      x-path: /api/blobs
      x-curl: "curl https://{WEAVY-SERVER}/api/blobs\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n-F blob=@/test/image.png"
      x-order: 106
  /api/blobs/external:
    post:
      tags:
        - Blobs
      summary: Create external blob
      operationId: Blobs_createExternalBlob
      description: "Creates a blob that links to an external blob provider.\r\nAfter creation the blob can be used as reference when creating attachments and/or files."
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlobIn'
          text/json:
            schema:
              $ref: '#/components/schemas/BlobIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BlobIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BlobIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Blobs
      x-action: Create
      x-method: POST
      x-path: /api/blobs/external
      x-order: 106
  /api/apps/{app}/comments:
    post:
      tags:
        - Comments
      summary: Create app comment
      operationId: Comments_createNewComment
      description: Creates a new comment in the specified Comments app.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: CreateAppComment
      x-method: POST
      x-path: /api/apps/{app}/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-comments/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a comment' }\""
      x-order: 116
    get:
      tags:
        - Comments
      summary: List app comments
      operationId: Comments_listAppComments
      description: List comments in the specified Comments app.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: ListAppComments
      x-method: GET
      x-path: /api/apps/{app}/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-comments/comments?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 515
  /api/files/{id}/comments:
    post:
      tags:
        - Comments
      summary: Create file comment
      operationId: Comments_createNewComment
      description: Creates a new comment on the specified file.
      parameters:
        - description: File id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: CreateFileComment
      x-method: POST
      x-path: /api/files/{id}/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/files/1/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a comment on a file' }\""
      x-order: 117
    get:
      tags:
        - Comments
      summary: List file comments
      operationId: Comments_getFileComments
      description: List comments on the specified file.
      parameters:
        - description: File id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: ListFileComments
      x-method: GET
      x-path: /api/files/{id}/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/files/1/comments?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 516
  /api/posts/{id}/comments:
    post:
      tags:
        - Comments
      summary: Create post comment
      operationId: Comments_createNewComment
      description: Creates a new comment on the specified post.
      parameters:
        - description: Post id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: CreatePostComment
      x-method: POST
      x-path: /api/posts/{id}/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a comment on a post' }\""
      x-order: 117
    get:
      tags:
        - Comments
      summary: List post comments
      operationId: Comments_listPostComments
      description: List comments on the specified post.
      parameters:
        - description: Post id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: ListPostComments
      x-method: GET
      x-path: /api/posts/{id}/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/comments?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 516
  /api/comments/{id}:
    get:
      tags:
        - Comments
      summary: Get comment
      operationId: Comments_getById
      description: Gets a comment by id.
      parameters:
        - description: Id of the comment.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: '`true` to return comment even if trashed, otherwise `false`.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: Get
      x-method: GET
      x-path: /api/comments/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/comments/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Comments
      summary: Update comment
      operationId: Comments_updateById
      description: Updates a comment.
      parameters:
        - description: Id of the comment.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUp'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: Update
      x-method: PATCH
      x-path: /api/comments/{id}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/comments/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{'text': 'Update comment text' }\""
      x-order: 306
    delete:
      tags:
        - Comments
      summary: Delete comment
      operationId: Comments_deleteCommentById
      description: Delete a comment.
      parameters:
        - description: Id of the comment.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: Delete
      x-method: DELETE
      x-path: /api/comments/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/comments/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10306
  /api/comments/{id}/trash:
    post:
      tags:
        - Comments
      summary: Trash comment
      operationId: Comments_moveToTrash
      description: Move a comment to the trash.
      parameters:
        - description: Id of the comment to trash.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: Trash
      x-method: POST
      x-path: /api/comments/{id}/trash
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/comments/1/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10105
  /api/comments/{id}/restore:
    post:
      tags:
        - Comments
      summary: Restore comment
      operationId: Comments_restoreById
      description: Restore a comment from the trash.
      parameters:
        - description: Id of the comment to restore.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: Restore
      x-method: POST
      x-path: /api/comments/{id}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/comments/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10207
  /api/comments:
    get:
      tags:
        - Comments
      summary: List comments
      operationId: Comments_listComments
      description: List comments.
      parameters:
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Comments
      x-action: List
      x-method: GET
      x-path: /api/comments
      x-curl: "curl https://{WEAVY-SERVER}/api/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/conversations:
    post:
      tags:
        - Conversations
      summary: Create conversation
      operationId: Conversations_createNewConversation
      description: "Creates a new conversation with the specified members.\r\nWhen no type is specified the following logic is applied to decide the type of conversation to create.\r\n<ul><li>If a name is specified, or member count is more than one, a chat room is created.</li><li>If only one member is specified, a private chat is created. If there is an existing chat between the creator and member, that instance is returned instead of creating a new chat.</li></ul>"
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationIn'
          text/json:
            schema:
              $ref: '#/components/schemas/ConversationIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConversationIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConversationIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Create
      x-method: POST
      x-path: /api/conversations
      x-curl: "curl https://{WEAVY-SERVER}/api/conversations\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'members': [ 'bugs-bunny' ] }\"\r\n\r\ncurl https://{WEAVY-SERVER}/api/conversations\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'members': ['bugs-bunny', 'daffy-duck', 14], 'name': 'Acme'  }\""
      x-order: 106
    get:
      tags:
        - Conversations
      summary: List conversations
      operationId: Conversations_list
      description: List conversations for the authenticated user.
      parameters:
        - description: >-
            User identifier (`id` or `uid`). Used to return conversations where
            specified user is member.
          name: member
          in: query
          schema:
            type: string
        - description: "`true` lists unread conversations, `false` list read conversations and `null` lists all conversations;\r\n            default is `null`."
          name: unread
          in: query
          schema:
            type: boolean
        - description: >-
            Guids of app types to list. Can be used to return only conversations
            of a specified type, e.g. chat rooms. When not specied all types of
            conversations are returned.
          name: type
          in: query
          schema:
            type: array
            items:
              type: string
              format: uuid
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: List
      x-method: GET
      x-path: /api/conversations
      x-curl: "curl https://{WEAVY-SERVER}/api/conversations?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 504
  /api/conversations/{id}:
    get:
      tags:
        - Conversations
      summary: Get conversation
      operationId: Conversations_getById
      description: Get conversation.
      parameters:
        - description: Id of the conversation to return.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: '`true` to return conversation even if trashed, otherwise `false`.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Get
      x-method: GET
      x-path: /api/conversations/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/conversations/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
  /api/conversations/badge:
    get:
      tags:
        - Conversations
      summary: Count unread conversations
      operationId: Conversations_countUnread
      description: >-
        Get number of unread conversations for the authenticated user (grouped
        by conversation type).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationBadge'
      x-controller: Conversations
      x-action: CountUnread
      x-method: GET
      x-path: /api/conversations/badge
      x-curl: "curl https://{WEAVY-SERVER}/api/conversations/badge\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10011
  /api/conversations/{id}/mark:
    put:
      tags:
        - Conversations
      summary: Mark as read
      operationId: Conversations_markAsRead
      description: Updates the conversation read marker for the authenticated user.
      parameters:
        - description: Conversation (app) id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Optional id of last seen message, when not specified the entire
            conversation is marked as read.
          name: message_id
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Mark
      x-method: PUT
      x-path: /api/conversations/{id}/mark
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10090
    delete:
      tags:
        - Conversations
      summary: Mark as unread
      operationId: Conversations_markUnread
      description: Mark a conversation as unread, i.e remove the conversation read marker.
      parameters:
        - description: Conversation (app) id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Unmark
      x-method: DELETE
      x-path: /api/conversations/{id}/mark
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/conversations/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10091
  /api/conversations/{id}/pin:
    put:
      tags:
        - Conversations
      summary: Pin conversation
      operationId: Conversations_pinConversation
      description: Pin a conversation.
      parameters:
        - description: Conversation (app) id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Pin
      x-method: PUT
      x-path: /api/conversations/{id}/pin
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/pin\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10092
    delete:
      tags:
        - Conversations
      summary: Unpin conversation
      operationId: Conversations_unpinConversation
      description: Unpin a conversation.
      parameters:
        - description: Conversation (app) id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Unpin
      x-method: DELETE
      x-path: /api/conversations/{id}/pin
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/conversations/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10093
  /api/conversations/{id}/delivered:
    put:
      tags:
        - Conversations
      summary: Set as delivered
      operationId: Conversations_updateDeliveryStatus
      description: Updates the conversation delivery status for the authenticated user.
      parameters:
        - description: Conversation (app) id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Conversations
      x-action: Delivered
      x-method: PUT
      x-path: /api/conversations/{id}/delivered
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/delivered\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10094
  /api/conversations/{id}/typing:
    put:
      tags:
        - Conversations
      summary: Indicate typing
      operationId: Conversations_indicateTyping
      description: >-
        Indicate that the authenticated user is typing a message in a
        conversation.
      parameters:
        - description: Conversation (app) id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
      x-controller: Conversations
      x-action: Typing
      x-method: PUT
      x-path: /api/conversations/{id}/typing
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/typing\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10006
  /api/directories:
    post:
      tags:
        - Directories
      summary: Create directory
      operationId: Directories_createUserDirectory
      description: Creates a user directory.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryIn'
          text/json:
            schema:
              $ref: '#/components/schemas/DirectoryIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DirectoryIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DirectoryIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Directories
      x-action: Create
      x-method: POST
      x-path: /api/directories
      x-curl: "curl https://{WEAVY-SERVER}/api/directories\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'acme' }\""
      x-order: 106
    get:
      tags:
        - Directories
      summary: List directories
      operationId: Directories_listDirectories
      description: List directories.
      parameters:
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Directories
      x-action: List
      x-method: GET
      x-path: /api/directories
      x-curl: "curl https://{WEAVY-SERVER}/api/directories?top=10&q=acme\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/directories/{dir}:
    get:
      tags:
        - Directories
      summary: Get directory
      operationId: Directories_getDirectory
      description: Get a directory.
      parameters:
        - description: Id or name of directory.
          name: dir
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Directories
      x-action: Get
      x-method: GET
      x-path: /api/directories/{dir}
      x-curl: "curl https://{WEAVY-SERVER}/api/directories/acme\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Directories
      summary: Update directory
      operationId: Directories_updateDirectoryName
      description: Update (rename) a directory.
      parameters:
        - description: Id or name of directory.
          name: dir
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryUp'
          text/json:
            schema:
              $ref: '#/components/schemas/DirectoryUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DirectoryUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DirectoryUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Directories
      x-action: Update
      x-method: PATCH
      x-path: /api/directories/{dir}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/directories/acme\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'ACME_CORPORATION' }\""
      x-order: 306
    delete:
      tags:
        - Directories
      summary: Delete directory
      operationId: Directories_removeDirectory
      description: Delete a directory.
      parameters:
        - description: Id or name of directory.
          name: dir
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Directories
      x-action: Delete
      x-method: DELETE
      x-path: /api/directories/{dir}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/directories/acme\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 10306
  /api/directories/{dir}/members:
    get:
      tags:
        - Directories
      summary: List members
      operationId: Directories_getMembers
      description: List the members of a directory.
      parameters:
        - description: Id or name of directory.
          name: dir
          in: path
          required: true
          schema:
            type: string
        - description: >-
            Indicates whether to list suspended members or not, `null` returns
            all members.
          name: suspended
          in: query
          schema:
            type: boolean
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Directories
      x-action: ListMembers
      x-method: GET
      x-path: /api/directories/{dir}/members
      x-curl: "curl https://{WEAVY-SERVER}/api/directories/acme/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 511
  /api/embeds/{id}:
    get:
      tags:
        - Embeds
      summary: Get embed
      operationId: Embeds_getById
      description: Get an embed by id.
      parameters:
        - description: Id of embed.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Embeds
      x-action: Get
      x-method: GET
      x-path: /api/embeds/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/embeds/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
  /api/embeds:
    post:
      tags:
        - Embeds
      summary: Create embed
      operationId: Embeds_createEmbedForUrl
      description: Create an embed for the given url.
      requestBody:
        description: Contains the URL to retrieve embedding information for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedIn'
          text/json:
            schema:
              $ref: '#/components/schemas/EmbedIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/EmbedIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EmbedIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Embeds
      x-action: Create
      x-method: POST
      x-path: /api/embeds
      x-curl: "curl https://{WEAVY-SERVER}/api/embeds\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'url': 'https://weavy.com' }\""
      x-order: 106
  /api/apps/{app}/files:
    post:
      tags:
        - Files
      summary: Create file
      operationId: Files_createNewFile
      description: Creates a new file in the specified Files app.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileIn'
          text/json:
            schema:
              $ref: '#/components/schemas/FileIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileIn'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Create
      x-method: POST
      x-path: /api/apps/{app}/files
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-files/files\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'blob_id': 1 }\""
      x-order: 106
    get:
      tags:
        - Files
      summary: List files in app
      operationId: Files_listFilesInApp
      description: List files in the specified Files app.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: ListAppFiles
      x-method: GET
      x-path: /api/apps/{app}/files
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-files/files?top=30\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 512
  /api/files/{id}:
    get:
      tags:
        - Files
      summary: Get file
      operationId: Files_getFileMetadata
      description: Get file metadata.
      parameters:
        - description: File id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: '`true` to return file even if trashed.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Get
      x-method: GET
      x-path: /api/files/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/files/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Files
      summary: Update file
      operationId: Files_updateFileById
      description: Update a file.
      parameters:
        - description: Id of file.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUp'
          text/json:
            schema:
              $ref: '#/components/schemas/FileUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FileUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FileUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Update
      x-method: PATCH
      x-path: /api/files/{id}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/files/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'name': 'filename.txt' }\""
      x-order: 306
    delete:
      tags:
        - Files
      summary: Delete file
      operationId: Files_deleteFile
      description: Delete a file.
      parameters:
        - description: Id of the file.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Delete
      x-method: DELETE
      x-path: /api/files/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/files/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10306
  /api/files/{id}/versions/{version}:
    get:
      tags:
        - Files
      summary: Get version
      operationId: Files_getFileVersion
      description: Get specific version of a file.
      parameters:
        - description: File id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: Version number.
          name: version
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: GetVersion
      x-method: GET
      x-path: /api/files/{id}/versions/{version}
      x-curl: "curl https://{WEAVY-SERVER}/api/files/1/versions/2\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 210
    delete:
      tags:
        - Files
      summary: Delete version
      operationId: Files_deleteVersion
      description: Delete specific version of a file.
      parameters:
        - description: File id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: Version number.
          name: version
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: DeleteVersion
      x-method: DELETE
      x-path: /api/files/{id}/versions/{version}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/files/1/versions/2\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10313
  /api/files/{id}/versions:
    get:
      tags:
        - Files
      summary: Get versions
      operationId: Files_getFileVersions
      description: List version history for the specified file.
      parameters:
        - description: File id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesGetFileVersionsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: GetVersions
      x-method: GET
      x-path: /api/files/{id}/versions
      x-curl: "curl https://{WEAVY-SERVER}/api/files/1/versions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 211
  /api/files/{id}/subscribe:
    post:
      tags:
        - Files
      summary: Subscribe to file
      operationId: Files_subscribeToFileActivity
      description: Subscribe to notifications for activity on a file.
      parameters:
        - description: Id of the file.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Subscribe
      x-method: POST
      x-path: /api/files/{id}/subscribe
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/subscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 809
  /api/files/{id}/unsubscribe:
    post:
      tags:
        - Files
      summary: Unsubscribe from file
      operationId: Files_unsubscribeNotification
      description: Unsubscribe to notifications for activity on a file.
      parameters:
        - description: Id of the file.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Unsubscribe
      x-method: POST
      x-path: /api/files/{id}/unsubscribe
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/unsubscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 911
  /api/files/{id}/trash:
    post:
      tags:
        - Files
      summary: Trash file
      operationId: Files_moveToTrash
      description: Move a file to the trash.
      parameters:
        - description: Id of the file to trash.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Trash
      x-method: POST
      x-path: /api/files/{id}/trash
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10105
  /api/files/{id}/restore:
    post:
      tags:
        - Files
      summary: Restore file
      operationId: Files_restoreFileFromTrash
      description: Restore a file from the trash.
      parameters:
        - description: Id of the file to restore.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: Restore
      x-method: POST
      x-path: /api/files/{id}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10207
  /api/files/{id}/versions/{version}/restore:
    post:
      tags:
        - Files
      summary: Restore version
      operationId: Files_restorePreviousVersion
      description: "Restore a previous version of a file to be the current version.\r\nThis will create a new version with the contents of the previous version, but preserves all existing versions of the file."
      parameters:
        - description: File id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: Version number.
          name: version
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: RestoreVersion
      x-method: POST
      x-path: /api/files/{id}/versions/{version}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/versions/2/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10214
  /api/files:
    get:
      tags:
        - Files
      summary: List files
      operationId: Files_getList
      description: List files.
      parameters:
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: List
      x-method: GET
      x-path: /api/files
      x-curl: "curl https://{WEAVY-SERVER}/api/files\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/comments/{id}/attachments:
    get:
      tags:
        - Files
      summary: List comment attachments
      operationId: Files_listCommentAttachments
      description: List files attached to the specified comment.
      parameters:
        - description: Comment id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: ListCommentAttachments
      x-method: GET
      x-path: /api/comments/{id}/attachments
      x-curl: "curl https://{WEAVY-SERVER}/api/comments/1/attachments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 522
  /api/messages/{id}/attachments:
    get:
      tags:
        - Files
      summary: List message attachments
      operationId: Files_listAttachments
      description: List files attached to the specified message.
      parameters:
        - description: Message id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: ListMessageAttachments
      x-method: GET
      x-path: /api/messages/{id}/attachments
      x-curl: "curl https://{WEAVY-SERVER}/api/messages/1/attachments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 522
  /api/posts/{id}/attachments:
    get:
      tags:
        - Files
      summary: List post attachments
      operationId: Files_listAttachments
      description: List files attached to the specified post.
      parameters:
        - description: Post id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Files
      x-action: ListPostAttachments
      x-method: GET
      x-path: /api/posts/{id}/attachments
      x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/attachments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 519
  /api/meetings:
    post:
      tags:
        - Meetings
      summary: Create meeting
      operationId: Meetings_createMeetingZoomOrTeams
      description: Create a meeting. The provider can either be `zoom` or `teams`.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingIn'
          text/json:
            schema:
              $ref: '#/components/schemas/MeetingIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MeetingIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MeetingIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Meetings
      x-action: Create
      x-method: POST
      x-path: /api/meetings
      x-curl: "curl https://{WEAVY-SERVER}/api/meetings\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'provider': 'zoom' }\""
      x-order: 106
  /api/apps/{app}/messages:
    post:
      tags:
        - Messages
      summary: Create message
      operationId: Messages_createNewMessage
      description: Creates a new message in the specified app (chat or conversation).
      parameters:
        - description: App identifier (`id` or `uid`).
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
          text/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MessageIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MessageIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: Create
      x-method: POST
      x-path: /api/apps/{app}/messages
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/messages\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a message' }\""
      x-order: 106
    get:
      tags:
        - Messages
      summary: List app messages
      operationId: Messages_listAppMessages
      description: List messages in the specified app (chat or conversation).
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: ListMessages
      x-method: GET
      x-path: /api/apps/{app}/messages
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/messages?top=50\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 512
  /api/messages/{id}:
    get:
      tags:
        - Messages
      summary: Get message
      operationId: Messages_getMessageById
      description: Gets a message by id.
      parameters:
        - description: Id of the message.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: '`true` to return message even if trashed.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: Get
      x-method: GET
      x-path: /api/messages/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/messages/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Messages
      summary: Update message
      operationId: Messages_updateById
      description: Updates a message.
      parameters:
        - description: Id of the message.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageUp'
          text/json:
            schema:
              $ref: '#/components/schemas/MessageUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MessageUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MessageUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: Update
      x-method: PATCH
      x-path: /api/messages/{id}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/messages/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is an updated message' }\""
      x-order: 306
    delete:
      tags:
        - Messages
      summary: Delete message
      operationId: Messages_deleteMessage
      description: Permanently delete a message.
      parameters:
        - description: Id of the message.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: Delete
      x-method: DELETE
      x-path: /api/messages/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/messages/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10306
  /api/messages/{id}/trash:
    post:
      tags:
        - Messages
      summary: Trash message
      operationId: Messages_moveToTrash
      description: Move a message to the trash.
      parameters:
        - description: Id of the message to trash.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: Trash
      x-method: POST
      x-path: /api/messages/{id}/trash
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/messages/1/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10105
  /api/messages/{id}/restore:
    post:
      tags:
        - Messages
      summary: Restore message
      operationId: Messages_restoreMessageFromTrash
      description: Restore a message from the trash.
      parameters:
        - description: Id of the message to restore.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: Restore
      x-method: POST
      x-path: /api/messages/{id}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/messages/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10207
  /api/messages:
    get:
      tags:
        - Messages
      summary: List messages
      operationId: Messages_listMessages
      description: List messages.
      parameters:
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Messages
      x-action: List
      x-method: GET
      x-path: /api/messages
      x-curl: "curl https://{WEAVY-SERVER}/api/messages\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/notifications/{id}:
    get:
      tags:
        - Notifications
      summary: Get notification
      operationId: Notifications_getById
      description: Get a notification by id.
      parameters:
        - description: Notification id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: '`true` to return notification even if trashed.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Notifications
      x-action: Get
      x-method: GET
      x-path: /api/notifications/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/notifications/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    delete:
      tags:
        - Notifications
      summary: Delete notification
      operationId: Notifications_deleteNotificationById
      description: Delete a notification.
      parameters:
        - description: Notification id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Notifications
      x-action: Delete
      x-method: DELETE
      x-path: /api/notifications/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/notifications/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10306
  /api/notifications/{id}/mark:
    put:
      tags:
        - Notifications
      summary: Mark as read
      operationId: Notifications_markAsRead
      description: Mark a notification as read.
      parameters:
        - description: Notification id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Notifications
      x-action: Mark
      x-method: PUT
      x-path: /api/notifications/{id}/mark
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/notifications/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10004
    delete:
      tags:
        - Notifications
      summary: Mark as unread
      operationId: Notifications_markAsUnread
      description: Mark a notification as unread.
      parameters:
        - description: Notification id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Notifications
      x-action: Unmark
      x-method: DELETE
      x-path: /api/notifications/{id}/mark
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/notifications/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10006
  /api/notifications/mark:
    put:
      tags:
        - Notifications
      summary: Mark (all) as read
      operationId: Notifications_markAsRead
      description: Mark (all) notifications as read.
      parameters:
        - description: >-
            Optional id of last seen notification. When specified, this and
            previous notifications are marked as read, otherwise all
            notifications (uncluding yet unseen) are marked as read.
          name: id
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
      x-controller: Notifications
      x-action: SetMarker
      x-method: PUT
      x-path: /api/notifications/mark
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/notifications/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n            \r\ncurl -X PUT https://{WEAVY_SERVER}/api/notifications/mark?id=3\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10009
  /api/notifications:
    get:
      tags:
        - Notifications
      summary: List notifications
      operationId: Notifications_listUserNotifications
      description: List notifications for the authenticated user.
      parameters:
        - description: >-
            List notifications that were triggered by actions of this type, e.g.
            `message_created` or `comment_updated` etc.
          name: action
          in: query
          schema:
            type: string
        - description: >-
            `true` lists unread notifications, `false` lists read notifications
            and `null` (default) lists all notifications whether they are read
            or not.
          name: unread
          in: query
          schema:
            type: boolean
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Notifications
      x-action: List
      x-method: GET
      x-path: /api/notifications
      x-curl: "curl https://{WEAVY-SERVER}/api/notifications?top=10&unread=true\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/options/{id}:
    get:
      tags:
        - Options
      summary: Get poll option
      operationId: Options_getPollOption
      description: Gets a poll option.
      parameters:
        - description: Id of the option.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollOptionOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Options
      x-action: Get
      x-method: GET
      x-path: /api/options/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/options/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
  /api/options/{id}/vote:
    post:
      tags:
        - Options
      summary: Vote
      operationId: Options_addVoteForUser
      description: Add vote for the authenticated user to a poll option.
      parameters:
        - description: Id of the poll option.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollOptionOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Options
      x-action: Vote
      x-method: POST
      x-path: /api/options/{id}/vote
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/options/1/vote\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10004
  /api/options/{id}/voters:
    get:
      tags:
        - Options
      summary: List voters
      operationId: Options_listVoters
      description: List users that voted for the specified poll option.
      parameters:
        - description: Option id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionsListVotersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Options
      x-action: GetVoters
      x-method: GET
      x-path: /api/options/{id}/voters
      x-curl: "curl https://{WEAVY-SERVER}/api/options/1/voters\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 209
  /api/apps/{app}/posts:
    post:
      tags:
        - Posts
      summary: Create post
      operationId: Posts_createNewPost
      description: Creates a new post in the specified posts app.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIn'
          text/json:
            schema:
              $ref: '#/components/schemas/PostIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PostIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Create
      x-method: POST
      x-path: /api/apps/{app}/posts
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-posts/posts\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a post' }\""
      x-order: 106
    get:
      tags:
        - Posts
      summary: List app posts
      operationId: Posts_listAppPosts
      description: List posts in the specified posts app.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: ListAppPosts
      x-method: GET
      x-path: /api/apps/{app}/posts
      x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-posts/posts?top=50\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 512
  /api/posts/{id}:
    get:
      tags:
        - Posts
      summary: Get post
      operationId: Posts_getPostById
      description: Gets a post by id.
      parameters:
        - description: Id of the post.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: '`true` to return post even if trashed.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Get
      x-method: GET
      x-path: /api/posts/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/posts/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Posts
      summary: Update post
      operationId: Posts_updateById
      description: Updates a post.
      parameters:
        - description: Id of the post.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUp'
          text/json:
            schema:
              $ref: '#/components/schemas/PostUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PostUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Update
      x-method: PATCH
      x-path: /api/posts/{id}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/posts/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is an updated post' }\""
      x-order: 306
    delete:
      tags:
        - Posts
      summary: Delete post
      operationId: Posts_deletePostById
      description: Delete a post.
      parameters:
        - description: Id of the post.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Delete
      x-method: DELETE
      x-path: /api/posts/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/posts/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10306
  /api/posts/{id}/subscribe:
    post:
      tags:
        - Posts
      summary: Subscribe to post
      operationId: Posts_subscribeToPost
      description: Subscribe to notifications for activity on a post.
      parameters:
        - description: Id of the post.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Subscribe
      x-method: POST
      x-path: /api/posts/{id}/subscribe
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/subscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 809
  /api/posts/{id}/unsubscribe:
    post:
      tags:
        - Posts
      summary: Unsubscribe from post
      operationId: Posts_unsubscribeNotification
      description: Unsubscribe to notifications for activity on a post.
      parameters:
        - description: Id of the post.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Unsubscribe
      x-method: POST
      x-path: /api/posts/{id}/unsubscribe
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/unsubscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 911
  /api/posts/{id}/trash:
    post:
      tags:
        - Posts
      summary: Trash post
      operationId: Posts_moveToTrash
      description: Move a post to the trash.
      parameters:
        - description: Id of the post to trash.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Trash
      x-method: POST
      x-path: /api/posts/{id}/trash
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/trash\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 10105
  /api/posts/{id}/restore:
    post:
      tags:
        - Posts
      summary: Restore post
      operationId: Posts_restoreById
      description: Restore a post from the trash.
      parameters:
        - description: Id of the post to restore.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: Restore
      x-method: POST
      x-path: /api/posts/{id}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 10207
  /api/posts:
    get:
      tags:
        - Posts
      summary: List posts
      operationId: Posts_getAll
      description: List posts.
      parameters:
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Posts
      x-action: List
      x-method: GET
      x-path: /api/posts
      x-curl: "curl https://{WEAVY-SERVER}/api/posts\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/comments/{id}/reactions:
    post:
      tags:
        - Reactions
      summary: React to comment
      operationId: Reactions_createForComment
      description: Create reaction for a comment.
      parameters:
        - description: Comment id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          text/json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: CreateCommentReaction
      x-method: POST
      x-path: /api/comments/{id}/reactions
      x-curl: "curl https://{WEAVY-SERVER}/api/comments/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'content': '😍' }\""
      x-order: 121
    delete:
      tags:
        - Reactions
      summary: Unreact to comment
      operationId: Reactions_unreactToComment
      description: Delete authenticated user's reaction to a comment.
      parameters:
        - description: Comment id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: DeleteCommentReaction
      x-method: DELETE
      x-path: /api/comments/{id}/reactions
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/comments/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10321
    get:
      tags:
        - Reactions
      summary: List comment reactions
      operationId: Reactions_listCommentReactions
      description: List reactions for a comment.
      parameters:
        - description: Comment id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Lists reactions with the specified emoji character. Omit this
            parameter to list all reactions.
          name: content
          in: query
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: ListCommentReactions
      x-method: GET
      x-path: /api/comments/{id}/reactions
      x-curl: "curl https://{WEAVY-SERVER}/api/comments/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 520
  /api/messages/{id}/reactions:
    post:
      tags:
        - Reactions
      summary: React to message
      operationId: Reactions_createForMessage
      description: Create reaction for a message.
      parameters:
        - description: Message id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          text/json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: CreateMessageReaction
      x-method: POST
      x-path: /api/messages/{id}/reactions
      x-curl: "curl https://{WEAVY-SERVER}/api/messages/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'content': '😍' }\""
      x-order: 121
    delete:
      tags:
        - Reactions
      summary: Unreact to message
      operationId: Reactions_unreactToMessage
      description: Delete authenticated user's reaction to a message.
      parameters:
        - description: Message id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: DeleteMessageReaction
      x-method: DELETE
      x-path: /api/messages/{id}/reactions
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/messages/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10321
    get:
      tags:
        - Reactions
      summary: List message reactions
      operationId: Reactions_getMessageReactions
      description: List reactions for a message.
      parameters:
        - description: Message id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Lists reactions with the specified emoji character. Omit this
            parameter to list all reactions.
          name: content
          in: query
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: ListMessageReactions
      x-method: GET
      x-path: /api/messages/{id}/reactions
      x-curl: "curl https://{WEAVY-SERVER}/api/messages/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 520
  /api/posts/{id}/reactions:
    post:
      tags:
        - Reactions
      summary: React to post
      operationId: Reactions_createForPost
      description: Create reaction for a post.
      parameters:
        - description: Post id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          text/json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReactionIn'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: CreatePostReaction
      x-method: POST
      x-path: /api/posts/{id}/reactions
      x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'content': '😍' }\""
      x-order: 118
    delete:
      tags:
        - Reactions
      summary: Unreact to post
      operationId: Reactions_unreactToPost
      description: Delete authenticated user's reaction to a post.
      parameters:
        - description: Post id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: DeletePostReaction
      x-method: DELETE
      x-path: /api/posts/{id}/reactions
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/posts/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 10318
    get:
      tags:
        - Reactions
      summary: List post reactions
      operationId: Reactions_listPostReactions
      description: List reactions for a post.
      parameters:
        - description: Post id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: >-
            Lists reactions with the specified emoji character. Omit this
            parameter to list all reactions.
          name: content
          in: query
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: ListPostReactions
      x-method: GET
      x-path: /api/posts/{id}/reactions
      x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 517
  /api/reactions/{id}:
    get:
      tags:
        - Reactions
      summary: Get reaction
      operationId: Reactions_getReactionById
      description: Get a reaction by id.
      parameters:
        - description: Reaction id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: Get
      x-method: GET
      x-path: /api/reactions/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/reactions/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 203
    delete:
      tags:
        - Reactions
      summary: Delete reaction
      operationId: Reactions_deleteById
      description: Delete a reaction.
      parameters:
        - description: Reaction id.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Reactions
      x-action: Delete
      x-method: DELETE
      x-path: /api/reactions/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/reactions/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 15000
  /api/apps/{app}/stars:
    post:
      tags:
        - Stars
      summary: Add star
      operationId: Stars_addStarToApp
      description: Add a star to an app on behalf of the authenticated user.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Stars
      x-action: Add
      x-method: POST
      x-path: /api/apps/{app}/stars
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/stars\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 603
    delete:
      tags:
        - Stars
      summary: Remove star
      operationId: Stars_removeStarFromApp
      description: Remove a star from an app on behalf of the authenticated user.
      parameters:
        - description: App identifier (`id` or `uid`)
          name: app
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Stars
      x-action: Remove
      x-method: DELETE
      x-path: /api/apps/{app}/stars
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat/stars\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 706
  /api/stars:
    get:
      tags:
        - Stars
      summary: List stars
      operationId: Stars_listItemsStarred
      description: List items starred by the authenticated user.
      parameters:
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Stars
      x-action: List
      x-method: GET
      x-path: /api/stars
      x-curl: "curl https://{WEAVY-SERVER}/api/stars\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 504
  /api/users:
    post:
      tags:
        - Users
      summary: Create user
      operationId: Users_createAccount
      description: Create a user account.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
          text/json:
            schema:
              $ref: '#/components/schemas/UserIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Create
      x-method: POST
      x-path: /api/users
      x-curl: "curl https://{WEAVY-SERVER}/api/users\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'uid': 'bugs-bunny', 'name': 'Bugs Bunny', 'directory': 'acme' }\""
      x-order: 106
    get:
      tags:
        - Users
      summary: List users
      operationId: Users_listUsers
      description: List users.
      parameters:
        - description: Indicates whether to list bot users or not.
          name: bot
          in: query
          schema:
            type: boolean
        - description: >-
            List users in the specified directory, `null` lists users from all
            directories.
          name: directory_id
          in: query
          schema:
            type: integer
            format: int32
        - description: Indicates whether to list suspended users or not.
          name: suspended
          in: query
          schema:
            type: boolean
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: List
      x-method: GET
      x-path: /api/users
      x-curl: "curl https://{WEAVY-SERVER}/api/users?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 504
  /api/users/{user}:
    get:
      tags:
        - Users
      summary: Get user
      operationId: Users_getUserById
      description: Get user with specified identifier.
      parameters:
        - description: User identifier (`id` or `uid`).
          name: user
          in: path
          required: true
          schema:
            type: string
        - description: '`true` to return user even if trashed.'
          name: trashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Get
      x-method: GET
      x-path: /api/users/{user}
      x-curl: "curl https://{WEAVY-SERVER}/api/users/bugs-bunny\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Users
      summary: Update user
      operationId: Users_updateUser
      description: Update a user.
      parameters:
        - description: User identifier (`id` or `uid`).
          name: user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUp'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Update
      x-method: PATCH
      x-path: /api/users/{user}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/users/bugs-bunny\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'Bugs Bunny' }\""
      x-order: 306
  /api/user:
    get:
      tags:
        - Users
      summary: Get authenticated user
      operationId: Users_getAuthenticatedUser
      description: Get the authenticated user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: GetAuthenticated
      x-method: GET
      x-path: /api/user
      x-curl: "curl https://{WEAVY-SERVER}/api/user\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
      x-order: 216
  /api/users/{uid}:
    put:
      tags:
        - Users
      summary: Upsert user
      operationId: Users_upsertUser
      description: >-
        Update and return user with specified `uid`. If the user does not exists
        it is created.
      parameters:
        - description: Unique user identifier.
          name: uid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpsert'
          text/json:
            schema:
              $ref: '#/components/schemas/UserUpsert'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserUpsert'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserUpsert'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Upsert
      x-method: PUT
      x-path: /api/users/{uid}
      x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/users/bugs-bunny\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'Bugs Bunny', 'email': 'bugs@acme.corp\""
      x-order: 406
  /api/users/{user}/trash:
    post:
      tags:
        - Users
      summary: Trash user
      operationId: Users_moveToTrash
      description: Move a user to the trash.
      parameters:
        - description: User identifier (`id` or `uid`) of the user to trash.
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Trash
      x-method: POST
      x-path: /api/users/{user}/trash
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/users/bugs-bunny/trash\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 10105
  /api/users/{user}/restore:
    post:
      tags:
        - Users
      summary: Restore user
      operationId: Users_restoreUserFromTrash
      description: Restore a user from the trash.
      parameters:
        - description: User identifier (`id` or `uid`) of the user to restore.
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Restore
      x-method: POST
      x-path: /api/users/{user}/restore
      x-curl: "curl -X POST https://{WEAVY_SERVER}/api/users/bugs-bunny/restore\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 10207
  /api/users/{user}/tokens:
    post:
      tags:
        - Users
      summary: Issue access token
      operationId: Users_createAccessToken
      description: >-
        If a user with the with the specified `uid` does not exists, this
        endpoint first creates the user and then issues an `access_token`.
      parameters:
        - description: User identifier (`id` or `uid`).
          name: user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Optional token creation options.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenIn'
          text/json:
            schema:
              $ref: '#/components/schemas/TokenIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TokenIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TokenIn'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: IssueToken
      x-method: POST
      x-path: /api/users/{user}/tokens
      x-curl: "curl https://{WEAVY-SERVER}/api/users/bugs-bunny/tokens\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'expires_in': 7200 }\""
      x-order: 10010
    delete:
      tags:
        - Users
      summary: Revoke access token
      operationId: Users_revokeAccessTokens
      description: Revoke all access tokens for the specified user.
      parameters:
        - description: User identifier (`id` or `uid`).
          name: user
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: RevokeTokens
      x-method: DELETE
      x-path: /api/users/{user}/tokens
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/users/bugs-bunny/tokens\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 10012
  /api/users/autocomplete:
    get:
      tags:
        - Users
      summary: List users (autocomplete)
      operationId: Users_listByAutocomplete
      description: List users based on autocomplete search.
      parameters:
        - description: The search phrase to use.
          name: q
          in: query
          schema:
            type: string
        - description: >-
            Gets or sets the number of items to skip before returning, defaults
            to `0`.
          name: skip
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - description: Max number of items to return, defaults to `5`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
            default: 5
        - description: Count the total number of search results, defaults to `false`.
          name: count
          in: query
          schema:
            type: boolean
            default: false
        - description: >-
            Optional app id. When set, the result contains a property indicating
            whether the listed users are member of the specified app or not.
          name: id
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteUserOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Users
      x-action: Autocomplete
      x-method: GET
      x-path: /api/users/autocomplete
      x-curl: "curl https://{WEAVY-SERVER}/api/users/autocomplete?q=john\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
      x-order: 1100
  /api/webhooks:
    get:
      tags:
        - Webhooks
      summary: List webhooks
      operationId: Webhooks_listWebhooks
      description: List webhooks.
      parameters:
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Webhooks
      x-action: List
      x-method: GET
      x-path: /api/webhooks
      x-curl: "curl https://{WEAVY-SERVER}/api/webhooks\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 504
    post:
      tags:
        - Webhooks
      summary: Register webhook
      operationId: Webhooks_registerWebhook
      description: Registers a webhook.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookIn'
          text/json:
            schema:
              $ref: '#/components/schemas/WebhookIn'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WebhookIn'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WebhookIn'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Webhooks
      x-action: Create
      x-method: POST
      x-path: /api/webhooks
      x-curl: "curl https://{WEAVY-SERVER}/api/webhooks\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{'payload_url': 'https://www.example.com/webhooks/incoming', 'triggers': ['notifications']}\""
      x-order: 106
  /api/webhooks/{id}:
    get:
      tags:
        - Webhooks
      summary: Get webhook
      operationId: Webhooks_getById
      description: Get a webhook by id.
      parameters:
        - description: The unique identifier of the hook.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Webhooks
      x-action: Get
      x-method: GET
      x-path: /api/webhooks/{id}
      x-curl: "curl https://{WEAVY-SERVER}/api/webhooks/1\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 203
    patch:
      tags:
        - Webhooks
      summary: Update webhook
      operationId: Webhooks_updateRegistration
      description: Update a webhook registration.
      parameters:
        - description: The unique identifier of the hook.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookUp'
          text/json:
            schema:
              $ref: '#/components/schemas/WebhookUp'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WebhookUp'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WebhookUp'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookOut'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Webhooks
      x-action: Update
      x-method: PATCH
      x-path: /api/webhooks/{id}
      x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/webhooks/1\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'triggers': ['notifications', 'comments'] }\""
      x-order: 306
    delete:
      tags:
        - Webhooks
      summary: Delete webhook
      operationId: Webhooks_deleteWebhookById
      description: Delete a webhook
      parameters:
        - description: The unique identifier of the hook.
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Webhooks
      x-action: Delete
      x-method: DELETE
      x-path: /api/webhooks/{id}
      x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/webhooks/1\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 10306
  /api/webhooks/{id}/deliveries:
    get:
      tags:
        - Webhooks
      summary: List deliveries
      operationId: Webhooks_listDeliveries
      description: List webhook deliveries.
      parameters:
        - description: Webhook id
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - description: ''
          name: action
          in: query
          schema:
            type: string
        - description: A query used to find matching items.
          name: q
          in: query
          schema:
            type: string
        - description: List items with the specified tag.
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Indicates whether trashed items should be listed (default is
            `false`). Specify `null` to return both trashed and non-trashed
            items.
          name: trashed
          in: query
          schema:
            type: boolean
        - description: >-
            Specifies the sort order and direction for the listing, e.g.
            "`name`" or "`name+desc`"
          name: order_by
          in: query
          schema:
            type: string
        - description: >-
            Maximum number of items to return in the listing. Should be a value
            between `1` and `100`. Default is `25`.
          name: top
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            The number of items to skip. Used together with `top` to return a
            specific range of items (for pagination).
          name: skip
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            `true` to only return the *number* of matching items; when this is
            specified the response will only contain the `count` property.
          name: count_only
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryOutPagedListOut'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      x-controller: Webhooks
      x-action: ListDeliveries
      x-method: GET
      x-path: /api/webhooks/{id}/deliveries
      x-curl: "curl https://{WEAVY-SERVER}/api/webhooks/1/deliveries?top=20\r\n-H \"Authorization: Bearer {API-KEY}\""
      x-order: 514
components:
  schemas:
    Access:
      description: Access levels for users/members.
      enum:
        - none
        - read
        - write
        - admin
      type: string
    AppAccess:
      description: "Access level for non-members. Defaults to `none`. \r\n* `none` = non-members cannot access the app\r\n* `read` = non-members can see the app and it's content but can cannot contribute\r\n* `write` = non-members have access to the app and are allowed to create content"
      enum:
        - none
        - read
        - write
      type: string
    AppIn:
      description: ''
      required:
        - type
        - uid
      type: object
      properties:
        tags:
          description: A list of tags to associate with the app.
          type: array
          items:
            type: string
          nullable: true
        description:
          description: App description.
          maxLength: 512
          minLength: 0
          type: string
          nullable: true
        uid:
          description: >-
            A string that uniquely identifies the app, for instance a product id
            or URL (*cannot contain whitespace and must contain at least one
            non-digit*).
          maxLength: 256
          minLength: 0
          type: string
        type:
          description: Type of app (`chat`, `comments`, `files` or `posts` etc.).
          minLength: 1
          type: string
        access:
          $ref: '#/components/schemas/AppAccess'
        directory:
          description: >-
            Id or name of a user directory. Used in combination with `access` to
            control who can access the app.
          type: string
          nullable: true
        name:
          description: Display name for the app.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        metadata:
          description: >-
            Additional properties to associate with the app, e.g. `{ "color":
            "blue", "size": "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    AppInitMemberIn:
      description: ''
      required:
        - uid
      type: object
      properties:
        uid:
          description: >-
            Unique user identifier (*cannot contain whitespace and must contain
            at least one non-digit*).
          maxLength: 256
          minLength: 0
          type: string
    AppInitWithUser:
      description: Model for initializing apps.
      required:
        - app
      type: object
      properties:
        app:
          $ref: '#/components/schemas/AppIn'
        user:
          $ref: '#/components/schemas/AppInitMemberIn'
    AppOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        description:
          description: Gets the description text.
          type: string
          nullable: true
        id:
          description: Gets the app id.
          type: integer
          format: int32
          nullable: true
        type:
          description: Gets the app type.
          type: string
          format: uuid
          nullable: true
        uid:
          description: Gets the unique identifier for the app in the host system.
          type: string
          nullable: true
        access:
          $ref: '#/components/schemas/Access'
        directory_id:
          description: Gets the unique identifier for the app in the host system.
          type: integer
          format: int32
          nullable: true
        display_name:
          description: Gets the display name.
          type: string
          nullable: true
        name:
          description: Gets the name.
          type: string
          nullable: true
        archive_url:
          description: Url to zip-archive with files in the app.
          type: string
          nullable: true
        avatar_url:
          description: Gets a thumbnail image.
          type: string
          nullable: true
        metadata:
          description: ''
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        created_at:
          description: Date and time (UTC) when the app was created.
          type: string
          format: date-time
          nullable: true
        created_by_id:
          description: Id of the user that created the app.
          type: integer
          format: int32
          nullable: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        modified_at:
          description: Date and time (UTC) when the app was last updated.
          type: string
          format: date-time
          nullable: true
        modified_by_id:
          description: Id of the user that last modified the app.
          type: integer
          format: int32
          nullable: true
        modified_by:
          $ref: '#/components/schemas/UserOut'
        members:
          $ref: '#/components/schemas/MemberOutPagedListOut'
        permissions:
          description: Gets app permissions for the authenticated user.
          type: array
          items:
            $ref: '#/components/schemas/Permission'
          nullable: true
        is_starred:
          description: ''
          type: boolean
          nullable: true
        is_subscribed:
          description: ''
          type: boolean
          nullable: true
        is_trashed:
          description: ''
          type: boolean
          nullable: true
    AppOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/AppOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    AppUp:
      description: Model for updating apps.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the app.
          type: array
          items:
            type: string
          nullable: true
        description:
          description: App description.
          maxLength: 512
          minLength: 0
          type: string
          nullable: true
        uid:
          description: >-
            A string that uniquely identifies the app, for instance a product id
            or URL (*cannot contain whitespace and must contain at least one
            non-digit*).
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        access:
          $ref: '#/components/schemas/AppAccess'
        directory:
          description: >-
            Id or name of a user directory. Used in combination with `access` to
            control who can access the app.
          type: string
          nullable: true
        name:
          description: Display name for the app.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        metadata:
          description: >-
            Additional properties to associate with the app, e.g. `{ "color":
            "blue", "size": "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    AppUpsert:
      description: ''
      required:
        - type
      type: object
      properties:
        tags:
          description: A list of tags to associate with the app.
          type: array
          items:
            type: string
          nullable: true
        description:
          description: App description.
          maxLength: 512
          minLength: 0
          type: string
          nullable: true
        type:
          description: Type of app (`chat`, `comments`, `files` or `posts` etc.).
          minLength: 1
          type: string
        uid:
          type: string
          nullable: true
        access:
          $ref: '#/components/schemas/AppAccess'
        directory:
          description: >-
            Id or name of a user directory. Used in combination with `access` to
            control who can access the app.
          type: string
          nullable: true
        name:
          description: Display name for the app.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        metadata:
          description: >-
            Additional properties to associate with the app, e.g. `{ "color":
            "blue", "size": "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    AutocompleteUserOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        uid:
          description: ''
          type: string
          nullable: true
        display_name:
          description: ''
          type: string
          nullable: true
        avatar_url:
          description: ''
          type: string
          nullable: true
        presence:
          $ref: '#/components/schemas/PresenceStatus'
        access:
          $ref: '#/components/schemas/Access'
        is_member:
          description: ''
          type: boolean
          nullable: true
        is_bot:
          description: ''
          type: boolean
          nullable: true
    AutocompleteUserOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/AutocompleteUserOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    Blob:
      description: A class containing metadata about a blob.
      required:
        - media_type
        - name
      type: object
      properties:
        metadata:
          description: Gets or sets additional metadata.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
          readOnly: true
        provider:
          description: Gets the provider name (for external blobs).
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
          readOnly: true
        link:
          description: Gets an url for viewing the blob (for external blobs).
          maxLength: 2048
          minLength: 0
          type: string
          nullable: true
          readOnly: true
        download:
          description: Gets an url for downloading the blob (for external blobs).
          maxLength: 2048
          minLength: 0
          type: string
          nullable: true
          readOnly: true
        embed:
          description: Gets an url used for embedding the blob (for external blobs).
          maxLength: 2048
          minLength: 0
          type: string
          nullable: true
          readOnly: true
        raw:
          description: Gets the raw metadata from the provider (for external blobs).
          type: string
          nullable: true
          readOnly: true
        id:
          description: Gets the blob id.
          type: integer
          format: int32
        name:
          description: Gets or sets the file name of the blob.
          maxLength: 256
          minLength: 0
          type: string
        media_type:
          description: >-
            Gets or sets the Media Type
            (https://www.iana.org/assignments/media-types/media-types.xhtml) of
            the file, e.g. "image/png".
          maxLength: 128
          minLength: 0
          type: string
        width:
          description: Gets the width, in pixels, of the blob (only for images).
          type: integer
          format: int32
          nullable: true
        height:
          description: Gets the height, in pixels, of the blob (only for images).
          type: integer
          format: int32
          nullable: true
        size:
          description: Gets the size, in bytes, of the file.
          type: integer
          format: int64
    BlobIn:
      description: Model for creating (external) blobs.
      required:
        - link
        - name
        - provider
        - size
      type: object
      properties:
        provider:
          description: Gets or sets the provider name.
          maxLength: 256
          minLength: 0
          type: string
        link:
          description: Gets or sets an url for viewing the blob.
          maxLength: 2048
          minLength: 0
          type: string
        name:
          description: Gets or sets the file name of the blob.
          maxLength: 256
          minLength: 0
          type: string
        width:
          description: Gets or sets the width, in pixels, of the blob (only for images).
          type: integer
          format: int32
          nullable: true
        height:
          description: Gets or sets the height, in pixels, of the blob (only for images).
          type: integer
          format: int32
          nullable: true
        size:
          description: Gets or sets the size, in bytes, of the file.
          type: integer
          format: int64
        media_type:
          description: >-
            Gets or sets the Media Type
            (https://www.iana.org/assignments/media-types/media-types.xhtml) of
            the file, e.g. "image/png".
          maxLength: 128
          minLength: 0
          type: string
          nullable: true
        download:
          description: Gets or sets an url for downloading the blob.
          maxLength: 2048
          minLength: 0
          type: string
          nullable: true
        embed:
          description: Gets or sets an url used for embedding the blob.
          maxLength: 2048
          minLength: 0
          type: string
          nullable: true
        raw:
          description: Gets or sets the raw metadata from the provider.
          nullable: true
    BlobOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        name:
          description: ''
          type: string
          nullable: true
        media_type:
          description: ''
          type: string
          nullable: true
        width:
          description: ''
          type: integer
          format: int32
          nullable: true
        height:
          description: ''
          type: integer
          format: int32
          nullable: true
        size:
          description: ''
          type: integer
          format: int64
          nullable: true
        thumbnail_url:
          description: ''
          type: string
          nullable: true
        raw:
          description: ''
          type: string
          nullable: true
    CommentIn:
      description: Model for inserting comments.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the item.
          type: array
          items:
            type: string
          nullable: true
        blobs:
          description: Ids of blobs to attach.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        embed_id:
          description: Id of embed to attach.
          type: integer
          format: int32
          nullable: true
        meeting_id:
          description: Id of meeting to attach.
          type: integer
          format: int32
          nullable: true
        options:
          description: List of poll options to attach.
          type: array
          items:
            $ref: '#/components/schemas/PollOptionIn'
          nullable: true
        text:
          description: The message text.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    CommentOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        id:
          description: Gets the id of the entity.
          type: integer
          format: int32
          nullable: true
        app_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        parent:
          $ref: '#/components/schemas/EntityOut'
        text:
          description: Gets the message text.
          type: string
          nullable: true
        html:
          description: Gets the message text as html.
          type: string
          nullable: true
        plain:
          description: Gets the message text with all formatting stripped.
          type: string
          nullable: true
        attachment_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        attachments:
          description: Gets the files attached to this Weavy.Core.Models.Msg.
          type: array
          items:
            $ref: '#/components/schemas/FileOut'
          nullable: true
        embed_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        embed:
          $ref: '#/components/schemas/Embed'
        meeting_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        meeting:
          $ref: '#/components/schemas/MeetingOut'
        option_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        options:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/PollOptionOut'
          nullable: true
        reactions:
          description: Gets reactions to the message.
          type: array
          items:
            $ref: '#/components/schemas/ReactionOut'
          nullable: true
        metadata:
          description: Gets or sets additional metadata.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        created_at:
          description: Gets or sets the date and time (UTC) the entity was created.
          type: string
          format: date-time
          nullable: true
        created_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        modified_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        modified_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        modified_by:
          $ref: '#/components/schemas/UserOut'
        is_trashed:
          description: ''
          type: boolean
          nullable: true
    CommentOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/CommentOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    CommentUp:
      description: Model for updating comments.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the item.
          type: array
          items:
            type: string
          nullable: true
        attachments:
          description: Ids of attached files.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        blobs:
          description: Ids of additional blobs to attach.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        embed_id:
          description: Id of embed to attach.
          type: integer
          format: int32
          nullable: true
        meeting_id:
          description: Id of meeting to attach.
          type: integer
          format: int32
          nullable: true
        options:
          description: List of poll options for the item.
          type: array
          items:
            $ref: '#/components/schemas/PollOptionUp'
          nullable: true
        text:
          description: The message text.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    ConversationBadge:
      description: ''
      type: object
      properties:
        private:
          description: The number of unread private chats.
          type: integer
          format: int32
        rooms:
          description: The number of unread chat rooms.
          type: integer
          format: int32
        bots:
          description: The number of unread bot chats.
          type: integer
          format: int32
    ConversationIn:
      description: Input model for creating conversations.
      required:
        - members
      type: object
      properties:
        members:
          description: User identifiers (`id` or `uid`) of conversation members.
          type: array
          items:
            type: string
        name:
          description: Room name.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        type:
          description: >-
            Type of conversation to create (`private_chat`, `chat_room` or
            `bot_chat`). Automatically inferred when not specified.
          type: string
          nullable: true
    ConversationOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        description:
          description: Gets the description text.
          type: string
          nullable: true
        id:
          description: Gets the app id.
          type: integer
          format: int32
          nullable: true
        type:
          description: Gets the app type.
          type: string
          format: uuid
          nullable: true
        uid:
          description: Gets the unique identifier for the app in the host system.
          type: string
          nullable: true
        access:
          $ref: '#/components/schemas/Access'
        directory_id:
          description: Gets the unique identifier for the app in the host system.
          type: integer
          format: int32
          nullable: true
        display_name:
          description: Gets the display name.
          type: string
          nullable: true
        name:
          description: Gets the name.
          type: string
          nullable: true
        archive_url:
          description: Url to zip-archive with files in the app.
          type: string
          nullable: true
        avatar_url:
          description: Gets a thumbnail image.
          type: string
          nullable: true
        metadata:
          description: ''
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        created_at:
          description: Date and time (UTC) when the app was created.
          type: string
          format: date-time
          nullable: true
        created_by_id:
          description: Id of the user that created the app.
          type: integer
          format: int32
          nullable: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        modified_at:
          description: Date and time (UTC) when the app was last updated.
          type: string
          format: date-time
          nullable: true
        modified_by_id:
          description: Id of the user that last modified the app.
          type: integer
          format: int32
          nullable: true
        modified_by:
          $ref: '#/components/schemas/UserOut'
        members:
          $ref: '#/components/schemas/MemberOutPagedListOut'
        permissions:
          description: Gets app permissions for the authenticated user.
          type: array
          items:
            $ref: '#/components/schemas/Permission'
          nullable: true
        last_message_id:
          description: Id of the last message in the conversation.
          type: integer
          format: int32
          nullable: true
        last_message:
          $ref: '#/components/schemas/MessageOut'
        is_starred:
          description: ''
          type: boolean
          nullable: true
        is_subscribed:
          description: ''
          type: boolean
          nullable: true
        is_trashed:
          description: ''
          type: boolean
          nullable: true
        is_pinned:
          description: If the authenticated user has pinned this converation.
          type: boolean
          nullable: true
        is_unread:
          description: >-
            If the authenticated user has any unread messages in the
            converation.
          type: boolean
          nullable: true
    ConversationOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/ConversationOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    DeliveryOut:
      description: Delivery made by a webhook, without request and response information.
      type: object
      properties:
        id:
          description: Unique identifier of the webhook delivery.
          type: integer
          format: int32
          readOnly: true
        guid:
          description: Gets the unique delivery id.
          type: string
          format: uuid
          readOnly: true
        event_id:
          description: >-
            Unique identifier for the event (shared with all deliveries for all
            webhooks that subscribe to this event).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        action:
          description: The event that triggered the delivery.
          type: string
          nullable: true
          readOnly: true
        delivered_at:
          description: Time when the webhook delivery occurred.
          type: string
          format: date-time
          readOnly: true
        duration:
          description: Time spent delivering (in seconds).
          type: number
          format: double
          nullable: true
          readOnly: true
        status_code:
          description: Status code received when delivery was made, e.g. 200.
          type: integer
          format: int32
          nullable: true
          readOnly: true
        status:
          description: The response returned after attempting the delivery, e.g. "OK".
          type: string
          nullable: true
          readOnly: true
    DeliveryOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/DeliveryOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    DirectoryIn:
      description: Model for creating user directory.
      required:
        - name
      type: object
      properties:
        name:
          description: >-
            A unique directory name (*cannot contain whitespace and must contain
            at least one non-digit*).
          maxLength: 256
          minLength: 0
          type: string
    DirectoryOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        name:
          description: ''
          type: string
          nullable: true
        members:
          $ref: '#/components/schemas/UserOutPagedListOut'
    DirectoryOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/DirectoryOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    DirectoryUp:
      description: Model for updating user directory.
      required:
        - name
      type: object
      properties:
        name:
          description: >-
            A unique directory name (*cannot contain whitespace and must contain
            at least one non-digit*).
          maxLength: 256
          minLength: 0
          type: string
    Embed:
      description: Represents an embedded object.
      required:
        - original_url
        - version
      type: object
      properties:
        title:
          description: Gets the title.
          type: string
          nullable: true
        description:
          description: Gets or sets a description for the embed.
          type: string
          nullable: true
        version:
          description: Gets the oembed version.
          minLength: 1
          type: string
        id:
          description: Gets the embed id.
          type: integer
          format: int32
        created_at:
          description: Gets the time (UTC) the embed url was fetched.
          type: string
          format: date-time
        created_by_id:
          description: Gets the id of the user that created the embed.
          type: integer
          format: int32
        host:
          description: Gets the name of the host/domain where the embed originates.
          type: string
          nullable: true
          readOnly: true
        original_url:
          description: Gets the original url the user provided.
          minLength: 1
          type: string
          readOnly: true
        is_link:
          description: >-
            Gets or sets a UI hint telling the UI to render this embed as a
            link.
          type: boolean
        image:
          $ref: '#/components/schemas/Blob'
        type:
          $ref: '#/components/schemas/EmbedType'
        author_name:
          description: Gets the author name.
          type: string
          nullable: true
        author_url:
          description: Gets the author url.
          type: string
          nullable: true
        provider_name:
          description: Gets the provider name.
          type: string
          nullable: true
        provider_url:
          description: Gets the provider url.
          type: string
          nullable: true
        cache_age:
          description: Gets the cache age in seconds.
          type: integer
          format: int32
          nullable: true
        thumbnail_url:
          description: Gets the thumbnail url.
          type: string
          nullable: true
        thumbnail_width:
          description: Gets the width of the thumbnail.
          type: integer
          format: int32
          nullable: true
        thumbnail_height:
          description: Gets the height of the thumbnail.
          type: integer
          format: int32
          nullable: true
        url:
          description: >-
            Gets the source url of the image (when EmbedType is "photo").
            Consumers should be able to insert this URL into an <img> element.
          type: string
          nullable: true
        width:
          description: >-
            Gets the width in pixels of the embed (when EmbedType is "photo",
            "rich" or "video").
          type: integer
          format: int32
          nullable: true
        height:
          description: >-
            Gets the height in pixels of the embed (when EmbedType is "photo",
            "rich" or "video").
          type: integer
          format: int32
          nullable: true
        html:
          description: >-
            Gets the html required to display the resource (when EmbedType is
            "rich" or "video").
          type: string
          nullable: true
    EmbedIn:
      description: ''
      required:
        - url
      type: object
      properties:
        url:
          description: The URL to retrieve embedding information for.
          minLength: 1
          type: string
    EmbedOut:
      description: ''
      type: object
      properties:
        title:
          description: Gets the title describing the resource.
          type: string
          nullable: true
        description:
          description: Gets or sets a description for the resource.
          type: string
          nullable: true
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        type:
          $ref: '#/components/schemas/EmbedType'
        author_name:
          description: Gets the name of the author/owner of the resource.
          type: string
          nullable: true
        author_url:
          description: Gets an url for the author/owner of the resource.
          type: string
          nullable: true
        provider_name:
          description: Gets the name of the resource provider.
          type: string
          nullable: true
        provider_url:
          description: Gets the url of the resource provider.
          type: string
          nullable: true
        cache_age:
          description: Gets the suggested cache age in seconds.
          type: integer
          format: int32
          nullable: true
        thumbnail_url:
          description: Gets an url to a thumbnail image representing the resource.
          type: string
          nullable: true
        thumbnail_width:
          description: Gets the width of the thumbnail image.
          type: integer
          format: int32
          nullable: true
        thumbnail_height:
          description: Gets the height of the thumbnail image.
          type: integer
          format: int32
          nullable: true
        url:
          description: >-
            Gets the source url of the image (when type is "photo"). Consumers
            should be able to insert this URL into an <img> element.
          type: string
          nullable: true
        width:
          description: >-
            Gets the width in pixels of the embed (when type is "photo", "rich"
            or "video").
          type: integer
          format: int32
          nullable: true
        height:
          description: >-
            Gets the height in pixels of the embed (when type is "photo", "rich"
            or "video").
          type: integer
          format: int32
          nullable: true
        html:
          description: >-
            Gets the html required to display the resource (when type is "rich"
            or "video").
          type: string
          nullable: true
        original_url:
          description: Gets the original url used to treate the embed.
          type: string
          nullable: true
    EmbedType:
      description: Indicates the type of embed.
      enum:
        - none
        - photo
        - video
        - link
        - rich
        - audio
      type: string
    EntityOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/EntityType'
    EntityOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/EntityOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    EntityType:
      description: Enum for entity types.
      enum:
        - app
        - file
        - message
        - user
        - comment
        - post
      type: string
    FileIn:
      description: Model for creating files.
      required:
        - blob_id
      type: object
      properties:
        tags:
          description: A list of tags to associate with the file.
          type: array
          items:
            type: string
          nullable: true
        blob_id:
          description: Id of blob containing content and metadata for the file.
          type: integer
          format: int32
        name:
          description: >-
            File name. When not specified the file will get the name of the
            underlying blob.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        replace:
          description: >-
            `true` to force an existing file with the same name to be
            overwritten (otherwise a `409 Conflict` response will be produced).
          type: boolean
    FileOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        version:
          description: ''
          type: integer
          format: int64
          nullable: true
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        app_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        parent:
          $ref: '#/components/schemas/EntityOut'
        name:
          description: ''
          type: string
          nullable: true
        kind:
          description: ''
          type: string
          nullable: true
        media_type:
          description: ''
          type: string
          nullable: true
        width:
          description: ''
          type: integer
          format: int32
          nullable: true
        height:
          description: ''
          type: integer
          format: int32
          nullable: true
        size:
          description: ''
          type: integer
          format: int64
          nullable: true
        metadata:
          description: ''
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        provider:
          description: ''
          type: string
          nullable: true
        raw:
          description: ''
          type: string
          nullable: true
        download_url:
          description: ''
          type: string
          nullable: true
        application_url:
          description: ''
          type: string
          nullable: true
        embed_url:
          description: ''
          type: string
          nullable: true
        external_url:
          description: ''
          type: string
          nullable: true
        preview_format:
          $ref: '#/components/schemas/PreviewFormat'
        preview_url:
          description: ''
          type: string
          nullable: true
        thumbnail_url:
          description: ''
          type: string
          nullable: true
        created_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        created_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        modified_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        modified_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        modified_by:
          $ref: '#/components/schemas/UserOut'
        comment_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        comments:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/CommentOut'
          nullable: true
        is_subscribed:
          description: ''
          type: boolean
          nullable: true
        is_trashed:
          description: ''
          type: boolean
          nullable: true
    FileOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/FileOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    FileUp:
      description: Model for updating files.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the file.
          type: array
          items:
            type: string
          nullable: true
        blob_id:
          description: Id of blob containing content and metadata for the file.
          type: integer
          format: int32
          nullable: true
        name:
          description: The file name.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        backup:
          description: >-
            `true` to add previous version to version history, otherwise `false`
            (default).
          type: boolean
    MeetingIn:
      description: ''
      required:
        - provider
      type: object
      properties:
        provider:
          description: ''
          minLength: 1
          type: string
    MeetingOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        provider:
          description: ''
          type: string
          nullable: true
        provider_id:
          description: ''
          type: string
          nullable: true
        uuid:
          description: ''
          type: string
          nullable: true
        join_url:
          description: ''
          type: string
          nullable: true
        ended_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        recording_url:
          description: ''
          type: string
          nullable: true
    MemberAccess:
      description: "Optional access level for member. Defaults to `write` when not specified.\r\n* `none` = cannot access the app\r\n* `read` = can see the app and it's content but can cannot contribute\r\n* `write` = access to the app and is allowed to create content"
      enum:
        - none
        - read
        - write
      type: string
    MemberIn:
      description: ''
      type: object
      properties:
        id:
          description: User id of member.
          type: integer
          format: int32
          nullable: true
        uid:
          description: User identifier of member.
          type: string
          nullable: true
        access:
          $ref: '#/components/schemas/MemberAccess'
    MemberOptions:
      description: ''
      type: object
      properties:
        access:
          $ref: '#/components/schemas/MemberAccess'
    MemberOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        uid:
          description: ''
          type: string
          nullable: true
        access:
          $ref: '#/components/schemas/Access'
        display_name:
          description: ''
          type: string
          nullable: true
        avatar_url:
          description: ''
          type: string
          nullable: true
        delivered_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        marked_at:
          description: Date and time (UTC) when conversation was marked as read.
          type: string
          format: date-time
          nullable: true
        marked_id:
          description: Id of the last read message.
          type: integer
          format: int32
          nullable: true
        presence:
          $ref: '#/components/schemas/PresenceStatus'
        is_bot:
          description: Gets or sets a value indicating whether the user is a bot.
          type: boolean
          nullable: true
    MemberOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/MemberOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    MessageIn:
      description: Model for inserting messages.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the item.
          type: array
          items:
            type: string
          nullable: true
        blobs:
          description: Ids of blobs to attach.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        embed_id:
          description: Id of embed to attach.
          type: integer
          format: int32
          nullable: true
        meeting_id:
          description: Id of meeting to attach.
          type: integer
          format: int32
          nullable: true
        options:
          description: List of poll options to attach.
          type: array
          items:
            $ref: '#/components/schemas/PollOptionIn'
          nullable: true
        text:
          description: The message text.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    MessageOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        id:
          description: Gets the id of the entity.
          type: integer
          format: int32
          nullable: true
        app_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        parent:
          $ref: '#/components/schemas/EntityOut'
        text:
          description: Gets the message text.
          type: string
          nullable: true
        html:
          description: Gets the message text as html.
          type: string
          nullable: true
        plain:
          description: Gets the message text with all formatting stripped.
          type: string
          nullable: true
        attachment_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        attachments:
          description: Gets the files attached to this Weavy.Core.Models.Msg.
          type: array
          items:
            $ref: '#/components/schemas/FileOut'
          nullable: true
        embed_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        embed:
          $ref: '#/components/schemas/Embed'
        meeting_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        meeting:
          $ref: '#/components/schemas/MeetingOut'
        option_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        options:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/PollOptionOut'
          nullable: true
        reactions:
          description: Gets reactions to the message.
          type: array
          items:
            $ref: '#/components/schemas/ReactionOut'
          nullable: true
        metadata:
          description: Gets or sets additional metadata.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        created_at:
          description: Gets or sets the date and time (UTC) the entity was created.
          type: string
          format: date-time
          nullable: true
        created_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        modified_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        modified_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        modified_by:
          $ref: '#/components/schemas/UserOut'
        is_trashed:
          description: ''
          type: boolean
          nullable: true
    MessageOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/MessageOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    MessageUp:
      description: Model for updating messages.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the item.
          type: array
          items:
            type: string
          nullable: true
        attachments:
          description: Ids of attached files.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        blobs:
          description: Ids of additional blobs to attach.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        embed_id:
          description: Id of embed to attach.
          type: integer
          format: int32
          nullable: true
        meeting_id:
          description: Id of meeting to attach.
          type: integer
          format: int32
          nullable: true
        options:
          description: List of poll options for the item.
          type: array
          items:
            $ref: '#/components/schemas/PollOptionUp'
          nullable: true
        text:
          description: The message text.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    NotificationOut:
      description: An object representing a notification.
      type: object
      properties:
        id:
          description: Gets the id of the notification.
          type: integer
          format: int32
          readOnly: true
        action:
          description: The type of action that triggered the notification.
          type: string
          nullable: true
        actor_id:
          description: >-
            Id of the user that performed the action that triggered the
            notification.
          type: integer
          format: int32
          nullable: true
        actor:
          $ref: '#/components/schemas/UserOut'
        template:
          description: Gets or sets the notification template string.
          type: string
          nullable: true
        args:
          description: >-
            Gets or sets the arguments used to format
            Weavy.Core.DTO.NotificationOut.Template into a (localized) string.
          type: array
          items:
            type: string
          nullable: true
        text:
          description: Gets the formatted (and localized) notification text.
          type: string
          nullable: true
        html:
          description: Gets the notification text as html.
          type: string
          nullable: true
        plain:
          description: Gets the notification text as plain text.
          type: string
          nullable: true
        link:
          $ref: '#/components/schemas/EntityOut'
        url:
          description: Gets or sets an url to open when clicking on the notification.
          type: string
          nullable: true
        user_id:
          description: Id of the notification receiver.
          type: integer
          format: int32
          nullable: true
        user:
          $ref: '#/components/schemas/UserOut'
        metadata:
          description: ''
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        created_at:
          description: Gets or sets the time (UTC) the notification was created.
          type: string
          format: date-time
        is_unread:
          description: If the notification is unread or not.
          type: boolean
          nullable: true
    NotificationOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/NotificationOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    Permission:
      description: Indicates the permissions a user can have on an entity.
      enum:
        - none
        - create
        - read
        - update
        - delete
        - list
        - admin
        - manage
      type: string
    PollOptionIn:
      description: Model for adding poll options.
      required:
        - text
      type: object
      properties:
        text:
          description: The option text.
          minLength: 1
          type: string
    PollOptionOut:
      description: An individual option in a poll.
      type: object
      properties:
        id:
          description: Gets the option id.
          type: integer
          format: int32
          readOnly: true
        text:
          description: Gets or sets the option text.
          type: string
          nullable: true
          readOnly: true
        vote_count:
          description: Gets the number of users that voted for this option.
          type: integer
          format: int32
          nullable: true
          readOnly: true
        has_voted:
          description: If the authenticated user has voted on this option.
          type: boolean
          nullable: true
          readOnly: true
        voters:
          description: Gets the voters, i.e. the people that voted for this option.
          type: array
          items:
            $ref: '#/components/schemas/UserOut'
          nullable: true
          readOnly: true
    PollOptionUp:
      description: Model for updating poll options.
      required:
        - text
      type: object
      properties:
        id:
          description: The option id.
          type: integer
          format: int32
          nullable: true
        text:
          description: The option text.
          minLength: 1
          type: string
    PostIn:
      description: Model for inserting posts.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the item.
          type: array
          items:
            type: string
          nullable: true
        blobs:
          description: Ids of blobs to attach.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        embed_id:
          description: Id of embed to attach.
          type: integer
          format: int32
          nullable: true
        meeting_id:
          description: Id of meeting to attach.
          type: integer
          format: int32
          nullable: true
        options:
          description: List of poll options to attach.
          type: array
          items:
            $ref: '#/components/schemas/PollOptionIn'
          nullable: true
        text:
          description: The message text.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    PostOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        comment_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        comments:
          description: Gets the comments for the message.
          type: array
          items:
            $ref: '#/components/schemas/CommentOut'
          nullable: true
        is_subscribed:
          description: ''
          type: boolean
          nullable: true
        id:
          description: Gets the id of the entity.
          type: integer
          format: int32
          nullable: true
        app_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        parent:
          $ref: '#/components/schemas/EntityOut'
        text:
          description: Gets the message text.
          type: string
          nullable: true
        html:
          description: Gets the message text as html.
          type: string
          nullable: true
        plain:
          description: Gets the message text with all formatting stripped.
          type: string
          nullable: true
        attachment_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        attachments:
          description: Gets the files attached to this Weavy.Core.Models.Msg.
          type: array
          items:
            $ref: '#/components/schemas/FileOut'
          nullable: true
        embed_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        embed:
          $ref: '#/components/schemas/Embed'
        meeting_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        meeting:
          $ref: '#/components/schemas/MeetingOut'
        option_count:
          description: ''
          type: integer
          format: int32
          nullable: true
        options:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/PollOptionOut'
          nullable: true
        reactions:
          description: Gets reactions to the message.
          type: array
          items:
            $ref: '#/components/schemas/ReactionOut'
          nullable: true
        metadata:
          description: Gets or sets additional metadata.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        created_at:
          description: Gets or sets the date and time (UTC) the entity was created.
          type: string
          format: date-time
          nullable: true
        created_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        modified_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        modified_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        modified_by:
          $ref: '#/components/schemas/UserOut'
        is_trashed:
          description: ''
          type: boolean
          nullable: true
    PostOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/PostOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    PostUp:
      description: Model for updating posts.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the item.
          type: array
          items:
            type: string
          nullable: true
        attachments:
          description: Ids of attached files.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        blobs:
          description: Ids of additional blobs to attach.
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        embed_id:
          description: Id of embed to attach.
          type: integer
          format: int32
          nullable: true
        meeting_id:
          description: Id of meeting to attach.
          type: integer
          format: int32
          nullable: true
        options:
          description: List of poll options for the item.
          type: array
          items:
            $ref: '#/components/schemas/PollOptionUp'
          nullable: true
        text:
          description: The message text.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
    PresenceStatus:
      description: "Enum type for user presence. \r\nA user can have one of two possible presence values, active or away. \r\nA user is active if they have at least one active client connected, and they are not manually marked as \"away\"."
      enum:
        - away
        - active
      type: string
    PreviewFormat:
      description: ''
      enum:
        - none
        - audio
        - code
        - embed
        - html
        - image
        - pdf
        - text
        - video
      type: string
    ProblemDetails:
      type: object
      properties:
        title:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
        extensions:
          type: object
          additionalProperties: {}
          nullable: true
    ReactionIn:
      description: ''
      required:
        - content
      type: object
      properties:
        content:
          description: >-
            A single emoji character describing the reaction, e.g. '`👍`' or
            '`❤️`'.
          minLength: 1
          type: string
    ReactionOut:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
          readOnly: true
        parent:
          $ref: '#/components/schemas/EntityOut'
        content:
          description: ''
          type: string
          nullable: true
          readOnly: true
        created_at:
          description: ''
          type: string
          format: date-time
          nullable: true
          readOnly: true
        created_by_id:
          description: ''
          type: integer
          format: int32
          nullable: true
          readOnly: true
        created_by:
          $ref: '#/components/schemas/UserOut'
        count:
          description: ''
          type: integer
          format: int32
          nullable: true
          readOnly: true
    ReactionOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/ReactionOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    TokenIn:
      description: ''
      type: object
      properties:
        expires_in:
          description: >-
            The lifetime of the access token in seconds, defaults to 3600
            seconds (1 hour) when not specified.
          type: integer
          format: int32
          nullable: true
    TokenOut:
      description: ''
      type: object
      properties:
        access_token:
          description: ''
          type: string
          nullable: true
        expires_in:
          description: ''
          type: integer
          format: int32
          nullable: true
    UserIn:
      description: User insert model.
      required:
        - uid
      type: object
      properties:
        tags:
          description: A list of tags to associate with the user.
          type: array
          items:
            type: string
          nullable: true
        uid:
          description: >-
            A unique user identifier (*cannot contain whitespace and must
            contain at least one non-digit*).
          maxLength: 256
          minLength: 0
          type: string
        email:
          description: Email address.
          maxLength: 256
          minLength: 0
          type: string
          format: email
          nullable: true
        given_name:
          description: >-
            Given/First name(s) of user. In some cultures, people can have
            multiple given names; all can be present, with the names being
            separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        middle_name:
          description: >-
            Middle name(s) of the user. In some cultures, people can have
            multiple middle names; all can be present, with the names being
            separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        name:
          description: >-
            The full name in displayable form including all name parts, possibly
            including titles and suffixes.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        family_name:
          description: >-
            Family/Last name(s) of user. In some cultures, people can have
            multiple family names or no family name; all can be present, with
            the names being separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        nickname:
          description: >-
            The nickname, a casual name that may or may not be the same as the
            Weavy.Core.DTO.UserUp.GivenName. For instance, a person with given
            name "Michael" might have the nickname "Mike".
          maxLength: 32
          minLength: 0
          type: string
          nullable: true
        phone_number:
          description: The user's preferred phone number.
          maxLength: 32
          minLength: 0
          type: string
          nullable: true
        comment:
          description: Comment or other application-specific information about the user.
          type: string
          nullable: true
        picture:
          description: >-
            The user's profile picture. Can be a public URL, a base64 encoded
            data URI or a blob id.
          type: string
          nullable: true
        directory:
          description: Id or name of user directory.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        is_suspended:
          description: '`true` to mark the user account as suspended, otherwise `false`.'
          type: boolean
        is_bot:
          description: '`true` to indicate that the user is a bot, otherwise `false`.'
          type: boolean
    UserOut:
      description: ''
      type: object
      properties:
        tags:
          description: ''
          type: array
          items:
            type: string
          nullable: true
        id:
          description: ''
          type: integer
          format: int32
          nullable: true
        uid:
          description: ''
          type: string
          nullable: true
        display_name:
          description: ''
          type: string
          nullable: true
        email:
          description: ''
          type: string
          nullable: true
        given_name:
          description: ''
          type: string
          nullable: true
        middle_name:
          description: ''
          type: string
          nullable: true
        name:
          description: ''
          type: string
          nullable: true
        family_name:
          description: ''
          type: string
          nullable: true
        nickname:
          description: ''
          type: string
          nullable: true
        phone_number:
          description: ''
          type: string
          nullable: true
        comment:
          description: ''
          type: string
          nullable: true
        directory:
          $ref: '#/components/schemas/DirectoryOut'
        directory_id:
          description: ''
          type: integer
          format: int32
          nullable: true
        picture:
          $ref: '#/components/schemas/BlobOut'
        picture_id:
          description: Gets the (blob) id of the profile picture.
          type: integer
          format: int32
          nullable: true
        avatar_url:
          description: Gets or sets the avatar url of the user
          type: string
          nullable: true
        metadata:
          description: ''
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        presence:
          $ref: '#/components/schemas/PresenceStatus'
        created_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        modified_at:
          description: ''
          type: string
          format: date-time
          nullable: true
        is_bot:
          description: Gets or sets a value indicating whether the user is a bot.
          type: boolean
          nullable: true
        is_suspended:
          description: >-
            Gets or sets a value indicating whether the user account is
            suspended.
          type: boolean
          nullable: true
        is_trashed:
          description: Gets or sets a value indicating whether the user account is trashed.
          type: boolean
          nullable: true
    UserOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/UserOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    UserUp:
      description: Base model used when inserting/updating users.
      type: object
      properties:
        tags:
          description: A list of tags to associate with the user.
          type: array
          items:
            type: string
          nullable: true
        uid:
          description: >-
            Unique user identifier (*cannot contain whitespace and must contain
            at least one non-digit*).
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        email:
          description: Email address.
          maxLength: 256
          minLength: 0
          type: string
          format: email
          nullable: true
        given_name:
          description: >-
            Given/First name(s) of user. In some cultures, people can have
            multiple given names; all can be present, with the names being
            separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        middle_name:
          description: >-
            Middle name(s) of the user. In some cultures, people can have
            multiple middle names; all can be present, with the names being
            separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        name:
          description: >-
            The full name in displayable form including all name parts, possibly
            including titles and suffixes.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        family_name:
          description: >-
            Family/Last name(s) of user. In some cultures, people can have
            multiple family names or no family name; all can be present, with
            the names being separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        nickname:
          description: >-
            The nickname, a casual name that may or may not be the same as the
            Weavy.Core.DTO.UserUp.GivenName. For instance, a person with given
            name "Michael" might have the nickname "Mike".
          maxLength: 32
          minLength: 0
          type: string
          nullable: true
        phone_number:
          description: The user's preferred phone number.
          maxLength: 32
          minLength: 0
          type: string
          nullable: true
        comment:
          description: Comment or other application-specific information about the user.
          type: string
          nullable: true
        picture:
          description: >-
            The user's profile picture. Can be a public URL, a base64 encoded
            data URI or a blob id.
          type: string
          nullable: true
        directory:
          description: Id or name of user directory.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        is_suspended:
          description: '`true` to mark the user account as suspended, otherwise `false`.'
          type: boolean
        is_bot:
          description: '`true` to indicate that the user is a bot, otherwise `false`.'
          type: boolean
    UserUpsert:
      description: ''
      type: object
      properties:
        tags:
          description: A list of tags to associate with the user.
          type: array
          items:
            type: string
          nullable: true
        uid:
          description: >-
            Unique user identifier (*cannot contain whitespace and must contain
            at least one non-digit*).
          type: string
          nullable: true
        email:
          description: Email address.
          maxLength: 256
          minLength: 0
          type: string
          format: email
          nullable: true
        given_name:
          description: >-
            Given/First name(s) of user. In some cultures, people can have
            multiple given names; all can be present, with the names being
            separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        middle_name:
          description: >-
            Middle name(s) of the user. In some cultures, people can have
            multiple middle names; all can be present, with the names being
            separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        name:
          description: >-
            The full name in displayable form including all name parts, possibly
            including titles and suffixes.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        family_name:
          description: >-
            Family/Last name(s) of user. In some cultures, people can have
            multiple family names or no family name; all can be present, with
            the names being separated by space characters.
          maxLength: 64
          minLength: 0
          type: string
          nullable: true
        nickname:
          description: >-
            The nickname, a casual name that may or may not be the same as the
            Weavy.Core.DTO.UserUp.GivenName. For instance, a person with given
            name "Michael" might have the nickname "Mike".
          maxLength: 32
          minLength: 0
          type: string
          nullable: true
        phone_number:
          description: The user's preferred phone number.
          maxLength: 32
          minLength: 0
          type: string
          nullable: true
        comment:
          description: Comment or other application-specific information about the user.
          type: string
          nullable: true
        picture:
          description: >-
            The user's profile picture. Can be a public URL, a base64 encoded
            data URI or a blob id.
          type: string
          nullable: true
        directory:
          description: Id or name of user directory.
          type: string
          nullable: true
        metadata:
          description: >-
            Additional metadata properties, e.g. `{ "color": "blue", "size":
            "XL" }`.
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        is_suspended:
          description: '`true` to mark the user account as suspended, otherwise `false`.'
          type: boolean
        is_bot:
          description: '`true` to indicate that the user is a bot, otherwise `false`.'
          type: boolean
    WebhookIn:
      description: ''
      required:
        - payload_url
        - triggers
      type: object
      properties:
        payload_url:
          description: The URL to which the payloads will be delivered.
          maxLength: 2048
          minLength: 0
          type: string
          format: uri
        secret:
          description: >-
            If provided, the secret will be used as the key to generate the HMAC
            hex digest value for delivery signature headers.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        triggers:
          description: A list of event groups that will trigger this webhook.
          uniqueItems: true
          type: array
          items:
            type: string
        enabled:
          description: >-
            Gets or sets a value indicating wheter the webhook is enabled (if
            notifications are sent when the webhook is triggered).
          type: boolean
    WebhookOut:
      description: ''
      type: object
      properties:
        id:
          description: The unique identifier of the hook.
          type: integer
          format: int32
          readOnly: true
        payload_url:
          description: The URL to which the payloads will be delivered.
          type: string
          nullable: true
          readOnly: true
        triggers:
          description: The list of events that will trigger this Weavy.Core.Models.Webhook.
          type: array
          items:
            type: string
          nullable: true
          readOnly: true
        is_enabled:
          description: >-
            Gets or sets a value indicating wheter the webhook is enabled (if
            notifications are sent when the webhook is triggered).
          type: boolean
          readOnly: true
    WebhookOutPagedListOut:
      description: Represents a collection of objects that can be paged.
      type: object
      properties:
        data:
          description: Gets the items on the current page.
          type: array
          items:
            $ref: '#/components/schemas/WebhookOut'
          nullable: true
        start:
          description: >-
            Gets the number of the first item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        end:
          description: >-
            Gets the number of the last item on this page (if the data is
            paged).
          type: integer
          format: int32
          nullable: true
          readOnly: true
        count:
          description: Gets the total number of items in the result.
          type: integer
          format: int64
          nullable: true
          readOnly: true
    WebhookUp:
      description: ''
      required:
        - payload_url
        - triggers
      type: object
      properties:
        payload_url:
          description: The URL to which the payloads will be delivered.
          maxLength: 2048
          minLength: 0
          type: string
          format: uri
        secret:
          description: >-
            If provided, the secret will be used as the key to generate the HMAC
            hex digest value for delivery signature headers.
          maxLength: 256
          minLength: 0
          type: string
          nullable: true
        triggers:
          description: A list of event groups that will trigger this webhook.
          type: array
          items:
            type: string
        is_enabled:
          description: >-
            Indicates if the webhook is enabled (if notifications are sent when
            the webhook is triggered).
          type: boolean
    AppsRemoveMultipleMembersRequest:
      type: array
      items:
        type: string
    AppsRemoveMultipleMembersRequest1:
      type: array
      items:
        type: string
    AppsRemoveMultipleMembersRequest2:
      type: array
      items:
        type: string
    AppsRemoveMultipleMembersRequest3:
      type: array
      items:
        type: string
    AppsAddMembersToAppRequest:
      type: array
      items:
        $ref: '#/components/schemas/MemberIn'
    AppsAddMembersToAppRequest1:
      type: array
      items:
        $ref: '#/components/schemas/MemberIn'
    AppsAddMembersToAppRequest2:
      type: array
      items:
        $ref: '#/components/schemas/MemberIn'
    AppsAddMembersToAppRequest3:
      type: array
      items:
        $ref: '#/components/schemas/MemberIn'
    FilesGetFileVersionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/FileOut'
    OptionsListVotersResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserOut'
