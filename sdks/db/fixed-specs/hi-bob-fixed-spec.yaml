openapi: 3.0.1
info:
  title: Bob API
  description: Access your employees data with the Bob API
  version: 1.0.0
  x-konfig-ignore:
    object-with-no-properties: true
    potential-incorrect-type: true
servers:
  - description: Production
    url: https://api.hibob.com/v1
  - description: Sandbox
    url: https://api.sandbox.hibob.com/v1
tags:
  - name: People
  - name: Tables
  - name: Time off
  - name: Payroll
  - name: Metadata
  - name: Documents
  - name: Reports
  - name: Tasks
  - name: Custom Tables
  - name: Hiring
  - name: Onboarding
  - name: Attendance
  - name: Objects
paths:
  /people/search:
    post:
      tags:
        - People
      summary: Search for employees
      operationId: People_searchEmployees
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Changes to this API are planned to take effect on May 31,
        2024.  Make sure to review all of the details in the <a
        href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
        pattern API Changes</a>  article in the help center.<br> <br>This API
        returns a list of requested employees with requested fields.  The data
        is filtered based on the requested fields and access level of the
        logged-in user.  Only viewable categories are returned.<br />
        <br><b>Note</b>: The values of the list fields represent the list item
        ID and not the list item value. To obtain the corresponding list item
        value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      requestBody:
        description: >-
          Read request content that allows you to select fields and other
          options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadEmployeesRequestReference'
        required: true
      responses:
        '200':
          description: Requested employees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people:
    get:
      tags:
        - People
      summary: Read all company employees
      operationId: People_listEmployees
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Deprecated at the end of March 2024. Please use
        <b>/people/search</b> ("Search for employees") instead. <br/><br/> This
        returns a list of all active employees. The data is filtered based on
        the access level of the logged-in user. Only viewable categories are
        returned.<br /><br> <b>Note</b>: The values of the list fields represent
        the list item ID and not the list item value. To obtain the
        corresponding list item value, use the HiBob metadata API to determine
        the field list name. Then, use the list item ID to locate the list item
        value. For more information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Should include inactive employees.
          name: showInactive
          in: query
          schema:
            type: boolean
        - description: >-
            Whether to supply humanReadable values in JSON instead of
            machine-readable format (default).
          name: humanReadable
          in: query
          schema:
            type: boolean
            default: false
        - description: >-
            Whether to include the additional "humanReadable" JSON node in the
            response.
          name: includeHumanReadable
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: All employees.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
    post:
      tags:
        - People
      summary: Create company employee.
      operationId: People_createEmployeeRecord
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Changes to this API are planned to take effect on May 31,
        2024.  Make sure to review all of the details in the <a
        href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
        pattern API Changes</a>  article in the help center.<br> <br>This
        creates a new employee record in Bob. You can include only the fields
        listed in the  [Fields Metadata
        API](https://apidocs.hibob.com/reference/get_company-people-fields). 
        <br /><br><b>Note</b>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeRequest'
        required: true
      responses:
        '200':
          description: Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
      x-codegen-request-body-name: body
  /people/{identifier}:
    post:
      tags:
        - People
      summary: Read company employee fields by employee ID.
      operationId: People_readEmployeeFields
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Changes to this API are planned to take effect on May 31,
        2024.  Make sure to review all of the details in the <a
        href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
        pattern API Changes</a>  article in the help center.<br> <br>Returns the
        employee's fields by the specified ID or email.<br /><br><b>Note</b>:
        The values of the list fields represent the list item ID and not the
        list item value. To obtain the corresponding list item value, use the
        HiBob metadata API to determine the field list name. Then, use the list
        item ID to locate the list item value. For more information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: employee ID or email
          name: identifier
          in: path
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: >-
          Read request content that allows you to select fields and other
          options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadSingleEmployeeRequestReference'
      responses:
        '200':
          description: Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - People
      summary: Read company employee by ID.
      operationId: People_readEmployeeById
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Deprecated at the end of March 2024. Please use <b>POST
        /people/{identifier}</b> ("Read company employee fields by ID.")
        instead. <br/><br/> Returns the employee by the specified ID.<br
        /><br><b>Note</b>: The values of the list fields represent the list item
        ID and not the list item value. To obtain the corresponding list item
        value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: employee id
          name: identifier
          in: path
          required: true
          schema:
            type: string
            format: string
        - description: >-
            Whether to supply fields (paths) instead of empty list as a default
            in order  to not exceed data permitted.
          name: fields
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            Whether to supply humanReadable values in JSON instead of
            machine-readable (default) format.
          name: humanReadable
          in: query
          schema:
            type: boolean
            default: false
        - description: >-
            Whether to include the additional "humanReadable" JSON node in the
            response.
          name: includeHumanReadable
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
    put:
      tags:
        - People
      summary: Update company employee.
      operationId: People_updateEmployeeRecord
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Changes to this API are planned to take effect on May 31,
        2024.  Make sure to review all of the details in the <a
        href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
        pattern API Changes</a>  article in the help center.<br> <br>This
        updates the employee record in Bob. You can include only the fields
        listed in the  [Fields Metadata
        API](https://apidocs.hibob.com/reference/get_company-people-fields)
        where historical is equal to false.  <br /><br><b>Note</b>
      parameters:
        - description: Employee ID.
          name: identifier
          in: path
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: Use Fields Metadata API for available field definitions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeopleUpdateEmployeeRecordRequest'
        required: true
      responses:
        '200':
          description: Employee updated successfully.
          content: {}
        '304':
          description: If employee data not modified.
          content: {}
      x-codegen-request-body-name: body
  /employees/{identifier}/uninvite:
    post:
      tags:
        - People
      summary: Revoke access to Bob for an employee.
      operationId: People_revokeAccessToEmployee
      security:
        - Basic: []
      parameters:
        - description: employee id
          name: identifier
          in: path
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: Revoke access successful.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /employees/{identifier}/terminate:
    post:
      tags:
        - People
      summary: Terminate company employee.
      operationId: People_terminateEmployee
      security:
        - Basic: []
      description: >-
        This changes the employee’s status to Terminated according to specified
        termination date. <br />
      parameters:
        - description: Employee ID.
          name: identifier
          in: path
          required: true
          schema:
            type: string
            format: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeTermination'
        required: true
      responses:
        '200':
          description: Termination entry added successfully.
          content: {}
      x-codegen-request-body-name: body
  /onboarding/wizards:
    get:
      tags:
        - Onboarding
      summary: Get a summary of all onboarding wizards.
      operationId: Onboarding_getWizardSummary
      security:
        - Basic: []
      description: >-
        Wizard info includes Wizard ID, name and description.<br /><b>Supported
        user types:</b> Service.
      responses:
        '200':
          description: Onboarding Wizards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingWizards'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /employees/{employeeId}/invitations:
    post:
      tags:
        - People
      summary: Invite an employee with a welcome wizard ID.
      operationId: People_inviteEmployeeWizard
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationByWizard'
        required: true
      responses:
        '200':
          description: Invitation submitted successfully.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /employees/{employeeId}/start-date:
    post:
      tags:
        - People
      summary: Set or update an employee's start date.
      operationId: People_setStartDate
      security:
        - Basic: []
      parameters:
        - description: employee ID
          name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartDateUpdate'
        required: true
      responses:
        '200':
          description: Start date was set successfully.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /company/reports:
    get:
      tags:
        - Reports
      summary: Read company reports
      operationId: Reports_listAccessibleReports
      security:
        - Basic: []
      description: >-
        Returns a list of all the defined company reports. The data is filtered
        based on the access level of the user. Only viewable categories are
        returned.<br />
      responses:
        '200':
          description: Company Reports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /company/reports/{reportId}/download:
    get:
      tags:
        - Reports
      summary: Download the report by ID
      operationId: Reports_downloadById
      security:
        - Basic: []
      description: >-
        Returns a report data file in the specified format.<br /><b>Supported
        user types:</b> Service.
      parameters:
        - description: Report ID
          name: reportId
          in: path
          required: true
          schema:
            type: number
            format: long
        - description: File format
          name: format
          in: query
          required: true
          schema:
            type: string
            enum:
              - csv
              - xlsx
              - json
        - description: Should include info.
          name: includeInfo
          in: query
          schema:
            type: boolean
            format: boolean
        - description: >-
            Requested language for the report columns in the format of locale
            (e.g. fr-FR). If this is not provided, the user preferences locale
            is used.
          name: locale
          in: query
          schema:
            type: string
            format: string
        - description: >-
            Optional field. Only enforced when <i><b>format</b></i> is
            <i>json</i>. <br> <b>If not sent:</b> supply machine-readable values
            only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include
            the additional "humanReadable" JSON node in the response. <br>  <br>
            <b>REPLACE</b> - supply humanReadable values in JSON instead of
            machine-readable format. <br>
          name: humanReadable
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            Includes the report name and execution date in the report file. By
            default this is set to True.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportsDownloadByIdResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /company/reports/{reportId}/download-async:
    get:
      tags:
        - Reports
      summary: Get the report download URL for polling
      operationId: Reports_getDownloadUrl
      security:
        - Basic: []
      description: >-
        Returns the polling URL report file of the specified format under
        "Location" in the response header.<br />
      parameters:
        - description: Report id
          name: reportId
          in: path
          required: true
          schema:
            type: number
            format: long
        - description: File format
          name: format
          in: query
          required: true
          schema:
            type: string
            enum:
              - csv
              - xlsx
        - description: Should include info
          name: includeInfo
          in: query
          schema:
            type: boolean
            format: boolean
        - description: >-
            Requested language for the report columns in the format of the
            locale (e.g. fr-FR). If this is not provided, the user preferences
            locale is used.
          name: locale
          in: query
          schema:
            type: string
            format: string
        - description: >-
            Optional field. Only enforced when <i><b>format</b></i> is
            <i>json</i>. <br> <b>If not sent:</b> supply machine-readable values
            only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include
            the additional "humanReadable" JSON node in the response. <br>  <br>
            <b>REPLACE</b> - supply humanReadable values in JSON instead of
            machine-readable format. <br>
          name: humanReadable
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Report URL under "Location" in the response header.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /company/reports/download/{reportName}:
    get:
      tags:
        - Reports
      summary: Download report by file URL
      operationId: Reports_downloadReportFile
      security:
        - Basic: []
      description: >-
        Returns the report data file when it is ready. If the file is not ready
        yet the response will be 204. It will then have to try again.<br />(This
        URL is the response of the previous API:
        https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
      parameters:
        - description: Report name
          name: reportName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            Include the report name and execution date in the report file. This
            defaults to true.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportsDownloadReportFileResponse'
        '204':
          description: The file is not yet ready, please try again.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /profiles:
    get:
      tags:
        - People
      summary: Read the public profile section of all active employees.
      operationId: People_listActiveEmployees
      security:
        - Basic: []
      description: >-
        Returns the public section of all  active employees of the logged-in
        user company.<br /><br><b>Note</b>: The values of the list fields
        represent the list item ID and not the list item value. To obtain the
        corresponding list item value. Use the HiBob metadata API to determine
        the field list name. Then, use the list item ID to locate the list item
        value. For more information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Optional field name to sort by. This defaults to firstName.
          name: sortBy
          in: query
          schema:
            type: string
            format: string
      responses:
        '200':
          description: Employee profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesProfiles'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /avatars:
    get:
      tags:
        - People
      summary: Read avatar for an employee email
      operationId: People_getEmailAvatar
      security:
        - Basic: []
      description: Returns the avatar image URL of the employee.
      parameters:
        - description: Employee email.
          name: email
          in: query
          schema:
            type: string
            format: string
      responses:
        '200':
          description: URL of the emloyee avatar.
          content: {}
  /avatars/{employeeId}:
    get:
      tags:
        - People
      summary: Read avatar for an employee ID.
      operationId: People_getAvatarUrl
      security:
        - Basic: []
      description: Returns the avatar image URL of the employee.
      parameters:
        - description: employee id
          name: employeeId
          in: path
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: URL of the emloyee avatar.
          content: {}
    put:
      tags:
        - People
      summary: Upload employee's avatar by image url
      operationId: People_uploadEmployeeAvatarUrl
      security:
        - Basic: []
      description: >-
        Upload an employee's Avatar by providing a URL to the image to
        upload.<br />
      parameters:
        - description: Employee ID.
          name: employeeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAvatar'
        required: true
      responses:
        '200':
          description: Avatar Uploaded successfully
          content: {}
      x-codegen-request-body-name: body
  /my/avatar:
    get:
      tags:
        - People
      summary: Read avatar for logged-in user
      operationId: People_getAvatarUrl
      security:
        - Bearer: []
      description: >-
        Returns the avatar image URL of the logged-in user.<b>Supported user
        types:</b> Employee.
      responses:
        '200':
          description: URL of logged-in user avatar
          content: {}
      deprecated: true
  /tasks:
    get:
      tags:
        - Tasks
      summary: Read all open tasks.
      operationId: Tasks_getOpenTasks
      security:
        - Basic: []
      responses:
        '200':
          description: All open tasks for this company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
  /my/tasks:
    get:
      tags:
        - Tasks
      summary: Read my tasks
      operationId: Tasks_getEmployeeTasks
      security:
        - Bearer: []
      description: <b>Supported user types:</b> Employee.
      responses:
        '200':
          description: The logged-in user's tasks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
      deprecated: true
  /tasks/people/{id}:
    get:
      tags:
        - Tasks
      summary: 'Read tasks of a specific employee '
      operationId: Tasks_readEmployeeTasks
      security:
        - Basic: []
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
            format: string
        - description: >-
            filter tasks by open / closed status. Not sending task_status will
            return all tasks.
          name: task_status
          in: query
          schema:
            type: string
            enum:
              - open
              - closed
      responses:
        '200':
          description: All of a specific employee's open tasks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{taskId}/complete:
    post:
      tags:
        - Tasks
      summary: Mark a task as complete
      operationId: Tasks_completeTask
      security:
        - Basic: []
      parameters:
        - description: task id
          name: taskId
          in: path
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: Marks a task as complete.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{id}/email:
    put:
      tags:
        - People
      summary: Update an employee's email address.
      operationId: People_updateEmail
      security:
        - Basic: []
      description: >-
        Change an employee's email address. If you cannot change the self email
        an invitation will be sent to the new address to verify the email if the
        employee is invited/active.<br />
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmail'
        required: true
      responses:
        '200':
          description: Invitation sent successfully.
          content: {}
      x-codegen-request-body-name: body
  /company/named-lists:
    get:
      tags:
        - Metadata
      summary: Get all company lists
      operationId: Metadata_getCompanyNamedLists
      security:
        - Basic: []
      parameters:
        - description: Whether to include archived items in the response.
          name: includeArchived
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lists'
  /company/named-lists/{listName}:
    get:
      tags:
        - Metadata
      summary: Get a specific company list by name.
      operationId: Metadata_getNamedList
      security:
        - Basic: []
      parameters:
        - description: The internal name of the list.
          name: listName
          in: path
          required: true
          schema:
            type: string
        - description: Whether to include archived items in the response.
          name: includeArchived
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: >-
            Successful response. Please note that the item ID may be textual or
            numeric depending on the list type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '404':
          description: If the list was not found.
          content: {}
    post:
      tags:
        - Metadata
      summary: Add a new item to an existing list.
      operationId: Metadata_addNewItemToNamedList
      security:
        - Basic: []
      parameters:
        - description: The internal name of the list.
          name: listName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The <b>parentId</b> attribute is optional and only applies to
          hierarchy lists. When <b>parentId</b> is specified, the newly created
          list item will be placed under the specific hierarchy parent node.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewListItem'
        required: true
      responses:
        '200':
          description: >-
            A new item is created. Please note that the ID of the newly created
            item may be textual or numeric depending on the list type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatListItemId'
        '404':
          description: If the list was not found.
          content: {}
        '409':
          description: If the added item already exists
          content: {}
      x-codegen-request-body-name: body
  /company/named-lists/{listName}/{itemId}:
    put:
      tags:
        - Metadata
      summary: Update an existing item from a list.
      operationId: Metadata_updateItemFromNamedList
      security:
        - Basic: []
      parameters:
        - description: The internal name of the list.
          name: listName
          in: path
          required: true
          schema:
            type: string
        - description: The ID of the list item.
          name: itemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          You need to provide at least one of: <b>name</b> or <b>parentId</b>.
          Providing a name will rename the list item value. Providing the parent
          ID will move the hierarchy list item (together with its children)
          under the indicated parent node.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListItemRequest'
        required: true
      responses:
        '200':
          description: List item was updated successfully.
          content: {}
        '404':
          description: If the list or item was not found.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - Metadata
      summary: Delete an item from an existing list.
      operationId: Metadata_deleteItemFromCompanyNamedList
      security:
        - Basic: []
      parameters:
        - description: The internal name of the list.
          name: listName
          in: path
          required: true
          schema:
            type: string
        - description: The ID of the list item.
          name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list item was deleted successfully.
          content: {}
        '404':
          description: If the list or item was not found
          content: {}
  /company/people/fields:
    get:
      tags:
        - Metadata
      summary: Get all company fields.
      operationId: Metadata_getCompanyFields
      security:
        - Basic: []
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
    post:
      tags:
        - Metadata
      summary: Create a new field.
      operationId: Metadata_addNewField
      security:
        - Basic: []
      requestBody:
        description: The field to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFieldRequest'
        required: true
      responses:
        '200':
          description: >-
            The new field was successfully created. The ID of the field is
            returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldId'
        '400':
          description: >-
            If the category of the field is root, or historical is set to true,
            but the category doesn't allow it, or if the field type is not
            supported.
          content: {}
        '404':
          description: If the category of the field doesn't exist
          content: {}
      x-codegen-request-body-name: body
  /company/people/fields/{fieldId}:
    put:
      tags:
        - Metadata
      summary: Update an existing field
      operationId: Metadata_updateField
      security:
        - Basic: []
      parameters:
        - description: The ID of the field.
          name: fieldId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The new name and/or description of the updated field.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldRequest'
        required: true
      responses:
        '200':
          description: The field was updated successfully.
          content: {}
        '404':
          description: If the field doesn't exist.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - Metadata
      summary: Delete an existing field.
      operationId: Metadata_deleteField
      security:
        - Basic: []
      parameters:
        - description: The ID of the field.
          name: fieldId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The field was deleted successfully.
          content: {}
        '400':
          description: If the field is a Bob default field.
          content: {}
        '404':
          description: If the field doesn't exist
          content: {}
  /timeoff/employees/{id}/requests:
    post:
      tags:
        - Time off
      summary: Submit a new time off request.
      operationId: TimeOff_submitNewRequest
      security:
        - Basic: []
      description: Submits a new timeoff request.<br />
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitTimeoffRequest'
        required: true
      responses:
        '200':
          description: Successfully submitted
          content: {}
      x-codegen-request-body-name: body
  /timeoff/employees/{id}/diffHours/requests:
    post:
      tags:
        - Time off
      summary: Submit a new time off request of different hours per day.
      operationId: TimeOff_submitNewRequestDiffHours
      security:
        - Basic: []
        - Bearer: []
      description: >-
        Submits a new timeoff request of different hours per day.<br
        /><b>Supported user types:</b> Employee, Service.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitTimeoffRequestDiffHours'
        required: true
      responses:
        '200':
          description: Successfully submitted
          content: {}
      x-codegen-request-body-name: body
  /timeoff/employees/{id}/requests/{requestId}:
    get:
      tags:
        - Time off
      summary: Get the details of an existing timeoff request.
      operationId: TimeOff_getDetailsOfRequest
      security:
        - Basic: []
      description: Supplies detailed info about an existing time off request.<br />
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: request id
          name: requestId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeoffRequest'
        '404':
          description: >-
            A request with the specified ID is not found for the specified
            employee.
          content: {}
    delete:
      tags:
        - Time off
      summary: Cancel an existing timeoff request
      operationId: TimeOff_cancelRequest
      security:
        - Basic: []
      description: Cancels an existing time off request.<br />
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Request ID.
          name: requestId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully canceled
          content: {}
  /timeoff/requests/changes:
    get:
      tags:
        - Time off
      summary: Get all new/deleted time off requests since the specified date.
      operationId: TimeOff_getNewDeletedRequestsSinceDate
      security:
        - Basic: []
      description: >-
        Returns the list of time off requests that are pending, approved or
        canceled since the specified date.<br />
      parameters:
        - description: >-
            Timestamp starting from which to return the changes. Should be in
            ISO-8601 format, e.g. 2050-04-05T14:30:24.345Z or
            2050-04-05T12:30-02:00.
          name: since
          in: query
          required: true
          schema:
            type: string
            format: date
        - description: >-
            Optional parameter. Indicates whether to include pending requests in
            the results.
          name: includePending
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of changes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeoffChanges'
  /timeoff/whosout:
    get:
      tags:
        - Time off
      summary: Read a list of who's out of the office.
      operationId: TimeOff_getWhosOut
      security:
        - Basic: []
      description: >-
        Returns time off information for a given date range.<br /><b>Supported
        user types:</b> Service.
      parameters:
        - description: Start period date
          name: from
          in: query
          required: true
          schema:
            type: string
            format: date
        - description: End period date
          name: to
          in: query
          required: true
          schema:
            type: string
            format: date
        - description: Include Hourly Requests
          name: includeHourly
          in: query
          schema:
            type: boolean
            default: false
        - description: >-
            Show the policy type's name instead of the policy's custom public
            name if the user has permission to view it, and the policy's custom
            public name exists.
          name: includePrivate
          in: query
          schema:
            type: boolean
            default: false
        - description: Include Pending Requests
          name: includePending
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: >-
            Time off requests as seen by the logged in user for a given date
            range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requests'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /timeoff/outtoday:
    get:
      tags:
        - Time off
      summary: Read a list of who's out of the office today or on the specified date.
      operationId: TimeOff_getOutOfOffice
      security:
        - Basic: []
      description: >-
        Returns the list of people that have a time off request today or on the
        specified date.<br />
      parameters:
        - description: >-
            Date to report out of the office. If not specified, the date at UTC
            at the time of the request is used.
          name: today
          in: query
          schema:
            type: string
            format: date
        - description: Include Hourly Requests
          name: includeHourly
          in: query
          schema:
            type: boolean
            default: false
        - description: >-
            Show the policy type's name instead of the policy's custom public
            name if the user has permission to view it, and the policy's custom
            public name exists.
          name: includePrivate
          in: query
          schema:
            type: boolean
            default: false
        - description: The employee's site ID
          name: siteId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The list of people who have taken time off, as seen by the logged in
            user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutTodays'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /timeoff/policy-types/{policyType}/reason-codes:
    get:
      tags:
        - Time off
      summary: Get Policy type reason codes
      operationId: TimeOff_listReasonCodes
      security:
        - Basic: []
      description: Get list of reason codes for a given policy type.<br />
      parameters:
        - description: Policy Type name.
          name: policyType
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of reason codes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonCodes'
        '404':
          description: A policy type with the specified name was not found.
          content: {}
    post:
      tags:
        - Time off
      summary: Add a list of reason codes for a given policy type.
      operationId: TimeOff_addReasonCodes
      security:
        - Basic: []
      description: >-
        Add a list of reason codes for a given policy type.<br /><b>Supported
        user types:</b> Service.
      parameters:
        - description: Policy Type name
          name: policyType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReasonCodesNames'
        required: true
      responses:
        '200':
          description: Submitted successfully.
          content: {}
        '404':
          description: A policy type with the specified name was not found.
          content: {}
      x-codegen-request-body-name: body
  /timeoff/policy-types/{policyType}:
    get:
      tags:
        - Time off
      summary: Get Policy type details
      operationId: TimeOff_getPolicyDetails
      security:
        - Basic: []
      description: Get details about a given policy type.<br />
      parameters:
        - description: Policy Type name
          name: policyType
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Policy type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyType'
        '404':
          description: A policy type with the specified name was not found.
          content: {}
  /timeoff/policy-types:
    get:
      tags:
        - Time off
      summary: Get all policy types names.
      operationId: TimeOff_listPolicyTypesNames
      security:
        - Basic: []
      description: Get a list of all policy type names.<br />
      responses:
        '200':
          description: List of policy types names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyTypes'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /timeoff/policies:
    get:
      tags:
        - Time off
      summary: Get Policy details.
      operationId: TimeOff_getPolicyDetails
      security:
        - Basic: []
      description: Get details about a given policy.<br />
      parameters:
        - description: Policy name.
          name: policyName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '404':
          description: A policy with the specified name was not found.
          content: {}
  /timeoff/policies/names:
    get:
      tags:
        - Time off
      summary: Get a list of policy names for a given policy type.
      operationId: TimeOff_listPolicyTypeNames
      security:
        - Basic: []
      description: Get a list of policy names for the user's defined policy type.<br />
      parameters:
        - description: Policy type name.
          name: policyTypeName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of policy names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNames'
  /timeoff/employees/{id}/balance:
    get:
      tags:
        - Time off
      summary: Get the balance for a given employee
      operationId: TimeOff_getEmployeeBalance
      security:
        - Basic: []
      description: >-
        Retrieve the balance for a given employee, for a given policy type, as
        of a given date.<br />
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Policy type name.
          name: policyType
          in: query
          required: true
          schema:
            type: string
        - description: Point in time.
          name: date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Balance result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResult'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /timeoff/employees/{id}/adjustments:
    post:
      tags:
        - Time off
      summary: Create a balance adjustment.
      operationId: TimeOff_createBalanceAdjustment
      security:
        - Basic: []
      description: >-
        Create a balance adjustment for a given employee for a given effective
        date.<br />
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjustmentRequest'
        required: true
      responses:
        '200':
          description: Success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /attendance/import/{importMethod}:
    post:
      tags:
        - Attendance
      summary: Import attendance data
      operationId: Attendance_importData
      security:
        - Basic: []
      parameters:
        - description: >-
            Indicates if the provided data should be processed via an
            aggregation engine or immediately. <ul>Aggregate - will add the logs
            to a temporary location, and an aggregation job will process the
            data asynchronously.</ul><ul>Immediate - will insert the records
            as-is.</ul>
          name: importMethod
          in: path
          required: true
          schema:
            type: string
            enum:
              - aggregate
              - immediate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAttendanceData'
        required: true
      responses:
        '200':
          description: Records imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAttendanceResponse'
        '400':
          description: Bad request, see error description.
          content: {}
        '403':
          description: >-
            Forbidden. Authorization is implemented using a service user with
            attendance management permissions.
          content: {}
      x-codegen-request-body-name: body
  /payroll/history:
    get:
      tags:
        - Payroll
      summary: Read payroll history.
      operationId: Payroll_readHistory
      security:
        - Basic: []
      parameters:
        - description: filter payroll for specific department.
          name: department
          in: query
          schema:
            type: string
        - description: Whether to include inactive employees in the response.
          name: showInactive
          in: query
          schema:
            type: boolean
            format: boolean
      responses:
        '200':
          description: Payroll data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/folders/metadata:
    get:
      tags:
        - Documents
      summary: Get folders metadata
      operationId: Documents_getFolderMetadata
      security:
        - Basic: []
      responses:
        '200':
          description: success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: document
  /docs/people/{id}/shared:
    post:
      tags:
        - Documents
      summary: File Upload via URL to an Employee Shared Folder
      operationId: Documents_uploadToSharedFolder
      security:
        - Basic: []
      description: >-
        With this endpoint, you can upload a file from a specified URL directly
        into the employee's shared folder in Bob. The request must specify the
        Employee ID. The file is uploaded using its URL in the request. Don't
        forget to make sure the Service User you're using has the right
        permissions.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Document to upload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocument'
        required: true
      responses:
        '200':
          description: Upload success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: document
  /docs/people/{id}/confidential:
    post:
      tags:
        - Documents
      summary: File Upload via URL to an Employee Confidential Folder
      operationId: Documents_uploadToConfidentialFolder
      security:
        - Basic: []
      description: >-
        With this endpoint, you can upload a file from a specified URL directly
        into the employee's confidential folder in Bob. The request must specify
        the Employee ID. The file is uploaded using its URL in the request.
        Don't forget to make sure the Service User you're using has the right
        permissions.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Document to upload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocument'
        required: true
      responses:
        '200':
          description: Upload success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: document
  /docs/people/{id}/custom/{folderId}:
    post:
      tags:
        - Documents
      summary: File Upload via URL to an Employee Custom Folder
      operationId: Documents_uploadEmployeeCustomFolder
      security:
        - Basic: []
      description: >-
        With this endpoint, you can upload a file from a specified URL directly
        into a specific employee's custom folder in Bob. The request must
        specify the Employee ID and Folder ID where the file will be stored. The
        file is uploaded using its URL in the request. Don't forget to make sure
        the Service User you're using has the right permissions.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Folder ID.
          name: folderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Document to upload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocument'
        required: true
      responses:
        '200':
          description: Upload success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: document
  /docs/people/{id}/shared/upload:
    post:
      tags:
        - Documents
      summary: Direct File Upload to an Employee Shared Folder
      operationId: Documents_uploadToSharedFolder
      security:
        - Basic: []
      description: >-
        This endpoint is designed to upload a file to the employee's shared
        folder in Bob. The request must specify the Employee ID and the file to
        be uploaded is included in the request. Don't forget to make sure the
        Service User you're using has the right permissions.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentsUploadToSharedFolderRequest'
        required: true
      responses:
        '200':
          description: Uploaded document ID.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/people/{id}/confidential/upload:
    post:
      tags:
        - Documents
      summary: Direct File Upload to an Employee Confidential Folder
      operationId: Documents_uploadConfidentialFile
      security:
        - Basic: []
      description: >-
        This endpoint is designed to upload a file to the employee's
        confidential folder in Bob. The request must specify the Employee ID and
        the file to be uploaded is included in the request. Don't forget to make
        sure the Service User you're using has the right permissions.
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentsUploadConfidentialFileRequest'
        required: true
      responses:
        '200':
          description: Uploaded document ID.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/people/{id}/folders/{folderId}/upload:
    post:
      tags:
        - Documents
      summary: Direct File Upload to an Employee Custom Folder
      operationId: Documents_uploadFileToFolder
      security:
        - Basic: []
      description: >-
        This endpoint is designed to upload a file to a specific employee's
        custom folder in Bob. The request must specify the Employee ID and
        Folder ID where the file will be stored, and the file to be uploaded is
        included in the request. Don't forget to make sure the Service User
        you're using has the right permissions.
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: folder id
          name: folderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentsUploadFileToFolderRequest'
        required: true
      responses:
        '200':
          description: Uploaded document ID.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/people/{id}/shared/{docId}:
    delete:
      tags:
        - Documents
      summary: Delete a File from an Employee Shared Folder
      operationId: Documents_removeEmployeeSharedDocument
      security:
        - Basic: []
      description: >-
        This endpoint lets you delete a file from an employee's shared folder in
        Bob. You need the Employee ID and the Document ID to remove a file.
        Don't forget to make sure the Service User you're using has the right
        permissions to delete folders.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Document ID.
          name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/people/{id}/confidential/{docId}:
    delete:
      tags:
        - Documents
      summary: Delete a File from an Employee Confidential Folder
      operationId: Documents_deleteEmployeeConfidentialDoc
      security:
        - Basic: []
      description: >-
        This endpoint lets you delete a file from an employee's confidential
        folder in Bob. You need the Employee ID and the Document ID to remove a
        file. Don't forget to make sure the Service User you're using has the
        right permissions to delete folders.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Document ID.
          name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/people/{id}/folders/{folderId}/{docId}:
    delete:
      tags:
        - Documents
      summary: Delete a File from an Employee Custom Folder
      operationId: Documents_deleteSpecificDocument
      security:
        - Basic: []
      description: >-
        This endpoint lets you delete a file from an employee's custom folder in
        Bob. You need the Employee ID, the Folder ID, and the Document ID to
        remove a file. Don't forget to make sure the Service User you're using
        has the right permissions to delete folders.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: Document ID.
          name: docId
          in: path
          required: true
          schema:
            type: string
        - description: Folder ID.
          name: folderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete success.
          content: {}
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /docs/people/{id}:
    get:
      tags:
        - Documents
      summary: Download employee's documents
      operationId: Documents_downloadLinks
      security:
        - Basic: []
      description: Returns a list of documents and download links.<br />
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of the documents' names and download links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDocumentResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /hiring/job-ads/search:
    post:
      tags:
        - Hiring
      summary: >-
        Beta | Get a list of all active job ads created by promoting a job
        opening via a Career page.
      operationId: Hiring_listActiveJobAds
      security:
        - Basic: []
      description: >-
        Returns the list of all active job ads. ** This endpoint is currently in
        beta and may undergo changes. ** <br />
      parameters:
        - description: >-
            Preferred language code for the language results will be returned in
            if available, otherwise language specified on the job ad will be
            used.
          name: preferredLanguage
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobAdRequest'
        required: true
      responses:
        '200':
          description: The list of job ads.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAds'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /hiring/job-ads/{id}:
    get:
      tags:
        - Hiring
      summary: Beta | Get the details of the job ad.
      operationId: Hiring_jobAdDetails
      security:
        - Basic: []
      description: >-
        Returns the details of the job ad. ** This endpoint is currently in beta
        and may undergo changes. ** <br />
      parameters:
        - description: Job Ad ID.
          name: id
          in: path
          schema:
            type: string
          required: true
        - description: >-
            Preferred language code for the language results will be returned in
            if available, otherwise language specified on the job ad will be
            used.
          name: preferredLanguage
          in: query
          schema:
            type: string
      responses:
        '200':
          description: The details of job ad.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAd'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{id}/work:
    get:
      tags:
        - People
        - Tables
      summary: List employee's work history
      operationId: People_getWorkHistory
      security:
        - Basic: []
      description: >-
        Returns a list of work history entries for a given employee.<br
        /><br><b>Note</b>: The values of the list fields represent the list item
        ID and not the list item value. To obtain the corresponding list item
        value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of work history entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkEntries'
    post:
      tags:
        - People
        - Tables
      summary: Creates a new work entry for a given employee.
      operationId: People_createWorkEntry
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Work entry to add. This must not conflict with another entry on the
          same effective date.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkEntry'
        required: true
      responses:
        '200':
          description: Entry created successfully
          content: {}
      x-codegen-request-body-name: entry
  /people/{id}/work/{entry_id}:
    put:
      tags:
        - People
        - Tables
      summary: Updates a work entry from employee's work history
      operationId: People_updateWorkEntry
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The entry ID to update.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkEntry'
        required: true
      responses:
        '200':
          description: Entry updated successfully.
          content: {}
        '404':
          description: Requested entry not found. Nothing was changed
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - People
        - Tables
      summary: Deletes a work entry from a given employee's work history.
      operationId: People_deleteWorkEntry
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The entry ID to delete
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry deleted successfully
          content: {}
  /people/{id}/employment:
    get:
      tags:
        - People
        - Tables
      summary: List employee's employment history.
      operationId: People_getEmploymentHistory
      security:
        - Basic: []
      description: >-
        <b>Note:</b> Changes to this API are planned to take effect on May 31,
        2024.  Make sure to review all of the details in the <a
        href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
        pattern API Changes</a>  article in the help center.<br> <br>Returns a
        list of employment history entries for a given employee.<br
        /><br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of employment history entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentEntries'
    post:
      tags:
        - People
        - Tables
      summary: Creates a new employment entry for a given employee.
      operationId: People_createEmploymentEntry
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: employee id
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Employment entry to add. This must not conflict with another entry on
          the same effective date.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentEntry'
        required: true
      responses:
        '200':
          description: Entry created successfully
          content: {}
      x-codegen-request-body-name: entry
  /people/{id}/employment/{entry_id}:
    put:
      tags:
        - People
        - Tables
      summary: Updates an employment entry from a given employee's employment history.
      operationId: People_updateEmploymentEntry
      security:
        - Basic: []
      description: >-
        <br><b>Note</b>: The values of the list fields represent the list item
        ID and not the list item value. To obtain the corresponding list item
        value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The entry ID to update.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentEntry'
        required: true
      responses:
        '200':
          description: Entry updated successfully
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - People
        - Tables
      summary: Deletes an employment entry from a given employee's employment history.
      operationId: People_deleteEmploymentEntry
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The entry ID to delete.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry deleted successfully.
          content: {}
  /people/{id}/lifecycle:
    get:
      tags:
        - People
        - Tables
      summary: List employee's life-cycle status history.
      operationId: People_listEmployeeLifecycle
      security:
        - Basic: []
      description: >-
        Returns a list of life-cycle history entries for a given employee.<br
        /><br><br><b>Note</b>: TThe values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of life-cycle history entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifeCycleEntries'
  /people/{id}/salaries:
    get:
      tags:
        - People
        - Tables
        - Payroll
      summary: List employee's salary history.
      operationId: People_getSalaryHistory
      security:
        - Basic: []
      description: >-
        Returns a list of salary history entries for a given employee.<br
        /><br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of salary entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryEntries'
    post:
      tags:
        - People
        - Tables
        - Payroll
      summary: Creates a new salary entry for a given employee.
      operationId: People_createNewSalaryEntry
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Salary entry to add. This must not conflict with another entry on the
          same effective date.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalaryEntry'
        required: true
      responses:
        '200':
          description: Entry added successfully.
          content: {}
      x-codegen-request-body-name: entry
  /people/{id}/salaries/{entry_id}:
    delete:
      tags:
        - People
        - Tables
        - Payroll
      summary: Deletes a salary entry from the employee's list.
      operationId: People_deleteSalaryEntry
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The entry ID to delete.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry deleted successfully.
          content: {}
  /people/{id}/equities:
    get:
      tags:
        - People
        - Tables
        - Payroll
      summary: List the employee's equity grants.
      operationId: People_listEquityGrants
      security:
        - Basic: []
      description: >-
        Returns a list of equity grants for a given employee.<br /><b>Supported
        user types:</b> Service<br><br><b>Note</b>: The values of the list
        fields represent the list item ID and not the list item value. To obtain
        the corresponding list item value, use the HiBob metadata API to
        determine the field list name. Then, use the list item ID to locate the
        list item value. For more information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of salary equity grants.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquityEntries'
    post:
      tags:
        - People
        - Tables
        - Payroll
      summary: Creates a new equity grant for a given employee.
      operationId: People_createEquityGrant
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Equity grant to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquityEntry'
        required: true
      responses:
        '200':
          description: Entry added successfully.
          content: {}
      x-codegen-request-body-name: entry
  /people/{id}/equities/{entry_id}:
    put:
      tags:
        - People
        - Tables
        - Payroll
      summary: Updates an equity grant for an employee
      operationId: People_updateEquityGrantForEmployee
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>. - Basic: [] - Bearer: []
      parameters:
        - description: Employee ID
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The entry ID to update.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquityEntry'
        required: true
      responses:
        '200':
          description: Entry updated successfully.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - People
        - Tables
        - Payroll
      summary: Deletes an equity grant for an employee.
      operationId: People_deleteEquityGrant
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The Entry ID to delete.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry deleted successfully.
          content: {}
  /people/{id}/variable:
    get:
      tags:
        - People
        - Tables
        - Payroll
      summary: List employee's variable payments
      operationId: People_listVariablePayments
      security:
        - Basic: []
      description: >-
        Returns a list of variable payments for a given employee.<br
        /><br><b>Note</b>: The values of the list fields represent the list item
        ID and not the list item value. To obtain the corresponding list item
        value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of variable payments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableEntries'
    post:
      tags:
        - People
        - Tables
        - Payroll
      summary: Creates a new variable payment for a given employee.
      operationId: People_createVariablePayment
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>:The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Variable payment to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableEntry'
        required: true
      responses:
        '200':
          description: Entry added successfully
          content: {}
      x-codegen-request-body-name: entry
  /people/{id}/variable/{entry_id}:
    delete:
      tags:
        - People
        - Tables
        - Payroll
      summary: Deletes a training record for an employee.
      operationId: People_deleteTrainingRecord
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The Entry ID to delete.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry deleted successfully.
          content: {}
  /people/{id}/training:
    get:
      tags:
        - People
        - Tables
        - Payroll
      summary: List the employee's training records.
      operationId: People_listTrainingRecords
      security:
        - Basic: []
      description: >-
        Returns a list of training records for a given employee<br
        /><br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of training records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingEntries'
    post:
      tags:
        - People
        - Tables
        - Payroll
      summary: Creates a new training records for a given employee
      operationId: People_createTrainingRecord
      security:
        - Basic: []
      description: >-
        <br><br><b>Note</b>: The values of the list fields represent the list
        item ID and not the list item value. To obtain the corresponding list
        item value, use the HiBob metadata API to determine the field list name.
        Then, use the list item ID to locate the list item value. For more
        information, see <a
        href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
        to work with lists Public API</a>.
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Training entry to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingEntry'
        required: true
      responses:
        '200':
          description: Entry added successfully.
          content: {}
      x-codegen-request-body-name: entry
  /people/{id}/training/{entry_id}:
    delete:
      tags:
        - People
        - Tables
        - Payroll
      summary: Deletes any training records for an employee.
      operationId: People_deleteTrainingRecord
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: The Entry ID to delete.
          name: entry_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Entry deleted successfully.
          content: {}
  /people/custom-tables/metadata:
    get:
      tags:
        - Metadata
      summary: Read metadata of custom tables defined
      operationId: Metadata_getCustomTableMetadata
      security:
        - Basic: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTableMetadataList'
  /people/custom-tables/metadata/{custom_table_id}:
    get:
      tags:
        - Metadata
      summary: Read metadata for specific custom table
      operationId: Metadata_getTableDetails
      security:
        - Basic: []
      parameters:
        - description: The ID of custom table.
          name: custom_table_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTableMetadata'
  /people/custom-tables/{employee_id}/{custom_table_id}:
    get:
      tags:
        - Custom Tables
      summary: Read all entries of the given custom table
      operationId: CustomTables_readEntries
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: employee_id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of custom table.
          name: custom_table_id
          in: path
          required: true
          schema:
            type: string
        - description: >-
            Whether to include the additional "humanReadable" JSON node in the
            response.
          name: includeHumanReadable
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTableEntriesList'
    post:
      tags:
        - Custom Tables
      summary: Create new custom table entry
      operationId: CustomTables_createNewEntry
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: employee_id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of custom table.
          name: custom_table_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTablesCreateNewEntryRequest'
            example:
              values:
                - column_1663598152485: 5185395
                  column_1663598024920: '2022-09-30'
                  column_1663598120787: '2871255975417872769'
                  column_1663598037763: 123456
                  column_1663598145154: 371223
                  column_1663597977169: text text
                  column_1663597992534: text area text area text area
                  column_1663598108167:
                    value: 240
                    currency: USD
                  column_1663598062584: '252614471'
                  column_1663598090762:
                    - '252614475'
                    - '252614476'
        required: true
      responses:
        '200':
          description: Entry created successfully
          content: {}
      x-codegen-request-body-name: values
  /people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}:
    put:
      tags:
        - Custom Tables
      summary: Update custom table entry
      operationId: CustomTables_updateEntry
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: employee_id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of custom table.
          name: custom_table_id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of custom table entry.
          name: entry_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTablesUpdateEntryRequest'
        required: false
      responses:
        '200':
          description: Entry updated successfully
          content: {}
      x-codegen-request-body-name: entry
    delete:
      tags:
        - Custom Tables
      summary: Delete custom table entry
      operationId: CustomTables_deleteEntryById
      security:
        - Basic: []
      parameters:
        - description: Employee ID.
          name: employee_id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of custom table.
          name: custom_table_id
          in: path
          required: true
          schema:
            type: string
        - description: The ID of custom table entry.
          name: entry_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entry deleted successfully
          content: {}
  /metadata/objects/position:
    get:
      tags:
        - Metadata
      summary: Get all positions fields
      operationId: Metadata_getPositionFields
      security:
        - Basic: []
      description: Returns a list of all fields of object type position.<br/>
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsMetadata'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /objects/position/search:
    post:
      tags:
        - Objects
      summary: Read company positions
      operationId: Objects_searchCompanyPositions
      security:
        - Basic: []
      description: >-
        Returns a list of the company positions, filtered by the specified
        attributes.  <br /><br><b>Note</b>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPositionsRequest'
        required: true
      responses:
        '200':
          description: Positions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionEntries'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
components:
  schemas:
    CurrencyValue:
      required:
        - currency
        - value
      type: object
      properties:
        value:
          type: number
          format: double
        currency:
          description: Three-letter currency code.
          type: string
    TableEntry:
      required:
        - effectiveDate
      type: object
      properties:
        id:
          description: ID.
          type: integer
        reason:
          description: The reason for this change.
          type: string
        effectiveDate:
          description: The date this entry becomes effective.
          type: string
          format: date
    SalaryEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
          properties:
            base:
              $ref: '#/components/schemas/CurrencyValue'
            payPeriod:
              description: >-
                Represents the period for this salary entry. This can be one of:
                Annual, Hourly, Daily, Weekly, Monthly.
              type: string
            payFrequency:
              description: >-
                Represents the frequency the salary is paid. This can be one of:
                Weekly, Monthly, Pro rata, Every two weeks, Twice a month, Every
                four weeks.
              type: string
      required:
        - base
        - payPeriod
    SalaryEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SalaryEntry'
    EquityEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
          properties:
            quantity:
              description: The number of equities granted.
              type: number
              format: double
            equityType:
              description: The type of the grant.
              type: string
            vestingCommencementDate:
              description: Vesting commencement date.
              type: string
              format: date
            consentNumber:
              description: Consent number.
              type: string
            grantDate:
              description: Date the equity was granted.
              type: string
              format: date
            optionExpiration:
              description: Date the options expire.
              type: string
              format: date
            exercisePrice:
              $ref: '#/components/schemas/CurrencyValue'
            vestingTerm:
              description: Terms for exercising this grant.
              type: string
            grantType:
              description: 'Grant type. One of: Initial Grant, Merit Grant'
              type: string
            vestingSchedule:
              description: The vesting schedule ID assigned to this grant.
              type: number
              format: long
            grantNumber:
              description: The Grant number for employee.
              type: number
              format: double
            grantStatus:
              description: 'Grant status. one of: Granted, Pending Approval'
              type: string
      required:
        - quantity
        - equityType
    EquityEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EquityEntry'
    VariableEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
          properties:
            amount:
              $ref: '#/components/schemas/CurrencyValue'
            variableType:
              description: The type of variable pay.
              type: string
            paymentPeriod:
              description: >-
                This represents the period for this variable entry. It can be
                one of: Annual, Half-Yearly, Quarterly, Monthly.
              type: string
            companyPercent:
              description: The employee's company on-target weight, in percent.
              type: number
            departmentPercent:
              description: The employee's department on-target weight, in percent.
              type: number
            individualPercent:
              description: The employee's individual on-target weight, in percent.
              type: number
      required:
        - amount
        - type
        - paymentPeriod
    VariableEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/VariableEntry'
    TrainingEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
          properties:
            description:
              description: Further description about the training entry.
              type: string
            name:
              description: >-
                The name of the training entry. The name must be an item in the
                training list field.
              type: string
            cost:
              $ref: '#/components/schemas/CurrencyValue'
            status:
              description: The status of the training entry
              type: string
            frequency:
              description: >-
                The frequency of the training entry. The name must be of an item
                in the frequency list field.
              type: string
            startDate:
              description: The date this entry becomes effective.
              type: string
              format: date
            endDate:
              description: The date of training completion.
              type: string
              format: date
            documentId:
              description: ID of the document attached to this training entry.
              type: number
              format: long
      required:
        - amount
        - type
        - paymentPeriod
    TrainingEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/TrainingEntry'
    EmploymentEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
          properties:
            contract:
              description: Contract.
              type: string
            type:
              description: Type.
              type: string
            salaryPayType:
              description: Salary pay type.
              type: string
            effectiveDate:
              description: The date this entry becomes effective.
              type: string
              format: date
      required:
        - effectiveDate
    EmploymentEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EmploymentEntry'
    WorkEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
        - type: object
          properties:
            title:
              description: The employee's job title.
              type: string
            department:
              description: The employee's department.
              type: string
            site:
              description: The employee's site.
              type: string
            siteId:
              description: The employee's site ID.
              type: integer
            reportsTo:
              description: The manager's details.
              required:
                - id
              type: object
              properties:
                id:
                  description: The manager's employee ID.
                  type: string
                firstName:
                  description: The manager's first name.
                  type: string
                surname:
                  description: The manager's surname.
                  type: string
                email:
                  description: The manager's email.
                  type: string
                displayName:
                  description: The manager's display name.
                  type: string
            effectiveDate:
              description: The date this entry becomes effective.
              type: string
              format: date
            customColumns:
              type: object
              properties: {}
        - type: object
    WorkEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/WorkEntry'
    LifeCycleEntry:
      allOf:
        - $ref: '#/components/schemas/TableEntry'
        - type: object
        - type: object
          properties:
            status:
              type: string
            reasonType:
              type: string
            effectiveDate:
              description: The date this entry becomes effective.
              type: string
              format: date
        - type: object
    LifeCycleEntries:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/LifeCycleEntry'
    EmployeeReference:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        surname:
          type: string
        email:
          type: string
    ReadEmployeesRequestReference:
      type: object
      properties:
        fields:
          description: >-
            Optional array of employee field paths that's are required in
            response. If you don't specify fields - only basic fields and
            categories are returned: <br/><b>Basic fields:</b>  <ul>
                                  <li>ID</li>
                                  <li>Company ID</li>
                                  <li>Email</li>
                                  <li>First name</li>
                                  <li>Last name</li>
                                  <li>Display name</li>
                                  <li>Middle name</li>
                                  <li>Creation timestamp</li>
                                  <li>Avatar URL</li>
            </ul> <br/><b>Basic Categories:</b> <ul>
                                  <li>About</li>
                                  <li>Employment</li>
                                  <li>Work</li>
            </ul>
          type: array
          items:
            type: string
          example:
            - root.id
            - root.firstName
            - root.surname
            - root.email
            - work.site
            - work.department
        filters:
          description: >-
            Optional list of filters for filtering employees. We currently
            support up to one filter.
          type: array
          items:
            $ref: '#/components/schemas/EmployeeFilter'
        showInactive:
          description: >-
            <br>Optional field. <br>Default value = false. <br>Defines whether
            response should include inactive employees.
          type: boolean
        humanReadable:
          description: >-
            Optional field.  <br> <b>If not sent:</b> supply machine-readable
            values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> -
            include the additional "humanReadable" JSON node in the response.
            <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON
            instead of machine-readable format. <br>
          type: string
    ReadSingleEmployeeRequestReference:
      type: object
      properties:
        fields:
          description: >-
            Optional array of employee field paths that's are required in
            response. If you don't specify fields - only basic fields and
            categories are returned: <br/><b>Basic fields:</b>  <ul>
                                  <li>ID</li>
                                  <li>Company ID</li>
                                  <li>Email</li>
                                  <li>First name</li>
                                  <li>Last name</li>
                                  <li>Display name</li>
                                  <li>Middle name</li>
                                  <li>Creation timestamp</li>
                                  <li>Avatar URL</li>
            </ul> <br/><b>Basic Categories:</b> <ul>
                                  <li>About</li>
                                  <li>Employment</li>
                                  <li>Work</li>
            </ul>
          type: array
          items:
            type: string
          example:
            - root.id
            - root.firstName
            - root.surname
            - root.email
            - work.site
            - work.department
        humanReadable:
          description: >-
            Optional field.  <br> <b>If not sent:</b> supply machine-readable
            values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> -
            include the additional "humanReadable" JSON node in the response.
            <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON
            instead of machine-readable format. <br>
          type: string
    EmployeeFilter:
      type: object
      properties:
        fieldPath:
          description: >-
            The field id (path) to filter by.<br /> Supported fields: “root.id”,
            "root.email".<br />Any other path will get a response of 400 HTTP
            error.
          type: string
          example: root.id
        operator:
          description: >-
            Supported operators: “equals” <br /> Any other operator will get a
            response of 400 HTTP error.
          type: string
          example: equals
        values:
          description: >-
            List of values to compare. <br /> Empty list will result in 400 HTTP
            error.
          type: array
          items:
            type: string
          example:
            - employeeId1
            - employeeId2
            - employeeId3
    WorkPart:
      type: object
      properties:
        title:
          description: The employee's title.
          type: string
        reportsTo:
          $ref: '#/components/schemas/EmployeeReference'
        department:
          description: The employee's description.
          type: string
        site:
          description: The employee's site.
          type: string
        startDate:
          description: The employee's employment start date
          type: string
          format: date
    AboutPart:
      type: object
      properties:
        avatar:
          description: Image URL of the employee's avatar.
          type: string
        hobbies:
          description: An array of the employee's hobbies.
          type: array
          items:
            type: string
    PersonalPart:
      type: object
      properties:
        honorific:
          description: The employee's title, This can be Mr, Mrs. Ms. etc.
          type: string
        shortBirthDate:
          type: string
        gender:
          description: One of Male / Female.
          type: string
    CreateEmployeeRequest:
      required:
        - email
        - firstName
        - surname
      type: object
      properties:
        firstName:
          description: Employee's first name.
          type: string
        surname:
          description: Employee's surname.
          type: string
        email:
          description: Employee's email address.
          type: string
          format: email
        work:
          required:
            - site
            - startDate
          type: object
          properties:
            site:
              description: The employee's site.
              type: string
            startDate:
              description: The employee's employment start date
              type: string
              format: date
    EmployeeTermination:
      required:
        - terminationDate
      type: object
      properties:
        terminationDate:
          description: The employee's termination date
          type: string
          format: date
        terminationReason:
          description: The ID of the 'terminationReason' list entry
          type: string
        reasonType:
          description: The ID of the 'lifecycleReasonType' list entry
          type: string
        noticePeriod:
          description: Notice period length
          type: object
          properties:
            unit:
              type: string
              enum:
                - days
                - weeks
                - month
                - years
            length:
              type: integer
        lastDayOfWork:
          type: string
          format: date
      example:
        terminationDate: '2025-09-23'
        noticePeriod:
          unit: days
          length: 30
        lastDayOfWork: '2025-09-22'
        terminationReason: Redundant
        reasonType: End of Contract
    Employee:
      type: object
      properties:
        id:
          description: A unique identifier representing a specific employee.
          type: string
        firstName:
          description: Employee's first name.
          type: string
        surname:
          description: Employee's surname.
          type: string
        email:
          description: Employee's email address.
          type: string
          format: email
        displayName:
          description: >-
            Employee's display name. This defaults to first name & last name but
            can be customized.
          type: string
        personal:
          $ref: '#/components/schemas/PersonalPart'
        about:
          $ref: '#/components/schemas/AboutPart'
        work:
          $ref: '#/components/schemas/WorkPart'
    Employees:
      type: object
      properties:
        employees:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    EmployeeProfile:
      type: object
      properties:
        id:
          description: A unique identifier representing a specific employee.
          type: string
        firstName:
          description: Employee's first name.
          type: string
        surname:
          description: Employee's surname.
          type: string
        email:
          description: Employee's email address.
          type: string
          format: email
        displayName:
          description: >-
            The employee's display name. This defaults to first name & last name
            but can be customized.
          type: string
        personal:
          $ref: '#/components/schemas/PersonalPart'
        about:
          $ref: '#/components/schemas/AboutPart'
        work:
          $ref: '#/components/schemas/WorkPart'
    EmployeesProfiles:
      type: object
      properties:
        employees:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeProfile'
    Fields:
      type: array
      items:
        $ref: '#/components/schemas/Field'
    Field:
      type: object
      properties:
        description:
          description: Description of the field.
          type: string
        id:
          description: ID of the field.
          type: string
        category:
          description: Category of the field.
          type: string
        name:
          description: Name of the field.
          type: string
        jsonPath:
          description: >-
            A dot-separated path of this field value in the employee JSON
            returned by the /v1/profiles endpoint.
          type: string
        type:
          description: >-
            The type of the field. Supported field types: text, text-area,
            number, date, list, multi-list, hierarchy-list, currency,
            employee-reference, document.
          type: string
        typeData:
          type: object
          properties:
            listId:
              description: The ID of the list in the /v1/company/named-lists endpoint.
              type: string
        historical:
          description: >-
            When true, this field keeps the history of its values, each being
            active starting from a certain date. The default value is false.
          type: boolean
    CreateFieldRequest:
      required:
        - category
        - name
        - type
      type: object
      properties:
        description:
          description: The description of the field.
          type: string
        name:
          description: The name of the field.
          type: string
        category:
          description: The category of the field.
          type: string
        type:
          description: >-
            The type of field. Supported field types: text, text-area, number,
            date, list, multi-list, hierarchy-list, currency,
            employee-reference, document.
          type: string
        historical:
          description: >-
            When true, this field keeps the history of its values, each being
            active starting from a certain date. The default value is false.
          type: string
    UpdateFieldRequest:
      type: object
      properties:
        description:
          description: The description of the field.
          type: string
        name:
          description: The name of the field.
          type: string
    Lists:
      type: array
      items:
        $ref: '#/components/schemas/List'
    List:
      type: object
      properties:
        name:
          description: The name of the list
          type: string
        items:
          description: The elements in the list.
          type: array
          items:
            $ref: '#/components/schemas/ListItem'
    FlatListItemId:
      type: object
      properties:
        id:
          description: The ID of the list item.
          type: string
    FieldId:
      type: object
      properties:
        id:
          description: The ID of the field.
          type: string
    ListItem:
      type: object
      properties:
        id:
          description: Internal ID of the item.
          type: integer
        name:
          description: Name of the item.
          type: string
        archived:
          description: Whether the item is archived (not available for selection).
          type: boolean
        children:
          description: Nested items - if the list is nested.
          type: array
          items:
            $ref: '#/components/schemas/ListItem'
    NewListItem:
      required:
        - name
      type: object
      properties:
        name:
          description: Name of the item.
          type: string
        parentId:
          description: ID of the new hierarchy parent node.
          type: integer
    UpdateListItemRequest:
      type: object
      properties:
        name:
          description: Name of the item.
          type: string
        parentId:
          description: ID of the new hierarchy parent node.
          type: integer
    OutToday:
      type: object
      properties:
        employeeId:
          description: Employee ID.
          type: string
          format: uuid
        employeeDisplayName:
          description: Employee display name.
          type: string
        employeeEmail:
          description: Employee email address.
          type: string
        policyTypeDisplayName:
          description: Display name of the policy type.
          type: string
        startDate:
          description: >-
            Date of the first day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        startDatePortion:
          description: >-
            What portion of the first day is included - all_day, morning or
            afternoon (relevant for request using the days type).
          type: string
        endDate:
          description: >-
            Date of the last day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        endDatePortion:
          description: >-
            What portion of the last day is included - all_day, morning or
            afternoon (relevant for request using the days type).
          type: string
        requestRangeType:
          description: >-
            The type of request duration.<br> <b>portionOnRange</b> is when the
            request is for every morning or every afternoon during the days
            requested.<br> <b>hoursOnRange</b> is when the request is for X
            hours every day during the days requested.
          type: string
          enum:
            - days
            - hours
            - portionOnRange
            - hoursOnRange
        dayPortion:
          description: >-
            What portion of the request's days is included - morning or
            afternoon (relevant for request using the portionOnRange type).
          type: string
        dailyHours:
          description: >-
            The time off duration in hours for every request's days (relevant
            for requests with hoursOnRange type).
          type: number
        date:
          description: Date of the time off (relevant for requests using the hours type).
          type: string
          format: date
        hours:
          description: >-
            The time off duration in hours for the date (relevant for requests
            with hours type).
          type: integer
        minutes:
          description: Relevant for requests using the hours type.
          type: integer
    OutTodays:
      type: object
      properties:
        outs:
          type: array
          items:
            $ref: '#/components/schemas/OutToday'
    Request:
      type: object
      properties:
        requestId:
          type: integer
          format: int64
        employeeId:
          description: Employee ID.
          type: string
          format: uuid
        policyType:
          description: Request policy type, e.g. Holiday, Sick or any defined custom type.
          type: string
        policyTypeDisplayName:
          description: >-
            Display name for the policy type. This will be translated based on
            the locale.
          type: string
        type:
          description: >-
            The type of request duration.<br> <b>portionOnRange</b> is when the
            request is for every morning or every afternoon during the days
            requested.<br> <b>hoursOnRange</b> is when the request is for X
            hours every day during the days requested.
          type: string
          enum:
            - days
            - hours
            - portionOnRange
            - hoursOnRange
        startDate:
          description: >-
            Date of the first day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        startPortion:
          description: >-
            What portion of the first day is included - all_day, morning or
            afternoon (relevant for request using the days type).
          type: string
        endDate:
          description: >-
            Date of the last day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        endPortion:
          description: >-
            What portion of the last day is included - all_day, morning or
            afternoon (relevant for requests using the days type).
          type: string
        dayPortion:
          description: >-
            What portion of the request's days is included - morning or
            afternoon (relevant for requests using the portionOnRange type).
          type: string
        date:
          description: Date of the time off (relevant for request using the hours type)
          type: string
          format: date
        hoursOnDate:
          description: >-
            The time off duration in hours for the date (relevant for request
            using the hours type).
          type: integer
        minutes:
          description: Relevant for request using the hours type.
          type: integer
        dailyHours:
          description: >-
            The time off duration in hours for every day in the request
            (relevant for requests using the hoursOnRange type).
          type: number
        status:
          description: Request status. This can be either Approved or Pending.
          type: string
        employeeDisplayName:
          description: Employee display name.
          type: string
    Requests:
      type: object
      properties:
        outs:
          type: array
          items:
            $ref: '#/components/schemas/Request'
    ReasonCode:
      type: object
      properties:
        id:
          type: integer
        displayName:
          type: string
    ReasonCodes:
      type: object
      properties:
        reasonCodes:
          type: array
          items:
            $ref: '#/components/schemas/ReasonCode'
    ReasonCodesNames:
      type: object
      properties:
        reasonCodes:
          type: array
          items:
            description: A list of reason codes.
            type: string
    PolicyType:
      type: object
      properties:
        name:
          type: string
        activity:
          description: Activity type.
          type: string
          enum:
            - paidTimeoff
            - unpaidTimeoff
            - workTime
        bookingWorkDaysOnly:
          description: Requests will be deducted from the balance only for working days.
          type: boolean
        unit:
          type: string
          enum:
            - days
            - hours
    PolicyTypes:
      type: object
      properties:
        policyTypes:
          type: array
          items:
            type: string
    PolicyNames:
      type: object
      properties:
        policyNames:
          type: array
          items:
            description: A list of policy names.
            type: string
    Policy:
      type: object
      properties:
        description:
          description: Policy description.
          type: string
        name:
          type: string
        allowance:
          description: Base annual allowance.
          type: number
        maxBalance:
          description: Maximum balance at the end of the cycle.
          type: number
        minBalance:
          description: Minimum balance cap.
          type: number
        yosIncrease:
          type: array
          items:
            $ref: '#/components/schemas/YearsOfServiceIncrements'
        minTimeOffRequestDuration:
          description: The shortest amount of time employees can request.
          type: string
          enum:
            - fullDay
            - halfDay
            - fullHour
            - halfHour
            - quarterHour
        approvalRequired:
          description: Requests require approval.
          type: boolean
        unit:
          type: string
          enum:
            - days
            - hours
    YearsOfServiceIncrements:
      type: object
      properties:
        yearsOfService:
          description: Start after this number of years.
          type: number
        extraDays:
          description: Additional days to add.
          type: number
    BalanceResult:
      type: object
      properties:
        employeeId:
          description: Employee ID.
          type: string
        totalBalanceAsOfDate:
          description: The retrieved balance as of this date.
          type: number
        totalRoundedBalanceAsOfDate:
          description: The retrieved rounded balance as of this date.
          type: number
        pointInTime:
          description: The balance date.
          type: string
          format: date
        startingBalance:
          description: The balance as of the cycle start date.
          type: number
        startingBalanceAsOf:
          description: The cycle start date.
          type: string
          format: date
        totalTaken:
          description: Total number of days/hours taken.
          type: number
        totalAdminAdjustments:
          description: Total number of days/hours manually adjusted.
          type: number
        totalSystemAdjustments:
          description: Total number of days/hours adjusted.
          type: number
        annualAllowance:
          description: Annual allowance.
          type: number
        policy:
          description: Policy name.
          type: string
    AdjustmentRequest:
      type: object
      properties:
        adjustmentType:
          description: Adjustment type - balance or time used.
          type: string
          enum:
            - balance
            - daysUsed
        policyType:
          description: Policy type name.
          type: string
        effectiveDate:
          description: The date this adjustment becomes effective.
          type: string
          format: date
        amount:
          description: The amount of days/hours to add/subtract.
          type: number
        reason:
          description: A reason for this adjustment.
          type: string
    EmployeeDocumentResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeDocumentWithDownloadLink'
    EmployeeDocumentWithDownloadLink:
      type: object
      properties:
        documentName:
          description: The name of the document.
          type: string
        downloadLink:
          description: The name of the document.
          type: string
    TimeoffChange:
      type: object
      properties:
        changeType:
          description: Change type - created, canceled or deleted.
          type: string
          enum:
            - Created
            - Canceled
            - Deleted
        employeeId:
          description: Employee ID
          type: string
          format: uuid
        employeeDisplayName:
          description: Employee display name.
          type: string
        employeeEmail:
          description: Employee email address.
          type: string
        requestId:
          description: TimeOff Request ID.
          type: integer
        policyTypeDisplayName:
          description: Display name of the policy type.
          type: string
        type:
          description: >-
            The type of request duration.<br> <b>portionOnRange</b> is when the
            request is for every morning or every afternoon during the days
            requested.<br> <b>hoursOnRange</b> is when the request is for X
            hours every day during the days requested.
          type: string
          enum:
            - days
            - hours
            - portionOnRange
            - hoursOnRange
        startDate:
          description: >-
            Date of the first day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        startPortion:
          description: >-
            What portion of the first day is included - all_day, morning or
            afternoon (relevant for requests using the Days type).
          type: string
        endDate:
          description: >-
            Date of the last day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        endPortion:
          description: >-
            What portion of the last day is included - all_day, morning or
            afternoon (relevant for requests using the Days type).
          type: string
        dayPortion:
          description: >-
            What portion of the request's days is included - morning or
            afternoon (relevant for requests using the portionOnRange type).
          type: string
        date:
          description: Date of the time off (relevant for requests using the Hours type)
          type: string
          format: date
        hoursOnDate:
          description: >-
            The time off duration in hours for the date (relevant for requests
            using the Hours type).
          type: integer
        dailyHours:
          description: >-
            The time off duration in hours for every day in the request
            (relevant for requests using the hoursOnRange type)
          type: number
        durationUnit:
          description: >-
            The unit used for the totalDuration and totalCost - either 'days' or
            'hours'
          type: string
          enum:
            - days
            - hours
        totalDuration:
          description: >-
            The total amount of time the request covers, including regular days
            off such as weekends
          type: number
        totalCost:
          description: The amount that will be deducted from the balance
          type: number
        changeReason:
          description: Request change reason
          type: string
    TimeoffChanges:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: '#/components/schemas/TimeoffChange'
    SubmitTimeoffRequest:
      required:
        - policyType
        - startDate
      type: object
      properties:
        description:
          description: Request reason.
          type: string
        policyType:
          description: Request policy type, e.g. Holiday, Sick or any custom type defined.
          type: string
        requestRangeType:
          description: >-
            The type of request duration.<br> Select <b>hours</b> when the
            request is for X hours during the day requested (This is supported
            only for policy types measured in hours).<br> Select
            <b>portionOnRange</b> when the  request is for every morning or
            every afternoon during the days requested.<br> Select
            <b>hoursOnRange</b> when the request is for X hours every day during
            the days requested (This is supported only for policy types measured
            in hours)
          type: string
          default: days
          enum:
            - days
            - hours
            - portionOnRange
            - hoursOnRange
        startDate:
          description: >-
            Date of the first day of the time off (not relevant for requests
            using the hours type).
          type: string
          format: date
        startDatePortion:
          description: Portion of the first day - relevant for requests in days.
          type: string
          default: all_day
          enum:
            - all_day
            - morning
            - afternoon
        endDate:
          description: >-
            Date of the last day of the time off (not relevant for requests
            using
                                                           the hours type).
          type: string
          format: date
        hours:
          description: This field is mandatory if the requestRangeType is set to 'hours'.
          type: integer
        minutes:
          description: Relevant if requestRangeType is set to 'hours'.
          type: integer
        endDatePortion:
          description: Portion of the last day - relevant for requests in days.
          type: string
          default: all_day
          enum:
            - all_day
            - morning
            - afternoon
        dayPortion:
          description: >-
            Select <b>morning</b> when the request is for mornings on the days
            requested. Select <b>afternoon</b> when the request is for
            afternoons on the days requested.<br> This is mandatory if the
            <b>requestRangeType</b> is <b>portionOnRange</b>.
          type: string
          enum:
            - morning
            - afternoon
        dailyHours:
          description: >-
            Enter the number of hours when the request is for X hours on the
            days requested.<br> This is mandatory if the <b>requestRangeType</b>
            is <b>hoursOnRange</b>.
          type: integer
        dailyMinutes:
          description: >-
            Enter the number of minutes when the request is for X hours and X
            minutes on the days requested.<br> This is relevant if the
            <b>requestRangeType</b> is <b>hoursOnRange</b> and the amount
            requested is not a full hour or hours.
          type: integer
        skipManagerApproval:
          description: >-
            Admins only can skip the approval policy. Setting this field to true
            will create an approved request.
          type: boolean
          default: false
        approver:
          description: >-
            The employee ID of the user to be set as the approver for this
            request. This is relevant if 'skipManagerApproval' is set to
            true.<br>Please note that the user calling the API with this param
            must have permission to import time off requests.
          type: string
        reasonCode:
          description: >-
            The reason code ID taken from the policy type's reason codes list.
            The list is available in GET
            /timeoff/policy-types/{policyType}/reason-codes
          type: integer
    SubmitTimeoffRequestDiffHours:
      required:
        - policyType
        - startDate
        - endDate
        - durations
      type: object
      properties:
        description:
          description: Request reason.
          type: string
          example: Vacation
        policyType:
          description: Request policy type, e.g. Holiday, Sick or any custom type defined.
          type: string
          example: Holiday
        startDate:
          description: Date of the first day of the time off
          type: string
          example: '2024-01-03'
          format: date
        endDate:
          description: Date of the last day of the time off.
          type: string
          example: '2024-01-05'
          format: date
        durations:
          description: Array of durations for each day in the request.
          type: array
          items:
            required:
              - date
              - hours
              - minutes
            type: object
            properties:
              date:
                description: Date of the duration.
                type: string
                format: date
              hours:
                description: The number of hours in the duration.
                type: integer
              minutes:
                description: The number of minutes in the duration.
                type: integer
          example:
            - date: '2024-01-03'
              hours: 0
              minutes: 15
            - date: '2024-01-04'
              hours: 0
              minutes: 0
            - date: '2024-01-05'
              hours: 2
              minutes: 45
        skipManagerApproval:
          description: >-
            Admins only can skip the approval policy. Setting this field to true
            will create an approved request.
          type: boolean
          example: false
          default: false
        approver:
          description: >-
            The employee ID of the user to be set as the approver for this
            request. This is relevant if 'skipManagerApproval' is set to
            true.<br>Please note that the user calling the API with this param
            must have permission to import time off requests.
          type: string
          example: '3452152476387906847'
        reasonCode:
          description: >-
            The reason code ID taken from the policy type's reason codes list.
            The list is available in GET
            /timeoff/policy-types/{policyType}/reason-codes
          type: integer
          example: 3000
    TimeoffRequest:
      type: object
      properties:
        description:
          description: The request description.
          type: string
        employeeId:
          description: Employee ID.
          type: string
          format: uuid
        requestId:
          description: Time Off Request ID.
          type: integer
        policyTypeDisplayName:
          description: Display name of the policy type.
          type: string
        type:
          description: >-
            The type of request duration.<br> <b>portionOnRange</b> is when the
            request is for every morning or every afternoon during the days
            requested.<br> <b>hoursOnRange</b> is when the request is for X
            hours every day during the days requested.
          type: string
          enum:
            - days
            - hours
            - portionOnRange
            - hoursOnRange
        startDate:
          description: >-
            Date of the first day of the time off  (not relevant for requests
            using the hours type).
          type: string
          format: date
        startDatePortion:
          description: >-
            What portion of the first day is included - all_day, morning or
            afternoon (relevant for requests using the Days type).
          type: string
        endDate:
          description: >-
            Date of the last day of the time off (not relevant for requests
            using
                                                           the hours type).
          type: string
          format: date
        endDatePortion:
          description: >-
            What portion of the last day is included - all_day, morning or
            afternoon (relevant for requests using the Days type).
          type: string
        dayPortion:
          description: >-
            What portion of the request's days is included - morning or
            afternoon (relevant for requests using the portionOnRange type).
          type: string
        approved:
          description: Whether the request is approved (and hence publicly visible).
          type: boolean
        date:
          description: Date of the time off (relevant for requests using the Hours type).
          type: string
          format: date
        hoursOnDate:
          description: >-
            The time off duration in hours for the date (relevant for requests
            using the Hours type)
          type: integer
        dailyHours:
          description: >-
            The time off duration in hours for every day in the request
            (relevant for requests using the hoursOnRange type).
          type: number
        durationUnit:
          description: >-
            The unit used for the totalDuration and totalCost - either 'days' or
            'hours'
          type: string
          enum:
            - days
            - hours
        totalDuration:
          description: >-
            The total amount of time the request covers, including regular days
            off such as weekends
          type: number
        totalCost:
          description: The amount that will be deducted from the balance
          type: number
        status:
          description: Request status. This can be approved, pending, canceled, etc.
          type: string
        hasAttachment:
          description: Whether the request has attachments
          type: boolean
        reasonCode:
          description: >-
            The reason code taken from the policy type's reason codes list. The
            list is available in GET
            /timeoff/policy-types/{policyType}/reason-codes
          type: string
        attachmentLinks:
          description: Attachments with download links
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              url:
                type: string
              mimeType:
                type: string
        previousRequestId:
          description: >-
            The previous request ID before modification (relevant if a request's
            dates or duration were modified).
          type: integer
        approvedBy:
          description: Who approved the request
          type: string
        approvedAt:
          description: When the request was approved
          type: string
        declinedBy:
          description: Who declined the request
          type: string
        declinedAt:
          description: When the request was declined
          type: string
        declineReason:
          description: Why the request was declined
          type: string
    OnboardingWizards:
      type: object
      properties:
        wizards:
          type: array
          items:
            $ref: '#/components/schemas/OnboardingWizard'
    OnboardingWizard:
      type: object
      properties:
        id:
          type: number
          format: long
        name:
          type: string
    InvitationByWizard:
      required:
        - welcomeWizardId
      type: object
      properties:
        welcomeWizardId:
          description: The Welcome wizard ID.
          type: integer
    UploadAvatar:
      required:
        - url
      type: object
      properties:
        url:
          description: The URL of the source of the avatar image.
          type: string
    StartDateUpdate:
      required:
        - startDate
      type: object
      properties:
        startDate:
          description: The date this entry becomes effective.
          type: string
          format: date
        reason:
          description: Additional info for the start date update.
          type: string
    Task:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: number
          format: long
        set:
          type: string
    Tasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Report:
      type: object
      properties:
        id:
          type: number
          format: long
        name:
          type: string
    Reports:
      type: object
      properties:
        views:
          type: array
          items:
            $ref: '#/components/schemas/Report'
    ChangeEmail:
      type: object
      properties:
        email:
          description: new email
          type: string
    AddDocument:
      type: object
      properties:
        tags:
          description: Tags to.
          type: array
          items:
            type: string
        documentName:
          description: Document name.
          type: string
        documentUrl:
          description: URL of the document to upload.
          type: string
    Error:
      type: object
      properties:
        key:
          description: The unique identifier of the error.
          type: string
        error:
          description: A human readable error message.
          type: string
    ImportAttendanceData:
      required:
        - idType
        - requests
      type: object
      properties:
        idType:
          description: >-
            The ID type used to identify the employee. Can be one of: "bobId",
            "email", "idInCompany", or a custom field.<br/>For <b>custom
            fields</b> a forward slash separator should be used.<br/>In order to
            use a specific custom field to identify an employee, for example a
            custom field called "Payroll integration ID":<ul><li>Query the field
            name via the <a
            href='https://apidocs.hibob.com/reference/get_company-people-fields'>"Get
            all company fields"</a></li><li>In the response the name will look
            like <b>"identification.custom.Payroll Integration
            ID_1RNhIIf"</b></li><li>The value to use should be:
            <b>"/identification/custom/Payroll Integration
            ID_1RNhI"</b></li></ul>
          type: string
        requests:
          description: List of attendance events
          type: array
          items:
            $ref: '#/components/schemas/ImportAttendanceEvent'
        dateTimeFormat:
          description: >-
            Allows to set custom date format for the date-time values sent in
            the requests
          type: string
          example: yyyy-MM-dd hh:mm a
    ImportAttendanceEvent:
      description: An event indicating clock-in, clock-out or both
      required:
        - id
      type: object
      properties:
        id:
          description: >-
            The id value to identify the customer by. Will fetch the employee
            based on the field (type) selected in <i>idType</i>.
          type: string
          example: '12356733644'
        clockIn:
          description: The timestamp to log as a clock-in date-time in local time
          type: string
          example: 2022-06-12T08:00
        clockOut:
          description: The timestamp to log as a clock-out date-time in local time.
          type: string
          example: 2022-06-12T17:00
    ImportAttendanceResponse:
      type: object
      properties:
        status:
          description: Import status
          type: string
          enum:
            - success
            - failed
            - partial_success
        total:
          description: Total number of clock-in and clock-out events received
          type: number
          example: 140
        imported:
          description: Number of clock-in/clock-out events imported
          type: number
          example: 137
        notImported:
          description: Number of clock-in/clock-out events which were not imported
          type: number
          example: 3
        errors:
          description: List of all errors received in the process
          type: array
          example:
            - >-
              Clock-In at 2022-04-07T07:00 for employee ID 2686495591877312534
              is invalid
            - 'Invalid employee Id: ABCD12345567'
            - Cannot find employee for id 5986745
          items:
            type: string
    CustomTableColumn:
      type: object
      properties:
        description:
          description: The description of the column
          type: string
        id:
          description: The ID of the column
          type: string
        name:
          description: The name of the column
          type: string
        mandatory:
          description: >-
            Flag which means that column must be present during creation and its
            value can't be null during update
          type: boolean
        type:
          description: >-
            The type of the column. Supported column types: text, text-area,
            number, date, list, multi-list, hierarchy-list, currency,
            employee-reference, document.
          type: string
        typeData:
          type: object
          properties:
            listId:
              description: The ID of the list in the /v1/company/named-lists endpoint.
              type: string
    CustomTableMetadata:
      type: object
      properties:
        description:
          description: The description of custom table
          type: string
        id:
          description: The identifier of custom table
          type: string
        category:
          description: The ID of the category to which the custom table belongs
          type: string
        name:
          description: The name of custom table
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/CustomTableColumn'
    CustomTableMetadataList:
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/CustomTableMetadata'
    CustomTableEntriesList:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/CustomTableEntry'
    CustomTableEntry:
      description: >-
        The row data depends on what is defined in the table's schema, use HiBob
        Custom Table Metadata API to get list of defined columns. The only
        property that's always present is ID.
      type: object
      properties:
        id:
          description: The ID of the row
          type: number
      example:
        values:
          - column_1663598152485: 5185395
            column_1663598024920: '2022-09-30'
            column_1663598120787: '2871255975417872769'
            column_1663598037763: 123456
            column_1663598145154: 371223
            column_1663597977169: text text
            column_1663597992534: text area text area text area
            column_1663598108167:
              value: 240
              currency: USD
            id: 1021262
            column_1663598062584: '252614471'
            column_1663598090762:
              - '252614475'
              - '252614476'
            humanReadable:
              column_1663597992534: text area text area text area
              column_1663598090762: B,A
              column_1663598108167: $240.00
              column_1663598145154: B \ 3
              column_1663598062584: C
              column_1663598152485: '5185395'
              column_1663597977169: text text
              column_1663598037763: '123456'
              column_1663598024920: 30/09/2022
              column_1663598120787: Austin Legge
    ObjectsMetadata:
      type: object
      properties:
        description:
          description: Description of the field.
          type: string
        id:
          description: ID of the field.
          type: string
        name:
          description: Name of the field.
          type: string
        fieldType:
          type: object
          properties:
            type:
              description: The type of the field.
              type: string
            typeData:
              type: object
              properties:
                listId:
                  description: The ID of the list in the /v1/company/named-lists endpoint.
                  type: string
        jsonPath:
          type: object
          properties:
            root:
              description: >-
                The path to the field json object. The field value and other
                properties, such as humanReadable value, will be placed inside.
              type: string
            rawData:
              description: The path to the actual field value.
              type: string
    GetPositionsRequest:
      required:
        - fields
        - filters
      type: object
      properties:
        fields:
          description: >-
            Array of field ids (paths) to fetch for the positions.<br /> Minimum
            1 up to 50 fields. Any invalid number of fields will get a response
            of 400 HTTP error.<br /> You can include only the field ids listed
            in the [Positions Fields Metadata
            API](https://apidocs.hibob.com/reference/get_metadata-objects-position).
          type: array
          items:
            type: string
        filters:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/FilterInstruction'
        includeHumanReadable:
          description: >-
            Whether to include the additional "humanReadable" entry in the
            response.
          type: boolean
          default: false
    FilterInstruction:
      required:
        - fieldId
        - operator
        - values
      properties:
        fieldId:
          description: >-
            The field id (path) to filter by.<br /> Supported fields:
            “/position/status”, "/position/name".<br />Any other path will get a
            response of 400 HTTP error.
          type: string
        operator:
          description: >-
            Supported operators: “equals”, "notEqual".<br />Any other operator
            will get a response of 400 HTTP error.
          type: string
        values:
          description: >-
            List of values to compare.<br />Empty list will result in 400 HTTP
            error.
          type: array
          items:
            type: string
    PositionEntries:
      type: array
      items:
        type: object
        properties:
          /position/fte:
            description: The position's full time equivalent (FTE%).
          /position/effectiveDate:
            description: The date this position becomes effective.
          /position/employmentType:
            description: The position's employment type.
          /position/status:
            description: The position's status.
          /position/actualStartDate:
            description: The employee's assignment date for this position.
          /position/reason:
            description: Reason for changing or creating this position.
          /position/positionType:
            description: The position's type.
          /position/filledBy:
            description: The current assigned employee for this position.
          /position/job:
            description: The position's job.
          /position/recruitmentStatus:
            description: The position's recruitment status.
          /position/name:
            description: The unique ID of this position.
          /position/department:
            description: The position's department.
          /position/site:
            description: The position's site.
          /position/expectedStartDate:
            description: The expected date this position should be filled.
          /position/managerPositionId:
            description: The manager's position ID.
          /position/managerPositionFilledBy:
            description: The current assigned manager for this position.
    JobAdRequest:
      required:
        - fields
        - filters
      type: object
      properties:
        fields:
          description: >-
            Array of field ids (paths) to fetch for job ads.<br /> Minimum 1 up
            to 50 fields. Any invalid number of fields will get a response of
            400 HTTP error.
          type: array
          items:
            type: string
        filters:
          description: >-
            Array of filters to narrow down the searh results. Can be an empty
            array.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/JobAdFilterInstruction'
    JobAdFilterInstruction:
      required:
        - fieldId
        - operator
        - values
      properties:
        fieldId:
          description: >-
            The field id (path) to filter by.<br /> Supported fields:<br
            />“/jobAd/id”,<br />"/jobAd/title",<br />"/jobAd/departmentId",<br
            />"/jobAd/employmentTypeId",<br />"/jobAd/siteId",<br
            />"/jobAd/languageCode".<br />Any other path will get a response of
            400 HTTP error.
          type: string
        operator:
          description: >-
            Supported operators:<br />“equals”,<br />"notEqual".<br />Any other
            operator will get a response of 400 HTTP error.
          type: string
        values:
          description: >-
            List of values to compare.<br />Empty list will result in 400 HTTP
            error.
          type: array
          items:
            type: string
    JobAd:
      type: object
      properties:
        /jobAd/id:
          description: The ID of the job ad.
          type: object
          properties:
            value:
              type: string
              format: uuid
        /jobAd/applyUrl:
          description: The URL to the application form page for the job ad.
          type: object
          properties:
            value:
              type: string
        /jobAd/title:
          description: >-
            The title of the job ad as defined on the job description used to
            promote the job opening.
          type: object
          properties:
            value:
              type: string
        /jobAd/departmentId:
          description: >-
            The ID of the department defined on the job opening that the job ad
            was created from. List of all values is available via [Company List
            - Department
            API](https://api.hibob.com/v1/company/named-lists/department)
          type: object
          properties:
            value:
              type: string
        /jobAd/department:
          description: >-
            The name of the department defined on the job opening that the job
            ad was created from.
          type: object
          properties:
            value:
              type: string
        /jobAd/employmentTypeId:
          description: >-
            The ID of the employment type defined on the job opening that the
            job ad was created from. List of all values is available via
            [Company List - PayrollEmploymentType
            API](https://api.hibob.com/v1/company/named-lists/payrollEmploymentType)
          type: object
          properties:
            value:
              type: string
          format: string
        /jobAd/employmentType:
          description: >-
            The name of the employment type defined on the job opening that the
            job ad was created from.
          type: object
          properties:
            value:
              type: string
        /jobAd/siteId:
          description: >-
            The ID of the site defined on the job opening that the job ad was
            created from. List of all values is available via [Company List -
            Site API](https://api.hibob.com/v1/company/named-lists/site)
          type: object
          properties:
            value:
              type: integer
              format: long
        /jobAd/site:
          description: >-
            The name of the site defined on the job opening that the job ad was
            created from.
          type: object
          properties:
            value:
              type: string
        /jobAd/country:
          description: >-
            The county name of the site defined on the job opening that the job
            ad was created from.
          type: object
          properties:
            value:
              type: string
        /jobAd/languageCode:
          description: >-
            The language code of the selected language on job description used
            to promote the job opening. List of all values is available via
            [Company List - Languages
            API](https://api.hibob.com/v1/company/named-lists/languages)
          type: object
          properties:
            value:
              type: string
        /jobAd/description:
          description: >-
            The description as defined on the job description used to promote
            the job opening.
          type: object
          properties:
            value:
              type: string
        /jobAd/requirements:
          description: >-
            The requirements as defined on the job description used to promote
            the job opening.
          type: object
          properties:
            value:
              type: string
        /jobAd/responsibilities:
          description: >-
            The responsibilities as defined on the job description used to
            promote the job opening.
          type: object
          properties:
            value:
              type: string
        /jobAd/benefits:
          description: >-
            The benefits as defined on the job description used to promote the
            job opening.
          type: object
          properties:
            value:
              type: string
    JobAds:
      type: array
      items:
        $ref: '#/components/schemas/JobAd'
    PeopleUpdateEmployeeRecordRequest:
      type: object
      example:
        firstName: Bob
        personal:
          birthDate: '2002-01-01'
        about:
          hobbies:
            - music
            - travel
            - sport
      properties:
        firstName:
          type: string
          example: Bob
        personal:
          type: object
          properties:
            birthDate:
              type: string
              example: '2002-01-01'
        about:
          type: object
          properties:
            hobbies:
              type: array
              items:
                type: string
                example: music
    DocumentsUploadToSharedFolderRequest:
      required:
        - file
      properties:
        file:
          description: The file to upload.
          type: string
          format: binary
    DocumentsUploadConfidentialFileRequest:
      required:
        - file
      properties:
        file:
          description: The file to upload.
          type: string
          format: binary
    DocumentsUploadFileToFolderRequest:
      required:
        - file
      properties:
        file:
          description: The file to upload.
          type: string
          format: binary
    CustomTablesCreateNewEntryRequest:
      type: object
      properties:
        RAW_BODY:
          type: string
    CustomTablesUpdateEntryRequest:
      type: object
      properties:
        RAW_BODY:
          type: string
      example:
        column_1663598152485: 5185395
        column_1663598024920: '2022-09-30'
        column_1663598120787: '2871255975417872769'
        column_1663598145154: 371223
        column_1663597977169: text text
        column_1663597992534: text area text area text area
        column_1663598108167:
          value: 240
          currency: USD
        column_1663598062584: '252614471'
        column_1663598090762:
          - '252614475'
          - '252614476'
    ReportsDownloadByIdResponse:
      type: string
      format: binary
    ReportsDownloadReportFileResponse:
      type: string
      format: binary
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
    Basic:
      type: http
      scheme: basic
x-readme:
  explorer-enabled: true
  proxy-enabled: true
_id: 63cfae3d02656e0063a1cf02
