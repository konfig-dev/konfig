openapi: 3.0.1
info:
  title: Finshark API
  description: Finshark API
  version: v1
  contact:
    name: ''
    email: support@finshark.io
  x-logo:
    url: https://cdn.finshark.io/logo/logo-dark.svg
    altText: FinsharkLogo
servers:
  - description: url
    url: api.finshark.io
tags:
  - name: Payment requests
  - name: Payment templates
  - name: Webhooks
  - name: Payouts
  - name: Accounts
  - name: Bank id
  - name: Screen data
  - name: Recurring payments
  - name: Signing baskets
  - name: Cards
  - name: CardTransactions
  - name: Transactions
  - name: Compliance data
  - name: Kyc
  - name: User identity verification
  - name: Insights
  - name: Central person register denmark
  - name: Tra
  - name: User identification
  - name: Consent authorizations
  - name: Provider authorizations
paths:
  /v1/accounts:
    get:
      tags:
        - Accounts
      summary: Get list of accounts.
      operationId: Accounts_list
      parameters:
        - description: The session identifier from authorization response.
          name: sessionId
          in: header
          schema:
            type: string
            format: uuid
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and accounts are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Detailed information about an account.
      operationId: Accounts_getDetails
      parameters:
        - description: The session identifier from authorization response.
          name: sessionId
          in: header
          schema:
            type: string
            format: uuid
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
        - description: Internal technical account identifier.
          name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and one account is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}/balances:
    get:
      tags:
        - Accounts
      summary: Get all types of balances for the selected account.
      operationId: Accounts_getBalances
      parameters:
        - description: Internal technical account identifier.
          name: accountId
          in: path
          required: true
          schema:
            type: string
        - description: The session identifier from authorization response.
          name: sessionId
          in: header
          schema:
            type: string
            format: uuid
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and balances are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponse'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards:
    get:
      tags:
        - Cards
      summary: Get list of cards.
      operationId: Cards_getList
      parameters:
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and cards are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Detailed information about an card.
      operationId: Cards_getDetails
      parameters:
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
        - description: Internal technical card identifier.
          name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and one card is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards/{cardId}/cardtransactions:
    get:
      tags:
        - CardTransactions
      summary: Get a list of transactions for the selected account.
      operationId: CardTransactions_getList
      parameters:
        - description: Internal technical card identifier.
          name: cardId
          in: path
          required: true
          schema:
            type: string
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
        - description: Filter transactions by booking status.
          name: bookingStatus
          in: query
          schema:
            $ref: '#/components/schemas/BookingStatusType'
        - description: >-
            Filter transactions by a "from" date. Value is Unix timestamp
            (milliseconds).
          name: dateFrom
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            Filter transactions by a "to" date. Value is Unix timestamp
            (milliseconds).
          name: dateTo
          in: query
          schema:
            type: integer
            format: int64
        - description: Set to get next transactions page.
          name: sequenceNumber
          in: query
          schema:
            type: string
        - description: Filter transactions by hash.
          name: hash
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and transactions are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionsResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards/{cardId}/cardtransactions/{transactionId}:
    get:
      tags:
        - CardTransactions
      summary: Get a transaction by transaction identifier.
      operationId: CardTransactions_getByTransactionId
      parameters:
        - description: Internal technical card identifier.
          name: cardId
          in: path
          required: true
          schema:
            type: string
        - description: Transaction identifier.
          name: transactionId
          in: path
          required: true
          schema:
            type: string
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and transaction is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Get a list of transactions for the selected account.
      operationId: Transactions_listForAccount
      parameters:
        - description: Internal technical account identifier.
          name: accountId
          in: path
          required: true
          schema:
            type: string
        - description: The session identifier from authorization response.
          name: sessionId
          in: header
          schema:
            type: string
            format: uuid
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
        - description: Filter transactions by booking status.
          name: bookingStatus
          in: query
          schema:
            $ref: '#/components/schemas/BookingStatusType'
        - description: >-
            Filter transactions by a "from" date. Value is Unix timestamp
            (milliseconds).
          name: dateFrom
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            Filter transactions by a "to" date. Value is Unix timestamp
            (milliseconds).
          name: dateTo
          in: query
          schema:
            type: integer
            format: int64
        - description: Set to get next transactions page.
          name: sequenceNumber
          in: query
          schema:
            type: string
        - description: Filter transactions by hash.
          name: hash
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and transactions are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}/transactions/{transactionId}:
    get:
      tags:
        - Transactions
      summary: Get a transaction by transaction identifier.
      operationId: Transactions_getById
      parameters:
        - description: Internal technical account identifier.
          name: accountId
          in: path
          required: true
          schema:
            type: string
        - description: Transaction identifier.
          name: transactionId
          in: path
          required: true
          schema:
            type: string
        - description: The session identifier from authorization response.
          name: sessionId
          in: header
          schema:
            type: string
            format: uuid
        - description: The Authorization identifier from authorization response.
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and transaction is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/bankId/identify:
    post:
      tags:
        - Bank id
      summary: Initiates an authentication order.
      operationId: BankId_initiateAuthenticationOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankIdIdentifyDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BankIdIdentifyDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BankIdIdentifyDto'
      responses:
        '200':
          description: Success
  /v1/bankId/{orderRef}:
    get:
      tags:
        - Bank id
      summary: Collects the result of a sign or auth order using orderRef as reference.
      operationId: BankId_collectOrderResult
      parameters:
        - name: orderRef
          in: path
          required: true
          schema:
            type: string
        - name: userIdentification
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
  /v1/bankId/qr:
    post:
      tags:
        - Bank id
      summary: Retrieves QR code data based on the provided QR data request.
      operationId: BankId_getQrCodeData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QrDataRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/QrDataRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QrDataRequest'
      responses:
        '200':
          description: Success
  /v1/compliance/dk/{ssn}/cpr:
    get:
      tags:
        - Central person register denmark
      summary: Gets a mapped response from CPR Service for provider person id.
      operationId: CentralPersonRegisterDenmark_getMappedResponse
      parameters:
        - description: Person identifier.
          name: ssn
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and CPR details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CPRResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/compliance-data:
    get:
      tags:
        - Compliance data
      summary: Retrieves compliance data based on specified parameters.
      operationId: ComplianceData_getBasedParameters
      parameters:
        - description: The filter parameter for compliance data.
          name: filterParam
          in: query
          schema:
            type: string
        - description: The size of the page for pagination.
          name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - description: The page number for pagination.
          name: pageNumber
          in: query
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        '200':
          description: Success
  /v1/compliance-data/accounts:
    get:
      tags:
        - Compliance data
      summary: Retrieves accounts by search term.
      operationId: ComplianceData_getBySearchTerm
      parameters:
        - description: The search term for accounts.
          name: searchTerm
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
  /v1/kyc:
    post:
      tags:
        - Kyc
      summary: Create a KYC report.
      operationId: Kyc_submitReport
      parameters:
        - name: authorizationId
          in: query
          schema:
            type: string
        - name: ssn
          in: query
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and KYC details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/kyc/{id}:
    get:
      tags:
        - Kyc
      summary: Get a KYC report.
      operationId: Kyc_reportFetch
      parameters:
        - description: KYC identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and KYC details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/screen-data/{personId}:
    get:
      tags:
        - Screen data
      summary: Gets data by personId and corporateId.
      operationId: ScreenData_getByPerson
      parameters:
        - description: The person identifier.
          name: personId
          in: path
          required: true
          schema:
            type: string
        - description: The corporate identifier.
          name: corporateId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      tags:
        - Screen data
      summary: Updates data.
      operationId: ScreenData_updateData
      parameters:
        - description: The person identifier.
          name: personId
          in: path
          required: true
          schema:
            type: string
        - description: The corporate identifier.
          name: corporateId
          in: query
          schema:
            type: string
      requestBody:
        description: >-
          The new object of Finshark.Compliance.Core.Payloads.ScreenDataDto type
          with data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenDataDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ScreenDataDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScreenDataDto'
      responses:
        '200':
          description: Success
  /v1/screen-data:
    post:
      tags:
        - Screen data
      summary: Adds data to database.
      operationId: ScreenData_addToDatabase
      requestBody:
        description: Screen data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenData'
          text/json:
            schema:
              $ref: '#/components/schemas/ScreenData'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScreenData'
      responses:
        '200':
          description: Success
  /v1/tra-result:
    get:
      tags:
        - Tra
      summary: Returns TRA recommendation value from cache.
      operationId: Tra_getRecommendationValue
      parameters:
        - name: authorizationId
          in: query
          schema:
            type: string
        - name: paymentId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and KYC details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraEvaluationDto'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: TRA recommendation for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/user-identification:
    post:
      tags:
        - User identification
      summary: Post user data.
      operationId: UserIdentification_postData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataDto'
      responses:
        '200':
          description: The request is valid.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/user-identity-verification/user-authentication:
    post:
      tags:
        - User identity verification
      summary: Starts FTN authentication flow for given user.
      operationId: UserIdentityVerification_startFtnAuthenticationFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentityVerificationDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityVerificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/user-identity-verification/session-details:
    get:
      tags:
        - User identity verification
      summary: Gets details of FTN authentication flow.
      operationId: UserIdentityVerification_getSessionDetails
      parameters:
        - description: Id of FTN session.
          name: sessionId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityVerificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/insights/request:
    post:
      tags:
        - Insights
      summary: Creating an insights request.
      operationId: Insights_createRequest
      parameters:
        - description: The session identifier from authorization response
          name: sessionId
          in: header
          schema:
            type: string
            format: uuid
        - description: The Authorization identifier
          name: authorizationId
          in: header
          schema:
            type: string
            format: uuid
        - description: ''
          name: sandbox
          in: query
          schema:
            type: boolean
            default: false
        - description: ''
          name: callbackUri
          in: query
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
        required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsightsRequestStatus'
            text/json:
              schema:
                $ref: '#/components/schemas/InsightsRequestStatus'
            text/plain:
              schema:
                $ref: '#/components/schemas/InsightsRequestStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/insights/{requestId}:
    get:
      tags:
        - Insights
      summary: Get an insights report.
      operationId: Insights_getReport
      parameters:
        - description: request identifier
          name: requestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments:
    post:
      tags:
        - Payment requests
      summary: Creating a Payment Request.
      operationId: PaymentRequests_createRequest
      requestBody:
        description: Payment Request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestsCreateRequestRequest'
        required: true
      responses:
        '201':
          description: The request has been fulfilled and a payment request is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsCreateRequestResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsCreateRequest400Response'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Payment requests
      summary: Get all Payment Requests for selected organizationId.
      operationId: PaymentRequests_getAll
      parameters:
        - description: Search by client identifier.
          name: searchClientId
          in: query
          schema:
            type: string
        - description: Search by recipient.
          name: searchRecipient
          in: query
          schema:
            type: string
        - description: >-
            Search by payment request status, comma separated (E.G. "AUTHORIZED,
            IN_PROGRESS" will fetch only payments with AUTHORIZED and
            IN_PROGRESS status).
          name: searchStatus
          in: query
          schema:
            type: string
        - description: >-
            Environment on which the call has been invoked, comma separated
            (e.g. "PRODUCTION, SANDBOX", or "SANDBOX"). Blank returns all.
          name: searchClientAccess
          in: query
          schema:
            type: string
        - description: Sort response by clientId, recipient, status.
          name: sortBy
          in: query
          schema:
            type: string
        - description: Sort direction "desc" or "asc".
          name: sortDirection
          in: query
          schema:
            type: string
        - description: Page index.
          name: pageIndex
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - description: Items per page.
          name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: Request was fulfilled and Payment Requests are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedPaymentRequestModels'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsGetAllResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/{id}:
    get:
      tags:
        - Payment requests
      summary: Get Payment Request details by id.
      operationId: PaymentRequests_getDetailsById
      parameters:
        - description: Payment Request identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and Payment Request data is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsGetDetailsByIdResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsGetDetailsById400Response'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Payment requests
      summary: Delete Payment Request.
      operationId: PaymentRequests_deleteRequest
      parameters:
        - description: Payment Request identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Request was fulfilled and Payment Request is deleted.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsDeleteRequestResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/{id}/details:
    get:
      tags:
        - Payment requests
      summary: >-
        Get Payment Request details and authorization information by payment
        request id.
      operationId: PaymentRequests_getDetailsById
      parameters:
        - description: Payment Request identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and Payment Request data is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePaymentRequest'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestsGetDetailsById400Response'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/{id}/refund:
    post:
      tags:
        - Payment requests
      summary: Create a payment refund request.
      operationId: PaymentRequests_createRefundRequest
      parameters:
        - description: Payment Request identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Payment refund request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
      responses:
        '201':
          description: The request has been fulfilled and a payment request is created.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PaymentRequestsCreateRefundRequestResponse
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PaymentRequestsCreateRefundRequest400Response
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/templates:
    post:
      tags:
        - Payment templates
      summary: Creating a payment template.
      operationId: PaymentTemplates_createTemplate
      requestBody:
        description: Payment template body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentTemplate'
      responses:
        '201':
          description: The request has been fulfilled and a payment template is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesCreateTemplateResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Payment templates
      summary: Get all templates.
      operationId: PaymentTemplates_getAllTemplates
      responses:
        '200':
          description: Request was fulfilled and payment trmplates are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesGetAllTemplatesResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PaymentTemplatesGetAllTemplates400Response
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/templates/{id}:
    get:
      tags:
        - Payment templates
      summary: Get payment template by id.
      operationId: PaymentTemplates_getById
      parameters:
        - description: Payment template identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and template data is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesGetByIdResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Payment templates
      summary: Creating a request to update a Payment template.
      operationId: PaymentTemplates_updateRequest
      parameters:
        - description: Payment template identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Payment template request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentTemplate'
      responses:
        '200':
          description: The request has been fulfilled and a payout is updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesUpdateRequestResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Payment templates
      summary: Delete payment template.
      operationId: PaymentTemplates_removeTemplate
      parameters:
        - description: Payment template identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Request was fulfilled and Payment template data is deleted.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesRemoveTemplate400Response'
            text/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesRemoveTemplate400Response'
            text/plain:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesRemoveTemplateResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/templates/{id}/initiate:
    post:
      tags:
        - Payment templates
      summary: Creating a payment request from a template.
      operationId: PaymentTemplates_initiateRequest
      parameters:
        - description: Template identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Payment template body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestInit'
      responses:
        '201':
          description: The request has been fulfilled and a payment request is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplatesInitiateRequestResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PaymentTemplatesInitiateRequest400Response
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payouts:
    post:
      tags:
        - Payouts
      summary: Create a payout.
      operationId: Payouts_createPayout
      requestBody:
        description: Payout request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePayout'
      responses:
        '201':
          description: The request has been fulfilled and a payout is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payout'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsCreatePayoutResponse'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Payouts
      summary: Get all payouts.
      operationId: Payouts_getAllPayouts
      parameters:
        - description: >-
            If set, payouts created from that date will be returned. Value must
            be set in Unix epoch time format (milliseconds).
          name: dateFrom
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            If set, payouts created until that date will be returned. Value must
            be set in Unix epoch time format (milliseconds).
          name: dateTo
          in: query
          schema:
            type: integer
            format: int64
        - description: If set, payouts filtered by status will be returned.
          name: status
          in: query
          schema:
            $ref: '#/components/schemas/PayoutStatus'
        - description: If set, payouts filtered by paymentId will be returned.
          name: paymentId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and payouts are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsGetAllPayoutsResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsGetAllPayouts400Response'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payouts/{id}/authorization:
    post:
      tags:
        - Payouts
      summary: Authorizes a payout.
      operationId: Payouts_authorizePayout
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request has been fulfilled and the payout is authorized.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsAuthorizePayoutResponse'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource  does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payouts/{id}:
    get:
      tags:
        - Payouts
      summary: Get payout by id.
      operationId: Payouts_getById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and payout is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payout'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsGetByIdResponse'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/recurring-payments:
    post:
      tags:
        - Recurring payments
      summary: Create a new recurring payment.
      operationId: RecurringPayments_createNewRecurringPayment
      requestBody:
        description: Create Recurring Payment request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringPaymentCreateRequest'
        required: true
      responses:
        '200':
          description: The request has been fulfilled and a recurring payment is created.
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPaymentResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringPaymentsCreateNewRecurringPaymentResponse
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/recurring-payments/{id}:
    get:
      tags:
        - Recurring payments
      summary: Get the recurring payment.
      operationId: RecurringPayments_getRecurringPayment
      parameters:
        - description: Recurring payment identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and recurring payment is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPaymentResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringPaymentsGetRecurringPaymentResponse
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: >-
            This method is currently not available for corporate access, only
            for payments to private individuals.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
    delete:
      tags:
        - Recurring payments
      summary: Delete/cancel the recurring payment.
      operationId: RecurringPayments_cancelRecurringPayment
      parameters:
        - description: Recurring payment identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and recurring payment is deleted.
        '204':
          description: No Content
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringPaymentsCancelRecurringPaymentResponse
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/signing-baskets:
    post:
      tags:
        - Signing baskets
      summary: Create a new signing basket.
      operationId: SigningBaskets_createNewBasket
      parameters:
        - description: If set to true, any signing basket size limits are ignored.
          name: ignoreSizeLimit
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: Create Signing Basket Request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigningBasketCreateRequest'
        required: true
      responses:
        '201':
          description: The request has been fulfilled and signing basket is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketsCreateNewBasketResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/signing-baskets/{id}:
    get:
      tags:
        - Signing baskets
      summary: Get Signing Basket details.
      operationId: SigningBaskets_getDetails
      parameters:
        - description: Signing Basket identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has been fulfilled and Signing Basket is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketsGetDetailsResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Signing baskets
      summary: Delete/cancel the signing basket.
      operationId: SigningBaskets_cancel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request has been fulfilled and Signing Basket is deleted.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketsCancelResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/consent-authorizations/{id}:
    get:
      tags:
        - Consent authorizations
      summary: Getting consent authorization status with expiry time.
      operationId: ConsentAuthorizations_getStatusWithExpiryTime
      parameters:
        - description: Consent authorization identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and consent authorization info is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentAuthorizationInfo'
        '401':
          description: Request failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/providers/authorizations/{authorizationId}/validation:
    post:
      tags:
        - Provider authorizations
      summary: Validate the PSU authorization data.
      operationId: ProviderAuthorizations_validatePsuAuthorizationData
      parameters:
        - description: Authorization identifier.
          name: authorizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Object with properties that should be validate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationValidationRequest'
      responses:
        '200':
          description: Object that contains validation result of the each properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizattionValidationResponse'
        '400':
          description: Error caused by invalid or missing request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/Webhooks:
    get:
      tags:
        - Webhooks
      summary: Gets a list of all webhooks.
      operationId: Webhooks_getAll
      responses:
        '200':
          description: Request was fulfilled and webhooks are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksGetAllResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Webhooks
      summary: Creates a new webhook.
      operationId: Webhooks_createNewWebhook
      requestBody:
        description: Webhooks creation request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Request was fulfilled and webhook is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Error caused by invalid or missing input request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/Webhooks/{id}:
    put:
      tags:
        - Webhooks
      summary: Updates an existing webhook.
      operationId: Webhooks_updateWebhook
      parameters:
        - description: Webhook identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New webhook request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: Request was fulfilled and webhook is updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Error caused by invalid or missing webhook input request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Webhooks
      summary: Gets a single webhook by id.
      operationId: Webhooks_getSingleById
      parameters:
        - description: Webhook identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and webhook is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Webhooks
      summary: Deletes an existing webhook.
      operationId: Webhooks_deleteWebhook
      parameters:
        - description: Webhook identifier.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Request was fulfilled and webhook is deleted.
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Account:
      description: >-
        This object contains data about the bank accounts. All data depends on
        the account type.
      type: object
      properties:
        accountNumber:
          description: >-
            Represents account/payment recipient number. The format of the
            account numbers depends on the account types and the banks.
          type: string
          nullable: true
        balances:
          $ref: '#/components/schemas/BalancesDetails'
        bban:
          description: Basic Bank Account Number.
          type: string
          nullable: true
        bic:
          description: Bank Identifier Code used for international transactions.
          type: string
          nullable: true
        bicAddress:
          description: Address linked to the selected BIC.
          type: string
          nullable: true
        currencyCode:
          description: The ISO 4217 currency code of the account.
          type: string
          nullable: true
        details:
          $ref: '#/components/schemas/AccountDetails'
        disabled:
          description: The disabled account doesn't exists anymore or it is not in use.
          type: boolean
          nullable: true
        iban:
          description: International Bank Account Number.
          type: string
          nullable: true
        id:
          description: >-
            Internal technical identifier of the account. This is the data
            element to be used in the path when retrieving data from a dedicated
            account. Used for the transactions, holders and balances endpoints.
          type: string
          nullable: true
        name:
          description: Account display name given by the user.
          type: string
          nullable: true
        ownerName:
          description: The name of the account's owner.
          type: string
          nullable: true
        ownerId:
          description: The account owner's identifier.
          type: string
          nullable: true
        ownership:
          description: Indicates how much of the account is owned by the user.
          type: number
          format: double
          nullable: true
        product:
          description: Banks or financial institutions product name.
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/AccountType'
        clearingNumber:
          description: Clearing number.
          type: string
          nullable: true
        pgnr:
          description: PlusGiro number - contains only numbers.
          type: string
          nullable: true
        bgnr:
          description: BankGiro number - contains only numbers.
          type: string
          nullable: true
    AccountDetails:
      description: >-
        Account details contain information only applicable for loan and saving
        accounts.
      type: object
      properties:
        fixationPeriod:
          description: >-
            The interest rate fixation period determines the period for which
            the interest rate agreed in the loan agreement is applicable. This
            period is expressed in months.
          type: integer
          format: int32
          nullable: true
        interestRate:
          description: Interest rate of the loans and savings accounts.
          type: number
          format: double
          nullable: true
        nextTermsModificationDay:
          description: >-
            A terms modification day is a point in time when the initial fixed
            interest rate changes after the defined period in Unix epoch time
            format (milliseconds).
          type: integer
          format: int64
          nullable: true
    AccountType:
      description: Available types of the account.
      enum:
        - BUSINESS
        - CHECKING
        - CREDIT_CARD
        - EXTERNAL
        - INVESTMENT
        - LOAN
        - MORTGAGE
        - OTHER
        - PENSION
        - SAVINGS
      type: string
    AccountsResponse:
      description: The list of accounts.
      required:
        - providerId
      type: object
      properties:
        providerId:
          $ref: '#/components/schemas/ProviderId'
        accounts:
          description: List of Finshark.Connections.Core.Accounts.Account.
          type: array
          items:
            $ref: '#/components/schemas/Account'
          nullable: true
        statusCode:
          $ref: '#/components/schemas/ErrorStatusCode'
        tppMessages:
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          type: array
          items:
            type: string
          nullable: true
    Amount:
      description: Amount with value and currency.
      type: object
      properties:
        currency:
          description: >-
            The currency code. This must be a valid ISO 4217 currency code. See
            the ASPSPs' documentation for details of supported currencies.
          type: string
          nullable: true
        value:
          description: >-
            The amount given with fractional digits, where fractions must be
            compliant to the currency definition. Up to 14 significant figures.
            Negative amounts are signed by minus. The decimal separator is a
            dot.: -?[0-9]{1,14}(\\.[0-9]{1,3})?.
          type: number
          format: double
          nullable: true
    BalancesDetails:
      description: Represents the details of the different types of balances.
      type: object
      properties:
        available:
          $ref: '#/components/schemas/Amount'
        booked:
          $ref: '#/components/schemas/Amount'
        creditLimit:
          $ref: '#/components/schemas/Amount'
        current:
          $ref: '#/components/schemas/Amount'
    BalancesResponse:
      description: The object with the account's balances.
      type: object
      properties:
        accountId:
          description: The internal technical identifier of the account.
          type: string
          nullable: true
        balances:
          $ref: '#/components/schemas/BalancesDetails'
    BookingStatusType:
      description: Currently available booking statuses of the transactions.
      enum:
        - ALL
        - BOOKED
        - PENDING
      type: string
    Card:
      description: This object contains data about the card details.
      type: object
      properties:
        id:
          description: Credit card identifier.
          type: string
          nullable: true
        masked_credit_card_number:
          description: Masked credit card number.
          type: string
          nullable: true
        product_name:
          description: Credit card product name.
          type: string
          nullable: true
        credit_limit:
          description: Credit limit of the credit card.
          type: number
          format: double
          nullable: true
        credit_available_balance:
          description: Available balance on the credit card.
          type: number
          format: double
          nullable: true
        credit_booked_balance:
          description: Booked balance on the credit card.
          type: number
          format: double
          nullable: true
    CardTransaction:
      required:
        - hash
      type: object
      properties:
        id:
          description: Credit card transaction ID.
          type: string
          nullable: true
        amount:
          description: >-
            Monetary amount of the credit card transaction in the card's
            currency.
          type: number
          format: double
          nullable: true
        beneficiary:
          description: Beneficiary of the credit card transaction.
          type: string
          nullable: true
        booking_date:
          description: Booking date of the credit card transaction.
          type: integer
          format: int64
          nullable: true
        currency:
          description: Currency code according to ISO 4217.
          type: string
          nullable: true
        original_amount:
          description: >-
            Monetary amount of the credit card transaction in the original
            transaction currency.
          type: number
          format: double
          nullable: true
        original_currency:
          description: Original credit card transaction currency.
          type: string
          nullable: true
        transaction_date:
          description: Transaction date of the credit card transaction.
          type: integer
          format: int64
          nullable: true
        transaction_type:
          description: Credit card transaction type.
          type: string
          nullable: true
        hash:
          description: Hash of the transaction.
          type: string
    CardTransactionsResponse:
      type: object
      properties:
        metaData:
          $ref: '#/components/schemas/MetaData'
        transactions:
          description: The transactions resulting from the query.
          type: array
          items:
            $ref: '#/components/schemas/CardTransaction'
          nullable: true
    CardsResponse:
      description: The list of cards.
      required:
        - providerId
      type: object
      properties:
        providerId:
          $ref: '#/components/schemas/ProviderId'
        cards:
          description: List of Finshark.Connections.Core.Cards.Card.
          type: array
          items:
            $ref: '#/components/schemas/Card'
          nullable: true
        statusCode:
          $ref: '#/components/schemas/ErrorStatusCode'
        tppMessages:
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          type: array
          items:
            type: string
          nullable: true
    ErrorStatusCode:
      description: >-
        The type of status code message that is generated and displayed helps us
        determine what failed or future actions during an API calls.
      enum:
        - CONTACT_BANK
        - CONTACT_BANK_KYC_INVALID
        - CONTACT_BANK_INTERNET_BANK_AGREEMENT
        - MBID_NOT_ACTIVATED
        - EXTRA_VERIFICATION_NEEDED
        - EXTRA_CONFIRMATION_NEEDED
        - TRANSIENT_BANK_ERROR
      type: string
    MetaData:
      description: Meta data object with information of page pagination.
      type: object
      properties:
        download:
          description: >-
            Link which is used to download transaction details in different
            formats.
          type: string
          nullable: true
        nextLink:
          description: >-
            Used in long transaction response as page next link, where is
            required to return next page to get more information of transaction
            details. It is filled with sequence number, date from and date to of
            the transactions.
          type: string
          nullable: true
    RemittanceInformation:
      description: Remittance information.
      type: object
      properties:
        reference:
          description: The remittance reference number for the payment.
          type: string
          nullable: true
        referenceType:
          $ref: '#/components/schemas/RemittanceInformationType'
    RemittanceInformationType:
      description: The remittance information type for the payments and transactions.
      enum:
        - OCR
        - REFERENCE
        - SCOR
        - UNSTRUCTURED
      type: string
    Transaction:
      description: The transaction object.
      required:
        - hash
      type: object
      properties:
        description:
          description: The description of the transaction.
          type: string
          nullable: true
        accountId:
          description: >-
            The internal technical identifier of the account that the
            transaction belongs to.
          type: string
          nullable: true
        amount:
          $ref: '#/components/schemas/Amount'
        bookingDate:
          description: >-
            The booking date is the date when the transaction is booked on the
            account. The value is in Unix epoch time (milliseconds).
          type: integer
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/TransactionCategory'
        creditorName:
          description: Name of the creditor for a debited transaction.
          type: string
          nullable: true
        debtorName:
          description: Name of the debtor for a credited transaction.
          type: string
          nullable: true
        hash:
          description: Hash of the transaction.
          type: string
        id:
          description: The internal technical identifier of the transaction.
          type: string
          nullable: true
        notes:
          description: A free-text field of the transaction.
          type: string
          nullable: true
        remittanceInformations:
          description: >-
            Swedish domestic payment OCR number or other type of structured
            reference or unstructured reference.
          type: array
          items:
            $ref: '#/components/schemas/RemittanceInformation'
          nullable: true
        status:
          $ref: '#/components/schemas/TransactionStatus'
        type:
          $ref: '#/components/schemas/TransactionType'
        valueDate:
          description: >-
            The value date is the start date for interest calculation. The value
            is in Unix epoch time (milliseconds).
          type: integer
          format: int64
          nullable: true
        date:
          description: >-
            The date value is the date when happened the earliest transaction
            action (TransactionDate, ValueDate or BookingDate, respectively).
            The value is in Unix epoch time (milliseconds).
          type: integer
          format: int64
          nullable: true
    TransactionCategory:
      description: The available categories of the transactions.
      enum:
        - EXPENSES
        - INCOME
        - TRANSFERS
      type: string
    TransactionStatus:
      description: The possible status of the transaction.
      enum:
        - BOOKED
        - PENDING
      type: string
    TransactionType:
      description: Type of the transaction.
      enum:
        - CARD
        - PAYMENT
        - OTHER
        - TRANSFER
        - WITHDRAWAL
      type: string
    TransactionsResponse:
      description: The response that contains the information about transactions.
      type: object
      properties:
        metaData:
          $ref: '#/components/schemas/MetaData'
        transactions:
          description: The transactions resulting from the query.
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
          nullable: true
    BankIdIdentifyDto:
      description: Data transfer object for BankId identification.
      type: object
      properties:
        personalNumber:
          description: >-
            A personal identification number to be used to complete the
            transaction.

            If a BankID with another personal number attempts to sign the
            transaction, it fails.
          type: string
          nullable: true
    CPRResponse:
      description: Successful response object for CPR Denmark.
      type: object
      properties:
        personInformation:
          $ref: '#/components/schemas/Person'
        currentPerson:
          $ref: '#/components/schemas/Person'
        personForeignAddress:
          $ref: '#/components/schemas/Person'
        guardianPerson:
          $ref: '#/components/schemas/GuardianPerson'
        fraudAlert:
          $ref: '#/components/schemas/FraudAlertPerson'
    ForeignAddress:
      type: object
      properties:
        addressLine1:
          description: Address lines for foreign addresses.
          type: string
          nullable: true
        addressLine2:
          description: Address lines for foreign addresses.
          type: string
          nullable: true
        addressLine3:
          description: Address lines for foreign addresses.
          type: string
          nullable: true
        addressLine4:
          description: Address lines for foreign addresses.
          type: string
          nullable: true
        addressLine5:
          description: Address lines for foreign addresses.
          type: string
          nullable: true
        country:
          description: Country text for foreign address.
          type: string
          nullable: true
        countryCode:
          description: Country code for foreign address.
          type: string
          nullable: true
        registrationDate:
          description: Registration date of the foreign address.
          type: string
          nullable: true
    FraudAlertPerson:
      type: object
      properties:
        fraudAlertStartDate:
          description: The date and time of a fraud alert.
          type: string
          format: date-time
        personId:
          description: Danish civil registration number - CPR number.
          type: string
          nullable: true
    GuardianPerson:
      type: object
      properties:
        guardianAddress:
          $ref: '#/components/schemas/Address'
        guardianName:
          description: The name of the guardian.
          type: string
          nullable: true
        personId:
          description: Danish civil registration number - CPR number.
          type: string
          nullable: true
    KycResponse:
      description: Response object for KYC request.
      required:
        - id
        - status
      type: object
      properties:
        id:
          description: KYC Identifier.
          type: string
          format: uuid
        firstName:
          description: First name.
          type: string
          nullable: true
        lastName:
          description: Last name.
          type: string
          nullable: true
        birthDate:
          description: Date of birth in format YYYY-MM-DD.
          type: string
          nullable: true
        address:
          description: Address.
          type: string
          nullable: true
        city:
          description: City.
          type: string
          nullable: true
        zipCode:
          description: Zip code.
          type: string
          nullable: true
        region:
          description: Region.
          type: string
          nullable: true
        status:
          description: |-
            Status - enum:
            [IN_PROGRESS, COMPLETED, FAILED].
          minLength: 1
          type: string
        createDate:
          description: Date and time of KYC request creation.
          type: string
          format: date-time
          nullable: true
    Name:
      type: object
      properties:
        firstName:
          description: First name.
          type: string
          nullable: true
        fullName:
          description: Full name (both first and last name space separated).
          type: string
          nullable: true
        lastName:
          description: Last name.
          type: string
          nullable: true
        middleName:
          description: Middle name.
          type: string
          nullable: true
    NationalRegistrationAddress:
      type: object
      properties:
        address:
          description: Full street address text line.
          type: string
          nullable: true
        buildingNumber:
          description: Building number, used on Greenland in place of house number.
          type: string
          nullable: true
        coAddress:
          description: c/o address.
          type: string
          nullable: true
        doorPlacement:
          description: Door placement.
          type: string
          nullable: true
        floorNumber:
          description: Floor number.
          type: string
          nullable: true
        houseNumber:
          description: House number.
          type: string
          nullable: true
        locality:
          description: Locality text, e.g. farm name.
          type: string
          nullable: true
        municipalityCode:
          description: Municipality code.
          type: string
          nullable: true
        municipalityLong:
          description: Municipality long text.
          type: string
          nullable: true
        municipalityShort:
          description: Municipality short text.
          type: string
          nullable: true
        registrationDate:
          description: Registration date for the address.
          type: string
          format: date-time
        streetCode:
          description: Street code.
          type: string
          nullable: true
        streetText:
          description: Street name.
          type: string
          nullable: true
        streetTextForAddress:
          description: An abbreviation of street name, which is used for shipments.
          type: string
          nullable: true
        town:
          description: Postal town.
          type: string
          nullable: true
        village:
          description: Village text.
          type: string
          nullable: true
        zipCode:
          description: Zip code.
          type: string
          nullable: true
    Person:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        birthDate:
          description: Birth date.
          type: string
          format: date-time
          nullable: true
        birthDateUncertain:
          description: Whether the birth date is unclear.
          type: boolean
          nullable: true
        currentPersonId:
          description: >-
            New personal identification number if it was changed for some
            reason.
          type: string
          nullable: true
        gender:
          description: Gender code.
          type: string
          nullable: true
        guardianshipDate:
          description: Date of guardianship.
          type: string
          nullable: true
        marketingProtection:
          description: Whether the person has chosen to be protected against marketing.
          type: boolean
          nullable: true
        name:
          $ref: '#/components/schemas/Name'
        pendingChanges:
          description: If there are pending changes to the CPR register.
          type: boolean
          nullable: true
        personId:
          description: Danish civil registration number - CPR number.
          type: string
          nullable: true
        personStatus:
          $ref: '#/components/schemas/PersonStatus'
        secrecyMarked:
          description: Whether the person is secrecy marked.
          type: boolean
          nullable: true
    PersonStatus:
      type: object
      properties:
        code:
          description: >-
            Person status code, shows for example if person is dead or has
            emigrated etc.
          type: string
          nullable: true
        fromDate:
          description: Date from when status was set.
          type: string
          format: date-time
          nullable: true
        statusDateUncertain:
          description: Whether the status date is uncertain.
          type: boolean
          nullable: true
        text:
          description: Descriptive text for status code.
          type: string
          nullable: true
    Providers:
      description: List of provider identifiers.
      enum:
        - fi-op
        - fi-op-sand
        - fi-spankki
        - fi-spankki-sand
        - fi-nordea
        - fi-nordea-sand
        - fi-danskebank
        - fi-danskebank-sand
        - fi-handelsbanken
        - fi-handelsbanken-sand
        - fi-norwegian
        - fi-norwegian-sand
        - fi-revolut
        - fi-revolut-sand
        - fi-alandsbanken
        - fi-alandsbanken-sand
        - fi-morrowbank
        - fi-morrowbank-sand
        - fi-poppankki
        - fi-poppankki-sand
        - fi-saastopankki
        - fi-saastopankki-sand
        - fi-omasaastopankki
        - fi-omasaastopankki-sand
        - dk-nordea
        - dk-nordea-sand
        - dk-sparekassendanmark-sand
        - dk-sparekassendanmark
        - dk-lansparbank-sand
        - dk-lansparbank
        - dk-sparekassenkronjylland-sand
        - dk-sparekassenkronjylland
        - dk-folkesparekassen-sand
        - dk-folkesparekassen
        - dk-ikanobank-sand
        - dk-ikanobank
        - dk-basisbank-sand
        - dk-basisbank
        - dk-norwegian
        - dk-norwegian-sand
        - dk-danskebank
        - dk-danskebank-sand
        - dk-swedbank-sand
        - dk-swedbank
        - dk-sparnordbank-sand
        - dk-sparnordbank
        - dk-arbejderneslandsbank-sand
        - dk-arbejderneslandsbank
        - dk-nykreditbank-sand
        - dk-nykreditbank
        - dk-vestjyskbank-sand
        - dk-vestjyskbank
        - dk-coopbank-sand
        - dk-coopbank
        - dk-monsbank-sand
        - dk-monsbank
        - dk-andelskassenfelleskassen-sand
        - dk-andelskassenfelleskassen
        - dk-jyskebank
        - dk-jyskebank-sand
        - dk-ringkjobinglandbobank
        - dk-ringkjobinglandbobank-sand
        - dk-kreditbanken
        - dk-kreditbanken-sand
        - dk-revolut
        - dk-revolut-sand
      type: string
    QrDataRequest:
      description: Represents a request for QR code data retrieval.
      required:
        - qrStartSecret
        - qrStartToken
        - qrTime
      type: object
      properties:
        qrStartSecret:
          description: Used to compute the animated QR code.
          minLength: 1
          type: string
        qrStartToken:
          description: Used to compute the animated QR code.
          minLength: 1
          type: string
        qrTime:
          description: Represents the time associated with a QR code.
          type: integer
          format: int32
    ScreenData:
      type: object
      properties:
        personId:
          type: string
          nullable: true
        corporateId:
          type: string
          nullable: true
        screenedForPEP:
          type: string
          default: 'No'
          nullable: true
        screenedForSanctionList:
          type: string
          default: 'No'
          nullable: true
        blocked:
          type: string
          default: 'No'
          nullable: true
    ScreenDataDto:
      description: Data transfer object for ScreenData.
      type: object
      properties:
        screenedForPEP:
          description: Screened for PEP (Politically exposes persons).
          type: string
          nullable: true
        screenedForSanctionList:
          description: Screened for sanction list.
          type: string
          nullable: true
        blocked:
          description: Blocked.
          type: string
          nullable: true
    TraEvaluationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        paymentId:
          type: string
          nullable: true
        recommendation:
          type: string
          nullable: true
        formLink:
          type: string
          nullable: true
    UserDataDto:
      description: DTO for user identification.
      type: object
      properties:
        authorizationId:
          description: Authorization identifier.
          type: string
          nullable: true
        personalId:
          description: Personal user identifier.
          type: string
          nullable: true
        corporateId:
          description: Corporate identifier.
          type: string
          nullable: true
        name:
          description: End user name.
          type: string
          nullable: true
        givenName:
          description: End user given name.
          type: string
          nullable: true
        surname:
          description: End user surname.
          type: string
          nullable: true
        email:
          description: End user email address.
          type: string
          nullable: true
        phoneNumber:
          description: End user phone number.
          type: string
          nullable: true
    UserIdentityVerificationDto:
      description: Data transfer object for User Identity Verification.
      type: object
      properties:
        providerId:
          $ref: '#/components/schemas/Providers'
        paymentId:
          description: Gets or sets the Payment ID.
          type: string
          nullable: true
        authorizationId:
          description: Gets or sets the Payment ID.
          type: string
          nullable: true
        successRedirectUrl:
          description: >-
            Callback redirect url called after end of the user identity
            verification flow.
          type: string
          nullable: true
        failRedirectUrl:
          description: >-
            Callback redirect url called after user identity verification flow
            has failed.
          type: string
          nullable: true
    UserIdentityVerificationResponse:
      type: object
      properties:
        sessionId:
          type: string
          nullable: true
        psuId:
          type: string
          nullable: true
        paymentId:
          type: string
          nullable: true
        authorizationId:
          type: string
          nullable: true
        successRedirectUrl:
          type: string
          nullable: true
        failRedirectUrl:
          type: string
          nullable: true
        authenticationUrl:
          type: string
          nullable: true
        externalReference:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserIdentityVerificationStatus'
        subjectId:
          type: string
          nullable: true
        subjectIdpId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
        issuingCountry:
          type: string
          nullable: true
        nationalIdentityType:
          type: string
          nullable: true
        identificationDate:
          type: string
          format: date-time
    UserIdentityVerificationStatus:
      description: Signicat statuses.
      enum:
        - CREATED
        - SUCCESS
        - ERROR
        - ABORT
        - CANCELLED
        - WAITING_FOR_USER
        - PENDING
        - COMPLETE
        - FAILED
      type: string
    AccountHolder:
      type: object
      properties:
        name:
          type: string
          nullable: true
    BalanceDetails:
      type: object
      properties:
        calendarMonthEndBalance:
          type: number
          format: double
          nullable: true
        calendarMonthStartBalance:
          type: number
          format: double
          nullable: true
        netCashFlow:
          type: number
          format: double
          nullable: true
        statementEndBalance:
          type: number
          format: double
          nullable: true
        statementStartBalance:
          type: number
          format: double
          nullable: true
    CashDetails:
      type: object
      properties:
        averageCountOfCashDepositAMonth:
          type: number
          format: double
          nullable: true
        averageCountOfCashWithdrawalAMonth:
          type: number
          format: double
          nullable: true
        averageSumOfCashDepositAMonth:
          type: number
          format: double
          nullable: true
        averageSumOfCashWithdrawalAMonth:
          type: number
          format: double
          nullable: true
        cashDepositMonthlyTrend:
          type: number
          format: double
          nullable: true
        cashDepositToIncome:
          type: number
          format: double
          nullable: true
        cashWithdrawalMonthlyTrend:
          type: number
          format: double
          nullable: true
        cashWithdrawalToExpenses:
          type: number
          format: double
          nullable: true
        cashWithdrawalToIncome:
          type: number
          format: double
          nullable: true
        stableMonthlyCashDeposits:
          type: boolean
          nullable: true
    Categorisation:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/InsightsAccount'
          nullable: true
        categoryTreeVersion:
          type: string
          nullable: true
    CategoryId:
      type: object
      properties:
        expense:
          type: string
          nullable: true
        income:
          type: string
          nullable: true
    Country:
      enum:
        - dk
        - fi
        - 'no'
        - se
      type: string
    CreateInsightsRequest:
      required:
        - country
      type: object
      properties:
        country:
          $ref: '#/components/schemas/Country'
        dropSharedAccounts:
          type: boolean
          nullable: true
        dropJointAccounts:
          type: boolean
          nullable: true
        period:
          type: integer
          format: int32
          nullable: true
        currency:
          type: string
          nullable: true
    Currency:
      type: object
      properties:
        code:
          type: string
          nullable: true
        creditTurnover:
          type: number
          format: double
          nullable: true
        debitTurnover:
          type: number
          format: double
          nullable: true
        endBalance:
          type: number
          format: double
          nullable: true
        startBalance:
          type: number
          format: double
          nullable: true
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/InsightsTransaction'
          nullable: true
    Definition:
      type: object
      properties:
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionDetails'
          nullable: true
        income:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionDetails'
          nullable: true
    DefinitionDetails:
      type: object
      properties:
        title:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
    GamblingDetails:
      type: object
      properties:
        averageCountAMonth:
          type: number
          format: double
          nullable: true
        averageSumAMonth:
          type: number
          format: double
          nullable: true
        daysSinceLastTransaction:
          type: integer
          format: int32
          nullable: true
        gamblingToAllExpenses:
          type: number
          format: double
          nullable: true
        monthlyRegularityOfGambling:
          type: number
          format: double
          nullable: true
        ratioOfCasino:
          type: number
          format: double
          nullable: true
        ratioOfLottery:
          type: number
          format: double
          nullable: true
        ratioOfSportsBetting:
          type: number
          format: double
          nullable: true
    Income:
      type: object
      properties:
        averageDaysBetweenIncomePayments:
          type: integer
          format: int32
          nullable: true
        averageMonthlyDiscretionaryIncome:
          type: number
          format: double
          nullable: true
        averageMonthlyIncome:
          type: number
          format: double
          nullable: true
        calendarMonths:
          type: integer
          format: int32
          nullable: true
        calendarMonthsWithIncome:
          type: integer
          format: int32
          nullable: true
        daysSinceLastIncomePayment:
          type: integer
          format: int32
          nullable: true
        debtToIncomeRatio:
          type: number
          format: double
          nullable: true
        definitions:
          $ref: '#/components/schemas/Definition'
        incomeByCategory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IncomeDetails'
          nullable: true
        lastIncompleteMonth:
          $ref: '#/components/schemas/MonthlyIncome'
        monthlyRegularity:
          type: number
          format: double
          nullable: true
        monthlyStability:
          type: number
          format: double
          nullable: true
        monthlyTrend:
          type: number
          format: double
          nullable: true
    IncomeDetails:
      type: object
      properties:
        averageIncomePayment:
          type: number
          format: double
          nullable: true
        averageMonthlyIncome:
          type: number
          format: double
          nullable: true
        daysSinceLastIncomePayment:
          type: integer
          format: int32
          nullable: true
        medianIncomePayment:
          type: number
          format: double
          nullable: true
        numberOfIncomePayments:
          type: integer
          format: int32
          nullable: true
    InsightsAccount:
      type: object
      properties:
        accountNumber:
          type: string
          nullable: true
        bank:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
          nullable: true
        holders:
          type: array
          items:
            $ref: '#/components/schemas/AccountHolder'
          nullable: true
        iban:
          type: string
          nullable: true
        isJointOwnership:
          type: boolean
          nullable: true
        isSharedOwnership:
          type: boolean
          nullable: true
        periodEnd:
          type: string
          nullable: true
        periodStart:
          type: string
          nullable: true
    InsightsCurrency:
      type: object
      properties:
        displayCurrency:
          type: string
          nullable: true
        appliedCurrencyConversions:
          type: array
          items:
            $ref: '#/components/schemas/InsightsCurrencyDetails'
          nullable: true
    InsightsCurrencyDetails:
      type: object
      properties:
        currency:
          type: string
          nullable: true
        rate:
          type: number
          format: double
          nullable: true
    InsightsDetails:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/InsightsCurrency'
    InsightsRequestStatus:
      required:
        - id
        - requestStatus
      type: object
      properties:
        id:
          type: string
          format: uuid
        requestStatus:
          $ref: '#/components/schemas/RequestStatus'
    InsightsResponse:
      required:
        - id
        - requestStatus
      type: object
      properties:
        id:
          type: string
          format: uuid
        requestStatus:
          $ref: '#/components/schemas/RequestStatus'
        rejectReason:
          type: string
          nullable: true
        report:
          $ref: '#/components/schemas/InsightsResponseDetails'
    InsightsResponseDetails:
      type: object
      properties:
        categorisation:
          $ref: '#/components/schemas/Categorisation'
        creditScores:
          type: object
          additionalProperties:
            type: number
            format: double
          nullable: true
        features:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: number
              format: double
          nullable: true
        insightsDetails:
          $ref: '#/components/schemas/InsightsDetails'
        insightsIncome:
          $ref: '#/components/schemas/Income'
        insightsLoans:
          $ref: '#/components/schemas/Loan'
        insightsRisk:
          $ref: '#/components/schemas/Risk'
        kyc:
          type: array
          items:
            $ref: '#/components/schemas/KycDetails'
          nullable: true
        observations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Observation'
          nullable: true
        marketing:
          $ref: '#/components/schemas/Marketing'
        simpleScore:
          type: integer
          format: int32
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
    InsightsTransaction:
      type: object
      properties:
        info:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        amount:
          type: number
          format: double
          nullable: true
        categoryId:
          type: integer
          format: int32
        date:
          type: string
          nullable: true
        transactionId:
          type: string
          nullable: true
        partner:
          type: string
          nullable: true
    KycDetails:
      type: object
      properties:
        address:
          type: string
          nullable: true
        bank:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
        emailAddress:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        fullName:
          type: string
          nullable: true
        iban:
          type: string
          nullable: true
        personIdentification:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
          nullable: true
        phoneNumber:
          type: string
          nullable: true
    Loan:
      type: object
      properties:
        averageMonthlyOutgoingLoanPayment:
          type: number
          format: double
          nullable: true
        calendarMonths:
          type: integer
          format: int32
          nullable: true
        calendarMonthsWithIncomingLoans:
          type: integer
          format: int32
          nullable: true
        calendarMonthsWithOutgoingLoans:
          type: integer
          format: int32
          nullable: true
        daysSinceLastIncomingLoan:
          type: integer
          format: int32
          nullable: true
        loansByCategory:
          type: array
          items:
            $ref: '#/components/schemas/LoanDetails'
          nullable: true
        monthlyIncomingLoanTrend:
          type: number
          format: double
          nullable: true
        monthlyOutgoingLoanTrend:
          type: number
          format: double
          nullable: true
        ratioOfIncomingLoansToAllIncome:
          type: number
          format: double
          nullable: true
        ratioOfOutgoingLoansToAllExpenses:
          type: number
          format: double
          nullable: true
    LoanDetails:
      type: object
      properties:
        averageMonthlyOutgoingLoanPayment:
          type: number
          format: double
          nullable: true
        categoryId:
          $ref: '#/components/schemas/CategoryId'
        categoryTitle:
          type: string
          nullable: true
        daysSinceLastIncomingLoan:
          type: integer
          format: int32
          nullable: true
        monthlyIncomingLoanTrend:
          type: number
          format: double
          nullable: true
        monthlyOutgoingLoanTrend:
          type: number
          format: double
          nullable: true
        numberOfIncomingLoanSources:
          type: integer
          format: int32
          nullable: true
        numberOfOutgoingLoanSources:
          type: integer
          format: int32
          nullable: true
        ratioOfOutgoingLoanCategoryToLoans:
          type: number
          format: double
          nullable: true
    Marketing:
      type: object
      properties:
        segments:
          $ref: '#/components/schemas/Segments'
    Metadata:
      type: object
      properties:
        statementDetails:
          $ref: '#/components/schemas/StatementDetails'
        insightsDetails:
          $ref: '#/components/schemas/InsightsDetails'
    MonthlyIncome:
      type: object
      properties:
        expectedRemainingIncome:
          type: number
          format: double
          nullable: true
        month:
          type: string
          nullable: true
        receivedIncome:
          type: number
          format: double
          nullable: true
        remainingMonthlyDiscretionaryIncome:
          type: number
          format: double
          nullable: true
    Observation:
      type: object
      properties:
        description:
          type: string
          nullable: true
        severity:
          type: string
          nullable: true
    PaymentDetails:
      type: object
      properties:
        averageCountAMonth:
          type: number
          format: double
          nullable: true
        averageSumAMonth:
          type: number
          format: double
          nullable: true
    PersonIdentification:
      type: object
      properties:
        _type:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
    RequestStatus:
      enum:
        - PENDING
        - PROCESSING
        - PROCESSED
        - REJECTED
      type: string
    Risk:
      type: object
      properties:
        alimonyPayments:
          $ref: '#/components/schemas/PaymentDetails'
        bailiffs:
          $ref: '#/components/schemas/PaymentDetails'
        balance:
          $ref: '#/components/schemas/BalanceDetails'
        cash:
          $ref: '#/components/schemas/CashDetails'
        debtCollection:
          $ref: '#/components/schemas/PaymentDetails'
        dishonours:
          $ref: '#/components/schemas/PaymentDetails'
        gambling:
          $ref: '#/components/schemas/GamblingDetails'
        loanFines:
          $ref: '#/components/schemas/PaymentDetails'
    Segment:
      type: object
      properties:
        triggered:
          type: boolean
          nullable: true
        details:
          type: string
          nullable: true
    Segments:
      type: object
      properties:
        hasChildren:
          $ref: '#/components/schemas/Segment'
        hasCar:
          $ref: '#/components/schemas/Segment'
        hasHouse:
          $ref: '#/components/schemas/Segment'
        hasPets:
          $ref: '#/components/schemas/Segment'
        hasLifeInsurance:
          $ref: '#/components/schemas/Segment'
        isDigital:
          $ref: '#/components/schemas/Segment'
        interestedInClothing:
          $ref: '#/components/schemas/Segment'
        interestedInSports:
          $ref: '#/components/schemas/Segment'
        interestedInTraveling:
          $ref: '#/components/schemas/Segment'
        interestedInBeauty:
          $ref: '#/components/schemas/Segment'
        interestedInCulture:
          $ref: '#/components/schemas/Segment'
        interestedInGambling:
          $ref: '#/components/schemas/Segment'
    StatementDetails:
      type: object
      properties:
        countOfAnalysedAccounts:
          type: integer
          format: int32
          nullable: true
        countOfUploadedAccounts:
          type: integer
          format: int32
          nullable: true
        dropJointAccounts:
          type: boolean
          nullable: true
        dropSharedAccounts:
          type: boolean
          nullable: true
    Address:
      description: Person/company address information.
      type: object
      properties:
        city:
          description: City/district, state.
          type: string
          nullable: true
        street:
          description: >-
            Street of the building/residence.

            Any diacritic or accended character will be replaced by its own
            equivalent.
          type: string
          nullable: true
        country:
          description: Country.
          type: string
          nullable: true
    ApplicationType:
      description: Type of application used in decoupled authorization.
      enum:
        - BANK_ID
        - NORDEA_ID
        - BANKNORWEGIAN_APP
      type: string
    ChargeBearerType:
      description: >-
        Which party/parties will bear the charges associated with the processing
        of the payment transaction.
      enum:
        - SHAR
        - DEBT
      type: string
    CreatePaymentRefundRequest:
      description: Payment Refund Request.
      type: object
      properties:
        description:
          description: Description.
          type: string
          nullable: true
        amount:
          $ref: '#/components/schemas/PaymentAmount'
    CreatePaymentRequest:
      description: >-
        Payment request data required for successfully storing a
        `PaymentRequest`.
      required:
        - amount
        - creditor
        - paymentProductId
        - region
        - remittanceInformation
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        executionDate:
          description: >-
            Execution date in Unix epoch time format (milliseconds). If the date
            is not a valid bank date for the payment product, then the payment
            will be rejected.
          type: integer
          format: int64
          nullable: true
        externalReference:
          description: Payment request identifier in the source system.
          type: string
          nullable: true
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          description: >-
            Region code is defined by <a
            href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"
            target="_blank">ISO 3166</a> standards (e.g. SE, NO, FI, DK).
          type: string
        paymentProductId:
          description: >-
            Payment product identifier linked to the payment request. <br />
            Possible values:

            * se-domestic-credit-transfer,

            * se-international-credit-transfer,

            * se-sepa-credit-transfer,

            * fi-international-credit-transfer,

            * fi-sepa-credit-transfer,

            * dk-domestic-credit-transfer,

            * dk-international-credit-transfer,

            * dk-sepa-credit-transfer,

            * no-domestic-credit-transfer,

            * no-international-credit-transfer,

            * no-sepa-credit-transfer,

            * sepa-credit-transfer.
          type: string
        paymentTemplateId:
          description: >-
            References the PaymentTemplate which has created this PaymentRequest
            (optional).
          type: string
          nullable: true
        settlementCreditors:
          description: >-
            Final creditor to which funds will be transfered through settlement
            account.
          type: array
          items:
            $ref: '#/components/schemas/SettlementCreditor'
          nullable: true
    CreatePaymentTemplate:
      required:
        - creditor
        - name
        - paymentProductId
        - region
      type: object
      properties:
        description:
          description: Description of the template.
          type: string
          nullable: true
        name:
          description: Name of the tepmlate.
          type: string
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        amount:
          $ref: '#/components/schemas/PaymentTemplateAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          description: Region code (e.g. SE, NO, FI, DK).
          type: string
        paymentProductId:
          description: Payment product identifier linked to the payment request.
          type: string
    CreatePayout:
      type: object
      properties:
        description:
          description: Description of the payout.
          type: string
          nullable: true
        paymentId:
          description: ID of the payment for which payout will be created.
          type: string
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        creditor:
          $ref: '#/components/schemas/PayoutCreditor'
        externalReference:
          description: External reference.
          type: string
          nullable: true
        delayExecution:
          description: Delay execution.
          type: boolean
    Frequency:
      description: Valid periodicities for recurring payments.
      enum:
        - MONTHLY
      type: string
    PagedPaymentRequestModels:
      description: Payment request with count number.
      type: object
      properties:
        items:
          description: List of the payment requests.
          type: array
          items:
            description: Payment request returned as respone on create action.
            oneOf:
              - $ref: '#/components/schemas/CreatePaymentRequest'
              - $ref: '#/components/schemas/CreatePaymentRequest'
          nullable: true
        totalItemsCount:
          description: Total number of payment requests.
          type: integer
          format: int64
    PaymentAccount:
      description: Account number and type./>.
      required:
        - accountNumber
        - accountType
      type: object
      properties:
        accountNumber:
          description: |-
            Account number.
            For international payments account number must be an IBAN.
          type: string
        accountType:
          $ref: '#/components/schemas/PaymentAccountType'
        bic:
          description: Mandatory for international payments.
          type: string
          nullable: true
        currencyCode:
          description: The ISO 4217 currency code of the account.
          type: string
          nullable: true
    PaymentAccountType:
      description: Account types.
      enum:
        - IBAN
        - BBAN
        - BG
        - PG
        - SettlementAccountId
      type: string
    PaymentAmount:
      description: Amount, i.e. value and currency.
      required:
        - currency
        - value
      type: object
      properties:
        currency:
          description: >-
            Currency that is subject to transaction. This must be a valid ISO
            4217 currency code.
          type: string
        value:
          description: The amount of the payment transaction.
          pattern: ^\$?\d+(\.(\d{0,2}))?$
          type: number
          format: double
    PaymentCreditor:
      description: Describes the creditor party for the payment.
      required:
        - account
        - name
      type: object
      properties:
        account:
          $ref: '#/components/schemas/PaymentAccount'
        address:
          $ref: '#/components/schemas/Address'
        message:
          description: >-
            Message for the creditor to appear on their transaction. Max length
            12 characters.
          type: string
          nullable: true
        name:
          description: >-
            Name of the creditor.

            The value cannot contains one of the special characters:
            .,:\\-+\"'/\\€$£₤().
          type: string
    PaymentDebtor:
      description: Describes the debtor party for the payment.
      required:
        - account
      type: object
      properties:
        account:
          $ref: '#/components/schemas/PaymentAccount'
        email:
          description: Email address of the debtor.
          type: string
          nullable: true
        message:
          description: >-
            Message for the debtor to appear on their transaction. Max length 12
            characters.
          type: string
          nullable: true
        name:
          description: Name of the debtor.
          type: string
          nullable: true
        phoneNumber:
          description: Phone number of the debtor.
          type: string
          nullable: true
    PaymentRemittanceInformation:
      description: >-
        Used to link a payment and a reason for the payment (e.g. link a payment
        with an invoice).
      required:
        - type
        - value
      type: object
      properties:
        value:
          description: The remittance reference number for the payment.
          type: string
        type:
          $ref: '#/components/schemas/PaymentRemittanceInformationType'
    PaymentRemittanceInformationType:
      description: The remittance information type for the payments.
      enum:
        - UNSTRUCTURED
        - OCR
      type: string
    PaymentRequestInit:
      description: >-
        Since payment templates do not have Debtor and/or other information
        pertinent to a `PaymentRequest`, this class

        provides fields required when initiating a `PaymentRequest` creation
        from a template i.e. `/payments/templates/{id}/initiate`.
      required:
        - debtor
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        executionDate:
          description: >-
            Execution date in Unix epoch time format (milliseconds). If the date
            is not a valid bank date for the payment product, then the payment
            will be rejected.
          type: integer
          format: int64
          nullable: true
    PaymentStatusType:
      description: Available payment statuses.
      enum:
        - CREATED
        - RECEIVED
        - CANCELED
        - FAILED
        - REJECTED
        - RECIPIENT_AUTHORIZATION_REQUIRED
        - EXTENDED_BANKID_REQUIRED
        - AUTHORIZATION_REQUIRED
        - IN_PROGRESS_CODE
        - IN_PROGRESS
        - RECIPIENT_AUTHORIZED
        - TIME_OUT
        - PARTIALLY_AUTHORIZED
        - AUTHORIZED_PENDING_VALIDATION
        - AUTHORIZED_PENDING_CHECK
        - AUTHORIZED_PENDING_SETTLEMENT
        - AUTHORIZED
        - COMPLETED
        - DELETED
      type: string
    PaymentTemplate:
      required:
        - creditor
        - id
        - name
        - paymentProductId
        - region
      type: object
      properties:
        description:
          description: Description of the template.
          type: string
          nullable: true
        id:
          description: Template identifier in Finshark's database.
          type: string
        name:
          description: Name of the tepmlate.
          type: string
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        amount:
          $ref: '#/components/schemas/PaymentTemplateAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          description: Region code (e.g. SE, NO, FI, DK).
          type: string
        paymentProductId:
          description: Payment product identifier linked to the payment request.
          type: string
    PaymentTemplateAmount:
      description: Amount, i.e. value and currency.
      required:
        - currency
        - value
      type: object
      properties:
        currency:
          description: >-
            Currency that is subject to transaction. This must be a valid ISO
            4217 currency code.
          type: string
        value:
          description: The amount of the payment transaction.
          type: number
          format: double
        isAmountEditable:
          description: Whether the Currnecy and Amount fields are fixed.
          type: boolean
    Payout:
      required:
        - amount
        - currency
        - id
        - status
      type: object
      properties:
        description:
          description: Description of the payout.
          type: string
          nullable: true
        id:
          description: Payout identifier.
          type: string
          format: uuid
        organizationId:
          description: Organization identifier.
          type: integer
          format: int32
        createdAt:
          description: >-
            Date when payout was created in Unix epoch time format
            (milliseconds).
          type: integer
          format: int64
          nullable: true
        date:
          description: Date when payout was created.
          type: string
          format: date-time
        amount:
          description: Amount of the payout.
          type: string
        currency:
          description: Currency of the payout.
          type: string
        message:
          description: Payout message.
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PayoutStatus'
        creditor:
          $ref: '#/components/schemas/PayoutCreditor'
        paymentId:
          description: Identifier of the payment for which payout is created.
          type: string
          nullable: true
        externalReference:
          description: External reference.
          type: string
          nullable: true
        comment:
          description: Comment of the payout.
          type: string
          nullable: true
        clientId:
          description: Client identifier.
          type: string
          nullable: true
        clientAccess:
          description: Client access.
          type: string
          nullable: true
        debtor:
          $ref: '#/components/schemas/PayoutDebtor'
    PayoutAccount:
      required:
        - iban
      type: object
      properties:
        iban:
          type: string
        accountNumber:
          type: string
          nullable: true
        accountType:
          type: string
          nullable: true
    PayoutCreditor:
      description: Payout creditor details.
      type: object
      properties:
        iban:
          description: IBAN number of the creditor.
          type: string
          nullable: true
        bban:
          description: BBAN number of the creditor.
          type: string
          nullable: true
        name:
          description: Name of the creditor.
          type: string
          nullable: true
        personalNumber:
          description: Personal number of the creditor.
          type: string
          nullable: true
        email:
          description: Email of the creditor.
          type: string
          nullable: true
    PayoutDebtor:
      required:
        - account
      type: object
      properties:
        name:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/PayoutAccount'
    PayoutStatus:
      description: |-
        Status of the payout. <br /> Possible values:
        * CREATED
        * PROCESSED
        * CANCELED
        * FAILED.
      enum:
        - CREATED
        - PROCESSED
        - CANCELED
        - FAILED
      type: string
    ProviderId:
      description: List of provider identifiers.
      enum:
        - se-danskebank
        - se-danskebank-sand
        - se-handelsbanken
        - se-handelsbanken-sand
        - se-icabanken
        - se-icabanken-sand
        - se-lansforsakringar
        - se-lansforsakringar-sand
        - se-nordea
        - se-nordea-sand
        - se-seb
        - se-seb-sand
        - se-swedbank
        - se-swedbank-sand
        - se-skandia
        - se-skandia-sand
        - se-norwegian
        - se-norwegian-sand
        - se-sparbankensyd-sand
        - se-sparbankensyd
        - se-brabanksverige
        - se-ekobankenmedlemsbank
        - se-facitbankse
        - se-jakmedlemsbank
        - se-lansparbankse
        - se-skandiabanken
        - se-revolut
        - se-revolut-sand
        - se-alandsbanken
        - se-alandsbanken-sand
        - se-morrowbank
        - se-morrowbank-sand
        - fi-op
        - fi-op-sand
        - fi-spankki
        - fi-spankki-sand
        - fi-nordea
        - fi-nordea-sand
        - fi-danskebank
        - fi-danskebank-sand
        - fi-handelsbanken
        - fi-handelsbanken-sand
        - fi-norwegian
        - fi-norwegian-sand
        - fi-revolut
        - fi-revolut-sand
        - fi-alandsbanken
        - fi-alandsbanken-sand
        - fi-morrowbank
        - fi-morrowbank-sand
        - fi-poppankki
        - fi-poppankki-sand
        - fi-saastopankki
        - fi-saastopankki-sand
        - fi-omasaastopankki
        - fi-omasaastopankki-sand
        - no-dnb
        - no-dnb-sand
        - no-norwegian
        - no-norwegian-sand
        - no-sparebankennarvik
        - no-sparebankennarvik-sand
        - no-aasensparebank
        - no-afjordsparebank
        - no-andebusparebank
        - no-arendalomegnssparekasse
        - no-askimspydebergsparebank
        - no-aurskogsparebank
        - no-aurlandsparebank
        - no-romsdalsparebank
        - no-eikakredittbankas
        - no-biensparebank
        - no-birkenessparebank
        - no-bjugnsparebank
        - no-blakersparebank
        - no-skagerraksparebank
        - no-bergsparebank
        - no-sparebankendin
        - no-bank2
        - no-cultura
        - no-personellservicetrondelag
        - no-drangedalsparebank
        - no-eidsbergsparebank
        - no-etnedalsparebank
        - no-evjehornnessparebank
        - no-facitbankno
        - no-forsvaretspersonellservice
        - no-gildeskalsparebank
        - no-ostreagdersparebank
        - no-grongspareban
        - no-gruesparebank
        - no-haltdalensparebank
        - no-sparebank68Nord
        - no-hemnesparebank
        - no-hegrasparebank
        - no-hjartdalgransheradsparebank
        - no-hjelmelandsparebank
        - no-holandsetskogsparebank
        - no-honefosssparebank
        - no-indresognsparebank
        - no-neringsbankenasa
        - no-jernbanepersonelletssparebank
        - no-nidarossparebank
        - no-jerensparebank
        - no-kvinesdalsparebank
        - no-larvikbanken
        - no-lillestromsparebank
        - no-markersparebank
        - no-melhussparebank
        - no-maritimemerchantbank
        - no-mybankasa
        - no-skuesparebank
        - no-nordiccorporatebankasa
        - no-odalsparebank
        - no-ofotensparebank
        - no-orklasparebank
        - no-oppdalsbanken
        - no-orskogsparebank
        - no-orlandsparebank
        - no-boligbankenasa
        - no-brabank
        - no-rindalsparebank
        - no-rorosbanken
        - no-sandnessparebank
        - no-selbusparebank
        - no-soknedalsparebank
        - no-stadsbygdsparebank
        - no-storebrand
        - no-strommensparebank
        - no-surnadalsparebank
        - no-sunndalsparebank
        - no-fornebubanken
        - no-tinnsparebank
        - no-tolgaossparebank
        - no-totenssparebank
        - no-trogstadsparebank
        - no-tysnessparebank
        - no-easybank
        - no-valdressparebank
        - no-viksparebank
        - no-vallesparebank
        - no-vossveksellandmandsbank
        - no-handelsbanken
        - no-handelsbanken-sand
        - no-sbanken
        - no-sbanken-sand
        - no-swedbank
        - no-swedbank-sand
        - no-revolut
        - no-revolut-sand
        - no-morrowbank
        - no-morrowbank-sand
        - no-nordea
        - no-nordea-sand
        - no-sparebankenvest
        - no-sparebankenvest-sand
        - dk-nordea
        - dk-nordea-sand
        - dk-sparekassendanmark-sand
        - dk-sparekassendanmark
        - dk-lansparbank-sand
        - dk-lansparbank
        - dk-sparekassenkronjylland-sand
        - dk-sparekassenkronjylland
        - dk-folkesparekassen-sand
        - dk-folkesparekassen
        - dk-ikanobank-sand
        - dk-ikanobank
        - dk-basisbank-sand
        - dk-basisbank
        - dk-norwegian
        - dk-norwegian-sand
        - dk-danskebank
        - dk-danskebank-sand
        - dk-swedbank-sand
        - dk-swedbank
        - dk-sparnordbank-sand
        - dk-sparnordbank
        - dk-arbejderneslandsbank-sand
        - dk-arbejderneslandsbank
        - dk-nykreditbank-sand
        - dk-nykreditbank
        - dk-vestjyskbank-sand
        - dk-vestjyskbank
        - dk-coopbank-sand
        - dk-coopbank
        - dk-monsbank-sand
        - dk-monsbank
        - dk-andelskassenfelleskassen-sand
        - dk-andelskassenfelleskassen
        - dk-jyskebank
        - dk-jyskebank-sand
        - dk-ringkjobinglandbobank
        - dk-ringkjobinglandbobank-sand
        - dk-kreditbanken
        - dk-kreditbanken-sand
        - dk-revolut
        - dk-revolut-sand
        - nl-abnamro-sand
        - nl-abnamro
        - nl-ing
        - nl-ing-sand
        - nl-sns-sand
        - nl-sns
        - nl-asn-sand
        - nl-asn
        - nl-regiobank-sand
        - nl-regiobank
        - nl-rabobank
        - nl-rabobank-sand
        - nl-revolut
        - nl-revolut-sand
        - nl-handelsbanken
        - nl-handelsbanken-sand
        - nl-triodos
        - nl-triodos-sand
        - nl-knab
        - nl-knab-sand
        - be-bnpparibasfortis
        - be-bnpparibasfortis-sand
        - be-belfius
        - be-belfius-sand
        - be-kbc
        - be-kbc-sand
      type: string
    RecurringPaymentCreateRequest:
      description: Request body when creating a new recurring payment.
      required:
        - amount
        - creditor
        - frequency
        - paymentProductId
        - region
        - startDate
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        frequency:
          $ref: '#/components/schemas/Frequency'
        paymentProductId:
          description: Payment product identifier linked to the recurring payment.
          type: string
        region:
          description: Region code (e.g. SE, NO, FI, DK).
          type: string
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        startDate:
          description: >-
            Represents the first date of recurring payment in Unix epoch time
            format (milliseconds).
          type: integer
          format: int64
    RecurringPaymentResponse:
      description: Recurring payment response model.
      required:
        - amount
        - creditor
        - frequency
        - id
        - paymentProductId
        - startDate
        - status
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        frequency:
          $ref: '#/components/schemas/Frequency'
        id:
          description: Recurring payment identifier.
          type: string
        paymentProductId:
          description: >-
            Information about provider's paymentProductId for which recurring
            payment is intiated.
          type: string
        psuMessage:
          description: >-
            Message for the PSU, included if an action needs to be taken by the
            user during a pending signing.
          type: string
          nullable: true
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        scaMethods:
          description: List of available SCA methods.
          type: array
          items:
            $ref: '#/components/schemas/ScaMethod'
          nullable: true
        startDate:
          description: >-
            First date of recurring payment in Unix epoch time format
            (milliseconds).
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/PaymentStatusType'
        tppMessages:
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          type: array
          items:
            type: string
          nullable: true
    ScaMethod:
      description: Strong customer authentication method.
      required:
        - scaMethodType
      type: object
      properties:
        href:
          description: Redirect link for redirect or decoupled SCA methods.
          type: string
          nullable: true
        downloadLink:
          description: |-
            Download link used to get image that contains dynamic QR code.
            Supported formats:

                PNG.
          type: string
          nullable: true
        downloadInterval:
          description: >-
            Download interval represents the period of changing the content of
            the downloadLink.
          type: integer
          format: int32
          nullable: true
        scaMethodType:
          $ref: '#/components/schemas/ScaMethodType'
        application:
          $ref: '#/components/schemas/ApplicationType'
    ScaMethodType:
      description: Strong customer authentication methods.
      enum:
        - PSU_DECOUPLED
        - PSU_REDIRECT
      type: string
    SettlementCreditor:
      description: Settlement Creditor information.
      required:
        - accountNumber
        - accountType
        - amount
      type: object
      properties:
        accountNumber:
          description: Creditor's account number.
          type: string
        accountType:
          $ref: '#/components/schemas/PaymentAccountType'
        bic:
          description: Bank Identifier Code is mandatory when specified BBAN.
          type: string
          nullable: true
        amount:
          description: Amount which will be transferred to the creditor.
          pattern: ^\$?\d+(\.(\d{0,2}))?$
          type: number
          format: double
        currencyCode:
          description: The ISO 4217 currency code of the account.
          type: string
          nullable: true
        name:
          description: Creditor's name.
          type: string
          nullable: true
    SigningBasketCreateRequest:
      description: Signing Basket body request when creating a new basket.
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        paymentIds:
          description: >-
            Array of paymentIds to include in the basket. If any of the payments
            are not signable the creation will be rejected.
          type: array
          items:
            type: string
          nullable: true
        payments:
          description: >-
            Array of payments reaquests payloads to include in the basket. If
            any of the payments payloads are not signable the creation will be
            rejected.
          type: array
          items:
            description: >-
              Payment request data required for successfully storing a
              `PaymentRequest`.
            oneOf:
              - $ref: '#/components/schemas/CreatePaymentRequest'
              - $ref: '#/components/schemas/CreatePaymentRequest'
              - $ref: '#/components/schemas/CreatePaymentRequest'
          nullable: true
    SigningBasketResponse:
      description: Signing basket response model.
      required:
        - amount
        - currency
        - id
        - paymentIds
        - paymentProductId
        - status
      type: object
      properties:
        amount:
          description: Total amount of the basket.
          type: number
          format: double
        currency:
          description: >-
            Currency of the basket amount. This must be a valid ISO 4217
            currency code.
          type: string
        id:
          description: GUID, resource ID of the signing basket.
          type: string
        paymentIds:
          description: >-
            Array of signing basket payment ids included in the signing basket
            returned only when signing basket has been created using list of
            payment Ids.
          type: array
          items:
            type: string
        payments:
          description: >-
            Array of signing basket payments included in the signing basket
            returned only when signing basket has been created using list of
            payment bodies.
          type: array
          items:
            description: Payment request returned as respone on create action.
            oneOf:
              - $ref: '#/components/schemas/CreatePaymentRequest'
              - $ref: '#/components/schemas/CreatePaymentRequest'
          nullable: true
        paymentProductId:
          description: Payment product identifier linked to the signing basket.
          type: string
        psuMessage:
          description: >-
            Message for the PSU, included if an action needs to be taken by the
            user during a pending signing.
          type: string
          nullable: true
        scaMethods:
          description: List of available SCA methods.
          type: array
          items:
            $ref: '#/components/schemas/ScaMethod'
          nullable: true
        status:
          $ref: '#/components/schemas/SigningBasketStatus'
        tppMessages:
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          type: array
          items:
            type: string
          nullable: true
        debtorAccountNumber:
          description: >-
            Account number of a debtor, set when creating payment request for
            signing basket.
          type: string
          nullable: true
    SigningBasketStatus:
      description: Available signing basket statuses.
      enum:
        - CREATED
        - RECEIVED
        - CANCELED
        - FAILED
        - REJECTED
        - RECIPIENT_AUTHORIZATION_REQUIRED
        - AUTHORIZATION_REQUIRED
        - IN_PROGRESS_CODE
        - IN_PROGRESS
        - RECIPIENT_AUTHORIZED
        - PARTIALLY_AUTHORIZED
        - AUTHORIZED
        - COMPLETED
        - DELETED
      type: string
    UpdatePaymentTemplate:
      type: object
      properties:
        description:
          description: Description of the template.
          type: string
          nullable: true
        name:
          description: Name of the tepmlate.
          type: string
          nullable: true
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        amount:
          $ref: '#/components/schemas/PaymentTemplateAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          description: Region code (e.g. SE, NO, FI, DK).
          type: string
          nullable: true
        paymentProductId:
          description: Payment product identifier linked to the payment request.
          type: string
          nullable: true
    AuthorizationValidationRequest:
      description: >-
        Use validation request when wants to check if selected properties have
        been used during consent authorization process.
      type: object
      properties:
        psuId:
          description: >-
            Set when wants to validate if selected PSU identifier has been used
            during consent authorization process.
          type: string
          nullable: true
        organizationId:
          description: >-
            Set when wants to validate if selected organization identifier has
            been used during consent authorization process.
          type: string
          nullable: true
    AuthorizattionValidationResponse:
      description: >-
        The authorization validation response contains the validation results of
        each selected property.
      type: object
      properties:
        psuId:
          $ref: '#/components/schemas/ValidationType'
        organizationId:
          $ref: '#/components/schemas/ValidationType'
    ConsentAuthorizationInfo:
      description: Consent authorization details.
      required:
        - authorizationId
        - status
      type: object
      properties:
        authorizationId:
          description: Consent authorization identifier.
          type: string
          format: uuid
        expiryTime:
          description: >-
            Expiration UTC date and time of the consent in Unix timestamp
            (milliseconds).
          type: integer
          format: int64
          nullable: true
        ExpiryIn:
          description: Consent expires in seconds.
          type: integer
          format: int64
          nullable: true
        status:
          $ref: '#/components/schemas/ConsentStatusType'
    ConsentStatusType:
      description: Consent statuses.
      enum:
        - AUTHORIZED
        - CANCELED
        - EXPIRED
        - FAILED
        - IN_PROGRESS
        - REJECTED
      type: string
    ProblemDetails:
      type: object
      properties:
        title:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    ValidationType:
      description: PSU identifier validation type that can be found in response.
      enum:
        - VALID
        - INVALID
        - UNKNOWN
      type: string
    CreateWebhookRequest:
      description: Webhook request body.
      required:
        - event
        - url
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventType'
        url:
          description: >-
            Gets or sets webhook url parameter. Supports only HTTPS. Maximal
            length is 256.
          minLength: 1
          type: string
    ErrorResponse:
      type: object
      properties:
        description:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
    UpdateWebhookRequest:
      description: Webhook request body.
      required:
        - event
        - url
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventType'
        url:
          description: >-
            Gets or sets webhook url parameter. Supports only HTTPS. Maximal
            length is 256.
          minLength: 1
          type: string
    WebhookEventType:
      description: Webhook event type.
      enum:
        - paymentStatusChanged
        - verifiedAccount
        - payoutStatusChanged
      type: string
    WebhookResponse:
      description: Webhook response body.
      required:
        - clientId
        - event
        - id
        - url
      type: object
      properties:
        id:
          description: Gets or sets webhook identifier.
          type: string
          format: uuid
        clientId:
          description: Gets or sets client identifier.
          minLength: 1
          type: string
        event:
          $ref: '#/components/schemas/WebhookEventType'
        url:
          description: Gets or sets webhook url.
          minLength: 1
          type: string
    PaymentRequestsCreateRequestRequest:
      description: >-
        Payment request data required for successfully storing a
        `PaymentRequest`.
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentRequest'
        - $ref: '#/components/schemas/CreatePaymentRequest'
        - $ref: '#/components/schemas/CreatePaymentRequest'
    PaymentRequestsGetAllResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentRequestsCreateRequestResponse:
      description: Payment request returned as respone on create action.
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentRequest'
        - $ref: '#/components/schemas/CreatePaymentRequest'
    PaymentRequestsCreateRequest400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentRequestsDeleteRequestResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentRequestsGetDetailsByIdResponse:
      description: Payment request returned as respone on create action.
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentRequest'
        - $ref: '#/components/schemas/CreatePaymentRequest'
    PaymentRequestsGetDetailsById400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentRequestsCreateRefundRequestResponse:
      description: Payment request returned as respone on create action.
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentRequest'
        - $ref: '#/components/schemas/CreatePaymentRequest'
    PaymentRequestsCreateRefundRequest400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesGetAllTemplatesResponse:
      type: array
      items:
        $ref: '#/components/schemas/PaymentTemplate'
    PaymentTemplatesGetAllTemplates400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesCreateTemplateResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesRemoveTemplateResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesRemoveTemplate400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesGetByIdResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesUpdateRequestResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PaymentTemplatesInitiateRequestResponse:
      description: Payment request returned as respone on create action.
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentRequest'
        - $ref: '#/components/schemas/CreatePaymentRequest'
    PaymentTemplatesInitiateRequest400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PayoutsGetAllPayoutsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Payout'
    PayoutsGetAllPayouts400Response:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PayoutsCreatePayoutResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PayoutsAuthorizePayoutResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    PayoutsGetByIdResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    RecurringPaymentsCreateNewRecurringPaymentResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    RecurringPaymentsCancelRecurringPaymentResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    RecurringPaymentsGetRecurringPaymentResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    SigningBasketsCreateNewBasketResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    SigningBasketsCancelResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    SigningBasketsGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - $ref: '#/components/schemas/ProblemDetails'
    WebhooksGetAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/WebhookResponse'
  securitySchemes:
    Bearer:
      description: Please enter into field the word 'Bearer' following by space and JWT
      type: apiKey
      name: Authorization
      in: header
security:
  - Bearer: []
x-tagGroups:
  - tags:
      - Accounts
      - Cards
      - CardTransactions
      - Transactions
    name: Account information
  - tags:
      - Payment requests
      - Payment templates
      - Payouts
      - Recurring payments
      - Signing baskets
    name: Payments(deprecated)
  - tags:
      - Insights
    name: Insights
  - tags:
      - Bank id
      - Central person register denmark
      - Compliance data
      - Kyc
      - Screen data
      - Tra
      - User identification
      - User identity verification
    name: Compliance
  - tags:
      - Webhooks
    name: Webhooks
  - tags:
      - Consent authorizations
      - Provider authorizations
    name: Consents
