openapi: 3.0.2
info:
  title: Webhooks
  description: SmartOnboard Public API
  version: '201911.1'
  contact:
    name: SmartRecruiters
    url: https://developers.smartrecruiters.com
  x-konfig-ignore:
    object-with-no-properties: true
servers:
  - url: https://api.smartrecruiters.com/webhooks-api/v201907
tags:
  - name: configuration
  - name: candidates
  - name: jobs
  - name: users
  - name: offers
  - description: Manage your event subscriptions
    name: subscriptions
  - name: approvals
  - name: assessments
  - name: reports
  - name: interviews
  - name: reviews
  - name: assignments-submissions
  - name: timeslots
  - name: attachments
  - name: configs
  - name: Application API
  - name: integration
  - name: feed
  - name: interview types
  - name: statuses
  - name: messages
  - name: comments
  - name: results
  - name: postings
  - name: result
  - name: packages
  - name: orders
  - name: files
  - name: token
  - name: assessment orders
  - name: audit
  - name: info
  - name: job-applications
  - name: new-hires
  - name: onboarding-processes
  - name: assignments
paths:
  /postings/{uuid}/candidates:
    post:
      tags:
        - Application API
      summary: Create a New Candidate Application
      operationId: ApplicationApi_createNewCandidateApplication
      security:
        - key: []
      description: >-
        Operation is done on behalf of a candidate – they can access and edit
        the data, including attachments
      parameters:
        - description: Posting UUID
          name: uuid
          in: path
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      requestBody:
        description: New candidate data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyApiRequest'
        required: true
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '429':
          description: 'Too Many Requests '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
      externalDocs:
        url: https://developers.smartrecruiters.com/docs/post-an-application
  /postings/{uuid}/candidates/{candidateId}/status:
    get:
      tags:
        - Application API
      summary: Get candidate status
      operationId: ApplicationApi_getCandidateStatus
      security:
        - key: []
      parameters:
        - description: Posting UUID
          name: uuid
          in: path
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: candidateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStatusInfo'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '429':
          description: 'Too Many Requests '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
      externalDocs:
        url: >-
          https://developers.smartrecruiters.com/docs/get-candidate-application-status
  /postings/{uuid}/configuration:
    get:
      tags:
        - Application API
      summary: Get application configuration for posting
      operationId: ApplicationApi_getPostingConfiguration
      security:
        - key: []
      description: >
        Returns application configuration for posting.

        Configuration contains screening questions, privacy policies and
        settings.

        Optionally, conditional questions can be included in the response.
      parameters:
        - description: Language for screening questions. By default 'en'.
          name: Accept-Language
          in: header
          schema:
            type: string
        - description: Posting UUID
          name: uuid
          in: path
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - description: >
            Specifies whether conditional questions should be returned in the
            response. 'false' if not specified

            - Only available for BETA customers
          name: conditionalsIncluded
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyConfiguration'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '429':
          description: 'Too Many Requests '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyApiError'
      externalDocs:
        url: >-
          https://developers.smartrecruiters.com/docs/get-application-screening-questions-and-privacy-policies
  /approvals/{approvalRequestId}:
    get:
      tags:
        - approvals
      summary: Get approval request by id
      operationId: Approvals_getById
      security:
        - key: []
        - oauth:
            - approvals_read
      parameters:
        - description: Approval request identifier
          name: approvalRequestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found approval request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '404':
          description: |
            with code
            * **APPROVAL_REQUEST_NOT_FOUND** when approval request is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /approvals/{approvalRequestId}/comments:
    get:
      tags:
        - approvals
      summary: Get comments for given approval request
      operationId: Approvals_getComments
      security:
        - key: []
        - oauth:
            - approvals_read
      parameters:
        - description: Approval request identifier
          name: approvalRequestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
        '404':
          description: |
            with code
            * **APPROVAL_REQUEST_NOT_FOUND** when approval request is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - approvals
      summary: Add comment to given approval request
      operationId: Approvals_addCommentToRequest
      security:
        - key: []
        - oauth:
            - approvals_read
      parameters:
        - description: Approval request identifier
          name: approvalRequestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalsAddCommentToRequestRequest'
      responses:
        '201':
          description: Created comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: >

            * **COMMENT_CONTAINS_ILLEGAL_CHARACTERS** when comment contains
            illegal characters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: |

            * **UNAUTHORIZED_ACCESS** when no permissions to add a comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **APPROVAL_REQUEST_NOT_FOUND** when approval request is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Input validation fails
  /approvals:
    get:
      tags:
        - approvals
      summary: Get pending approvals requests where you are an approver.
      operationId: Approvals_getPendingRequests
      security:
        - key: []
        - oauth:
            - approvals_read
      description: The max number of returned approval requests is 100.
      parameters:
        - description: >
            Identifier for the paged list of approval requests. To get the first
            page of approval request, leave it blank.
          name: pageId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Approval requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequests'
          headers:
            Link:
              description: |
                Links to related resources, in the format defined by
                [RFC 8288](https://tools.ietf.org/html/rfc8288).
                This will include a link with relation type `next` to the
                next page, if there is a next page.
              schema:
                type: string
        '400':
          description: |
            Unable to retrieve approval requests with codes
            * **INVALID_PAGE_ID** when pageId is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - approvals
      summary: Create approval request
      operationId: Approvals_createApprovalRequest
      security:
        - key: []
        - oauth:
            - approvals_create
      description: >
        The new approval request will be created based on approval request with
        provided baseId. If base approval request is pending, it will be
        abandoned. The newly created request will contain new id, type, decision
        mode and steps, as well as PENDING statuses and decisions.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalsCreateApprovalRequestRequest'
      responses:
        '201':
          description: Approval request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '400':
          description: >
            Unable to create approval request with codes

            * **BASE_ID_NOT_FOUND** when base approval request id doesn't exist

            * **APPROVER_ID_NOT_FOUND** when at least one of approver ids
            doesn't exist

            * **INVALID_DECISION_MODE** when decisionMode is `all` and type is
            `sequential`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: >
            Unable to create approval request with codes

            * **UNAUTHORIZED_ACCESS** when no permissions to create approval
            request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /approvals/{approvalRequestId}/approve-decisions:
    post:
      tags:
        - approvals
      summary: Approve the approval request by id
      operationId: Approvals_approveDecisions
      security:
        - key: []
        - oauth:
            - approvals_read
            - approvals_decide
      parameters:
        - description: Approval request identifier
          name: approvalRequestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalsApproveDecisionsRequest'
      responses:
        '204':
          description: Approval request approved
        '400':
          description: >
            with code

            * **APPROVAL_REQUEST_NOT_FOUND**

            * **APPROVAL_COMPLETED** when approval request is already approved,
            rejected or abandoned

            * **DECISION_NOT_YET_ALLOWED** when trying to take decision before
            previous step completion

            * **APPROVER_NOT_ALLOWED** when user is not an approver in given
            approval request

            * **DECISION_ALREADY_TAKEN** when approver is trying to modify
            already taken decision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **APPROVAL_REQUEST_NOT_FOUND** when approval request is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /approvals/{approvalRequestId}/reject-decisions:
    post:
      tags:
        - approvals
      summary: Reject the approval request by id
      operationId: Approvals_rejectRequestById
      security:
        - key: []
        - oauth:
            - approvals_read
            - approvals_decide
      parameters:
        - description: Approval request identifier
          name: approvalRequestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalsRejectRequestByIdRequest'
      responses:
        '204':
          description: Approval request rejected
        '400':
          description: >
            with code

            * **APPROVAL_REQUEST_NOT_FOUND**

            * **APPROVAL_COMPLETED** when approval request is already approved,
            rejected or abandoned

            * **DECISION_NOT_YET_ALLOWED** when trying to take decision before
            previous step completion

            * **APPROVER_NOT_ALLOWED** when user is not an approver in given
            approval request

            * **DECISION_ALREADY_TAKEN** when approver is trying to modify
            already taken decision

            * **COMMENT_IS_REQUIRED** when approver is trying reject without the
            comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **APPROVAL_REQUEST_NOT_FOUND** when approval request is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /partner/configuration:
    get:
      tags:
        - configuration
      summary: get partner configuration
      operationId: Configuration_getDetails
      security:
        - oauth2_master:
            - partner_configuration_manage
      responses:
        '200':
          description: Partner configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerConfiguration'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Configuration does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - configuration
      summary: saves configuration for partner
      operationId: Configuration_savePartnerConfig
      security:
        - oauth2_master:
            - partner_configuration_manage
      description: Endpoint for saving partner's configuration.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerConfigurationRequest'
      responses:
        '200':
          description: Configuration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerConfiguration'
        '400':
          description: Invalid configuration provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /integration/company/{companyId}:
    post:
      tags:
        - integration
      summary: enable the company integration
      operationId: Integration_integrationSetup
      security:
        - oauth2_master:
            - partner_configuration_manage
      description: |2-

                    Set up integration.
                    1. Validates if token has client_credentials_write scope (created using master credentials)
                    2. Validates if company gave consent for integration with partner
                    3. Saves credentials send by the partner
                    4. Created credentials for current company
                    5. Sends created credentials back to partner
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCredentials'
      responses:
        '200':
          description: Customer-level integration credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCredentials'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Request missed required scopes or company did not give consent for
            integration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Partner configuration does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Partner already integrated for company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /orders/{orderId}/results:
    patch:
      tags:
        - result
      summary: updates package result
      operationId: Result_updatePackageResult
      security:
        - oauth2:
            - assessment_result_manage
      description: >-
        Updates results for package ordered. Follows RFC 7396 rules to describe
        set of modifications.
      parameters:
        - description: Order ID
          name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageResult'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResult'
        '400':
          description: Invalid result partial update provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order with given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '415':
          description: Unsupported payload format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /orders/{orderId}/results/attachment:
    post:
      tags:
        - result
      summary: add attachment to order
      operationId: Result_addAttachmentToOrder
      description: >-
        Add attachment to order. Adding attachment to inline assessment orders
        is not supported.
      parameters:
        - description: Order ID
          name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResultAddAttachmentToOrderRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentResult'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order with given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /integration:
    get:
      tags:
        - integration
      summary: Shows consent form on partner side
      operationId: Integration_showConsentFormOnPartnerSide
      description: >-
        Endpoint to which SmartRecruiters will send request for consent.

        After that Partner will:

        1. Create client credentials which may be used on SmartRecruiters side

        2. Retrieve access_token using master client credentials

        3. Send generated credentials using oauth token obtained

        In return SmartRecruiters would send client credentials for company
        setting up the integration.
      parameters:
        - description: id of company setting up the integration
          name: companyId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Page with consent for customer admin
          content:
            text/html:
              schema:
                $ref: >-
                  #/components/schemas/IntegrationShowConsentFormOnPartnerSideResponse
  /integrations/companies/{companyId}:
    delete:
      tags:
        - integration
      summary: Removes integration on partner side
      operationId: Integration_removeIntegrationOnPartnerSide
      parameters:
        - description: id of company with integration
          name: companyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/IntegrationRemoveIntegrationOnPartnerSideResponse
  /packages:
    get:
      tags:
        - packages
      summary: Retrieves a list of packages
      operationId: Packages_getList
      security:
        - oauth2:
            - packages_view
      parameters:
        - description: Information about recruiter requesting list of packages
          name: requester
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/Requester'
        - description: country code
          name: country-code
          in: query
          required: false
          schema:
            type: string
        - description: region abbreviation
          name: region-abbr
          in: query
          required: false
          schema:
            type: string
        - description: city
          name: city
          in: query
          required: false
          schema:
            type: string
        - description: address
          name: address
          in: query
          required: false
          schema:
            type: string
        - description: postal code
          name: postal-code
          in: query
          required: false
          schema:
            type: string
        - description: describe whether job is remote or not
          name: remote
          in: query
          required: false
          schema:
            type: boolean
        - description: >-
            Example partner field. Partner defines list of allowed fields in
            configuration. Client binds job fields in his configuration. All
            fields with non-empty values will be included in this call.
          name: partner-field-id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of assessment packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagesGetListResponse'
        '204':
          description: Returned when there are not packages to present
        '400':
          description: Invalid requester data in header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /packages/{assessmentPackageId}:
    get:
      tags:
        - packages
      summary: Retrieves a package by id
      operationId: Packages_getById
      security:
        - oauth2:
            - packages_view
      parameters:
        - name: assessmentPackageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assessment package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentPackage'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No assessment package with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /packages/orders:
    post:
      tags:
        - orders
      summary: Orders assessment package for candidate
      operationId: Orders_assessPackageForCandidate
      security:
        - oauth2:
            - orders_modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentPackageOrderRequest'
      responses:
        '202':
          description: Order acceptance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersAssessPackageForCandidateResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: There is no package which was ordered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /packages/inline/orders:
    post:
      tags:
        - orders
      summary: Orders inline assessment package for candidate
      operationId: Orders_assessPackageForCandidate
      security:
        - oauth2:
            - orders_modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineAssessmentPackageOrderRequest'
      responses:
        '200':
          description: Response containing url to inline assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineAssessmentPackageResponse'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Request missed required scopes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: There is no package which was ordered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /oauth/token:
    post:
      tags:
        - token
      summary: Exchange credentials for an access token
      operationId: Token_exchangeCredentialsForAccessToken
      description: >-
        SmartRecruiters will call this endpoint to exchange the credentials
        received from Partner for an access token.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenInput'
      responses:
        '200':
          description: Access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Error Response https://tools.ietf.org/html/rfc6749#section-5.2
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenErrorResponse'
  /assessment-orders:
    get:
      tags:
        - assessment orders
      summary: Retrieves all assessment orders for specified application
      operationId: AssessmentOrders_getAllForApplication
      security:
        - key: []
        - oauth:
            - assessment_orders_read
      parameters:
        - description: ID of the application
          in: query
          name: applicationId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Assessment orders were retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentOrders'
        '401':
          description: >
            with codes:

            * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is not
            authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **APPLICATION_NOT_FOUND** when there is no application with given
            id

            * **MISSING_COMPANY_INTEGRATION** when no integration with
            assessment partner was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /audit-events:
    get:
      tags:
        - audit
      summary: List audit events
      operationId: Audit_listEvents
      security:
        - key: []
        - oauth:
            - audit_events_read
      description: >
        Data collected via the Audit API will be retained at least 26 months.
        When `eventDateAfter` and `eventDateBefore` are not set, by default, the
        time range is set to the last 7 days. Below is the list of the events
        that are currently exposed in the API:

        * **USER_ACCOUNT_ACTIVATED** - user account has been activated, user can
        now login to the system

        * **USER_ACCOUNT_CREATED** - user account has been created, in order to
        log in to the system account has to be activated first

        * **USER_ACCOUNT_DEACTIVATED** - user account has been deactivated,
        logging possibility disabled for the user

        * **USER_ACCOUNT_UPDATED** - user account has been modified

        * **USER_AUTHENTICATION_INVALID_CREDENTIALS** - user authentication
        failed due to invalid credentials.

        Additional context represents the type of the authentication method:

        ```json

        context: {
            authenticationType: "PASSWORD"
        }

        ```

        * **USER_AUTHENTICATION_SUCCESS** - user authentication succeeded

        Additional context represents the type of the authentication method:

        ```json

        context: {
            authenticationType: "PASSWORD",
            officeName: "string" //Optional
        }

        ```

        * **USER_PASSWORD_CHANGED** - user password has been changed

        * **USER_PASSWORD_RESET** - user password has been reset

        * **USER_ROLE_CHANGED** - user role has been changed,

        Additional context represents previous and current role of the user:

        ```json

        context: {
            currentRole: "RESTRICTED",
            previousRole: "STANDARD"
        }

        ```

        * **USER_API_KEY_RENEWED** - user api-key has been renewed

        * **CREDENTIALS_CREATED** - api-key or OAuth credentials has been
        renewed

        * **CREDENTIALS_CHANGED** - api-key or OAuth credentials has been
        modified

        * **CREDENTIALS_REVOKED** - api-key or OAuth credentials has been
        modified

        Additional context represents credential type:

        ```json

        context: {
            credentialType: "string"
        }

        ```

        * **SEARCH** - user performed search

        For entityType CANDIDATE additional context represents candidate search
        event:

        ```json

        context: {
            keyword: [
                "test"
            ],
            jobTitles: [
                "Freelancer",
                "Software Engineer"
            ],
            jobNames: [
                "Java Developer, San Francisco"
            ],
            companies: [
                "SmartRecruiters"
            ],
            schools: [
                "University of Science and Technology"
            ]
        ```

        * **JOB_DELETED** - job was deleted

        Additional context represents the deleted job:

        ```json

        context: {
            jobName: "string",
            jobRefNumber: "string"
        }

        ```

        * **HIRING_TEAM_MEMBER_ADDED** - a new member was added to the hiring
        team of the job

        Additional context represents the new member:

        ```json

        context: {
            userId: "string",
            roleId: "string",
            roleName: "string"
        }

        ```

        * **HIRING_TEAM_MEMBER_REMOVED** - a member was removed from the hiring
        team of the job

        Additional context represents the removed member:

        ```json

        context: {
            userId: "string"
        }

        ```

        * **HIRING_TEAM_ROLE_UPDATED** - role of one of the hiring team members
        was updated

        Additional context represents previous and current role of the updated
        member:

        ```json

        context: {
            userId: "string",
            previousRoleId: "string",
            previousRoleName: "string",
            currentRoleId: "string",
            currentRoleName: "string"
        }

        ```

        * **APPROVAL_DELEGATION_FROM_USER_CREATED** - a user created an approval
        delegation

        * **APPROVAL_DELEGATION_FROM_USER_CANCELLED** - a user cancelled an
        approval delegation

        * **APPROVAL_DELEGATION_TO_USER_CREATED** - an approval delegation to a
        user (a delegate) has been created

        * **APPROVAL_DELEGATION_TO_USER_CANCELLED** - an approval delegation to
        a user (a delegate) has been created

          Additional context represents approval delegation event's details:

          ```json

          context: {
              originalApproverId: "string",
              delegateApproverId: "string",
              startDate: date,
              endDate: date
          }

          ```

        * **JOB_APPROVAL_REQUESTED** - a job approval was requested

        Additional context represents approval modified event's details:

        ```json

        comment: {
          text: 'string',
          authorId: 'string',
          date: 'string',

        }

        context: {
            comments: [comment]
        }

        ```

        * **JOB_APPROVAL_APPROVED** - a job approval was approved

        Additional context represents approval modified event's details:

        ```json

        comment: {
          text: 'string',
          authorId: 'string',
          date: 'string',

        }

        context: {
            comments: [comment]
        }

        ```

        * **JOB_APPROVAL_REJECTED** - a job approval was rejected

        Additional context represents approval modified event's details:

        ```json

        comment: {
          text: 'string',
          authorId: 'string',
          date: 'string',

        }

        context: {
            comments: [comment]
        }

        ```

        * **JOB_APPROVAL_ABANDONED** - a job approval was abandoned

        Additional context represents approval modified event's details:

        ```json

        comment: {
          text: 'string',
          authorId: 'string',
          date: 'string',

        }

        context: {
            comments: [comment]
        }

        ```

        * **OFFER_APPROVAL_APPROVED** - an offer approval was approved

        * **OFFER_APPROVAL_REJECTED** - an offer approval was rejected

        * **OFFER_APPROVAL_ABANDONED** - an offer approval was abandoned

          Additional context represents approval event's details.
          `type` is one of the values:
            * sequential - consent of every approver is required, approval requests are sent one by one in a defined order.
            * parallel -  all approvers can approve at the same time.

          `decisionMode` is one of the values:
            * all - consent of every approver is required
            * any - consent of a single approver is enough

        ```json

        decision: {
          decidedOn: integer,
          decision: 'string',
          decidedBy: 'string',
          userId: 'string'
        }

        context: {
          approvalRequestId: 'string'
          approvers: [decision]
          type: 'string',
          decisionMode: 'string'
        }

        ```

        * **JOB_APPROVAL_STEP_APPROVED** - a job approval step was approved by
        author

        * **JOB_APPROVAL_STEP_REJECTED** - a job approval step was rejected by
        author

        Additional context represents approval step modified event's details:

        ```json

        context: {
            approver: 'string'
            comment: 'string'
        }

        ```

        * **JOB_APPROVAL_STEP_SKIPPED** - an author skipped approver for a job
        approval step

        * **OFFER_APPROVAL_STEP_APPROVED** - an offer approval step was approved
        by author

        * **OFFER_APPROVAL_STEP_REJECTED** - an offer approval step was rejected
        by author

        * **OFFER_APPROVAL_STEP_SKIPPED** - an author skipped approver for an
        offer approval step

          Additional context represents approval step modified event's details:

        ```json

        context: {
            approvalRequestId: "string"
            approver: "string",
            reasonId: "string",
            comment: "string"
        }

        ```

        * **JOB_APPROVAL_STEP_DELEGATED** - job approval step was delegated to
        new approver

        * **OFFER_APPROVAL_STEP_DELEGATED** - job approval step was delegated to
        new approver

          Additional context represents approval step delegated event's details:

        ```json

        context: {
            approvalRequestId: "string"
            originalApproverId: "string",
            delegateApproverId: "string"
        }

        ```

        * **OFFER_ACCEPTED** - offer was accepted. Returns viaIntegration which
        is set to true if offer was accepted via third party integration like
        Docusign

        ```json

        context: {
            viaIntegration: "boolean"
        }

        ```

        * **OFFER_DECLINED** - offer was declined. Returns viaIntegration which
        is set to true if offer was accepted via third party integration like
        Docusign

        ```json

        context: {
            viaIntegration: "boolean"
        }

        ```

        * **CANDIDATE_PERSONAL_DATA_MODIFIED** - Candidate personal data were
        modified. Only Web Application actions are audited. Event doesn't cover
        Customer API. Personal data covers:
            * First Name
            * Last Name
            * E-mail
            * Phone
            * Location
            * Phone Number
            * Social Links (Skype Id, Indeed Id, Twitter account, LinkedIn profile, Facebook profile, Websites)
        * **CANDIDATE_PROFILE_MODIFIED** - Candidate profile data were modified.
        Only Web Application actions are audited. Event doesn't cover Customer
        API and Mobile application.

        * **CANDIDATE_DELETED** - Candidate was deleted. The authorType property
        can be used to distinguish deletion nature. Following values are
        possible:
            * USER - candidate was deleted by user
            * SYSTEM - candidate was deleted by compliance mechanism (due to retention period end or lack of consent)
            * CANDIDATE - candidate deleted oneself

        * **CANDIDATE_PROFILE_OPENED** - Candidate profile was opened by user.
        Only Web Application actions are audited. Event doesn't cover Customer
        API and Mobile application.

        * **CANDIDATE_EEO_FILLED** - Missing Candidate EEO informations were
        filled by user.

        * **CANDIDATE_PROFILE_UPDATED_DUE_TO_MERGE** - candidate profile updated
        due to merge.

        Additional context with id of duplicated candidate profile:

        ```json

        context: {
            mergedProfileId: "string"
        }

        ```

        * **CANDIDATE_DELETED_DUE_TO_MERGE** - candidate profile deleted due to
        merge.

        Additional context with id of master candidate profile:

        ```json

        context: {
            masterProfileId: "string"
        }

        ```

        * **CANDIDATE_TAGS_MODIFIED** - candidate tags have been modified. It
        means that tags have been added, replaced or deleted from the profile.

          The additional context contains the `tags` that are assigned to the candidate after the successful operation.

          ```json

          context: {
              tags: "string"
          }

          ```

        * **APPLICATION_PROPERTIES_UPDATED** - application properties updated.

        Additional context with id of updated properties:

        ```json

        context: {
            updatedPropertiesIds: "string",
            updatedPropertiesKeys: "string"
        }

        ```

        * **APPLICATION_SOURCE_MODIFIED** - community or job application source
        has been changed.

          The additional context contains the old and new source identifier after the successful operation.

          ```json

          context: {
              previousSource: "string",
              nextSource: "string"
          }

          ```

        * **ONBOARDING_STATUS_UPDATED** - onboarding status updated.

        Additional context with ids of values:

        ```json

        context: {
            fromValueId: "string",
            toValueId: "string"
        }

        ```

        * **JOB_APPLICATION_CREATED** - job application created. Currently, we
        are auditing only actions undertaken by an employee.

        Additional context with ids of values:

        ```json

        context: {
            currentStatus: "string"
        }

        ```

        * **JOB_APPLICATION_STATE_MODIFIED** - job application state modified.
        Currently, we are auditing only actions undertaken by an employee or
        system user.

        Additional context with ids of values:

        ```json

        context: {
            currentStatus: "string",
            currentStep: "string", //optional, might not be returned if lack of configured step
            previousStatus: "string",
            previousStep: "string" //optional, might not be returned if lack of configured step
        }

        ```

        * **LRSC_CONSENT_GIVEN** - Consent for data exchange within LinkedIn
        Recruiter System Connect integration was given.

        * **OAUTH_APPLICATION_ACCESS_GRANTED** - Access to OAuth application was
        granted to given user.

        Additional context represents grant's details:

        ```json

        context: {
            applicationId: "string",
            applicationName: "string",
            startDate: "date-time",
            endDate: "date-time"
        }

        ```

        JOB_PROPERTY_* events audit changes from both Web Application on Job
        Field Settings page and Configuration API unless otherwise indicated.

        * **JOB_PROPERTY_CREATED** - a job property was created.

        * **JOB_PROPERTY_ACTIVATED** - a job property was activated.

        * **JOB_PROPERTY_DEACTIVATED** - a job property was deactivated.

        * **JOB_PROPERTY_UPDATED** - a job property was updated.

        Additional context represents current and previous job property:

        ```json

        property: {
          id: "string",
          label: "string",
          category: "string",
          active: boolean,
          visible: boolean,
          required: boolean
        }

        context: {
            currentProperty: property,
            previousProperty: property
        }

        ```

        * **JOB_PROPERTY_UPDATED_VALUES** - values in job property were updated.
        Only actions from UI are audited within this event.

        Additional context represents updated current and previous values:

        ```json

        value: {
          id: "string",
          label: "string",
          archived: boolean
        }

        context: {
            currentValues: [value],
            previousValues: [value]
        }

        ```

        * **JOB_PROPERTY_UPDATED_VALUE** - a job property value was updated
        (changed label, (un)archived). Only actions from Configuration API are
        audited. These actions from UI are audited within
        JOB_PROPERTY_UPDATED_VALUES event.

        Additional context represents updated current and previous value:

        ```json

        context: {
            currentValue: value,
            previousValue: value
        }

        ```

        * **JOB_PROPERTY_ADDED_VALUE** - a value was added to a job property.
        Only actions from Configuration API are audited. These actions from UI
        are audited within JOB_PROPERTY_UPDATED_VALUES event.

        Additional context represents added value:

        ```json
         context: {
            value: [value]
         }
         ```

        * **JOB_PROPERTY_ARCHIVED_VALUE** - a job property value was archived.
        Only actions from Configuration API are audited. These actions from UI
        are audited within JOB_PROPERTY_UPDATED_VALUES event.

        Additional context represents archived value id:

        ```json

        context: {
            valueId: "string"
        }

        ```

        * **JOB_PROPERTY_DEPENDENT_PROPERTIES_UPDATED** - job property
        dependents were updated.

        Additional context represents updated dependent properties:

        ```json

        context: {
            currentDependents: ["string"],
            previousDependents: ["string"]
        }

        ```

        * **JOB_PROPERTY_DEPENDENT_VALUES_UPDATED** - job property dependent
        values were updated.

        Additional context represents added or updated dependent values:

        ```json

        dependentValue: {
          "parent": {
            "id": "string",
            "label": "string"
          },
          "values": [value],
          "valuesIds": ["string"]
        }


        context: {
            dependentId: "string",
            currentDependentValues: [dependentValue],
            previousDependentValues: [dependentValue]
        }

        ```

        * **JOB_PROPERTY_DEPENDENT_VALUES_MODIFIED** - job property dependent
        values were modified

        Additional context represents modified dependent values:

         ```json

        context: {
          dependentId: "string",
          modifications: {
            "valuesSet": {
              "string": ["string"]
            },
             "valuesAppended": {
               "string": ["string"]
             },
             "valuesRemoved": {
              "string": ["string"]
            },
             "parentValuesWithAllValuesSet": ["string"],
             "clearedOtherParentValues": boolean
          },
        }

        ```


        * **JOB_PROPERTIES_CHANGED** - job details has changed (job fields
        edited on job)

        ```json

        fieldValue: {
          "fieldId": "string",
          "value": "string"
        }

        context: {
          "previousProperties": [fieldValue],
          "currentProperties": [fieldValue]
        }

        ```

        * **POSITION_UPDATED** - when position is updated

        * **POSITION_DELETED** - when position is deleted

        * **POSITION_CREATED** - when position is created

        * **POSITION_ASSIGNED** - when position is assigned

        * **CANCEL_NOT_FILLED_POSITION** - when not filled position is cancelled

        ```json

        position: {
          id: 'string',
          positionId: 'string',
          status: 'string',
          openDate: 'date',
          targetStartDate: 'date',
          type: 'string'
        }

        context: {
          previous: position,
          current: position
        }

        ```

        * **JOB_AD_CREATED** - when job ad is created

        ```json

        location: {
          country: 'string'
          countryCode: 'string'
          regionCode: 'string'
          region: 'string'
          city: 'string'
          address: 'string'
          postalCode: 'string'
          longitude: 'string'
          latitude: 'string'
          manual: boolean
        }

        jobAd: {
          id: 'string',
          title: 'string',
          visibility: 'string',
          creatorId: 'string',
          modifierId: 'string',
          createDate: 'string',
          location: location,
          sections: 'string',
          languageId: 'string',
          applyUrl: 'string'
        }

        context: {
          jobAd: jobAd
        }

        ```

        * **JOB_AD_UPDATED** - when job ad is updated

        ```json

          context: {
            previous: jobAd,
            current: jobAd
          }

        ```

        * **JOB_AD_DELETED** - when job ad is deleted

        ```json

          context: {
            jobAdId: 'string',
            employeeId: 'string'
          }

        ```

        * **ONBOARDING_PROCESS_DELETED** - when an Onboarding Process is deleted
        from SmartOnboard

        ```json

          context: {
            deletionReason: 'string'
          }

        ```

        * **CUSTOMER_REPORT_DOWNLOADED** - when a report is downloaded
        Additional context with ids of values:

        ```json

        context: {
            reportFileId: 'string',
            reportId: 'string'
        } ```
      parameters:
        - description: >-
            ISO8601-formatted time boundaries for the event time, Format:
            yyyy-MM-ddTHH:mm:ss.SSSZZ (example: 2023-01-21T12:50:02.594Z)
          in: query
          name: eventDateAfter
          schema:
            type: string
            format: date-time
        - description: >-
            ISO8601-formatted time boundaries for the event time, Format:
            yyyy-MM-ddTHH:mm:ss.SSSZZ (example: 2023-01-21T12:50:02.594Z)
          in: query
          name: eventDateBefore
          schema:
            type: string
            format: date-time
        - description: Name of the event
          in: query
          name: eventName
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - USER_ACCOUNT_ACTIVATED
                - USER_ACCOUNT_CREATED
                - USER_ACCOUNT_DEACTIVATED
                - USER_ACCOUNT_UPDATED
                - USER_AUTHENTICATION_INVALID_CREDENTIALS
                - USER_AUTHENTICATION_SUCCESS
                - USER_PASSWORD_CHANGED
                - USER_PASSWORD_RESET
                - USER_ROLE_CHANGED
                - USER_API_KEY_RENEWED
                - CREDENTIALS_CREATED
                - CREDENTIALS_CHANGED
                - CREDENTIALS_REVOKED
                - SEARCH
                - CANDIDATE_PERSONAL_DATA_MODIFIED
                - CANDIDATE_PROFILE_MODIFIED
                - CANDIDATE_DELETED
                - CANDIDATE_PROFILE_OPENED
                - CANDIDATE_PROFILE_UPDATED_DUE_TO_MERGE
                - CANDIDATE_DELETED_DUE_TO_MERGE
                - CANDIDATE_TAGS_MODIFIED
                - APPLICATION_PROPERTIES_UPDATED
                - APPLICATION_SOURCE_MODIFIED
                - ONBOARDING_STATUS_UPDATED
                - JOB_APPLICATION_CREATED
                - JOB_APPLICATION_STATE_MODIFIED
                - JOB_DELETED
                - HIRING_TEAM_MEMBER_ADDED
                - HIRING_TEAM_MEMBER_REMOVED
                - HIRING_TEAM_ROLE_UPDATED
                - APPROVAL_DELEGATION_FROM_USER_CREATED
                - APPROVAL_DELEGATION_FROM_USER_CANCELLED
                - APPROVAL_DELEGATION_TO_USER_CREATED
                - APPROVAL_DELEGATION_TO_USER_CANCELLED
                - JOB_APPROVAL_REQUESTED
                - JOB_APPROVAL_APPROVED
                - JOB_APPROVAL_REJECTED
                - JOB_APPROVAL_ABANDONED
                - JOB_APPROVAL_STEP_APPROVED
                - JOB_APPROVAL_STEP_REJECTED
                - JOB_APPROVAL_STEP_SKIPPED
                - JOB_APPROVAL_STEP_DELEGATED
                - OFFER_APPROVAL_APPROVED
                - OFFER_APPROVAL_REJECTED
                - OFFER_APPROVAL_ABANDONED
                - OFFER_APPROVAL_STEP_APPROVED
                - OFFER_APPROVAL_STEP_REJECTED
                - OFFER_APPROVAL_STEP_SKIPPED
                - OFFER_APPROVAL_STEP_DELEGATED
                - OFFER_ACCEPTED
                - OFFER_DECLINED
                - CANDIDATE_EEO_FILLED
                - LRSC_CONSENT_GIVEN
                - OAUTH_APPLICATION_ACCESS_GRANTED
                - JOB_PROPERTY_CREATED
                - JOB_PROPERTY_UPDATED
                - JOB_PROPERTY_ACTIVATED
                - JOB_PROPERTY_DEACTIVATED
                - JOB_PROPERTY_UPDATED_VALUES
                - JOB_PROPERTY_UPDATED_VALUE
                - JOB_PROPERTY_ADDED_VALUE
                - JOB_PROPERTY_ARCHIVED_VALUE
                - JOB_PROPERTY_DEPENDENT_PROPERTIES_UPDATED
                - JOB_PROPERTY_DEPENDENT_VALUES_UPDATED
                - JOB_PROPERTY_DEPENDENT_VALUES_MODIFIED
                - JOB_PROPERTIES_CHANGED
                - POSITION_UPDATED
                - POSITION_DELETED
                - POSITION_CREATED
                - POSITION_ASSIGNED
                - CANCEL_NOT_FILLED_POSITION
                - JOB_AD_CREATED
                - JOB_AD_UPDATED
                - JOB_AD_DELETED
                - ONBOARDING_PROCESS_DELETED
                - CUSTOMER_REPORT_DOWNLOADED
            default:
              - USER_ACCOUNT_ACTIVATED
              - USER_ACCOUNT_CREATED
              - USER_ACCOUNT_DEACTIVATED
              - USER_ACCOUNT_UPDATED
              - USER_AUTHENTICATION_INVALID_CREDENTIALS
              - USER_AUTHENTICATION_SUCCESS
              - USER_PASSWORD_CHANGED
              - USER_PASSWORD_RESET
              - USER_ROLE_CHANGED
              - USER_API_KEY_RENEWED
              - CREDENTIALS_CREATED
              - CREDENTIALS_CHANGED
              - CREDENTIALS_REVOKED
              - SEARCH
              - JOB_DELETED
              - HIRING_TEAM_MEMBER_ADDED
              - HIRING_TEAM_MEMBER_REMOVED
              - HIRING_TEAM_ROLE_UPDATED
              - APPROVAL_DELEGATION_FROM_USER_CREATED
              - APPROVAL_DELEGATION_FROM_USER_CANCELLED
              - APPROVAL_DELEGATION_TO_USER_CREATED
              - APPROVAL_DELEGATION_TO_USER_CANCELLED
              - JOB_APPROVAL_REQUESTED
              - JOB_APPROVAL_APPROVED
              - JOB_APPROVAL_REJECTED
              - JOB_APPROVAL_ABANDONED
              - JOB_APPROVAL_STEP_APPROVED
              - JOB_APPROVAL_STEP_REJECTED
              - JOB_APPROVAL_STEP_SKIPPED
              - JOB_APPROVAL_STEP_DELEGATED
              - OFFER_APPROVAL_APPROVED
              - OFFER_APPROVAL_REJECTED
              - OFFER_APPROVAL_ABANDONED
              - OFFER_APPROVAL_STEP_APPROVED
              - OFFER_APPROVAL_STEP_REJECTED
              - OFFER_APPROVAL_STEP_SKIPPED
              - OFFER_APPROVAL_STEP_DELEGATED
              - OFFER_ACCEPTED
              - OFFER_DECLINED
              - CANDIDATE_PERSONAL_DATA_MODIFIED
              - CANDIDATE_PROFILE_MODIFIED
              - CANDIDATE_DELETED
              - CANDIDATE_PROFILE_OPENED
              - CANDIDATE_EEO_FILLED
              - CANDIDATE_PROFILE_UPDATED_DUE_TO_MERGE
              - CANDIDATE_DELETED_DUE_TO_MERGE
              - CANDIDATE_TAGS_MODIFIED
              - APPLICATION_PROPERTIES_UPDATED
              - APPLICATION_SOURCE_MODIFIED
              - ONBOARDING_STATUS_UPDATED
              - JOB_APPLICATION_CREATED
              - JOB_APPLICATION_STATE_MODIFIED
              - LRSC_CONSENT_GIVEN
              - OAUTH_APPLICATION_ACCESS_GRANTED
              - JOB_PROPERTY_CREATED
              - JOB_PROPERTY_UPDATED
              - JOB_PROPERTY_ACTIVATED
              - JOB_PROPERTY_DEACTIVATED
              - JOB_PROPERTY_UPDATED_VALUES
              - JOB_PROPERTY_UPDATED_VALUE
              - JOB_PROPERTY_ADDED_VALUE
              - JOB_PROPERTY_ARCHIVED_VALUE
              - JOB_PROPERTY_DEPENDENT_PROPERTIES_UPDATED
              - JOB_PROPERTY_DEPENDENT_VALUES_UPDATED
              - JOB_PROPERTY_DEPENDENT_VALUES_MODIFIED
              - JOB_PROPERTIES_CHANGED
              - POSITION_UPDATED
              - POSITION_DELETED
              - POSITION_CREATED
              - POSITION_ASSIGNED
              - CANCEL_NOT_FILLED_POSITION
              - JOB_AD_CREATED
              - JOB_AD_UPDATED
              - JOB_AD_DELETED
              - ONBOARDING_PROCESS_DELETED
              - CUSTOMER_REPORT_DOWNLOADED
        - description: Type of the author who generated the event
          in: query
          name: authorType
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - USER
                - SUPPORT_USER
                - SYSTEM
                - CANDIDATE
            default:
              - USER
              - SUPPORT_USER
              - SYSTEM
              - CANDIDATE
        - description: Unique identifier of the author
          in: query
          name: authorId
          schema:
            type: string
        - description: Type of the entity that the event is related to
          in: query
          name: entityType
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - USER
                - CANDIDATE
                - APPLICATION
                - OFFER
                - JOB
                - COMPANY
                - JOB_PROPERTY
                - JOB_AD
                - CREDENTIAL
                - REPORT_FILE
                - ONBOARDING_PROCESS
            default:
              - USER
              - CANDIDATE
              - APPLICATION
              - OFFER
              - JOB
              - COMPANY
              - JOB_PROPERTY
              - JOB_AD
              - CREDENTIAL
              - REPORT_FILE
              - ONBOARDING_PROCESS
        - description: Unique identifier of the entity that the event is related to
          in: query
          name: entityId
          schema:
            type: string
        - description: Unique identifier for the next page of events
          in: query
          name: nextPageId
          schema:
            type: string
        - description: Number of audit events to return. Maximum value is 100.
          in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A single page of audit events
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Events'
        '403':
          description: Audit events access forbidden. ADMINISTRATOR role is required.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/tags:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    post:
      tags:
        - candidates
      summary: Add tags to a candidate
      operationId: Candidates_addTagsToCandidate
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Add new tags to a given candidate. It doesn't replace existing tags.
      requestBody:
        description: Tags to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTags'
        required: true
      responses:
        '201':
          description: Added tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateTags'
        '400':
          description: Adding too many tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: No permission to access this candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - candidates
      summary: Get tags for a candidate
      operationId: Candidates_getTags
      security:
        - key: []
        - oauth:
            - candidates_read
      responses:
        '200':
          description: Candidate's tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateTags'
        '403':
          description: No permission to access this candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - candidates
      summary: Update tags for a candidate
      operationId: Candidates_updateCandidateTags
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >-
        Update tags for a given candidate. It replaces all existing tags with
        the new array provided.
      requestBody:
        description: Tags to be set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTags'
        required: true
      responses:
        '201':
          description: Updated tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateTags'
        '403':
          description: No permission to access this candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - candidates
      summary: Delete tags for a candidate
      operationId: Candidates_removeTags
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >-
        Delete tags for a given candidate. All tags associated with a candidate
        are removed.
      responses:
        '204':
          description: Candidate's tags successfully deleted
        '403':
          description: No permission to access this candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/onboardingStatus:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Get Onboarding Status for a candidate
      operationId: Candidates_getOnboardingStatus
      security:
        - key: []
        - oauth:
            - candidates_read
      description: >-
        Get Onboarding Status for a candidate. Please use `GET
        /candidates/{id}/jobs/{jobId}/onboardingStatus` instead.
      responses:
        '200':
          description: Onboarding status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingStatus'
        '403':
          description: >
            with codes:

            * **NO_ACCESS_TO_CANDIDATE** when Onboarding Status is not accesible
            with assigned permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_NOT_FOUND** when candidate not found,

            * **ONBOARDING_STATUS_NOT_ACTIVE** when Onboarding Status candidate
            property is not activated,

            * **CANDIDATE_FIELDS_FEATURE_MISSING** when Onboarding Status is not
            accessible. Required feature: 'Candidate Fields'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    put:
      tags:
        - candidates
      summary: Set Onboarding Status for a candidate
      operationId: Candidates_setOnboardingStatus
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >-
        Set Onboarding Status for a candidate. Please use `PUT
        /candidates/{id}/jobs/{jobId}/onboardingStatus` instead.
      requestBody:
        $ref: '#/components/requestBodies/OnboardingStatus'
      responses:
        '204':
          description: Onboarding status successfully updated.
        '403':
          description: >
            with codes:

            * **NO_ACCESS_TO_CANDIDATE** when Onboarding Status is not editable
            with assigned permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_NOT_FOUND** when candidate not found,

            * **ONBOARDING_STATUS_NOT_ACTIVE** when Onboarding Status custom
            candidate property is not activated,

            * **CANDIDATE_FIELDS_FEATURE_MISSING** when Onboarding Status is not
            accessible. Required feature: 'Candidate Fields'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/jobs/{jobId}/onboardingStatus:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - candidates
      summary: Get Onboarding Status for a candidate associated with given job
      operationId: Candidates_getOnboardingStatus
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get Onboarding Status for a candidate associated with given job.
      responses:
        '200':
          description: Onboarding status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingStatus'
        '403':
          description: >
            with codes:

            * **NO_ACCESS_TO_CANDIDATE** when Onboarding Status is not
            accessible with assigned permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_NOT_FOUND** when candidate not found,

            * **JOB_NOT_FOUND** when candidate is not assigned to given job,

            * **ONBOARDING_STATUS_NOT_ACTIVE** when Onboarding Status candidate
            property is not activated,

            * **CANDIDATE_FIELDS_FEATURE_MISSING** when Onboarding Status is not
            accessible. Required feature: 'Candidate Fields'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - candidates
      summary: Sets Onboarding Status for a candidate associated with given job
      operationId: Candidates_setOnboardingStatus
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Sets Onboarding Status for a candidate associated with given job.
      requestBody:
        $ref: '#/components/requestBodies/OnboardingStatus'
      responses:
        '204':
          description: Onboarding status successfully updated.
        '403':
          description: >
            with codes:

            * **NO_ACCESS_TO_CANDIDATE** when Onboarding Status is not editable
            with assigned permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_NOT_FOUND** when candidate not found,

            * **JOB_NOT_FOUND** when candidate is not assigned to given job,

            * **ONBOARDING_STATUS_NOT_ACTIVE** when Onboarding Status candidate
            property is not activated,

            * **CANDIDATE_FIELDS_FEATURE_MISSING** when Onboarding Status is not
            accessible. Required feature: 'Candidate Fields'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates:
    get:
      tags:
        - candidates
      summary: Search candidates
      operationId: Candidates_searchResults
      security:
        - key: []
        - oauth:
            - candidates_read
      description: >-
        Only candidates matching all specified criteria and having at least one
        job application are returned.
      parameters:
        - description: >-
            keyword search, for more infromation see [SmartRecruiters
            HelpCenter](https://help.smartrecruiters.com/Getting_Started/Platform/Searching_candidates_via_Candidate_API)
          in: query
          name: q
          schema:
            type: string
        - description: number of elements to return. max value is 100
          in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - description: >
            page identifier of elements to return


            The `pageId` param can be used to fetch multiple page response, in
            case

            the number of results is higher than max number of elements to
            return (specified in the `limit` parameter).

            The `pageId` should not be present when requesting the first page of
            results.

            The pageId of the following page is returned either in the
            `nextPageId` property, or is available

            in the HTTP header `Link` value of relation type `next`.

            Example of the `Link` header:

            ```

            </candidates?limit=10&pageId=SKYfn51wTboVGco6%2FvIsIC%2FYbyYP%2F4WgqHLArvCRtYhQEMCgvp1Zj0ya0wpjfKIblyGRcbHytMcvCehVazcjQA%3D%3D>;
            rel="next"

            ```
          in: query
          name: pageId
          schema:
            type: string
        - description: >-
            job filter to display candidates who applied for a job [id]; can be
            used repeatedly;
          in: query
          name: jobId
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            location keyword search which looks up a string in a candidate’s
            location data; can be used repeatedly; case insensitive; e.g. Krakow
          in: query
          name: location
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            average rating filter to display candidates with a specific average
            rating (integer); can be used repeatedly; e.g. 4
          in: query
          name: averageRating
          deprecated: true
          explode: true
          schema:
            type: array
            items:
              type: integer
              maximum: 5
              minimum: 1
        - description: >-
            candidate’s status filter in a context of a job; can be used
            repeatedly
          in: query
          name: status
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - LEAD
                - NEW
                - IN_REVIEW
                - INTERVIEW
                - OFFERED
                - HIRED
                - REJECTED
                - WITHDRAWN
                - TRANSFERRED
        - description: candidate’s consent status filter; can be used repeatedly
          in: query
          name: consentStatus
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ConsentStatus'
        - description: >-
            candidate’s sub-status filter in a context of a job. Works only in a
            correlation with a set value for the "status" field.
          in: query
          name: subStatus
          schema:
            type: string
        - description: >-
            tag assigned to a candidate; can be used repeatedly; case
            insensitive; e.g. fluent english
          in: query
          name: tag
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            ISO8601-formatted time boundaries for the candidate update time,
            Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
          in: query
          name: updatedAfter
          schema:
            type: string
            format: date-time
        - description: candidate's onboarding status
          in: query
          name: onboardingStatus
          schema:
            type: string
            enum:
              - READY_TO_ONBOARD
              - ONBOARDING_SUCCESSFUL
              - ONBOARDING_FAILED
        - description: >-
            candidate's property id (1-N). Currently it is only possible to
            filter by single-select application fields. Other application field
            type filtering is not possible.
          in: query
          name: propertyId
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: candidate's property value id (1-N)
          in: query
          name: propertyValueId
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: candidate's source type (1-N)
          in: query
          name: sourceType
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: candidate's source subtype (1-N)
          in: query
          name: sourceSubType
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: candidate's source value id (1-N)
          in: query
          name: sourceValueId
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: screening question category (1-N)
          in: query
          name: questionCategory
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: screening question field id (1-N)
          in: query
          name: questionFieldId
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
        - description: screening question field value id (1-N)
          in: query
          name: questionFieldValueId
          explode: true
          schema:
            type: array
            items:
              type: string
            default: []
      responses:
        '200':
          description: Candidates matching search criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidates'
          headers:
            Link:
              description: >
                Links to related resources, in the format defined by

                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).

                This will include a link with relation type `next` to the

                next page (containing `pageId` query parameter), if there is a
                next page.
              schema:
                type: string
        '400':
          description: >
            with codes

            * **FIELDS_CRITERIA_SIZE_VIOLATED** when number of elements of query
            param `propertyId` is not
              equal to number of elements of query param `propertyValueId`
            * **SOURCES_CRITERIA_SIZE_VIOLATED** when number of elements of
            query param `sourceType` is not
              equal to number of elements of query param `sourceSubType` or not
              equal to number of elements of query param `sourceValueId`
            * **SCREENING_QUESTIONS_CRITERIA_SIZE_VIOLATED** when number of
            elements of query param `questionCategory` is not
              equal to number of elements of query param `questionFieldId` or not
              equal to number of elements of query param `questionFieldValueId`
            * **ONBOARDING_STATUS_NOT_ACTIVE** when Onboarding Status candidate
            property is not activated or user's
              company does not have candidate property feature, but user has requested to search candidates by
              onboardingStatus query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - candidates
      summary: Create a new candidate and assign to a Talent Pool
      operationId: Candidates_createWithSourceDetails
      security:
        - key: []
        - oauth:
            - candidates_create
      description: >
        Create a new candidate and assign to a Talent Pool.


        **Tracking candidate source**


        When adding a new candidate, it's very important you track its source
        appropriately. In order to associate a source with your app/integration,
        add below object to a candidate body object for this endpoint:

        ```

        {
          "sourceDetails": {
            "sourceTypeId": "string",
            "sourceSubTypeId": "string",
            "sourceId": "string"
          }
        }

        ```

        **sourceTypeId** - it's a Source Type - available values can be found
        using [get
        /configuration/sources](https://developers.smartrecruiters.com/reference/configurationsourcetypes-1)
        endpoint


        **sourceSubTypeId** - it's a Source Subtype, an optional parameter -
        available values can be found using [get
        /configuration/sources](https://developers.smartrecruiters.com/reference/configurationsourcetypes-1)
        endpoint


        **sourceId** - it's a Source Id - available values for a given
        sourceTypeId can be found using [get
        /configuration/sources/:sourceTypeId/values](https://developers.smartrecruiters.com/reference/configurationsourcevaluesall-1)
        endpoint


        NOTE: Not defining the source will default to **API** source.


        NOTE II: In case you can't find an appropriate source to track against
        you can:

        * Create a custom source for each customer account separately on [this
        admin
        page](https://www.smartrecruiters.com/settings/configuration/custom-sources)
        (you need to be logged in as an admin to the customer account in order
        to view this page)

        * Request to
        [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com)
        adding a standard source that will be available for all customers if
        your app/integration is productised (available to all SmartRecruiters
        customers)
      requestBody:
        $ref: '#/components/requestBodies/CandidateInput'
      responses:
        '201':
          description: Created candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDetails'
        '400':
          description: >
            with codes

            * **SOURCE_NOT_FOUND** when provided source does not exist,

            * **SUBTYPE_REQUIRED** when there are more sources and subtype
            parameter is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to create
            candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with code **SOURCE_TYPE_NOT_FOUND** when provided source type does
            not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/cv:
    post:
      tags:
        - candidates
      summary: Parse a resume, create a candidate and assign to a Talent Pool.
      operationId: Candidates_parseResumeAndAssignToTalentPool
      security:
        - key: []
        - oauth:
            - candidates_create
      description: Parse a resume, create a candidate and assign to a Talent Pool.
      requestBody:
        $ref: '#/components/requestBodies/Resume'
      responses:
        '201':
          description: Created candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDetails'
        '400':
          description: >
            with codes

            * **SOURCE_NOT_FOUND** when provided source does not exist,

            * **SUBTYPE_REQUIRED** when there are more sources and subtype
            parameter is required,

            * **UNPARSABLE_RESUME** when provided resume cannot be parsed, e.g.
            an image

            * **INCOMPLETE_RESUME** when provided resume does not contain all
            required information to create a candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to create
            candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            **SOURCE_TYPE_NOT_FOUND** when provided source type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/consent-requests:
    post:
      tags:
        - candidates
      summary: Request consent from multiple candidates
      operationId: Candidates_requestConsentFromMultiple
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >
        Read more about GDPR tools on [SmartRecruiters
        HelpCenter](https://help.smartrecruiters.com/GDPR/GDPR_Tools_for_Companies)
      requestBody:
        required: true
        $ref: '#/components/requestBodies/BatchConsentRequest'
      responses:
        '201':
          description: >
            Consent requests has been scheduled.


            The response contains a list of results for each individual consent
            request in the same order as in the request.


            A single result `status` property value could be:

            * 202 - consent request successfully scheduled,

            * 403 - cannot request consent from candidate as no privacy policy
            has been configured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRequestsResults'
  /candidates/{id}/consent:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Status of candidate consent
      operationId: Candidates_getStatusOfConsent
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get candidate consent status
      responses:
        '200':
          description: Candidate's latest consent status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateConsentStatus'
        '403':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/consents:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Candidate consent decisions
      operationId: Candidates_getConsentDecisions
      security:
        - key: []
        - oauth:
            - candidates_read
      description: >
        Depending on the consent approach which a customer chooses, the response
        will either contain one candidates'

        consent decision - known as "single consent" - or contain one
        candidates' consent broken out by the data scopes

        which the customer has subscribed to - such as SmartRecruit and
        SmartCRM. This is referred to as "separated consent".

        Provided there is at least one pending consent request (without a
        decision) for a candidate, the response

        contains a date and time of the most recent of such consent requests.


        Read more about GDPR tools on [SmartRecruiters
        HelpCenter](https://help.smartrecruiters.com/GDPR/GDPR_Tools_for_Companies)
      responses:
        '200':
          description: Candidate's consent decisions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateConsentDecisions'
        '403':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Get details of a candidate
      operationId: Candidates_getDetails
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get details of a candidate
      responses:
        '200':
          description: Candidate details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDetails'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - candidates
      summary: Delete Candidate
      operationId: Candidates_removeCandidateById
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Delete candidate
      responses:
        '204':
          description: Candidate successfully deleted
        '403':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - candidates
      summary: Update candidate personal information
      operationId: Candidates_updatePersonalInfo
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Update candidate details
      requestBody:
        description: Candidate personal information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalDetails'
      responses:
        '200':
          description: Candidate updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDetails'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to update
            candidate details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code:
            * **CANDIDATE_NOT_FOUND** when candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/attachments:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Get list candidate's attachments.
      operationId: Candidates_listAttachments
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get list of candidate's attachments.
      responses:
        '200':
          description: Candidate's attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachments'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Attachment file access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
        - candidates
      summary: Attach files to a candidate.
      operationId: Candidates_attachFiles
      security:
        - key: []
        - oauth:
            - candidates_create
      description: Attach files to a candidate.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidatesAttachFilesRequest'
      responses:
        '201':
          description: Candidate's attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '400':
          description: >
            with codes:

            * **FILE_ALREADY_EXIST** when file aleady exists,

            * **INVALID_FILE** when file extension not allowed, corrupted file
            or wrong file type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            with code **ATTACHMENT_LIMIT_EXCEEDED** when no more files can be
            added to candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/attachments/{attachmentId}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Get a candidate's attachment.
      operationId: Candidates_getAttachmentById
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get a candidate's attachment.
      parameters:
        - description: Identifier of an attachment
          in: path
          name: attachmentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Attachment content
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: with code FILE_NOT_FOUND when file does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/jobs/{jobId}/attachments:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - candidates
      summary: Get list of candidate's attachments in context of given job.
      operationId: Candidates_getAttachmentsByJobId
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get list of candidate's attachments in context of given job.
      responses:
        '200':
          description: Candidate's attachments in context of given job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAttachmentsForJob'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to view
            candidate attachments in context of given job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            with code **JOB_NOT_FOUND** when candidate is not assigned to given
            job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - candidates
      summary: Attach file to candidate in context of given job.
      operationId: Candidates_attachFileToJobCandidate
      security:
        - key: []
        - oauth:
            - candidates_create
      description: Attach file to candidate in context of given job.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidatesAttachFileToJobCandidateRequest'
      responses:
        '201':
          description: Candidate's attachment in context of given job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAttachmentForJob'
        '400':
          description: >
            with codes:

            * **FILE_ALREADY_EXIST** when file already exists,

            * **INVALID_FILE** when file extension not allowed, corrupted file
            or wrong file type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to add
            file to candidate in context of given job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            with code **JOB_NOT_FOUND** when candidate is not assigned to given
            job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            with code **ATTACHMENT_LIMIT_EXCEEDED** when no more files can be
            added to candidate in context of given job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/attachments/{attachmentId}:
    parameters:
      - $ref: '#/components/parameters/attachmentId'
    get:
      tags:
        - candidates
      summary: Get candidate's attachment.
      operationId: Candidates_getAttachment
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get candidate's attachment.
      responses:
        '200':
          description: Candidate's Attachment
        '403':
          description: >
            with codes:

            * **PERMISSION_DENIED** when you are not permitted to download
            attachment,

            * **MALWARE_DETECTED** when file has been marked as malicious.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: with code **FILE_NOT_FOUND** when attachment does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - candidates
      summary: Delete attachment.
      operationId: Candidates_deleteAttachment
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Delete attachment.
      responses:
        '204':
          description: Attachment successfully deleted
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to delete
            attachment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: with code **FILE_NOT_FOUND** when attachment does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/jobs/{jobId}/status:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    put:
      tags:
        - candidates
      summary: Update a candidate's status
      operationId: Candidates_updateStatus
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Update a candidate's status
      requestBody:
        $ref: '#/components/requestBodies/CandidateStatus'
      responses:
        '204':
          description: ''
        '400':
          description: >
            with codes

            * **NO_REASON_SUPPORT_FOR_STATUS** when reason is not available for
            given status (availably only for REJECTED and WITHDRAWN)

            * **REASON_NOT_FOUND** when given reason does not exist

            * **REQUIRED_SUB_STATUS_OMITTED** when there is a required sub
            status before the status you want to move a candidate to
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with codes

            * **PERMISSION_DENIED** when you are not permitted to update
            candidate's status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate is not assigned to given job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/status:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    put:
      tags:
        - candidates
      summary: Update a candidate's status on primary assignment
      operationId: Candidates_updateStatusOnPrimaryAssignment
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >-
        Update a candidate's status on primary assignment. Please use `PUT
        /candidates/{id}/jobs/{jobId}/status` instead.
      requestBody:
        $ref: '#/components/requestBodies/CandidateStatus'
      responses:
        '204':
          description: ''
        '400':
          description: >
            with codes

            * **NO_REASON_SUPPORT_FOR_STATUS** when reason is not available for
            given status (availably only for REJECTED and WITHDRAWN)

            * **REASON_NOT_FOUND** when given reason does not exist

            * **REQUIRED_SUB_STATUS_OMITTED** when there is a required sub
            status before the status you want to move a candidate to
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with codes

            * **PERMISSION_DENIED** when you are not permitted to update
            candidate's status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/status/history:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Get candidate's status history
      operationId: Candidates_getStatusHistory
      security:
        - key: []
        - oauth:
            - candidates_read
            - candidate_status_read
      description: >-
        Get candidate's status history. Please use `GET
        /candidates/{id}/jobs/{jobId}/status/history` instead.
      responses:
        '200':
          description: Candidate's status history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateStatusHistoryList'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/jobs/{jobId}/status/history:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - candidates
      summary: Get candidate's status history for a candidate's job
      operationId: Candidates_getStatusHistory
      security:
        - key: []
        - oauth:
            - candidates_read
            - candidate_status_read
      description: Get candidate's status history for a candidate's job
      responses:
        '200':
          description: Candidate's status history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateStatusHistoryList'
        '403':
          description: >
            with code **NO_ACCESS_TO_CANDIDATE** when not permitted to see this
            candidate

            with code **NO_ACCESS_TO_JOB** when not permitted to see this
            candidate in context of given job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with code **CANDIDATE_NOT_FOUND** when candidate not found

            with code **JOB_NOT_FOUND** when candidate is not assigned to given
            job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/jobs/{jobId}/source:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    put:
      tags:
        - candidates
      summary: Update a candidate's source
      operationId: Candidates_updateSource
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: Update a candidate's source
      requestBody:
        description: Candidate source to be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateSource'
        required: true
      responses:
        '204':
          description: ''
        '400':
          description: >
            with codes:

            * **INVALID_SOURCE_TYPE** when provided type does not exist,

            * **SUBTYPE_REQUIRED** when there are more sources and subtype
            parameter is required,

            * **INVALID_SOURCE** when source id does not exist in provided type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate is not assigned to given job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/properties:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - candidates
      summary: Get candidate property values for a candidate
      operationId: Candidates_getPropertyValues
      security:
        - key: []
        - oauth:
            - candidates_read
      description: |
        Please use `GET /candidates/{id}/jobs/{jobId}/properties` instead.
        Returns
        ```
        {}
        ```
        when there is no value set for a candidate property.
      parameters:
        - description: context for candidate properties to display
          in: query
          name: context
          schema:
            type: string
            enum:
              - PROFILE
              - OFFER_FORM
              - HIRE_FORM
              - OFFER_APPROVAL_FORM
      responses:
        '200':
          description: Candidate property values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProperties'
        '403':
          description: Candidate properties access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code **CANDIDATE_NOT_FOUND** when candidate does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/jobs/{jobId}/properties:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - candidates
      summary: Get candidate property values for a candidate's job
      operationId: Candidates_getPropertyValuesForJob
      security:
        - key: []
        - oauth:
            - candidates_read
      description: |
        Returns
        ```
        {}
        ```
        when there is no value set for a candidate property.
      parameters:
        - description: context for candidate properties to display
          in: query
          name: context
          schema:
            type: string
            enum:
              - PROFILE
              - OFFER_FORM
              - HIRE_FORM
              - OFFER_APPROVAL_FORM
      responses:
        '200':
          description: Candidate property values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateProperties'
        '403':
          description: Candidate properties access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with code **JOB_NOT_FOUND** when candidate is not assigned to given
            job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - candidates
      summary: Add/update candidate properties values
      operationId: Candidates_updateCandidateProperties
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >
        Set candidate properties values for the candidate's job


        Below you can find a list of value examples, dependent on different

        candidate property types.


        ### BOOLEAN


        ```

        [{ "id": "propertyId", "value": true }]

        ```


        Value has to be `true` or `false`.


        ### COUNTRY


        ```

        [{ "id": "propertyId", "value": "us" }]

        ```


        Value has to be lowercase string in ISO 3166-1 alpha-2 format.


        ### CURRENCY


        ```

        [{ "id": "propertyId",
           "value": {
             "code": "GBP",
             "value": 23232
           }
         }]
        ```


        Code of value is a currency code in ISO 4217 format.


        ### DATE


        ```

        [{ "id": "propertyId", "value": "2015-11-17T23:00:00.000Z" }]

        ```


        ### NUMBER, PERCENT


        ```

        [{ "id": "propertyId", "value": 42 }]

        ```


        ### REGION


        ```

        [{ "id": "propertyId", "value": "us-wa" }]

        ```


        Value has to be lowercase string in ISO 3166-2 compatible format.


        ### SINGLE_SELECT


        ```

        [{ "id": "propertyId", "value": "f6fe768f-b5e6-4794-9938-c2f42ab0a572"
        }]

        ```


        Value has to be an id of candidate property value (provided by `GET

        /configuration/candidate-properties/{propertyId}/values`).


        ### TEXT


        ```

        [{ "id": "propertyId", "value": "Example text" }]

        ```


        ### USER


        ```

        [{ "id": "propertyId", "value": "50fe861de4b00265edec6775" }]

        ```


        Value has to be a valid user id


        ### Resetting a value


        To reset a value for any of the above types, please pass:


        ```

        [{"id": "propertyId"}]

        ```
      requestBody:
        $ref: '#/components/requestBodies/BatchCandidatePropertyValue'
      responses:
        '204':
          description: Properties successfully updated.
        '400':
          description: >
            with codes

            * **COUNTRY_NOT_FOUND** when candidate property of COUNTRY type and
            country with provided code does not exist,

            * **REGION_NOT_FOUND** when candidate property of REGION type and
            region with provided code does not exist,

            * **USER_NOT_FOUND** when candidate property of USER type and user
            with provided id does not exist,

            * **CURRENCY_NOT_FOUND** when candidate property of CURRENCY type
            and currency with provided code does not exist,

            * **VALUE_NOT_FOUND** when candidate property of SINGLE_SELECT type
            and value with provided id does not exist,

            * **INVALID_TEXT_FORMAT** when candidate property of TEXT type and
            its value contains forbidden characters

            * **INVALID_EMAIL_FORMAT** when candidate property of TEXT type
            (with enabled email validation) and its value contains invalid email
            address

            * **INVALID_TEXT_PATTERN_FORMAT** when candidate property of TEXT
            type (with enabled custom text pattern validation) and its value
            contains value that does not match the pattern

            * **INVALID_NUMBER_RANGE** when candidate property of NUMBER type
            (with enabled application fields date and number range validation)
            and its value is not in the defined range

            * **INVALID_DATE_RANGE** when candidate property of DATE type (with
            enabled application fields date and number range validation) and its
            value is not in the defined range

            * **INACCESSIBLE_FIELD** when candidate property cannot be set due
            to its own configuration

            * **DUPLICATE_PROPERTIES** when request contains multiple candidate
            properties with the same id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Candidate properties access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes

            * **PROPERTY_NOT_FOUND** when one of the provided candidate
            properties does not exist

            * **JOB_NOT_FOUND** when candidate is not assigned to given job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/properties/{propertyId}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    put:
      tags:
        - candidates
      summary: Add/update candidate property value
      operationId: Candidates_updatePropertyValue
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: >
        Please use `PUT /candidates/{id}/jobs/{jobId}/properties` instead. Set a
        candidate property value for the candidate.

        Below you can find a list of value examples, dependent on different
        candidate property types.

        * **BOOLEAN**

        ```

        { "value": true }

        ```

        Value has to be `true` or `false`.

        * **COUNTRY**

        ```

        { "value": "us" }

        ```

        Value has to be lowercase string in ISO 3166-1 alpha-2 format.

        * **CURRENCY**

        ```

        {
          "value": {
            "code": "GBP",
            "value": 23232
          }
        }

        ```

        Code of value is a currency code in ISO 4217 format.

        * **DATE**

        ```

        { "value": "2015-11-17T23:00:00.000Z" }

        ```

        * **NUMBER, PERCENT**

        ```

        { "value": 42 }

        ```

        * **REGION**

        ```

        { "value": "us-wa" }

        ```

        Value has to be lowercase string in ISO 3166-2 compatible format.

        * **SINGLE_SELECT**

        ```

        { "value": "f6fe768f-b5e6-4794-9938-c2f42ab0a572" }

        ```

        Value has to be an id of candidate property value (provided by GET
        /configuration/candidate-properties/{propertyId}/values).

        * **TEXT**

        ```

        { "value": "Example text" }

        ```

        * **USER**

        ```

        { "value": "50fe861de4b00265edec6775" }

        ```

        Value has to be a valid user id


        To reset a value for any of the above types, please pass

        ```

        {}

        ```
      parameters:
        - description: Identifier of a Candidate Property
          in: path
          name: propertyId
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CandidatePropertyInputValue'
      responses:
        '204':
          description: Property successfully updated.
        '400':
          description: >
            with codes

            * **COUNTRY_NOT_FOUND** when candidate property of COUNTRY type and
            country with provided code does not exist,

            * **REGION_NOT_FOUND** when candidate property of REGION type and
            region with provided code does not exist,

            * **USER_NOT_FOUND** when candidate property of USER type and user
            with provided id does not exist,

            * **CURRENCY_NOT_FOUND** when candidate property of CURRENCY type
            and currency with provided code does not exist,

            * **INVALID_TEXT_FORMAT** when candidate property of TEXT type and
            its value contains forbidden characters

            * **INVALID_EMAIL_FORMAT** when candidate property of TEXT type
            (with enabled email validation) and its value contains invalid email
            address

            * **INVALID_TEXT_PATTERN_FORMAT** when candidate property of TEXT
            type (with enabled custom text pattern validation) and its value
            contains value that does not match the pattern

            * **INVALID_NUMBER_RANGE** when candidate property of NUMBER type
            (with enabled application fields date and number range validation)
            and its value is not in the defined range

            * **INVALID_DATE_RANGE** when candidate property of DATE type (with
            enabled application fields date and number range validation) and its
            value is not in the defined range

            * **INACCESSIBLE_FIELD** when candidate property cannot be set due
            to its own configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Candidate properties access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with code **PROPERTY_NOT_FOUND** when candidate property does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/jobs/{jobId}/properties/{propertyId}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    put:
      tags:
        - candidates
      summary: Add/update candidate property value
      operationId: Candidates_updatePropertyValue
      security:
        - key: []
        - oauth:
            - candidates_manage
      description: |
        Please use `PUT /candidates/{id}/jobs/{jobId}/properties` instead.

        Set a candidate property value for the candidate.

        Below you can find a list of value examples, dependent on different
        candidate property types.

        ### BOOLEAN

        ```
        { "value": true }
        ```

        Value has to be `true` or `false`.

        ### COUNTRY

        ```
        { "value": "us" }
        ```

        Value has to be lowercase string in ISO 3166-1 alpha-2 format.

        ### CURRENCY

        ```
        {
          "value": {
            "code": "GBP",
            "value": 23232
          }
        }
        ```

        Code of value is a currency code in ISO 4217 format.

        ### DATE

        ```
        { "value": "2015-11-17T23:00:00.000Z" }
        ```

        ### NUMBER, PERCENT

        ```
        { "value": 42 }
        ```

        ### REGION

        ```
        { "value": "us-wa" }
        ```

        Value has to be lowercase string in ISO 3166-2 compatible format.

        ### SINGLE_SELECT

        ```
        { "value": "f6fe768f-b5e6-4794-9938-c2f42ab0a572" }
        ```

        Value has to be an id of candidate property value (provided by `GET
        /configuration/candidate-properties/{propertyId}/values`).

        ### TEXT

        ```
        { "value": "Example text" }
        ```

        ### USER

        ```
        { "value": "50fe861de4b00265edec6775" }
        ```

        Value has to be a valid user id

        ### Resetting a value

        To reset a value for any of the above types, please pass:

        ```
        {}
        ```
      parameters:
        - description: Identifier of a Candidate Property
          in: path
          name: propertyId
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CandidatePropertyInputValue'
      responses:
        '204':
          description: Property successfully updated.
        '400':
          description: >
            with codes

            * **COUNTRY_NOT_FOUND** when candidate property of COUNTRY type and
            country with provided code does not exist,

            * **REGION_NOT_FOUND** when candidate property of REGION type and
            region with provided code does not exist,

            * **USER_NOT_FOUND** when candidate property of USER type and user
            with provided id does not exist,

            * **CURRENCY_NOT_FOUND** when candidate property of CURRENCY type
            and currency with provided code does not exist,

            * **VALUE_NOT_FOUND** when candidate property of SINGLE_SELECT type
            and value with provided id does not exist,

            * **INVALID_TEXT_FORMAT** when candidate property of TEXT type and
            its value contains forbidden characters

            * **INVALID_EMAIL_FORMAT** when candidate property of TEXT type
            (with enabled email validation) and its value contains invalid email
            address

            * **INVALID_TEXT_PATTERN_FORMAT** when candidate property of TEXT
            type (with enabled custom text pattern validation) and its value
            contains value that does not match the pattern

            * **INVALID_NUMBER_RANGE** when candidate property of NUMBER type
            (with enabled application fields date and number range validation)
            and its value is not in the defined range

            * **INVALID_DATE_RANGE** when candidate property of DATE type (with
            enabled application fields date and number range validation) and its
            value is not in the defined range

            * **INACCESSIBLE_FIELD** when candidate property cannot be set due
            to its own configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Candidate properties access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes
            * **PROPERTY_NOT_FOUND** when candidate property does not exist
            * **JOB_NOT_FOUND** when candidate is not assigned to given job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /candidates/{id}/jobs/{jobId}/screening-answers:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - candidates
      summary: Get candidate screening answers for a candidate's job
      operationId: Candidates_getScreeningAnswersByJob
      security:
        - key: []
        - oauth:
            - candidates_read
      description: >
        Returns candidate screening question answers for a candidate's job.
        Returns an empty array when there is no screening answers for given
        candidate's job.


        UUID in question category indicates custom question. Other value
        indicates predefined library question.


        In order to create human readable format of answers please use label
        properties. Ignore labels for answers with single field.

        Based on labels from included example you can get following text:


        ```text

        Do you have a current driver's license?
         - No

        Free text question
         - Long text answer for free text questions

        Checkbox question
         - Confirmed

        Legacy acknowledgment question - replaced by checkbox
         - Confirmed

        Gender, Race and Ethnicity
        [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)
         - Gender: Male
         - Race/Ethnicity: Prefer not to answer

        Currency question
         - 1234

        Multiple choice dropdown
         - third value, second value, first value

        Languages
         1)
         - Language: English
         - Proficiency level: Advanced
         2)
         - Language: Spanish
         - Proficiency level: Beginner
         3)
         - Language: French
         - Proficiency level: Intermediate

        What are your preferred work shifts?

        1)
         - Day: Weekdays
         - From: 08:00 AM
         - To: 04:00 PM
        2)
         - Day: Weekdays
         - From: 10:00 AM
         - To: 02:00 PM

        Your Name
         - John
        ```
      responses:
        '200':
          description: Candidate screening question answers for a candidate's job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreeningAnswers'
              example:
                totalFound: 10
                content:
                  - id: 0e91d24a-d85b-487d-99ef-eeaca7277d77
                    type: radio
                    category: drivingCurrent
                    name: Driving Current
                    label: Do you have a current driver's license?
                    records:
                      - fields:
                          - id: value
                            label: Value
                            values:
                              - id: '0'
                                label: 'No'
                  - id: a00c06fb-6693-4138-a005-57c92ab796b6
                    type: textarea
                    category: 04f8fac1-8799-47ef-af54-7dcc4cd10bb9
                    name: Free text question
                    label: Free text question
                    records:
                      - fields:
                          - id: valueX
                            label: Value
                            values:
                              - id: Long text answer for free text questions
                                label: Long text answer for free text questions
                  - id: a98ba616-d7ed-43e5-b5b5-23a9eca031e3
                    type: checkbox
                    category: ba9acad1-71b3-42a1-a059-c05e1bbbc301
                    name: Checkbox question
                    label: Checkbox question
                    records:
                      - fields:
                          - id: confirm
                            label: Checkbox question
                            values:
                              - id: '1'
                                label: Confirmed
                  - id: eb93fc47-6f72-4d97-a60e-a265f8621e84
                    type: checkbox
                    category: 20ef7ecb-09c4-4afd-80fc-6a2700a1c3ba
                    name: Legacy acknowledgment question
                    label: Legacy acknowledgment question - replaced by checkbox
                    records:
                      - fields:
                          - id: confirmX
                            label: >-
                              Legacy acknowledgment question - replaced by
                              checkbox
                            values:
                              - id: 1X
                                label: Confirmed
                  - id: 40bc2e3b-fd1c-47e8-b514-2365fc705447
                    type: eeo
                    category: eeoInformation
                    name: EEO - Race and Gender
                    label: >-
                      Gender, Race and Ethnicity
                      [(definitions)](https://smartrecruiters.com/oneclick/static/html/en/eeoGeneral.html)
                    records:
                      - fields:
                          - id: gender
                            label: Gender
                            values:
                              - id: 0X
                                label: Male
                          - id: ethnicity
                            label: Race/Ethnicity
                            values:
                              - id: '6'
                                label: Prefer not to answer
                  - id: f9ffb0eb-c8e7-4c18-bfa3-7fb22af7da03
                    type: currency
                    category: b2e9b169-77a6-4425-b82a-8dd80c84005b
                    name: Currency question
                    label: Currency question
                    records:
                      - fields:
                          - id: amount
                            label: Value
                            values:
                              - id: '1234'
                                label: '1234'
                  - id: 910ceed4-a708-4c22-8c10-f53e1b053a7d
                    type: select
                    category: 445c45ae-8e5a-48c6-9e05-0846d35bfa6d
                    name: Multiple choice dropdown
                    label: Multiple choice dropdown
                    records:
                      - fields:
                          - id: valueX
                            label: Value
                            values:
                              - id: d6c2c580-5f51-4960-a6e5-a8bc8849f35c
                                label: third value
                              - id: 5e9cc528-9640-454d-8ef6-19bd06ce2ea9
                                label: second value
                              - id: 10a341a3-b8ff-4121-9dee-75b442e64f00
                                label: first value
                  - id: 1549f34c-fdda-459a-8c01-be8ab6cef19f
                    type: languages
                    category: languages
                    name: Languages
                    label: Languages
                    records:
                      - fields:
                          - id: lang
                            label: Language
                            values:
                              - id: English
                                label: English
                          - id: level
                            label: Proficiency level
                            values:
                              - id: '2'
                                label: Advanced
                      - fields:
                          - id: langX
                            label: Language
                            values:
                              - id: Spanish
                                label: Spanish
                          - id: levelX
                            label: Proficiency level
                            values:
                              - id: 0X
                                label: Beginner
                      - fields:
                          - id: langX
                            label: Language
                            values:
                              - id: French
                                label: French
                          - id: levelX
                            label: Proficiency level
                            values:
                              - id: 1X
                                label: Intermediate
                  - id: 2bb9faa5-dbe9-42dc-9c00-381dddb0abb6
                    type: work_shifts
                    category: preferredWorkShifts
                    name: Work Shifts
                    label: What are your preferred work shifts?
                    records:
                      - fields:
                          - id: day
                            label: Day
                            values:
                              - id: 2X
                                label: Weekdays
                          - id: from
                            label: From
                            values:
                              - id: '8'
                                label: 08:00 AM
                          - id: to
                            label: To
                            values:
                              - id: '16'
                                label: 04:00 PM
                      - fields:
                          - id: dayX
                            label: Day
                            values:
                              - id: 2X
                                label: Weekdays
                          - id: fromX
                            label: From
                            values:
                              - id: '10'
                                label: 10:00 AM
                          - id: toX
                            label: To
                            values:
                              - id: '14'
                                label: 02:00 PM
                  - id: 6c0ed428-f167-4ab0-967d-564560617e7b
                    type: text
                    category: yourName
                    name: Your Name
                    label: Your Name
                    records:
                      - fields:
                          - id: valueX
                            values:
                              - id: John
                                label: John
        '403':
          description: Screening Question Answers access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Screening Question Answers not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/candidates:
    parameters:
      - $ref: '#/components/parameters/jobId'
    post:
      tags:
        - candidates
      summary: Create a new candidate and assign to a job
      operationId: Candidates_createWithSource
      security:
        - key: []
        - oauth:
            - candidates_create
      description: >
        Create a new candidate and assign to a job.


        **Tracking candidate source**


        When adding a new candidate, it's very important you track its source
        appropriately. In order to associate a source with your app /
        integration, add the below object to a candidate body object for this
        endpoint:

        ```

        {
          "sourceDetails": {
            "sourceTypeId": "string",
            "sourceSubTypeId": "string",
            "sourceId": "string"
          }
        }

        ```

        **sourceTypeId** - it's a Source Type - available values can be found
        using [get
        /configuration/sources](https://developers.smartrecruiters.com/reference/configurationsourcetypes-1)
        endpoint


        **sourceSubTypeId** - it's a Source Subtype, an optional parameter -
        available values can be found using [get
        /configuration/sources](https://developers.smartrecruiters.com/reference/configurationsourcetypes-1)
        endpoint


        **sourceId** - it's a Source Id - available values for a given
        sourceTypeId can be found using [get
        /configuration/sources/:sourceTypeId/values](https://developers.smartrecruiters.com/reference/configurationsourcevaluesall-1)
        endpoint


        NOTE: Not defining the source will default to **API** source.


        NOTE II: In case you can't find an appropriate source to track against
        you can:

        * Create a custom source for each customer account separately on [this
        admin
        page](https://www.smartrecruiters.com/settings/configuration/custom-sources\)
        (you need to be logged in as an admin to the customer account in order
        to view this page)

        * Request to
        [partners@smartrecruiters.com](mailto:partners@smartrecruiters.com)
        adding a standard source that will be available for all customers if
        your app / integration is productised (available to all SmartRecruiters
        customers)
      requestBody:
        $ref: '#/components/requestBodies/CandidateInput'
      responses:
        '201':
          description: Created candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDetails'
        '400':
          description: >
            with codes

            * **SOURCE_NOT_FOUND** when provided source does not exist,

            * **SUBTYPE_REQUIRED** when there are more sources and subtype
            parameter is required

            * **INVALID_SOURCE_ID** when invalid source ID provided for a
            specified sourceIdType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: |
            with code **PERMISSION_DENIED** when job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to create
            candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with code **SOURCE_TYPE_NOT_FOUND** when provided source type does
            not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/candidates/cv:
    parameters:
      - $ref: '#/components/parameters/jobId'
    post:
      tags:
        - candidates
      summary: Parse a resume, create a candidate and assign to a job.
      operationId: Candidates_parseResumeAndAssignToJob
      security:
        - key: []
        - oauth:
            - candidates_create
      description: Parse a resume, create a candidate and assign to a job.
      requestBody:
        $ref: '#/components/requestBodies/Resume'
      responses:
        '201':
          description: Created candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDetails'
        '400':
          description: >
            with codes

            * **SOURCE_NOT_FOUND** when provided source does not exist,

            * **SUBTYPE_REQUIRED** when there are more sources and subtype
            parameter is required

            * **UNPARSABLE_RESUME** when provided resume cannot be parsed, e.g.
            an image

            * **INCOMPLETE_RESUME** when provided resume does not contain all
            required information to create a candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Job access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            with code **PERMISSION_DENIED** when you are not permitted to create
            candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            **SOURCE_TYPE_NOT_FOUND** when provided source type does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/jobs/{jobId}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - candidates
      summary: Get details of a candidate's application to a job
      operationId: Candidates_getApplicationDetails
      security:
        - key: []
        - oauth:
            - candidates_read
      description: Get details of a candidate's application to a job
      responses:
        '200':
          description: Candidate's application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/company:
    get:
      tags:
        - configuration
      summary: Get company information
      operationId: Configuration_getCompanyInformation
      security:
        - key: []
        - oauth:
            - company_read
            - configuration_read
      description: Get all information about your company.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyConfiguration'
  /configuration/job-properties:
    get:
      tags:
        - configuration
      summary: Get a list of available job properties
      operationId: Configuration_getAvailableProperties
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get a list of available job properties.
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyDefinitionList'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - configuration
      summary: Create a job property
      operationId: Configuration_createJobProperty
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Creates a job property
      requestBody:
        description: job property to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPropertyDefinitionCreationRequest'
      responses:
        '201':
          description: Created job property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyDefinition'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            With codes:

            * *JOB_PROPERTY_LIMIT_EXCEEDED* when job properties limit is
            reached,

            * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is
            restricted.
  /configuration/job-properties/{id}:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
    get:
      tags:
        - configuration
      summary: Get job property by id
      operationId: Configuration_getPropertyById
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get job property by id
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyDefinition'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - configuration
      summary: Update a job property
      operationId: Configuration_updateJobProperty
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Updates a job property.
      requestBody:
        $ref: '#/components/requestBodies/JSONPatch'
      responses:
        '200':
          description: Updated job property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyDefinition'
        '400':
          description: Job property is not editable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            With code:

            * *DEFINITION_NAME_IS_NOT_ALLOWED* when job property name is
            restricted.
  /configuration/job-properties/{id}/translations:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
    patch:
      tags:
        - configuration
      summary: Add a job property's translations
      operationId: Configuration_addJobPropertyTranslations
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Submit a job property's translations to different languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelTranslations'
        required: true
      responses:
        '204':
          description: Translations accepted
        '400':
          description: |
            with codes
              *  *PROPERTY_INVALID* - when value contains invalid characters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes
              *  *JOB_PROPERTY_NOT_FOUND* - when job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >-
            There is more than one translation with the same language in the
            input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Invalid input: missing required data, invalid format'
  /configuration/job-properties/{id}/values:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
    get:
      tags:
        - configuration
      summary: Get available job property values
      operationId: Configuration_getJobPropertyValues
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get available job property values.
      parameters:
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/pageId'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyValueDefinitionList'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - configuration
      summary: Create a job property value
      operationId: Configuration_createJobPropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Creates a job property value.
      requestBody:
        description: job property object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPropertyValueDefinition'
      responses:
        '201':
          description: Created job property value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyValueDefinition'
        '400':
          description: >
            when value is invalid with codes:

            * *VALUES_NOT_ALLOWED* when values are not allowed (e.g. for free
            text fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: When job property not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When job property value with given label already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            when value id is invalid or with codes:

            * *ACTIVE_VALUES_LIMIT_REACHED* when limit of active job property
            values is reached

            * *VALUES_LIMIT_REACHED* when the limit of job property values
            (active and inactive) is reached

            * *VALUE_LABEL_IS_BLANK* when provided label is blank

            * *VALUE_LABEL_IS_INVALID* when provided label is not valid, e.g.
            contains leading/trailing whitespaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/job-properties/{id}/values/{valueId}:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyValueId'
    delete:
      tags:
        - configuration
      summary: Archive a job property value
      operationId: Configuration_archiveJobPropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: >-
        Archive a job property value. Please use `PUT
        /configuration/job-properties/{id}/archive-values/{valueId}` instead.
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * *JOB_PROPERTY_NOT_FOUND* when job property does not exist

            * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    put:
      tags:
        - configuration
      summary: Unarchive a job property value
      operationId: Configuration_unarchiveJobPropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: >-
        Unarchive a job property value. `DELETE
        /configuration/job-properties/{id}/archive-values/{valueId}` instead.
      responses:
        '204':
          description: ''
        '404':
          description: >
            with codes:

            * *JOB_PROPERTY_NOT_FOUND* when job property does not exist

            * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            with codes:

            * *VALUE_LABEL_IS_INVALID* when value label contains invalid
            characters. In order to unarchive the value, first update the label
            with only valid characters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
        - configuration
      summary: Update a job property value
      operationId: Configuration_updateJobPropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: >-
        Update a job property value. Returns an updated job property value
        object.
      requestBody:
        $ref: '#/components/requestBodies/JSONPatch'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPropertyValueDefinition'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * *JOB_PROPERTY_NOT_FOUND* when job property does not exist

            * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When label being updated conflicts with already existing one.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            with input validation fails or with codes:

            * *ACTIVE_VALUES_LIMIT_REACHED* when limit of active job property
            values is reached.

            * *JSON_PATCH_INVALID* when patch json is invalid.

            * *VALUE_LABEL_IS_BLANK* when provided label is blank

            * *VALUE_LABEL_IS_INVALID* when provided label is not valid, e.g.
            contains leading/trailing whitespaces
  /configuration/job-properties/{id}/values/{valueId}/translations:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyValueId'
    patch:
      tags:
        - configuration
      summary: Add a job property value's translations
      operationId: Configuration_addJobPropertyValueTranslations
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Submit a job property value's translations to different languages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelTranslations'
        required: true
      responses:
        '204':
          description: Translations accepted
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes
              *  *JOB_PROPERTY_NOT_FOUND* - when job property not found
              *  *JOB_PROPERTY_VALUE_NOT_FOUND* when job property's value with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >-
            There is more than one translation with the same language in the
            input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Invalid input: missing required data, invalid format'
  /configuration/job-properties/{id}/archive-values/{valueId}:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyValueId'
    put:
      tags:
        - configuration
      summary: Archive a job property value
      operationId: Configuration_archiveJobPropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Archive a job property value
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * *JOB_PROPERTY_NOT_FOUND* when job property does not exist

            * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - configuration
      summary: Unarchive a job property value
      operationId: Configuration_unarchiveJobPropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Unarchive a job property value
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * *JOB_PROPERTY_NOT_FOUND* when job property does not exist

            * *JOB_PROPERTY_VALUE_NOT_FOUND* when job property value does not
            exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            with codes:

            * *VALUE_LABEL_IS_INVALID* when value label contains invalid
            characters. In order to unarchive the value, first update the label
            with only valid characters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/job-properties/{id}/activation:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
    put:
      tags:
        - configuration
      summary: Activate a job property
      operationId: Configuration_activateJobProperty
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Activates a job property with given id.
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: When trying to activate job property that has no active values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - configuration
      summary: Deactivate a job property
      operationId: Configuration_deactivateJobProperty
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Deactivates a job property.
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/job-properties/{id}/dependents:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
    get:
      tags:
        - configuration
      summary: Get job property's dependents
      operationId: Configuration_getJobPropertyDependents
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get list of job property's dependents
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependentJobProperties'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **JOB_PROPERTY_NOT_FOUND** when job property not found,
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - configuration
      summary: Create job property dependents
      operationId: Configuration_createJobPropertyDependents
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Create dependencies between job properties
      requestBody:
        description: Job properties' id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependentJobPropertiesIds'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependentJobProperties'
        '400':
          description: >
            with codes

            * **JOB_PROPERTIES_CIRCULAR_DEPENDENCY** for job properties circular
            dependency

            * **JOB_PROPERTY_ALREADY_DEPENDENT** when job property is already
            other job property's dependent

            * **DEPENDENT_JOB_PROPERTY_NOT_FOUND** when dependent job property
            not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **JOB_PROPERTY_NOT_FOUND** when job property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: when input validation fails
  /configuration/job-properties/{id}/dependents/{dependentId}:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyDependentId'
    delete:
      tags:
        - configuration
      summary: Remove job property's dependent
      operationId: Configuration_removeDependent
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Remove dependency between job properties
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with code

            * **JOB_PROPERTY_NOT_FOUND** when job property not found

            * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent
            not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/job-properties/{id}/dependents/{dependentId}/values:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyDependentId'
    get:
      tags:
        - configuration
      summary: Get dependent job property's values
      operationId: Configuration_getDependentPropertyValues
      security:
        - key: []
        - oauth:
            - configuration_read
      description: >-
        Get dependent job property's values with corelation to the parent field.
        Please use GET
        configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values
        (with paging) instead.
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependentJobPropertyValuesRelations'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **JOB_PROPERTY_NOT_FOUND** when job property not found,

            * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent
            not found

            * **DEPENDENCY_NOT_FOUND** when dependency between properties not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyValueId'
      - $ref: '#/components/parameters/jobPropertyDependentId'
    get:
      tags:
        - configuration
      summary: Get job property's dependent values
      operationId: Configuration_getDependentValues
      security:
        - key: []
        - oauth:
            - configuration_read
      description: >-
        Get list of job property's dependent values for specific job property's
        value
      parameters:
        - $ref: '#/components/parameters/language'
        - $ref: '#/components/parameters/pageId'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependentJobPropertyValues'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **JOB_PROPERTY_NOT_FOUND** when job property not found,

            * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found

            * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent
            not found

            * **DEPENDENCY_NOT_FOUND** when dependency between properties not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - configuration
      summary: Add job property's dependent value
      operationId: Configuration_addDependentValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Add job property's dependent value for specific job property's value
      requestBody:
        description: Identifier of job property's dependent value
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Identifiable'
        required: true
      responses:
        '204':
          description: ''
        '400':
          description: >
            with code:

            * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property
            dependent value id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **JOB_PROPERTY_NOT_FOUND** when job property not found,

            * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found

            * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property dependent
            not found

            * **DEPENDENCY_NOT_FOUND** when dependency between properties not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with code:

            * **JOB_PROPERTY_DEPENDENT_VALUE_EXISTS** when job property's
            dependent value exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: when input validation fails
  /configuration/job-properties/{id}/values/{valueId}/dependents/{dependentId}/values/{dependentValueId}:
    parameters:
      - $ref: '#/components/parameters/jobPropertyId'
      - $ref: '#/components/parameters/jobPropertyValueId'
      - $ref: '#/components/parameters/jobPropertyDependentId'
      - $ref: '#/components/parameters/jobPropertyDependentValueId'
    delete:
      tags:
        - configuration
      summary: Remove job property's dependent values relationship
      operationId: Configuration_removeDependentValuesRelationship
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Remove relationship between dependent job properties values
      responses:
        '204':
          description: ''
        '403':
          description: >-
            Forbidden to access the resource, check your authorisation and
            rights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **JOB_PROPERTY_NOT_FOUND** when job property not found,

            * **JOB_PROPERTY_VALUE_NOT_FOUND* when job property value not found

            * **JOB_PROPERTY_DEPENDENT_NOT_FOUND** when job property's dependent
            not found

            * **JOB_PROPERTY_DEPENDENT_VALUE_NOT_FOUND** when job property's
            dependent value not found

            * **DEPENDENCY_NOT_FOUND** when dependency between properties not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/departments:
    post:
      tags:
        - configuration
      summary: Creates department
      operationId: Configuration_createDepartment
      security:
        - key: []
        - oauth:
            - configuration_manage
      requestBody:
        description: department to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      responses:
        '201':
          description: Created department
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          description: >-
            With code **DEPARTMENT_LABEL_NOT_UNIQUE** when department with given
            label already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - configuration
      summary: Get departments
      operationId: Configuration_getDepartments
      security:
        - key: []
        - oauth:
            - configuration_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Department list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departments'
  /configuration/departments/{id}:
    get:
      tags:
        - configuration
      summary: Get department
      operationId: Configuration_getDepartmentById
      security:
        - key: []
        - oauth:
            - configuration_read
      parameters:
        - description: Identifier of a department
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Department
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '404':
          description: Department not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/hiring-processes:
    get:
      tags:
        - configuration
      summary: Get list of hiring process
      operationId: Configuration_getHiringProcesses
      security:
        - key: []
        - oauth:
            - configuration_read
      responses:
        '200':
          description: Hiring processes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HiringProcesses'
  /configuration/hiring-processes/{id}:
    get:
      tags:
        - configuration
      summary: Get hiring process
      operationId: Configuration_getHiringProcess
      security:
        - key: []
        - oauth:
            - configuration_read
      parameters:
        - description: Identifier of a hiring process
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hiring process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HiringProcess'
        '404':
          description: Hiring process not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/offer-properties:
    get:
      tags:
        - configuration
      summary: Get a list of available offer properties
      operationId: Configuration_listOfferProperties
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get a list of available offer properties.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferPropertiesDefinition'
        '403':
          description: |
            with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/candidate-properties:
    get:
      tags:
        - configuration
      summary: Get a list of available candidate properties
      operationId: Configuration_getCandidateProperties
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get all candidate properties and their configuration for a company
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePropertyDefinitionList'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/candidate-properties/{id}:
    parameters:
      - $ref: '#/components/parameters/candidatePropertyId'
    get:
      tags:
        - configuration
      summary: Get candidate property by id
      operationId: Configuration_getCandidatePropertyById
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get candidate property details and its configuration by id.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePropertyDefinition'
        '404':
          description: Candidate property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/candidate-properties/{id}/values:
    parameters:
      - $ref: '#/components/parameters/candidatePropertyId'
    get:
      tags:
        - configuration
      summary: Get Candidate Property values
      operationId: Configuration_getCandidatePropertyValues
      security:
        - key: []
        - oauth:
            - configuration_read
      description: >-
        Lists all available values for given candidate property id. This
        endpoint is available only for SINGLE_SELECT candidate property type.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePropertyValueList'
        '400':
          description: >-
            With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate
            property type is not SINGLE_SELECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - configuration
      summary: Create candidate property value
      operationId: Configuration_createCandidatePropertyValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Create SINGLE_SELECT candidate property value
      requestBody:
        description: Candidate property value.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidatePropertyValue'
        required: true
      responses:
        '201':
          description: Created candidate property value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePropertyValue'
        '400':
          description: >
            With codes

            * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property
            type is not SINGLE_SELECT

            * **CANDIDATE_PROPERTY_VALUES_LIMIT_EXCEEDED** when SINGLE_SELECT
            candidate property values limit is exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate property not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with codes

            * **CANDIDATE_PROPERTY_VALUE_ID_ALREADY_EXISTS** when candidate
            property with given id already exists,

            * **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS**  when candidate
            property with given label already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/candidate-properties/{id}/values/{valueId}:
    parameters:
      - $ref: '#/components/parameters/candidatePropertyId'
      - $ref: '#/components/parameters/candidatePropertyValueId'
    get:
      tags:
        - configuration
      summary: Get Candidate Property value by id
      operationId: Configuration_getCandidatePropertyValueById
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get Candidate Property value by its id.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePropertyValue'
        '400':
          description: >-
            With code **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate
            property type is not SINGLE_SELECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with
            given id does not exist,

            * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property
            value with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - configuration
      summary: Update candidate property value label
      operationId: Configuration_updatePropertyValueLabel
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Update candidate property value label
      requestBody:
        description: Candidate property value label.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidatePropertyValueLabel'
        required: true
      responses:
        '201':
          description: Updated candidate property value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePropertyValue'
        '400':
          description: >-
            With codes

            * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property
            type is not SINGLE_SELECT

            * **CANDIDATE_PROPERTY_LIBRARY_READONLY_RESTRICTION** when modifying
            read-only value options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with
            given id does not exist,

            * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property
            value with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with code **CANDIDATE_PROPERTY_VALUE_LABEL_ALREADY_EXISTS** when
            candidate property with given label already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - configuration
      summary: Remove candidate property value
      operationId: Configuration_removeValue
      security:
        - key: []
        - oauth:
            - configuration_manage
      description: Remove candidate property value label
      responses:
        '204':
          description: ''
        '400':
          description: >
            with codes:

            * **CANDIDATE_PROPERTY_NOT_SINGLE_SELECT** when candidate property
            type is not SINGLE_SELECT,

            * **CANDIDATE_PROPERTY_LAST_VALUE** when attempting to remove the
            last candidate property value

            * **CANDIDATE_PROPERTY_LIBRARY_READONLY_RESTRICTION** when
            attempting to remove library property value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **CANDIDATE_PROPERTY_NOT_FOUND** when candidate property with
            given id does not exist,

            * **CANDIDATE_PROPERTY_VALUE_NOT_FOUND**  when candidate property
            value with given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/sources:
    get:
      tags:
        - configuration
      summary: List candidate source types with subtypes
      operationId: Configuration_listCandidateSourceTypesWithSubtypes
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get a list of all available candidate source type with subtypes
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceTypes'
  /configuration/sources/{sourceType}/values:
    parameters:
      - $ref: '#/components/parameters/sourceType'
    get:
      tags:
        - configuration
      summary: List candidate sources
      operationId: Configuration_listCandidateSourcesByType
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get a list of all available candidate sources by type.
      parameters:
        - $ref: '#/components/parameters/sourceSubType'
        - description: number of elements to return. max value is 100
          in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - description: number of elements to skip while processing result
          in: query
          name: offset
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of candidate sources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sources'
        '400':
          description: >
            with codes

            * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type,
            subtype) is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/sources/{sourceType}/values/{sourceValueId}:
    parameters:
      - $ref: '#/components/parameters/sourceType'
      - $ref: '#/components/parameters/sourceValueId'
    get:
      tags:
        - configuration
      summary: Get a candidate source
      operationId: Configuration_getCandidateSource
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get a single candidate sources for a given type.
      parameters:
        - $ref: '#/components/parameters/sourceSubType'
      responses:
        '200':
          description: Source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          description: >
            with codes:

            * **SOURCE_TYPE_INVALID** when provided type does not exist,

            * **SUBTYPE_REQUIRED** when there are more sources and subtype
            parameter is required,

            * **SOURCE_TYPE_AND_SUBTYPE_INVALID** when provided pair (type,
            subtype) is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Source with given source value id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/sources/{sourceIdentifier}:
    parameters:
      - $ref: '#/components/parameters/sourceIdentifier'
    get:
      tags:
        - configuration
      summary: Get a candidate source by identifier.
      operationId: Configuration_getCandidateSourceById
      security:
        - key: []
        - oauth:
            - configuration_read
      description: >-
        Get a single candidate source for a given identifier (included deleted
        source).
      responses:
        '200':
          description: Source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceDefinition'
        '400':
          description: |-
            Invalid source identifier. With codes
            *  *INVALID_IDENTIFIER* - when identifier has invalid format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |-
            Source with given identifier not found. With codes
            *  *SOURCE_NOT_FOUND* - when source is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configuration/rejection-reasons:
    get:
      tags:
        - configuration
      summary: Get rejection reasons
      operationId: Configuration_getRejectionReasons
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get rejection reasons
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
  /configuration/withdrawal-reasons:
    get:
      tags:
        - configuration
      summary: Get withdrawal reasons
      operationId: Configuration_getWithdrawalReasons
      security:
        - key: []
        - oauth:
            - configuration_read
      description: Get withdrawal reasons
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /publications/{postingId}:
    get:
      tags:
        - feed
      summary: Get posting by id
      operationId: Feed_getPostingById
      security:
        - key: []
      description: >-
        This endpoint allows getting a single job posting information.<br/>You
        must pass authentication token through <b>X-SmartToken</b> HTTP header.
      parameters:
        - description: Posting id to find
          name: postingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Posting successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedJobAd'
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      tags:
        - feed
      summary: Update posting information
      operationId: Feed_updatePostingInfo
      security:
        - key: []
      description: >-
        <p>This endpoint allows updating a single job posting <i>status</i> and
        <i>URL</i> during a job posting lifecycle.<br/>You must pass
        authentication token through <b>X-SmartToken</b> HTTP
        header.</p><p>Complete list of body parameters below:</p><b>Status</b> -
        This is the posting status on your job board. It should be updated with
        one of the following values:<ul><li><b>Active</b> - set this status just
        after you successfully publish a job to your job board; please provide a
        direct URL to the published job in your job board using <i>LiveUrl</i>
        so that we can surface it to SmartRecruiters
        users</li><li><b>UnderPosting</b> - set this status once you begin the
        process of posting a job in your job board if your board does not
        support immediate posting. When posting is complete, update the status
        to <i>Active</i></li><li><b>Inactive</b> - set this status once the job
        is no longer published to your job board</li><li><b>Error</b> - set this
        status when an error prevents the job from being published to your job
        board; please provide error details using the <i>Comment</i>
        field</li></ul><b>LiveUrl</b> - This is direct URL to the job you have
        published in your job board; will be surfaced to SmartRecruiters
        users<br/><b>Comment</b> - This is field in which you pass error details
        when one occurs while publishing a job; error details will be available
        to our Support Team</p>
      parameters:
        - description: >-
            A single posting id. Allows updating information only for the
            defined postings.
          name: postingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/PostingUpdateRequest'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/PostingUpdateRequest'
        required: true
      responses:
        '204':
          description: Posting successfully updated
        '400':
          description: Payload not valid
        '401':
          description: Wrong token
        '404':
          description: PostingId not found
  /info/metrics.prometheus:
    get:
      tags:
        - info
      operationId: Info_getMetrics
      responses:
        default:
          description: Exposes Prometheus metrics
          content:
            text/plain; version=0.0.4:
              schema:
                $ref: '#/components/schemas/InfoGetMetricsResponse'
  /publications:
    get:
      tags:
        - feed
      summary: Get a list of postings
      operationId: Feed_listPostings
      security:
        - key: []
      description: >-
        <p>Get job postings published to your job board.<br/>You must pass
        authentication token through <b>X-SmartToken</b> HTTP header.</p><p>By
        default, this endpoint will return only postings created in the last 30
        days with the status <i>Pending</i>. Use additional parameters to
        control which postings are returned.</p>
      parameters:
        - description: >-
            List postings <b>created</b> after the specified date.<br/><br/>Date
            should be in ISO 8601 format: (e.g.:
            '2015-07-27T08:43:33.000Z').<br/><br/>If no value is provided, only
            postings created in the last 30 days will be returned.
          name: updatedAfter
          in: query
          schema:
            type: string
        - description: >-
            List of posting statuses separated by comma.<br/><br/>Status
            definition:<br/><ul><li><b>Pending</b> - this is a new posting that
            is pending publication on your job board. You should always retrieve
            these postings, publish them, and then update the status via the
            <i>PUT</i> method.</li><li><b>UnderPosting</b> - this is a status
            that is only set by you. It indicates that a posting is currently
            being published but is not yet available on the job board.
            SmartRecruiters will never set this status
            ourselves.</li><li><b>Active</b> - this is a status that is only set
            by you. It indicates that the posting has been successfully
            published and is available on the job board. SmartRecruiters will
            never set this status ourselves.</li><li><b>toUnpost</b> - this
            posting has either expired or has manually been requested for
            removal by the client. As a job board, you should unpost these
            postings immediately, and then update the status to <i>Inactive</i>
            via the <i>PUT</i> method.</li><li><b>Inactive</b> - this is a
            status that is only set by you. It indicates that the posting has
            been successfully unpublished and is no longer available on the job
            board. SmartRecruiters will never set this status
            ourselves.</li><li><b>Error</b> - this is a status only set by you.
            It indicates that the posting could not be published.
            SmartRecruiters will never set this status
            ourselves.</li></ul><br/>Example: <i>status=Active,Error</i>
          name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - Pending
                - UnderPosting
                - Active
                - toUnpost
                - Inactive
                - Error
              default: Pending
        - description: >-
            Number of elements to skip while processing result.<br/>Allowed
            range: [0, 2^31-1].
          name: offset
          in: query
          schema:
            minimum: 0
            type: string
            default: '0'
        - description: 'Maximum number of postings returned.<br/>Allowed range: [0, 100].'
          name: limit
          in: query
          schema:
            maximum: 100
            minimum: 0
            type: string
            default: '100'
      responses:
        '200':
          description: Postings successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedPublication'
        '401':
          description: Unauthorized
        '404':
          description: Not found
  /interview-types:
    get:
      tags:
        - interview types
      summary: Retrieves interview types
      operationId: InterviewTypes_getTypes
      security:
        - key: []
        - oauth:
            - interview_types_read
      responses:
        '200':
          description: Retrieves interview types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewTypes'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - interview types
      summary: Adds interview types to already existing ones
      operationId: InterviewTypes_addExistingTypes
      security:
        - key: []
        - oauth:
            - interview_types_write
      requestBody:
        description: Interview types to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewTypes'
        required: true
      responses:
        '204':
          description: Interview types updated
        '403':
          description: Forbidden to create an interview type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with codes:

            * **INTERVIEW_TYPES_SIZE_EXCEEDED** when maximum size of 2000
            interview types exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: When input validation fails
        '500':
          $ref: '#/components/responses/ServerError'
  /interview-types/{interviewType}:
    parameters:
      - $ref: '#/components/parameters/InterviewType'
    delete:
      tags:
        - interview types
      summary: Removes interview type with given name
      operationId: InterviewTypes_removeByType
      security:
        - key: []
        - oauth:
            - interview_types_write
      responses:
        '204':
          description: Interview type deleted
        '403':
          description: Forbidden to delete an interview type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **INTERVIEW_TYPE_NOT_FOUND** When no interview type with given
            name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /interviews:
    get:
      tags:
        - interviews
      summary: Retrieves a list of interviews
      operationId: Interviews_getList
      security:
        - key: []
        - oauth:
            - interviews_read
      description: List of interviews
      parameters:
        - $ref: '#/components/parameters/ApplicationId'
      responses:
        '200':
          description: List of interviews
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewsList'
        '403':
          description: Forbidden to access interviews list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **APPLICATION_NOT_FOUND** when no application found with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - interviews
      summary: Creates an interview
      operationId: Interviews_createNewInterview
      security:
        - key: []
        - oauth:
            - interviews_write
      requestBody:
        description: Interview to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Interview'
        required: true
      responses:
        '201':
          description: Created interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'
        '400':
          description: |
            with codes:
            * **INVALID_TIMEZONE** when invalid timezone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden to create an interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            When input validation fails or with codes:

            * **INACTIVE_OR_DELETED_ORGANIZER** when inactive or deleted
            organizer

            * **INACTIVE_OR_DELETED_INTERVIEWERS** when at least one of the
            interviewers is inactive or deleted

            * **END_DATE_BEFORE_START_DATE** when end date of the timeslot is
            before start date

            * **NON_EXISTING_ORGANIZER** when organizer does not exist

            * **NON_EXISTING_INTERVIEWERS** when at least one of the
            interviewers does not exist

            * **CANDIDATE_NOT_FOUND** when candidate with given id not found

            * **JOB_NOT_FOUND** when job with given id not found

            * **APPLICATION_NOT_FOUND** when application for given candidate id
            and job id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /interviews/{interviewId}:
    parameters:
      - $ref: '#/components/parameters/InterviewId'
    get:
      tags:
        - interviews
      summary: Retrieves an interview
      operationId: Interviews_getDetails
      security:
        - key: []
        - oauth:
            - interviews_read
      description: Interview details
      responses:
        '200':
          description: Interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interview'
        '403':
          description: Forbidden to access an interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - interviews
      summary: Modifies an interview
      operationId: Interviews_modifyInterview
      security:
        - key: []
        - oauth:
            - interviews_write
      requestBody:
        description: Interview to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewToUpdateInput'
        required: true
      responses:
        '204':
          description: Interview updated
        '400':
          description: |
            with codes:
            * **INVALID_TIMEZONE** when invalid timezone
        '403':
          description: Forbidden to update an interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: When input validation fails
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - interviews
      summary: Deletes an interview
      operationId: Interviews_deleteById
      security:
        - key: []
        - oauth:
            - interviews_write
      responses:
        '204':
          description: Interview was deleted
        '403':
          description: Forbidden to delete an interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /interviews/{interviewId}/timeslots:
    post:
      tags:
        - timeslots
      summary: Creates a timeslot
      operationId: Timeslots_createNewTimeslot
      security:
        - key: []
        - oauth:
            - interviews_write
      parameters:
        - $ref: '#/components/parameters/InterviewId'
      requestBody:
        description: Timeslot to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timeslot'
        required: true
      responses:
        '201':
          description: Created timeslot with id
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Timeslot'
        '403':
          description: Forbidden to create a timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with codes:

            * **CANNOT_ADD_MORE_TIMESLOTS** when interview already contains
            maximum number of timeslots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            When input validation fails or with codes:

            * **INACTIVE_OR_DELETED_INTERVIEWERS** when at least one of the
            interviewers is inactive or deleted

            * **END_DATE_BEFORE_START_DATE** when end date of the timeslot is
            before start date

            * **NON_EXISTING_INTERVIEWERS** when at least one of the
            interviewers does not exist
        '500':
          $ref: '#/components/responses/ServerError'
  /interviews/{interviewId}/timeslots/{timeslotId}:
    parameters:
      - $ref: '#/components/parameters/InterviewId'
      - $ref: '#/components/parameters/TimeslotId'
    get:
      tags:
        - timeslots
      summary: Retrieves a timeslot
      operationId: Timeslots_getById
      security:
        - key: []
        - oauth:
            - interviews_read
      responses:
        '200':
          description: Timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
        '403':
          description: Forbidden to access a timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
            * **TIMESLOT_NOT_FOUND** when no timeslot with given id
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - timeslots
      summary: Modifies a timeslot
      operationId: Timeslots_modifyTimeSlot
      security:
        - key: []
        - oauth:
            - interviews_write
      requestBody:
        description: Timeslot to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timeslot'
        required: true
      responses:
        '204':
          description: Timeslot updated
        '400':
          description: Missing data in timeslot object
        '403':
          description: Forbidden to update a timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
            * **TIMESLOT_NOT_FOUND** when no timeslot with given id
        '422':
          description: >
            When input validation fails or with codes:

            * **INACTIVE_OR_DELETED_INTERVIEWERS** when at least one of the
            interviewers is inactive or deleted

            * **END_DATE_BEFORE_START_DATE** when end date of the timeslot is
            before start date

            * **NON_EXISTING_INTERVIEWERS** when at least one of the
            interviewers does not exist
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - timeslots
      summary: Deletes a timeslot
      operationId: Timeslots_deleteTimeslot
      security:
        - key: []
        - oauth:
            - interviews_write
      responses:
        '204':
          description: Timeslot deleted
        '403':
          description: Forbidden to delete a timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
            * **TIMESLOT_NOT_FOUND** when no timeslot with given id
        '409':
          description: |
            with codes:
            * **CANNOT_DELETE_LAST_TIMESLOT** when cannot delete last timeslot
        '500':
          $ref: '#/components/responses/ServerError'
  /interviews/{interviewId}/candidate/status:
    parameters:
      - $ref: '#/components/parameters/InterviewId'
    put:
      tags:
        - statuses
      summary: Changes a candidate's status.
      operationId: Statuses_updateCandidateStatus
      security:
        - key: []
        - oauth:
            - interviews_write
      requestBody:
        description: New candidate's status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeStatus'
        required: true
      responses:
        '204':
          description: Status successfully changed
        '403':
          description: Forbidden to change candidate's status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **INTERVIEW_NOT_FOUND** when no interview with given id
        '422':
          description: When input validation fails
        '500':
          $ref: '#/components/responses/ServerError'
      deprecated: true
  /interviews/{interviewId}/timeslots/{timeslotId}/interviewers/{userId}/status:
    parameters:
      - $ref: '#/components/parameters/InterviewId'
      - $ref: '#/components/parameters/TimeslotId'
      - $ref: '#/components/parameters/UserId'
    put:
      tags:
        - statuses
      summary: Changes a interviewer's status in given timeslot
      operationId: Statuses_updateInterviewerStatusInSlot
      security:
        - key: []
        - oauth:
            - interviews_write
      requestBody:
        description: New interviewer's status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeStatus'
        required: true
      responses:
        '204':
          description: Status successfully changed
        '403':
          description: Forbidden to change interviewer's status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **INTERVIEW_NOT_FOUND** when no interview with given id *
            **TIMESLOT_NOT_FOUND** when no timeslot with given id *
            **NON_EXISTING_INTERVIEWERS** when no interviewer with given id
            exists in timeslot
        '422':
          description: When input validation fails
        '500':
          $ref: '#/components/responses/ServerError'
  /interviews/{interviewId}/timeslots/{timeslotId}/candidateStatus:
    parameters:
      - $ref: '#/components/parameters/InterviewId'
      - $ref: '#/components/parameters/TimeslotId'
    put:
      tags:
        - statuses
      summary: Changes a candidate's status in given timeslot
      operationId: Statuses_updateCandidateTimeslotStatus
      security:
        - key: []
        - oauth:
            - interviews_write
      requestBody:
        description: New candidate's status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendeeStatus'
        required: true
      responses:
        '204':
          description: Candidate status in a timeslot is successfully changed
        '403':
          description: Forbidden to change candidates's status in a timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes:

            * **INTERVIEW_NOT_FOUND** when no interview with given id *
            **TIMESLOT_NOT_FOUND** when no timeslot with given id
        '422':
          description: When input validation fails
        '500':
          $ref: '#/components/responses/ServerError'
  /jobs/{jobId}/positions:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Positions for a job
      operationId: Jobs_getPositionsForJob
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job's positions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPositions'
        '403':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - jobs
      summary: Create a new position for a job
      operationId: Jobs_createNewPosition
      security:
        - key: []
        - oauth:
            - jobs_manage
      requestBody:
        $ref: '#/components/requestBodies/JobPositionInput'
      responses:
        '201':
          description: Created position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosition'
        '403':
          description: |
            with codes
            * **APPROVAL_PROCESS_ENABLED** when approval process is enabled
            * **PERMISSION_DENIED** when job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/positions/{positionId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
      - $ref: '#/components/parameters/positionId'
    get:
      tags:
        - jobs
      summary: Get a single position
      operationId: Jobs_getSinglePosition
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Found position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosition'
        '403':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - jobs
      summary: Update position
      operationId: Jobs_updatePosition
      security:
        - key: []
        - oauth:
            - jobs_manage
      requestBody:
        $ref: '#/components/requestBodies/JobPositionInput'
      responses:
        '201':
          description: Updated position
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPosition'
        '403':
          description: |
            with codes
            * **APPROVAL_PROCESS_ENABLED** when approval process is enabled
            * **PERMISSION_DENIED** when job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - jobs
      summary: Delete position
      operationId: Jobs_deletePosition
      security:
        - key: []
        - oauth:
            - jobs_manage
      responses:
        '204':
          description: Position successfully removed
        '400':
          description: >-
            with code **POSITION_ASSIGNED** when position has candidate already
            assigned and cannot be removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with codes
            * **APPROVAL_PROCESS_ENABLED** when approval process is enabled
            * **PERMISSION_DENIED** when job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Position not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/jobads:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Find and list job ads for a given job
      operationId: Jobs_findJobAdsForJob
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job's job ads
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAds'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - jobs
      summary: Create a new job ad
      operationId: Jobs_createJobAd
      security:
        - key: []
        - oauth:
            - jobs_manage
      requestBody:
        $ref: '#/components/requestBodies/JobAdContent'
      responses:
        '200':
          description: Created job ad.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAdItem'
        '400':
          description: >
            with codes

            * **JOB_AD_LIMIT_REACHED** when job add limit (100 per job) is
            reached

            * **PROPERTY_INVALID** when one of job ad attribute contains invalid
            characters
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/jobads/{jobAdId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
      - $ref: '#/components/parameters/jobAdId'
    get:
      tags:
        - jobs
      summary: Get a job ad
      operationId: Jobs_getJobAd
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAdItem'
        '404':
          description: Job or job ad not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - jobs
      summary: Update a job ad
      operationId: Jobs_updateJobAd
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: >
        Enables you to update an existing job ad.

        NOTE: In order for a job ad changes to be reflected on internal sources
        (Career Sites, Job Widgets etc.) and Job Aggregators, you need to
        Publish the job ad after making an update.
      requestBody:
        $ref: '#/components/requestBodies/JobAdContent'
      responses:
        '200':
          description: Updated job ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAdItem'
        '400':
          description: >
            with code

            * **PROPERTY_INVALID** when one of job ad attribute contains invalid
            characters
        '404':
          description: Job or job ad not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/jobads/{jobAdId}/postings:
    parameters:
      - $ref: '#/components/parameters/jobId'
      - $ref: '#/components/parameters/jobAdId'
    post:
      tags:
        - jobs
      summary: Publishes a job ad
      operationId: Jobs_publishJobAdPostings
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: >
        Publishes a job ad to internal sources (Career Pages, Job Widget,
        Facebook App, WordPress Plugin, Posting API) and optionally to all free
        job aggregators.


        By default it's set to publish to job aggregators


        It reflects a Publish action available in the SmartRecruiters UI.


        Note: Internal sources depend on a company's payment plan.
      requestBody:
        $ref: '#/components/requestBodies/Publication'
      responses:
        '202':
          description: Posting scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAdPublicationScheduled'
        '400':
          description: >
            with code

            * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company's limit for
            published job ads has been reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: |
            with code
            * **ACCESS_FORBIDDEN** when user is not authorize to publish a job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with code

            * **JOB_NOT_POSTED** when default job ad for the job has not been
            published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **JOBAD_NOT_FOUND** when job ad has not been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - jobs
      summary: List publications for a job ad
      operationId: Jobs_listPublicationsForJobAd
      security:
        - key: []
        - oauth:
            - jobs_read
      description: List publications for a job ad
      parameters:
        - $ref: '#/components/parameters/language'
        - description: >-
            publication status filter; when omitted, defaults to 'true' (only
            active publications are returned); 'false' returns active and
            inactive publications
          in: query
          name: activeOnly
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationList'
        '403':
          description: >
            with code

            * **ACCESS_FORBIDDEN** when user is not authorized to access job ad
            postings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **JOBAD_NOT_FOUND** when job ad has not been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - jobs
      summary: Unpublish a job ad
      operationId: Jobs_unpublishJobAd
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: >
        Unpublishes a job ad from all sources.


        **Unpublishing a default job ad will unpublish all other job ads within
        that job.**
      responses:
        '202':
          description: Unpost scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAdUnpublishScheduled'
        '401':
          description: >
            with code

            * **ACCESS_FORBIDDEN** when user is not authorized to unpublish job
            ad
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **JOBAD_NOT_FOUND** when job ad has not been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/publication:
    parameters:
      - $ref: '#/components/parameters/jobId'
    post:
      tags:
        - jobs
      summary: Publishes a default job ad
      operationId: Jobs_publishDefaultJobAd
      security:
        - key: []
        - oauth:
            - jobs_publications_manage
      description: >
        Publishes default job ad to internal sources and to free job
        aggregators.


        It reflects a Publish action available in the SmartRecruiters UI.


        Note:
          Internal sources: Career Pages, Job Widget, Facebook App, WordPress Plugin, Posting API depend on a company's payment plan.
      requestBody:
        $ref: '#/components/requestBodies/Publication'
      responses:
        '204':
          description: ''
        '400':
          description: >
            with code

            * **PUBLISHED_JOB_AD_LIMIT_REACHED** when company's limit for
            published job ads has been reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: >
            with code

            * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to
            access the job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with code

            * **NOT_AUTHORIZED_TO_PUBLISH_JOB** - when user is not authorized to
            publish the job or approval process for the job is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - jobs
      summary: Unpublishes a job from all sources
      operationId: Jobs_unpublishJobFromAllSources
      security:
        - key: []
        - oauth:
            - jobs_publications_manage
      description: Unpublishes a job from all sources
      responses:
        '204':
          description: ''
        '401':
          description: >
            with code

            * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to
            access the job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - jobs
      summary: Find and list publications for a job
      operationId: Jobs_findPublications
      security:
        - key: []
        - oauth:
            - jobs_read
      description: Find and list publications for a job
      parameters:
        - $ref: '#/components/parameters/language'
        - description: >-
            publication status filter; defaults to 'true' (only active
            publications are returned); 'false' returns active and inactive
            publications
          in: query
          name: activeOnly
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicationList'
        '401':
          description: >
            with code

            * **UNAUTHORIZED_TO_ACCESS_JOB** - when user is not authorized to
            access the job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/hiring-team:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Get hiring team of a job with a given id.
      operationId: Jobs_getHiringTeam
      security:
        - key: []
        - oauth:
            - jobs_read
      description: Get hiring team of a job with a given id.
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Hiring team members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HiringTeamMembers'
        '401':
          description: Job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - jobs
      summary: Add hiring team member of a job with a given id.
      operationId: Jobs_addHiringTeamMember
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: Add hiring team member of a job with a given id
      requestBody:
        description: HiringTeamMember object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HiringTeamMember'
      responses:
        '200':
          description: Added hiring team member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HiringTeamMemberResponse'
        '400':
          description: |
            with code
            * **USER_NOT_FOUND** when user with given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User is already a member of the hiring team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/hiring-team/{userId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
      - description: user identifier
        in: path
        name: userId
        required: true
        schema:
          type: string
    delete:
      tags:
        - jobs
      summary: Removes hiring team member of a job with a given id.
      operationId: Jobs_removeHiringTeamMember
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: Removes hiring team member of a job with a given id.
      responses:
        '204':
          description: ''
        '400':
          description: |
            with code
            * **INVALID_HIRING_TEAM_STATE** when removing the last hiring
            team member. Each hiring team should have at least one member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User is not a member of the hiring team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/note:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Get note of a job.
      operationId: Jobs_getNoteById
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNote'
        '401':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job note not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - jobs
      summary: Update note of a job.
      operationId: Jobs_updateNote
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: Update note of a job.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobNote'
        required: true
      responses:
        '200':
          description: Updated note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNote'
        '401':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/headcount:
    parameters:
      - $ref: '#/components/parameters/jobId'
    patch:
      tags:
        - jobs
      summary: Update job headcount.
      operationId: Jobs_updateHeadcount
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: Update job headcount.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeadcountPatchRequest'
        required: true
      responses:
        '202':
          description: Accepted headcount update request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeadcountUpdateAccepted'
        '400':
          description: >
            with codes

            * **CANNOT_START_APPROVAL_PROCESS** when approval process cannot be
            started

            * **INVALID_SALARY_RANGE** when salary range is not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: |
            with codes
            * **PERMISSION_DENIED** when job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with codes

            * **APPROVAL_PROCESS_NOT_ENABLED** when approval process is not
            enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs:
    get:
      tags:
        - jobs
      summary: Search jobs
      operationId: Jobs_searchJobsByParams
      security:
        - key: []
        - oauth:
            - jobs_read
      description: Search jobs by params.
      parameters:
        - $ref: '#/components/parameters/language'
        - description: >-
            full-text search query based on a job title; case insensitive; e.g.
            java developer
          in: query
          name: q
          required: false
          schema:
            type: string
        - description: number of elements to return. max value is 100
          in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - description: >-
            number of elements to skip while processing result; this method of
            paging is very slow and is deprecated, please use `pageId` instead
          in: query
          name: offset
          required: false
          deprecated: true
          schema:
            type: integer
            minimum: 0
            default: 0
            maximum: 10000000
        - description: >-
            unique identifier for next page of jobs - returned as `nextPageId`
            in previous page result. You must set `job_id` value for `sort`
            parameter if you use `pageId`.
          in: query
          name: pageId
          required: false
          schema:
            type: string
        - description: >-
            Order in which results are returned.

            - default - sorts results by creation date or by match score and
            creation date if query (q) is set. Can't be used with pageId
            parameter (request might not return all results)

            - job_id - sorts results by job id. The only supported sorting order
            when using pageId based pagination.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - default
              - job_id
        - description: >-
            city filter (part of the location object); can be used repeatedly;
            case sensitive; e.g. San Francisco
          in: query
          name: city
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            department filter (by department label); can be used repeatedly;
            case sensitive; e.g. “Marketing”
          in: query
          name: department
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: >-
            ISO8601-formatted time boundaries for the job update time, Format:
            yyyy-MM-ddTHH:mm:ss.SSSZZ
          in: query
          name: updatedAfter
          required: false
          schema:
            type: string
            format: date-time
        - description: >
            ISO8601-formatted time boundaries for the job lastActivityOn time,
            Format: yyyy-MM-ddTHH:mm:ss.SSSZZ.

            lastActivityOn is updated when job is edited, new candidates apply
            or job is published.
          in: query
          name: lastActivityAfter
          required: false
          schema:
            type: string
            format: date-time
        - description: |
            Exceptions to the language code ISO format:
            * "en-GB" - "English - English (UK)"
            * "es-MX" - "Spanish - español (México)"
            * "fr-CA" - "French - français (Canada)"
            * "pt-BR" - "Portugal - português (Brasil)"
            * "zh-TW" - "Chinese (Traditional) - 中文 (香港)"
            * "zh-CN" - "Chinese (Simplified) - 中文 (简体)"


            Value "pt-PT" is deprecated and will not work, use "pt" instead.
          in: query
          name: language
          required: false
          schema:
            type: string
            enum:
              - af
              - am
              - ar
              - az
              - bg
              - bn
              - ca
              - cs
              - cy
              - da
              - de
              - el
              - en
              - en-GB
              - es
              - es-MX
              - et
              - eu
              - fa
              - fi
              - fil
              - fr
              - fr-CA
              - ga
              - gl
              - gu
              - he
              - hi
              - hr
              - hu
              - hy
              - id
              - is
              - it
              - ja
              - ka
              - km
              - kn
              - ko
              - lo
              - lt
              - lv
              - ml
              - mn
              - mr
              - ms
              - ne
              - nl
              - 'no'
              - pl
              - pt
              - pt-BR
              - ro
              - ru
              - si
              - sk
              - sl
              - sr
              - sv
              - sw
              - ta
              - te
              - tr
              - uk
              - ur
              - vi
              - zh-CN
              - zh-TW
              - zu
        - description: |
            Status of a job
          in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - CREATED
              - SOURCING
              - FILLED
              - INTERVIEW
              - OFFER
              - CANCELLED
              - ON_HOLD
        - description: |
            Posting status of a job
          in: query
          name: postingStatus
          required: false
          schema:
            type: string
            enum:
              - PUBLIC
              - INTERNAL
              - NOT_PUBLISHED
              - PRIVATE
      responses:
        '200':
          description: >-
            Jobs matching search criteria. | Note that location returned by this
            endpoint will **not** provide latitude and longitude.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jobs'
          headers:
            Link:
              description: >
                Links to related resources, in the format defined by

                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).

                This will include a link with relation type `next` to the

                next page (containing `pageId` query parameter), if there is a
                next page.
              schema:
                type: string
        '400':
          description: |
            with codes
            * **INVALID_PAGE_ID** - provided page id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - jobs
      summary: Create a new job
      operationId: Jobs_createNewJob
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: >-
        Create a new job. Ignores all nonexistent job properties and job
        properties values.
      requestBody:
        description: Job object that needs to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
      responses:
        '201':
          description: Created job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        '400':
          description: >
            with codes

            * **DEPARTMENT_NOT_FOUND** when provided department does not exist,

            * **INDUSTRY_NOT_FOUND** when provided industry does not exist,

            * **FUNCTION_NOT_FOUND** when provided function does not exist,

            * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment
            does not exist,

            * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does
            not exist,

            * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not
            exist,

            * **EXPERIENCE_LEVEL_NOT_FOUND** when provided experience level does
            not exist,

            * **CITY_NOT_FOUND** when provided city does not exist,

            * **INVALID_GEO_DATA** when latitude or longitude parameters are
            invalid

            * **JOB_PROPERTY_REQUIRED** when some job property is required to
            create job,

            * **JOB_PROPERTY_PARENT_VALUE_MISSING** when job property is set but
            value for its parent is missing,

            * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value
            id does not exist for required property,

            * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is
            used for job property,

            * **JOB_PROPERTY_VALUE_NOT_AVAILABLE_FOR_SELECTED_PARENT_VALUE**
            when job property's value is not available for selected parent
            value,

            * **VALUE_INACTIVE** when job property's value is not active and
            cannot be set.

            * **INVALID_TEXT_FORMAT** when job property's value contains invalid
            text

            * **INVALID_BRAND_VALUE** when provided brand value is invalid

            * **TYPE_OF_EMPLOYMENT_NOT_ALLOWED** when provided type of
            employment is not allowed in country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with codes
            * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create
            job templates.
            * **PERMISSION_DENIED** when job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with code

            * **REF_NUMBER_ALREADY_EXISTS** when provided ref number already
            exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Input validation fails
  /jobs/{jobId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Get content of a job with a given id.
      operationId: Jobs_getContentById
      security:
        - key: []
        - oauth:
            - jobs_read
      description: Get content of a job with a given id.
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        '401':
          description: Job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - jobs
      summary: Update a job
      operationId: Jobs_updateJobAttributes
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: >-
        Update a job. All attributes that are used when creating a job can be
        used. Ignores all nonexistent job properties and job properties values.
      requestBody:
        $ref: '#/components/requestBodies/JSONPatch'
      responses:
        '200':
          description: Updated job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        '400':
          description: >
            with codes

            * **DEPARTMENT_NOT_FOUND** when provided department does not exist,

            * **INDUSTRY_NOT_FOUND** when provided industry does not exist,

            * **FUNCTION_NOT_FOUND** when provided function does not exist,

            * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment
            does not exist,

            * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does
            not exist,

            * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not
            exist,

            * **JOB_PROPERTY_REQUIRED** when some job property is required,

            * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value
            id does not exist for required property,

            * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is
            used for job property,

            * **VALUE_INACTIVE** when job property's value is not active and
            cannot be set.

            * **INVALID_TEXT_FORMAT** when job property's value contains invalid
            text

            * **INVALID_BRAND_VALUE** when provided brand value is invalid

            * **TYPE_OF_EMPLOYMENT_NOT_ALLOWED** when provided type of
            employment is not allowed in country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with code

            * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to change
            job to a job template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Input validation fails
    put:
      tags:
        - jobs
      summary: Updates job
      operationId: Jobs_updateJobAndJobAd
      security:
        - key: []
        - oauth:
            - jobs_manage
      description: >-
        Enables you to update job and it's jobAd. This operation requires
        passing a job id within path and job's new state within body of the PUT
        request. Ignores all nonexistent job properties and job properties
        values. However jobAd and all it's properties need to be provided. All
        jobAd's properties will be removed if not provided. Returns an updated
        job with jobAd.
      requestBody:
        description: Job that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInput'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        '400':
          description: >
            with codes

            * **DEPARTMENT_NOT_FOUND** when provided department does not exist,

            * **INDUSTRY_NOT_FOUND** when provided industry does not exist,

            * **FUNCTION_NOT_FOUND** when provided function does not exist,

            * **TYPE_OF_EMPLOYMENT_NOT_FOUND** when provided type of employment
            does not exist,

            * **JOB_AD_LANGUAGE_NOT_FOUND** when provided job ad language does
            not exist,

            * **EEO_CATEGORY_NOT_FOUND** when provided eeo category does not
            exist,

            * **JOB_PROPERTY_REQUIRED** when some job property is required to
            create job,

            * **INVALID_JOB_PROPERTY_VALUE_ID** when provided job property value
            id does not exist for required property,

            * **INVALID_JOB_PROPERTY_VALUE_TYPE** when invalid value type is
            used for job property,

            * **VALUE_INACTIVE** when job property's value is not active and
            cannot be set.

            * **INVALID_TEXT_FORMAT** when job property's value contains invalid
            text

            * **INVALID_BRAND_VALUE** when provided brand value is invalid

            * **TYPE_OF_EMPLOYMENT_NOT_ALLOWED** when provided type of
            employment is not allowed in country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Job access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with code

            * **JOB_TEMPLATES_MANAGEMENT_FORBIDDEN** when not allowed to create
            job templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Input validation fails
  /jobs/{jobId}/status:
    parameters:
      - $ref: '#/components/parameters/jobId'
    put:
      tags:
        - jobs
      summary: Updates job status
      operationId: Jobs_updateStatus
      security:
        - key: []
        - oauth:
            - jobs_manage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStatusUpdate'
        required: true
      responses:
        '201':
          description: Updated job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusUpdate'
        '403':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/status/history:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Job status history
      operationId: Jobs_getStatusHistory
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job status history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusHistory'
        '401':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /jobs/{jobId}/approvals/latest:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - jobs
      summary: Get latest approval request for given job
      operationId: Jobs_getLatestApprovals
      security:
        - key: []
        - oauth:
            - jobs_read
      parameters:
        - $ref: '#/components/parameters/language'
      responses:
        '200':
          description: Job details of latest approval request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApproval'
        '401':
          description: Job access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with codes

            * **NO_ACCESS_TO_APPROVALS** when not permitted to access job
            approvals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes
            * **APPROVALS_NOT_FOUND** There is no approval for current job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /job-applications/{jobApplicationId}:
    parameters:
      - $ref: '#/components/parameters/JobApplicationId'
    get:
      tags:
        - job-applications
      summary: Get a job application
      operationId: Jobapplications_getById
      security:
        - key: []
        - oauth:
            - job_applications_read
      description: Get a job application for given job application ID.
      responses:
        '200':
          description: Job application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
        '400':
          description: |
            with codes:
            * **INVALID_JOB_APPLICATION_ID** when invalid jobApplicationId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **JOB_APPLICATION_NOT_FOUND** when job application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /messages/shares:
    post:
      tags:
        - messages
      summary: >-
        Shares new messages on Hireloop with Users, Hiring Teams or Everyone and
        sends emails.
      operationId: Messages_shareNewMessages
      security:
        - key: []
        - oauth:
            - messages_write
      description: >
        How does it work:

        * In **content** field, provide a text to be shared.

        * @-mention users to send them an email
          * In **content** field use **@[USER:id]** to mention a User, e.g. @[USER:324132421]
        * Email responses are added as comments to your update

        * \#-tag candidates to link updates to their profiles
          * In **content** field use **#[CANDIDATE:id]** to tag a candidate, e.g. #[CANDIDATE:9847954623]
        * Use **shareWith** to share a feed update with individuals, hiring
        teams or everyone
          * In **users** field, provide an array of User IDs with which you want to share, e.g. "users": ["12343542356","12343542357"].
          * In **hiringTeamOf** field, provide an array of Job IDs, this will share message with a full hiring team of those jobs, e.g. "hiringTeamOf": ["123423432322","123423432324"].
          * **everyone** flag allows sharing with everyone in a company. If not provided, defaults to **false**.
          * **openNote** flag allows sharing with everyone in a company that has access to the candidate. If not provided, defaults to **false**
      requestBody:
        description: Message to post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetails'
        '400':
          description: >
            with codes:

            * **INVALID_VISIBILITY_OPTIONS** when specifying openNote and
            everyone flag set to true in the same time,

            * **JOB_NOT_FOUND** when sharing with hiring team of jobs that do
            not exist,

            * **NO_ACCESS_TO_CANDIDATE** when tagging candidate you do not have
            access to,

            * **MENTIONED_USERS_NOT_FOUND** when mentioning users that do not
            exist,

            * **SHARED_WITH_USERS_NOT_FOUND** when sharing with users that do
            not exist,

            * **TOO_MANY_RECIPIENTS**, when more than 100 message recipients in
            total (mentioned directly or being a part of mentioned hiring teams)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /messages/shares/{id}:
    delete:
      tags:
        - messages
      summary: Delete a message
      operationId: Messages_deleteById
      security:
        - key: []
        - oauth:
            - messages_manage
      description: >-
        Delete a message with a given id. Deleted message is no longer visible
        on Hireloop.
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '204':
          description: Message successfully deleted
        '403':
          description: No permission to delete a message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /messages:
    get:
      tags:
        - messages
      summary: Fetch messages
      operationId: Messages_getByCandidateAndJobId
      security:
        - key: []
        - oauth:
            - messages_read
      description: >-
        Search for messages of given candidate. Use jobId parameter to filter
        results to messages only for specific job application. Accessible only
        for users with ADMINISTRATOR role.
      parameters:
        - $ref: '#/components/parameters/CandidateId'
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/PageId'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Messages successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesView'
          headers:
            Link:
              description: >
                Links to related resources, in the format defined by

                [RFC 5988](https://tools.ietf.org/html/rfc8288#section-3).

                This will include a link with relation type `next` to the

                next page (containing `pageId` query parameter), if there is a
                next page.
              schema:
                type: string
        '400':
          description: >
            with codes:

            * **CANDIDATE_NOT_FOUND** when candidate with given id does not
            exist

            * **JOB_NOT_FOUND** when job with given id does not exist

            * **APPLICATION_NOT_FOUND** when candidate does not have application
            for given job
        '403':
          description: No permission to access messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/jobs/{jobId}/offers:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - offers
      summary: Get candidate's offers
      operationId: Offers_getCandidateJobOffers
      security:
        - key: []
        - oauth:
            - candidates_offers_read
      responses:
        '200':
          description: Candidate's offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offers'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Offers not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/jobs/{jobId}/offers/{offerId}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - offers
      summary: Get candidate's offer
      operationId: Offers_getCandidateOffer
      security:
        - key: []
        - oauth:
            - candidates_offers_read
      parameters:
        - description: Identifier of a Offer
          in: path
          name: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Candidate's offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Offer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /candidates/{id}/jobs/{jobId}/offers/{offerId}/approvals/latest:
    parameters:
      - $ref: '#/components/parameters/candidateId'
      - $ref: '#/components/parameters/jobId'
    get:
      tags:
        - offers
      summary: Get latest approval request for candidate's offer
      operationId: Offers_getLatestApprovalRequest
      security:
        - key: []
        - oauth:
            - candidates_offers_read
      parameters:
        - description: Identifier of a Offer
          in: path
          name: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Latest approval request for given offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequest'
        '401':
          description: Candidate access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with code

            * **NO_ACCESS_TO_OFFERS** when not permitted to see offers *
            **NO_ACCESS_TO_APPROVALS** when not permitted to access offer
            approvals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with code
            * **OFFERS_NOT_FOUND**
            * **APPROVALS_NOT_FOUND**
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /offers:
    get:
      tags:
        - offers
      summary: Search offers by criteria
      operationId: Offers_searchByCriteria
      security:
        - key: []
      description: >-
        Enables you to get a list of existing offers. The number of offers
        returned as part of the list can be modified using the offset and limit
        parameters. These results will be sorted using lastUpdateDate.
      parameters:
        - description: >-
            number of offers to return. max number of offers returned by single
            call is 100
          name: limit
          in: query
          schema:
            type: integer
            format: int32
        - description: number of offers to skip while processing result
          name: offset
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            offer status; available values are: INACTIVE, UNDER_REVIEW, ACTIVE,
            REJECTED
          name: status
          in: query
          schema:
            type: string
        - description: >-
            full text query. will match offers with name and description
            matching query string
          name: q
          in: query
          schema:
            type: string
        - description: >-
            id of a job posting; allows getting offer information using Posting
            Id coming from Job Board API; not relevant for Assessment vendors
          name: postingId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Offers matching search criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offers'
        '403':
          description: |
            with code **NO_ACCESS_TO_OFFERS** when not permitted to see offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: List of found offers
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiListResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiListResult'
      deprecated: true
    post:
      tags:
        - offers
      summary: Create offer
      operationId: Offers_insertNewOffer
      security:
        - key: []
      description: >-
        Enables you to insert new offers. This operation requires passing an <a
        href="https://developers.smartrecruiters.com/docs/offer">Offer</a>
        object as part of a POST request.
      requestBody:
        description: >-
          <a href="https://developers.smartrecruiters.com/docs/offer">Offer</a>
          object that needs to be passed over. Please see the Model Schema on
          the right.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiOffer'
      responses:
        default:
          description: New offer created
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
      deprecated: true
  /offers/{offerId}/documents:
    get:
      tags:
        - offers
      summary: Get a list of documents related to sent offer.
      operationId: Offers_getRelatedDocuments
      security:
        - key: []
        - oauth:
            - candidates_offers_read
      parameters:
        - description: Identifier of an offer.
          in: path
          name: offerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of documents related to sent offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferDocumentsList'
        '400':
          description: Malformed request. ID format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Offer not found or lack of access to the offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offer has not been sent to the candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Offer was sent with an unsupported provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /offers/{offerId}/documents/{documentId}:
    get:
      tags:
        - offers
      summary: Get a given document in a given sent offer
      operationId: Offers_getDocument
      security:
        - key: []
        - oauth:
            - candidates_offers_read
      parameters:
        - description: Identifier of an offer.
          name: offerId
          in: path
          required: true
          schema:
            type: string
        - description: Identifier of a document.
          name: documentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Requested file.
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/OffersGetDocumentResponse'
        '400':
          description: Malformed request. ID format is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden from downloading offer because of detected malware in
            document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Offer or document not found or lack of access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Offer was not sent to the candidate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Offer was sent with an unsupported provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assessments/{assessmentOrderId}/comments/{commentId}:
    get:
      tags:
        - comments
      summary: Get comment by id
      operationId: Comments_getById
      security:
        - key: []
      description: Getting details of a comment in a particular assessment order.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: unique id of an assessment comment
          name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Assessment comment
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentComment'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentComment'
      deprecated: true
  /assessments/{assessmentOrderId}/comments:
    get:
      tags:
        - comments
      summary: List comments
      operationId: Comments_listByAssessmentOrderId
      security:
        - key: []
      description: >-
        Enables you to get a list of comments associated with a particular
        assessment order.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: >-
            number of comments to return. max number of comments returned by
            single call is 100
          name: limit
          in: query
          schema:
            type: string
        - description: number of comments to skip while processing result
          name: offset
          in: query
          schema:
            type: string
      responses:
        default:
          description: List of assessment comments
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentCommentListResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentCommentListResult'
      deprecated: true
    post:
      tags:
        - comments
      summary: Add new comment
      operationId: Comments_addNewCommentToAssessmentOrder
      security:
        - key: []
      description: Adding new comment to an assessment order.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Body object that should contain author information (it's not required
          but this will be displayed as author of the message). Message is
          required (which will be displayed to SmartRecruiters user). Please see
          the Model Schema on the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
        required: true
      responses:
        default:
          description: New assessment comment added
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentComment'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentComment'
      deprecated: true
  /assessments/{assessmentOrderId}/results/{resultId}/attachments/{attachmentId}:
    get:
      tags:
        - attachments
      summary: Get assessment attachment
      operationId: Attachments_getDetails
      security:
        - key: []
      description: Enables you to get details of attachments in a particular assessment.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: unique result id
          name: resultId
          in: path
          required: true
          schema:
            type: string
        - description: unique id of an attachment
          name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Assessment attachment
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachment'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachment'
      deprecated: true
    post:
      tags:
        - attachments
      summary: Update assessment attachment
      operationId: Attachments_updateFile
      security:
        - key: []
      description: >-
        Enables you to update ( replace ) files already submitted to assessment
        result.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: unique result id
          name: resultId
          in: path
          required: true
          schema:
            type: string
        - description: unique id of an attachment
          name: attachmentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Attachment file - we accept only PDF files with max size: 20 * 1024 *
          1024.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApiAttachment'
        required: true
      responses:
        default:
          description: Assessment attachment updated
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachment'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachment'
      deprecated: true
  /assessments/{assessmentOrderId}/results/{resultId}/attachments:
    get:
      tags:
        - attachments
      summary: List assessment results
      operationId: Attachments_getList
      security:
        - key: []
      description: >-
        Enables you to get a list of attachments submitted to a particular
        assessment result.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: unique result id
          name: resultId
          in: path
          required: true
          schema:
            type: string
        - description: number of elements to return. max value is 100
          name: limit
          in: query
          schema:
            type: integer
            format: int32
        - description: number of elements to skip while processing result
          name: offset
          in: query
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Assessment attachment list
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachmentListResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachmentListResult'
      deprecated: true
    post:
      tags:
        - attachments
      summary: Attach assessment results
      operationId: Attachments_submitNewAssessmentResultFile
      security:
        - key: []
      description: Enables you to attach files to and submit a new assessment result.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: unique result id
          name: resultId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Attachment file - we accept only PDF files with max size: 20 * 1024 *
          1024.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApiAttachment'
        required: true
      responses:
        default:
          description: File attached to assessment result
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachment'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentAttachment'
      deprecated: true
  /assessments/{assessmentOrderId}/results/{resultId}:
    get:
      tags:
        - results
      summary: Get assessment results by id
      operationId: Results_findById
      security:
        - key: []
      description: Enables you to get details of a particular assessment result.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: unique id of an assessment result
          name: resultId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Assessment result
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentResult'
      deprecated: true
  /assessments/{assessmentOrderId}/results:
    get:
      tags:
        - results
      summary: List assessment results
      operationId: Results_listByAssessmentOrderId
      security:
        - key: []
      description: >-
        Enables you to get a list of results submitted to a particular
        assessment order.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
        - description: number of elements to return. max value is 100
          name: limit
          in: query
          schema:
            type: integer
            format: int32
        - description: number of elements to skip while processing result
          name: offset
          in: query
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Assessment result list
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentResultListResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentResultListResult'
      deprecated: true
    post:
      tags:
        - results
      summary: Submit assessment results
      operationId: Results_submitNewAssessmentResult
      security:
        - key: []
      description: Enables you to submit a new assessment result.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          <a
          href="https://developers.smartrecruiters.com/docs/assessmentresult">AssessmentResult<a/>
          object that should contain author information (it's not required but
          this will be displayed as author of the message) and score (which will
          be displayed to SmartRecruiters user). Please see the Model Schema on
          the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiAssessmentResult'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiAssessmentResult'
      responses:
        default:
          description: New assessment result submitted
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentResult'
      deprecated: true
  /assessments/{assessmentOrderId}/accept:
    post:
      tags:
        - assessments
      summary: Accept Assessment order
      operationId: Assessments_acceptOrder
      security:
        - key: []
      description: Enables you to accept an assessment order.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Body object that should contain author information (it's not required
          but this will be displayed as author of the message). Message is
          required (which will be displayed to SmartRecruiters user). Please see
          the Model Schema on the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
        required: true
      responses:
        default:
          description: Assessment order accepted
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
      deprecated: true
  /assessments/{assessmentOrderId}/complete:
    post:
      tags:
        - assessments
      summary: Complete Assessment order
      operationId: Assessments_markAsCompleted
      security:
        - key: []
      description: Enables you to mark the status of an assessment order as COMPLETED.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Body object that should contain author information (it's not required
          but this will be displayed as author of the message). Message is
          required (which will be displayed to SmartRecruiters user). Please see
          the Model Schema on the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
        required: true
      responses:
        default:
          description: Assessment order completed
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
      deprecated: true
  /assessments/{assessmentOrderId}:
    get:
      tags:
        - assessments
      summary: Get Assessment Order by id
      operationId: Assessments_getById
      security:
        - key: []
      description: Get Assessment Order details by ID.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Assessment order
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
      deprecated: true
  /assessments:
    get:
      tags:
        - assessments
      summary: Get Assessment orders by criteria
      operationId: Assessments_listByCriteria
      security:
        - key: []
      description: Get list of Assessment Orders.
      parameters:
        - description: number of elements to return. max value is 100
          name: limit
          in: query
          schema:
            type: integer
            format: int32
        - description: number of elements to skip while processing result
          name: offset
          in: query
          schema:
            type: integer
            format: int32
        - description: >-
            assessment order status; available values: NEW, IN_PROGRESS,
            REJECTED, COMPLETED
          name: status
          in: query
          schema:
            type: string
        - description: >-
            createDate filter. search will return only orders created after
            given date. Date format need to comply with ISO8601 format:
            yyyy-MM-ddTHH:mm:ss.SSSZZ
          name: fromDate
          in: query
          schema:
            type: string
        - description: >-
            createDate filter. search will return only orders created before
            given date. Date format need to comply with ISO8601 format:
            yyyy-MM-ddTHH:mm:ss.SSSZZ
          name: toDate
          in: query
          schema:
            type: string
        - description: 'sorting criteria. Available options: createDate'
          name: sortBy
          in: query
          schema:
            type: string
        - description: 'sorting direction. Available options: asc, desc'
          name: sortDir
          in: query
          schema:
            type: string
            default: asc
        - description: >-
            UUID of a candidate. Corresponds to candidate ID used in Customer
            API
          name: candidateUuid
          in: query
          schema:
            type: string
        - description: UUID of a job. Corresponds to job ID used in Customer API
          name: jobUuid
          in: query
          schema:
            type: string
      responses:
        default:
          description: Assessment order list
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrderListResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrderListResult'
      deprecated: true
    post:
      tags:
        - assessments
      summary: >-
        insert new Assessment order - end point for testing only - it will not
        create valid assessment order
      operationId: Assessments_createNewOrder
      security:
        - key: []
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiAssessmentOrderRequest'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiAssessmentOrderRequest'
      responses:
        default:
          description: Assessment order inserted
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
      deprecated: true
  /assessments/{assessmentOrderId}/reject:
    post:
      tags:
        - assessments
      summary: Reject Assessment order
      operationId: Assessments_rejectOrder
      security:
        - key: []
      description: Enables you to reject an assessment order.
      parameters:
        - description: unique id of an assessment order
          name: assessmentOrderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Body object that should contain author information (it's not required
          but this will be displayed as author of the message). Message is
          required (which will be displayed to SmartRecruiters user) and should
          contain details on why the order has been rejected. Please see the
          Model Schema on the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiCommentRequest'
        required: true
      responses:
        default:
          description: Assessment order rejected
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiAssessmentOrder'
      deprecated: true
  /configs:
    get:
      tags:
        - configs
      summary: Fetch list of vendor configs
      operationId: Configs_getList
      security:
        - key: []
      description: Enables you to get all specified configuration entries.
      responses:
        default:
          description: Configs list
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiConfigListResult'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiConfigListResult'
      deprecated: true
    post:
      tags:
        - configs
      summary: Add new config
      operationId: Configs_addNewConfig
      security:
        - key: []
      description: >-
        Enables you to add a new config to the configs list. This operation
        requires passing an instance of the <a
        href="https://developers.smartrecruiters.com/docs/config">Config</a>
        object with the Id and Value fields set. An update is performed if the
        ID that you pass already exists.
      requestBody:
        description: >-
          <a
          href="https://developers.smartrecruiters.com/docs/config">Config</a>
          object that needs to contain Id and Value set. Please see the Model
          Schema on the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/Config'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        default:
          description: New config added
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Config'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Config'
      deprecated: true
  /configs/{configId}:
    get:
      tags:
        - configs
      summary: Get config for vendor
      operationId: Configs_getByConfigId
      security:
        - key: []
      description: Enables you to get the config value for a given Id.
      parameters:
        - description: unique id of a config entry
          name: configId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Config
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Config'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Config'
      deprecated: true
    post:
      tags:
        - configs
      summary: Update config
      operationId: Configs_updateConfigById
      security:
        - key: []
      description: >-
        Enables you to update config in the configs list. This operation
        requires passing a config id and instance of the <a
        href="https://developers.smartrecruiters.com/docs/config">Config</a>
        object with the Id and Value fields set.
      parameters:
        - description: unique id of a config entry
          name: configId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          <a
          href="https://developers.smartrecruiters.com/docs/config">Config</a>
          object that needs to contain Id and Value set. Please see the Model
          Schema on the right.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/Config'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        default:
          description: Config updated
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Config'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Config'
      deprecated: true
  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Get offer by id
      operationId: Offers_getById
      security:
        - key: []
      description: >-
        Enables you to get offer details. This operation requires passing an
        offer id as part of the REQUEST parameter.
      parameters:
        - description: unique id of an offer
          name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Offer
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
      deprecated: true
    post:
      tags:
        - offers
      summary: Update offer
      operationId: Offers_updateOffer
      security:
        - key: []
      description: >-
        Enables you to Update existing offers. This operation requires passing
        an offer id being changed and an <a
        href="https://developers.smartrecruiters.com/docs/offer">Offer</a>
        object as part of the POST request.
      parameters:
        - description: unique id of an offer
          name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          <a href="https://developers.smartrecruiters.com/docs/offer">Offer</a>
          object that needs to be passed over. Please see the Model Schema on
          the right. Required fields are: id, catalogId, name, description,
          Terms.
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: '#/components/schemas/ApiOffer'
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiOffer'
      responses:
        default:
          description: Offer updated
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
      deprecated: true
  /offers/{offerId}/submit:
    post:
      tags:
        - offers
      summary: Submit offer
      operationId: Offers_submitForReview
      security:
        - key: []
      description: >-
        Enables you to submit an offer for review. This operation requires
        passing an offer ID as part of the REQUEST parameter.
      parameters:
        - description: unique id of an offer
          name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Offer submitted for review
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
      deprecated: true
  /offers/{offerId}/withdraw:
    post:
      tags:
        - offers
      summary: Withdraw offer
      operationId: Offers_withdrawal
      security:
        - key: []
      description: >-
        Enables you to withdrawing an offer from the marketplace. This operation
        requires passing an offer id as part of a REQUEST parameter. After a
        successful withdraw, the offer is not available in the marketplace
        anymore.
      parameters:
        - description: unique id of an offer
          name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Offer withdrawn
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiOffer'
      deprecated: true
  /v1/companies/{companyIdentifier}/postings:
    get:
      tags:
        - postings
      summary: Lists active postings published by given company
      operationId: Postings_listByCompanyIdentifier
      security:
        - {}
        - key: []
      description: Lists active postings published by given company. Return PostingList
      parameters:
        - description: Language of translation
          in: header
          name: accept-language
          schema:
            $ref: '#/components/schemas/JobAdLanguageCode'
        - description: Identifier of a company
          in: path
          name: companyIdentifier
          required: true
          schema:
            type: string
        - description: full-text search query based on a job title, location
          in: query
          name: q
          required: false
          schema:
            type: string
        - description: number of elements to return. max value is 100
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: number of elements to skip while processing result
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: >
            Filter indicating which postings to return:

            * **PUBLIC**: response will include ONLY public postings

            * **INTERNAL**: response will include ONLY internal postings

            * **INTERNAL_OR_PUBLIC**: response will include internal postings or
            public postings, but not both for a single job. If a job has both
            types of postings, only internal postings will be returned. NOTE:
            when selected, all postings, internal and public, will be treated as
            internal. Among other things, this means that screening questions
            will not be displayed, and candidates will be marked with the
            EMPLOYEE label.
          in: query
          name: destination
          required: false
          schema:
            type: string
            enum:
              - PUBLIC
              - INTERNAL
              - INTERNAL_OR_PUBLIC
        - description: >
            Filter indicating which postings to return:

            * **REMOTE**: response will include ONLY postings with remote
            location type

            * **ONSITE**: response will include ONLY postings with onsite
            location type

            * **ANY**: response will include ANY location type
          in: query
          name: locationType
          required: false
          schema:
            type: string
            enum:
              - REMOTE
              - ONSITE
              - ANY
        - description: country code filter (part of the location object)
          in: query
          name: country
          required: false
          schema:
            type: string
        - description: region filter (part of the location object)
          in: query
          name: region
          required: false
          schema:
            type: string
        - description: city filter (part of the location object)
          in: query
          name: city
          required: false
          schema:
            type: string
        - description: department filter (department id)
          in: query
          name: department
          required: false
          schema:
            type: string
        - description: >
            Job ad language; accepts 2-letter ISO 639-1 language code; multiple
            codes can be provided, separated by comma (",")

            Exceptions to the language code ISO format:

            * "en-GB" - "English - English (UK)"

            * "fr-CA" - "French - français (Canada)"

            * "pt-BR" - "Portugal - português (Brasil)"

            * "pt-PT" - "Portugal - português (Portugal)"

            * "zh-TW" - "Chinese (Traditional) - 中文 (香港)"

            * "zh-CN" - "Chinese (Simplified) - 中文 (简体)"
          in: query
          name: language
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobAdLanguageCode'
        - description: |
            Released after filter (ISO8601-formatted)
            Format: yyyy-MM-ddTHH:mm:ss.SSSZZ
          in: query
          name: releasedAfter
          required: false
          schema:
            type: string
            format: date-time
        - description: >
            Filters postings by custom fields. Multiple custom field values can
            be provided, separated by comma (",").

            Format:
            custom_field.CUSTOM_FIELD_ID=CUSTOM_FIELD_VALUE1_ID,CUSTOM_FIELD_VALUE2_ID
          in: query
          name: customField
          required: false
          style: form
          schema:
            type: object
            propertyNames:
              pattern: ^custom_field\.[^\s]+$
            additionalProperties:
              type: string
              pattern: ^[^\s]+$
            example: &ref_0
              custom_field.52d95747e4b0ba7acb9217ea: 23aba1d4-4c81-48f7-9ae2-3ab84ee32a80
            x-examples:
              - *ref_0
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PostingList'
  /v1/companies/{companyIdentifier}/postings/{postingId}:
    get:
      tags:
        - postings
      summary: Get posting by posting id or uuid for given company
      operationId: Postings_getByPostingIdOrUuid
      security:
        - {}
        - key: []
      description: >-
        Note: In order to update content of a job posting available via the
        Posting API, you need to re-post the job in SmartRecruiters application.
      parameters:
        - description: Language of translation
          in: header
          name: accept-language
          schema:
            $ref: '#/components/schemas/JobAdLanguageCode'
        - description: Identifier of a company
          in: path
          name: companyIdentifier
          required: true
          schema:
            type: string
        - description: Posting identifier or uuid
          in: path
          name: postingId
          required: true
          schema:
            type: string
        - description: >-
            sourceTypeId can be retrieved using [get
            /configuration/sources](https://developers.smartrecruiters.com/reference/configurationsourcetypes-1)
            endpoint. Used together with **sourceId** and **sourceSubTypeId** to
            add source tracking parameter to **applyUrl**.
          in: query
          name: sourceTypeId
          required: false
          schema:
            type: string
        - description: >-
            sourceSubTypeId can be retrieved using [get
            /configuration/sources](https://developers.smartrecruiters.com/reference/configurationsourcetypes-1)
            endpoint. Used together with **sourceId** and **sourceTypeId** to
            add source tracking parameter to **applyUrl**.
          in: query
          name: sourceSubTypeId
          required: false
          schema:
            type: string
        - description: >-
            sourceId can be retrieved using [get
            /configuration/sources/{sourceType}/values](https://developers.smartrecruiters.com/reference/configurationsourcevaluesall-1)
            endpoint. Used together with **sourceTypeId** and
            **sourceSubTypeId** to add source tracking parameter to
            **applyUrl**.
          in: query
          name: sourceId
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Posting'
  /v1/companies/{companyIdentifier}/departments:
    get:
      tags:
        - postings
      summary: List departments for given company
      operationId: Postings_listDepartmentsForCompany
      security:
        - {}
        - key: []
      description: List departments for given company.
      parameters:
        - description: Language of translation
          in: header
          name: accept-language
          schema:
            $ref: '#/components/schemas/JobAdLanguageCode'
        - description: Identifier of a company
          in: path
          name: companyIdentifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Departments'
  /files/{reportFileId}/data:
    get:
      tags:
        - files
      summary: Download report file
      operationId: Files_downloadReportData
      security:
        - key: []
        - oauth:
            - reporting_read
      description: >
        Use this endpoint to download a specific report file. The response
        contains report data in CSV format.

        ### Note

        It is not recommended to attempt downloading large report files via Live
        Docs or Internet Browser. To get a large report file, use command line
        tools or native HTTP clients.
      parameters:
        - description: Report file identifier
          name: reportFileId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/FilesDownloadReportDataResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no report file with the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /files/{reportFileId}:
    get:
      tags:
        - files
      summary: Get report file
      operationId: Files_getFileDetails
      security:
        - key: []
        - oauth:
            - reporting_read
      description: Use this endpoint to get a specific report file details.
      parameters:
        - description: Report file identifier
          name: reportFileId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportFileResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no report file with the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /reports/{reportId}/files/recent/data:
    get:
      tags:
        - reports
      summary: Download most recent report file
      operationId: Reports_downloadRecentFile
      security:
        - key: []
        - oauth:
            - reporting_read
      description: >
        Use this endpoint to download the most recent report file for a specific
        report. The response contains report data in CSV format. In order to get
        a successful response, there have to be at least 1 successfully
        generated report file for the report.

        ### Etags

        Along with the successful response, the `Etag` HTTP header is returned,
        containing ETag identifier of the report file. In order to save
        bandwidth resources, the `If-None-Match HTTP` header containing the
        recently retrieved report file ETag can be passed with the request. If
        there's no report file, that is newer than the one referred in the
        `If-None-Match` header, the API responds with HTTP `304 Not Modified`
        status code and does not provide content.

        ### Note

        It is not recommended to attempt downloading large report files via Live
        Docs or Internet Browser. To get a large report file, use command line
        tools or native HTTP clients.
      parameters:
        - description: Report file ETag to be compared with the most recent report file
          name: If-None-Match
          in: header
          schema:
            type: string
        - description: Report identifier
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          headers:
            ETag:
              description: Report file ETag
              style: simple
              schema:
                type: string
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ReportsDownloadRecentFileResponse'
        '304':
          description: Returned when there's no newer report file available.
        '400':
          description: Returned when the report ID is invalid.
          content:
            text/csv;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            text/csv;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Returned when a caller is not authorized to download the report
            file.
          content:
            text/csv;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no successfully generated report file.
          content:
            text/csv;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /reports/{reportId}/files:
    get:
      tags:
        - reports
      summary: Get report files
      operationId: Reports_getReportFiles
      security:
        - key: []
        - oauth:
            - reporting_read
      description: >
        Use this endpoint to fetch a list of report files of a specific report.
        Report files are sorted by generation date (newer report files first).

        ### Paging

        Whenever there's more data to be returned, the `nextPage` property will
        contain an opaque identifier of the next page. The value can be then
        passed as a page query parameter in a subsequent request. Another option
        is to use the response's `Link` HTTP header, which contains a web link
        to the following page, example:

        ```

        <https://api.smartrecruiters.com/reporting-api/v201804/reports/{reportId}/files?page=MjEyMy0wMS0wMVQwMDowMDowMC4xMjFaO2Q7MDg4MjY4MWItOTIzYi00ZTIwLWIwMDctY2Y0Y2I0YTM5ODRi>;
        rel="link"

        ```
      parameters:
        - description: Opaque page identifier to be returned.
          name: page
          in: query
          schema:
            type: string
        - description: Number of entities that should be returned per page.
          name: limit
          in: query
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            default: 10
        - description: Report identifier
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          headers:
            Link:
              description: Link to the next report files page, if available
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportFilesResponse'
        '400':
          description: >-
            Returned when the report ID, page parameter or limit parameter is
            invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no report with the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - reports
      summary: Generate ad-hoc report
      operationId: Reports_generateAdhocReportFile
      security:
        - key: []
        - oauth:
            - reporting_write
      description: >-
        Use this endpoint to generate ad-hoc report.

        NOTE: Report files are generated asynchronously. Ensure the report file
        status is: COMPLETED before fetching the data. To check the report file
        status use the GET /reports/{reportId}/files/recent endpoint.
      parameters:
        - description: Report identifier
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportFileResponse'
        '400':
          description: >-
            Returned when the report ID or the identity is invalid or the report
            is already pending generation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no report with the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Returned when the report was modified concurrently.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /reports/{reportId}/files/recent:
    get:
      tags:
        - reports
      summary: Get most recent report file
      operationId: Reports_getRecentFile
      security:
        - key: []
        - oauth:
            - reporting_read
      description: >
        Use this endpoint to get the most recent report file details for a
        specific report. In order to get a successful response, there have to be
        at least 1 successfully generated report file for the report.

        ### Etags

        Along with the successful response, the `Etag` HTTP header is returned,
        containing ETag identifier of the report file. In order to save
        bandwidth resources, the `If-None-Match HTTP` header containing the
        recently retrieved report file ETag can be passed with the request. If
        there's no report file, that is newer than the one referred in the
        `If-None-Match` header, the API responds with HTTP `304 Not Modified`
        status code and does not provide content.
      parameters:
        - description: Report file ETag to be compared with the most recent report file
          name: If-None-Match
          in: header
          schema:
            type: string
        - description: Report identifier
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          headers:
            ETag:
              description: Report file ETag
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportFileResponse'
        '304':
          description: Returned when there's no newer report file available.
        '400':
          description: Returned when the report ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no successfully generated report file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /reports/{reportId}:
    get:
      tags:
        - reports
      summary: Get report
      operationId: Reports_getDetails
      security:
        - key: []
        - oauth:
            - reporting_read
      description: Use this endpoint to get a specific report details.
      parameters:
        - description: Report identifier
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportResponse'
        '400':
          description: Returned when the report ID is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Returned when there is no report with the given ID.
  /reports:
    get:
      tags:
        - reports
      summary: Get reports
      operationId: Reports_listByModificationDate
      security:
        - key: []
        - oauth:
            - reporting_read
      description: >
        Use this endpoint to fetch a list of reports. Reports are sorted by
        modification date (newer reports first).

        ### Paging

        Whenever there's more data to be returned, the `nextPage` property will
        contain an opaque identifier of the next page. The value can be then
        passed as a page query parameter in a subsequent request. Another option
        is to use the response's `Link` HTTP header, which contains a web link
        to the following page, example:

        ```

        <https://api.smartrecruiters.com/reporting-api/v201804/reports?page=MjAyMy0wMy0wOFQxMTozODo1Ni4wNzQ3MzVaOzIzNTJlNzRhLTdjNGQtNDcwNy04NDQ4LWZiMmE5MDIxMDBiNg%3D%3D>;
        rel="link"

        ```
      parameters:
        - description: Opaque page identifier to be returned.
          name: page
          in: query
          schema:
            type: string
        - description: Number of entities that should be returned per page.
          name: limit
          in: query
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: Successful response.
          headers:
            Link:
              description: Link to the next reports page, if available
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportsResponse'
        '400':
          description: Returned when the page parameter or limit parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when a request was not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Returned when a caller is not authorized to perform the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /reviews:
    get:
      tags:
        - reviews
      summary: Retrieves all reviews for specified candidate and job
      operationId: Reviews_getAllForCandidateJob
      security:
        - key: []
        - oauth:
            - reviews_read
      parameters:
        - description: ID of the candidate
          in: query
          name: candidateId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - description: ID of the job
          in: query
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: Review was retreived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsGetAllForCandidateJobResponse'
        '401':
          description: >
            with codes:

            * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is not
            authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With code **'APPLICATION_NOT_FOUND'** when there is no application
            of the candidate in a the job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - reviews
      summary: Creates a review
      operationId: Reviews_createReview
      security:
        - key: []
        - oauth:
            - reviews_write
      requestBody:
        description: Review to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
        required: true
      responses:
        '201':
          description: Review was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description: >
            with codes:

            * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is not
            authorized to access resource

            * **REVIEWER_NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when reviewer is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden to create a review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            When input validation fails or with codes:

            * **INVALID_OVERALL** when invalid overall

            * **NON_EXISTING_REVIEWER** when reviewer does not exist

            * **INACTIVE_OR_DELETED_REVIEWER** when reviewer is inactive or
            deleted

            * **CANDIDATE_NOT_FOUND** when candidate with given id not found

            * **JOB_NOT_FOUND** when job with given id not found

            * **APPLICATION_NOT_FOUND** when application for given candidate id
            and job id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /reviews/{reviewId}:
    parameters:
      - $ref: '#/components/parameters/ReviewId'
    get:
      tags:
        - reviews
      summary: Retrieves a review
      operationId: Reviews_getById
      security:
        - key: []
        - oauth:
            - reviews_read
      responses:
        '200':
          description: Review was retreived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: |
            with codes:
            * **INVALID_REVIEW_ID** when review id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: >
            with codes:

            * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is not
            authorized to access resource

            * **REVIEWER_NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when reviewer is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden to retreive a review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **REVIEW_NOT_FOUND** when no review with given id is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - reviews
      summary: Updates a review
      operationId: Reviews_updateReviewById
      security:
        - key: []
        - oauth:
            - reviews_write
      requestBody:
        description: Review to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewToUpdateInput'
        required: true
      responses:
        '204':
          description: Review was updated
        '400':
          description: |
            with codes:
            * **INVALID_SOURCE** when review source is invalid
            * **INVALID_REVIEW_ID** when review id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: >
            with codes:

            * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is not
            authorized to access resource

            * **REVIEWER_NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when reviewer is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden to retreive a review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **REVIEW_NOT_FOUND** when no review with given id is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            When input validation fails or with codes:

            * **INVALID_OVERALL** when invalid overall

            * **NON_EXISTING_REVIEWER** when reviewer does not exist

            * **INACTIVE_OR_DELETED_REVIEWER** when reviewer is inactive or
            deleted

            * **REVIEWER_ID_DOES_NOT_MATCH** when reviewer id does not match
            reviewer id in review
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - reviews
      summary: Deletes a review
      operationId: Reviews_deleteReviewById
      security:
        - key: []
        - oauth:
            - reviews_write
      parameters:
        - $ref: '#/components/parameters/ReviewerId'
      responses:
        '204':
          description: Review was deleted
        '400':
          description: |
            with codes:
            * **INVALID_SOURCE** when review source is invalid
            * **INVALID_REVIEW_ID** when review id is invalid
            * **INVALID_REVIEWER_ID** when review id or employee id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: >
            with codes:

            * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is not
            authorized to access resource

            * **REVIEWER_NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when reviewer is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden to retreive a review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: |
            with codes:
            * **REVIEW_NOT_FOUND** when no review with given id is found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            When input validation fails or with codes:

            * **NON_EXISTING_REVIEWER** when reviewer does not exist

            * **INACTIVE_OR_DELETED_REVIEWER** when reviewer is inactive or
            deleted

            * **REVIEWER_ID_DOES_NOT_MATCH** when reviewer id does not match
            reviewer id in review
        '500':
          $ref: '#/components/responses/ServerError'
  /new-hires/{newHireId}:
    parameters:
      - $ref: '#/components/parameters/NewHireId'
    get:
      tags:
        - new-hires
      summary: Returns details for a single New Hire
      operationId: Newhires_getDetails
      security:
        - key: []
        - oauth:
            - new_hires_read
      responses:
        '200':
          description: New Hire details were retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewHire'
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'NEW_HIRE_NOT_FOUND'** when there is no New Hire present for
            given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /onboarding-processes/{onboardingProcessId}:
    parameters:
      - $ref: '#/components/parameters/OnboardingProcessId'
    get:
      tags:
        - onboarding-processes
      summary: Returns details of a single Onboarding Process
      operationId: Onboardingprocesses_getDetails
      security:
        - key: []
        - oauth:
            - onboarding_processes_read
      responses:
        '200':
          description: Onboarding Process details were retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardingProcess'
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'ONBOARDING_PROCESS_NOT_FOUND'** when there is no Onboarding
            Process for given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /web-form-assignments/{webFormAssignmentId}/form-answers:
    parameters:
      - $ref: '#/components/parameters/WebFormAssignmentId'
    get:
      tags:
        - assignments-submissions
      summary: Returns answers submitted for a single Web Form Assignment
      operationId: Assignmentssubmissions_getFormAnswers
      security:
        - key: []
        - oauth:
            - assignments_submissions_read
      responses:
        '200':
          description: Answers submitted for Web Form Assignment were retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebFormAnswers'
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'WEB_FORM_ASSIGNMENT_NOT_FOUND'** when there is no Web Form
            Assignment for given id

            * **'WEB_FORM_ASSIGNMENT_ANSWERS_NOT_FOUND'** when there are no Web
            Form Assignment Answers for given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /web-form-assignments/{webFormAssignmentId}/fields-metadata:
    parameters:
      - $ref: '#/components/parameters/WebFormAssignmentId'
    get:
      tags:
        - assignments-submissions
      summary: >-
        Returns metadata for the fields that belong to a single Web Form
        Assignment
      operationId: Assignmentssubmissions_getFieldsMetadata
      security:
        - key: []
        - oauth:
            - assignments_submissions_read
      responses:
        '200':
          description: >-
            The metadata of the fields that belong to a single Web Form
            Assignment was retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebFormFieldsMetadata'
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'WEB_FORM_ASSIGNMENT_NOT_FOUND'** when there is no Web Form
            Assignment for given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /fillable-pdf-form-assignments/{fillablePdfFormAssignmentId}/form-answers:
    parameters:
      - $ref: '#/components/parameters/FillablePdfFormAssignmentId'
    get:
      tags:
        - assignments-submissions
      summary: Returns answers submitted for a single Fillable PDF Form Assignment
      operationId: Assignmentssubmissions_getFormAnswers
      security:
        - key: []
        - oauth:
            - assignments_submissions_read
      responses:
        '200':
          description: >-
            PDF file filled with submitted answers Fillable PDF Form Assignment
            was retrieved
          content:
            application/pdf:
              schema:
                $ref: >-
                  #/components/schemas/AssignmentssubmissionsGetFormAnswersResponse
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'FILLABLE_PDF_FORM_ASSIGNMENT_NOT_FOUND'** when there is no
            Filalble PDF Form Assignment for given id

            * **'FILLABLE_PDF_FORM_ASSIGNMENT_ANSWERS_NOT_FOUND'** when there
            are no Filalble PDF Form Assignment Answers for given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /onboarding-processes/{onboardingProcessId}/assignments:
    parameters:
      - $ref: '#/components/parameters/OnboardingProcessId'
    get:
      tags:
        - assignments
      summary: Returns Assignments associated with a single Onboarding Process
      operationId: Assignments_getByProcessId
      security:
        - key: []
        - oauth:
            - assignments_read
      responses:
        '200':
          description: >-
            Assignments associated with the given Onboarding Process were
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignments'
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'ONBOARDING_PROCESS_NOT_FOUND'** when there is no Onboarding
            Process for given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /activity-assignments/{activityAssignmentId}/attachments:
    parameters:
      - $ref: '#/components/parameters/ActivityAssignmentId'
    get:
      tags:
        - assignments-submissions
      summary: Returns list of Attachments submitted for a single Activity Assignment
      operationId: Assignmentssubmissions_listAttachments
      security:
        - key: []
        - oauth:
            - assignments_submissions_read
      responses:
        '200':
          description: >-
            Attachments submitted for the given Activity Assignment were
            returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityAssignmentAttachments'
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'ACTIVITY_ASSIGNMENT_NOT_FOUND'** when there is no Activity
            Assignment for given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /activity-assignments/{activityAssignmentId}/attachments/{attachmentId}:
    parameters:
      - $ref: '#/components/parameters/ActivityAssignmentId'
      - $ref: '#/components/parameters/AttachmentId'
    get:
      tags:
        - assignments-submissions
      summary: Returns single Attachment for specific Activity Assignment
      operationId: Assignmentssubmissions_getSingleAttachment
      security:
        - key: []
        - oauth:
            - assignments_submissions_read
      responses:
        '200':
          description: >-
            Single Attachment submitted for the given Activity Assignment was
            retrieved
          content:
            application/octet-stream:
              schema:
                $ref: >-
                  #/components/schemas/AssignmentssubmissionsGetSingleAttachmentResponse
        '401':
          description: >
            With codes: * **NOT_AUTHORIZED_TO_ACCESS_RESOURCE** when caller is
            not authorized to access resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            With codes:

            * **'ACTIVITY_ASSIGNMENT_NOT_FOUND'** when there is no Activity
            Assignment for given id

            * **'ATTACHMENT_NOT_FOUND'** when there is no Attachment for given
            id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
  /users:
    get:
      tags:
        - users
      summary: List users of your company
      operationId: Users_list
      security:
        - key: []
        - oauth:
            - users_read
      parameters:
        - description: full-text search query based on firstName, lastName, email
          in: query
          name: q
          schema:
            type: string
            minLength: 3
        - description: number of elements to return. max value is 100
          in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - description: number of elements to skip while processing result
          in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
        - description: >-
            ISO8601-formatted time boundaries for the user update time, Format:
            yyyy-MM-ddTHH:mm:ss.SSSZZ
          in: query
          name: updatedAfter
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of users in your company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: |
            with codes
            * **INVALID_PAGE_ID** when pageId is not a correct value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    post:
      tags:
        - users
      summary: Create a new user
      operationId: Users_createNewUser
      security:
        - key: []
        - oauth:
            - users_manage
      requestBody:
        description: User object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: >
            with codes

            * **LANGUAGE_DISABLED** User language is not available as part of
            company subscription plan

            * **INVALID_USER_NAME** when firstName or lastName contains invalid
            characters (e.g. leading or trailing spaces)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to access users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/SemanticError'
      deprecated: true
  /users/me:
    get:
      tags:
        - users
      summary: Get details of my user
      operationId: Users_getDetails
      security:
        - key: []
        - oauth:
            - users_read
      responses:
        '200':
          description: My user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      deprecated: true
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - users
      summary: Get details of a user with given id
      operationId: Users_getDetails
      security:
        - key: []
        - oauth:
            - users_read
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    patch:
      tags:
        - users
      summary: Update a user
      operationId: Users_updateUserById
      security:
        - key: []
        - oauth:
            - users_manage
      requestBody:
        $ref: '#/components/requestBodies/JSONPatch'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: >
            with codes

            * **LANGUAGE_DISABLED** Updated language is not available as part of
            company subscription plan

            * **INVALID_LOCATION** when one of location properties contains
            invalid characters

            * **INVALID_USER_NAME** when firstName or lastName contains invalid
            characters (e.g. leading or trailing spaces)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to access users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            with codes

            * **RESOURCE_ALREADY_EXIST** when user already exists

            * **SSO_IDENTIFIER_ALREADY_EXISTS** when user with given
            ssoIdentifier already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
        - users
      summary: Deactivate a user
      operationId: Users_deactivateUser
      security:
        - key: []
        - oauth:
            - users_manage
      description: >-
        Deactivates a User with given Id. Please use `DELETE
        /users/{id}/activation` instead.
      responses:
        '204':
          description: User successfully deactivated
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /users/{id}/reset-password:
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      tags:
        - users
      summary: Send a password reset email to a user
      operationId: Users_sendPasswordResetEmail
      security:
        - key: []
        - oauth:
            - users_manage
      description: >
        Send password recovery instruction to the email address associated with
        a user with a given id. The password will not be reset until the user
        with a given id creates a new password.
      responses:
        '204':
          description: The password reset email successfully sent
        '400':
          description: >
            with codes

            * **USER_DISABLED** when user is disabled

            * **USER_LOCKED** when user is locked (after login/password
            failures)

            * **USER_EMAIL_INVALID** when user email is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with codes

            * **PASSWORD_AUTHENTICATION_DISABLED** when user cannot use
            login/password authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}/activation-email:
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      tags:
        - users
      summary: Send an activation email to a user
      operationId: Users_sendActivationEmail
      security:
        - key: []
        - oauth:
            - users_manage
      description: >
        Send an activation email to a user with given id. Users created via an
        API are not active.

        This method is an alternative to activating a user directly and allows
        sending an activation email

        in which a user will have to open a link and follow instructions on a
        screen to activate his/her account.
      responses:
        '204':
          description: Activation email successfully sent
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >
            with codes

            * **ACTIVATION_EMAIL_UNAVAILABLE** when user is already activated or
            deactivated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /users/{id}/activation:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - users
      summary: Activate a user
      operationId: Users_activateUser
      security:
        - key: []
        - oauth:
            - users_manage
      description: >
        Activate a user with given id. Users created via an API are not active.

        This method allows activating a user so he/she can sign in straight
        away.
      responses:
        '204':
          description: User successfully activated
        '400':
          description: |
            with codes
            * **PROPERTY_INVALID** when user's property is invalid, e.g. email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: >
            When activating a previously deactivated user, whilst there is an
            active user with the same email.

            There could not be more than one activated user with the same email
            in the same time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
    delete:
      tags:
        - users
      summary: Deactivate a user
      operationId: Users_deactivateUserById
      security:
        - key: []
        - oauth:
            - users_manage
      responses:
        '204':
          description: User successfully deactivated
        '403':
          description: |
            with code
            * **PERMISSION_DENIED** when user is not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /users/{id}/avatar:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - users
      summary: Update user avatar
      operationId: Users_updateAvatar
      security:
        - key: []
        - oauth:
            - users_manage
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsersUpdateAvatarRequest'
      responses:
        '204':
          description: Avatar successfully updated
        '400':
          description: >
            with codes

            * **UNMARSHALLING_ERROR** when request cannot be unmarshalled.
              This might be usually caused by missing:
                - `boundary` parameter in HTTP Request `Content-Type` header
                - `boundary` between parts
                - `Content-Disposition` header in at least one part
                - `name` parameter in at least one `Content-Disposition` header.
              Please check reference: https://tools.ietf.org/html/rfc7578#section-4

            * **MISSING_FILE_PART** when missing part with name `file` (`file`
            is case sensitive)

            * **MISSING_FILE_NAME** when `filename` is not available in `file`
            part

            * **MISSING_MEDIA_TYPE** when media type in `Content-Type` header is
            not available in `file` part
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: true
  /system-roles:
    get:
      tags:
        - users
      summary: List system roles
      operationId: Users_listSystemRoles
      security:
        - key: []
        - oauth:
            - users_read
      responses:
        '200':
          description: List of system roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemRoles'
        '403':
          description: |
            with code * **PERMISSION_DENIED** Not permitted to manage users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /access-groups:
    get:
      tags:
        - users
      summary: List access groups configured in your company
      operationId: Users_listAccessGroups
      security:
        - key: []
        - oauth:
            - users_read
      responses:
        '200':
          description: List of access groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroups'
        '403':
          description: >
            with code * **PERMISSION_DENIED** Not permitted to manage access
            groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      externalDocs:
        url: >-
          https://help.smartrecruiters.com/Company_settings/User_Management/Access_Groups
  /access-groups/{accessGroupId}/users/{id}:
    parameters:
      - $ref: '#/components/parameters/accessGroupId'
      - $ref: '#/components/parameters/userId'
    delete:
      tags:
        - users
      summary: Remove user from access group
      operationId: Users_removeFromAccessGroup
      security:
        - key: []
        - oauth:
            - users_manage
      responses:
        '204':
          description: User successfully removed from access group
        '403':
          description: >
            with code * **PERMISSION_DENIED** Not permitted to manage access
            groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            with codes

            * **USER_NOT_FOUND** when user with given id doesn't exist

            * **USER_NOT_IN_ACCESS_GROUP** when user is not member of access
            group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /access-groups/{accessGroupId}/users:
    parameters:
      - $ref: '#/components/parameters/accessGroupId'
    post:
      tags:
        - users
      summary: Assign users to access group
      operationId: Users_assignToAccessGroup
      security:
        - key: []
        - oauth:
            - users_manage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIds'
      responses:
        '201':
          description: Users successfully added to access group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroups'
        '400':
          description: >
            Cannot assigned user to access group with codes

            * **ACCESS_GROUP_NOT_ALLOWED_FOR_USER** when access groups are not
            allowed for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            with code * **PERMISSION_DENIED** Not permitted to manage access
            groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >
            User or access group not found with codes

            * **USER_NOT_FOUND** when user with given id doesn't exist

            * **ACCESS_GROUP_NOT_FOUND**  when access group with given id
            doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subscriptions:
    post:
      tags:
        - subscriptions
      summary: Subscribe to a webhook.
      operationId: Subscriptions_subscribeToWebhook
      security:
        - key: []
        - oauth:
            - webhooks_write
            - webhooks_manage
      description: >
        Please be aware that before any event is delivered each subscription
        needs to be activated.


        See [subscription activation](subscriptionsactivate-1).


        We do limit number of subscriptions each subscriber can register. It
        means that:


        * individual user can register up to 20 subscriptions

        * OAuth application can register up to 20 subscriptions on behalf of a
        single user


        Alerting email address and callback authentication properties are
        optional.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
      responses:
        '201':
          description: Webhook subscription created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Invalid request query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >
            With codes:

            * **NO_PERMISSION_TO_MANAGE_WEBHOOKS** when no permission to manage
            webhook subscriptions

            * **SUBSCRIPTIONS_LIMIT_EXCEEDED** when subscription limit for
            subscriber is exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: >-
            Incorrect subscription data. Provided callback URL is invalid or
            event name is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      callbacks:
        onJobCreated:
          $ref: '#/components/callbacks/onJobCreated'
        onJobUpdated:
          $ref: '#/components/callbacks/onJobUpdated'
        onJobStatusUpdated:
          $ref: '#/components/callbacks/onJobStatusUpdated'
        onJobHiringTeamUpdated:
          $ref: '#/components/callbacks/onJobHiringTeamUpdated'
        onJobAdCreated:
          $ref: '#/components/callbacks/onJobAdCreated'
        onJobAdUpdated:
          $ref: '#/components/callbacks/onJobAdUpdated'
        onJobAdPostingsUpdated:
          $ref: '#/components/callbacks/onJobAdPostingsUpdated'
        onPositionCreated:
          $ref: '#/components/callbacks/onPositionCreated'
        onPositionUpdated:
          $ref: '#/components/callbacks/onPositionUpdated'
        onPositionDeleted:
          $ref: '#/components/callbacks/onPositionDeleted'
        onApplicationCreated:
          $ref: '#/components/callbacks/onApplicationCreated'
        onApplicationStatusUpdated:
          $ref: '#/components/callbacks/onApplicationStatusUpdated'
        onApplicationFieldsUpdated:
          $ref: '#/components/callbacks/onApplicationFieldsUpdated'
        onApplicationOnboardingStatusUpdated:
          $ref: '#/components/callbacks/onApplicationOnboardingStatusUpdated'
        onApplicationAttachmentCreated:
          $ref: '#/components/callbacks/onApplicationAttachmentCreated'
        onApplicationSourceUpdated:
          $ref: '#/components/callbacks/onApplicationSourceUpdated'
        onCandidateCreated:
          $ref: '#/components/callbacks/onCandidateCreated'
        onCandidateUpdated:
          $ref: '#/components/callbacks/onCandidateUpdated'
        onCandidateDeleted:
          $ref: '#/components/callbacks/onCandidateDeleted'
        onOfferCreated:
          $ref: '#/components/callbacks/onOfferCreated'
        onOfferUpdated:
          $ref: '#/components/callbacks/onOfferUpdated'
        onOfferApprovalCreated:
          $ref: '#/components/callbacks/onOfferApprovalCreated'
        onOfferApprovalApproved:
          $ref: '#/components/callbacks/onOfferApprovalApproved'
        onOfferApprovalRejected:
          $ref: '#/components/callbacks/onOfferApprovalRejected'
        onOfferApprovalAbandoned:
          $ref: '#/components/callbacks/onOfferApprovalAbandoned'
        onOfferApprovalStepApproved:
          $ref: '#/components/callbacks/onOfferApprovalStepApproved'
        onOfferApprovalStepRejected:
          $ref: '#/components/callbacks/onOfferApprovalStepRejected'
        onOfferApproverSkipped:
          $ref: '#/components/callbacks/onOfferApproverSkipped'
        onOfferApproverDelegated:
          $ref: '#/components/callbacks/onOfferApproverDelegated'
        onOfferApprovalCommentCreated:
          $ref: '#/components/callbacks/onOfferApprovalCommentCreated'
        onJobApprovalCreated:
          $ref: '#/components/callbacks/onJobApprovalCreated'
        onJobApprovalApproved:
          $ref: '#/components/callbacks/onJobApprovalApproved'
        onJobApprovalRejected:
          $ref: '#/components/callbacks/onJobApprovalRejected'
        onJobApprovalAbandoned:
          $ref: '#/components/callbacks/onJobApprovalAbandoned'
        onJobApprovalStepApproved:
          $ref: '#/components/callbacks/onJobApprovalStepApproved'
        onJobApprovalStepRejected:
          $ref: '#/components/callbacks/onJobApprovalStepRejected'
        onJobApproverSkipped:
          $ref: '#/components/callbacks/onJobApproverSkipped'
        onJobApproverDelegated:
          $ref: '#/components/callbacks/onJobApproverDelegated'
        onJobApprovalCommentCreated:
          $ref: '#/components/callbacks/onJobApprovalCommentCreated'
        onReviewCreated:
          $ref: '#/components/callbacks/onReviewCreated'
        onReviewUpdated:
          $ref: '#/components/callbacks/onReviewUpdated'
        onReviewDeleted:
          $ref: '#/components/callbacks/onReviewDeleted'
        onApplicationScreeningAnswersCreated:
          $ref: '#/components/callbacks/onApplicationScreeningAnswersCreated'
        onApplicationScreeningAnswersUpdated:
          $ref: '#/components/callbacks/onApplicationScreeningAnswersUpdated'
        onOnboardingProcessStarted:
          $ref: '#/components/callbacks/onOnboardingProcessStarted'
        onOnboardingAssignmentsHighPriorityCompleted:
          $ref: '#/components/callbacks/onOnboardingAssignmentsHighPriorityCompleted'
        onOnboardingAssignmentsCompleted:
          $ref: '#/components/callbacks/onOnboardingAssignmentsCompleted'
    get:
      tags:
        - subscriptions
      summary: Retrieve webhook subscriptions.
      operationId: Subscriptions_getWebhookSubscriptions
      security:
        - key: []
        - oauth:
            - webhooks_read
            - webhooks_manage
      parameters:
        - $ref: '#/components/parameters/pageId'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of subscription details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
          headers:
            Link:
              description: >-
                Link to next resources is provided in the Link header according
                to [RFC8288](https://tools.ietf.org/html/rfc8288). The relation
                type is "next".
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: No permission to see subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subscriptions/{id}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    get:
      tags:
        - subscriptions
      summary: Retrieve single webhook subscription.
      operationId: Subscriptions_getSingleWebhook
      security:
        - key: []
        - oauth:
            - webhooks_read
            - webhooks_manage
      responses:
        '200':
          description: Subscription details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '403':
          description: No permission to see this subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
    delete:
      tags:
        - subscriptions
      summary: Delete webhook subscription.
      operationId: Subscriptions_deleteWebhookSubscription
      security:
        - key: []
        - oauth:
            - webhooks_delete
            - webhooks_manage
      responses:
        '204':
          description: Webhook subscription deleted.
        '403':
          description: No permission to delete webhook subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
  /subscriptions/{id}/activation:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    put:
      tags:
        - subscriptions
      summary: Activate webhook subscription.
      operationId: Subscriptions_activateWebhookSubscription
      security:
        - key: []
        - oauth:
            - webhooks_write
            - webhooks_manage
      description: >
        To ensure that target server is ready to consume notifications, we
        require you to implement the initial

        handshake.


        Having subscription with `callbackUrl`: `https://example.org/hook`,
        during activation we will make `POST`

        request with `X-Hook-Secret` header:


        ```

        POST https://example.com/hook

        X-Hook-Secret: 4jn8fs9011jj8

        ```


        We expect your server to respond within the time of 20 seconds with HTTP
        `200` response containing

        `X-Hook-Secret` header with same value.


        ```

        Response 200

        X-Hook-Secret: 4jn8fs9011jj8

        ```
      responses:
        '204':
          description: Subscription activated.
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
        '409':
          description: Subscription already activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '424':
          description: Webhook activation handshake failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subscriptions/{id}/secret-key:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    post:
      tags:
        - subscriptions
      summary: Generate secret key for a webhook subscription.
      operationId: Subscriptions_generateSecretKey
      security:
        - key: []
        - oauth:
            - webhooks_write
            - webhooks_manage
      description: >
        We allow you to generate a secret key for the subscription. You can use
        it to verify the author of callback messages. When you

        have a secret key already defined - a creation of new one will make old
        one deprecated - it will be still active for 24 hours

        though. You can have up to 16 non-expired secret keys.


        A signature will be included in header `smartrecruiters-signature` of
        callback request. Additionally we will send

        `smartrecruiters-timestamp` header with timestamp (seconds) of request.


        `smartrecruiters-signature` header value has the following format:


        ```

        $SIGNATURE_SCHEMA=$SIGNATURE_1;$SIGNATURE_SCHEMA=$SIGNATURE_2...

        ```


        As you may notice there may be multiple signatures included in the
        header. It can be caused by one or both:

        * having multiple active keys

        * smartrecruiters providing multiple signatures per key with different
        signature schemes. We may use it in the

        future to deliver new algorithm of signature creation without breaking
        backward compability.

        Every segment of header value is delimited by `;` character


        Currently, we support and sent following signature
        (`$SIGNATURE_SCHEMA`):


        #### 1) `v1`


        Signature calculated using HMAC with SHA256 algorithm. Hash should be
        calculated from following elements

        concatenated by the `.` character:
          * `smartrecruiters-timestamp` header value
          * request body
          * `event-id` header value
          * `event-name` header value
          * `event-version` header value
          * `link` header value

        Order of this elements is important. In absence of header please use an
        empty string as its value.


        For example assume we have:

        * One active secret key: HeBVky2bccvvkcXPimH8c

        * Callback request:
          * headers:
            * content-type: application/json
            * smartrecruiters-signature: "v1=2e9291f10d44ca10204a4cd81b05d73b6a316b2b605d4e2e0e0b37b40198ce1f"
            * smartrecruiters-timestamp = "1574080897"
            * event-id = "123"
            * link = "<http://smartrecruiters.com/endpoint>; rel=self"
            * event-name = "application.created"
            * event-version = "v201910"
          * body: {"job_id":"jid","candidate_id": "cid"}

        hash should be calculated from value:

        ```

        1574080897.{"job_id":"jid","candidate_id":"cid"}.123.application.created.v201910.<http://smartrecruiters.com/endpoint>;
        rel=self

        ```


        and after using HMAC and SHA256 it should give you hash :
        2e9291f10d44ca10204a4cd81b05d73b6a316b2b605d4e2e0e0b37b40198ce1f,


        so that `smartrecruiters-signature` header in the callback request will
        have value:

        `v1=2e9291f10d44ca10204a4cd81b05d73b6a316b2b605d4e2e0e0b37b40198ce1f`
      responses:
        '201':
          description: Secret key sucessfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeyPayload'
        '403':
          description: >
            With codes:

            * **NO_PERMISSION_TO_MANAGE_WEBHOOKS** when no permission to manage
            webhook subscriptions

            * **SECRET_KEYS_LIMIT_EXCEEDED** when secret keys limit for
            subscription is exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
    get:
      tags:
        - subscriptions
      summary: Retrieve subscription secret key
      operationId: Subscriptions_getSecretKey
      security:
        - key: []
        - oauth:
            - webhooks_read
            - webhooks_manage
      description: Retrieves the last secret key for webhook subscription.
      responses:
        '200':
          description: Subscription secret key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeyPayload'
        '403':
          description: No permission to retrieve secret key for webhook subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/SubscriptionNotFound'
  /subscriptions/{id}/callbacks-log:
    get:
      tags:
        - subscriptions
      summary: Retrieve callback request details starting from newest.
      operationId: Subscriptions_getCallbackDetails
      security:
        - key: []
        - oauth:
            - webhooks_read
            - webhooks_manage
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/pageId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/callbackStatus'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
      responses:
        '200':
          description: List of callback request details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallbackRequests'
          headers:
            Link:
              description: >-
                Link to next resources is provided in the Link header according
                to [RFC8288](https://tools.ietf.org/html/rfc8288). The relation
                type is "next".
              schema:
                type: string
components:
  parameters:
    candidateId:
      description: candidate identifier
      in: path
      name: id
      required: true
      schema:
        type: string
    jobId:
      description: job identifier
      in: path
      name: jobId
      required: true
      schema:
        type: string
    attachmentId:
      description: attachment identifier
      in: path
      name: attachmentId
      required: true
      schema:
        type: string
    jobPropertyId:
      description: job property identifier
      in: path
      name: id
      required: true
      schema:
        type: string
    jobPropertyValueId:
      description: job property's value identifier
      in: path
      name: valueId
      required: true
      schema:
        type: string
    jobPropertyDependentId:
      description: job property's dependent identifier
      in: path
      name: dependentId
      required: true
      schema:
        type: string
    jobPropertyDependentValueId:
      description: job property's dependent value identifier
      in: path
      name: dependentValueId
      required: true
      schema:
        type: string
    candidatePropertyId:
      description: candidate property identifier
      in: path
      name: id
      required: true
      schema:
        type: string
    candidatePropertyValueId:
      description: candidate property's value identifier
      in: path
      name: valueId
      required: true
      schema:
        type: string
    sourceType:
      description: Source type from /configuration/sources
      in: path
      name: sourceType
      required: true
      schema:
        type: string
    sourceValueId:
      description: Source id
      in: path
      name: sourceValueId
      required: true
      schema:
        type: string
    sourceSubType:
      description: Source SubType from  /configuration/sources
      in: query
      name: sourceSubType
      required: false
      schema:
        type: string
    language:
      description: language of returned content
      in: header
      name: Accept-Language
      required: false
      schema:
        description: >-
          Language code, can be two-letter for the standard variant or with
          additional two letters after a hyphen to identify a specific locale


          Value "pt-PT" is deprecated and will not work, use "pt" instead.
        $ref: '#/components/schemas/LanguageCode'
        type: string
        default: en
        enum:
          - af
          - am
          - ar
          - hy
          - az
          - eu
          - bn
          - bg
          - ca
          - zh-CN
          - zh-TW
          - hr
          - cs
          - da
          - nl
          - en-GB
          - en
          - et
          - fi
          - fr
          - fr-CA
          - gl
          - ka
          - de
          - el
          - gu
          - iw
          - hi
          - hu
          - is
          - id
          - ga
          - it
          - ja
          - kn
          - km
          - ko
          - lo
          - lv
          - lt
          - ms
          - ml
          - mr
          - mn
          - ne
          - 'no'
          - fa
          - fil
          - pl
          - pt
          - pt-BR
          - pt-PT
          - ro
          - ru
          - sr
          - si
          - sk
          - sl
          - es
          - es-MX
          - sw
          - sv
          - ta
          - te
          - tr
          - uk
          - ur
          - vi
          - cy
          - zu
    sourceIdentifier:
      description: Source identifier
      in: path
      name: sourceIdentifier
      required: true
      schema:
        type: string
        format: uuid
        minLength: 36
        maxLength: 36
    pageId:
      description: identifier of the next page of subscriptions
      in: query
      name: page_id
      required: false
      schema:
        type: string
    pageSize:
      description: pageSize
      in: query
      name: pageSize
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 20000
    ApplicationId:
      description: ID of the application
      in: query
      name: applicationId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    InterviewId:
      description: ID of the interview
      in: path
      name: interviewId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    TimeslotId:
      description: ID of the timeslot
      in: path
      name: timeslotId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    UserId:
      description: ID of the user
      in: path
      name: userId
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
    InterviewType:
      description: Interview type name
      in: path
      name: interviewType
      required: true
      schema:
        $ref: '#/components/schemas/InterviewType'
    jobAdId:
      description: job ad identifier
      in: path
      name: jobAdId
      required: true
      schema:
        type: string
    positionId:
      description: position identifier
      in: path
      name: positionId
      required: true
      schema:
        type: string
    JobApplicationId:
      description: ID of job application
      in: path
      name: jobApplicationId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    MessageId:
      description: identifier of a message
      in: path
      name: id
      required: true
      schema:
        type: string
    CandidateId:
      description: identifier of a candidate
      in: query
      name: candidateId
      required: true
      schema:
        type: string
        format: guid
    JobId:
      description: identifier of a job
      in: query
      name: jobId
      required: false
      schema:
        type: string
        format: guid
    PageId:
      description: identifier of next page
      in: query
      name: pageId
      required: false
      schema:
        type: string
    Limit:
      description: limit
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    ReviewId:
      description: ID of the review
      in: path
      name: reviewId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    ReviewerId:
      description: ID of the reviewer
      in: query
      name: reviewerId
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
    NewHireId:
      description: ID of the New Hire
      in: path
      name: newHireId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    OnboardingProcessId:
      description: ID of the Onboarding Process
      in: path
      name: onboardingProcessId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    WebFormAssignmentId:
      description: ID of the Web Form Assignment
      in: path
      name: webFormAssignmentId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    FillablePdfFormAssignmentId:
      description: ID of the Fillable PDF Form Assignment
      in: path
      name: fillablePdfFormAssignmentId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    ActivityAssignmentId:
      description: ID of the Activity Assignment
      in: path
      name: activityAssignmentId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    AttachmentId:
      description: ID of the Attachment
      in: path
      name: attachmentId
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'
    userId:
      description: user identifier
      in: path
      name: id
      required: true
      schema:
        type: string
    systemRoleId:
      description: system role identifier
      in: path
      name: id
      required: true
      schema:
        type: string
    accessGroupId:
      description: access group identifier
      in: path
      name: accessGroupId
      required: true
      schema:
        type: string
    eventName:
      description: event name
      name: event-name
      in: header
      schema:
        $ref: '#/components/schemas/EventName'
      required: true
    eventVersion:
      description: event version
      name: event-version
      in: header
      schema:
        type: string
      required: true
    eventId:
      description: event id, remains unchanged during consecutive retried callbacks
      name: event-id
      in: header
      schema:
        type: string
      required: true
    smartrecruitersSignature:
      description: >-
        callback signature see at [Create
        Signature](#subscriptions/subscriptions.generateSecretKey)
      name: smartrecruiters-signature
      in: header
      schema:
        type: string
      required: false
    smartrecruitersTimestamp:
      description: >-
        timestamp of callback signature see at [Create
        Signature](#subscriptions/subscriptions.generateSecretKey)
      name: smartrecruiters-timestamp
      in: header
      schema:
        type: number
      required: false
    Link:
      description: >-
        Link to entity details is provided in the Link header according to
        [RFC8288](https://tools.ietf.org/html/rfc8288). The relation type is
        "self".
      name: Link
      in: header
      schema:
        type: string
      required: true
    subscriptionId:
      description: subscription identifier
      in: path
      name: id
      required: true
      schema:
        type: string
    limit:
      description: number of elements to return
      in: query
      name: limit
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    callbackStatus:
      description: status of callback, whan absent all statuses will be returned
      in: query
      name: callbackStatus
      schema:
        type: string
        enum:
          - successful
          - failed
    after:
      description: >
        Requests sent after timestamp. Min value is 30 days ago. Format ISO8601:
        yyyy-MM-ddTHH:mm:ss.SSSZZ
      in: query
      name: after
      schema:
        type: string
        format: date-time
    before:
      description: >
        Requests sent before timestamp. Min value is 30 days ago. Format
        ISO8601: yyyy-MM-ddTHH:mm:ss.SSSZZ
      in: query
      name: before
      schema:
        type: string
        format: date-time
  responses:
    ServerError:
      description: Unexpected error
    SemanticError:
      description: Request body is invalid (e.g. values breaks model definition rules)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SemanticErrorResponse'
    SubscriptionNotFound:
      description: Subscription not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    CallbackAccepted:
      description: >
        Your server implementation should return this HTTP status code if the
        data was received successfully.

        We expect to get the response within 5 seconds. If we don't get response
        during this period, we will

        considered webhook delivary as failed.
  schemas:
    ApplyApiResponse:
      type: object
      properties:
        id:
          type: string
        createdOn:
          type: string
        candidatePortalUrl:
          type: string
        smartrJoinUrl:
          type: string
    ApplyApiError:
      required:
        - code
        - id
      type: object
      properties:
        id:
          type: string
        code:
          type: string
          enum:
            - INVALID_REQUEST
            - INVALID_INPUT
            - DATA_VALIDATION_ERROR
            - RESOURCE_NOT_FOUND_ERROR
            - COMPANY_NOT_FOUND_ERROR
            - COMPANY_RETRIEVAL_ERROR
            - APPLY_API_ERROR
            - FILE_UPLOAD_ERROR
            - FILE_API_ERROR
            - INVALID_API_KEY_ERROR
            - UNAUTHORIZED
            - REST_CALL_TIMEOUT
            - TRAFFIC_LOCKED
        message:
          type: string
    AnswerRecord:
      type: object
      properties:
        fields:
          description: >-
            Multiple fields may be used for example for questions (Preferred
            Work Shifts, Languages, EEO, Currency)
          type: array
          additionalProperties:
            type: array
            items:
              type: string
          items:
            $ref: '#/components/schemas/AnswerField'
      required:
        - fields
    ApplyApiRequest:
      required:
        - email
        - firstName
        - lastName
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        firstName:
          maxLength: 128
          minLength: 0
          type: string
        lastName:
          maxLength: 128
          minLength: 0
          type: string
        email:
          maxLength: 128
          minLength: 0
          type: string
        createJoinLink:
          type: boolean
        conditionalsIncluded:
          description: >
            Specifies whether conditional questions should be returned in the
            response. 'false' if not specified

            - Only available for BETA customers
          type: boolean
        phoneNumber:
          maxLength: 128
          minLength: 0
          type: string
        location:
          $ref: '#/components/schemas/Location'
        web:
          $ref: '#/components/schemas/Web'
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        experience:
          type: array
          items:
            $ref: '#/components/schemas/Employment'
        sourceDetails:
          $ref: '#/components/schemas/SourceDetails'
        resume:
          $ref: '#/components/schemas/Attachment'
        avatar:
          $ref: '#/components/schemas/Attachment'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/ScreeningQuestionAnswer'
        messageToHiringManager:
          maxLength: 4000
          minLength: 0
          type: string
        consent:
          type: boolean
        consentDecisions:
          type: object
          additionalProperties:
            type: boolean
        internal:
          type: boolean
    Attachment:
      required:
        - id
        - actions
      type: object
      properties:
        fileName:
          maxLength: 100
          minLength: 0
          type: string
        mimeType:
          type: string
        fileContent:
          maxLength: 13981014
          minLength: 1
          type: string
        type:
          type: string
          enum:
            - VIDEO_URL
            - PDF_URL
            - OTHER_URL
        url:
          type: string
          format: uri
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        actions:
          type: object
          required:
            - download
          properties:
            download:
              $ref: '#/components/schemas/Action'
    Education:
      required:
        - degree
        - institution
      type: object
      properties:
        description:
          maxLength: 4000
          minLength: 0
          type: string
        institution:
          maxLength: 200
          minLength: 1
          type: string
        degree:
          maxLength: 200
          minLength: 1
          type: string
        major:
          maxLength: 200
          minLength: 1
          type: string
        current:
          type: boolean
        startDate:
          pattern: \d{4}-\d{2}-\d{2}
          type: string
          $ref: '#/components/schemas/When'
        endDate:
          pattern: \d{4}-\d{2}-\d{2}
          type: string
          $ref: '#/components/schemas/When'
        location:
          maxLength: 200
          minLength: 0
          type: string
    Employment:
      required:
        - startDate
        - title
      type: object
      properties:
        title:
          maxLength: 200
          minLength: 0
          type: string
        description:
          maxLength: 4000
          minLength: 0
          type: string
        company:
          maxLength: 200
          minLength: 0
          type: string
        current:
          type: boolean
        startDate:
          pattern: \d{4}-\d{2}-\d{2}
          type: string
        endDate:
          pattern: \d{4}-\d{2}-\d{2}
          type: string
        location:
          maxLength: 200
          minLength: 0
          type: string
    Location:
      description: >-
        regionCode is not recommended to be used for countries other than the
        United States.
      type: object
      properties:
        country:
          maxLength: 128
          minLength: 1
          type: string
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
        region:
          maxLength: 128
          minLength: 0
          type: string
        regionCode:
          maxLength: 5
          minLength: 2
          type: string
        city:
          maxLength: 128
          minLength: 1
          type: string
        lat:
          maximum: 90
          minimum: -90
          type: number
          format: float
        lng:
          maximum: 180
          minimum: -180
          type: number
          format: float
        address:
          type: string
          format: address
        postalCode:
          type: string
        longitude:
          type: string
        latitude:
          type: string
        manual:
          type: boolean
        remote:
          type: boolean
      required:
        - city
        - countryCode
    ScreeningQuestionAnswer:
      required:
        - id
        - records
      type: object
      properties:
        id:
          type: string
        records:
          type: array
          items:
            $ref: '#/components/schemas/AnswerRecord'
    SourceDetails:
      required:
        - sourceId
        - sourceTypeId
      type: object
      properties:
        sourceTypeId:
          type: string
        sourceSubTypeId:
          type: string
        sourceId:
          type: string
    Web:
      type: object
      properties:
        skype:
          maxLength: 100
          minLength: 0
          type: string
        linkedIn:
          maxLength: 1000
          minLength: 0
          type: string
        facebook:
          maxLength: 1000
          minLength: 0
          type: string
        twitter:
          maxLength: 100
          minLength: 0
          type: string
        website:
          maxLength: 1000
          minLength: 0
          type: string
    ApplicationStatusInfo:
      type: object
      properties:
        status:
          type: string
          enum:
            - NEW
            - IN_REVIEW
            - INTERVIEW
            - OFFER
            - HIRE
            - REJECTED
            - WITHDRAWN
            - LEAD
            - TRANSFERRED
            - OTHER
    ApplyConfiguration:
      required:
        - questions
        - settings
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/ScreeningQuestion'
        settings:
          $ref: '#/components/schemas/ApplySettings'
        privacyPolicies:
          type: array
          items:
            $ref: '#/components/schemas/PrivacyPolicy'
    ApplySettings:
      type: object
      properties:
        avatarUploadAvailable:
          type: boolean
    FieldValue:
      required:
        - id
        - label
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    PrivacyPolicy:
      type: object
      properties:
        url:
          type: string
        orgName:
          type: string
    ScreeningQuestion:
      required:
        - fields
        - id
        - label
        - repeatable
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        repeatable:
          type: boolean
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ScreeningQuestionField'
    ScreeningQuestionField:
      required:
        - id
        - label
        - required
        - type
        - values
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        type:
          type: string
          enum:
            - INPUT_TEXT
            - SINGLE_SELECT
            - MULTI_SELECT
            - RADIO
            - CHECKBOX
            - TEXTAREA
            - INFORMATION
        required:
          type: boolean
        complianceType:
          type: string
          enum:
            - DIVERSITY
        values:
          type: array
          items:
            $ref: '#/components/schemas/FieldValue'
    ApprovalRequests:
      description: Approval requests
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalRequest'
    ApprovalRequest:
      description: Approval request
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ApprovalRequestId'
        subject:
          $ref: '#/components/schemas/Subject'
        type:
          $ref: '#/components/schemas/Type'
        decisionMode:
          $ref: '#/components/schemas/DecisionMode'
        status:
          description: Status of approval request
          type: string
          example: APPROVED
          enum:
            - PENDING
            - APPROVED
            - REJECTED
            - ABANDONED
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
        approvalRequestId:
          type: string
    ApprovalRequestId:
      description: Approval request id
      type: string
    Subject:
      description: Subject of approval request
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - job
            - offer
    Type:
      type: string
      enum:
        - sequential
        - parallel
    DecisionMode:
      type: string
      enum:
        - any
        - all
    Step:
      description: Required steps to complete approval
      type: object
      properties:
        status:
          description: Status of approval step
          type: string
          example: APPROVED
          enum:
            - PENDING
            - APPROVED
            - REJECTED
            - SKIPPED
        approvers:
          description: The order matters when type is `sequential`
          type: array
          items:
            $ref: '#/components/schemas/Approver'
    StepInput:
      description: Required steps to complete approval
      type: object
      properties:
        approvers:
          description: The order matters when type is `sequential`
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ApproverInput'
    Approver:
      description: Approver
      type: object
      properties:
        id:
          description: Approver id
          type: string
        decision:
          description: Decision status for approver
          type: string
          example: APPROVED
          enum:
            - PENDING
            - APPROVED
            - REJECTED
            - SKIPPED
        decidedOn:
          description: Decision date
          type: string
          format: date-time
    ApproverInput:
      description: Approver
      type: object
      properties:
        id:
          description: Approver id
          type: string
    Comments:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        content:
          type: string
        authorId:
          type: string
        createdOn:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        message:
          type: string
      required:
        - errors
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        message:
          type: string
    PartnerConfigurationRequest:
      required:
        - assessmentPackageListUrl
        - singleAssessmentPackageUrl
        - consentUrl
        - consentDisplayMode
        - oauthTokenUrl
        - supportedAssessmentTypes
      type: object
      properties:
        consentUrl:
          description: >
            Refers to Partner API: `GET /integration`. SmartRecruiters will add
            URL query parameters:

            companyId and redirect (only when `consentDisplayMode=REDIRECT`)
          type: string
          format: uri
        consentDisplayMode:
          description: >
            REDIRECT: End users will leave SmartRecruiters and be redirected to
            the url configured in consentUrl.

            POPUP: End users will remain in SmartRecruiters and see a pop up
            widget.
          type: string
          enum:
            - REDIRECT
            - POPUP
        assessmentPackageListUrl:
          description: 'Refers to Partner API: `GET /packages`'
          type: string
          format: uri
        singleAssessmentPackageUrl:
          description: 'Refers to Partner API: `GET /packages/{assessmentPackageId}`'
          type: string
          format: uri
        packageOrderUrl:
          description: 'Refers to Partner API: `POST /packages/orders`'
          type: string
          format: uri
        inlineAssessmentPackageOrderUrl:
          description: 'Refers to Partner API: `POST /packages/inline/orders`'
          type: string
          format: uri
        oauthTokenUrl:
          description: >-
            Endpoint to exchange the OAuth 2.0 credentials we received from your
            service for an access token to your endpoints.
          type: string
          format: uri
        integrationDisableUrl:
          description: >-
            Refers to Partner API: `DELETE
            com/integrations/companies/{companyId}`
          type: string
          format: uri
        fields:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/Field'
        supportedAssessmentTypes:
          type: array
          minItems: 1
          maxItems: 6
          items:
            $ref: '#/components/schemas/AssessmentType'
    PartnerConfiguration:
      required:
        - assessmentPackageListUrl
        - singleAssessmentPackageUrl
        - consentUrl
        - consentDisplayMode
        - oauthTokenUrl
        - supportedAssessmentTypes
      type: object
      properties:
        consentUrl:
          description: >-
            Refers to Partner API: GET /integration. SmartRecruiters will add
            URL query parameters: companyId and redirect (only when
            consentDisplayMode=REDIRECT)
          type: string
          format: uri
        consentDisplayMode:
          description: >-
            REDIRECT: End users will leave SmartRecruiters and be redirected to
            the url configured in consentUrl. POPUP: End users will remain in
            SmartRecruiters and see a pop up widget.
          type: string
          enum:
            - REDIRECT
            - POPUP
        assessmentPackageListUrl:
          description: 'Refers to Partner API: GET /packages'
          type: string
          format: uri
        singleAssessmentPackageUrl:
          description: 'Refers to Partner API: GET /packages/{assessmentPackageId}'
          type: string
          format: uri
        packageOrderUrl:
          description: 'Refers to Partner API: POST /packages/orders'
          type: string
          format: uri
        inlineAssessmentPackageOrderUrl:
          description: 'Refers to Partner API: POST /packages/inline/orders'
          type: string
          format: uri
        oauthTokenUrl:
          description: >-
            Endpoint to exchange the OAuth 2.0 credentials we received from your
            service for an access token to your endpoints.
          type: string
          format: uri
        integrationDisableUrl:
          description: 'Refers to Partner API: DELETE /integrations/companies/{companyId}'
          type: string
          format: uri
        fields:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/FieldView'
        supportedAssessmentTypes:
          type: array
          minItems: 1
          maxItems: 6
          items:
            $ref: '#/components/schemas/AssessmentType'
    FieldView:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
    Field:
      required:
        - description
        - id
        - name
      type: object
      properties:
        description:
          description: Description saying what is the purpose of this parameter
          type: string
        id:
          description: Id field will be used in the URL as a HTTP request parameter name
          type: string
        name:
          description: User friendly name of the parameter
          type: string
    ClientCredentials:
      required:
        - clientId
        - clientSecret
      type: object
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
    AssessmentResult:
      required:
        - assessmentId
      type: object
      properties:
        summary:
          type: string
        assessmentId:
          type: string
        assessmentDate:
          type: string
          format: date-time
        submissionDate:
          type: string
          format: date-time
        assessmentName:
          type: string
        score:
          $ref: '#/components/schemas/Score'
          type: string
        scoreLabel:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PENDING
            - COMPLETED
            - REJECTED
            - EXPIRED
        name:
          type: string
    PackageResult:
      type: object
      properties:
        summary:
          description: >-
            Will be displayed next to the score and label in the candidate
            profile
          type: string
        description:
          description: >-
            Not used. To display a short description in the UI, use "summary"
            instead
          type: string
          deprecated: true
        assessmentPackageDate:
          description: The date when assessments package was sent to the candidate
          type: string
          format: date-time
        submissionDate:
          description: The date when assessments package was submitted by the candidate
          type: string
          format: date-time
        name:
          type: string
        status:
          type: string
          enum:
            - IN_PROGRESS
            - PENDING
            - COMPLETED
            - REJECTED
            - EXPIRED
        score:
          $ref: '#/components/schemas/Score'
        scoreLabel:
          description: Will be displayed next to the score in the candidate profile
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        assessmentResults:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentResult'
    Score:
      description: >-
        Structural score 'raw' value in a range from min to max - including min
        and max. For example, score {raw:28, min:20, max:80} gives a normalized
        score of  13%, which users can see in SR UI. The 'raw' value will be
        converted to SR UI label '28/80' when min value is not provided.
      required:
        - max
        - min
        - raw
      type: object
      properties:
        raw:
          description: Score value
          type: integer
          format: int64
        min:
          description: Range lower bound - included
          type: integer
          format: int64
        max:
          description: Range upper bound - included
          type: integer
          format: int64
      example: >-
        {raw:28, min:20, max:80} gives a normalized 13% or label '28/80' (min is
        not presented in label)
    AttachmentResult:
      required:
        - url
      type: object
      properties:
        url:
          type: string
    AssessmentType:
      type: string
      enum:
        - VIDEO_INTERVIEW
        - BEHAVIORAL_ASSESSMENT
        - BACKGROUND_CHECK
        - REFERENCE_CHECK
        - SKILL_TEST
        - INLINE_ASSESSMENT
    Unit:
      type: object
    Requester:
      required:
        - email
      type: object
      properties:
        email:
          type: string
    Assessment:
      required:
        - description
        - id
        - type
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        type:
          $ref: '#/components/schemas/AssessmentType'
        name:
          type: string
    AssessmentPackage:
      required:
        - assessments
        - description
        - id
        - name
        - type
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        type:
          $ref: '#/components/schemas/AssessmentType'
        name:
          type: string
        assessments:
          type: array
          items:
            $ref: '#/components/schemas/Assessment'
    AssessmentPackageOrderRequest:
      required:
        - assessmentPackageId
        - candidate
        - companyId
        - jobId
        - resultCallbackURL
        - job
      type: object
      properties:
        resultCallbackURL:
          type: string
          format: uri
        candidate:
          $ref: '#/components/schemas/Candidate'
        job:
          $ref: '#/components/schemas/Job'
        requester:
          $ref: '#/components/schemas/OrderRequester'
        assessmentPackageId:
          type: string
        jobId:
          type: string
          deprecated: true
        companyId:
          type: string
        fields:
          type: object
          additionalProperties:
            type: string
          example:
            partner-field-id: partner-field-value
    Candidate:
      required:
        - id
        - internal
        - firstName
        - lastName
        - createdOn
        - actions
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        applicationLanguage:
          type: string
        internal:
          description: true, if the candidate has at least one internal application
          type: boolean
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/CandidateLocation'
        averageRating:
          type: number
          deprecated: true
        consent:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/ConsentStatus'
        primaryAssignment:
          type: object
          required:
            - job
            - status
          properties:
            job:
              type: object
              required:
                - id
                - title
                - actions
              properties:
                title:
                  type: string
                id:
                  type: string
                actions:
                  type: object
                  required:
                    - details
                  properties:
                    details:
                      $ref: '#/components/schemas/Action'
            status:
              $ref: '#/components/schemas/CandidateStatusEnum'
            subStatus:
              type: string
        secondaryAssignments:
          type: array
          items:
            type: object
            required:
              - job
            properties:
              job:
                type: object
                required:
                  - id
                  - actions
                properties:
                  id:
                    type: string
                  actions:
                    type: object
                    required:
                      - details
                    properties:
                      details:
                        $ref: '#/components/schemas/Action'
        actions:
          type: object
          required:
            - details
            - properties
          properties:
            details:
              $ref: '#/components/schemas/Action'
            properties:
              $ref: '#/components/schemas/Action'
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            status:
              $ref: '#/components/schemas/CandidateAttendeeStatusValue'
    Job:
      required:
        - id
      type: object
      properties:
        title:
          type: string
        id:
          type: string
          format: uuid
        job:
          type: object
          properties:
            title:
              type: string
            id:
              type: string
            actions:
              type: object
              required:
                - details
              properties:
                details:
                  $ref: '#/components/schemas/Action'
                positionDetails:
                  $ref: '#/components/schemas/Action'
        refNumber:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          description: Job modification date
          type: string
          format: date-time
        lastActivityOn:
          description: Indicates last activity associated with a job
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/Department'
        location:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/JobStatus'
        postingStatus:
          $ref: '#/components/schemas/PostingStatus'
    OrderRequester:
      required:
        - email
        - userId
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
    InlineAssessmentPackageOrderRequest:
      required:
        - assessmentPackageId
        - candidate
        - companyId
        - completedAssessmentCallbackUrl
        - jobId
        - resultCallbackURL
        - job
      type: object
      properties:
        resultCallbackURL:
          type: string
          format: uri
        candidate:
          $ref: '#/components/schemas/InlineCandidate'
        job:
          $ref: '#/components/schemas/InlineJob'
        assessmentPackageId:
          type: string
        jobId:
          type: string
          deprecated: true
        companyId:
          type: string
        completedAssessmentCallbackUrl:
          type: string
        fields:
          type: object
          additionalProperties:
            type: string
          example:
            partner-field-id: partner-field-value
    InlineCandidate:
      required:
        - applicationLanguage
        - email
        - firstName
        - lastName
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        applicationLanguage:
          type: string
    InlineJob:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          format: uuid
    InlineAssessmentPackageResponse:
      required:
        - assessmentPackageURL
      type: object
      properties:
        url:
          description: URL of inline assessment which will be open for candidate
          type: string
    TokenInput:
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          enum:
            - client_credentials
        client_id:
          type: string
        client_secret:
          type: string
    AccessToken:
      type: object
      required:
        - access_token
        - expires_in
      properties:
        access_token:
          type: string
        expires_in:
          description: >-
            Indicates for how many seconds the token will be valid from the
            moment it was generated.
          type: integer
    TokenErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
        error_description:
          type: string
    Uuid:
      type: string
      format: uuid
    AssessmentOrder:
      type: object
      properties:
        summary:
          type: string
        description:
          type: string
        applicationId:
          $ref: '#/components/schemas/Uuid'
        orderId:
          $ref: '#/components/schemas/Uuid'
        assessmentPackageDate:
          type: string
          format: date-time
        submissionDate:
          type: string
          format: date-time
        assessmentPackageName:
          type: string
        status:
          type: string
        score:
          type: string
        scoreLabel:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        assessments:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentResult'
    AssessmentOrders:
      type: array
      items:
        $ref: '#/components/schemas/AssessmentOrder'
    Events:
      type: object
      properties:
        nextPageId:
          description: Unique identifier for the next page of events
          type: string
        limit:
          description: Number of audit events that were requested
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    EventContext:
      type: object
      properties:
        authenticationType:
          type: string
          enum:
            - PASSWORD
            - API_KEY
            - WEB_SSO
            - AUTH_TOKEN
            - SUPPORT_ACCESS
        currentRole:
          $ref: '#/components/schemas/UserRole'
        previousRole:
          $ref: '#/components/schemas/UserRole'
        officeName:
          type: string
    Event:
      type: object
      properties:
        version:
          type: string
          readOnly: true
        id:
          description: Unique identifier of the event
          type: string
        eventName:
          description: Name of the event
          type: string
        eventDate:
          description: >-
            Timestamp when _the thing_ represented by the event actually
            happened
          type: string
          format: date-time
        authorType:
          description: Type of the author who generated the event
          type: string
          enum:
            - USER
            - SUPPORT_USER
            - SYSTEM
        authorId:
          description: Unique identifier of the author
          type: string
        entityType:
          description: Type of the entity that the event is related to
          type: string
          enum:
            - USER
            - CANDIDATE
            - APPLICATION
            - OFFER
            - JOB
            - COMPANY
            - JOB_PROPERTY
            - JOB_AD
            - CREDENTIAL
            - REPORT_FILE
            - ONBOARDING_PROCESS
        entityId:
          description: Unique identifier of the entity that the event is related to
          type: string
        context:
          description: Additional context of event
          type: object
          $ref: '#/components/schemas/EventContext'
        name:
          $ref: '#/components/schemas/EventName'
    UserRole:
      type: string
      enum:
        - ADMINISTRATOR
        - EMPLOYEE
        - EXTENDED
        - RESTRICTED
        - STANDARD
    CandidateTags:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          maxItems: 100
          items:
            type: string
            maxLength: 50
    OnboardingStatus:
      type: object
      required:
        - onboardingStatus
      properties:
        onboardingStatus:
          type: string
          enum:
            - READY_TO_ONBOARD
            - ONBOARDING_SUCCESSFUL
            - ONBOARDING_FAILED
    Candidates:
      type: object
      required:
        - limit
        - offset
        - totalFound
        - content
      properties:
        limit:
          type: integer
        offset:
          type: integer
        nextPageId:
          type: string
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
    PersonalDetails:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        location:
          $ref: '#/components/schemas/CandidateLocation'
        web:
          $ref: '#/components/schemas/WebProfile'
    CandidateInput:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        tags:
          type: array
          items:
            type: string
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        location:
          $ref: '#/components/schemas/CandidateLocation'
        web:
          $ref: '#/components/schemas/WebProfile'
        education:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/Education'
        experience:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/Experience'
        sourceDetails:
          $ref: '#/components/schemas/CandidateSource'
        internal:
          type: boolean
    CandidateDetails:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        id:
          type: string
        internal:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        location:
          $ref: '#/components/schemas/CandidateLocation'
        web:
          $ref: '#/components/schemas/WebProfile'
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        averageRating:
          type: number
          deprecated: true
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        experience:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
        primaryAssignment:
          allOf:
            - $ref: '#/components/schemas/Job'
            - $ref: '#/components/schemas/Assignment'
        secondaryAssignments:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Job'
              - $ref: '#/components/schemas/Assignment'
        actions:
          type: object
          required:
            - properties
          properties:
            properties:
              $ref: '#/components/schemas/Action'
            attachments:
              $ref: '#/components/schemas/Action'
            consent:
              $ref: '#/components/schemas/Action'
            consents:
              $ref: '#/components/schemas/Action'
    CandidateLocation:
      type: object
      properties:
        country:
          type: string
          minLength: 1
        countryCode:
          type: string
          minLength: 2
          maxLength: 2
        regionCode:
          type: string
        region:
          type: string
        city:
          type: string
          minLength: 1
        lat:
          type: number
          format: float
        lng:
          type: number
          format: float
    Attachments:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    CandidateAttachmentsForJob:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/CandidateAttachmentForJob'
    CandidateAttachmentForJob:
      type: object
      required:
        - id
        - name
        - type
        - contentType
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        contentType:
          type: string
        actions:
          type: object
          required:
            - download
            - remove
          properties:
            download:
              $ref: '#/components/schemas/Action'
            remove:
              $ref: '#/components/schemas/Action'
    CandidateStatusEnum:
      type: string
      enum:
        - LEAD
        - NEW
        - IN_REVIEW
        - INTERVIEW
        - OFFERED
        - HIRED
        - REJECTED
        - WITHDRAWN
        - TRANSFERRED
    CandidateStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
        subStatus:
          type: string
        startsOn:
          type: string
          format: date-time
        reason:
          description: >-
            id of rejection (GET /configuration/rejection-reasons) or withdrawal
            (GET /configuration/withdrawal-reasons) reason.
          type: string
    CandidateStatusHistoryList:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/CandidateStatusHistoryListElem'
    CandidateProperties:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CandidateProperty'
    CandidateProperty:
      type: object
      required:
        - id
        - label
        - type
        - value
        - actions
      properties:
        id:
          type: string
        label:
          type: string
        type:
          $ref: '#/components/schemas/CandidatePropertyType'
        value:
          oneOf:
            - type: string
            - type: boolean
            - type: number
            - type: object
              required:
                - code
                - value
              properties:
                code:
                  type: string
                value:
                  type: number
        valueLabel:
          description: Label of selected option for SINGLE_SELECT field type
          type: string
        actions:
          type: object
          required:
            - configuration
          properties:
            configuration:
              $ref: '#/components/schemas/Action'
    CandidatePropertyInputValue:
      type: object
      properties:
        value:
          description: string, number, boolean or object
    Application:
      allOf:
        - properties:
            applicationId:
              type: string
        - $ref: '#/components/schemas/Assignment'
        - $ref: '#/components/schemas/ApplicationUrl'
      type: object
      properties:
        candidateId:
          type: string
          format: guid
        jobId:
          type: string
          format: guid
    Assignment:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
        subStatus:
          type: string
        startsOn:
          type: string
          format: date-time
        source:
          type: string
        reasonOfRejection:
          $ref: '#/components/schemas/Property'
        reasonOfWithdrawal:
          $ref: '#/components/schemas/Property'
        actions:
          type: object
          properties:
            sourceDetails:
              $ref: '#/components/schemas/Action'
    ApplicationUrl:
      description: >
        url property of a retrieved application represents current location of
        its details. Please be aware that the resource location may change in
        the future.
      type: object
      properties:
        url:
          type: string
    Actions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Action'
    Action:
      type: object
      required:
        - url
        - method
      properties:
        url:
          type: string
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - OPTIONS
            - DELETE
            - HEAD
            - CONNECT
    WebProfile:
      type: object
      properties:
        skype:
          type: string
        linkedin:
          type: string
        facebook:
          type: string
        twitter:
          type: string
        website:
          type: string
    Experience:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        company:
          type: string
          minLength: 1
        current:
          type: boolean
        startDate:
          $ref: '#/components/schemas/When'
        endDate:
          $ref: '#/components/schemas/When'
        location:
          type: string
    CandidateSource:
      type: object
      required:
        - sourceTypeId
        - sourceId
      properties:
        sourceTypeId:
          type: string
          minLength: 1
        sourceSubTypeId:
          type: string
        sourceId:
          type: string
          minLength: 1
    ScreeningAnswers:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/ScreeningAnswer'
    ScreeningAnswer:
      type: object
      required:
        - id
        - type
        - category
        - name
        - label
        - records
      properties:
        id:
          description: Id of Question to which answer was responded
          type: string
        type:
          type: string
          enum:
            - text
            - checkbox
            - languages
            - acknowledgement
            - textarea
            - select
            - files
            - info
            - eeo
            - radio
            - salaryExpectation
            - currency
            - work_shifts
        category:
          description: |
            UUID for custom questions or fixed value for predefined questions:
             - eeoInformation
             - ofccpDisability
             - ofccpVeteransForm
             - veteranStatus
             - disabilityStatus
             - ofccpReasonableAccommodation
             - ethnicity
             - ethnicGroupsDescriptions
             - todaysDate
             - yourName
             - preferredWorkShifts
             - languages
             - previousEmployment
             - drivingRevoked
             - drivingCurrent
             - criminalRecord
             - workPermit
          type: string
        name:
          description: Question name visible to administrator on questions library list
          type: string
        label:
          description: Question text shown to candidate
          type: string
        records:
          description: >-
            Multiple records may be used for example for questions (Preferred
            Work Shifts, Languages)
          type: array
          items:
            $ref: '#/components/schemas/AnswerRecord'
    AnswerField:
      type: object
      required:
        - id
        - values
      properties:
        id:
          type: string
        label:
          description: Field label shown to candidate - ignore when empty
          type: string
        values:
          description: >-
            Multiple values may be used for example for Multiselect Dropdown
            question
          type: array
          items:
            $ref: '#/components/schemas/AnswerFieldValue'
    AnswerFieldValue:
      type: object
      required:
        - id
        - label
      properties:
        id:
          description: Value text or value ID - depends on question definition
          type: string
        label:
          description: Value text shown to candidate
          type: string
    CandidateStatusHistoryListElem:
      type: object
      properties:
        changedOn:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/CandidateStatusEnum'
        subStatus:
          type: string
        actions:
          $ref: '#/components/schemas/Actions'
    CandidatePropertyType:
      type: string
      enum:
        - BOOLEAN
        - COUNTRY
        - CURRENCY
        - DATE
        - NUMBER
        - PERCENT
        - REGION
        - TEXT
        - USER
        - SINGLE_SELECT
    CandidateConsentStatus:
      type: object
      required:
        - status
      properties:
        date:
          description: Available when `status` is `ACQUIRED`
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/ConsentStatus'
    CandidateConsentDecisions:
      type: object
      required:
        - decisions
      properties:
        decisions:
          type: array
          items:
            $ref: '#/components/schemas/ConsentDecision'
        recentPendingRequestCreatedOn:
          type: string
          format: date-time
    ConsentDecision:
      required:
        - status
        - scope
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ConsentDecisionStatus'
        scope:
          $ref: '#/components/schemas/ConsentScope'
        decidedOn:
          description: >-
            present when candidate has made a consent decision (i.e. `status` is
            `acquired` or `declined`)
          type: string
          format: date-time
    ConsentDecisionStatus:
      description: |
        * **acquired** - a candidate has decided to provide a consent
        * **declined** - a candidate has decided to decline a consent
        * **required** - a candidate has not made any decision yet,
      type: string
      enum:
        - acquired
        - declined
        - required
    ConsentScope:
      description: >
        Available when company uses single consent approach:

        * **Single** - a single consent to company privacy policy for all scopes

        Available when company uses separated consent approach:

        * **SmartRecruit** - indicates reading and understanding or accepting
        company privacy policy for job applications,

        * **SmartCRM** - a consent to be part of company communities for future
        career opportunities,

        * **SmartMessage:SMS** - a consent to receive text/SMS messages for job
        applications and/or future career opportunities,

        * **SmartMessage:WhatsApp** - a consent to receive WhatsApp messages for
        job applications and/or future career opportunities.
      type: string
      enum:
        - Single
        - SmartRecruit
        - SmartCRM
        - SmartMessage:SMS
        - SmartMessage:WhatsApp
    ConsentRequest:
      type: object
      required:
        - id
      properties:
        id:
          description: candidate id
          type: string
    ConsentStatus:
      description: |
        * **REQUIRED** - no request for consent yet,
        * **PENDING** - consent requested,
        * **ACQUIRED** - consent provided by a candidate
      type: string
      enum:
        - REQUIRED
        - PENDING
        - ACQUIRED
    ConsentRequestsResults:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ConsentRequestScheduled'
              - $ref: '#/components/schemas/ConsentRequestUnavailable'
    ConsentRequestScheduled:
      type: object
      required:
        - status
        - body
      properties:
        status:
          type: integer
          enum:
            - 202
        body:
          type: object
          properties:
            location:
              type: string
    ConsentRequestUnavailable:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
          enum:
            - 403
        body:
          type: boolean
          enum:
            - false
    Property:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 1
        label:
          type: string
    When:
      description: >-
        date in YYYY, YYYY-MM or YYYY-MM-dd format, ex. "2016", "2016-11",
        "2016-11-29"
      type: string
      format: when
    CandidatePropertyValue:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        value:
          description: string, number, boolean or object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: alphanumericAndDash
              minLength: 1
              maxLength: 36
        - $ref: '#/components/schemas/CandidatePropertyValueLabel'
    Properties:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    CompanyConfiguration:
      type: object
      properties:
        identifier:
          description: Identifier of a company.
          type: string
        name:
          description: Company name.
          type: string
        location:
          $ref: '#/components/schemas/Location'
        website:
          description: URL to company website.
          type: string
        industry:
          $ref: '#/components/schemas/Industry'
        logo:
          description: URL to company logo.
          type: string
    JobPropertyDefinitionList:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/JobPropertyDefinition'
    JobPropertyDefinition:
      type: object
      required:
        - label
        - category
        - visible
      properties:
        id:
          type: string
        label:
          type: string
        category:
          type: string
          enum:
            - job
            - organization
        active:
          type: boolean
        visible:
          type: boolean
        required:
          type: boolean
        actions:
          $ref: '#/components/schemas/Actions'
    JobPropertyDefinitionCreationRequest:
      type: object
      required:
        - label
        - category
        - visible
      properties:
        label:
          type: string
        category:
          type: string
          enum:
            - job
            - organization
        active:
          type: boolean
        visible:
          type: boolean
        required:
          type: boolean
    JobPropertyValueDefinitionList:
      type: object
      properties:
        totalFound:
          type: integer
        nextPageId:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/JobPropertyValueDefinition'
    JobPropertyValueDefinition:
      type: object
      required:
        - label
      properties:
        id:
          type: string
          pattern: ^[^/]+$
          minLength: 1
          maxLength: 100
        label:
          type: string
          minLength: 1
          maxLength: 200
        archived:
          type: boolean
    DependentJobPropertyValues:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/DependentJobPropertyValue'
    DependentJobPropertyValue:
      allOf:
        - $ref: '#/components/schemas/Identifiable'
        - $ref: '#/components/schemas/Labeled'
    DependentJobProperties:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/DependentJobProperty'
    DependentJobProperty:
      type: object
      required:
        - id
        - label
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 100
        label:
          type: string
          minLength: 1
          maxLength: 200
    DependentJobPropertiesIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 100
          minItems: 1
    DependentJobPropertyValuesRelations:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/DependentJobPropertyValuesRelation'
    DependentJobPropertyValuesRelation:
      type: object
      required:
        - parent
        - values
      properties:
        parent:
          $ref: '#/components/schemas/RelationJobPropertyValue'
        values:
          type: array
          items:
            $ref: '#/components/schemas/RelationJobPropertyValue'
    RelationJobPropertyValue:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          minLength: 1
        label:
          type: string
    Department:
      type: object
      required:
        - label
      properties:
        description:
          type: string
        id:
          type: string
        label:
          type: string
    Departments:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Department'
    HiringProcesses:
      required:
        - totalFound
        - content
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/HiringProcess'
    HiringProcess:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        active:
          type: boolean
        subStatuses:
          type: object
          properties:
            IN_REVIEW:
              type: array
              items:
                type: string
            INTERVIEW:
              type: array
              items:
                type: string
            OFFERED:
              type: array
              items:
                type: string
    OfferPropertiesDefinition:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/OfferPropertiesCategory'
    CandidatePropertyDefinitionList:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/CandidatePropertyDefinition'
    CandidatePropertyDefinition:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        type:
          $ref: '#/components/schemas/CandidatePropertyType'
        availability:
          $ref: '#/components/schemas/CandidatePropertyAvailability'
        actions:
          $ref: '#/components/schemas/Actions'
    CandidatePropertyValueList:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/CandidatePropertyValue'
    CandidatePropertyValueLabel:
      type: object
      required:
        - label
      properties:
        label:
          type: string
          format: value_label
          minLength: 1
          maxLength: 1000
    SourceTypes:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            type: object
            required:
              - id
              - label
              - subtypes
              - actions
            properties:
              id:
                type: string
              label:
                type: string
              actions:
                type: object
                required:
                  - values
                properties:
                  values:
                    $ref: '#/components/schemas/Action'
              subtypes:
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/Identifiable'
    Sources:
      type: object
      required:
        - totalFound
        - limit
        - offset
        - content
      properties:
        totalFound:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Source'
    SourceDefinition:
      type: object
      required:
        - label
        - type
        - subType
      properties:
        label:
          type: string
        subType:
          $ref: '#/components/schemas/Identifiable'
        type:
          $ref: '#/components/schemas/Identifiable'
    Source:
      type: object
      required:
        - id
        - label
        - sourceSubType
        - actions
      properties:
        id:
          type: string
        label:
          type: string
        sourceSubType:
          $ref: '#/components/schemas/Identifiable'
        actions:
          type: object
          required:
            - sourceDetails
          properties:
            sourceDetails:
              $ref: '#/components/schemas/Action'
    Industry:
      description: Company industry information.
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    OfferPropertiesCategory:
      type: object
      properties:
        id:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/OfferPropertyDefinition'
    OfferPropertyDefinition:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        required:
          type: boolean
        type:
          type: string
          enum:
            - BOOLEAN
            - COUNTRY
            - CURRENCY
            - DATE
            - NUMBER
            - PERCENT
            - REGION
            - TEXT
            - USER
            - SELECT
    CandidatePropertyAvailability:
      type: object
      properties:
        toUsers:
          type: string
          enum:
            - ALL
            - FULL_ACCESS
        context:
          type: array
          items:
            type: string
            enum:
              - HIRE_FORM
              - OFFER_FORM
              - PROFILE
              - OFFER_APPROVAL_FORM
        forOrgFields:
          type: array
          items:
            $ref: '#/components/schemas/CandidatePropertyFilter'
    CandidatePropertyFilter:
      type: object
      properties:
        id:
          type: string
        values:
          $ref: '#/components/schemas/CandidatePropertyFilterValues'
        actions:
          $ref: '#/components/schemas/Actions'
    CandidatePropertyFilterValues:
      type: object
      properties:
        all:
          type: boolean
        content:
          type: array
          items:
            type: string
    LanguageCode:
      description: >-
        Language code, can be two-letter for the standard variant or with
        additional two letters after a hyphen to identify a specific locale


        Value "pt-PT" is deprecated and will not work, use "pt" instead.
      type: string
      enum:
        - af
        - am
        - ar
        - hy
        - az
        - eu
        - bn
        - bg
        - ca
        - zh-CN
        - zh-TW
        - hr
        - cs
        - da
        - nl
        - en-GB
        - en
        - et
        - fi
        - fr
        - fr-CA
        - gl
        - ka
        - de
        - el
        - gu
        - iw
        - hi
        - hu
        - is
        - id
        - ga
        - it
        - ja
        - kn
        - km
        - ko
        - lo
        - lv
        - lt
        - ms
        - ml
        - mr
        - mn
        - ne
        - 'no'
        - fa
        - fil
        - pl
        - pt
        - pt-BR
        - pt-PT
        - ro
        - ru
        - sr
        - si
        - sk
        - sl
        - es
        - es-MX
        - sw
        - sv
        - ta
        - te
        - tr
        - uk
        - ur
        - vi
        - cy
        - zu
      default: en
    Identifiable:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 256
    Labeled:
      type: object
      required:
        - label
      properties:
        label:
          type: string
          minLength: 1
    LabelTranslations:
      type: array
      items:
        $ref: '#/components/schemas/LabelTranslation'
    LabelTranslation:
      type: object
      properties:
        label:
          type: string
          minLength: 1
          maxLength: 200
        language:
          $ref: '#/components/schemas/LanguageCode'
      required:
        - label
        - language
    JSONPatch:
      type: array
      items:
        description: one JSON Patch operation
        type: object
        allOf:
          - description: Members common to all operations
            type: object
            required:
              - op
              - path
            properties:
              path:
                $ref: '#/components/schemas/jsonPointer'
          - $ref: '#/components/schemas/oneOperation'
        oneOf:
          - type: object
            required:
              - op
              - value
            properties:
              op:
                type: string
                enum:
                  - add
                  - replace
                  - test
              value: {}
          - type: object
            required:
              - op
              - from
            properties:
              op:
                type: string
                enum:
                  - move
                  - copy
              from:
                $ref: '#/components/schemas/jsonPointer'
          - type: object
            required:
              - op
            properties:
              op:
                type: string
                enum:
                  - remove
      example:
        - path: /path
          op: add
          value: example
        - path: /path
          op: move
          from: /origin
        - path: /path
          op: remove
    path:
      required:
        - path
      properties:
        path:
          $ref: '#/components/schemas/jsonPointer'
    jsonPointer:
      type: string
      pattern: ^(/[^/~]*(~[01][^/~]*)*)*$
    FeedBrand:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        logo:
          type: string
    FeedBudget:
      type: object
      properties:
        price:
          type: string
    FeedBudgeting:
      type: object
      properties:
        programmatic:
          $ref: '#/components/schemas/FeedBudget'
    FeedCompany:
      type: object
      properties:
        cid:
          type: string
        name:
          type: string
        identifier:
          type: string
    FeedCompensation:
      type: object
      properties:
        minimum:
          type: string
        maximum:
          type: string
        currency:
          type: string
    FeedDictionaryEntry:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    FeedJobAd:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        refNumber:
          type: string
        status:
          type: string
        jobAdUrl:
          type: string
        liveUrl:
          type: string
        applyUrl:
          type: string
        comment:
          type: string
        postedDate:
          type: string
        location:
          $ref: '#/components/schemas/FeedLocation'
        company:
          $ref: '#/components/schemas/FeedCompany'
        brand:
          $ref: '#/components/schemas/FeedBrand'
        creator:
          $ref: '#/components/schemas/FeedUser'
        budget:
          $ref: '#/components/schemas/FeedBudgeting'
        compensation:
          $ref: '#/components/schemas/FeedCompensation'
        industry:
          $ref: '#/components/schemas/FeedDictionaryEntry'
        function:
          $ref: '#/components/schemas/FeedDictionaryEntry'
        experienceLevel:
          $ref: '#/components/schemas/FeedDictionaryEntry'
        typeOfEmployment:
          $ref: '#/components/schemas/FeedDictionaryEntry'
        languageCode:
          type: string
        jobAd:
          $ref: '#/components/schemas/FeedJobAdDetails'
    FeedJobAdDetails:
      type: object
      properties:
        companyDescription:
          type: string
        jobDescription:
          type: string
        qualifications:
          type: string
        additionalInformation:
          type: string
    FeedLocation:
      type: object
      properties:
        city:
          type: string
        region:
          type: string
        regionCode:
          type: string
        country:
          type: string
        countryCode:
          type: string
        address:
          type: string
        zipCode:
          type: string
        longitude:
          type: string
        latitude:
          type: string
        remote:
          type: boolean
    FeedUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    FeedPublication:
      type: object
      properties:
        Provider:
          type: string
        offset:
          description: int32
          type: string
        limit:
          description: int32
          type: string
        totalFound:
          description: int64
          type: string
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/FeedJobAd'
    PostingUpdateRequest:
      type: object
      properties:
        liveUrl:
          type: string
        status:
          type: string
        comment:
          type: string
    UserId:
      description: Id of a user from User API
      type: string
      pattern: '[a-fA-F0-9]{24}'
    UuidReadOnly:
      readOnly: true
      type: string
      format: guid
    InterviewToUpdateInput:
      type: object
      properties:
        location:
          type: string
          maxLength: 500
        timezone:
          description: Name of the timezone as described in TZ database
          type: string
          maxLength: 100
        candidate:
          $ref: '#/components/schemas/AttendeeStatus'
    InterviewsList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Interview'
    Interview:
      type: object
      required:
        - candidate
        - jobId
        - organizerId
        - timezone
        - timeslots
      properties:
        id:
          $ref: '#/components/schemas/UuidReadOnly'
        candidate:
          $ref: '#/components/schemas/Candidate'
        jobId:
          $ref: '#/components/schemas/Uuid'
        location:
          type: string
          maxLength: 500
        organizerId:
          $ref: '#/components/schemas/UserId'
        timezone:
          description: Name of the timezone as described in TZ database
          type: string
          maxLength: 100
        timeslots:
          $ref: '#/components/schemas/Timeslots'
        createdOn:
          description: If not set it defaults to current time
          type: string
          format: date-time
        refUrl:
          type: string
          format: url
        source:
          type: string
          readOnly: true
    Timeslot:
      type: object
      required:
        - startsOn
        - endsOn
        - interviewers
      properties:
        title:
          type: string
          maxLength: 200
        id:
          $ref: '#/components/schemas/UuidReadOnly'
        interviewType:
          $ref: '#/components/schemas/InterviewType'
        place:
          type: string
          maxLength: 500
        startsOn:
          type: string
          format: date-time
        endsOn:
          type: string
          format: date-time
        interviewers:
          $ref: '#/components/schemas/Interviewers'
        candidateStatus:
          $ref: '#/components/schemas/AttendeeStatusValue'
    Timeslots:
      type: array
      minItems: 1
      maxItems: 50
      items:
        $ref: '#/components/schemas/Timeslot'
    Interviewers:
      type: array
      minItems: 1
      maxItems: 50
      items:
        $ref: '#/components/schemas/Interviewer'
    Interviewer:
      type: object
      required:
        - id
        - status
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        status:
          $ref: '#/components/schemas/AttendeeStatusValue'
    AttendeeStatusValue:
      type: string
      enum:
        - accepted
        - declined
        - pending
        - tentative
    CandidateAttendeeStatusValue:
      description: This property is deprecated. Use 'timeslot.candidateStatus' instead.
      type: string
      nullable: true
      enum:
        - accepted
        - declined
        - pending
        - tentative
        - null
      deprecated: true
    AttendeeStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/AttendeeStatusValue'
    InterviewType:
      type: string
      maxLength: 400
    InterviewTypes:
      type: array
      minItems: 1
      maxItems: 2000
      items:
        $ref: '#/components/schemas/InterviewType'
    JobPositions:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/JobPosition'
    JobPosition:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        positionId:
          type: string
        type:
          type: string
        incumbentName:
          type: string
        positionOpenDate:
          type: string
          format: date-time
        targetStartDate:
          type: string
          format: date-time
        status:
          type: string
    JobPositionInput:
      type: object
      required:
        - type
        - positionOpenDate
        - targetStartDate
      properties:
        positionId:
          type: string
        incumbentName:
          type: string
        type:
          type: string
          enum:
            - NEW
            - REPLACEMENT
        positionOpenDate:
          type: string
          format: date-time
        targetStartDate:
          type: string
          format: date-time
    JobAdContent:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          format: title
          minLength: 1
        language:
          $ref: '#/components/schemas/JobAdLanguage'
        jobAd:
          $ref: '#/components/schemas/JobAdSections'
    JobAds:
      type: array
      items:
        $ref: '#/components/schemas/JobAdItem'
    JobAdItem:
      type: object
      required:
        - id
        - title
        - language
        - jobAd
        - createdOn
        - updatedOn
        - postingStatus
        - default
        - actions
        - creator
        - visibility
      properties:
        title:
          type: string
        id:
          type: string
        language:
          $ref: '#/components/schemas/Language'
        jobAd:
          $ref: '#/components/schemas/JobAdSections'
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        applyUrl:
          type: string
          format: url
        postingStatus:
          type: string
          enum:
            - PUBLISHED
            - NOT_PUBLISHED
        default:
          type: boolean
        actions:
          type: object
          required:
            - postings
          properties:
            postings:
              $ref: '#/components/schemas/Action'
        creator:
          $ref: '#/components/schemas/Identifiable'
        visibility:
          type: string
          enum:
            - PUBLIC
            - INTERNAL
            - PRIVATE
    Publication:
      type: object
      properties:
        aggregators:
          type: boolean
          default: true
        visibility:
          type: string
          default: PUBLIC
          enum:
            - PUBLIC
            - INTERNAL
    JobAdPublicationScheduled:
      type: object
      properties:
        postingStatus:
          type: string
          enum:
            - PENDING
    JobAdUnpublishScheduled:
      type: object
      properties:
        unpostingStatus:
          type: string
          enum:
            - PENDING
    HeadcountUpdateAccepted:
      type: object
      properties:
        status:
          type: string
          enum:
            - PENDING
    HeadcountPatchRequest:
      type: object
      properties:
        salaryRange:
          $ref: '#/components/schemas/SalaryRange'
    PublicationList:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PublicationListItem'
    HiringTeamMembers:
      type: object
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/HiringTeamMemberResponse'
    HiringTeamMemberRole:
      type: string
      enum:
        - HIRING_MANAGER
        - INTERVIEW_TEAM
        - RECRUITER
        - EXECUTIVE
        - COORDINATOR
    HiringTeamMember:
      allOf:
        - $ref: '#/components/schemas/Identifiable'
        - type: object
          required:
            - role
          properties:
            role:
              anyOf:
                - $ref: '#/components/schemas/HiringTeamMemberRole'
                - type: string
    HiringTeamMemberResponse:
      allOf:
        - $ref: '#/components/schemas/HiringTeamMember'
        - type: object
          properties:
            actions:
              type: object
              required:
                - details
              properties:
                details:
                  $ref: '#/components/schemas/Action'
    JobNote:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          maxLength: 20000
    JobInput:
      type: object
      required:
        - title
        - function
        - industry
        - experienceLevel
        - location
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 256
          format: title
        refNumber:
          type: string
          maxLength: 63
        targetHiringDate:
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/Identifiable'
        location:
          $ref: '#/components/schemas/JobLocationInput'
        industry:
          $ref: '#/components/schemas/Identifiable'
        function:
          $ref: '#/components/schemas/Identifiable'
        typeOfEmployment:
          $ref: '#/components/schemas/Identifiable'
        experienceLevel:
          $ref: '#/components/schemas/Identifiable'
        eeoCategory:
          $ref: '#/components/schemas/Identifiable'
        template:
          type: boolean
        compensation:
          $ref: '#/components/schemas/Compensation'
        jobAd:
          $ref: '#/components/schemas/JobAd'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/JobPropertyInput'
    Jobs:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        nextPageId:
          type: string
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/JobSummary'
    JobSummary:
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            language:
              $ref: '#/components/schemas/Language'
            actions:
              type: object
              required:
                - details
              properties:
                details:
                  $ref: '#/components/schemas/Action'
    JobDetails:
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            targetHiringDate:
              type: string
              format: date-time
            industry:
              $ref: '#/components/schemas/Property'
            function:
              $ref: '#/components/schemas/Property'
            typeOfEmployment:
              $ref: '#/components/schemas/Property'
            experienceLevel:
              $ref: '#/components/schemas/Property'
            eeoCategory:
              $ref: '#/components/schemas/Property'
            template:
              type: boolean
            creator:
              $ref: '#/components/schemas/UserIdentity'
            compensation:
              $ref: '#/components/schemas/Compensation'
            jobAd:
              $ref: '#/components/schemas/JobAdInput'
            properties:
              type: array
              items:
                $ref: '#/components/schemas/JobProperty'
            actions:
              type: object
              properties:
                hiringTeam:
                  $ref: '#/components/schemas/Action'
                publications:
                  $ref: '#/components/schemas/Action'
                positions:
                  $ref: '#/components/schemas/Action'
                applyOnWeb:
                  $ref: '#/components/schemas/Action'
                details:
                  $ref: '#/components/schemas/Action'
    JobLocationInput:
      type: object
      required:
        - city
        - countryCode
      properties:
        countryCode:
          type: string
          minLength: 2
          maxLength: 2
        regionCode:
          type: string
          minLength: 1
          maxLength: 256
        region:
          type: string
          minLength: 1
          maxLength: 256
        address:
          type: string
          minLength: 1
          maxLength: 2000
        postalCode:
          type: string
          minLength: 1
          maxLength: 32
        city:
          type: string
          minLength: 1
          maxLength: 128
        remote:
          type: boolean
    JobAdInput:
      type: object
      properties:
        sections:
          $ref: '#/components/schemas/JobAdSections'
        language:
          $ref: '#/components/schemas/Language'
    JobPropertyInput:
      allOf:
        - $ref: '#/components/schemas/Identifiable'
        - type: object
          required:
            - value
          properties:
            value:
              $ref: '#/components/schemas/JobPropertyValue'
    JobStatusHistory:
      type: object
      required:
        - totalFound
        - content
      properties:
        totalFound:
          type: integer
        content:
          type: array
          items:
            type: object
            required:
              - status
            properties:
              changedOn:
                type: string
                format: date-time
              status:
                $ref: '#/components/schemas/JobStatus'
              actions:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/Action'
    JobAdLanguage:
      type: object
      required:
        - code
      properties:
        code:
          $ref: '#/components/schemas/LanguageCode'
    JobAdSections:
      type: object
      properties:
        companyDescription:
          $ref: '#/components/schemas/JobAdSection'
        jobDescription:
          $ref: '#/components/schemas/JobAdSection'
        qualifications:
          $ref: '#/components/schemas/JobAdSection'
        additionalInformation:
          $ref: '#/components/schemas/JobAdSection'
        videos:
          $ref: '#/components/schemas/JobAdVideos'
        sections:
          type: object
          properties:
            companyDescription:
              $ref: '#/components/schemas/JobAdSection'
            jobDescription:
              $ref: '#/components/schemas/JobAdSection'
            qualifications:
              $ref: '#/components/schemas/JobAdSection'
            additionalInformation:
              $ref: '#/components/schemas/JobAdSection'
            videos:
              $ref: '#/components/schemas/JobAdVideosSection'
    JobAdSection:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
          maxLength: 24999
    JobAdVideos:
      type: object
      properties:
        urls:
          type: array
          items:
            type: string
            format: video_url
    PublicationListItem:
      type: object
      required:
        - sourceName
        - type
        - publishedOn
      properties:
        sourceName:
          type: string
        type:
          type: string
        publishedOn:
          type: string
          format: date-time
        unpublishedOn:
          type: string
          format: date-time
    JobStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ValidJobStatus'
    ValidJobStatus:
      type: string
      enum:
        - CREATED
        - SOURCING
        - FILLED
        - INTERVIEW
        - OFFER
        - CANCELLED
        - ON_HOLD
    JobStatus:
      type: string
      enum:
        - CREATED
        - SOURCING
        - FILLED
        - INTERVIEW
        - OFFER
        - CANCELLED
        - ON_HOLD
        - OTHER
    PostingStatus:
      type: string
      enum:
        - PUBLIC
        - INTERNAL
        - NOT_PUBLISHED
        - PRIVATE
    Compensation:
      type: object
      properties:
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        currency:
          type: string
    JobAd:
      type: object
      properties:
        sections:
          $ref: '#/components/schemas/JobAdSections'
        language:
          $ref: '#/components/schemas/Language'
    Language:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        label:
          type: string
        labelNative:
          type: string
    JobProperty:
      type: object
      required:
        - id
        - value
      properties:
        id:
          type: string
          minLength: 1
        label:
          type: string
        value:
          $ref: '#/components/schemas/JobPropertyValue'
    JobPropertyValue:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 256
        label:
          type: string
    UserIdentity:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    JobApproval:
      type: object
      properties:
        approvalRequestId:
          type: string
        positions:
          type: array
          items:
            $ref: '#/components/schemas/JobApprovalPosition'
        salaryRange:
          $ref: '#/components/schemas/SalaryRange'
    SalaryRange:
      type: object
      properties:
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        currency:
          type: string
    JobApprovalPosition:
      type: object
      properties:
        id:
          type: string
        positionId:
          type: string
        type:
          type: string
        incumbentName:
          type: string
        positionOpenDate:
          type: string
          format: date-time
        targetStartDate:
          type: string
          format: date-time
        status:
          type: string
    JobApplication:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/JobApplicationStatus'
        subStatus:
          type: string
        sourceIdentifier:
          $ref: '#/components/schemas/Uuid'
        createDate:
          type: string
          format: date-time
        profileId:
          $ref: '#/components/schemas/Uuid'
        jobId:
          $ref: '#/components/schemas/Uuid'
    JobApplicationStatus:
      type: string
      enum:
        - LEAD
        - NEW
        - IN_REVIEW
        - INTERVIEW
        - OFFERED
        - HIRED
        - REJECTED
        - WITHDRAWN
        - TRANSFERRED
    Message:
      type: object
      required:
        - content
      properties:
        content:
          description: Content of the message
          type: string
          minLength: 1
          maxLength: 10000
        correlationId:
          description: >-
            CorrelationId is an optional parameter for you to add an additional
            ID reference to the note. This will simply be appended onto the note
            and will not be tracked/managed/process by SmartRecruiters in any
            way.
          type: string
        shareWith:
          $ref: '#/components/schemas/ShareWith'
    MessageDetails:
      type: object
      properties:
        id:
          type: string
        shareRequired:
          type: boolean
    MessagesView:
      type: array
      items:
        $ref: '#/components/schemas/MessageView'
    MessageView:
      type: object
      properties:
        content:
          type: string
        createdOn:
          type: string
          format: date-time
        visibility:
          $ref: '#/components/schemas/Visibility'
        authorId:
          type: string
        context:
          $ref: '#/components/schemas/Context'
    Context:
      type: object
      properties:
        applications:
          $ref: '#/components/schemas/Applications'
    Applications:
      type: array
      items:
        $ref: '#/components/schemas/Application'
    Visibility:
      type: string
      enum:
        - PUBLIC
        - INTERNAL
    ShareWith:
      description: Sharing and message visibility options
      type: object
      properties:
        users:
          description: List of users to share the message with
          type: array
          items:
            type: string
        hiringTeamOf:
          description: List of jobs to share the message with its hiring teams
          type: array
          items:
            type: string
        everyone:
          description: Set the message to be visible to everyone in a company
          type: boolean
        openNote:
          description: >-
            Set the message to be visible to everyone in a company who has
            access to #-tagged candidate
          type: boolean
    Offers:
      type: object
      required:
        - totalFound
        - content
      properties:
        limit:
          type: integer
        offset:
          type: integer
        totalFound:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
    Offer:
      type: object
      required:
        - id
        - status
        - createdOn
        - updatedOn
        - actions
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - CREATED
            - PENDING_APPROVAL
            - APPROVED
            - NOT_APPROVED
            - PENDING_ACCEPTANCE
            - ACCEPTED
            - NOT_ACCEPTED
            - ABANDONED
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        properties:
          type: object
          additionalProperties:
            type: string
        actions:
          type: object
          required:
            - candidate
            - details
          properties:
            candidate:
              $ref: '#/components/schemas/Action'
            job:
              $ref: '#/components/schemas/Action'
            details:
              $ref: '#/components/schemas/Action'
    OfferDocument:
      type: object
      properties:
        id:
          description: Id of the document
          type: string
          format: uuid
        name:
          description: Name of the document
          type: string
        createdDate:
          description: 'Date when the document was created Format: yyyy-MM-ddTHH:mm:ss.SSSZZ'
          type: string
          format: date-time
    OfferDocumentsList:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/OfferDocument'
        isCurrentlySyncing:
          description: >-
            Indicates if the documents are currently being synced with the
            provider. If true, the documents list may be subject to change.
          type: boolean
        provider:
          description: >-
            Name of the provider that the documents are synced with. Currently
            only DOCUSIGN is supported.
          type: string
          enum:
            - DOCUSIGN
    ApiAssessmentComment:
      required:
        - message
      type: object
      properties:
        id:
          type: string
        createDate:
          type: string
          format: date-time
        message:
          pattern: .*\S+.*
          type: string
        messageToCandidate:
          pattern: .*\S+.*
          type: string
        assessmentURL:
          type: string
        author:
          $ref: '#/components/schemas/ApiContactPerson'
    ApiContactPerson:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
    ApiCommentRequest:
      required:
        - message
      type: object
      properties:
        message:
          pattern: .*\S+.*
          type: string
        messageToCandidate:
          pattern: .*\S+.*
          type: string
        assessmentURL:
          type: string
        author:
          $ref: '#/components/schemas/ApiContactPerson'
    ApiAssessmentCommentListResult:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiAssessmentComment'
    ApiAssessmentAttachment:
      type: object
      properties:
        id:
          type: string
        createDate:
          type: string
          format: date-time
        lastUpdateDate:
          type: string
          format: date-time
        fileName:
          type: string
    ApiAttachment:
      required:
        - attachment
      type: object
      properties:
        attachment:
          type: string
          format: binary
    ApiAssessmentAttachmentListResult:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiAssessmentAttachment'
    ApiAssessmentResult:
      required:
        - description
        - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: string
        createDate:
          type: string
          format: date-time
        passed:
          type: boolean
        score:
          type: string
        author:
          $ref: '#/components/schemas/ApiContactPerson'
        result:
          type: string
        resultType:
          type: string
          enum:
            - DOCUMENT
            - VIDEO_STREAM
            - VIDEO_URL
            - URL
            - GENERATED_URL
    ApiAssessmentResultListResult:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiAssessmentResult'
    ApiAssessmentOrder:
      required:
        - candidate
        - company
        - job
        - offer
        - requestor
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - NEW
            - IN_PROGRESS
            - REJECTED
            - COMPLETED
        createDate:
          type: string
          format: date-time
        lastUpdateDate:
          type: string
          format: date-time
        requestor:
          $ref: '#/components/schemas/ApiContactPerson'
        candidate:
          $ref: '#/components/schemas/ApiCandidate'
        job:
          $ref: '#/components/schemas/ApiJob'
        company:
          $ref: '#/components/schemas/ApiCompany'
        offer:
          $ref: '#/components/schemas/ApiOffer'
    ApiAvailability:
      type: object
      properties:
        expirationDate:
          type: string
          format: date-time
        industries:
          type: array
          items:
            $ref: '#/components/schemas/ApiIndustry'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/ApiLocation'
        companies:
          type: array
          items:
            type: string
        specialOffer:
          type: string
    ApiCandidate:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        addressLine:
          type: string
    ApiCompany:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ApiExperienceLevel:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    ApiFunction:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    ApiIndustry:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    ApiJob:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        industry:
          $ref: '#/components/schemas/ApiIndustry'
        function:
          $ref: '#/components/schemas/ApiFunction'
        experienceLevel:
          $ref: '#/components/schemas/ApiExperienceLevel'
        location:
          $ref: '#/components/schemas/ApiLocation'
    ApiLocation:
      type: object
      properties:
        country:
          type: string
        region:
          type: string
        city:
          type: string
    ApiOffer:
      required:
        - catalogId
        - description
        - name
        - terms
      type: object
      properties:
        description:
          pattern: .*\S+.*
          type: string
        id:
          type: string
        createDate:
          type: string
          format: date-time
        lastUpdateDate:
          type: string
          format: date-time
        catalogId:
          pattern: .*\S+.*
          type: string
        name:
          pattern: .*\S+.*
          type: string
        category:
          type: string
        terms:
          $ref: '#/components/schemas/ApiTerms'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - UNDER_REVIEW
            - REJECTED
        targetMarket:
          $ref: '#/components/schemas/ApiTargetMarket'
        availability:
          $ref: '#/components/schemas/ApiAvailability'
    ApiTargetMarket:
      type: object
      properties:
        industries:
          type: array
          items:
            $ref: '#/components/schemas/ApiIndustry'
        functions:
          type: array
          items:
            $ref: '#/components/schemas/ApiFunction'
        experienceLevels:
          type: array
          items:
            $ref: '#/components/schemas/ApiExperienceLevel'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/ApiLocation'
    ApiTerms:
      required:
        - price
      type: object
      properties:
        type:
          type: string
          enum:
            - REFERENCE_CHECK
            - BEHAVIORAL_ASSESSMENT
            - BACKGROUND_CHECK
            - VIDEO_INTERVIEW
            - SKILLS_TEST
            - INLINE_ASSESSMENT
        price:
          $ref: '#/components/schemas/Money'
        postingPeriod:
          type: integer
          format: int32
        costPerClick:
          $ref: '#/components/schemas/Money'
        existingContract:
          type: object
          additionalProperties:
            type: object
    Money:
      required:
        - amount
      type: object
      properties:
        amount:
          minimum: 0
          exclusiveMinimum: false
          type: number
        currencyCode:
          type: string
    ApiAssessmentOrderListResult:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiAssessmentOrder'
    ApiAssessmentOrderRequest:
      type: object
      properties:
        status:
          type: string
          enum:
            - NEW
            - IN_PROGRESS
            - REJECTED
            - COMPLETED
        requestor:
          $ref: '#/components/schemas/ApiContactPerson'
        candidate:
          $ref: '#/components/schemas/ApiCandidate'
        job:
          $ref: '#/components/schemas/ApiJob'
        company:
          $ref: '#/components/schemas/ApiCompany'
        offer:
          $ref: '#/components/schemas/ApiOffer'
    Config:
      required:
        - id
      type: object
      properties:
        id:
          pattern: .*\S+.*
          type: string
        value:
          type: string
    ApiConfigListResult:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/Config'
    ApiListResult:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            type: object
    ApiListResultApiOffer:
      type: object
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        totalFound:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiOffer'
    PostingList:
      type: object
      properties:
        totalFound:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostingItem'
    PostingItem:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        jobAdId:
          type: string
          format: uuid
        defaultJobAd:
          type: boolean
        refNumber:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        releasedDate:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/PostingLocation'
        industry:
          $ref: '#/components/schemas/Industry'
        department:
          $ref: '#/components/schemas/Department'
        function:
          $ref: '#/components/schemas/Function'
        typeOfEmployment:
          $ref: '#/components/schemas/TypeOfEmployment'
        experienceLevel:
          $ref: '#/components/schemas/ExperienceLevel'
        customField:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        ref:
          type: string
        creator:
          $ref: '#/components/schemas/Creator'
        language:
          $ref: '#/components/schemas/Language'
        visibility:
          $ref: '#/components/schemas/Visibility'
    Posting:
      type: object
      properties:
        id:
          type: string
        uuid:
          type: string
        name:
          type: string
        jobId:
          type: string
          format: uuid
        jobAdId:
          type: string
          format: uuid
        defaultJobAd:
          type: boolean
        applyUrl:
          type: string
        postingUrl:
          type: string
        referralUrl:
          type: string
        refNumber:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        releasedDate:
          type: string
          format: date-time
        location:
          $ref: '#/components/schemas/PostingLocation'
        industry:
          $ref: '#/components/schemas/Industry'
        department:
          $ref: '#/components/schemas/Department'
        function:
          $ref: '#/components/schemas/Function'
        typeOfEmployment:
          $ref: '#/components/schemas/TypeOfEmployment'
        experienceLevel:
          $ref: '#/components/schemas/ExperienceLevel'
        customField:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        ref:
          type: string
        creator:
          $ref: '#/components/schemas/Creator'
        jobAd:
          $ref: '#/components/schemas/JobAdSections'
        active:
          type: boolean
        visibility:
          $ref: '#/components/schemas/Visibility'
    Company:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
    PostingLocation:
      type: object
      properties:
        country:
          description: ISO 2-letter country code
          type: string
        region:
          description: >-
            This can be state, colloquial name, voivodeship or other area
            description
          type: string
        city:
          type: string
        remote:
          description: Indicates if employees can work remotely
          type: boolean
        latitude:
          type: string
        longitude:
          type: string
    Function:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    TypeOfEmployment:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    ExperienceLevel:
      type: object
      properties:
        id:
          type: string
          enum:
            - associate
            - director
            - entry_level
            - executive
            - internship
            - mid_senior_level
            - not_applicable
        name:
          type: string
    CustomField:
      type: object
      properties:
        fieldId:
          type: string
        fieldLabel:
          type: string
        valueId:
          type: string
        valueLabel:
          type: string
    Creator:
      type: object
      properties:
        name:
          type: string
    JobAdLanguageCode:
      type: string
      enum:
        - af
        - am
        - ar
        - az
        - bg
        - bn
        - ca
        - cs
        - cy
        - da
        - de
        - el
        - en
        - en-GB
        - es
        - es-MX
        - et
        - eu
        - fa
        - fi
        - fil
        - fr
        - fr-CA
        - ga
        - gl
        - gu
        - he
        - hi
        - hr
        - hu
        - hy
        - id
        - is
        - it
        - ja
        - ka
        - km
        - kn
        - ko
        - lo
        - lt
        - lv
        - ml
        - mn
        - mr
        - ms
        - ne
        - nl
        - 'no'
        - pl
        - pt
        - pt-BR
        - ro
        - ru
        - si
        - sk
        - sl
        - sr
        - sv
        - sw
        - ta
        - te
        - tr
        - uk
        - ur
        - vi
        - zh-CN
        - zh-TW
        - zu
    JobAdVideosSection:
      type: object
      properties:
        title:
          type: string
        urls:
          type: array
          items:
            type: string
    ApiBooleanValue:
      type: object
      properties:
        value:
          type: boolean
    ApiColumnResponse:
      type: object
      properties:
        entityTypeId:
          type: string
        entityInstanceId:
          type: string
        dataPointId:
          type: string
        dataPointInstanceId:
          type: string
        dataPointInstanceName:
          type: string
        dataPointName:
          type: string
        dataPointType:
          type: string
          enum:
            - ID
            - DATE
            - NUMBER
            - TEXT
            - ENUM
            - BOOLEAN
            - DECIMAL
    ApiDatePeriod:
      required:
        - period
        - unit
      type: object
      properties:
        period:
          minimum: 1
          type: integer
          format: int32
        unit:
          type: string
          enum:
            - DAYS
            - WEEKS
            - MONTHS
            - YEARS
        fullPeriod:
          type: boolean
    ApiDateRange:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    ApiFilterResponse:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ApiColumnResponse'
        dateRange:
          $ref: '#/components/schemas/ApiDateRange'
        datePeriod:
          $ref: '#/components/schemas/ApiDatePeriod'
        rowValues:
          $ref: '#/components/schemas/ApiRowValues'
        booleanValue:
          $ref: '#/components/schemas/ApiBooleanValue'
    ApiReportFileResponse:
      type: object
      properties:
        reportFileId:
          type: string
        reportId:
          type: string
        reportFileStatus:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETED
            - FAILED
        scheduleType:
          type: string
          enum:
            - AD_HOC
            - SCHEDULED
        schedulingDate:
          type: string
          format: date-time
        generationDate:
          type: string
          format: date-time
        requestorId:
          type: string
        accessGroupId:
          type: string
        systemRoleId:
          type: string
        rowEntityTypeId:
          type: string
        rowEntityInstanceId:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ApiColumnResponse'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/ApiFilterResponse'
        errorReason:
          type: string
          enum:
            - UNKNOWN
            - MISSING_ACCESS_GROUP
            - ACCESS_GROUP_MISMATCH
            - MISSING_SYSTEM_ROLE
            - SYSTEM_ROLE_MISMATCH
            - REPORTING_AREA_RESTRICTED
            - INCORRECT_ACCESS_CONFIGURATION
            - MISSING_REPORT_CREATOR_EMPLOYEE
    ApiRowValues:
      required:
        - values
      type: object
      properties:
        noneValue:
          type: boolean
        values:
          maxItems: 100
          minItems: 0
          type: array
          items:
            maxLength: 256
            minLength: 1
            type: string
    ApiReportResponse:
      type: object
      properties:
        reportId:
          type: string
        name:
          type: string
        rowEntityTypeId:
          type: string
        rowEntityInstanceId:
          type: string
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ApiColumnResponse'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/ApiFilterResponse'
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        creatorId:
          type: string
        modifierId:
          type: string
        grantees:
          uniqueItems: true
          type: array
          items:
            type: string
        schedule:
          $ref: '#/components/schemas/ApiSchedule'
        reportTemplateId:
          type: string
        reportFormats:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - CSV
              - EXCEL
        accessGroupId:
          type: string
        systemRoleId:
          type: string
    ApiSchedule:
      required:
        - activityPeriod
        - frequency
      type: object
      properties:
        frequency:
          type: string
          enum:
            - ANNUALLY
            - MONTHLY
            - WEEKLY
            - DAILY
        activityPeriod:
          $ref: '#/components/schemas/ApiDateRange'
        schedulingTime:
          $ref: '#/components/schemas/ApiTimeRange'
    ApiTime:
      type: object
      properties:
        hour:
          maximum: 23
          minimum: 0
          type: integer
          format: int32
        minute:
          maximum: 59
          minimum: 0
          type: integer
          format: int32
    ApiTimeRange:
      required:
        - from
        - to
      type: object
      properties:
        from:
          $ref: '#/components/schemas/ApiTime'
        to:
          $ref: '#/components/schemas/ApiTime'
        zone:
          type: string
    ApiReportFilesResponse:
      type: object
      properties:
        nextPage:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiReportFileResponse'
    ApiReportsResponse:
      type: object
      properties:
        nextPage:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/ApiReportResponse'
    Review:
      type: object
      properties:
        id:
          readOnly: true
          $ref: '#/components/schemas/Uuid'
        candidateId:
          $ref: '#/components/schemas/Uuid'
        jobId:
          $ref: '#/components/schemas/Uuid'
        reviewerId:
          $ref: '#/components/schemas/UserId'
        overallRating:
          type: integer
        comment:
          type: string
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
    ReviewInput:
      type: object
      required:
        - candidateId
        - jobId
        - overallRating
      properties:
        reviewerId:
          $ref: '#/components/schemas/UserId'
        candidateId:
          $ref: '#/components/schemas/Uuid'
        jobId:
          $ref: '#/components/schemas/Uuid'
        overallRating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdOn:
          type: string
          format: date-time
    ReviewToUpdateInput:
      type: object
      required:
        - reviewerId
      properties:
        overallRating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        reviewerId:
          $ref: '#/components/schemas/UserId'
    ActivityAssignmentAttachments:
      type: object
      required:
        - attachmentIds
      properties:
        attachmentIds:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
    Assignments:
      type: object
      required:
        - activityAssignments
        - webFormAssignments
        - fillablePdfFormAssignments
      properties:
        activityAssignments:
          type: array
          items:
            $ref: '#/components/schemas/ActivityAssignment'
        webFormAssignments:
          type: array
          items:
            $ref: '#/components/schemas/WebFormAssignment'
        fillablePdfFormAssignments:
          type: array
          items:
            $ref: '#/components/schemas/FillablePdfFormAssignment'
    ActivityAssignment:
      type: object
      required:
        - id
        - title
        - description
        - isFileUploadRequired
        - hasSensitiveData
        - isHighPriority
      properties:
        title:
          type: string
        description:
          type: string
        id:
          $ref: '#/components/schemas/Uuid'
        isFileUploadRequired:
          type: boolean
        hasSensitiveData:
          type: boolean
        isHighPriority:
          type: boolean
    WebFormAssignment:
      type: object
      required:
        - id
        - title
        - description
        - hasSensitiveData
        - isHighPriority
      properties:
        title:
          type: string
        description:
          type: string
        id:
          $ref: '#/components/schemas/Uuid'
        hasSensitiveData:
          type: boolean
        isHighPriority:
          type: boolean
    FillablePdfFormAssignment:
      type: object
      required:
        - id
        - title
        - description
        - hasSensitiveData
        - isHighPriority
        - fileName
      properties:
        title:
          type: string
        description:
          type: string
        id:
          $ref: '#/components/schemas/Uuid'
        hasSensitiveData:
          type: boolean
        isHighPriority:
          type: boolean
        fileName:
          type: string
    WebFormFieldsMetadata:
      type: object
      required:
        - fields
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WebFormFieldMetadata'
    WebFormFieldMetadata:
      type: object
      required:
        - type
        - title
        - isRequired
      properties:
        title:
          type: string
        type:
          type: string
        integrationKey:
          type: string
        hintText:
          type: string
        isRequired:
          type: boolean
    WebFormAnswers:
      type: object
      required:
        - answers
      properties:
        answers:
          $ref: '#/components/schemas/WebFormAnswer'
    WebFormAnswer:
      type: object
      required:
        - fieldId
        - answerValue
      properties:
        fieldId:
          type: string
        integrationKey:
          type: string
        answerValue:
          type: array
          items:
            type: string
    NewHire:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - socialMedia
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        socialMedia:
          $ref: '#/components/schemas/SocialMedia'
    SocialMedia:
      type: object
      properties:
        skype:
          type: string
        linkedIn:
          type: string
        facebook:
          type: string
        twitter:
          type: string
        website:
          type: string
        indeed:
          type: string
    OnboardingProcess:
      type: object
      required:
        - id
        - newHireId
        - jobId
        - applicationId
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        newHireId:
          $ref: '#/components/schemas/Uuid'
        employmentStartDate:
          type: string
          format: date
        jobId:
          $ref: '#/components/schemas/Uuid'
        applicationId:
          $ref: '#/components/schemas/Uuid'
    SemanticErrorResponse:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/SemanticError'
    SemanticError:
      type: object
      required:
        - dataPath
        - message
      properties:
        dataPath:
          type: string
        message:
          type: string
    LocationUpdateRequest:
      description: >-
        regionCode is not recommended to be used for countries other than the
        United States.
      type: object
      properties:
        countryCode:
          type: string
          minLength: 2
          maxLength: 2
        regionCode:
          type: string
        city:
          type: string
          minLength: 1
        address:
          type: string
          format: address
        postalCode:
          type: string
      required:
        - city
        - countryCode
    UserLanguageCode:
      description: >-
        Language assigned to user account. Language code, can be two-letter for
        the standard variant or with additional two letters after a hyphen to
        identify a specific locale
      type: string
      enum:
        - bg
        - cs
        - da
        - de
        - el
        - en
        - es
        - es-MX
        - fi
        - fr
        - fr-CA
        - hr
        - hu
        - id
        - it
        - ja
        - lt
        - nl
        - 'no'
        - pl
        - pt
        - pt-BR
        - ro
        - ru
        - sk
        - sl
        - sr
        - sv
        - th
        - tr
        - uk
        - vi
        - zh-CN
        - zh-TW
        - ka
    Users:
      type: object
      properties:
        limit:
          type: integer
        nextPageId:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserListItem'
        totalFound:
          type: integer
        offset:
          type: integer
    UserListItem:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - language
          properties:
            id:
              type: string
            active:
              type: boolean
            updatedOn:
              type: string
              format: date-time
    User:
      type: object
      required:
        - firstName
        - lastName
        - role
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
          maxLength: 300
          format: name
        lastName:
          type: string
          minLength: 1
          maxLength: 300
          format: name
        systemRole:
          $ref: '#/components/schemas/SystemRole'
        externalData:
          type: string
          nullable: true
        ssoIdentifier:
          type: string
          nullable: true
        ssoLoginMode:
          description: >-
            User level login mode setting. Possible values are:

            - SSO - user can login only through SSO

            - PASSWORD - user can login only by password


            Notice: This setting _CAN_ be configured always, but it will be
            respected only if:

            - SSO is enabled at company level

            - employee level SSO configuration functionality is enabled for
            company
          nullable: true
          type: string
          enum:
            - SSO
            - PASSWORD
        language:
          type: object
          required:
            - code
          properties:
            code:
              $ref: '#/components/schemas/UserLanguageCode'
        role:
          type: string
          enum:
            - EMPLOYEE
            - RESTRICTED
            - STANDARD
            - EXTENDED
            - ADMINISTRATOR
    UserEntity:
      allOf:
        - required:
            - language
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            id:
              type: string
            active:
              type: boolean
            updatedOn:
              type: string
              format: date-time
            location:
              $ref: '#/components/schemas/Location'
    NewUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            ssoIdentifier:
              type: string
              maxLength: 100
              writeOnly: true
            password:
              type: string
              writeOnly: true
            location:
              $ref: '#/components/schemas/LocationUpdateRequest'
    SystemRoles:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SystemRole'
    SystemRole:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
    AccessGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    AccessGroups:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroup'
    UserIds:
      type: array
      maxItems: 5000
      items:
        $ref: '#/components/schemas/UserId'
    Seats:
      description: >-
        List of seat keys. Available values: smartPal, crm, recruitingAI,
        textMessaging
      type: array
      items:
        type: string
    AnyValue:
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: {}
        - type: object
    add:
      description: add operation. Value can be any JSON value.
      properties:
        op:
          enum:
            - add
          type: string
        value:
          $ref: '#/components/schemas/AnyValue'
      required:
        - value
    remove:
      description: remove operation. Only a path is specified.
      properties:
        op:
          enum:
            - remove
          type: string
    replace:
      description: replace operation. Value can be any JSON value.
      properties:
        op:
          enum:
            - replace
          type: string
        value:
          $ref: '#/components/schemas/AnyValue'
      required:
        - value
    move:
      description: move operation. "from" is a JSON Pointer.
      properties:
        op:
          enum:
            - move
          type: string
        from:
          $ref: '#/components/schemas/jsonPointer'
      required:
        - from
    copy:
      description: copy operation. "from" is a JSON Pointer.
      properties:
        op:
          enum:
            - copy
          type: string
        from:
          $ref: '#/components/schemas/jsonPointer'
      required:
        - from
    test:
      description: test operation. Value can be any JSON value.
      properties:
        op:
          enum:
            - test
          type: string
        value:
          $ref: '#/components/schemas/AnyValue'
      required:
        - value
    oneOperation:
      oneOf:
        - $ref: '#/components/schemas/add'
        - $ref: '#/components/schemas/remove'
        - $ref: '#/components/schemas/replace'
        - $ref: '#/components/schemas/move'
        - $ref: '#/components/schemas/copy'
        - $ref: '#/components/schemas/test'
    JobWebhookPayload:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    JobAdWebhookPayload:
      type: object
      required:
        - job_id
        - job_ad_id
      properties:
        job_id:
          type: string
        job_ad_id:
          type: string
    JobAdPostingsWebhookPayload:
      type: object
      required:
        - job_id
        - job_ad_id
      properties:
        job_id:
          type: string
        job_ad_id:
          type: string
    PositionWebhookPayload:
      type: object
      required:
        - job_id
        - position_id
      properties:
        job_id:
          type: string
        position_id:
          type: string
    ApplicationWebhookPayload:
      type: object
      required:
        - job_id
        - candidate_id
        - application_id
      properties:
        job_id:
          type: string
        candidate_id:
          type: string
        application_id:
          type: string
    ApplicationAttachmentWebhookPayload:
      allOf:
        - $ref: '#/components/schemas/ApplicationWebhookPayload'
        - type: object
          required:
            - attachment_id
          properties:
            attachment_id:
              type: string
    CandidateWebhookPayload:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    OfferWebhookPayload:
      type: object
      required:
        - job_id
        - candidate_id
        - offer_id
      properties:
        job_id:
          type: string
        candidate_id:
          type: string
        offer_id:
          type: string
    OfferApprovalWebhookPayload:
      type: object
      required:
        - approval_id
        - job_id
        - candidate_id
        - offer_id
      properties:
        approval_id:
          type: string
        job_id:
          type: string
        candidate_id:
          type: string
        offer_id:
          type: string
    JobApprovalWebhookPayload:
      type: object
      required:
        - approval_id
        - job_id
      properties:
        approval_id:
          type: string
        job_id:
          type: string
    SecretKeyPayload:
      type: object
      properties:
        secretKey:
          type: string
    Subscriptions:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'
    CallbackRequests:
      type: array
      items:
        $ref: '#/components/schemas/CallbackRequest'
    CallbackUrl:
      type: string
      format: https_url
      example: https://server.com/send/callback/here
    EmailAddress:
      type: string
      format: email
      example: webhook.alerts@domain.com
    CallbackAuthentication:
      type: object
      oneOf:
        - $ref: '#/components/schemas/CallbackBasicAuth'
        - $ref: '#/components/schemas/CallbackHeaderAuth'
        - $ref: '#/components/schemas/CallbackOAuth2Auth'
      example:
        type: header
        headerName: X-TOKEN
        headerValue: J?7HSgUKm7!MPm+EKm^P4BwW4ywRRRVu
    CallbackBasicAuth:
      type: object
      properties:
        type:
          type: string
          enum:
            - basic
        username:
          type: string
        password:
          type: string
      example:
        type: basic
        username: basic-user
        password: jVG8wzKZ%B+r_NkA
    CallbackHeaderAuth:
      type: object
      properties:
        type:
          type: string
          enum:
            - header
        headerName:
          description: Custom header name starting with "x-"
          type: string
          pattern: ^[Xx]-
        headerValue:
          type: string
      example:
        type: header
        username: token
        password: J?7HSgUKm7!MPm+EKm^P4BwW4ywRRRVu
    CallbackOAuth2Auth:
      description: >
        When `CallbackAuthentication` is set to `oauth2`, every call made to the
        webhook callback url will incude header


        `'authorization': Bearer access_token_value`
      type: object
      properties:
        type:
          type: string
          enum:
            - oauth2
        clientId:
          description: OAuth2 client id used for token request
          type: string
        clientSecret:
          description: OAuth2 client secret used for token request
          type: string
        tokenServiceUrl:
          description: >
            OAuth2 token service url. This serivce is expected to consume
            `application/x-www-form-urlencoded` content

            type. The payload will consist of


            `client_id=provided_client_id&client_secret=provided_client_secret&grant_type=client_credentials`


            As a result, the service should return json containing information
            about access token in form:


            ```

            {
              access_token: 'access_token_value',
              expires_in: 'amount_of_miliseconds'
            }

            ````
          type: string
          format: https_url
      example:
        type: oauth2
        clientId: oauth_client_123
        clientSecret: 9T{Z8OLl<~Si(=c
        tokenServiceUrl: https://www.your-token-generator-service.com/tokens
    Subscription:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        callbackUrl:
          $ref: '#/components/schemas/CallbackUrl'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        status:
          type: string
          readOnly: true
          enum:
            - inactive
            - active
      required:
        - callbackUrl
        - events
    CallbackRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CallbackRequestStatus'
        timestamp:
          description: >
            Requests sent before timestamp. Format ISO8601:
            yyyy-MM-ddTHH:mm:ss.SSSZZ
          type: string
          format: date-time
        requestDetails:
          description: details of callback request
          type: object
          properties:
            url:
              description: url to which callback was sent
              type: string
            body:
              description: body of the request in form of stringified json.
              type: string
            headers:
              description: headers set for the request
              type: object
    CallbackRequestStatus:
      type: string
      enum:
        - successful
        - failed
    SubscriptionRequest:
      type: object
      properties:
        callbackUrl:
          $ref: '#/components/schemas/CallbackUrl'
        events:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/EventName'
        alertingEmailAddress:
          $ref: '#/components/schemas/EmailAddress'
        callbackAuthentication:
          $ref: '#/components/schemas/CallbackAuthentication'
      required:
        - callbackUrl
        - events
    EventName:
      type: string
      enum:
        - job.created
        - job.updated
        - job.status.updated
        - job.hiring-team.updated
        - job.ad.created
        - job.ad.updated
        - job.ad.postings.updated
        - position.created
        - position.updated
        - position.deleted
        - application.created
        - application.status.updated
        - application.fields.updated
        - application.onboarding-status.updated
        - application.attachment.created
        - application.source.updated
        - candidate.created
        - candidate.updated
        - candidate.deleted
        - offer.created
        - offer.updated
        - offer.approval.created
        - offer.approval.approved
        - offer.approval.rejected
        - offer.approval.abandoned
        - offer.approval.step.approved
        - offer.approval.step.rejected
        - offer.approver.skipped
        - offer.approver.delegated
        - offer.approval.comment.created
        - job.approval.created
        - job.approval.approved
        - job.approval.rejected
        - job.approval.abandoned
        - job.approval.step.approved
        - job.approval.step.rejected
        - job.approver.skipped
        - job.approver.delegated
        - job.approval.comment.created
        - review.created
        - review.updated
        - review.deleted
        - application.screening-answers.created
        - application.screening-answers.updated
        - onboarding.process.started
        - onboarding.assignments.high-priority.completed
        - onboarding.assignments.completed
    ReviewWebhookPayload:
      type: object
      required:
        - application_id
        - review_id
      properties:
        application_id:
          type: string
        review_id:
          type: string
    ScreeningQuestionsAnswersWebhookPayload:
      type: object
      required:
        - job_id
        - candidate_id
        - application_id
      properties:
        job_id:
          type: string
        candidate_id:
          type: string
        application_id:
          type: string
    OnboardingProcessWebhookPayload:
      type: object
      required:
        - onboarding_process_id
        - new_hire_id
      properties:
        onboarding_process_id:
          type: string
        new_hire_id:
          type: string
    OnboardingHighPriorityAssignmentsCompletedWebhookPayload:
      type: object
      required:
        - onboarding_process_id
        - new_hire_id
      properties:
        onboarding_process_id:
          type: string
        new_hire_id:
          type: string
    OnboardingAssignmentsCompletedWebhookPayload:
      type: object
      required:
        - onboarding_process_id
        - new_hire_id
      properties:
        onboarding_process_id:
          type: string
        new_hire_id:
          type: string
    ApprovalsAddCommentToRequestRequest:
      type: object
      required:
        - content
        - authorId
      properties:
        content:
          type: string
          maxLength: 10000
        authorId:
          type: string
    ApprovalsCreateApprovalRequestRequest:
      type: object
      required:
        - baseId
        - type
        - decisionMode
        - steps
      properties:
        baseId:
          $ref: '#/components/schemas/ApprovalRequestId'
        type:
          $ref: '#/components/schemas/Type'
        decisionMode:
          $ref: '#/components/schemas/DecisionMode'
        steps:
          description: Steps to complete approval
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/StepInput'
    ApprovalsApproveDecisionsRequest:
      type: object
      required:
        - approverId
      properties:
        approverId:
          type: string
    ApprovalsRejectRequestByIdRequest:
      type: object
      required:
        - approverId
        - comment
      properties:
        approverId:
          type: string
        comment:
          type: string
    ResultAddAttachmentToOrderRequest:
      type: string
    CandidatesParseResumeAndAssignToTalentPoolRequest:
      type: object
      properties:
        sourceTypeId:
          description: Candidate Source type id
          type: string
        sourceSubTypeId:
          description: Candidate Source subtype id
          type: string
        sourceId:
          description: Candidate Source id
          type: string
        internal:
          description: Mark as company employee
          type: boolean
        file:
          description: The resume file to parse.
          type: string
          format: binary
    CandidatesRequestConsentFromMultipleRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/ConsentRequest'
    CandidatesAttachFilesRequest:
      type: object
      properties:
        attachmentType:
          description: Type of attachment you want to upload.
          type: string
          enum:
            - GENERIC_FILE
            - RESUME
            - COVER_LETTER
          default: GENERIC_FILE
        file:
          description: The file to upload.
          type: string
          format: binary
      required:
        - attachmentType
    CandidatesAttachFileToJobCandidateRequest:
      type: object
      properties:
        attachmentType:
          description: Type of attachment you want to upload.
          type: string
          enum:
            - GENERIC_FILE
            - RESUME
            - COVER_LETTER
          default: GENERIC_FILE
        file:
          description: File to upload.
          type: string
          format: binary
      required:
        - attachmentType
    CandidatesUpdateCandidatePropertiesRequest:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/CandidatePropertyValue'
    UsersUpdateAvatarRequest:
      type: object
      properties:
        file:
          description: The file to upload.
          type: string
          format: binary
      required:
        - file
    IntegrationShowConsentFormOnPartnerSideResponse:
      type: string
    IntegrationRemoveIntegrationOnPartnerSideResponse:
      type: object
      properties: {}
      example: {}
    PackagesGetListResponse:
      type: array
      items:
        $ref: '#/components/schemas/AssessmentPackage'
    OrdersAssessPackageForCandidateResponse:
      type: object
      properties: {}
      example: {}
    InfoGetMetricsResponse:
      type: string
    OffersGetDocumentResponse:
      format: binary
    FilesDownloadReportDataResponse:
      type: string
    ReportsDownloadRecentFileResponse:
      type: string
    ReviewsGetAllForCandidateJobResponse:
      type: array
      items:
        $ref: '#/components/schemas/Review'
    AssignmentssubmissionsGetFormAnswersResponse:
      type: string
      format: binary
    AssignmentssubmissionsGetSingleAttachmentResponse:
      type: string
      format: binary
  securitySchemes:
    key:
      type: apiKey
      name: x-smarttoken
      in: header
    oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://www.smartrecruiters.com/identity/oauth/allow
          tokenUrl: https://api.smartrecruiters.com/identity/oauth/token
          scopes:
            approvals_read: Access Approval Requests
            approvals_create: Create Approval Requests
            approvals_decide: Approve or Reject Approval Requests
            assessment_orders_read: Access Assessment Orders
            audit_events_read: Access Audit Events
            candidates_read: Access Candidates
            candidates_create: Create Candidates
            candidates_offers_read: Access Offer Terms
            candidates_manage: Manage Candidate Status and Properties
            candidate_status_read: Access Candidate's status
            configuration_read: Access Company Settings
            configuration_manage: Manage Company Settings
            company_read: Access Company Information
            interviews_read: Access Interviews and Timeslots
            interviews_write: Create, update and delete Interviews and Timeslots
            interview_types_read: Access Interview Types
            interview_types_write: Create and delete Interview Types
            jobs_read: Access Jobs
            jobs_manage: Manage jobs
            jobs_publications_manage: Publish Jobs
            job_applications_read: Access Job Applications
            messages_write: Message Users
            messages_manage: Manage Messages
            messages_read: Access Messages
            reporting_read: Get analytics reports and download report files
            reporting_write: Manage/execute analytics reports
            reviews_read: Access Reviews
            reviews_write: Create, update and delete Reviews
            users_read: Access Users
            user_me_read: Access information about my user
            users_manage: Manage Users
            webhooks_read: View webhook subscriptions
            webhooks_write: Create new webhook subscription
            webhooks_delete: Delete webhook subscription
            webhooks_manage: View, create and delete webhook subscriptions
    oauth2_master:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.smartrecruiters.com/identity/oauth/token
          scopes:
            partner_configuration_manage: >-
              Allows modification of global configuration and creation of
              customer level integrations
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://www.partner.com/identity/oauth/token
          scopes:
            jobs_read: Allows reading job details
            candidates_read: Allows reading candidate details
            assessment_result_manage: Allows managing assessment result
            packages_view: Allows reading list of assessment packages
            orders_manage: Allows creating orders
  requestBodies:
    OnboardingStatus:
      description: Onboarding status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OnboardingStatus'
      required: true
    CandidatePropertyInputValue:
      description: Input value of the candidate property.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidatePropertyInputValue'
    CandidateInput:
      description: Candidate object that needs to be created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateInput'
      required: true
    Resume:
      content:
        multipart/form-data:
          schema:
            $ref: >-
              #/components/schemas/CandidatesParseResumeAndAssignToTalentPoolRequest
    CandidateStatus:
      description: Candidate Status to be set
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateStatus'
    BatchConsentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidatesRequestConsentFromMultipleRequest'
    BatchCandidatePropertyValue:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidatesUpdateCandidatePropertiesRequest'
    JSONPatch:
      description: patch request
      content:
        application/json-patch+json:
          schema:
            $ref: '#/components/schemas/JSONPatch'
          example:
            - op: replace
              path: /firstName
              value: firstNameValue
            - op: add
              path: /ssoIdentifier
              value: ssoIdentifierValue
    Publication:
      description: Publication object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Publication'
    JobPositionInput:
      description: Position body object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobPositionInput'
      required: true
    JobAdContent:
      description: job ad
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobAdContent'
      required: true
    JobCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobWebhookPayload'
    JobAdCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobAdWebhookPayload'
    JobAdPostingsCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobAdPostingsWebhookPayload'
    PositionCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PositionWebhookPayload'
    ApplicationCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationWebhookPayload'
    ApplicationAttachmentCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationAttachmentWebhookPayload'
    CandidateCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CandidateWebhookPayload'
    OfferCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OfferWebhookPayload'
    OfferApprovalCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OfferApprovalWebhookPayload'
    JobApprovalCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobApprovalWebhookPayload'
    ReviewCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReviewWebhookPayload'
    ScreeningQuestionsAnswersCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScreeningQuestionsAnswersWebhookPayload'
    OnboardingProcessCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OnboardingProcessWebhookPayload'
    OnboardingHighPriorityAssignmentsCompletedCallback:
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/OnboardingHighPriorityAssignmentsCompletedWebhookPayload
    OnboardingAssignmentsCompletedCallback:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OnboardingAssignmentsCompletedWebhookPayload'
  callbacks:
    onJobCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job created webhook callback
          operationId: onJobCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job updated webhook callback
          operationId: onJobUpdatedCallback
          description: >
            Events will be triggered when any of the following job properties is
            changed:

            - `title`

            - `refNumber`

            - `department`

            - `location`

            - `targetHiringDate`

            - `industry`

            - `function`

            - `typeOfEmployment`

            - `experienceLevel`

            - `eooCategory`

            - `template`

            - any of job `properties` value
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobStatusUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job status updated webhook callback
          operationId: onJobStatusUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobHiringTeamUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job hiring-team updated webhook callback
          operationId: onJobHiringTeamUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobAdCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job ad created webhook callback
          operationId: onJobAdCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobAdCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobAdUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job ad updated webhook callback
          operationId: onJobAdUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobAdCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobAdPostingsUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Job ad postings updated webhook callback
          operationId: onJobAdPostingsUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobAdPostingsCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onPositionCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Position created webhook callback
          operationId: onPositionCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/PositionCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onPositionUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Position updated webhook callback
          operationId: onPositionUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/PositionCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onPositionDeleted:
      '{$request.body#/callbackUrl}':
        post:
          summary: Position deleted webhook callback
          operationId: onPositionDeletededCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/PositionCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Application created webhook callback
          operationId: onApplicationCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ApplicationCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationStatusUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Application status updated webhook callback
          operationId: onApplicationStatusUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ApplicationCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationFieldsUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Application fields updated webhook callback
          operationId: onApplicationFieldsUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ApplicationCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationOnboardingStatusUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Application onboarding status updated webhook callback
          operationId: onApplicationOnboardingStatusUpdated
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ApplicationCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationAttachmentCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Application attachment created webhook callback
          operationId: onApplicationAttachmentCreated
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ApplicationAttachmentCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationSourceUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Application source updated webhook callback
          operationId: onApplicationSourceUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ApplicationCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onCandidateCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Candidate created webhook callback
          operationId: onCandidateCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/CandidateCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onCandidateUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Candidate updated webhook callback
          operationId: onCandidateUpdatedCallback
          description: >
            Events will be triggered when any of the following candidate
            properties is changed:

            - `firstName`

            - `lastName`

            - `email`

            - `phoneNumber`

            - `location`

            - `web`

            - `education`

            - `experience`

            - `internal`

            - `tags`
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/CandidateCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onCandidateDeleted:
      '{$request.body#/callbackUrl}':
        post:
          summary: Candidate created webhook callback
          operationId: onCandidateDeletedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/CandidateCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Offer created webhook callback
          operationId: onOfferCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Offer updated webhook callback
          operationId: onOfferUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Created offer approval webhook callback
          operationId: onOfferApprovalCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalApproved:
      '{$request.body#/callbackUrl}':
        post:
          summary: Approved offer approval webhook callback
          operationId: onOfferApprovalApprovedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalRejected:
      '{$request.body#/callbackUrl}':
        post:
          summary: Rejected offer approval webhook callback
          operationId: onOfferApprovalRejectedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalAbandoned:
      '{$request.body#/callbackUrl}':
        post:
          summary: Abandoned offer approval webhook callback
          operationId: onOfferApprovalAbandonedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalStepApproved:
      '{$request.body#/callbackUrl}':
        post:
          summary: Approved offer approval step webhook callback
          operationId: onOfferApprovalStepApprovedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalStepRejected:
      '{$request.body#/callbackUrl}':
        post:
          summary: Rejected offer approval step webhook callback
          operationId: onOfferApprovalStepRejectedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApproverSkipped:
      '{$request.body#/callbackUrl}':
        post:
          summary: Skipped offer approver webhook callback
          operationId: onOfferApproverSkippedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApproverDelegated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Delegated offer approver webhook callback
          operationId: onOfferApproverDelegatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOfferApprovalCommentCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Created offer approval comment webhook callback
          operationId: onOfferApprovalCommentCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OfferApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Created job approval webhook callback
          operationId: onJobApprovalCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalApproved:
      '{$request.body#/callbackUrl}':
        post:
          summary: Approved job approval webhook callback
          operationId: onJobApprovalApprovedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalRejected:
      '{$request.body#/callbackUrl}':
        post:
          summary: Rejected job approval webhook callback
          operationId: onJobApprovalRejectedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalAbandoned:
      '{$request.body#/callbackUrl}':
        post:
          summary: Abandoned job approval webhook callback
          operationId: onJobApprovalAbandonedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalStepApproved:
      '{$request.body#/callbackUrl}':
        post:
          summary: Approved job approval step webhook callback
          operationId: onJobApprovalStepApprovedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalStepRejected:
      '{$request.body#/callbackUrl}':
        post:
          summary: Rejected job approval step webhook callback
          operationId: onJobApprovalStepRejectedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApproverSkipped:
      '{$request.body#/callbackUrl}':
        post:
          summary: Skipped job approver webhook callback
          operationId: onJobApproverSkippedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApproverDelegated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Delegated job approver webhook callback
          operationId: onJobApproverDelegatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onJobApprovalCommentCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Created job approval comment webhook callback
          operationId: onJobApprovalCommentCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/JobApprovalCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onReviewCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Review created webhook callback
          operationId: onReviewCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ReviewCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onReviewUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Review updated webhook callback
          operationId: onReviewUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ReviewCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onReviewDeleted:
      '{$request.body#/callbackUrl}':
        post:
          summary: Review deleted webhook callback
          operationId: onReviewDeletedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ReviewCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationScreeningAnswersCreated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Screening answers created
          operationId: onApplicationScreeningAnswersCreatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ScreeningQuestionsAnswersCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onApplicationScreeningAnswersUpdated:
      '{$request.body#/callbackUrl}':
        post:
          summary: Screening answers updated
          operationId: onApplicationScreeningAnswersUpdatedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/ScreeningQuestionsAnswersCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOnboardingProcessStarted:
      '{$request.body#/callbackUrl}':
        post:
          summary: Onboarding process started
          operationId: onOnboardingProcessStartedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OnboardingProcessCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOnboardingAssignmentsHighPriorityCompleted:
      '{$request.body#/callbackUrl}':
        post:
          summary: Onboarding high priority assignments were completed
          operationId: onOnboardingAssignmentsHighPriorityCompletedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: >-
              #/components/requestBodies/OnboardingHighPriorityAssignmentsCompletedCallback
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
    onOnboardingAssignmentsCompleted:
      '{$request.body#/callbackUrl}':
        post:
          summary: Onboarding all assignments were completed
          operationId: onOnboardingAssignmentsCompletedCallback
          parameters:
            - $ref: '#/components/parameters/eventName'
            - $ref: '#/components/parameters/eventVersion'
            - $ref: '#/components/parameters/eventId'
            - $ref: '#/components/parameters/Link'
            - $ref: '#/components/parameters/smartrecruitersSignature'
            - $ref: '#/components/parameters/smartrecruitersTimestamp'
          requestBody:
            $ref: '#/components/requestBodies/OnboardingAssignmentsCompletedCallback'
          responses:
            '202':
              $ref: '#/components/responses/CallbackAccepted'
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
_id: 63529e73531509001de49942
