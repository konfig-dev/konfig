openapi: 3.0.3
info:
  title: Jobs
  description: REST API for performing operations with the Coalesce backend.
  version: '6.2'
  x-konfig-ignore:
    object-with-no-properties: true
servers:
  - description: US primary
    url: https://app.coalescesoftware.io
  - description: US primary Azure
    url: https://app.centralus.azure.coalescesoftware.io
  - description: Europe primary
    url: https://app.eu.coalescesoftware.io
  - description: Australia primary
    url: https://app.australia-southeast1.gcp.coalescesoftware.io
  - description: US AWS US East
    url: https://app.us-east-1.aws.coalescesoftware.io
  - description: US AWS US East with PrivateLink
    url: https://app.us-east-1.aws.privatelink.coalescesoftware.io
  - description: US AWS US West
    url: https://app.us-west-2.aws.coalescesoftware.io
  - description: US AWS US West with PrivateLink
    url: https://app.us-west-2.aws.privatelink.coalescesoftware.io
  - description: Canada primary
    url: https://app.northamerica-northeast1.gcp.coalescesoftware.io
  - description: US Azure West 2
    url: https://app.westus2.azure.coalescesoftware.io
  - description: US Azure East 2
    url: https://app.eastus2.azure.coalescesoftware.io
  - description: ''
    url: ''
  - description: ''
    url: ''
  - description: ''
    url: ''
tags:
  - name: Jobs
  - name: Runs
  - name: Environments
  - name: Nodes
paths:
  /api/v1/environments:
    summary: Environments
    parameters: []
    x-coa-command-group: environments
    get:
      tags:
        - Environments
      summary: List Environments
      operationId: Environments_listInformation
      security:
        - BearerAuth: []
      description: Get a collection of environment information.
      parameters:
        - description: Include the full detail of the environments.
          name: detail
          in: query
          schema:
            type: boolean
            default: false
          required: false
      responses:
        '200':
          $ref: '#/components/responses/EnvironmentsResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: EnvironmentHandlers
      x-coa-command: list
      x-stoplight:
        id: u68k9im7zkl0d
  /api/v1/environments/{environmentID}:
    summary: Environment
    parameters:
      - description: The environment ID.
        name: environmentID
        in: path
        schema:
          type: string
        required: true
    x-coa-command-group: environments
    get:
      tags:
        - Environments
      summary: Get Environment
      operationId: Environments_getInformation
      security:
        - BearerAuth: []
      description: Get information about an environment.
      responses:
        '200':
          $ref: '#/components/responses/EnvironmentResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: EnvironmentHandlers
      x-coa-command: get
      x-stoplight:
        id: hygn8miza0pdu
  /api/v1/environments/{environmentID}/nodes:
    summary: Nodes
    parameters:
      - description: The environment ID.
        name: environmentID
        in: path
        schema:
          type: string
        required: true
    x-coa-command-group: nodes
    get:
      tags:
        - Nodes
      summary: List Nodes
      operationId: Nodes_list
      security:
        - BearerAuth: []
      description: Get a collection of nodes for an environment
      parameters:
        - description: Include the full detail of the nodes.
          name: detail
          in: query
          schema:
            type: boolean
            default: false
          required: false
      responses:
        '200':
          $ref: '#/components/responses/NodesResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: NodeHandlers
      x-coa-command: list
      x-stoplight:
        id: 5llkiz1eojtwh
  /api/v1/environments/{environmentID}/nodes/{nodeID}:
    summary: Node
    parameters:
      - description: The environment ID.
        name: environmentID
        in: path
        schema:
          type: string
        required: true
      - description: The node ID.
        name: nodeID
        in: path
        schema:
          type: string
        required: true
    x-coa-command-group: nodes
    get:
      tags:
        - Nodes
      summary: Get Node
      operationId: Nodes_getInformation
      security:
        - BearerAuth: []
      description: Get information about a node in an environment.
      responses:
        '200':
          $ref: '#/components/responses/NodeResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: NodeHandlers
      x-coa-command: get
      x-stoplight:
        id: wxhox8ho8vuj9
  /api/v1/runs:
    summary: Runs
    parameters: []
    x-coa-command-group: runs
    get:
      tags:
        - Runs
      summary: List Runs
      operationId: Runs_listInformation
      security:
        - BearerAuth: []
      description: Get a collection of information about runs.
      parameters:
        - description: The maximum number of runs to return.
          name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 1000
            default: 25
          required: false
        - description: >-
            The starting run ID, runStartTime, or runEndTime (exclusive) for
            paging the query results.
          name: startingFrom
          in: query
          schema:
            oneOf:
              - type: integer
                minimum: 0
              - type: string
                format: date-time
          required: false
        - description: The field used to order results.
          name: orderBy
          in: query
          schema:
            $ref: '#/components/schemas/RunsOrderBy'
          required: false
        - $ref: '#/components/parameters/orderByDirection'
        - description: A run type to filter the query results.
          name: runType
          in: query
          schema:
            $ref: '#/components/schemas/RunType'
          required: false
        - description: A status value to filter the query results.
          name: runStatus
          in: query
          schema:
            $ref: '#/components/schemas/RunStatus'
          required: false
        - description: An environment ID to filter the query results.
          name: environmentID
          in: query
          schema:
            type: string
          required: false
        - description: Include the full detail of the run.
          name: detail
          in: query
          schema:
            type: boolean
            default: false
          required: false
      responses:
        '200':
          $ref: '#/components/responses/RunsResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: RunHandlers
      x-coa-command: list
      x-stoplight:
        id: oviyqsx5z9skc
  /api/v1/runs/{runID}:
    summary: Run
    parameters: []
    x-coa-command-group: runs
    get:
      tags:
        - Runs
      summary: Get Run
      operationId: Runs_getRunDetails
      security:
        - BearerAuth: []
      description: Gets a single run.
      parameters:
        - description: The run ID.
          name: runID
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/RunResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: RunHandlers
      x-coa-command: get
      x-stoplight:
        id: ppqfvu27yj48y
  /api/v1/runs/{runID}/results:
    summary: Run Results
    parameters: []
    x-coa-command-group: runs
    get:
      tags:
        - Runs
      summary: List Run Results
      operationId: Runs_listResults
      security:
        - BearerAuth: []
      description: Get a collection of the results of a deploy or refresh run
      parameters:
        - description: The run ID.
          name: runID
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/RunResultsResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
      x-eov-operation-handler: RunHandlers
      x-coa-command: list-results
      x-stoplight:
        id: gu371uarf1aoq
  /scheduler/startRun:
    post:
      tags:
        - Jobs
      summary: Trigger Job to Run
      operationId: Jobs_initiateRun
      description: >-
        Querying this endpoint will initiate a new run to refresh your data
        warehouse based on your specified details.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobsInitiateRunRequest'
      responses:
        '200':
          description: '200'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n\t\"runCounter\": 1\n}"
              schema:
                $ref: '#/components/schemas/JobsInitiateRunResponse'
        '400':
          description: '400'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"400: Error Message\",\n    \"errorDetail\":\"400: Error Message\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsInitiateRun400Response'
        '401':
          description: '401'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"401: Unable to authenticate, please ensure your token is valid.\",\n    \"errorDetail\":\"401: Unable to authenticate, please ensure your token is valid.\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsInitiateRun401Response'
      deprecated: false
  /scheduler/runStatus:
    get:
      tags:
        - Jobs
      summary: Get Job Status
      operationId: Jobs_getStatusUpdates
      description: >-
        Querying this endpoint will allow you to receive updates on the current
        status of a specific run.
      parameters:
        - description: ID of the run to query
          name: runCounter
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: '200'
          content:
            application/json:
              examples:
                Result:
                  value: |-
                    {
                      "runStatus": "completed",
                      "runType": "deploy",
                      "runLink": "https://app.coalescesoftware.io/runs/1"
                    }
              schema:
                $ref: '#/components/schemas/JobsGetStatusUpdatesResponse'
        '400':
          description: '400'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"400: Error Message\",\n    \"errorDetail\":\"400: Error Message\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsGetStatusUpdates400Response'
        '401':
          description: '401'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"401: Unable to authenticate, please ensure your token is valid.\",\n    \"errorDetail\":\"401: Unable to authenticate, please ensure your token is valid.\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsGetStatusUpdates401Response'
      deprecated: false
  /scheduler/rerun:
    post:
      tags:
        - Jobs
      summary: Trigger Job to Re-Run
      operationId: Jobs_triggerRerun
      description: >-
        Querying this endpoint will initiate a new run to refresh your data
        warehouse based on your specified details.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobsTriggerRerunRequest'
      responses:
        '200':
          description: '200'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n\t\"runCounter\": 1\n}"
              schema:
                $ref: '#/components/schemas/JobsTriggerRerunResponse'
        '400':
          description: '400'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"400: Error Message\",\n    \"errorDetail\":\"400: Error Message\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsTriggerRerun400Response'
        '401':
          description: '401'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"401: Unable to authenticate, please ensure your token is valid.\",\n    \"errorDetail\":\"401: Unable to authenticate, please ensure your token is valid.\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsTriggerRerun401Response'
      deprecated: false
  /scheduler/cancelRun:
    post:
      tags:
        - Jobs
      summary: Cancel Running Job
      operationId: Jobs_cancelJobRun
      description: Querying this endpoint will cancel a currently running job.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobsCancelJobRunRequest'
      responses:
        '204':
          description: '204'
          content:
            application/json:
              examples:
                Result:
                  value: ''
              schema:
                $ref: '#/components/schemas/JobsCancelJobRunResponse'
        '400':
          description: '400'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"400: Error Message\",\n    \"errorDetail\":\"400: Error Message\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsCancelJobRun400Response'
        '401':
          description: '401'
          content:
            application/json:
              examples:
                Result:
                  value: "{\n  \"error\":{\n    \"errorString\":\"401: Unable to authenticate, please ensure your token is valid.\",\n    \"errorDetail\":\"401: Unable to authenticate, please ensure your token is valid.\"\n\t}\n}"
              schema:
                $ref: '#/components/schemas/JobsCancelJobRun401Response'
      deprecated: false
components:
  parameters:
    orderByDirection:
      description: The sort order for query results.
      name: orderByDirection
      in: query
      schema:
        description: The sort order for query results.
        type: string
        enum:
          - asc
          - desc
        default: desc
      required: false
    context:
      description: Contextual information required to identify a particular secret.
      name: context
      in: path
      schema:
        type: string
      required: true
  responses:
    EnvironmentResponse:
      description: Information about an environment.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseEnvironment'
    EnvironmentsResponse:
      description: A collection of environment information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EnvironmentsResponse'
    NodeResponse:
      description: A node for an environment.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Node'
    NodesResponse:
      description: A collection of nodes for an environment.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NodesResponse'
    AllRegistryPackagesResult:
      description: A list of all packages in the registry.
      content:
        application/json:
          schema:
            type: array
            minItems: 0
            items:
              $ref: '#/components/schemas/RegistryPackageResult'
    AllRegistryPackageReleasesResult:
      description: A list of all releases for a single package in the registry.
      content:
        application/json:
          schema:
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/RegistryPackageReleaseResult'
    RegistryPackageResult:
      description: A single package in the registry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistryPackageResult'
    RegistryPackageReleaseResult:
      description: A single release for a single package in the registry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistryPackageReleaseResult'
    RunResultsResponse:
      description: A collection of results for a deploy or refresh run.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunResultsResponse'
    RunResponse:
      description: A single run.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunInfo'
    RunsResponse:
      description: A collection of runs.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunsResponse'
    AlreadyExistsError:
      description: The requested resource already exists.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadGatewayError:
      description: The server received an error from an upstream system.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: The client is not permitted to perform the requested operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    GatewayTimeoutError:
      description: The server did not receive a response in time from an upstream system.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: >-
        The server encountered an unexpected condition that prevented it from
        fulfilling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InvalidRequestError:
      description: The request was invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailableError:
      description: The service is currently unavailable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: User lacks authorization to perform this action.
  schemas:
    EnvironmentsResponse:
      type: object
      required:
        - data
      properties:
        data:
          description: A collection of environment information.
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/EnvironmentSummary'
            - type: array
              items:
                $ref: '#/components/schemas/BaseEnvironment'
      x-stoplight:
        id: ne4aq64ww9ksj
    EnvironmentSummary:
      description: Summary information about an environment.
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/UserSummary'
        id:
          type: string
        name:
          type: string
        project:
          type: string
        status:
          $ref: '#/components/schemas/EnvironmentHealth'
      required:
        - createdAt
        - id
        - name
        - status
      x-stoplight:
        id: ddbdk55qjfvv2
    ErrorResponse:
      description: Error detail in addition to the HTTP status code and text.
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
      x-stoplight:
        id: eiss0cql5hx9s
    NodesResponse:
      type: object
      required:
        - data
      properties:
        data:
          description: A collection of nodes for an environment.
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/NodeSummary'
            - type: array
              items:
                $ref: '#/components/schemas/Node'
      x-stoplight:
        id: tg30vf6vna32u
    NodeSummary:
      type: object
      properties:
        database:
          type: string
        id:
          type: string
        locationName:
          type: string
        name:
          type: string
        nodeType:
          $ref: '#/components/schemas/NodeType'
        schema:
          type: string
      required:
        - database
        - id
        - locationName
        - name
        - nodeType
        - schema
      x-stoplight:
        id: 0voguv2vr9klq
    OrderByDirection:
      description: The sort order for query results.
      type: string
      enum:
        - asc
        - desc
      x-stoplight:
        id: cepn66enrwq1k
    PackageUpdateReleaseInfo:
      description: Package release information for an update operation.
      type: object
      properties:
        version:
          type: string
        changeLog:
          type: string
        releaseID:
          type: string
      required:
        - changeLog
        - version
        - releaseID
      x-stoplight:
        id: 0jg8jz64rnwfr
    RunsOrderBy:
      description: The field used to sort query results.
      type: string
      enum:
        - id
        - runStartTime
        - runEndTime
      default: id
      x-stoplight:
        id: mc8gx91umiyst
    RunsResponse:
      description: A collection of runs.
      type: object
      required:
        - limit
        - orderBy
        - orderByDirection
        - data
      properties:
        limit:
          description: The maximum number of runs returned by this query.
          type: integer
        orderByDirection:
          $ref: '#/components/schemas/OrderByDirection'
        orderBy:
          $ref: '#/components/schemas/RunsOrderBy'
        data:
          description: A collection of runs.
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/RunSummary'
            - type: array
              items:
                $ref: '#/components/schemas/RunInfo'
      x-stoplight:
        id: xjykt2444rh45
    RunResultsResponse:
      type: object
      required:
        - data
      properties:
        data:
          description: A collection of run results.
          type: array
          items:
            $ref: '#/components/schemas/RunResult'
      x-stoplight:
        id: aayfisqrmg55o
    RunSummary:
      type: object
      properties:
        id:
          description: The run ID.
          type: integer
        reRunID:
          description: If this is a re-run, the ID of the original operation.
          type: string
        runStartTime:
          description: The datetime at which the run started.
          type: string
          format: date-time
        runEndTime:
          description: The datetime at which the run ended.
          type: string
          format: date-time
        runType:
          $ref: '#/components/schemas/RunType'
        runStatus:
          $ref: '#/components/schemas/RunStatus'
        environmentID:
          description: The environment in which the run operation was applied.
          type: string
        runFailureReason:
          description: Information about the cause of a run failure.
          type: string
      required:
        - id
        - runType
        - runStatus
      x-stoplight:
        id: g1ihfbn7bj3k1
    BaseEnvironment:
      description: >-
        An environment is used for deploying your data pipeline to
        non-development Snowflake environments.
      type: object
      additionalProperties: true
      properties:
        description:
          type: string
        connectionAccount:
          type: string
        defaultStorageMapping:
          type: string
        name:
          type: string
        oauthEnabled:
          type: boolean
        runTimeParameters:
          type: object
          additionalProperties: true
        tagColors:
          $ref: '#/components/schemas/TagColor'
        project:
          type: string
      x-stoplight:
        id: bbclg1cqssbvt
    EnvironmentHealth:
      type: string
      enum:
        - Deleting
        - Deploying
        - Failed Deploy
        - Failed Dev Run
        - Failed Refresh
        - Initializing
        - Refreshing
        - Running Dev Run
        - Waiting
      x-stoplight:
        id: ussqe9xeeldre
    EnvironmentStorageLocationMappings:
      type: object
      additionalProperties:
        type: object
        properties:
          database:
            type: string
          schema:
            type: string
      x-stoplight:
        id: farmsxc7c9jvd
    TagColor:
      type: object
      properties:
        backgroundColor:
          type: string
        textColor:
          type: string
      x-stoplight:
        id: g7k2doxf183ac
    UserSummary:
      description: Summary information about a user.
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      required:
        - id
      x-stoplight:
        id: ytjzmpmde7x4a
    Error:
      type: object
      properties:
        errorString:
          description: The error message.
          type: string
        errorDetail:
          description: Additional detail about the error.
          type: string
      required:
        - errorString
      x-stoplight:
        id: c5p3j5v9amkcr
    Node:
      type: object
      oneOf:
        - $ref: '#/components/schemas/BaseNode'
        - $ref: '#/components/schemas/BaseNode'
      discriminator:
        propertyName: type
        mapping:
          sourceInput: '#/components/schemas/SourceNode'
          sql: '#/components/schemas/SQLNode'
      x-stoplight:
        id: j3qi1v7scd65v
    AliasToStepIDMapping:
      type: object
      additionalProperties:
        type: string
      x-stoplight:
        id: 4d160iqnp8jea
    AppliedColumnTests:
      type: object
      additionalProperties:
        type: boolean
      x-stoplight:
        id: s32weudd7qqrb
    BaseNode:
      type: object
      additionalProperties: true
      properties:
        description:
          type: string
        database:
          type: string
        id:
          type: string
        locationName:
          type: string
        name:
          type: string
        nodeType:
          $ref: '#/components/schemas/NodeType'
        schema:
          type: string
      required:
        - database
        - description
        - id
        - locationName
        - name
        - nodeType
        - schema
      x-stoplight:
        id: e8tkek45knwy2
    ColumnMetadata:
      type: object
      properties:
        description:
          type: string
        appliedColumnTests:
          $ref: '#/components/schemas/AppliedColumnTests'
        columnID:
          type: string
        columnReferences:
          items:
            $ref: '#/components/schemas/IntermediateColumnRefResult'
          type: array
        config:
          type: object
          additionalProperties: true
        dataType:
          type: string
        defaultValue:
          type: string
        hashDetails:
          $ref: '#/components/schemas/HashMetadata'
        hashedColumns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnReference'
        isBusinessKey:
          description: Tags the column as a business key.
          type: boolean
        isChangeTracking:
          description: Tags the column as a change tracking column in type 2 dimensions.
          type: boolean
        isSurrogateKey:
          description: Tags the column as a surrogate key, e.g. DIM_CUSTOMER_KEY.
          type: boolean
        keyColumnType:
          type: string
          enum:
            - None
            - primaryBusinessKey
            - surrogateKey
        name:
          type: string
        nullable:
          type: boolean
        primaryKey:
          description: Tags the column as a primary key.
          type: boolean
        sources:
          items:
            $ref: '#/components/schemas/SourceColumnReference'
          type: array
        systemColumnType:
          type: string
          enum:
            - None
            - sysCreateDate
            - sysCurrentFlag
            - sysEndDate
            - sysStartDate
            - sysUpdateDate
            - sysVersion
        transform:
          type: string
        uniqueKey:
          type: boolean
      required:
        - columnID
        - dataType
        - description
        - name
        - nullable
      x-stoplight:
        id: n2i4erkb36jwl
    ColumnReference:
      type: object
      properties:
        columnID:
          type: string
        nodeID:
          type: string
      required:
        - columnID
        - nodeID
      x-stoplight:
        id: tshyzyicycn30
    CustomSQL:
      type: object
      properties:
        customSQL:
          type: string
      required:
        - customSQL
      x-stoplight:
        id: 104a5ghrn4v1h
    HashAlgorithm:
      type: string
      enum:
        - MD5
        - SHA1
        - SHA256
      x-stoplight:
        id: wv54zkq1b14cf
    HashMetadata:
      type: object
      properties:
        hashAlgorithm:
          $ref: '#/components/schemas/HashAlgorithm'
        hashType:
          enum:
            - ChangeHash
            - Hash
            - HubHash
            - LinkHash
            - None
          type: string
        hubHashes:
          items:
            $ref: '#/components/schemas/ColumnReference'
          type: array
      required:
        - hashAlgorithm
      x-stoplight:
        id: 8y7sovb0wqnm5
    IntermediateColumnRefResult:
      properties:
        columnName:
          type: string
        tableName:
          type: string
          nullable: true
      required:
        - columnName
        - tableName
      type: object
      x-stoplight:
        id: lr3exusbf58gz
    JoinCondition:
      type: object
      properties:
        joinCondition:
          type: string
      required:
        - joinCondition
      x-stoplight:
        id: wgrl4cwooziys
    NodeType:
      anyOf:
        - type: string
          enum:
            - Dimension
            - Fact
            - Hub
            - Link
            - Satellite
            - Source
            - Stage
            - View
            - persistentStage
        - type: string
      x-stoplight:
        id: uyf0w25nmrtne
    RefLink:
      type: object
      properties:
        locationName:
          type: string
        nodeName:
          type: string
      required:
        - locationName
        - nodeName
      x-stoplight:
        id: andnckup0n6qq
    SourceColumnReference:
      anyOf:
        - $ref: '#/components/schemas/SourceColumnReferenceV1'
        - $ref: '#/components/schemas/SourceColumnReferenceV2'
      x-stoplight:
        id: fzbz324xij4fj
    SourceColumnReferenceV1:
      type: object
      properties:
        columnReferences:
          items:
            $ref: '#/components/schemas/ColumnReference'
          type: array
        transform:
          type: string
      required:
        - columnReferences
        - transform
      x-stoplight:
        id: nwfin50nl4n4g
    SourceColumnReferenceV2:
      type: object
      properties:
        transform:
          type: string
      required:
        - transform
      x-stoplight:
        id: s6t68pjz2z2uw
    SourceMap:
      properties:
        aliases:
          $ref: '#/components/schemas/AliasToStepIDMapping'
        customSQL:
          $ref: '#/components/schemas/CustomSQL'
        dependencies:
          items:
            $ref: '#/components/schemas/RefLink'
          type: array
        join:
          $ref: '#/components/schemas/JoinCondition'
        name:
          type: string
        noLinkRefs:
          items:
            $ref: '#/components/schemas/RefLink'
          type: array
      required:
        - dependencies
        - join
        - name
        - noLinkRefs
      type: object
      x-stoplight:
        id: xoo0n9wmpkbbi
    RunStatus:
      enum:
        - canceled
        - completed
        - failed
        - running
        - waitingToRun
      type: string
      x-stoplight:
        id: 089jucc8uvad5
    RunType:
      enum:
        - deploy
        - refresh
      type: string
      x-stoplight:
        id: hwi2of8gq5x48
    UserConnectionType:
      type: string
      enum:
        - Basic
        - Cloud
        - KeyPair
        - OAuth
      x-stoplight:
        id: nvknmyzrvz1ip
    DeployRunDetails:
      type: object
      properties:
        canceled:
          type: boolean
        deployCommit:
          type: string
        deployCommitMessage:
          type: string
        environmentID:
          type: string
        parallelism:
          type: integer
        nodesInRun:
          type: integer
      required:
        - deployCommit
        - environmentID
      x-stoplight:
        id: iadm5l12bqo72
    RefreshRunDetails:
      type: object
      properties:
        canceled:
          type: boolean
        environmentID:
          type: string
        excludeNodesSelector:
          type: string
        forceIgnoreEnvironmentStatus:
          type: boolean
        includeNodesSelector:
          type: string
        jobID:
          type: integer
        parallelism:
          type: integer
        refreshDescription:
          type: string
        nodesForRefresh:
          type: integer
        nodesInRun:
          type: integer
      required:
        - environmentID
      x-stoplight:
        id: ss4lau0fw2u2w
    RunDetails:
      description: Detailed information about a run.
      anyOf:
        - $ref: '#/components/schemas/DeployRunDetails'
        - $ref: '#/components/schemas/RefreshRunDetails'
      x-stoplight:
        id: qdyoxpslp2j5e
    RunInfo:
      description: The full details of a run, without the run results.
      type: object
      properties:
        version:
          type: integer
        id:
          type: integer
        reRunID:
          type: string
        runDetails:
          $ref: '#/components/schemas/RunDetails'
        runEndTime:
          format: date-time
          type: string
        runHistory:
          items:
            type: integer
          type: array
        runStartTime:
          format: date-time
          type: string
        runStatus:
          $ref: '#/components/schemas/RunStatus'
        runTimeParameters:
          type: object
          additionalProperties: true
        runType:
          $ref: '#/components/schemas/RunType'
        userCredentials:
          $ref: '#/components/schemas/SnowflakeUserCredentials'
        userID:
          type: string
      required:
        - id
        - runDetails
        - runStatus
        - runTimeParameters
        - runType
      x-stoplight:
        id: x7i4v27naz0ag
    SnowflakeUserCredentials:
      description: Information about the Snowflake account used to perform a run.
      type: object
      properties:
        snowflakeAccount:
          type: string
        snowflakeAuthType:
          $ref: '#/components/schemas/UserConnectionType'
        snowflakeRole:
          type: string
        snowflakeUsername:
          type: string
        snowflakeWarehouse:
          type: string
      required:
        - snowflakeAccount
        - snowflakeAuthType
        - snowflakeUsername
      x-stoplight:
        id: ecaz5hx06vzn9
    QueryResult:
      type: object
      properties:
        endTime:
          type: string
          format: date-time
        error:
          $ref: '#/components/schemas/Error'
        isRunning:
          type: boolean
        name:
          type: string
        queryID:
          type: string
        rowsDeleted:
          type: integer
        rowsInserted:
          type: integer
        rowsUpdated:
          type: integer
        sql:
          type: string
        startTime:
          type: string
          format: date-time
        status:
          type: string
        success:
          type: boolean
        warehouse:
          type: string
      required:
        - isRunning
        - name
        - sql
        - status
        - success
      x-stoplight:
        id: oxpnw4c9i1g5w
    RunResult:
      description: The result output describing each query processed during a run.
      type: object
      properties:
        isRunning:
          type: boolean
        name:
          type: string
        nodeID:
          type: string
        queryResults:
          items:
            $ref: '#/components/schemas/QueryResult'
          type: array
        renderQueryResult:
          $ref: '#/components/schemas/QueryResult'
      required:
        - isRunning
        - name
        - nodeID
        - queryResults
      x-stoplight:
        id: g59x96mbnn22t
    RegistryPackageReleaseResult:
      description: A single release of a package in the registry.
      type: object
      properties:
        version:
          type: string
        createdBy:
          type: string
        createdAt:
          type: object
          properties:
            nanoseconds:
              type: number
            seconds:
              type: number
          required:
            - nanoseconds
            - seconds
        updatedBy:
          type: string
        updatedAt:
          type: object
          properties:
            nanoseconds:
              type: number
            seconds:
              type: number
          required:
            - nanoseconds
            - seconds
        changeLog:
          type: string
        packageID:
          type: string
        releaseID:
          type: string
        storagePath:
          type: string
      required:
        - version
        - changeLog
        - packageID
        - releaseID
        - storagePath
        - createdBy
        - createdAt
      x-stoplight:
        id: 82hhwwn7c84n2
    RegistryPackageResult:
      description: A single package in the registry.
      type: object
      properties:
        description:
          type: string
        updatedBy:
          type: string
        updatedAt:
          type: object
          properties:
            nanoseconds:
              type: number
            seconds:
              type: number
          required:
            - nanoseconds
            - seconds
        name:
          type: string
        org:
          type: string
        latestRelease:
          type: string
        id:
          type: string
        publicReleases:
          type: array
          minItems: 0
          items:
            type: string
      required:
        - name
        - description
        - org
        - latestRelease
        - id
        - publicReleases
      x-stoplight:
        id: afpzerv8fqiv8
    SourceColumnMetadata:
      type: object
      properties:
        columns:
          items:
            $ref: '#/components/schemas/ColumnMetadata'
          type: array
        join:
          type: object
          properties:
            joinCondition:
              type: string
          required:
            - joinCondition
        sourceMapping:
          type: array
          items:
            $ref: '#/components/schemas/SourceMap'
      required:
        - columns
      x-stoplight:
        id: y5rxmi96nyjd8
    MaterializationType:
      type: string
      enum:
        - table
        - view
      x-stoplight:
        id: ttvc7sdecqe8r
    NodeTest:
      type: object
      properties:
        description:
          type: string
        continueOnFailure:
          type: boolean
        name:
          type: string
        runOrder:
          $ref: '#/components/schemas/TestRunOrder'
        templateString:
          type: string
      required:
        - continueOnFailure
        - description
        - name
        - runOrder
        - templateString
      x-stoplight:
        id: w7ec9phk1cmdg
    SQLNodeMetadata:
      type: object
      properties:
        description:
          type: string
        appliedNodeTests:
          default: []
          items:
            $ref: '#/components/schemas/NodeTest'
          type: array
        columns:
          default: []
          items:
            $ref: '#/components/schemas/ColumnMetadata'
          type: array
        cteString:
          type: string
        destinationName:
          type: string
        enabledColumnTestIDs:
          type: array
          items:
            type: string
        mapping:
          type: object
          additionalProperties:
            anyOf:
              - type: object
              - type: string
              - type: number
              - type: boolean
        materializationOption:
          type: string
        sourceMapping:
          type: array
          items:
            $ref: '#/components/schemas/SourceMap'
      required:
        - appliedNodeTests
        - columns
        - enabledColumnTestIDs
        - sourceMapping
      x-stoplight:
        id: yczbli61y53t2
    TestRunOrder:
      type: string
      enum:
        - After
        - Before
      x-stoplight:
        id: lufm0q85jqkqd
    UserConfig:
      type: object
      additionalProperties:
        anyOf:
          - type: object
          - type: string
          - type: number
          - type: boolean
      x-stoplight:
        id: hka00l7t8bhqh
    JobsInitiateRunRequest:
      type: object
      required:
        - runDetails
      properties:
        parameters:
          description: Contains parameters to be used in the Refresh
          type: string
          format: json
        runDetails:
          description: >-
            Object containing the necessary target details required to
            successfully start a refresh.
          type: object
          required:
            - environmentID
          properties:
            environmentID:
              description: The environment being refreshed
              type: string
            includeNodesSelector:
              description: Nodes included for an ad-hoc job
              type: string
            excludeNodesSelector:
              description: Nodes excluded for an ad-hoc job.
              type: string
            jobID:
              description: The ID of a job being run.
              type: string
            parallelism:
              description: Maximum number of parallel nodes to run.
              type: integer
              default: 16
              format: int32
            forceIgnoreWorkspaceStatus:
              description: >-
                Allows refreshing an environment even if the last deployment on
                that environment failed. Use with caution as this can put your
                environment into an even worse state.
              type: boolean
        userCredentials:
          description: >-
            userCredentials contains connection credentials for connecting to
            Snowflake. Currently only basic auth (username/password) may be
            specified. If however, an OAuth connection has been established for
            the given environment specified in runDetails.environmentID, you may
            omit userCredentials. In that case, Coalesce will use the OAuth
            connection to connect with Snowflake.
          type: object
          properties:
            snowflakeUsername:
              description: >-
                Snowflake Account Username. Required when snowflakeAuthType is
                Basic
              type: string
            snowflakePassword:
              description: >-
                Snowflake Account password. Required when snowflakeAuthType is
                Basic
              type: string
            snowflakeKeyPairKey:
              description: >-
                The PEM-encoded private key to use when authenticating to
                Snowflake. Required when using the KeyPair authentication type.
                Newlines must be encoded as "\n" within the request.
              type: string
            snowflakeKeyPairPass:
              description: >-
                The password to use to decrypt the private key. This is only
                applicable when the authentication type is KeyPair and the
                private key is encrypted.
              type: string
            snowflakeWarehouse:
              description: Snowflake compute warehouse
              type: string
            snowflakeRole:
              description: Snowflake user role
              type: string
            snowflakeAuthType:
              description: 'Options: Basic | KeyPair | OAuth'
              type: string
              default: Basic
    JobsTriggerRerunRequest:
      type: object
      required:
        - runDetails
        - userCredentials
      properties:
        parameters:
          description: Contains parameters to be used in the Refresh
          type: string
          format: json
        runDetails:
          description: Contains the runID to be re-run.
          type: object
          required:
            - runID
          properties:
            runID:
              description: The number of the run you want to be retried.
              type: string
            forceIgnoreWorkspaceStatus:
              description: >-
                Allows refreshing an environment even if the last deployment on
                that environment failed. Use with caution as this can put your
                environment into an even worse state.
              type: boolean
        userCredentials:
          description: >-
            userCredentials contains connection credentials for connecting to
            Snowflake. Currently only basic auth (username/password) may be
            specified. If however, an OAuth connection has been established for
            the given environment specified in runDetails.environmentID, you may
            ommit userCredentials. In that case, Coalesce will use the OAuth
            connection to connect with Snowflake.
          type: object
          properties:
            snowflakeUsername:
              description: >-
                Snowflake Account Username. Required when snowflakeAuthType is
                Basic
              type: string
            snowflakePassword:
              description: >-
                Snowflake Account password. Required when snowflakeAuthType is
                Basic
              type: string
            snowflakeKeyPairKey:
              description: >-
                The PEM-encoded private key to use when authenticating to
                Snowflake. Required when using the KeyPair authentication type.
                Newlines must be encoded as "\n" within the request.
              type: string
            snowflakeKeyPairPass:
              description: >-
                The password to use to decrypt the private key. This is only
                applicable when the authentication type is KeyPair and the
                private key is encrypted.
              type: string
            snowflakeWarehouse:
              description: Snowflake compute warehouse
              type: string
            snowflakeRole:
              description: Snowflake user role
              type: string
            snowflakeAuthType:
              description: 'Options: Basic | KeyPair | OAuth'
              type: string
              default: Basic
    JobsCancelJobRunRequest:
      type: object
      required:
        - runID
      properties:
        runID:
          description: The ID of the run the user would like to cancel.
          type: integer
          format: int32
        orgID:
          description: The organization's ID of the run the user would like to cancel.
          type: string
        environmentID:
          description: The environment ID of the run the user would like to cancel.
          type: string
    JobsInitiateRunResponse:
      type: object
      properties:
        runCounter:
          type: integer
          example: 1
          default: 0
    JobsInitiateRun400Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '400: Error Message'
            errorDetail:
              type: string
              example: '400: Error Message'
    JobsInitiateRun401Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
            errorDetail:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
    JobsGetStatusUpdatesResponse:
      type: object
      properties:
        runStatus:
          type: string
          enum:
            - completed
            - initializing
            - rendering
            - canceled
            - failed
            - running
            - waitingToRun
        runType:
          type: string
          enum:
            - deploy
            - refresh
        runLink:
          type: string
          example: https://app.coalescesoftware.io/runs/1
    JobsGetStatusUpdates400Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '400: Error Message'
            errorDetail:
              type: string
              example: '400: Error Message'
    JobsGetStatusUpdates401Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
            errorDetail:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
    JobsTriggerRerunResponse:
      type: object
      properties:
        runCounter:
          type: integer
          example: 1
          default: 0
    JobsTriggerRerun400Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '400: Error Message'
            errorDetail:
              type: string
              example: '400: Error Message'
    JobsTriggerRerun401Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
            errorDetail:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
    JobsCancelJobRunResponse:
      type: string
      example: ''
    JobsCancelJobRun400Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '400: Error Message'
            errorDetail:
              type: string
              example: '400: Error Message'
    JobsCancelJobRun401Response:
      type: object
      properties:
        error:
          type: object
          properties:
            errorString:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
            errorDetail:
              type: string
              example: '401: Unable to authenticate, please ensure your token is valid.'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    sec0:
      type: apiKey
      in: header
      name: Authorization
      x-bearer-format: bearer
      x-default: ''
security:
  - sec0: []
x-stoplight:
  id: 3j6pll0jo9ds5
x-readme:
  explorer-enabled: false
  proxy-enabled: false
  samples-enabled: true
  headers: []
_id: 661e86b77399e9003c4ce17b
