openapi: 3.0.0
info:
  title: Kenjo API
  description: >-
    Before starting to use the Kenjo API, you have to request the API activation
    for a sandbox or production environment to the Kenjo Customer Success team.
    After that, an admin user has to go to *Settings > Integrations > API keys*,
    to generate the **API Key**. Follow the steps described in the
    **Autentication section** of this document. <br>The API key is needed to
    request the bearer token. Each endpoint callout requires a valid bearer
    token in the Authorization header. Once the token is retrieved, it will be
    useful during the time limit indicated by the 'expiration date'.
  version: 1.0.0
  termsOfService: https://www.kenjo.io/legal/terms-and-conditions
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - description: Sandbox environment
    url: https://sandbox-api.kenjo.io/api/v1
  - description: Production environment
    url: https://api.kenjo.io/api/v1
tags:
  - description: Operations to manage employees in Kenjo.
    name: Employees
  - description: Operations to manage attendance entries related to employees.
    name: Attendance
  - description: Operations to manage offices in Kenjo.
    name: Offices
  - description: Operations to manage departments in Kenjo.
    name: Departments
  - description: Operations to manage teams in Kenjo.
    name: Teams
  - description: Operations to manage areas in Kenjo.
    name: Areas
  - description: >-
      Operations to manage employments, salaries and additional payments in
      Kenjo.
    name: Compensation
  - description: Operations to manage time off types, policies and requests in Kenjo.
    name: Time off
  - description: Operations to login and logout.
    name: Authentication
  - description: Operations to list calendars in Kenjo.
    name: Calendars
  - description: Operations to list the existing employees in Kenjo.
    name: User accounts
  - description: Operations to list companies in Kenjo.
    name: Companies
  - description: Operations to manage custom fields in Kenjo.
    name: Custom fields
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in an API token.
      operationId: Authentication_createBearerToken
      description: Create a bearer token to allow connecting the API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationCreateBearerTokenRequest'
            example:
              apiKey: 5b8555a77b62b223d27593bcd15e172c2936590391fe4dea8e31f9b9
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationCreateBearerTokenResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out an API token.
      operationId: Authentication_invalidateToken
      description: Invalidates a Bearer token.
      responses:
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /attendances/{attendanceId}:
    get:
      tags:
        - Attendance
      summary: Return an attendance for a given attendance id.
      operationId: Attendance_getById
      description: >-
        This endpoint returns one attendance entry specified by 
        **attendanceId**.
      parameters:
        - description: The _id of the attendance entry to request.
          in: path
          name: attendanceId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceGetByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    put:
      tags:
        - Attendance
      summary: Update an attendance for a given attendance id.
      operationId: Attendance_updateEntry
      description: >-
        This endpoint updates the attendance entry specified by
        **attendanceId**. Only the fields submitted in the body will be updated.
      parameters:
        - description: The _id of the attendance entry to update.
          in: path
          name: attendanceId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceUpdateEntryRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceUpdateEntryResponse'
              example:
                _id: 60a2db290da29e126a187891
                userId: 50a2db290da29e126a18789a
                email: john@acme.io
                externalId: '00001'
                date: '2021-07-01'
                startTime: '10:00:00'
                endTime: '13:00:00'
                breaks:
                  - start: '10:00:00'
                    end: '10:30:00'
                breakTime: 30
                comment: Morning working attendance tracking.
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    delete:
      tags:
        - Attendance
      summary: Delete an attendance for a given attendance id.
      operationId: Attendance_removeById
      description: This endpoint delete the attendance entry specified by **attendanceId**.
      parameters:
        - description: The Kenjo _id of the attendance entry to remove.
          in: path
          name: attendanceId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /attendances:
    get:
      tags:
        - Attendance
      summary: Return a list of attendances.
      operationId: Attendance_getList
      description: >-
        This endpoint returns an array of objects with all the existing
        attendance entries within Kenjo for a maximum of 31 days, defined by the
        required params **from** and **to**. Every object contains an attendance
        entry.
      parameters:
        - description: A date in format YYYY-MM-DD to indicate the starting point.
          in: query
          name: from
          required: true
          schema:
            type: string
            example: '2021-02-01'
        - description: A date in format YYYY-MM-DD to indicate the ending point.
          in: query
          name: to
          required: true
          schema:
            type: string
            example: '2021-02-04'
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    post:
      tags:
        - Attendance
      summary: Create a new attendance.
      operationId: Attendance_createEntry
      description: >-
        This endpoint creates an attendance entry for a one employee, so an user
        *identifier* is required to build this relationship. The following
        *identifiers* are the valid ones: **userId**, **email** or
        **externalId**. Also one **startTime** and one **date** are
        required.<br>The new entry will have an unique identifier **_id**. This
        value is returned in the body response.<br><br> A day accepts many
        attendance entries per employee but they cannot be overlapped. It means
        that if, for example, *there is an entry the 2021-06-10 between 09:00
        and 10:00 for the user E-111, then the creation of an new entry for
        E-111 in the 2021-06-10 whose startDate or endDate is between 09:00 and
        10:00 will become a BAD REQUEST*.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceCreateEntryRequest'
            example:
              userId: 50a2db290da29e126a18789a
              email: john@acme.io
              externalId: '00001'
              date: '2021-07-01'
              startTime: '10:00:00'
              endTime: '13:00:00'
              breaks:
                - start: '10:00:00'
                  end: '10:30:00'
              comment: Morning working attendance tracking.
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceCreateEntryResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /attendances/track-time:
    post:
      tags:
        - Attendance
      summary: Track an attendance entry.
      operationId: Attendance_createTrackTime
      description: >-
        This endpoint tracks time only providing the following information:
        **employee identifier** and a **date time**. The following identifiers
        are the valid ones: **userId**, **email** or **externalId**, only one of
        them is required. This action abstracts and simplifies the entries
        tracking, ensuring internally the order and transforming each track
        action to a Kenjo user attendance format.<br><br>Example: Three calls
        for the employee E-111 to the */track-time* endpoint contains the
        following data:<br>T1: 2021-01-01T08:00:00<br>T2:
        2021-01-01T09:00:00<br>T3: 2021-01-01T10:00:00<br>The three calls order
        is T1, T2, T3.<br><br>Then in Kenjo there will be 2 attendance
        pairs:<br>1: 08:00 / 09:00<br>2: 10:00 / --:--<br>The second pair is
        open, with no **endTime** info, until a new one comes. <br><br>If there
        is a new track: 2021-01-01T12:00:00, then the result will be:<br>1:
        08:00 / 09:00<br>2: 10:00 / 12:00<br>If the track is 2021-01-01T07:00:00
        instead, then the previous tracks are reordered to be consistent with
        concept of attendance pairs:<br>1: 07:00 / 08:00<br>2: 09:00 / 10:00
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceCreateTrackTimeRequest'
            example:
              userId: 50a2db290da29e126a18789a
              email: john@acme.io
              externalId: '00001'
              dateTime: '2021-07-01T09:00:00'
      responses:
        '201':
          description: CREATED. The returned body matches with the input body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceCreateTrackTimeResponse'
              example:
                userId: 50a2db290da29e126a18789a
                email: john@acme.io
                externalId: '00001'
                dateTime: '2021-07-01T09:00:00'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /attendances/categories:
    get:
      tags:
        - Attendance
      summary: Return a list of attendance categories.
      operationId: Attendance_getCategories
      description: >-
        This endpoint returns an array of objects. Every object contains an
        attendance category.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceGetCategoriesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /attendances/expected-time:
    get:
      tags:
        - Attendance
      summary: Return a list of expected times.
      operationId: Attendance_getExpectedTimeByUser
      description: >-
        This endpoint returns a paginated list of expected time by user for a
        given date range.
      parameters:
        - description: A date in format YYYY-MM-DD to indicate the starting point.
          in: query
          name: from
          required: true
          schema:
            type: string
            example: '2020-01-01'
        - description: A date in format YYYY-MM-DD to indicate the ending point.
          in: query
          name: to
          required: true
          schema:
            type: string
            example: '2020-01-10'
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: Optional filter. The company id of the Kenjo employee.
          in: query
          name: companyId
          schema:
            type: string
            example: 80a2db290da29e126a18789a
        - description: Optional filter. The office id of the Kenjo employee.
          in: query
          name: officeId
          schema:
            type: string
            example: 80a2db290da29e126a18789d
        - description: Optional filter. The department id of the Kenjo employee.
          in: query
          name: departmentId
          schema:
            type: string
            example: 80a2db290da29e126a18789c
        - description: >-
            Optional filter. The id of the Kenjo employee. It accepts 2
            formats:<br><br> 1. An unique string with the Kenjo employee id.
            <br>Example: *userId=80a2db290da29e126a18789c* <br><br> 2. A string
            with more than one Kenjo employee ids separated by commas (until 15
            ids as maximum). <br>Example:
            *userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*
          in: query
          name: userId
          schema:
            type: string
            example: 80a2db290da29e126a18789c
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceGetExpectedTimeByUserResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /companies:
    get:
      tags:
        - Companies
      summary: Return a list of companies.
      operationId: Companies_getList
      description: Returns a list of the existing companies in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The name of the company.
          in: query
          name: name
          schema:
            type: string
            example: ACME Ltd
        - description: The city of the company.
          in: query
          name: city
          schema:
            type: string
            example: Madrid
        - description: The country code of the company in ISO 3166-1 alpha-2.
          in: query
          name: country
          schema:
            type: string
            example: ES
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompaniesGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /offices:
    get:
      tags:
        - Offices
      summary: Return a list of offices.
      operationId: Offices_getList
      description: Returns a list of the existing offices in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The name of the office.
          in: query
          name: name
          schema:
            type: string
            example: Berlin office
        - description: The Kenjo id of the company.
          in: query
          name: companyId
          schema:
            type: string
            example: 40a2db290da29e126a187895
        - description: The Kenjo id of the calendar.
          in: query
          name: calendarId
          schema:
            type: string
            example: 40a2db290da29e126a187895
        - description: The street of the office.
          in: query
          name: street
          schema:
            type: string
            example: Urbanstrasse, 71
        - description: The postal code of the office.
          in: query
          name: postalCode
          schema:
            type: string
            example: '34213'
        - description: The city of the office.
          in: query
          name: city
          schema:
            type: string
            example: Berlin
        - description: The country of the office in ISO code.
          in: query
          name: country
          schema:
            type: string
            example: DE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficesGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    post:
      tags:
        - Offices
      summary: Create a new office.
      operationId: Offices_createNewOffice
      description: >-
        Creates a new office.<br><br>The required fields are *name*,
        *companyId*, *calendarId*.<br>Optional fields are *street*,
        *postalCode*, *city* and *country*. <br> The *country* field has to be a
        valid ISO country code.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfficesCreateNewOfficeRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficesCreateNewOfficeResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /offices/{id}:
    get:
      tags:
        - Offices
      summary: Return an office for a given office id.
      operationId: Offices_getById
      description: Returns the office referenced by *id*.
      parameters:
        - description: The _id of the office entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficesGetByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    put:
      tags:
        - Offices
      summary: Update an office for a given office id.
      operationId: Offices_updateOfficeAttributes
      description: >-
        Updates an office referenced by *id*. Only the attributes submitted are
        modified.
      parameters:
        - description: The _id of the office entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfficesUpdateOfficeAttributesRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficesUpdateOfficeAttributesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    delete:
      tags:
        - Offices
      summary: Delete an office for a given office id.
      operationId: Offices_removeById
      description: Removes the office referenced by *id*.
      parameters:
        - description: The _id of the office entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /departments:
    get:
      tags:
        - Departments
      summary: Return a list of departments.
      operationId: Departments_listDepartments
      description: Returns a list of the existing departments in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The department name.
          in: query
          name: name
          schema:
            type: string
            example: Happiness dept.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsListDepartmentsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    post:
      tags:
        - Departments
      summary: Create a new department.
      operationId: Departments_createNewDepartment
      description: Creates a new department.<br>The *name* is the only required field.<br>
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentsCreateNewDepartmentRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsCreateNewDepartmentResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /departments/{id}:
    get:
      tags:
        - Departments
      summary: Return a department for a given department id.
      operationId: Departments_getById
      description: Returns the department referenced by *id*.
      parameters:
        - description: The _id of the department entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsGetByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    put:
      tags:
        - Departments
      summary: Update a department for a given department id.
      operationId: Departments_updateAttributes
      description: >-
        Updates a department referenced by *id*. Only the attributes submitted
        are modified.
      parameters:
        - description: The _id of the department entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentsUpdateAttributesRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentsUpdateAttributesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    delete:
      tags:
        - Departments
      summary: Delete a department for a given department id.
      operationId: Departments_removeById
      description: Removes the department referenced by *id*.
      parameters:
        - description: The _id of the department entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /teams:
    get:
      tags:
        - Teams
      summary: Return a list of teams.
      operationId: Teams_getList
      description: Returns a list of the existing teams in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The team name.
          in: query
          name: name
          schema:
            type: string
            example: Developers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    post:
      tags:
        - Teams
      summary: Create a new team.
      operationId: Teams_createTeam
      description: Creates a new team.<br>The *name* is the only required field.<br>
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsCreateTeamRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsCreateTeamResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /teams/{id}:
    get:
      tags:
        - Teams
      summary: Return a team for a given team id.
      operationId: Teams_getById
      description: Returns the team referenced by *id*.
      parameters:
        - description: The _id of the team entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsGetByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    put:
      tags:
        - Teams
      summary: Update a team for a given team id.
      operationId: Teams_updateTeamAttributes
      description: >-
        Updates a team referenced by *id*. Only the attributes submitted are
        modified.
      parameters:
        - description: The _id of the team entry to request. Required field.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsUpdateTeamAttributesRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsUpdateTeamAttributesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    delete:
      tags:
        - Teams
      summary: Delete a team for a given team id.
      operationId: Teams_removeTeam
      description: Removes the team referenced by *id*.
      parameters:
        - description: The _id of the team entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /areas:
    get:
      tags:
        - Areas
      summary: Return a list of areas.
      operationId: Areas_getList
      description: Returns a list of the existing areas in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreasGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    post:
      tags:
        - Areas
      summary: Create a new area.
      operationId: Areas_createNewArea
      description: Creates a new area.<br>The *name* is the only required field.<br>
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AreasCreateNewAreaRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreasCreateNewAreaResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /areas/{id}:
    get:
      tags:
        - Areas
      summary: Return a area for a given area id.
      operationId: Areas_getById
      description: Returns the area referenced by *id*.
      parameters:
        - description: The _id of the area entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreasGetByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    put:
      tags:
        - Areas
      summary: Update an area for a given area id.
      operationId: Areas_updateAreaById
      description: >-
        Updates a area referenced by *id*. Only the attributes submitted are
        modified.
      parameters:
        - description: The _id of the area entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AreasUpdateAreaByIdRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreasUpdateAreaByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    delete:
      tags:
        - Areas
      summary: Delete an area for a given area id.
      operationId: Areas_removeById
      description: Removes the area referenced by *id*.
      parameters:
        - description: The _id of the area entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '204':
          $ref: '#/components/responses/noContent'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /calendars:
    get:
      tags:
        - Calendars
      summary: Return a list of calendars.
      operationId: Calendars_getList
      description: Returns a list of the existing calendars in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The calendar name.
          in: query
          name: name
          schema:
            type: string
            example: Madrid Calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarsGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /calendars/{id}:
    get:
      tags:
        - Calendars
      summary: Return a calendar for a given calendar id.
      operationId: Calendars_getById
      description: Returns the calendar referenced by *id*.
      parameters:
        - description: The _id of the calendar entry to request.
          in: path
          name: id
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarsGetByIdResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /user-accounts:
    get:
      tags:
        - User accounts
      summary: Return a list of users.
      operationId: UserAccounts_listEmployees
      description: >-
        This endpoint returns an array of objects with the existing employees in
        Kenjo. Every object contains the basic employee information from
        **account**, **personal** and **work** sections per each existing
        employee.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccountsListEmployeesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees:
    post:
      tags:
        - Employees
      summary: Create a new employee.
      operationId: Employees_createInactiveEmployee
      description: >
        This endpoint creates a deactivated employee in Kenjo, the 'isActive'
        field set to false. To activate an employee use the put /activate
        method. This method will send an activation message to the employee
        email to complete the activation through the onboarding wizard.

        <br><br>The field *email* is required and must be unique. Also
        *firstName*, *lastName* and *companyId* are required fields. If the work
        schedule is not provided then all the days of the week except Saturdays
        and Sundays are set to true. If the *language* is not specified, the
        assigned company language will be set by default.

        <br><br>**Custom fields** information can be provided in this operation
        for the **personal**, **work**, **address**, **financial** and **home**
        sections. The *API name* of the custom field is required and the data
        format has to match with the type defined for the custom field in Kenjo.

        API names start with 'c_' and the rest is composed by the trimmed name
        (spaces are removed).

        <br><br>

        Example:

        <br>

        *The custom field 'Activity type' belongs to the section 'work'*:
          ```
        ...

        {
          ...
            "work": {
              "c_Activitytype": "1",
              ...
            },
          ...
        }

        ```

        *'Activity type' is a field type 'List' (Strings list) with the possible
        values: "1", "2" and "3". It means that if a different value or type is
        provided then the request will return an error.*

        <br><br>If the operation get success then an inactive employee is
        created and the response will include the provided information and the
        Kenjo id for the new employee.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesCreateInactiveEmployeeRequest'
            example:
              account:
                email: john@acme.io
                externalId: E-000001
                language: es
              personal:
                firstName: John
                lastName: Doe
                displayName: John Doe
                gender: Male
                birthdate: '1980-01-28T00:00:00.000Z'
              work:
                companyId: 50a2db290da29e126a187894
                officeId: 50a2db290da29e126a187895
                departmentId: 50a2db290da29e126a187896
                startDate: '2022-01-01T00:00:00.000Z'
                jobTitle: Actor
                workPhone: +34 666 70 90 32
                workMobile: +34 680 70 90 32
                isAssistant: false
                probationPeriodEnd: '2022-06-01T00:00:00.000Z'
                reportsToId: 50a2db290da29e126a1878523
                weeklyHours: 40
              workSchedule:
                mondayWorkingDay: true
                tuesdayWorkingDay: true
                wednesdayWorkingDay: true
                thursdayWorkingDay: true
                fridayWorkingDay: true
                saturdayWorkingDay: true
                sundayWorkingDay: true
                trackAttendance: false
              address:
                street: Calle Enrique San Francisco 13
                postalCode: '28080'
                city: Madrid
                country: ES
              financial:
                accountHolderName: Michael Corleone
                bankName: Bank of Sicily
                accountNumber: 0093 344 2132221 3304 00
                iban: DE32120222391919191911
                swiftCode: '12321234'
                nationalId: 04123547X
                passport: FA1234098
                nationalInsuranceNumber: '23123312321'
                taxCode: 323451R
                taxIdentificationNumber: T4312345
              home:
                maritalStatus: Widowed
                spouseFirstName: Catherine
                spouseLastName: Tramell
                spouseBirthdate: '2060-01-26T00:00:00.000Z'
                spouseGender: Female
                personalEmail: john@acme.io
                personalPhone: '4567092323'
                personalMobile: '3567092310'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesCreateInactiveEmployeeResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
    get:
      tags:
        - Employees
      summary: Return a list of user accounts.
      operationId: Employees_getList
      description: >-
        This endpoint returns the list of employee accounts existing in Kenjo.
        It is similar to the */employees/accounts* endpoint.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesGetListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}:
    get:
      tags:
        - Employees
      summary: Return all the sections information for a given employee Id.
      operationId: Employees_getEmployeeInformation
      description: >-
        This endpoint returns information about the **account**, **personal**,
        **work**, **work schedule**, **address**, **financial** and **home**
        sections for a given employee id. The *employeeId* param represents a
        Kenjo employee id.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The _id of the employee to request.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 50a2db290da29e126a187843
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesGetEmployeeInformationResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/accounts:
    get:
      tags:
        - Employees
      summary: Return a list of employee accounts.
      operationId: Employees_getAccounts
      description: >-
        This endpoint returns a list with the **account** sections of the
        existing employees. The account section contains information such as
        *email*, *external Id*, *language* and *activation status*.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The Kenjo email of the employee.
          in: query
          name: email
          schema:
            type: string
            example: john.doe@acme.com
        - description: The employee language.
          in: query
          name: language
          schema:
            type: string
            enum:
              - en
              - de
              - es
            example: es
        - description: The external id of the employee.
          in: query
          name: externalId
          schema:
            type: string
            example: USER-123456
        - description: The employee activation status.
          in: query
          name: isActive
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesGetAccountsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/personals:
    get:
      tags:
        - Employees
      summary: Return a list of employee personals.
      operationId: Employees_listPersonals
      description: >-
        This endpoint returns a list with the **personal** sections of the
        existing employees.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The name of the Kenjo employee. This field is required.
          in: query
          name: firstName
          schema:
            type: string
            example: John
        - description: The surname of the Kenjo employee. This field is required.
          in: query
          name: lastName
          schema:
            type: string
            example: Doe
        - description: The composition of firstName and lastName of the Kenjo employee.
          in: query
          name: displayName
          schema:
            type: string
            example: John Doe
        - description: >-
            The employee gender. Only is valid one of the following values
            'Male' (male), 'Female' (female) or 'Other' (other).
          in: query
          name: gender
          schema:
            type: string
            enum:
              - Male
              - Female
              - Other
            example: es
        - description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
          in: query
          name: birthdate
          schema:
            type: string
            example: '1980-01-28T00:00:00.000Z'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesListPersonalsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/works:
    get:
      tags:
        - Employees
      summary: Return a list of employee works.
      operationId: Employees_listWorks
      description: >-
        This endpoint returns a list with the **work** sections of the existing
        employees.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The company id of the Kenjo employee.
          in: query
          name: companyId
          schema:
            type: string
            example: 80a2db290da29e126a18789a
        - description: The office id of the Kenjo employee.
          in: query
          name: officeId
          schema:
            type: string
            example: 80a2db290da29e126a18789d
        - description: The department id of the Kenjo employee.
          in: query
          name: departmentId
          schema:
            type: string
            example: 80a2db290da29e126a18789c
        - description: >-
            The starting date of the Kenjo employee in format
            YYYY-MM-DDThh:mm:ss.
          in: query
          name: startDate
          schema:
            type: string
            example: '2022-06-01T00:00:00.000Z'
        - description: The job title of the employee.
          in: query
          name: jobTitle
          schema:
            type: string
            example: Actor
        - description: The work phone of the employee.
          in: query
          name: workPhone
          schema:
            type: string
            example: 34 666 70 90 32
        - description: The work mobile of the employee.
          in: query
          name: workMobile
          schema:
            type: string
            example: 34 680 70 90 32
        - description: Allow to indicate if the employee has or not the assistant role.
          in: query
          name: isAssistant
          schema:
            type: boolean
            example: true
        - description: >-
            The probation period of the employee. Format
            YYYY-MM-DDThh:mm:ss.000Z.
          in: query
          name: probationPeriodEnd
          schema:
            type: string
            example: '2022-06-01T00:00:00.000Z'
        - description: >-
            The Kenjo employee id of the user to whom the employee reports. The
            employee id to assign can be an active or inactive user. Trying to
            assign the own employee id or the id of someone who is already
            reporting will arise an error.
          in: query
          name: reportsToId
          schema:
            type: string
            example: 80a2db290da29e126a187891
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesListWorksResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/work-schedules:
    get:
      tags:
        - Employees
      summary: Return a list of employee work schedules.
      operationId: Employees_getWorkSchedules
      description: >-
        This endpoint returns a list with the **work schedule** sections of the
        existing employees.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The activation status of attendance tracking for the employee.
          in: query
          name: trackAttendance
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesGetWorkSchedulesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/addresses:
    get:
      tags:
        - Employees
      summary: Return a list of employee addresses.
      operationId: Employees_listAddresses
      description: >-
        This endpoint returns a list with the **address** sections of the
        existing employees.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The name of the street.
          in: query
          name: street
          schema:
            type: string
            example: ' Calle Enrique San Francisco 13'
        - description: The postal code.
          in: query
          name: postalCode
          schema:
            type: string
            example: '28080'
        - description: The city.
          in: query
          name: city
          schema:
            type: string
            example: Madrid
        - description: The country code in ISO 3166-1 alpha-2.
          in: query
          name: country
          schema:
            type: string
            example: ES
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesListAddressesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/financials:
    get:
      tags:
        - Employees
      summary: Return a list of employee financials.
      operationId: Employees_listFinancials
      description: >-
        This endpoint returns a list with the **financial** sections of the
        existing employees.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The accounts holder's name.
          in: query
          name: accountHolderName
          schema:
            type: string
            example: Michael Corleone
        - description: The bank name.
          in: query
          name: bankName
          schema:
            type: string
            example: Bank of Sicily
        - description: The account number.
          in: query
          name: accountNumber
          schema:
            type: string
            example: 0093 344 2132221 3304 00
        - description: The IBAN.
          in: query
          name: iban
          schema:
            type: string
            example: DE32120222391919191911
        - description: The SWIFT code.
          in: query
          name: swiftCode
          schema:
            type: string
            example: '12321234'
        - description: The national id document
          in: query
          name: nationalId
          schema:
            type: string
            example: 04123547X
        - description: The passport number.
          in: query
          name: passport
          schema:
            type: string
            example: FA1234098
        - description: The national insurance number.
          in: query
          name: nationalInsuranceNumber
          schema:
            type: string
            example: '23123312321'
        - description: The tax number.
          in: query
          name: taxCode
          schema:
            type: string
            example: 323451R
        - description: The tax identification number.
          in: query
          name: taxIdentificationNumber
          schema:
            type: string
            example: T4312345
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesListFinancialsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/homes:
    get:
      tags:
        - Employees
      summary: Return a list of employee homes.
      operationId: Employees_listHomes
      description: >-
        This endpoint returns a list with the **home** sections of the existing
        employees.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            The marital status. Only is valid one of the following values
            "Divorced", "Domestic Partnership", "Married", "Separated",
            "Single", "Widowed".
          in: query
          name: maritalStatus
          schema:
            type: string
            enum:
              - Divorced
              - Domestic Partnership
              - Married
              - Separated
              - Single
              - Widowed
            example: Widowed
        - description: The first name of the employee's spouse.
          in: query
          name: spouseFirstName
          schema:
            type: string
            example: Catherine
        - description: The last name of the employee's spouse.
          in: query
          name: spouseLastName
          schema:
            type: string
            example: Tramell
        - description: >-
            The birth date of the employee's spouse. Format
            YYYY-MM-DDThh:mm:ss.000Z.
          in: query
          name: spouseBirthdate
          schema:
            type: string
            example: '2060-01-26T00:00:00.000Z'
        - description: >-
            The employee's spouse gender. Only is valid one of the following
            values 'Male' (male), 'Female' (female) or 'Other' (other).
          in: query
          name: spouseGender
          schema:
            type: string
            enum:
              - Male
              - Female
              - Other
            example: Female
        - description: The employee personal email.
          in: query
          name: personalEmail
          schema:
            type: string
            example: john.doe@acme.com
        - description: The employee personal phone.
          in: query
          name: personalPhone
          schema:
            type: string
            example: '4567092323'
        - description: The employee personal mobile.
          in: query
          name: personalMobile
          schema:
            type: string
            example: '3567092310'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesListHomesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/accounts:
    put:
      tags:
        - Employees
      summary: Update the account section for a given employee id.
      operationId: Employees_updateEmployeeAccounts
      description: >-
        This endpoint updates the employee **account** section for a given
        employee id. The operation only updates the fields provided in the body.
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdateEmployeeAccountsRequest'
            example:
              email: john@acme.io,
              externalId: E-000001
              language: en
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdateEmployeeAccountsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/personals:
    put:
      tags:
        - Employees
      summary: Update the personal section for a given employee id.
      operationId: Employees_updatePersonals
      description: >
        This endpoint updates the employee **personal** section for a given
        employee id. The operation only updates the fields provided in the body.

        <br><br>**Custom fields** information can be provided in this operation.
        The *API name* of the custom field is required and the data format has
        to match with the type defined for the custom field in Kenjo.

        API names start with 'c_' and the rest is composed by the trimmed name
        (spaces are removed).

        <br><br>

        Example:

        <br>

        *The custom field 'category' belongs to the 'personal' section*:
          ```
          {
            ...,
            "lastName": "Nadie",
            "c_category": "Good",
            ...
          }
        ```

        *'category' is a field type 'List' (Strings list) with the possible
        values: "Good" and "Bad". It means that if a different value or type is
        provided then the request will return an error.*
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdatePersonalsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdatePersonalsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/works:
    put:
      tags:
        - Employees
      summary: Update the work section for a given employee id.
      operationId: Employees_updateWorks
      description: >
        This endpoint updates the employee **work** section for a given employee
        id. The operation only updates the fields provided in the body.

        <br><br>**Custom fields** information can be provided in this operation.
        The *API name* of the custom field is required and the data format has
        to match with the type defined for the custom field in Kenjo.

        API names start with 'c_' and the rest is composed by the trimmed name
        (spaces are removed).

        <br><br>

        Example:

        <br>

        *The custom field 'activity type' belongs to the 'personal' section*:
          ```
          {
            ...,
            "companyId": "61d874aef37c05cfba4f1b38",
            "c_activityType": "1",
            ...
          }
        ```

        *'activity Type' is a field type 'List' (Strings list) with the possible
        values: "1" and "2". It means that if a different value or type is
        provided then the request will return an error.*
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdateWorksRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdateWorksResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/work-schedules:
    put:
      tags:
        - Employees
      summary: Update the work schedule section for a given employee id.
      operationId: Employees_updateWorkSchedule
      description: >-
        This endpoint updates the employee **work schedule** section for a given
        employee id. The operation only updates the fields provided in the body.
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdateWorkScheduleRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdateWorkScheduleResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/addresses:
    put:
      tags:
        - Employees
      summary: Update the address section for a given employee id.
      operationId: Employees_updateAddress
      description: >
        This endpoint updates the employee **address** section for a given
        employee id. The operation only updates the fields provided in the body.

        <br><br>**Custom fields** information can be provided in this operation.
        The *API name* of the custom field is required and the data format has
        to match with the type defined for the custom field in Kenjo.

        API names start with 'c_' and the rest is composed by the trimmed name
        (spaces are removed).

        <br><br>

        Example:

        <br>

        *The custom field 'province' belongs to the 'address' section*:
          ```
          {
            ...,
            "country": "ES",
            "c_province": "MD",
            ...
          }
        ```

        *'province' is a field type 'String'. It means that if a different type
        of data (number or boolean) is provided then the request will return an
        error.*
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdateAddressRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdateAddressResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/financials:
    put:
      tags:
        - Employees
      summary: Update the financial section for a given employee id.
      operationId: Employees_updateFinancials
      description: >
        This endpoint updates the employee **financial** section for a given
        employee id. The operation only updates the fields provided in the body.

        <br><br>**Custom fields** information can be provided in this operation.
        The *API name* of the custom field is required and the data format has
        to match with the type defined for the custom field in Kenjo.

        API names start with 'c_' and the rest is composed by the trimmed name
        (spaces are removed).

        <br><br>

        Example:

        <br>

        *The custom field 'special tax' belongs to the 'financial' section*:
          ```
          {
            ...,
            "iban": "ES2345123456789077",
            "c_specialtax": 1500,
            ...
          }
        ```

        *'special tax' is a field type 'Number'. It means that if a different
        type of data (string or boolean) is provided then the request will
        return an error.*
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdateFinancialsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdateFinancialsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/homes:
    put:
      tags:
        - Employees
      summary: Update the home section for a given employee id.
      operationId: Employees_updateHome
      description: >
        This endpoint updates the employee **home** section for a given employee
        id. The operation only updates the fields provided in the body.

        <br><br>**Custom fields** information can be provided in this operation.
        The *API name* of the custom field is required and the data format has
        to match with the type defined for the custom field in Kenjo.

        API names start with 'c_' and the rest is composed by the trimmed name
        (spaces are removed).

        <br><br>

        Example:

        <br>

        *The custom field 'pet name' belongs to the 'home' section*:
          ```
          {
            ...,
            "maritalStatus": "Divorced",
            "c_petname": "Boliche",
            ...
          }
        ```

        *'pet name' is a field type 'String'. It means that if a different type
        of data (number or boolean) is provided then the request will return an
        error.*
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeesUpdateHomeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesUpdateHomeResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/activate:
    put:
      tags:
        - Employees
      summary: Activate an employee.
      operationId: Employees_activateEmployee
      description: >-
        This endpoint activates a Kenjo employee given by the employeeId. It
        sends an email to the recipient of the employee email to start the
        onboarding process. Once the password is filled, the employee changes to
        'active' ('isActive' = TRUE). While the employee is not active it is
        possible to send activation emails.
      parameters:
        - description: The _id of the employee to send the activation email.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesActivateEmployeeResponse'
        '400':
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesActivateEmployee400Response'
        '401':
          $ref: '#/components/responses/unauthorized'
  /employees/{employeeId}/deactivate:
    put:
      tags:
        - Employees
      summary: Deactivate an employee.
      operationId: Employees_deactivateEmployeeById
      description: >-
        This endpoint deactivates a Kenjo employee given by the employeeId. It
        sets the isActive field to FALSE and invalidate the access Kenjo for the
        employee. While the employee is not active it is possible to send
        activation emails.
      parameters:
        - description: The _id of the employee to update.
          in: path
          name: employeeId
          required: true
          schema:
            type: string
            example: 60a2db290da29e126a18789a
        - in: header
          $ref: '#/components/parameters/authorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesDeactivateEmployeeByIdResponse'
        '400':
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/EmployeesDeactivateEmployeeById400Response
        '401':
          $ref: '#/components/responses/unauthorized'
  /custom-fields:
    get:
      tags:
        - Custom fields
      summary: Return a list of custome fields.
      operationId: CustomFields_getList
      description: Returns a list of the existing custom fields in Kenjo.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: The name of custom field section.
          in: query
          name: section
          schema:
            type: string
            enum:
              - personal
              - work
              - address
              - financial
              - home
            example: personal
        - description: The name of the custom field label.
          in: query
          name: label
          schema:
            type: string
            example: Blood type
        - description: >-
            The api name is a required identifier to perform POST and PUT
            operations with employees.
          in: query
          name: apiName
          schema:
            type: string
            example: c_Bloodtype
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldsGetListResponse'
        '400':
          description: >-
            BAD REQUEST. This is a wrong request in the client side due to
            invalid body or params.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldsGetList400Response'
        '401':
          $ref: '#/components/responses/unauthorized'
  /time-off/requests:
    get:
      tags:
        - Time off
      summary: Return a list of time-off requests.
      operationId: TimeOff_getRequestsByDate
      description: >-
        This endpoint returns a paginated list of time off requests for a given
        date range.The maximum number of time off requests to retrieve once is
        92 days, so the URL params *from* and *to* are mandatory. The URL params
        help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            A date in format YYYY-MM-DD to indicate the starting point. It needs
            to be equals or less than the *to* param.
          in: query
          name: from
          required: true
          schema:
            type: string
            example: '2020-01-01'
        - description: >-
            A date in format YYYY-MM-DD to indicate the ending point. It needs
            to be equals or greater than the *from* param.
          in: query
          name: to
          required: true
          schema:
            type: string
            example: '2020-01-10'
        - description: >-
            This field allows to return only the time off requests for a given
            *_userId*.
          in: query
          name: _userId
          required: false
          schema:
            type: string
            example: 60a2db290da29e126a18789b
        - description: This field allows to filter by time-off type Id.
          in: query
          name: _timeOffTypeId
          required: false
          schema:
            type: string
            example: 90a2db290da29e126a187891
        - description: This field allows to filter by the time-off request status.
          in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - Approved
              - Declined
              - Cancelled
              - Pending
              - Submitted
              - Processed
              - CancelledAfterProcessed
              - InApproval
            example: Approved
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeOffGetRequestsByDateResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /time-off/types:
    get:
      tags:
        - Time off
      summary: Return a list of time-off types.
      operationId: TimeOff_getTypes
      description: >-
        This endpoint returns a list of all the existing time off types for an
        organization. The URL params help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            Optional filter. This field allows you to retrieve time-off types
            based on their *name*. It can accept two formats:<br><br> 1. A
            single *name* as a unique string. <br>Example: *name=Sick* <br><br>
            2. Multiple *name* values separated by commas (up to a maximum of 15
            values). <br>Example: *name=Maternity,Sick,Home*. These options
            provide flexibility in filtering contracts by their type, making it
            easier to retrieve the specific data you need.
          in: query
          name: name
          required: false
          schema:
            type: string
            example: Sick
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeOffGetTypesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /time-off/requests/processed:
    post:
      tags:
        - Time off
      summary: Create a new time-off request.
      operationId: TimeOff_createRequest
      description: >
        This endpoint creates a new time-off request for a specified *_userId*
        and existing *_timeOffTypeId* within a defined date range specified by
        the *from* (start) and *to* (end) fields. The request will be listed in
        the app in the **Time-off history** as 'submitted time off on behalf of'
        the person assigned to the request.


        Additionally, it is possible to indicate whether the 'from' and 'to'
        dates are taken as full days using the optional fields *partOfDayFrom*
        and *partOfDayTo*, respectively. If these optional parameters are not
        provided, the time-off request creation defaults to full days for both
        the *from* and *to* dates.

        All requests will be made on behalf of the *_userId*, and the status of
        the request will be 'Processed' if the dates (from and to) are in the
        past, while if the dates are in the future, the status will be
        'Submitted'.


        This endpoint does not allow creating time-off requests of hourly type.


        For the optimal performance of this endpoint, it supports up to 200
        requests per minute. Please note, rapidly consecutive requests to this
        endpoint may not be processed in the submitted order. We recommend
        spacing out your requests for consistent processing results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeOffCreateRequestRequest'
            example:
              _userId: 50a2db290da29e126a18789a
              _timeOffTypeId: 50a2db290da29e126a18789f
              from: '2020-01-26'
              to: '2020-01-30'
              partOfDayFrom: StartOfDay
              partOfDayTo: HalfOfDay
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeOffCreateRequestResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /compensation/contracts:
    get:
      tags:
        - Compensation
      summary: Return a list of contracts.
      operationId: Compensation_getContracts
      description: >-
        This endpoint returns a paginated list of employment contracts. The URL
        params help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *contractTypeId*. It can accept two formats:<br><br> 1. A
            single *contractTypeId* as a unique string. <br>Example:
            *contractTypeId=80a2db290da29e126a18789c* <br><br> 2. Multiple
            *contractTypeId* values separated by commas (up to a maximum of 15
            values). <br>Example:
            *contractTypeId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: contractTypeId
          required: false
          schema:
            type: string
            example: 60a2db290da29e126a18789e
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *_userId*. It can accept two formats:<br><br> 1. A single
            *_userId* as a unique string. <br>Example:
            *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId*
            values separated by commas (up to a maximum of 15 values).
            <br>Example:
            *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: _userId
          required: false
          schema:
            type: string
            example: 60a2db290da29e126a18789b
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *_companyId*. It can accept two formats:<br><br> 1. A
            single *_companyId* as a unique string. <br>Example:
            *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple
            *_companyId* values separated by commas (up to a maximum of 15
            values). <br>Example:
            *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: _companyId
          required: false
          schema:
            type: string
            example: 90a2db290da29e126a187891
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompensationGetContractsResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /compensation/contract-types:
    get:
      tags:
        - Compensation
      summary: Return a list of contract types.
      operationId: Compensation_listContractTypes
      description: >-
        This endpoint returns a paginated list of contract types. The URL params
        help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: This field allows to return only the active contract types.
          in: query
          name: isActive
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompensationListContractTypesResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /compensation/salaries:
    get:
      tags:
        - Compensation
      summary: Return a list of salaries.
      operationId: Compensation_getSalariesList
      description: >-
        This endpoint returns a paginated list of employment salaries. The URL
        params help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *_userId*. It can accept two formats:<br><br> 1. A single
            *_userId* as a unique string. <br>Example:
            *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId*
            values separated by commas (up to a maximum of 15 values).
            <br>Example:
            *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: _userId
          required: false
          schema:
            type: string
            example: 60a2db290da29e126a18789b
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *_companyId*. It can accept two formats:<br><br> 1. A
            single *_companyId* as a unique string. <br>Example:
            *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple
            *_companyId* values separated by commas (up to a maximum of 15
            values). <br>Example:
            *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: _companyId
          required: false
          schema:
            type: string
            example: 90a2db290da29e126a187891
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *paymentPeriod*. Accepted values: 'Annual', 'Monthly' and
            'Hourly'. It can accept two formats:<br><br> 1. A single
            *paymentPeriod* as a unique string. <br>Example:
            *paymentPeriod=Annual* <br><br> 2. Multiple *paymentPeriod* values
            separated by commas (up to a maximum of 15 values). <br>Example:
            *paymentPeriod=Annual,Monthly*. These options provide flexibility in
            filtering contracts by their type, making it easier to retrieve the
            specific data you need.
          in: query
          name: paymentPeriod
          required: false
          schema:
            type: string
            enum:
              - Annual
              - Monthly
              - Hourly
            example: Annual
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *currency* (ISO 4217). It can accept two formats:<br><br>
            1. A single *currency* as a unique string. <br>Example:
            *currency=EUR* <br><br> 2. Multiple *currency* values separated by
            commas (up to a maximum of 15 values). <br>Example:
            *currency=EUR,USD*. These options provide flexibility in filtering
            contracts by their type, making it easier to retrieve the specific
            data you need.
          in: query
          name: currency
          required: false
          schema:
            type: string
            example: EUR
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompensationGetSalariesListResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /compensation/additional-payments:
    get:
      tags:
        - Compensation
      summary: Return a list of additional payments.
      operationId: Compensation_listAdditionalPayments
      description: >-
        This endpoint returns a paginated list of additional payments. The URL
        params help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *_userId*. It can accept two formats:<br><br> 1. A single
            *_userId* as a unique string. <br>Example:
            *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId*
            values separated by commas (up to a maximum of 15 values).
            <br>Example:
            *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: _userId
          required: false
          schema:
            type: string
            example: 60a2db290da29e126a18789b
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *_companyId*. It can accept two formats:<br><br> 1. A
            single *_companyId* as a unique string. <br>Example:
            *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple
            *_companyId* values separated by commas (up to a maximum of 15
            values). <br>Example:
            *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
            These options provide flexibility in filtering contracts by their
            type, making it easier to retrieve the specific data you need.
          in: query
          name: _companyId
          required: false
          schema:
            type: string
            example: 90a2db290da29e126a187891
        - description: >-
            Optional filter. This field allows you to retrieve contracts based
            on their *currency* (ISO 4217). It can accept two formats:<br><br>
            1. A single *currency* as a unique string. <br>Example:
            *currency=EUR* <br><br> 2. Multiple *currency* values separated by
            commas (up to a maximum of 15 values). <br>Example:
            *currency=EUR,USD*. These options provide flexibility in filtering
            contracts by their type, making it easier to retrieve the specific
            data you need.
          in: query
          name: currency
          required: false
          schema:
            type: string
            example: EUR
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CompensationListAdditionalPaymentsResponse
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
  /compensation/additional-payment-types:
    get:
      tags:
        - Compensation
      summary: Return a list of additional payment types.
      operationId: Compensation_listAdditionalPaymentTypes
      description: >-
        This endpoint returns a paginated list of additional payment types. The
        URL params help to return more accurate results.
      parameters:
        - in: header
          $ref: '#/components/parameters/authorization'
        - description: >-
            Optional filter for pagination proposals. Determines the number of
            pages to skip when pagination is being used. If this value is not
            provided, by default the offset will be 1.
          in: query
          name: offset
          schema:
            type: number
            example: 1
        - description: >-
            Optional filter for pagination proposals. The maximum number of rows
            to retrieve which determines the size of the page. If this value is
            not provided then the limit will be 50 users. The maximum value of
            the limit is 100 users per page. Only are valid the following limit
            values: 25, 50 and 100.
          in: query
          name: limit
          schema:
            type: number
            example: 25
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CompensationListAdditionalPaymentTypesResponse
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
components:
  parameters:
    origin:
      description: Origin of the request.
      in: header
      name: Origin
      schema:
        type: string
        example: https://sandbox-api.kenjo.io
      required: true
    authorization:
      description: A valid bearer token.
      in: header
      name: Authorization
      schema:
        type: string
        example: >-
          Bearer
          eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2FwaS5rZW5qby5pbyIsInN1YiI6IjYwZjBhOTE2MjE0OTg3MjU2YmU5YzhmZiIsImF1ZCI6Imh0dHBzOi8vYXBpLmtlbmpvLmlvIiwiaWF0IjoxNjI2Mzg1MTE1LCJuYmYiOjE2MjYzODUxMTUsImV4cCI6MTYyNjU1NzkxNSwiYWNjZXNzVHlwZSI6IkFwaUFjY2VzcyIsInNfb3JnSWQiOiI2MGYwNGVhN2RmN2JhMjFlY2U0YmYzYzIifQ.cxG_7dIS-VbmDXdJuLkekoyuyCIzQG2fMcgc0nkfbWE8cihhcb5FnALbQkjU9b5-qVcEoMHZlSuUA-jMEBMMVQ
      required: true
  responses:
    ok:
      description: OK.
    badRequest:
      description: >-
        BAD REQUEST. This is a wrong request in the client side due to invalid
        body or params.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationCreateBearerToken400Response'
    unauthorized:
      description: >-
        UNAUTHORIZED. The Authorization header is incorrect, not provided or the
        token expired.
    noContent:
      description: NO CONTENT
  schemas:
    AuthenticationCreateBearerTokenRequest:
      type: object
      properties:
        apiKey:
          description: The API key generated in Settings.
          type: string
    AttendanceUpdateEntryRequest:
      type: object
      properties:
        startTime:
          description: >-
            The new start time of the attendance entry to update. The valid
            format is *hh:mm:ss*
          type: string
          example: '10:00:00'
        endTime:
          description: >-
            The new end time of the attendance entry to update. The valid format
            is *hh:mm:ss*
          type: string
          example: '10:00:00'
        breaks:
          description: >-
            Array that contains the breaks in detail. Rules:<br> - A maximum of
            10 breaks can be loaded via API.<br> - Breaks cannot be overlapped
            in the same day.<br> - 'start' field is required.<br> - There is no
            way to update specifically a break.<br> - To remove 'breaks', just
            send an empty array in the update, something like "breaks":[]
          type: array
          items:
            type: object
            properties:
              start:
                description: >-
                  The start time of the break. This field is required if
                  'breaks' is added to the body. The valid format is *hh:mm:ss*
                type: string
                example: '11:00:00'
              end:
                description: >-
                  The end time of the break. This field is required if 'breaks'
                  is added to the body. The valid format is *hh:mm:ss*
                type: string
                example: '11:30:00'
        comment:
          description: >-
            Optional text to describe an attendance record (pair of startTime
            and endTime). The maximum number of characters is 150.
          type: string
          example: Morning working attendance tracking.
    AttendanceCreateEntryRequest:
      type: object
      properties:
        userId:
          description: The Kenjo employee *_id*.
          type: string
          example: 50a2db290da29e126a18789a
        email:
          description: The Kenjo *email* for an employee.
          type: string
          example: john@acme.io
        externalId:
          description: The *external id* for an employee for integrations.
          type: string
          example: '00001'
        date:
          description: >-
            The date of the entry. The valid format is *YYYY-MM-DD*. Required
            field.
          type: string
          example: '2021-07-01'
        startTime:
          description: >-
            The start time of the entry. The valid format is *hh:mm:ss*.
            Required field.
          type: string
          example: '10:00:00'
        endTime:
          description: >-
            The end time of the entry. It is not a required field but cannot be
            less or equal than the *startTime*. The valid format is *hh:mm:ss*
          type: string
          example: '13:00:00'
        breaks:
          description: >-
            Array that contains the breaks in detail. Rules:<br> - A maximum of
            10 breaks can be loaded via API.<br> - Breaks cannot be overlapped
            in the same day.<br> - 'start' field is required.
          type: array
          items:
            type: object
            properties:
              start:
                description: >-
                  The start time of the break. This field is required if
                  'breaks' is added to the body. The valid format is *hh:mm:ss*
                type: string
                example: '11:00:00'
              end:
                description: >-
                  The end time of the break. This field is required if 'breaks'
                  is added to the body. The valid format is *hh:mm:ss*
                type: string
                example: '11:30:00'
        comment:
          description: >-
            Optional text to describe an attendance record (pair of startTime
            and endTime). The maximum number of characters is 150.
          type: string
          example: Morning working attendance tracking.
      required:
        - startTime
        - date
    AttendanceCreateTrackTimeRequest:
      type: object
      properties:
        userId:
          description: The Kenjo employee *_id*.
          type: string
          example: 50a2db290da29e126a18789a
        email:
          description: The Kenjo *email* for an employee.
          type: string
          example: john@acme.io
        externalId:
          description: The *external id* for an employee for integrations.
          type: string
          example: '00001'
        dateTime:
          description: >-
            The date and the time of the Kenjo employee in format
            YYYY-MM-DDThh:mm:ss.
          type: string
          example: '2021-07-01T09:00:00'
      required:
        - dateTime
    OfficesCreateNewOfficeRequest:
      type: object
      properties:
        name:
          description: The new name of the office to create. Required field.
          type: string
          example: Spain office
        companyId:
          description: The company id of the office to create. Required field.
          type: string
          example: 60dadb6362702d057f8fb486
        calendarId:
          description: The calendar id of the office to create. Required field.
          type: string
          example: 60f808f727ad58fe791bae91
        country:
          description: The country of the office to create in ISO code.
          type: string
          example: ES
        postalCode:
          description: The postal code of the office to create.
          type: string
          example: '28030'
        city:
          description: The city of the office to create.
          type: string
          example: ES
        street:
          description: The street of the office to create.
          type: string
          example: Paseo Castellana, 13
    OfficesUpdateOfficeAttributesRequest:
      type: object
      properties:
        name:
          description: The new name of the office to update.
          type: string
          example: Madrid office
    DepartmentsCreateNewDepartmentRequest:
      type: object
      properties:
        name:
          description: The new name of the department to update. Required field.
          type: string
          example: Sales
    DepartmentsUpdateAttributesRequest:
      type: object
      properties:
        name:
          description: The new name of the department to update.
          type: string
          example: Sales
    TeamsCreateTeamRequest:
      type: object
      properties:
        name:
          description: The new name of the team to update. Required field.
          type: string
          example: Tech devOps
    TeamsUpdateTeamAttributesRequest:
      type: object
      properties:
        name:
          description: The new name of the team to update.
          type: string
          example: Sales
    AreasCreateNewAreaRequest:
      type: object
      properties:
        name:
          description: The new name of the area to update.
          type: string
          example: Recruiting feature
    AreasUpdateAreaByIdRequest:
      type: object
      properties:
        name:
          description: The new name of the area to update.
          type: string
          example: Sales
    EmployeesCreateInactiveEmployeeRequest:
      type: object
      properties:
        account:
          type: object
          properties:
            email:
              description: >-
                The employee email in Kenjo. This field is required and must be
                unique.
              type: string
              example: john@acme.io
            language:
              description: >-
                The employee language. Only is valid one of the following values
                'en' (english), 'es' (spanish) or 'de' (german).
              type: string
              example: es
            externalId:
              description: >-
                The employee external id for integration proposals. This value
                must be unique.
              type: string
              example: E-000001
          required:
            - email
        personal:
          type: object
          properties:
            firstName:
              description: The name of the Kenjo employee. This field is required.
              type: string
              example: John
            lastName:
              description: The surname of the Kenjo employee. This field is required.
              type: string
              example: Doe
            displayName:
              description: The complete name of the Kenjo employee.
              type: string
              example: John Doe
            gender:
              description: >-
                The employee gender. Only is valid one of the following values
                'Male' (male), 'Female' (female) or 'Other' (other).
              type: string
              example: Male
            birthdate:
              description: The employee birth date. Format YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '1980-01-28T00:00:00.000Z'
          required:
            - firstName
            - lastName
        work:
          type: object
          properties:
            companyId:
              description: >-
                The company id of the Kenjo employee. This field is required and
                must to match with Kenjo _id of an existing company.
              type: string
              example: 50a2db290da29e126a187894
            officeId:
              description: The office id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187895
            departmentId:
              description: The department id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187896
            startDate:
              description: >-
                The starting date of the employee. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2022-01-01T00:00:00.000Z'
            jobTitle:
              description: The job title of the employee.
              type: string
              example: Actor
            workPhone:
              description: The work phone of the employee.
              type: string
              example: +34 666 70 90 32
            workMobile:
              description: The work mobile of the employee.
              type: string
              example: +34 680 70 90 32
            isAssistant:
              description: Allow to indicate if the employee has or not the assistant role.
              type: boolean
              example: false
            probationPeriodEnd:
              description: >-
                The probation period of the employee. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2022-06-01T00:00:00.000Z'
            reportsToId:
              description: >-
                The Kenjo employee id of the user to whom the employee reports.
                The employee id to assign can be an active or inactive user.
                Trying to assign the own employee id or the id of someone who is
                already reporting will arise an error.
              type: string
              example: 50a2db290da29e126a1878523
            weeklyHours:
              description: >-
                The number of weekly hours that an employee works. Combined with
                the work schedule allows to determine the day hours. This field
                is required and must be equals or greater than 1.
              type: number
              example: 40
          required:
            - companyId
            - weeklyHours
        workSchedule:
          type: object
          properties:
            mondayWorkingDay:
              description: Allow to indicate if mondays are working days for the employee.
              type: boolean
              example: true
            tuesdayWorkingDay:
              description: Allow to indicate if tuesdays are working days for the employee.
              type: boolean
              example: true
            wednesdayWorkingDay:
              description: >-
                Allow to indicate if wednesdays are working days for the
                employee.
              type: boolean
              example: true
            thursdayWorkingDay:
              description: >-
                Allow to indicate if thursdays are working days for the
                employee.
              type: boolean
              example: true
            fridayWorkingDay:
              description: Allow to indicate if fridays are working days for the employee.
              type: boolean
              example: true
            saturdayWorkingDay:
              description: >-
                Allow to indicate if saturdays are working days for the
                employee.
              type: boolean
              example: true
            sundayWorkingDay:
              description: Allow to indicate if sundays are working days for the employee.
              type: boolean
              example: true
            trackAttendance:
              description: >-
                Allow to activate or deactivate the attendance tracking for the
                employee.
              type: boolean
              example: true
        address:
          type: object
          properties:
            street:
              description: The name of the street.
              type: string
              example: Calle Enrique San Francisco 13
            postalCode:
              description: The postal code.
              type: string
              example: '28080'
            city:
              description: The city.
              type: string
              example: Madrid
            country:
              description: The country code in ISO 3166-1 alpha-2.
              type: string
              example: ES
        financial:
          type: object
          properties:
            accountHolderName:
              description: The accounts holder's name.
              type: string
              example: Michael Corleone
            bankName:
              description: The bank name.
              type: string
              example: Bank of Sicily
            accountNumber:
              description: The account number.
              type: string
              example: 0093 344 2132221 3304 00
            iban:
              description: The IBAN.
              type: string
              example: DE32120222391919191911
            swiftCode:
              description: The SWIFT code.
              type: string
              example: '12321234'
            nationalId:
              description: The national id document.
              type: string
              example: 04123547X
            passport:
              description: The passport number.
              type: string
              example: FA1234098
            nationalInsuranceNumber:
              description: The national insurance number
              type: string
              example: '23123312321'
            taxCode:
              description: The tax number.
              type: string
              example: 323451R
            taxIdentificationNumber:
              description: The tax identification number.
              type: string
              example: T4312345
        home:
          type: object
          properties:
            maritalStatus:
              description: >-
                The marital status. Only is valid one of the following values
                "Divorced", "Domestic Partnership", "Married", "Separated",
                "Single", "Widowed".
              type: string
              example: Widowed
            spouseFirstName:
              description: The first name of the employee's spouse.
              type: string
              example: Catherine
            spouseLastName:
              description: The last name of the employee's spouse.
              type: string
              example: Tramell
            spouseBirthdate:
              description: >-
                The birth date of the employee's spouse. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2060-01-26T00:00:00.000Z'
            spouseGender:
              description: >-
                The employee's spouse gender. Only is valid one of the following
                values 'Male' (male), 'Female' (female) or 'Other' (other).
              type: string
              example: Female
            personalEmail:
              description: The employee personal email.
              type: string
              example: john@acme.io
            personalPhone:
              description: The employee personal phone.
              type: string
              example: '4567092323'
            personalMobile:
              description: The employee personal phone
              type: string
              example: '3567092310'
    EmployeesUpdateEmployeeAccountsRequest:
      type: object
      properties:
        email:
          description: >-
            The employee email in Kenjo. This is an unique identifier and
            required.
          type: string
          example: john@acme.io
        externalId:
          description: >-
            The employee external id for integration proposals. This value must
            be unique.
          type: string
          example: E-000001
        language:
          description: >-
            The employee language. Only is valid one of the following values
            'en' (english), 'es' (spanish) or 'de' (german).
          type: string
          example: en
    EmployeesUpdatePersonalsRequest:
      type: object
      properties:
        firstName:
          description: The name of the Kenjo employee. This field is required.
          type: string
          example: Juanito
        lastName:
          description: The surname of the Kenjo employee. This field is required.
          type: string
          example: Nadie
        displayName:
          description: The composition of firstName and lastName of the Kenjo employee.
          type: string
          example: Juanito Nadie
        gender:
          description: >-
            The gender of the Kenjo employee. Only is valid one of the following
            values 'Male' (male), 'Female' (female) or 'Other' (other).
          type: string
          example: Male
        birthdate:
          description: The employee birth date. Format YYYY-MM-DDThh:mm:ss.000Z.
          type: string
          example: '1980-01-28T00:00:00.000Z'
    EmployeesUpdateWorksRequest:
      type: object
      properties:
        companyId:
          description: The company id of the Kenjo employee.
          type: string
          example: 50a2db290da29e126a187894
        officeId:
          description: The office id of the Kenjo employee.
          type: string
          example: 50a2db290da29e126a187895
        departmentId:
          description: The department id of the Kenjo employee.
          type: string
          example: 50a2db290da29e126a187896
        startDate:
          description: >-
            The starting date of the Kenjo employee in format
            YYYY-MM-DDThh:mm:ss.
          type: string
          example: '2021-07-01T00:00:00.000Z'
        jobTitle:
          description: The job title of the employee.
          type: string
          example: Actor
        workPhone:
          description: The work phone of the employee.
          type: string
          example: +34 666 70 90 32
        workMobile:
          description: The work mobile of the employee.
          type: string
          example: +34 680 70 90 32
        isAssistant:
          description: Allow to indicate if the employee has or not the assistant role.
          type: boolean
          example: false
        probationPeriodEnd:
          description: >-
            The probation period of the employee. Format
            YYYY-MM-DDThh:mm:ss.000Z.
          type: string
          example: '2022-06-01T00:00:00.000Z'
        reportsToId:
          description: >-
            The Kenjo employee id of the user to whom the employee reports. The
            employee id to assign can be an active or inactive user. Trying to
            assign the own employee id or the id of someone who is already
            reporting will arise an error.
          type: string
          example: 50a2db290da29e126a1878523
    EmployeesUpdateWorkScheduleRequest:
      type: object
      properties:
        mondayWorkingDay:
          description: Allow to indicate if mondays are working days for the employee.
          type: boolean
          example: true
        tuesdayWorkingDay:
          description: Allow to indicate if tuesdays are working days for the employee.
          type: boolean
          example: true
        wednesdayWorkingDay:
          description: Allow to indicate if wednesdays are working days for the employee.
          type: boolean
          example: true
        thursdayWorkingDay:
          description: Allow to indicate if thursdays are working days for the employee.
          type: boolean
          example: true
        fridayWorkingDay:
          description: Allow to indicate if fridays are working days for the employee.
          type: boolean
          example: false
        saturdayWorkingDay:
          description: Allow to indicate if saturdays are working days for the employee.
          type: boolean
          example: false
        sundayWorkingDay:
          description: Allow to indicate if sundays are working days for the employee.
          type: boolean
          example: false
    EmployeesUpdateAddressRequest:
      type: object
      properties:
        street:
          description: The name of the street.
          type: string
        postalCode:
          description: The postal code.
          type: string
        city:
          description: The city.
          type: string
        country:
          description: The country code in ISO 3166-1 alpha-2.
          type: string
    EmployeesUpdateFinancialsRequest:
      type: object
      properties:
        accountHolderName:
          description: The accounts holder's name.
          type: string
          example: Michael Corleone
        bankName:
          description: The bank name.
          type: string
          example: Bank of Sicily
        accountNumber:
          description: The account number.
          type: string
          example: 0093 344 2132221 3304 00
        iban:
          description: The IBAN.
          type: string
          example: DE32120222391919191911
        swiftCode:
          description: The SWIFT code.
          type: string
          example: '12321234'
        nationalId:
          description: The national id document.
          type: string
          example: 04123547X
        passport:
          description: The passport number.
          type: string
          example: FA1234098
        nationalInsuranceNumber:
          description: The national insurance number
          type: string
          example: '23123312321'
        taxCode:
          description: The tax number.
          type: string
          example: 323451R
        taxIdentificationNumber:
          description: The tax identification number.
          type: string
          example: T4312345
    EmployeesUpdateHomeRequest:
      type: object
      properties:
        maritalStatus:
          description: >-
            The marital status. Only is valid one of the following values
            "Divorced", "Domestic Partnership", "Married", "Separated",
            "Single", "Widowed".
          type: string
          example: Widowed
        spouseFirstName:
          description: The first name of the employee's spouse.
          type: string
          example: Catherine
        spouseLastName:
          description: The last name of the employee's spouse.
          type: string
          example: Tramell
        spouseBirthdate:
          description: >-
            The birth date of the employee's spouse. Format
            YYYY-MM-DDThh:mm:ss.000Z.
          type: string
          example: '2060-01-26T00:00:00.000Z'
        spouseGender:
          description: >-
            The employee's spouse gender. Only is valid one of the following
            values 'Male' (male), 'Female' (female) or 'Other' (other).
          type: string
          example: Female
        personalEmail:
          description: The employee personal email.
          type: string
          example: john@acme.io
        personalPhone:
          description: The employee personal phone.
          type: string
          example: '4567092323'
        personalMobile:
          description: The employee personal phone
          type: string
          example: '3567092310'
    TimeOffCreateRequestRequest:
      type: object
      properties:
        _userId:
          description: The Kenjo employee *_id*.
          type: string
          example: 50a2db290da29e126a18789a
        _timeOffTypeId:
          description: The Kenjo *time-off type Id* of one existing time-off type.
          type: string
          example: 50a2db290da29e126a18789f
        from:
          description: The starting date of the time-off request in format YYYY-MM-DD.
          type: string
          example: '2020-01-26'
        to:
          description: The ending date of the time-off request in format YYYY-MM-DD.
          type: string
          example: '2020-01-30'
        partOfDayFrom:
          description: >-
            The duration of the *from* date. 'StartOfDay' means that the *from*
            date is the entire day. 'HalfOfDay' means that the request starts to
            apply in the middle of the *from* day. If not specified, the default
            value will be 'StartOfDay'.
          type: string
          enum:
            - StartOfDay
            - HalfOfDay
          example: StartOfDay
        partOfDayTo:
          description: >-
            The duration of the *to* date. 'EndOfDay' means that the *to* date
            is the entire day. 'HalfOfDay' means the request starts to apply in
            the middle of the *to* day. If not specified, the default value will
            be 'EndOfDay'.
          type: string
          enum:
            - HalfOfDay
            - EndOfDay
          example: HalfOfDay
      required:
        - _userId
        - _timeOffTypeId
        - from
        - to
    AuthenticationCreateBearerTokenResponse:
      type: object
      properties:
        token:
          description: A Bearer token to authenticate
          type: string
          example: >-
            Bearer
            eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2FwaS5rZW5qby5pbyIsInN1YiI6IjYwZjBhOTE2MjE0OTg3MjU2YmU5YzhmZiIsImF1ZCI6Imh0dHBzOi8vYXBpLmtlbmpvLmlvIiwiaWF0IjoxNjI2Mzg1MTE1LCJuYmYiOjE2MjYzODUxMTUsImV4cCI6MTYyNjU1NzkxNSwiYWNjZXNzVHlwZSI6IkFwaUFjY2VzcyIsInNfb3JnSWQiOiI2MGYwNGVhN2RmN2JhMjFlY2U0YmYzYzIifQ.cxG_7dIS-VbmDXdJuLkekoyuyCIzQG2fMcgc0nkfbWE8cihhcb5FnALbQkjU9b5-qVcEoMHZlSuUA-jMEBMMVQ
        X-Expires-After:
          description: A expiration date
          type: string
          example: '2021-07-17T21:38:35.872Z'
    AuthenticationCreateBearerToken400Response:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      example:
        code: 400
        message: The param 'id' is not valid.
    AttendanceGetByIdResponse:
      type: object
      properties:
        _id:
          description: The _id of the requested attendance entry.
          type: string
          example: 60a2db290da29e126a18789a
        userId:
          description: The id of the employee associated to the requested attendance entry.
          type: string
          example: 60a2db290da29e126a18789a
        email:
          description: >-
            The email of the employee associated to the requested attendance
            entry.
          type: string
          example: john@acme.io
        externalId:
          description: >-
            The external Id of the employee associated to the requested
            attendance entry.
          type: string
          example: '000034'
        startTime:
          description: The start date time of the requested attendance entry.
          type: string
          example: '2021-07-01T10:00:00.000Z'
        endTime:
          description: The end date time of the requested attendance entry.
          type: string
          example: '2021-07-01T13:00:00.000Z'
        breaks:
          description: Array that contains the breaks in detail.
          type: array
          items:
            type: object
            properties:
              start:
                description: The start time of the break.
                type: string
                example: '11:00:00'
              end:
                description: The end time of the break.
                type: string
                example: '11:30:00'
        breakTime:
          description: >-
            Number of minutes of break time. If there is no 'breaktime' this
            field will not be in the response. This value is the sum of the
            total time of breaks.
          type: number
          example: 30
        attendanceCategoryId:
          description: The Kenjo _id of the attendance category.
          type: string
          example: 70a2db290da29e126a18789a
        attendanceSubCategoryId:
          description: The Kenjo _id of the attendance sub category.
          type: string
          example: 70a2db290da29e126a18789b
        comment:
          description: >-
            Optional text to describe an attendance record (pair of startTime
            and endTime). The maximum number of characters is 150.
          type: string
          example: Morning working attendance tracking.
    AttendanceUpdateEntryResponse:
      type: object
      properties:
        _id:
          description: The _id of the requested attendance entry.
          type: string
        userId:
          description: The id of the employee associated to the requested attendance entry.
          type: string
        email:
          description: >-
            The email of the employee associated to the requested attendance
            entry.
          type: string
        externalId:
          description: >-
            The external Id of the employee associated to the requested
            attendance entry.
          type: string
        startTime:
          description: The start date time of the requested attendance entry.
          type: string
        endTime:
          description: The end date time of the requested attendance entry.
          type: string
        breakTime:
          description: >-
            DEPRECATED field, use the 'breaks' field to specify the breaktime.
            The time in minutes to indicate a break of time. It cannot be
            greater than the total of minutes reported for the attendance entry.
          type: number
        comment:
          description: >-
            Optional text to describe an attendance record (pair of startTime
            and endTime). The maximum number of characters is 150.
          type: string
    AttendanceGetListResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the returned attendance entry.
            type: string
          userId:
            description: The Kenjo _id of the employee assigned to the attendance entry.
            type: string
          email:
            description: The Kenjo email of the employee assigned to the attendance entry.
            type: string
          externalId:
            description: The external id of the employee assigned to the attendance entry.
            type: string
          startTime:
            description: The start date time of the attendance entry.
            type: string
          endTime:
            description: The end date time of the attendance entry.
            type: string
          breaks:
            description: Array that contains the breaks in detail.
            type: array
            items:
              type: object
              properties:
                start:
                  description: The start time of the break.
                  type: string
                end:
                  description: The end time of the break.
                  type: string
          breakTime:
            description: >-
              The break time of the attendance entry. If there is no 'breaktime'
              this field will not be in the response. This value is the sum of
              the total time of breaks.
            type: string
          attendanceCategoryId:
            description: The Kenjo _id of the attendance category.
            type: string
          attendanceSubCategoryId:
            description: The Kenjo _id of the attendance sub category.
            type: string
          comment:
            description: >-
              Optional text to describe an attendance record (pair of startTime
              and endTime). The maximum number of characters is 150.
            type: string
      example:
        - _id: 80a2db290da29e126a18789a
          email: john@acme.io
          userId: 83a2db290da29e126a18789a
          externalId: '00001'
          startTime: '2021-07-01T10:00:00.000Z'
          endTime: '2021-07-01T12:00:00.000Z'
          breaks:
            - start: '11:00:00'
              end: '11:30:00'
          breakTime: 30
          attendanceCategoryId: 70a2db290da29e126a18789a
          attendanceSubCategoryId: 70a2db290da29e126a18789b
          comment: Morning working attendance tracking.
        - _id: 80a2db290da29e126a18789b
          email: anna@acme.io
          userId: 85a2db290da29e126a18789a
          externalId: '00003'
          startTime: '2021-07-02T09:00:00.000Z'
          endTime: '2021-07-02T18:00:00.000Z'
          breaks:
            - start: '11:00:00'
              end: '11:30:00'
            - start: '13:00:00'
              end: '14:00:00'
          breakTime: 90
          attendanceCategoryId: 70a2db290da29e126a18789a
          attendanceSubCategoryId: 70a2db290da29e126a18789b
        - _id: 80a2db290da29e126a18789c
          email: joaquin@acme.io
          userId: 88a2db290da29e126a18789a
          externalId: '00009'
          startTime: '2021-08-01T10:00:00.000Z'
          endTime: '2021-08-01T12:00:00.000Z'
          attendanceCategoryId: 70a2db290da29e126a18789a
        - _id: 80a2db290da29e126a18789d
          email: pedro@acme.io
          userId: 81a2db290da29e126a18789a
          externalId: '00009'
          startTime: '2021-08-02T14:00:00.000Z'
          endTime: '2021-08-02T18:00:00.000Z'
          comment: I've taken the morning off.
    AttendanceCreateEntryResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the new attendance entry.
          type: string
          example: 60a2db290da29e126a18789a
        userId:
          description: The id of the employee assigned to the requested attendance entry.
          type: string
          example: 60a2db290da29e126a18789a
        email:
          description: >-
            The email of the employee assigned to the requested attendance
            entry.
          type: string
          example: john@acme.io
        externalId:
          description: >-
            The external Id of the employee assigned to the requested attendance
            entry.
          type: string
          example: '000034'
        startTime:
          description: The start date time of the created attendance entry
          type: string
          example: '2021-07-01T10:00:00'
        endTime:
          description: The end date time of the created attendance entry.
          type: string
          example: '2021-07-01T13:00:00'
        breaks:
          description: Array that contains the breaks in detail.
          type: array
          items:
            type: object
            properties:
              start:
                description: The start time of the break.
                type: string
                example: '11:00:00'
              end:
                description: The end time of the break.
                type: string
                example: '11:30:00'
        breakTime:
          description: >-
            DEPRECATED field, use the 'breaks' field to specify the breaktime.
            The time in minutes to indicate a break of time. It cannot be
            greater than the total of minutes reported for the attendance entry.
          type: number
          example: 30
        comment:
          description: >-
            Optional text to describe an attendance record (pair of startTime
            and endTime). The maximum number of characters is 150.
          type: string
          example: Morning working attendance tracking.
    AttendanceCreateTrackTimeResponse:
      type: object
      properties:
        userId:
          description: The Kenjo employee *_id*.
          type: string
          example: 50a2db290da29e126a18789a
        email:
          description: The Kenjo *email* for an employee.
          type: string
          example: john@acme.io
        externalId:
          description: The *external id* for an employee for integrations.
          type: string
          example: '00001'
        dateTime:
          description: >-
            The date and the time of the Kenjo employee in format
            YYYY-MM-DDThh:mm:ss.
          type: string
          example: '2021-07-01T09:00:00'
      required:
        - dateTime
    AttendanceGetCategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned attendance category.
                type: string
              name:
                description: The name of the returned attendance category.
                type: string
              parentCategoryId:
                description: The id of the parent attendance category.
                type: string
              isActive:
                description: >-
                  If the attendance category is active then this field is TRUE,
                  otherwise is FALSE.
                type: boolean
          example:
            - _id: 80a2db290da29e126a18789a
              name: Project in Germany
              isActive: true
            - _id: 80a2db290da29e126a18789b
              name: Absence
              parentCategoryId: 80a2db290da29e126a18789a
              isActive: true
            - _id: 80a2db290da29e126a18789b
              name: Project in Spain
              isActive: true
    AttendanceGetExpectedTimeByUserResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              userId:
                description: The Kenjo _id of the returned user.
                type: string
              days:
                description: >-
                  Array that contains the days with the expected time
                  information per user in the provided date range.
                type: array
                items:
                  type: object
                  properties:
                    date:
                      description: The date in format YYYY-MM-DD.
                      type: string
                    expectedHours:
                      description: The number of expected hours for a given day.
                      type: number
                    expectedMinutes:
                      description: The number of expected minutes for a given day.
                      type: number
              totalExpectedHours:
                description: >-
                  The total number of expected hours for an user in a given date
                  range.
                type: number
              totalExpectedMinutes:
                description: >-
                  The total number of expected minutes for an user in a given
                  date range.
                type: number
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - userId: 80a2db290da29e126a18789a
            days:
              - date: '2020-01-01T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-02T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-03T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-04T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-05T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-06T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
              - date: '2020-01-07T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
              - date: '2020-01-08T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-09T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-10T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
            totalExpectedHours: 64
            totalExpectedMinutes: 3840
          - userId: 80a2db290da29e126a18789b
            days:
              - date: '2020-01-01T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-02T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-03T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-04T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-05T00:00:00.000Z'
                expectedHours: 8
                expectedMinutes: 480
              - date: '2020-01-06T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
              - date: '2020-01-07T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
              - date: '2020-01-08T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
              - date: '2020-01-09T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
              - date: '2020-01-10T00:00:00.000Z'
                expectedHours: 0
                expectedMinutes: 0
            totalExpectedHours: 40
            totalExpectedMinutes: 2400
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
    CompaniesGetListResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the company.
            type: string
            example: 40a2db290da29e126a18789a
          name:
            description: The name of the company.
            type: string
            example: ACME Ltd
          city:
            description: The city of the company.
            type: string
            example: Madrid
          country:
            description: The country code of the company in ISO 3166-1 alpha-2.
            type: string
            example: ES
      example:
        - _id: 40a2db290da29e126a18789a
          name: ACME Ltd
        - _id: 40a2db290da29e126a18789b
          name: ACME SA
    OfficesGetListResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the office.
            type: string
            example: 40a2db290da29e126a18789a
          name:
            description: The name of the office.
            type: string
            example: Berlin office
          companyId:
            description: The Kenjo id of the company.
            type: string
            example: 40a2db290da29e126a187892
          calendarId:
            description: The Kenjo id of the calendar.
            type: string
            example: 40a2db290da29e126a187895
          street:
            description: The street of the office.
            type: string
            example: Urbanstrasse, 71
          postalCode:
            description: The postal code of the office.
            type: string
            example: 34213
          city:
            description: The city of the office.
            type: string
            example: Berlin
          country:
            description: The country of the office in ISO code.
            type: string
            example: DE
      example:
        - _id: 50a2db290da29e126a18789a
          name: ACME Berlin
          companyId: 5b8555a97b62b223d27598c7
          calendarId: 5b8555a97b62b223d275a176
          street: Urbanstr. 71
          postalCode: 10967
          city: Berlin
          country: DE
        - _id: 50a2db290da29e126a18789b
          name: ACME London
          companyId: 5b8555a97b62b223d27598c4
          calendarId: 5b8555a97b62b223d275a175
          street: Park Street 20
          postalCode: 12342
          city: London
          country: GB
        - _id: 50a2db290da29e126a18789c
          name: ACME Madrid
          companyId: 5b8555a97b62b223d27598c6
          calendarId: 5b8555a97b62b223d275a177
          street: Manuel Ferrero, 19
          postalCode: 28096
          city: Madrid
          country: ES
    OfficesCreateNewOfficeResponse:
      type: object
      properties:
        _id:
          description: The Kenjo id of the new office.
          type: string
          example: 60f808f727ad58fe791bae9e
        name:
          description: The new name of the office to create.
          type: string
          example: Spain office
        companyId:
          description: The company id of the office to create.
          type: string
          example: 60dadb6362702d057f8fb486
        calendarId:
          description: The calendar id of the office to create.
          type: string
          example: 60f808f727ad58fe791bae91
        country:
          description: The country of the office to create.
          type: string
          example: ES
        postalCode:
          description: The postalcode of the office to create.
          type: string
          example: '28030'
        city:
          description: The city of the office to create.
          type: string
          example: Madrid
        street:
          description: The street of the office to create.
          type: string
          example: Paseo Castellana
    OfficesGetByIdResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the office.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the office.
          type: string
          example: Spain office
        companyId:
          description: The Kenjo id of the company.
          type: string
          example: 40a2db290da29e126a187892
        calendarId:
          description: The Kenjo id of the calendar.
          type: string
          example: 40a2db290da29e126a187895
        street:
          description: The street of the office.
          type: string
          example: Paseo Castellana, 13
        postalCode:
          description: The postal code of the office.
          type: string
          example: 28030
        city:
          description: The city of the office.
          type: string
          example: Madrid
        country:
          description: The country of the office in ISO code.
          type: string
          example: ES
    OfficesUpdateOfficeAttributesResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the office.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The new name of the office to update.
          type: string
          example: Madrid office
    DepartmentsListDepartmentsResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the department.
            type: string
            example: 40a2db290da29e126a18789a
          name:
            description: The name of the department.
            type: string
            example: Sales
      example:
        - _id: 60a2db290da29e126a18789a
          name: Sales
        - _id: 60a2db290da29e126a18789b
          name: Marketing
        - _id: 60a2db290da29e126a18789c
          name: Tech
        - _id: 60a2db290da29e126a18789d
          name: Finance
        - _id: 60a2db290da29e126a18789e
          name: Customer Success
    DepartmentsCreateNewDepartmentResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the department.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the department.
          type: string
          example: Sales
    DepartmentsGetByIdResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the department.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the department.
          type: string
          example: Sales
    DepartmentsUpdateAttributesResponse:
      type: object
      properties:
        name:
          description: The new name of the department to update.
          type: string
          example: Sales
        _id:
          description: The Kenjo _id of the department.
          type: string
          example: 40a2db290da29e126a18789a
    TeamsGetListResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the team.
            type: string
            example: 40a2db290da29e126a18789a
          name:
            description: The name of the team.
            type: string
            example: Tech backend
      example:
        - _id: 60a2db290da29e126a18789a
          name: Tech backend
        - _id: 60a2db290da29e126a18789b
          name: Tech devOps
        - _id: 60a2db290da29e126a18789c
          name: Tech frontend
    TeamsCreateTeamResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the team.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the department.
          type: string
          example: Tech devOps
    TeamsGetByIdResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the team.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the team.
          type: string
          example: Tech devOps
    TeamsUpdateTeamAttributesResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the team.
          type: string
          example: 60a2db290da29e126a18789a
        name:
          description: The new name of the team to update.
          type: string
          example: Sales
    AreasGetListResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the area.
            type: string
            example: 40a2db290da29e126a18789a
          name:
            description: The name of the area.
            type: string
            example: Recruiting feature
    AreasCreateNewAreaResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the area.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the area.
          type: string
          example: Recruiting feature
    AreasGetByIdResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the area.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the area.
          type: string
          example: Recruiting feature
    AreasUpdateAreaByIdResponse:
      type: object
      properties:
        name:
          description: The new name of the area to update.
          type: string
          example: Sales
        _id:
          description: The Kenjo _id of the area.
          type: string
          example: 40a2db290da29e126a18789a
    CalendarsGetListResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo _id of the calendar.
            type: string
            example: 40a2db290da29e126a18789a
          name:
            description: The name of the calendar.
            type: string
            example: Standard calendar
      example:
        - _id: 60a2db290da29e126a18789a
          name: Standard calendar
        - _id: 60a2db290da29e126a18789b
          name: Madrid calendar
        - _id: 60a2db290da29e126a18789c
          name: Tech calendar
    CalendarsGetByIdResponse:
      type: object
      properties:
        _id:
          description: The Kenjo _id of the calendar.
          type: string
          example: 40a2db290da29e126a18789a
        name:
          description: The name of the calendar.
          type: string
          example: Standard calendar
    UserAccountsListEmployeesResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            description: The Kenjo employee _id.
            type: string
          email:
            description: The employee email in Kenjo.
            type: string
          isActive:
            description: Indicates the active status of the Kenjo employee.
            type: string
          firstName:
            description: The first name of the Kenjo employee.
            type: string
          lastName:
            description: The last name of the Kenjo employee.
            type: string
          displayName:
            description: The complete name of the Kenjo employee.
            type: string
          companyId:
            description: The Kenjo Id of the company for this employee.
            type: string
          officeId:
            description: The Kenjo Id of the office for this employee.
            type: string
          departmentId:
            description: The Kenjo Id of the department for this employee.
            type: string
          jobTitle:
            description: The job title for this employee.
            type: string
      example:
        - _id: 80a2db290da29e126a18789a
          email: john@acme.io
          isActive: true
          firstName: John
          lastName: Doo
          displayName: John Doo
          companyId: 82a2db290da29e126a18789a
          officeId: 83a2db290da29e126a18789a
          departmentId: 84a2db290da29e126a18789a
          jobTitle: 84a2db290da29e126a18789a
        - _id: 80a2db290da29e126a18789b
          email: anna@acme.io
          isActive: true
          firstName: Anna
          lastName: Kaleshnikova
          displayName: Anna Kaleshnikova
          companyId: 82a2db290da29e126a18789a
          officeId: 83a2db290da29e126a18789a
          departmentId: 84a2db290da29e126a18789a
          jobTitle: 84a2db290da29e126a18789a
        - _id: 80a2db290da29e126a18789c
          email: joaquin@acme.io
          isActive: true
          firstName: Joaquin
          lastName: Padrazo
          displayName: Joaquin Padrazo
          companyId: 82a2db290da29e126a18789a
          officeId: 83a2db290da29e126a18789a
          departmentId: 84a2db290da29e126a18789a
          jobTitle: 84a2db290da29e126a18789a
    EmployeesGetListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo employee _id.
                type: string
              email:
                description: The employee email in Kenjo.
                type: string
              isActive:
                description: Indicates the active status of the Kenjo employee.
                type: string
              externalId:
                description: The external id for this employee.
                type: string
              language:
                description: >-
                  The employee language. The available values are 'en'
                  (english), 'es' (spanish) or 'de' (german).
                type: string
      example:
        data:
          - _id: 80a2db290da29e126a18789a
            email: john@acme.io
            isActive: true
            externalId: E-000001
            language: de
          - _id: 80a2db290da29e126a18789b
            email: anna@acme.io
            isActive: true
            externalId: E-000002
            language: es
          - _id: 80a2db290da29e126a18789c
            email: joaquin@acme.io
            isActive: true
            externalId: E-000003
            language: de
    EmployeesCreateInactiveEmployeeResponse:
      type: object
      properties:
        account:
          type: object
          properties:
            _id:
              description: The employee Kenjo *_id*.
              type: string
              example: 50a2db290da29e126a187843
            email:
              description: The employee email in Kenjo.
              type: string
              example: john@acme.io
            externalId:
              description: The employee external id for integration proposals.
              type: string
              example: E-000001
            isActive:
              description: The activation status, once created is false.
              type: string
              example: false
            language:
              description: >-
                The employee language. Only is valid one of the following values
                'en' (english), 'es' (spanish) or 'de' (german).
              type: string
              example: es
        personal:
          type: object
          properties:
            firstName:
              description: The name of the Kenjo employee. This field is required.
              type: string
              example: John
            lastName:
              description: The surname of the Kenjo employee. This field is required.
              type: string
              example: Doe
            displayName:
              description: The complete name of the Kenjo employee.
              type: string
              example: John Doe
            gender:
              description: >-
                The employee gender. Only is valid one of the following values
                'Male' (male), 'Female' (female) or 'Other' (other).
              type: string
              example: Male
            birthdate:
              description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
              type: string
              example: '1980-01-28T00:00:00.000Z'
        work:
          type: object
          properties:
            companyId:
              description: The company id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187894
            officeId:
              description: The office id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187895
            departmentId:
              description: The department id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187896
            startDate:
              description: The starting date of the employee in ISO format.
              type: string
              example: '2022-01-01T00:00:00.000Z'
            jobTitle:
              description: The job title of the employee.
              type: string
              example: Actor
            workPhone:
              description: The work phone of the employee.
              type: string
              example: +34 666 70 90 32
            workMobile:
              description: The work mobile of the employee.
              type: string
              example: +34 680 70 90 32
            isAssistant:
              description: Allow to indicate if the employee has or not the assistant role.
              type: boolean
              example: false
            probationPeriodEnd:
              description: >-
                The probation period of the employee. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2022-06-01T00:00:00.000Z'
            reportsToId:
              description: >-
                The Kenjo employee id of the user to whom the employee reports.
                The employee id to assign can be an active or inactive user.
                Trying to assign the own employee id or the id of someone who is
                already reporting will arise an error.
              type: string
              example: 50a2db290da29e126a1878523
            weeklyHours:
              description: >-
                The number of weekly hours that an employee works. Combined with
                the work schedule allows to determine the day hours. This field
                is required and must be equals or greater than 1.
              type: number
              example: 40
        workSchedule:
          type: object
          properties:
            mondayWorkingDay:
              description: Allow to indicate if mondays are working days for the employee.
              type: boolean
              example: true
            tuesdayWorkingDay:
              description: Allow to indicate if tuesdays are working days for the employee.
              type: boolean
              example: true
            wednesdayWorkingDay:
              description: >-
                Allow to indicate if wednesdays are working days for the
                employee.
              type: boolean
              example: true
            thursdayWorkingDay:
              description: >-
                Allow to indicate if thursdays are working days for the
                employee.
              type: boolean
              example: true
            fridayWorkingDay:
              description: Allow to indicate if fridays are working days for the employee.
              type: boolean
              example: true
            saturdayWorkingDay:
              description: >-
                Allow to indicate if saturdays are working days for the
                employee.
              type: boolean
              example: true
            sundayWorkingDay:
              description: Allow to indicate if sundays are working days for the employee.
              type: boolean
              example: true
            trackAttendance:
              description: The activation status of attendance tracking for the employee.
              type: boolean
              example: true
        address:
          type: object
          properties:
            street:
              description: The name of the street.
              type: string
              example: Calle Enrique San Francisco 13
            postalCode:
              description: The postal code.
              type: string
              example: '28080'
            city:
              description: The city.
              type: string
              example: Madrid
            country:
              description: The country code in ISO 3166-1 alpha-2.
              type: string
              example: ES
        financial:
          type: object
          properties:
            accountHolderName:
              description: The accounts holder's name.
              type: string
              example: Michael Corleone
            bankName:
              description: The bank name.
              type: string
              example: Bank of Sicily
            accountNumber:
              description: The account number.
              type: string
              example: 0093 344 2132221 3304 00
            iban:
              description: The IBAN.
              type: string
              example: DE32120222391919191911
            swiftCode:
              description: The SWIFT code.
              type: string
              example: '12321234'
            nationalId:
              description: The national id document.
              type: string
              example: 04123547X
            passport:
              description: The passport number.
              type: string
              example: FA1234098
            nationalInsuranceNumber:
              description: The national insurance number
              type: string
              example: '23123312321'
            taxCode:
              description: The tax number.
              type: string
              example: 323451R
            taxIdentificationNumber:
              description: The tax identification number.
              type: string
              example: T4312345
        home:
          type: object
          properties:
            maritalStatus:
              description: >-
                The marital status. Only is valid one of the following values
                "Divorced", "Domestic Partnership", "Married", "Separated",
                "Single", "Widowed".
              type: string
              example: Widowed
            spouseFirstName:
              description: The first name of the employee's spouse.
              type: string
              example: Catherine
            spouseLastName:
              description: The last name of the employee's spouse.
              type: string
              example: Tramell
            spouseBirthdate:
              description: >-
                The birth date of the employee's spouse. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2060-01-26T00:00:00.000Z'
            spouseGender:
              description: >-
                The employee's spouse gender. Only is valid one of the following
                values 'Male' (male), 'Female' (female) or 'Other' (other).
              type: string
              example: Female
            personalEmail:
              description: The employee personal email.
              type: string
              example: john@acme.io
            personalPhone:
              description: The employee personal phone.
              type: string
              example: '4567092323'
            personalMobile:
              description: The employee personal phone
              type: string
              example: '3567092310'
    EmployeesGetEmployeeInformationResponse:
      type: object
      properties:
        account:
          type: object
          properties:
            _id:
              description: The employee Kenjo *_id*.
              type: string
              example: 50a2db290da29e126a187843
            email:
              description: >-
                The employee email in Kenjo. This is an unique identifier and
                required.
              type: string
              example: john@acme.io
            externalId:
              description: The employee external id for integration proposals.
              type: string
              example: E-000001
            isActive:
              description: The employee activation status.
              type: boolean
              example: true
            language:
              description: >-
                The employee language. The available values are 'en' (english),
                'es' (spanish) or 'de' (german).
              type: string
              example: es
        personal:
          type: object
          properties:
            firstName:
              description: The name of the Kenjo employee. This field is required.
              type: string
              example: John
            lastName:
              description: The surname of the Kenjo employee. This field is required.
              type: string
              example: Doe
            displayName:
              description: The composition of firstName and lastName of the Kenjo employee.
              type: string
              example: John Doe
            gender:
              description: The gender of the Kenjo employee.
              type: string
              example: Male
            birthdate:
              description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
              type: string
              example: '1980-01-28T00:00:00.000Z'
        work:
          type: object
          properties:
            companyId:
              description: The company id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187894
            officeId:
              description: The office id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187895
            departmentId:
              description: The department id of the Kenjo employee.
              type: string
              example: 50a2db290da29e126a187896
            startDate:
              description: >-
                The starting date of the Kenjo employee in format
                YYYY-MM-DDThh:mm:ss.
              type: string
              example: '2021-07-01T00:00:00.000Z'
            jobTitle:
              description: The job title of the employee.
              type: string
              example: Actor
            workPhone:
              description: The work phone of the employee.
              type: string
              example: +34 666 70 90 32
            workMobile:
              description: The work mobile of the employee.
              type: string
              example: +34 680 70 90 32
            isAssistant:
              description: Allow to indicate if the employee has or not the assistant role.
              type: boolean
              example: false
            probationPeriodEnd:
              description: >-
                The probation period of the employee. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2022-06-01T00:00:00.000Z'
            reportsToId:
              description: >-
                The Kenjo employee id of the user to whom the employee reports.
                The employee id to assign can be an active or inactive user.
                Trying to assign the own employee id or the id of someone who is
                already reporting will arise an error.
              type: string
              example: 50a2db290da29e126a1878523
        workSchedule:
          type: object
          properties:
            mondayWorkingDay:
              description: Allow to indicate if mondays are working days for the employee.
              type: boolean
              example: true
            tuesdayWorkingDay:
              description: Allow to indicate if tuesdays are working days for the employee.
              type: boolean
              example: true
            wednesdayWorkingDay:
              description: >-
                Allow to indicate if wednesdays are working days for the
                employee.
              type: boolean
              example: true
            thursdayWorkingDay:
              description: >-
                Allow to indicate if thursdays are working days for the
                employee.
              type: boolean
              example: true
            fridayWorkingDay:
              description: Allow to indicate if fridays are working days for the employee.
              type: boolean
              example: true
            saturdayWorkingDay:
              description: >-
                Allow to indicate if saturdays are working days for the
                employee.
              type: boolean
              example: true
            sundayWorkingDay:
              description: Allow to indicate if sundays are working days for the employee.
              type: boolean
              example: true
        address:
          type: object
          properties:
            street:
              description: The name of the street.
              type: string
              example: Calle Enrique San Francisco 13
            postalCode:
              description: The postal code.
              type: string
              example: '28080'
            city:
              description: The city.
              type: string
              example: Madrid
            country:
              description: The country code in ISO 3166-1 alpha-2.
              type: string
              example: ES
        financial:
          type: object
          properties:
            accountHolderName:
              description: The accounts holder's name.
              type: string
              example: Michael Corleone
            bankName:
              description: The bank name.
              type: string
              example: Bank of Sicily
            accountNumber:
              description: The account number.
              type: string
              example: 0093 344 2132221 3304 00
            iban:
              description: The IBAN.
              type: string
              example: DE32120222391919191911
            swiftCode:
              description: The SWIFT code.
              type: string
              example: '12321234'
            nationalId:
              description: The national id document.
              type: string
              example: 04123547X
            passport:
              description: The passport number.
              type: string
              example: FA1234098
            nationalInsuranceNumber:
              description: The national insurance number
              type: string
              example: '23123312321'
            taxCode:
              description: The tax number.
              type: string
              example: 323451R
            taxIdentificationNumber:
              description: The tax identification number.
              type: string
              example: T4312345
        home:
          type: object
          properties:
            maritalStatus:
              description: >-
                The marital status. Only is valid one of the following values
                "Divorced", "Domestic Partnership", "Married", "Separated",
                "Single", "Widowed".
              type: string
              example: Widowed
            spouseFirstName:
              description: The first name of the employee's spouse.
              type: string
              example: Catherine
            spouseLastName:
              description: The last name of the employee's spouse.
              type: string
              example: Tramell
            spouseBirthdate:
              description: >-
                The birth date of the employee's spouse. Format
                YYYY-MM-DDThh:mm:ss.000Z.
              type: string
              example: '2060-01-26T00:00:00.000Z'
            spouseGender:
              description: >-
                The employee's spouse gender. Only is valid one of the following
                values 'Male' (male), 'Female' (female) or 'Other' (other).
              type: string
              example: Female
            personalEmail:
              description: The employee personal email.
              type: string
              example: john@acme.io
            personalPhone:
              description: The employee personal phone.
              type: string
              example: '4567092323'
            personalMobile:
              description: The employee personal phone
              type: string
              example: '3567092310'
    EmployeesGetAccountsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned attendance entry.
                type: string
              email:
                description: The Kenjo email of the employee.
                type: string
              externalId:
                description: The external id of the employee.
                type: string
              language:
                description: The employee language.
                type: string
                enum:
                  - en
                  - de
                  - es
              isActive:
                description: The employee activation status.
                type: boolean
      example:
        data:
          - _id: 80a2db290da29e126a18789a
            email: john@acme.io
            externalId: '00001'
            language: en
            isActive: true
          - _id: 80a2db290da29e126a18789a
            email: anna@acme.io
            externalId: '00003'
            language: en
            isActive: false
          - _id: 80a2db290da29e126a18789a
            email: joaquin@acme.io
            externalId: '00009'
            language: en
            isActive: true
    EmployeesListPersonalsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The _id of the Kenjo employee.
                type: string
              firstName:
                description: The name of the Kenjo employee. This field is required.
                type: string
              lastName:
                description: The surname of the Kenjo employee. This field is required.
                type: string
              displayName:
                description: >-
                  The composition of firstName and lastName of the Kenjo
                  employee.
                type: string
              gender:
                description: >-
                  The employee gender. Only is valid one of the following values
                  'Male' (male), 'Female' (female) or 'Other' (other).
                type: string
              birthdate:
                description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
                type: string
                example: '1980-01-28T00:00:00.000Z'
          example:
            - _id: 80a2db290da29e126a18789a
              firstName: John
              lastName: Doe
              displayName: John Doe
              gender: Male
              birthdate: '1989-03-09T00:00:00.000Z'
            - _id: 80a2db290da29e126a18789a
              firstName: Anna
              lastName: Kalevnikova
              displayName: Anna Kalevnikova
              gender: Female
              birthdate: '1980-05-19T00:00:00.000Z'
            - _id: 80a2db290da29e126a18789a
              firstName: Elvira
              lastName: Dos Pasos
              displayName: Elvira Dos Pasos
              gender: Female
              birthdate: '1980-10-20T00:00:00.000Z'
    EmployeesListWorksResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The _id of the Kenjo employee.
                type: string
              companyId:
                description: The company id of the Kenjo employee.
                type: string
              officeId:
                description: The office id of the Kenjo employee.
                type: string
              departmentId:
                description: The department id of the Kenjo employee.
                type: string
              startDate:
                description: >-
                  The starting date of the Kenjo employee in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
              jobTitle:
                description: The job title of the employee.
                type: string
                example: Actor
              workPhone:
                description: The work phone of the employee.
                type: string
                example: +34 666 70 90 32
              workMobile:
                description: The work mobile of the employee.
                type: string
                example: +34 680 70 90 32
              isAssistant:
                description: >-
                  Allow to indicate if the employee has or not the assistant
                  role.
                type: boolean
                example: false
              probationPeriodEnd:
                description: >-
                  The probation period of the employee. Format
                  YYYY-MM-DDThh:mm:ss.000Z.
                type: string
                example: '2022-06-01T00:00:00.000Z'
              reportsToId:
                description: >-
                  The Kenjo employee id of the user to whom the employee
                  reports. The employee id to assign can be an active or
                  inactive user. Trying to assign the own employee id or the id
                  of someone who is already reporting will arise an error.
                type: string
                example: 50a2db290da29e126a1878523
          example:
            - _id: 10a2db290da29e126a18789a
              companyId: 80a2db290da29e126a18789a
              officeId: 80a2db290da29e126a18789b
              departmentId: 80a2db290da29e126a18789c
              startDate: '2020-07-01T00:00:00.000Z'
              jobTitle: Actor
              workPhone: +34 657 89 76 52
              workMobile: +34 656 89 76 52
              isAssistant: false
              probationPeriodEnd: '2022-06-01T00:00:00.000Z'
              reportsToId: 50a2db290da29e126a1878523
            - _id: 20a2db290da29e126a18789a
              companyId: 80a2db290da29e126a18789a
              officeId: 80a2db290da29e126a18789b
              departmentId: 80a2db290da29e126a18789c
              startDate: '2021-01-01T00:00:00.000Z'
              jobTitle: Director
              workPhone: +34 657 89 76 52
              workMobile: +34 656 89 76 52
              isAssistant: true
              probationPeriodEnd: '2022-06-01T00:00:00.000Z'
              reportsToId: 50a2db290da29e126a1878523
            - _id: 30a2db290da29e126a18789a
              companyId: 80a2db290da29e126a18789a
              officeId: 80a2db290da29e126a18789b
              departmentId: 80a2db290da29e126a18789c
              startDate: '2021-07-01T00:00:00.000Z'
              jobTitle: Musician
              workPhone: +34 658 89 76 52
              workMobile: +34 659 89 76 52
              isAssistant: false
              probationPeriodEnd: '2022-06-01T00:00:00.000Z'
              reportsToId: 50a2db290da29e126a1878527
    EmployeesGetWorkSchedulesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The _id of the Kenjo employee.
                type: string
              mondayWorkingDay:
                description: Indicate if mondays are working days for the employee.
                type: boolean
              tuesdayWorkingDay:
                description: Indicate if tuesdays are working days for the employee.
                type: boolean
              wednesdayWorkingDay:
                description: Indicate if wednesdays are working days for the employee.
                type: boolean
              thursdayWorkingDay:
                description: Indicate if thursdays are working days for the employee.
                type: boolean
              fridayWorkingDay:
                description: Indicate if fridays are working days for the employee.
                type: boolean
              saturdayWorkingDay:
                description: Indicate if saturdays are working days for the employee.
                type: boolean
              sundayWorkingDay:
                description: Indicate if sundays are working days for the employee.
                type: boolean
              trackAttendance:
                description: The activation status of attendance tracking for the employee.
                type: boolean
          example:
            - _id: 10a2db290da29e126a18789a
              mondayWorkingDay: true
              tuesdayWorkingDay: true
              wednesdayWorkingDay: true
              thursdayWorkingDay: true
              fridayWorkingDay: false
              saturdayWorkingDay: false
              sundayWorkingDay: false
              trackAttendance: true
            - _id: 20a2db290da29e126a18789a
              mondayWorkingDay: true
              tuesdayWorkingDay: true
              wednesdayWorkingDay: true
              thursdayWorkingDay: true
              fridayWorkingDay: true
              saturdayWorkingDay: false
              sundayWorkingDay: false
              trackAttendance: false
            - _id: 30a2db290da29e126a18789a
              mondayWorkingDay: true
              tuesdayWorkingDay: true
              wednesdayWorkingDay: true
              thursdayWorkingDay: true
              fridayWorkingDay: true
              saturdayWorkingDay: false
              sundayWorkingDay: false
              trackAttendance: true
    EmployeesListAddressesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The _id of the Kenjo employee.
                type: string
              street:
                description: The name of the street.
                type: string
              postalCode:
                description: The postal code.
                type: string
              city:
                description: The city.
                type: string
              country:
                description: The country code in ISO 3166-1 alpha-2.
                type: string
          example:
            - _id: 80a2db290da29e126a18789a
              street: Calle Enrique San Francisco 13
              postalCode: '28080'
              city: Madrid
              country: ES
            - _id: 80a2db290da29e126a18789a
              street: Marlon Brando St, 23-11
              postalCode: '34212'
              city: Paris
              country: FR
            - _id: 80a2db290da29e126a18789a
              street: James Gandolfini St, 34
              postalCode: '34213'
              city: New Jersey
              country: US
    EmployeesListFinancialsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The _id of the Kenjo employee.
                type: string
              accountHolderName:
                description: The accounts holder's name.
                type: string
                example: Michael Corleone
              bankName:
                description: The bank name.
                type: string
                example: Bank of Sicily
              accountNumber:
                description: The account number.
                type: string
                example: 0093 344 2132221 3304 00
              iban:
                description: The IBAN.
                type: string
                example: DE32120222391919191911
              swiftCode:
                description: The SWIFT code.
                type: string
                example: '12321234'
              nationalId:
                description: The national id document.
                type: string
                example: 04123547X
              passport:
                description: The passport number.
                type: string
                example: FA1234098
              nationalInsuranceNumber:
                description: The national insurance number.
                type: string
                example: '23123312321'
              taxCode:
                description: The tax number.
                type: string
                example: 323451R
              taxIdentificationNumber:
                description: The tax identification number.
                type: string
                example: T4312345
          example:
            - _id: 80a2db290da29e126a18789a
              accountHolderName: Michael Corleone
              bankName: Bank of Sicily
              accountNumber: 0093 344 2132221 3304 00
              iban: DE32120222391919191911
              swiftCode: '12321234'
              nationalId: 12123547R
              passport: MK1234098
              nationalInsuranceNumber: '23123312321'
              taxCode: 323451R
              taxIdentificationNumber: T4312345
            - _id: 80a2db290da29e126a187894
              accountHolderName: Tony Soprano
              bankName: Bank of New Jersey
              accountNumber: 0093 344 3212121 3304 00
              iban: IT32120222391919191911
              swiftCode: '3212235'
              nationalId: 09123547J
              passport: TQ1234098
              nationalInsuranceNumber: '23123312321'
              taxCode: 453251R
              taxIdentificationNumber: J4312345
            - _id: 80a2db290da29e126a187892
              accountHolderName: Donnie Brasco
              bankName: Bank of Chicago
              accountNumber: 0093 344 12312312 3304 00
              iban: ES32120222391919191911
              swiftCode: '12312567'
              nationalId: 04123547X
              passport: FA1234098
              nationalInsuranceNumber: '23123312321'
              taxCode: 543251R
              taxIdentificationNumber: F4312345
    EmployeesListHomesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The _id of the Kenjo employee.
                type: string
              maritalStatus:
                description: >-
                  The marital status. Only is valid one of the following values
                  "Divorced", "Domestic Partnership", "Married", "Separated",
                  "Single", "Widowed".
                type: string
                example: Widowed
              spouseFirstName:
                description: The first name of the employee's spouse.
                type: string
                example: Catherine
              spouseLastName:
                description: The last name of the employee's spouse.
                type: string
                example: Tramell
              spouseBirthdate:
                description: >-
                  The birth date of the employee's spouse. Format
                  YYYY-MM-DDThh:mm:ss.000Z.
                type: string
                example: '2060-01-26T00:00:00.000Z'
              spouseGender:
                description: >-
                  The employee's spouse gender. Only is valid one of the
                  following values 'Male' (male), 'Female' (female) or 'Other'
                  (other).
                type: string
                example: Female
              personalEmail:
                description: The employee personal email.
                type: string
                example: john@acme.io
              personalPhone:
                description: The employee personal phone.
                type: string
                example: '4567092324'
              personalMobile:
                description: The employee personal mobile.
                type: string
                example: '3567092310'
          example:
            - _id: 80a2db290da29e126a187894
              maritalStatus: Widowed
              spouseFirstName: Catherine
              spouseLastName: Tramell
              spouseBirthdate: '2060-01-26T00:00:00.000Z'
              spouseGender: Female
              personalEmail: john@acme.io
              personalPhone: '4567092323'
              personalMobile: '3567092310'
            - _id: 80a2db290da29e126a187896
              maritalStatus: Divorced
              spouseFirstName: Beatrix
              spouseLastName: Kido
              spouseBirthdate: '2067-04-20T00:00:00.000Z'
              spouseGender: Female
              personalEmail: phillip@acme.io
              personalPhone: '8767092323'
              personalMobile: '33267092310'
            - _id: 80a2db290da29e126a187899
              maritalStatus: Divorced
              spouseFirstName: Ross
              spouseLastName: Geller
              spouseBirthdate: '2068-12-06T00:00:00.000Z'
              spouseGender: Male
              personalEmail: lina@acme.io
              personalPhone: '4167092323'
              personalMobile: '78567092310'
    EmployeesUpdateEmployeeAccountsResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 50a2db290da29e126a187843
        email:
          description: >-
            The employee email in Kenjo. This is an unique identifier and
            required.
          type: string
          example: john@acme.io
        externalId:
          description: The employee external id for integration proposals.
          type: string
          example: E-000001
        language:
          description: The employee language in integrations.
          type: string
          example: es
    EmployeesUpdatePersonalsResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 60a2db290da29e126a18789a
        firstName:
          description: The name of the Kenjo employee. This field is required.
          type: string
          example: Juanito
        lastName:
          description: The surname of the Kenjo employee. This field is required.
          type: string
          example: Nadie
        displayName:
          description: The composition of firstName and lastName of the Kenjo employee.
          type: string
          example: Juanito Nadie
        gender:
          description: The gender of the Kenjo employee.
          type: string
          example: male
        birthdate:
          description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
          type: string
          example: '1980-01-28T00:00:00.000Z'
    EmployeesUpdateWorksResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 60a2db290da29e126a18789a
        companyId:
          description: The company id of the Kenjo employee.
          type: string
          example: 50a2db290da29e126a187894
        officeId:
          description: The office id of the Kenjo employee.
          type: string
          example: 50a2db290da29e126a187895
        departmentId:
          description: The department id of the Kenjo employee.
          type: string
          example: 50a2db290da29e126a187896
        startDate:
          description: >-
            The starting date of the Kenjo employee in format
            YYYY-MM-DDThh:mm:ss.
          type: string
          example: '2021-07-01T00:00:00.000Z'
        jobTitle:
          description: The job title of the employee.
          type: string
          example: Actor
        workPhone:
          description: The work phone of the employee.
          type: string
          example: +34 666 70 90 32
        workMobile:
          description: The work mobile of the employee.
          type: string
          example: +34 680 70 90 32
        isAssistant:
          description: Allow to indicate if the employee has or not the assistant role.
          type: boolean
          example: false
        probationPeriodEnd:
          description: >-
            The probation period of the employee. Format
            YYYY-MM-DDThh:mm:ss.000Z.
          type: string
          example: '2022-06-01T00:00:00.000Z'
        reportsToId:
          description: >-
            The Kenjo employee id of the user to whom the employee reports. The
            employee id to assign can be an active or inactive user. Trying to
            assign the own employee id or the id of someone who is already
            reporting will arise an error.
          type: string
          example: 50a2db290da29e126a1878523
    EmployeesUpdateWorkScheduleResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 60a2db290da29e126a18789a
        mondayWorkingDay:
          description: Allow to indicate if mondays are working days for the employee.
          type: boolean
          example: true
        tuesdayWorkingDay:
          description: Allow to indicate if tuesdays are working days for the employee.
          type: boolean
          example: true
        wednesdayWorkingDay:
          description: Allow to indicate if wednesdays are working days for the employee.
          type: boolean
          example: true
        thursdayWorkingDay:
          description: Allow to indicate if thursdays are working days for the employee.
          type: boolean
          example: true
        fridayWorkingDay:
          description: Allow to indicate if fridays are working days for the employee.
          type: boolean
          example: false
        saturdayWorkingDay:
          description: Allow to indicate if saturdays are working days for the employee.
          type: boolean
          example: false
        sundayWorkingDay:
          description: Allow to indicate if sundays are working days for the employee.
          type: boolean
          example: false
    EmployeesUpdateAddressResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 60a2db290da29e126a18789a
        street:
          description: The name of the street.
          type: string
        postalCode:
          description: The postal code.
          type: string
        city:
          description: The city.
          type: string
        country:
          description: The country code in ISO 3166-1 alpha-2.
          type: string
    EmployeesUpdateFinancialsResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 60a2db290da29e126a18789a
        accountHolderName:
          description: The accounts holder's name.
          type: string
          example: Michael Corleone
        bankName:
          description: The bank name.
          type: string
          example: Bank of Sicily
        accountNumber:
          description: The account number.
          type: string
          example: 0093 344 2132221 3304 00
        iban:
          description: The IBAN.
          type: string
          example: DE32120222391919191911
        swiftCode:
          description: The SWIFT code.
          type: string
          example: '12321234'
        nationalId:
          description: The national id document.
          type: string
          example: 04123547X
        passport:
          description: The passport number.
          type: string
          example: FA1234098
        nationalInsuranceNumber:
          description: The national insurance number
          type: string
          example: '23123312321'
        taxCode:
          description: The tax number.
          type: string
          example: 323451R
        taxIdentificationNumber:
          description: The tax identification number.
          type: string
          example: T4312345
    EmployeesUpdateHomeResponse:
      type: object
      properties:
        _id:
          description: The employee Kenjo *_id*.
          type: string
          example: 60a2db290da29e126a18789a
        maritalStatus:
          description: >-
            The marital status. Only is valid one of the following values
            "Divorced", "Domestic Partnership", "Married", "Separated",
            "Single", "Widowed".
          type: string
          example: Widowed
        spouseFirstName:
          description: The first name of the employee's spouse.
          type: string
          example: Catherine
        spouseLastName:
          description: The last name of the employee's spouse.
          type: string
          example: Tramell
        spouseBirthdate:
          description: >-
            The birth date of the employee's spouse. Format
            YYYY-MM-DDThh:mm:ss.000Z.
          type: string
          example: '2060-01-26T00:00:00.000Z'
        spouseGender:
          description: >-
            The employee's spouse gender. Only is valid one of the following
            values 'Male' (male), 'Female' (female) or 'Other' (other).
          type: string
          example: Female
        personalEmail:
          description: The employee personal email.
          type: string
          example: john@acme.io
        personalPhone:
          description: The employee personal phone.
          type: string
          example: '4567092323'
        personalMobile:
          description: The employee personal phone
          type: string
          example: '3567092310'
    EmployeesActivateEmployeeResponse:
      type: string
      example: >-
        An email was sent to the employee with the following email
        lo+testing@jularun.org. The recipient must to provide credentials to
        finish the activation process.
    EmployeesActivateEmployee400Response:
      type: string
      example: The employee cannot be activated because is currently active.
    EmployeesDeactivateEmployeeByIdResponse:
      type: string
      example: The employee has been deactivated.
    EmployeesDeactivateEmployeeById400Response:
      type: string
      example: The employee cannot be deactivated because is currently inactive.
    CustomFieldsGetListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the custom field.
                type: string
                example: 40a2db290da29e126a18789a
              section:
                description: The name of custom field section.
                type: string
                example: work
              label:
                description: The name of custom field label.
                type: string
                example: Score
              apiName:
                description: >-
                  The api name is a required identifier to perform POST and PUT
                  operations with employees.
                type: string
                example: c_Score
              type:
                description: >-
                  The data type of the custom field. Possible values "Text",
                  "TextArea", "List", "Date", "Number", "Email", "Boolean" and
                  "Url"
                type: string
                example: Number
              values:
                description: >-
                  If the field is type 'List' then a list with the possible
                  values will be provided.
                type: array
                items:
                  type: string
                  example:
                    - A
                    - B
          example:
            - _id: 60a2db290da29e126a18789a
              section: work
              label: Score
              apiName: c_Score
              type: Number
            - _id: 60a2db290da29e126a18789b
              section: personal
              label: Blood type
              apiName: c_Bloodtype
              type: List
              values:
                - A
                - B
    CustomFieldsGetList400Response:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      example:
        code: 400
        message: 'Filters are not correct: data must NOT have additional properties'
    TimeOffGetRequestsByDateResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              description:
                description: The provided description on the time-off request.
                type: string
                example: I'll take 8 days-off.
              _id:
                description: The Kenjo _id of the returned time-off request.
                type: string
                example: 80a2db290da29e126a18789f
              _userId:
                description: The employee id associated to the time-off request.
                type: string
                example: 60a2db290da29e126a18789a1
              _timeOfTypeId:
                description: The time-off type id associated to the time-off request.
                type: string
                example: 50a2db290da29e126a187896
              _policyId:
                description: The policy id associated to the time-off request.
                type: string
                example: 20a2db290da29e126a187894
              policyName:
                description: The name of the policy id associated to the time-off request.
                type: string
                example: Holidays for Tech team
              _policyType:
                description: >-
                  The type of the policy associated to the time-off request. It
                  can be type *Hour* or *Day*.
                type: string
                example: Day
              status:
                description: The status of the time-off request.
                type: string
                example: Submitted
              from:
                description: >-
                  The from date of the time-off request in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2022-01-30T00:00:00'
              to:
                description: >-
                  The to date of the time-off request in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2022-02-10T00:00:00'
              duration:
                description: >-
                  The duration of the time-off request. It doesn't exclude bank
                  holidays nor non-working days.
                type: number
                example: 11
              workingTime:
                description: >-
                  The duration of the time-off request. It excludes bank
                  holidays and non-working days.
                type: number
                example: 8
              _createdAt:
                description: >-
                  The date that the time-off request was created in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2022-02-10T00:00:00'
              hasAttachment:
                description: Determines if the time-off request has related attachments.
                type: boolean
                example: false
              _type:
                description: >-
                  This field defines if the request is a 'Submission' or a
                  'Request'. By default, the 'Submission' is automatically
                  approved.
                type: string
                example: Submission
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            _userId: 80a2db290da29e126a18789b
            _timeOffTypeId: 80a2db290da29e126a187809
            _policyId: 80a2db290da29e126a187878
            policyName: Sick days
            _policyType: Day
            status: Submitted
            from: '2022-03-10T00:00:00'
            to: '2022-03-12T00:00:00'
            duration: 2
            workingTime: 2
            _createdAt: '2022-03-10T08:00:00'
            hasAttachment: true
            _type: Submission
          - description: I have requested days off
            _id: 60a2db290da29e126a18789b
            _userId: 80a2db290da29e126a18789b
            _timeOffTypeId: 80a2db290da29e126a18789f
            _policyId: 80a2db290da29e126a187897
            policyName: Holidays for tech team
            _policyType: Day
            status: Submitted
            from: '2022-02-01T00:00:00'
            to: '2022-02-12T00:00:00'
            duration: 12
            workingTime: 8
            _createdAt: '2022-02-01T10:30:00'
            hasAttachment: false
            _type: Submission
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
    TimeOffGetTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              name:
                description: The name of the time-off type.
                type: string
                example: Maternity leave
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            name: Sick
          - _id: 60a2db290da29e126a18789f
            name: Maternity leave
          - _id: 60a2db290da29e126a18789d
            name: Holidays
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
    TimeOffCreateRequestResponse:
      type: object
      properties:
        _id:
          description: The time off request identifier.
          type: string
          example: 50a2db290da29e126a187834
        _userId:
          description: The Kenjo employee *_id*.
          type: string
          example: 50a2db290da29e126a18789a
        _timeOffTypeId:
          description: The Kenjo *time-off type Id* for an existing time-off type.
          type: string
          example: 50a2db290da29e126a18789f
        from:
          description: The starting date of the time-off request in format YYYY-MM-DD.
          type: string
          example: '2020-01-26'
        to:
          description: The ending date of the time-off request in format YYYY-MM-DD.
          type: string
          example: '2020-01-30'
        partOfDayFrom:
          description: Indicates when starts to apply the *from* date.
          type: string
          enum:
            - StartOfDay
            - HalfOfDay
          example: StartOfDay
        partOfDayTo:
          description: Indicates when starts to apply the *to* date.
          type: string
          enum:
            - HalfOfDay
            - EndOfDay
          example: HalfOfDay
    CompensationGetContractsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned contracts.
                type: string
                example: 80a2db290da29e126a18789f
              _userId:
                description: The employee id associated to the contract.
                type: string
                example: 60a2db290da29e126a18789a1
              _companyId:
                description: The company id associated to the contract.
                type: string
                example: 50a2db290da29e126a187896
              startDate:
                description: The start date of the contract in format YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2022-01-30T00:00:00'
              contractTypeId:
                description: The contract type id associated to the contract.
                type: string
                example: 50a2db290da29e126a187897
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            _userId: 80a2db290da29e126a18789b
            _companyId: 80a2db290da29e126a187809
            startDate: '2022-05-10T00:00:00'
            contractTypeId: 80a2db290da29e126a187878
          - _id: 60a2db290da29e126a18789b
            _userId: 80a2db290da29e126a187891
            _companyId: 80a2db290da29e126a187809
            startDate: '2015-01-10T00:00:00'
            contractTypeId: 80a2db290da29e126a187878
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
    CompensationListContractTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned contracts.
                type: string
                example: 80a2db290da29e126a18789f
              name:
                description: The name of the contract type.
                type: string
                example: Permanent
              isActive:
                description: Determines if the contract is currently active.
                type: boolean
                example: true
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            name: Permanent
            isActive: true
          - _id: 60a2db290da29e126a18789b
            name: Junior
            isActive: true
          - _id: 60a2db290da29e126a18789c
            name: Senior
            isActive: true
          - _id: 60a2db290da29e126a187891
            name: External
            isActive: false
        metadata:
          count: 4
          offset: 1
          limit: 50
          total: 4
    CompensationGetSalariesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned salary.
                type: string
                example: 80a2db290da29e126a18789f
              _userId:
                description: The employee id associated to the salary.
                type: string
                example: 60a2db290da29e126a18789a1
              _companyId:
                description: The company id associated to the salary.
                type: string
                example: 50a2db290da29e126a187896
              startDate:
                description: >-
                  The start date (effective date) of the salary in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2022-01-30T00:00:00'
              endDate:
                description: The end date of the salary in format YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2025-01-30T00:00:00'
              amount:
                description: The the amount of money associated to the salary.
                type: number
                example: 3000
              paymentPeriod:
                description: The salary payment period.
                type: string
                example: Annual
              currency:
                description: This currency in ISO 4217.
                type: number
                example: .nan
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            _userId: 80a2db290da29e126a18789b
            _companyId: 80a2db290da29e126a187809
            startDate: '2014-01-01T00:00:00'
            endDate: '2024-05-10T00:00:00'
            amount: 30000
            paymentPeriod: Annual
            current: EUR
            contractTypeId: 80a2db290da29e126a187878
          - _id: 60a2db290da29e126a18789b
            _userId: 80a2db290da29e126a187891
            _companyId: 80a2db290da29e126a187809
            startDate: '2010-01-10T00:00:00'
            amount: 4000
            paymentPeriod: Monthly
            current: USD
            contractTypeId: 80a2db290da29e126a18787a
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
    CompensationListAdditionalPaymentsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned additional payment.
                type: string
                example: 80a2db290da29e126a18789f
              _userId:
                description: The employee id associated to the additional payment.
                type: string
                example: 60a2db290da29e126a18789a1
              _companyId:
                description: The company id associated to the additional payment.
                type: string
                example: 50a2db290da29e126a187896
              effectiveDate:
                description: >-
                  The effective date of the additional payment in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
                example: '2022-01-30T00:00:00'
              additionalPaymentTypeId:
                description: >-
                  The id of the addional payment type in format
                  YYYY-MM-DDThh:mm:ss.
                type: string
                example: 50a2db290da29e126a187898
              amount:
                description: The the amount of money associated to the additional payment.
                type: number
                example: 3000
              currency:
                description: This currency in ISO 4217.
                type: number
                example: .nan
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            _userId: 80a2db290da29e126a18789b
            _companyId: 80a2db290da29e126a187809
            effectiveDate: '2014-01-01T00:00:00'
            additionalPaymentTypeId: 50a2db290da29e126a187898
            amount: 500
            current: EUR
          - _id: 60a2db290da29e126a18789b
            _userId: 80a2db290da29e126a187891
            _companyId: 80a2db290da29e126a187809
            effectiveDate: '2010-01-10T00:00:00'
            additionalPaymentTypeId: 50a2db290da29e126a187899
            amount: 1500
            current: USD
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
    CompensationListAdditionalPaymentTypesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                description: The Kenjo _id of the returned additional payment type.
                type: string
                example: 80a2db290da29e126a18789f
              name:
                description: The name of the additional payment type.
                type: string
                example: Bonus
        metadata:
          type: object
          properties:
            count:
              description: >-
                The number of rows retrieved according the pagination filters
                (limit + offset).
              type: number
            offset:
              description: >-
                The number of pages to skip. Determines the page number when
                pagination is being used.
              type: number
            limit:
              description: >-
                The maximum number of rows to retrieve. Determines the size of
                the page when pagination is being used.
              type: number
            total:
              description: The total number of rows existing for the provided filters.
              type: number
      example:
        data:
          - _id: 60a2db290da29e126a18789a
            name: Bonus
          - _id: 60a2db290da29e126a18789b
            name: Extra payment
        metadata:
          count: 2
          offset: 1
          limit: 50
          total: 2
