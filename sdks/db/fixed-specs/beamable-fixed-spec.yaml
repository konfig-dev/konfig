openapi: 3.0.2
info:
  title: history basic
  description: >-
    var Beamable = BeamContext.Default; - That one line of code is a gateway to
    everything you need to build custom server logic via microservices along
    with a world of LiveOps tools and live services to build games that players
    love.
  version: '1.0'
  contact:
    name: Beamable Support
    url: https://api.beamable.com
    email: support@beamable.com
  x-konfig-ignore:
    object-with-no-properties: true
servers:
  - url: https://api.beamable.com
tags:
  - name: Payment
  - name: Object
  - name: Account
  - name: Group
  - name: Leaderboard
  - name: Realm
  - name: Mail
  - name: Content
  - name: Tournament
  - name: Trial
  - name: Announcement
  - name: Cloudsaving
  - name: Product
  - name: Event
  - name: Game
  - name: Message
  - name: Notification
  - name: LegacyPvpDef
  - name: Entitlement
  - name: Shard
  - name: History
  - name: Promo
  - name: Session
  - name: Timer
  - name: Campaign
  - name: Authentication
  - name: Statistic
  - name: Template
  - name: SKU
  - name: Update
  - name: Plan
  - name: Friend
  - name: Block
  - name: Activity
  - name: Item
  - name: Currency
  - name: Audit
  - name: Price
  - name: Order
  - name: Registration
  - name: Subscription
  - name: LegacyEntitlementDef
paths:
  /basic/trials/admin/data:
    get:
      tags:
        - Trial
      operationId: Trial_adminDataGet
      security:
        - scope: []
          user: []
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetS3DataResponse'
        '400':
          description: Bad Request
  /basic/trials/data:
    post:
      tags:
        - Trial
      operationId: Trial_postData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadTrialDataRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveGameDataResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Trial
      operationId: Trial_deleteData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTrialDataRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSuccessResponse'
        '400':
          description: Bad Request
  /basic/trials/pause:
    put:
      tags:
        - Trial
      operationId: Trial_pauseTrial
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseTrialRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSuccessResponse'
        '400':
          description: Bad Request
  /basic/trials/schedule:
    put:
      tags:
        - Trial
      operationId: Trial_schedulePut
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleTrialRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSuccessResponse'
        '400':
          description: Bad Request
  /basic/trials/admin:
    get:
      tags:
        - Trial
      operationId: Trial_getAdminTrials
      security:
        - scope: []
          user: []
      parameters:
        - name: dbid
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlayerTrialsResponse'
        '400':
          description: Bad Request
  /basic/trials/start:
    put:
      tags:
        - Trial
      operationId: Trial_startTrialProcess
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTrialRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSuccessResponse'
        '400':
          description: Bad Request
  /basic/accounts/me/device:
    delete:
      tags:
        - Account
      operationId: Account_removeDevice
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDevicesRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPlayerView'
        '400':
          description: Bad Request
  /basic/accounts/me:
    get:
      tags:
        - Account
      operationId: Account_getUserInfo
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPlayerView'
        '400':
          description: Bad Request
    put:
      tags:
        - Account
      operationId: Account_updateAccountInfo
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPlayerView'
        '400':
          description: Bad Request
  /basic/accounts/me/third-party:
    delete:
      tags:
        - Account
      operationId: Account_deleteThirdParty
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThirdPartyAvailableRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPlayerView'
        '400':
          description: Bad Request
  /basic/accounts/get-personally-identifiable-information:
    get:
      tags:
        - Account
      operationId: Account_getPersonallyIdentifiableInformation
      security:
        - scope: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/AccountPersonallyIdentifiableInformationResponse
        '400':
          description: Bad Request
  /basic/accounts/search:
    get:
      tags:
        - Account
      operationId: Account_searchAccounts
      security:
        - scope: []
          user: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
          required: true
        - name: page
          in: query
          schema:
            type: integer
            format: int32
          required: true
        - name: pagesize
          in: query
          schema:
            type: integer
            format: int32
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSearchResponse'
        '400':
          description: Bad Request
  /basic/accounts/email-update/init:
    post:
      tags:
        - Mail
      operationId: Mail_updateEmailInit
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/accounts/email-update/confirm:
    post:
      tags:
        - Mail
      operationId: Mail_updateEmailConfirmation
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailUpdateConfirmation'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/accounts/available/third-party:
    get:
      tags:
        - Account
      operationId: Account_checkThirdPartyAvailability
      security:
        - scope: []
      parameters:
        - name: thirdParty
          in: query
          schema:
            type: string
          required: true
        - name: token
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAvailableResponse'
        '400':
          description: Bad Request
  /basic/accounts/admin/admin-user:
    post:
      tags:
        - Account
      operationId: Account_createAdminUser
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAccountRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPortalView'
        '400':
          description: Bad Request
  /basic/accounts/register:
    post:
      tags:
        - Account
      operationId: Account_registerNewAccount
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRegistration'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPlayerView'
        '400':
          description: Bad Request
  /basic/accounts/admin/me:
    get:
      tags:
        - Account
      operationId: Account_getDetails
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPortalView'
        '400':
          description: Bad Request
  /basic/accounts/password-update/init:
    post:
      tags:
        - Account
      operationId: Account_updatePasswordInit
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/accounts/admin/admin-users:
    get:
      tags:
        - Account
      operationId: Account_getAdminUsers
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAdminsResponse'
        '400':
          description: Bad Request
  /basic/accounts/find:
    get:
      tags:
        - Account
      operationId: Account_findAccounts
      security:
        - scope: []
          user: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
  /basic/accounts/available/device-id:
    get:
      tags:
        - Account
      operationId: Account_checkAvailability
      security:
        - scope: []
      parameters:
        - name: deviceId
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAvailableResponse'
        '400':
          description: Bad Request
  /basic/accounts/available:
    get:
      tags:
        - Account
      operationId: Account_checkAvailability
      security:
        - scope: []
      parameters:
        - name: email
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAvailableResponse'
        '400':
          description: Bad Request
  /basic/accounts/password-update/confirm:
    post:
      tags:
        - Account
      operationId: Account_updatePasswordConfirmation
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateConfirmation'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/accounts/{objectId}/admin/email:
    put:
      tags:
        - Mail
      operationId: Mail_updateAdminEmail
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
  /object/accounts/{objectId}/available-roles:
    get:
      tags:
        - Account
      operationId: Account_getObjectAvailableRoles
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableRolesResponse'
        '400':
          description: Bad Request
  /object/accounts/{objectId}/role:
    put:
      tags:
        - Account
      operationId: Account_updateRole
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Account
      operationId: Account_removeRole
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/accounts/{objectId}/admin/scope:
    put:
      tags:
        - Account
      operationId: Account_updateAdminScope
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Account
      operationId: Account_deleteAdminScope
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/accounts/{objectId}/admin/third-party:
    put:
      tags:
        - Account
      operationId: Account_updateThirdPartyAdmin
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferThirdPartyAssociation'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Account
      operationId: Account_deleteThirdPartyAdmin
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteThirdPartyAssociation'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/accounts/{objectId}/admin/forget:
    delete:
      tags:
        - Account
      operationId: Account_removeAdminForget
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
  /basic/announcements/search:
    get:
      tags:
        - Announcement
      operationId: Announcement_searchOperation
      security:
        - scope: []
          user: []
      parameters:
        - name: date
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementContentResponse'
        '400':
          description: Bad Request
  /basic/announcements/content:
    get:
      tags:
        - Content
      operationId: Content_getAnnouncementContent
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementContentResponse'
        '400':
          description: Bad Request
  /basic/announcements/list:
    get:
      tags:
        - Announcement
      operationId: Announcement_getAllAnnouncements
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementContentResponse'
        '400':
          description: Bad Request
  /object/announcements/{objectId}/read:
    put:
      tags:
        - Announcement
      operationId: Announcement_markAsRead
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/announcements/{objectId}/claim:
    post:
      tags:
        - Announcement
      operationId: Announcement_claimObjectAnnouncement
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/announcements/{objectId}/raw:
    get:
      tags:
        - Announcement
      operationId: Announcement_getObjectRaw
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementRawResponse'
        '400':
          description: Bad Request
  /basic/auth/token:
    get:
      tags:
        - Authentication
      operationId: Authentication_getToken
      security:
        - scope: []
      parameters:
        - name: token
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad Request
    post:
      tags:
        - Authentication
      operationId: Authentication_requestToken
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequestWrapper'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Bad Request
  /object/calendars/{objectId}/claim:
    post:
      tags:
        - Object
      operationId: Object_claimCalendar
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarClaimRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/chatV2/{objectId}/rooms:
    get:
      tags:
        - Object
      operationId: Object_getChatRooms
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoomsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Object
      operationId: Object_createChatRoom
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoomResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Object
      operationId: Object_deleteRoom
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveRoomRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRoomResponse'
        '400':
          description: Bad Request
  /object/chatV2/{objectId}/messages:
    post:
      tags:
        - Message
      operationId: Message_sendMessage
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/replace:
    post:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_replaceData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceObjectsRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
  /basic/cloudsaving/data:
    delete:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_deleteData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectRequests'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/downloadURL:
    post:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_getDataDownloadUrl
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectRequests'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLSResponse'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/metadata:
    get:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_getDataMetadata
      security:
        - scope: []
          user: []
      parameters:
        - name: request
          in: query
          schema:
            type: array
            items:
              description: >-
                WARNING: Missing items property in array schema. Missing items
                property has been filled with this AnyType schema.
          required: false
        - name: playerId
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsMetadataResponse'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/move:
    put:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_moveDataPut
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerBasicCloudDataRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/uploadURLFromPortal:
    post:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_uploadUrlFromPortal
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequestsFromPortal'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLSResponse'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/commitManifest:
    put:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_commitManifestPut
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequests'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
  /basic/cloudsaving/data/uploadURL:
    post:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_uploadDataUrl
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRequests'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLSResponse'
        '400':
          description: Bad Request
  /basic/commerce/catalog:
    get:
      tags:
        - Product
      operationId: Product_getCatalog
      security:
        - scope: []
          user: []
      parameters:
        - name: version
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogResponse'
        '400':
          description: Bad Request
  /basic/commerce/skus:
    get:
      tags:
        - SKU
      operationId: Sku_listSkus
      security:
        - scope: []
      parameters:
        - name: version
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSKUsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - SKU
      operationId: Sku_createSku
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveSKUsRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/coupons/count:
    get:
      tags:
        - Object
      operationId: Object_getCommerceCouponCount
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTotalCouponResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/offersAdmin:
    get:
      tags:
        - Object
      operationId: Object_getOffersAdmin
      security:
        - scope: []
          user: []
      parameters:
        - name: language
          in: query
          schema:
            type: string
          required: false
        - name: time
          in: query
          schema:
            type: string
          required: false
        - name: stores
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActiveOffersResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/purchase:
    post:
      tags:
        - Object
      operationId: Object_purchaseItem
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Object
      operationId: Object_purchaseById
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/listings:
    get:
      tags:
        - Object
      operationId: Object_getCommerceListings
      security:
        - scope: []
          user: []
      parameters:
        - name: listing
          in: query
          schema:
            type: string
          required: false
        - name: store
          in: query
          schema:
            type: string
          required: false
        - name: time
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveListingResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/status:
    delete:
      tags:
        - Object
      operationId: Object_deleteStatusById
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearStatusRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/coupons:
    post:
      tags:
        - Object
      operationId: Object_createCommerceCoupons
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiveCouponReq'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/stats/update:
    post:
      tags:
        - Object
      operationId: Object_updateStatObject
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatSubscriptionNotification'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/commerce/{objectId}/offers:
    get:
      tags:
        - Object
      operationId: Object_getCommerceOffers
      security:
        - scope: []
          user: []
      parameters:
        - name: language
          in: query
          schema:
            type: string
          required: false
        - name: time
          in: query
          schema:
            type: string
          required: false
        - name: stores
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActiveOffersResponse'
        '400':
          description: Bad Request
  /basic/content/manifest/pull:
    post:
      tags:
        - Content
      operationId: Content_pullManifestData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullManifestRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
  /basic/content/content:
    get:
      tags:
        - Content
      operationId: Content_getContentDetails
      security:
        - scope: []
          user: []
      parameters:
        - name: contentId
          in: query
          schema:
            type: string
          required: false
        - name: version
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentOrText'
        '400':
          description: Bad Request
  /basic/content/text:
    post:
      tags:
        - Content
      operationId: Content_submitTextContent
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveTextRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveTextResponse'
        '400':
          description: Bad Request
  /basic/content/manifest:
    get:
      tags:
        - Content
      operationId: Content_getManifestData
      security:
        - scope: []
          user: []
      parameters:
        - name: id
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
    post:
      tags:
        - Content
      operationId: Content_createManifestData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveManifestRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
  /basic/content/manifest/public:
    get:
      tags:
        - Content
      operationId: Content_getPublicManifest
      security:
        - scope: []
      parameters:
        - name: id
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientManifest'
        '400':
          description: Bad Request
  /basic/content/manifest/private:
    get:
      tags:
        - Content
      operationId: Content_getPrivateManifest
      security:
        - scope: []
          user: []
      parameters:
        - name: id
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientManifest'
        '400':
          description: Bad Request
  /basic/content/manifest/checksum:
    get:
      tags:
        - Content
      operationId: Content_checkManifestChecksum
      security:
        - scope: []
      parameters:
        - name: id
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestChecksum'
        '400':
          description: Bad Request
  /basic/events/content:
    get:
      tags:
        - Content
      operationId: Content_getContentData
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventContentResponse'
        '400':
          description: Bad Request
  /basic/events/calendar:
    get:
      tags:
        - Event
      operationId: Event_getCalendarEvents
      security:
        - scope: []
          user: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
          required: false
        - name: to
          in: query
          schema:
            type: string
          required: false
        - name: query
          in: query
          schema:
            type: string
          required: false
        - name: limit
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsInDateRangeResponse'
        '400':
          description: Bad Request
  /basic/events/applyContent:
    post:
      tags:
        - Content
      operationId: Content_applyContentData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventApplyRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/events/running:
    get:
      tags:
        - Activity
      operationId: Activity_getRunningEvents
      security:
        - scope: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventQueryResponse'
        '400':
          description: Bad Request
  /object/events/{objectId}/endPhase:
    put:
      tags:
        - Event
      operationId: Event_updateObjectEndPhase
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPhaseEndRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/events/{objectId}/ping:
    get:
      tags:
        - Event
      operationId: Event_pingObjectEvents
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingRsp'
        '400':
          description: Bad Request
  /object/events/{objectId}/content:
    put:
      tags:
        - Content
      operationId: Content_updateObjectContent
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetContentRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Content
      operationId: Content_deleteEventContent
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/events/{objectId}/refresh:
    put:
      tags:
        - Event
      operationId: Event_refreshObjectEvents
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/event-players/{objectId}/claim:
    post:
      tags:
        - Event
      operationId: Event_claimObjectEventPlayers
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventClaimRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventClaimResponse'
        '400':
          description: Bad Request
  /object/event-players/{objectId}/score:
    put:
      tags:
        - Event
      operationId: Event_updatePlayerScore
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventScoreRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/gamerelay/{objectId}/sync:
    post:
      tags:
        - Game
      operationId: Game_relayObjectSync
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncReq'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncRsp'
        '400':
          description: Bad Request
  /object/gamerelay/{objectId}/results:
    post:
      tags:
        - Game
      operationId: Game_relayObjectResults
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultsRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResultsMessage'
        '400':
          description: Bad Request
  /object/inventory/{objectId}/preview:
    put:
      tags:
        - Object
      operationId: Object_updateInventoryPreview
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewVipBonusResponse'
        '400':
          description: Bad Request
  /object/inventory/{objectId}/multipliers:
    get:
      tags:
        - Object
      operationId: Object_getMultipliers
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipliersGetResponse'
        '400':
          description: Bad Request
  /object/inventory/{objectId}/transaction:
    delete:
      tags:
        - Object
      operationId: Object_removeTransactionById
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndTransactionRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/inventory/{objectId}/transfer:
    put:
      tags:
        - Object
      operationId: Object_transferItemInventory
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/inventory/items:
    get:
      tags:
        - Item
      operationId: Item_listItems
      security:
        - scope: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemContentResponse'
        '400':
          description: Bad Request
  /basic/inventory/currency:
    get:
      tags:
        - Currency
      operationId: Currency_getInventoryCurrency
      security:
        - scope: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyContentResponse'
        '400':
          description: Bad Request
  /basic/leaderboards/list:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_listUserScores
      security:
        - scope: []
          user: []
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
          required: false
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardListResponse'
        '400':
          description: Bad Request
  /basic/leaderboards/player:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getPlayerScores
      security:
        - scope: []
          user: []
      parameters:
        - name: dbid
          in: query
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLeaderBoardViewResponse'
        '400':
          description: Bad Request
  /basic/leaderboards/assignment:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getAssignmentLeaderboard
      security:
        - scope: []
          user: []
      parameters:
        - name: boardId
          in: query
          schema:
            type: string
          required: true
        - name: joinBoard
          in: query
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardAssignmentInfo'
        '400':
          description: Bad Request
  /basic/leaderboards/uid:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getUserScores
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardUidResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/entries:
    delete:
      tags:
        - Leaderboard
      operationId: Leaderboard_deleteEntries
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/membership:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getObjectMembership
      security:
        - scope: []
          user: []
      parameters:
        - name: playerId
          in: query
          schema:
            type: integer
          required: true
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardMembershipResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/ranks:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_listObjectRanks
      security:
        - scope: []
      parameters:
        - name: ids
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderBoardViewResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/partition:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getObjectPartition
      security:
        - scope: []
          user: []
      parameters:
        - name: playerId
          in: query
          schema:
            type: integer
          required: true
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardPartitionInfo'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/matches:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getObjectMatches
      security:
        - scope: []
      parameters:
        - name: poolSize
          in: query
          schema:
            type: integer
          required: true
        - name: windows
          in: query
          schema:
            type: integer
          required: true
        - name: windowSize
          in: query
          schema:
            type: integer
          required: true
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchMakingMatchesPvpResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/assignment:
    delete:
      tags:
        - Leaderboard
      operationId: Leaderboard_removeAssignment
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardRemoveCacheEntryRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/entry:
    put:
      tags:
        - Leaderboard
      operationId: Leaderboard_updateEntry
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardAddRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Leaderboard
      operationId: Leaderboard_removeEntry
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardRemoveEntryRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/freeze:
    put:
      tags:
        - Leaderboard
      operationId: Leaderboard_createFreezeRequest
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/details:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getObjectDetails
      security:
        - scope: []
          user: []
      parameters:
        - name: from
          in: query
          schema:
            type: integer
          required: false
        - name: max
          in: query
          schema:
            type: integer
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardDetails'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/view:
    get:
      tags:
        - Leaderboard
      operationId: Leaderboard_getObjectView
      security:
        - scope: []
      parameters:
        - name: max
          in: query
          schema:
            type: integer
          required: false
        - name: focus
          in: query
          schema:
            type: integer
          required: false
        - name: friends
          in: query
          schema:
            type: boolean
          required: false
        - name: from
          in: query
          schema:
            type: integer
          required: false
        - name: outlier
          in: query
          schema:
            type: integer
          required: false
        - name: guild
          in: query
          schema:
            type: boolean
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderBoardViewResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}/swap:
    put:
      tags:
        - Leaderboard
      operationId: Leaderboard_swapObjectLeaderboard
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardSwapRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/groups/search:
    get:
      tags:
        - Group
      operationId: Group_searchGroups
      security:
        - scope: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          required: false
        - name: scoreMin
          in: query
          schema:
            type: integer
          required: false
        - name: sortField
          in: query
          schema:
            type: string
          required: false
        - name: userScore
          in: query
          schema:
            type: integer
          required: false
        - name: hasSlots
          in: query
          schema:
            type: boolean
          required: false
        - name: enrollmentTypes
          in: query
          schema:
            type: string
          required: false
        - name: offset
          in: query
          schema:
            type: integer
          required: false
        - name: scoreMax
          in: query
          schema:
            type: integer
          required: false
        - name: subGroup
          in: query
          schema:
            type: boolean
          required: false
        - name: sortValue
          in: query
          schema:
            type: integer
          required: false
        - name: type
          in: query
          schema:
            type: string
          required: false
        - name: limit
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSearchResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/role:
    put:
      tags:
        - Group
      operationId: Group_updateRole
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleChangeRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/kick:
    post:
      tags:
        - Group
      operationId: Group_kickObjectGroup
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KickRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/apply:
    post:
      tags:
        - Group
      operationId: Group_applyObjectGroups
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupApplication'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/donations:
    post:
      tags:
        - Group
      operationId: Group_createDonation
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDonationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Group
      operationId: Group_updateDonation
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeDonationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/member:
    delete:
      tags:
        - Group
      operationId: Group_removeMember
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KickRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/invite:
    post:
      tags:
        - Group
      operationId: Group_inviteObjectGroup
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupInvite'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}/petition:
    post:
      tags:
        - Group
      operationId: Group_createPetition
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupApplication'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/group-users/{objectId}/availability:
    get:
      tags:
        - Group
      operationId: Group_getUserAvailability
      security:
        - scope: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          required: false
        - name: tag
          in: query
          schema:
            type: string
          required: false
        - name: type
          in: query
          schema:
            type: string
          required: false
        - name: subGroup
          in: query
          schema:
            type: boolean
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityResponse'
        '400':
          description: Bad Request
  /object/group-users/{objectId}/recommended:
    get:
      tags:
        - Group
      operationId: Group_getRecommendedUsers
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSearchResponse'
        '400':
          description: Bad Request
  /object/group-users/{objectId}/join:
    post:
      tags:
        - Group
      operationId: Group_joinUserToGroup
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembershipRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Group
      operationId: Group_joinUserDelete
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembershipRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipResponse'
        '400':
          description: Bad Request
  /object/group-users/{objectId}/group:
    post:
      tags:
        - Group
      operationId: Group_assignObjectGroup
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreateResponse'
        '400':
          description: Bad Request
  /object/group-users/{objectId}/search:
    get:
      tags:
        - Group
      operationId: Group_searchUsers
      security:
        - scope: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          required: false
        - name: scoreMin
          in: query
          schema:
            type: integer
          required: false
        - name: sortField
          in: query
          schema:
            type: string
          required: false
        - name: userScore
          in: query
          schema:
            type: integer
          required: false
        - name: hasSlots
          in: query
          schema:
            type: boolean
          required: false
        - name: enrollmentTypes
          in: query
          schema:
            type: string
          required: false
        - name: offset
          in: query
          schema:
            type: integer
          required: false
        - name: scoreMax
          in: query
          schema:
            type: integer
          required: false
        - name: subGroup
          in: query
          schema:
            type: boolean
          required: false
        - name: sortValue
          in: query
          schema:
            type: integer
          required: false
        - name: type
          in: query
          schema:
            type: string
          required: false
        - name: limit
          in: query
          schema:
            type: integer
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSearchResponse'
        '400':
          description: Bad Request
  /basic/mail/attachments:
    put:
      tags:
        - Mail
      operationId: Mail_uploadAttachment
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptMultipleAttachments'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
  /basic/mail/template:
    get:
      tags:
        - Mail
      operationId: Mail_getMailTemplate
      security:
        - scope: []
      parameters:
        - name: templateName
          in: query
          schema:
            type: string
          required: false
        - name: gamerTag
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailTemplate'
        '400':
          description: Bad Request
  /basic/mail/bulk:
    post:
      tags:
        - Mail
      operationId: Mail_sendBulkEmails
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSendMailRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
  /object/mail/{objectId}/detail:
    get:
      tags:
        - Mail
      operationId: Mail_getObjectDetail
      security:
        - scope: []
      parameters:
        - name: mid
          in: query
          schema:
            type: integer
          required: true
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailResponse'
        '400':
          description: Bad Request
  /object/mail/{objectId}/categories:
    get:
      tags:
        - Mail
      operationId: Mail_getObjectCategories
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMailCategoriesResponse'
        '400':
          description: Bad Request
  /object/mail/{objectId}/search:
    post:
      tags:
        - Mail
      operationId: Mail_searchMailObject
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailSearchRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSearchResponse'
        '400':
          description: Bad Request
  /object/mail/{objectId}/bulk:
    post:
      tags:
        - Mail
      operationId: Mail_sendBulkItems
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSendMailRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Mail
      operationId: Mail_updateObjectBulk
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateMailObjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
  /object/mail/{objectId}/accept/many:
    put:
      tags:
        - Mail
      operationId: Mail_acceptMany
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptMultipleAttachments'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
  /object/matchmaking/{objectId}/tick:
    put:
      tags:
        - Object
      operationId: Object_updateMatchmakingTick
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/matchmaking/{objectId}/match:
    get:
      tags:
        - Object
      operationId: Object_getMatchmakingData
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchUpdate'
        '400':
          description: Bad Request
    post:
      tags:
        - Object
      operationId: Object_startMatchmakingProcess
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchUpdate'
        '400':
          description: Bad Request
    delete:
      tags:
        - Object
      operationId: Object_matchmakingDelete
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/payments/windows/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_windowsPurchaseTrack
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/audits:
    get:
      tags:
        - Audit
      operationId: Audit_getPaymentAudits
      security:
        - scope: []
      parameters:
        - name: providerid
          in: query
          schema:
            type: string
          required: false
        - name: provider
          in: query
          schema:
            type: string
          required: false
        - name: state
          in: query
          schema:
            type: string
          required: false
        - name: txid
          in: query
          schema:
            type: integer
          required: false
        - name: player
          in: query
          schema:
            type: integer
          required: false
        - name: start
          in: query
          schema:
            type: integer
          required: false
        - name: limit
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuditResponse'
        '400':
          description: Bad Request
  /basic/payments/windows/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_processComplete
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/test/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_processBegin
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/update:
    get:
      tags:
        - Update
      operationId: Update_facebookPaymentsUpdate
      security:
        - scope: []
      parameters:
        - name: hubMode
          in: query
          schema:
            type: string
          required: false
        - name: hubChallenge
          in: query
          schema:
            type: string
          required: false
        - name: hubVerifyToken
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionVerificationResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Update
      operationId: Update_facebookPaymentsUpdate
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacebookPaymentUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacebookPaymentUpdateResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_steamPurchaseFail
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_facebookPurchaseComplete
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_facebookPurchaseFailure
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/test/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_completePurchase
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/itunes/product:
    get:
      tags:
        - Product
      operationId: Product_getItunesItem
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/googleplay/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_completePurchaseProcess
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/test/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_trackPurchasePost
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/googleplay/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_googlePlayPurchaseBegin
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/itunes/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_itunesPurchaseBegin
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_facebookPurchaseCancel
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/coupon/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_trackPurchasePost
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_steamPurchaseComplete
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_trackPurchasePost
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/itunes/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_processFailure
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/test/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_cancelPurchase
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/googleplay/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_trackPurchasePost
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/prices:
    get:
      tags:
        - Price
      operationId: Price_getSteamPrices
      security:
        - scope: []
      parameters:
        - name: steamId
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedPriceMap'
        '400':
          description: Bad Request
  /basic/payments/test/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_processFailure
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/coupon/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_couponPurchaseCancel
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/itunes/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_completeItunesPurchase
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/coupon/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_couponPurchaseBegin
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_trackPurchasePost
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_facebookPurchaseBegin
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/order:
    get:
      tags:
        - Order
      operationId: Order_getSteam
      security:
        - scope: []
          user: []
      parameters:
        - name: orderId
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SteamOrderInfoResponse'
        '400':
          description: Bad Request
  /basic/payments/windows/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_initializePurchaseProcess
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/windows/product:
    get:
      tags:
        - Product
      operationId: Product_listWindowsPayments
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/googleplay/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_processFailure
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/facebook/product:
    get:
      tags:
        - Product
      operationId: Product_getFacebookProduct
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/googleplay/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_googlePlayPurchaseCancel
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/coupon/product:
    get:
      tags:
        - Product
      operationId: Product_getCouponDetails
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/coupon/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_failPurchase
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/purchase/begin:
    post:
      tags:
        - Payment
      operationId: Payment_steamPurchaseBegin
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_steamPurchaseCancel
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/auth:
    post:
      tags:
        - Authentication
      operationId: Authentication_steamPostAuth
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SteamAuthRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/payments/steam/product:
    get:
      tags:
        - Product
      operationId: Product_getSteamCatalog
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/coupon/purchase/complete:
    post:
      tags:
        - Payment
      operationId: Payment_completePurchase
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/windows/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_windowsPurchaseCancel
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/googleplay/product:
    get:
      tags:
        - Product
      operationId: Product_getGooglePlayDetails
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/windows/purchase/fail:
    post:
      tags:
        - Payment
      operationId: Payment_processFailure
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/itunes/purchase/cancel:
    post:
      tags:
        - Payment
      operationId: Payment_cancelPurchaseProcess
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/payments/test/product:
    get:
      tags:
        - Product
      operationId: Product_testGetBasicPayments
      security:
        - scope: []
      parameters:
        - name: sku
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductResponse'
        '400':
          description: Bad Request
  /basic/payments/itunes/purchase/track:
    post:
      tags:
        - Payment
      operationId: Payment_itunesPurchaseTrack
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackPurchaseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResultResponse'
        '400':
          description: Bad Request
  /basic/push/register:
    post:
      tags:
        - Registration
      operationId: Registration_pushUser
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterReq'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyRsp'
        '400':
          description: Bad Request
  /basic/push/send:
    post:
      tags:
        - Message
      operationId: Message_sendPushNotification
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendReq'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyRsp'
        '400':
          description: Bad Request
  /basic/realms/project/beamable:
    post:
      tags:
        - Realm
      operationId: Realm_createBeamable
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/customer/alias/available:
    get:
      tags:
        - Realm
      operationId: Realm_checkAliasAvailable
      security:
        - scope: []
      parameters:
        - name: alias
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasAvailableResponse'
        '400':
          description: Bad Request
  /basic/realms/project:
    get:
      tags:
        - Realm
      operationId: Realm_getProjectRealms
      security:
        - scope: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectView'
        '400':
          description: Bad Request
    post:
      tags:
        - Realm
      operationId: Realm_createProjectReal
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Realm
      operationId: Realm_updateProjectRealms
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnarchiveProjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Realm
      operationId: Realm_deleteProject
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveProjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/games:
    get:
      tags:
        - Game
      operationId: Game_getRealmsGames
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGameResponse'
        '400':
          description: Bad Request
  /basic/realms/config:
    get:
      tags:
        - Realm
      operationId: Realm_getConfig
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmConfigResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Realm
      operationId: Realm_updateConfig
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmConfigSaveRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/project/rename:
    put:
      tags:
        - Realm
      operationId: Realm_renameProjectRealms
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameProjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/plans:
    get:
      tags:
        - Plan
      operationId: Plan_getRealmsPlans
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePlansResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Plan
      operationId: Plan_createNewPlan
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/customer:
    get:
      tags:
        - Realm
      operationId: Realm_getCustomerRealms
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerViewResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Realm
      operationId: Realm_createCustomerRealm
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomerRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewCustomerResponse'
        '400':
          description: Bad Request
  /basic/realms/launch-message:
    get:
      tags:
        - Message
      operationId: Message_getLaunchData
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LaunchMessageListResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Message
      operationId: Message_createLaunchMessage
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLaunchMessageRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Message
      operationId: Message_deleteLaunchMessage
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveLaunchMessageRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/is-customer:
    get:
      tags:
        - Realm
      operationId: Realm_checkCustomerStatus
      security:
        - scope: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/realms/admin/customer:
    get:
      tags:
        - Realm
      operationId: Realm_getCustomerRealms
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Bad Request
  /basic/realms/game:
    get:
      tags:
        - Game
      operationId: Game_getRealms
      security:
        - scope: []
          user: []
      parameters:
        - name: rootPID
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGameResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Game
      operationId: Game_createRealm
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Game
      operationId: Game_updateRealm
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGameHierarchyRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/realms/project/promote:
    get:
      tags:
        - Realm
      operationId: Realm_projectPromoteGet
      security:
        - scope: []
          user: []
      parameters:
        - name: sourcePid
          in: query
          schema:
            type: string
          required: true
        - name: promotions
          in: query
          schema:
            type: array
            items:
              type: string
              format: blah
          required: false
        - name: contentManifestIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: blah
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteRealmResponseOld'
        '400':
          description: Bad Request
    post:
      tags:
        - Realm
      operationId: Realm_projectPromote
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoteRealmRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteRealmResponseOld'
        '400':
          description: Bad Request
  /basic/realms/customers:
    get:
      tags:
        - Realm
      operationId: Realm_listCustomersRealms
      security:
        - scope: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersResponse'
        '400':
          description: Bad Request
  /basic/realms/promotion:
    get:
      tags:
        - Realm
      operationId: Realm_getPromotionData
      security:
        - scope: []
          user: []
      parameters:
        - name: sourcePid
          in: query
          schema:
            type: string
          required: true
        - name: promotions
          in: query
          schema:
            type: array
            items:
              type: string
              format: blah
          required: false
        - name: contentManifestIds
          in: query
          schema:
            type: array
            items:
              type: string
              format: blah
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteRealmResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Realm
      operationId: Realm_createPromotion
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromoteRealmRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteRealmResponse'
        '400':
          description: Bad Request
  /basic/notification/player:
    post:
      tags:
        - Notification
      operationId: Notification_sendPlayerNotification
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/notification/global:
    post:
      tags:
        - Notification
      operationId: Notification_sendGlobalNotification
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/notification/custom:
    post:
      tags:
        - Notification
      operationId: Notification_createCustomNotification
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/notification/server:
    post:
      tags:
        - Notification
      operationId: Notification_sendServerNotification
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerEvent'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/notification/generic:
    post:
      tags:
        - Notification
      operationId: Notification_sendNotification
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/notification/game:
    post:
      tags:
        - Game
      operationId: Game_postNotification
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/session/history:
    get:
      tags:
        - Session
      operationId: Session_getHistory
      security:
        - scope: []
          user: []
      parameters:
        - name: dbid
          in: query
          schema:
            type: integer
          required: true
        - name: month
          in: query
          schema:
            type: integer
          required: false
        - name: year
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionHistoryResponse'
        '400':
          description: Bad Request
  /basic/session/status:
    get:
      tags:
        - Session
      operationId: Session_getStatus
      security:
        - scope: []
          user: []
      parameters:
        - name: playerIds
          in: query
          schema:
            type: string
          required: false
        - name: intervalSecs
          in: query
          schema:
            type: integer
          required: true
        - name: playerIdsSeq
          in: query
          schema:
            type: array
            items:
              description: >-
                WARNING: Missing items property in array schema. Missing items
                property has been filled with this AnyType schema.
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineStatusResponses'
        '400':
          description: Bad Request
  /basic/session/heartbeat:
    post:
      tags:
        - Session
      operationId: Session_postHeartbeat
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionHeartbeat'
        '400':
          description: Bad Request
  /basic/stats/client/batch:
    get:
      tags:
        - Statistic
      operationId: Statistic_getClientBatchStats
      security:
        - scope: []
      parameters:
        - name: objectIds
          in: query
          schema:
            type: string
          required: false
        - name: stats
          in: query
          schema:
            type: string
          required: false
        - name: format
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchReadStatsResponse'
        '400':
          description: Bad Request
  /basic/stats/batch:
    post:
      tags:
        - Statistic
      operationId: Statistic_batchPost
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSetStatsRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/stats/search:
    post:
      tags:
        - Statistic
      operationId: Statistic_searchData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsSearchRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsSearchResponse'
        '400':
          description: Bad Request
  /basic/stats/subscribe:
    put:
      tags:
        - Subscription
      operationId: Subscription_addBasicStatsSubscription
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsSubscribeRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/stats/{objectId}/client/stringlist:
    post:
      tags:
        - Object
      operationId: Object_postClientStringlist
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatUpdateRequestStringListFormat'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/stats/{objectId}/client:
    get:
      tags:
        - Object
      operationId: Object_getClientStats
      security:
        - scope: []
      parameters:
        - name: stats
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Object
      operationId: Object_postClientStats
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/tournaments/rewards:
    get:
      tags:
        - Tournament
      operationId: Tournament_getRewards
      security:
        - scope: []
          user: []
      parameters:
        - name: tournamentId
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Tournament
      operationId: Tournament_createReward
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardsRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsResponse'
        '400':
          description: Bad Request
  /basic/tournaments/global:
    get:
      tags:
        - Tournament
      operationId: Tournament_getGlobalTournaments
      security:
        - scope: []
          user: []
      parameters:
        - name: tournamentId
          in: query
          schema:
            type: string
          required: false
        - name: max
          in: query
          schema:
            type: integer
          required: false
        - name: focus
          in: query
          schema:
            type: integer
          required: false
        - name: cycle
          in: query
          schema:
            type: integer
          required: false
        - name: from
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStandingsResponse'
        '400':
          description: Bad Request
  /basic/tournaments/standings:
    get:
      tags:
        - Tournament
      operationId: Tournament_getStandings
      security:
        - scope: []
          user: []
      parameters:
        - name: tournamentId
          in: query
          schema:
            type: string
          required: false
        - name: max
          in: query
          schema:
            type: integer
          required: false
        - name: focus
          in: query
          schema:
            type: integer
          required: false
        - name: cycle
          in: query
          schema:
            type: integer
          required: false
        - name: from
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStandingsResponse'
        '400':
          description: Bad Request
  /basic/tournaments/admin/player:
    get:
      tags:
        - Tournament
      operationId: Tournament_adminPlayerDataGet
      security:
        - scope: []
          user: []
      parameters:
        - name: playerId
          in: query
          schema:
            type: integer
          required: true
        - name: tournamentId
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminGetPlayerStatusResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Tournament
      operationId: Tournament_updateAdminPlayer
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlayerStatusRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPlayerStatus'
        '400':
          description: Bad Request
  /basic/tournaments/me:
    get:
      tags:
        - Tournament
      operationId: Tournament_getMyTournament
      security:
        - scope: []
          user: []
      parameters:
        - name: tournamentId
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlayerStatusResponse'
        '400':
          description: Bad Request
  /basic/tournaments/champions:
    get:
      tags:
        - Tournament
      operationId: Tournament_getChampions
      security:
        - scope: []
          user: []
      parameters:
        - name: tournamentId
          in: query
          schema:
            type: string
          required: false
        - name: cycles
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetChampionsResponse'
        '400':
          description: Bad Request
  /basic/tournaments/score:
    post:
      tags:
        - Tournament
      operationId: Tournament_submitScore
      security:
        - scope: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/social/friends:
    delete:
      tags:
        - Friend
      operationId: Friend_removeFriend
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerIdRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/social/my:
    get:
      tags:
        - Message
      operationId: Message_getMySocialData
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Social'
        '400':
          description: Bad Request
  /basic/social/friends/import:
    post:
      tags:
        - Friend
      operationId: Friend_importFriendsData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportFriendsRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/social/blocked:
    post:
      tags:
        - Block
      operationId: Block_userSocialBlocked
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerIdRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendshipStatus'
        '400':
          description: Bad Request
    delete:
      tags:
        - Block
      operationId: Block_userSocialUnblock
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerIdRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendshipStatus'
        '400':
          description: Bad Request
  /basic/legacy-timers/defs:
    get:
      tags:
        - Timer
      operationId: Timer_getLegacyTimers
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTimersResponse'
        '400':
          description: Bad Request
  /basic/legacy-promos/codes:
    get:
      tags:
        - Promo
      operationId: Promo_getPromoCodes
      security:
        - scope: []
          user: []
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAvailableCodesResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Promo
      operationId: Promo_generatePromoCode
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCodesRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeRedemptionResponse'
        '400':
          description: Bad Request
  /basic/legacy-promos/claim:
    post:
      tags:
        - Promo
      operationId: Promo_claimLegacyPromo
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeClaimRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeRedemptionResponse'
        '400':
          description: Bad Request
  /basic/legacy-entitlement-defs/grant:
    post:
      tags:
        - Entitlement
      operationId: Entitlement_createLegacyEntitlementDefs
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementGrantMultiRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-entitlement-defs/revoke:
    delete:
      tags:
        - Entitlement
      operationId: Entitlement_revokeLegacyEntitlementDefs
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeEntitlementRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementResponse'
        '400':
          description: Bad Request
  /basic/legacy-entitlement-defs/upload:
    post:
      tags:
        - Entitlement
      operationId: Entitlement_uploadLegacyEntitlementDefs
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadEntitlementDefinitionRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-entitlement-defs/player:
    get:
      tags:
        - Entitlement
      operationId: Entitlement_getPlayerEntitlements
      security:
        - scope: []
          user: []
      parameters:
        - name: state
          in: query
          schema:
            type: string
          required: false
        - name: skip
          in: query
          schema:
            type: integer
          required: false
        - name: symbol
          in: query
          schema:
            type: string
          required: false
        - name: icw
          in: query
          schema:
            type: boolean
          required: false
        - name: spec
          in: query
          schema:
            type: string
          required: false
        - name: limit
          in: query
          schema:
            type: integer
          required: false
        - name: gt
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementListResponse'
        '400':
          description: Bad Request
  /basic/legacy-entitlement-defs/claim:
    put:
      tags:
        - Entitlement
      operationId: Entitlement_defineEntitlementLegacy
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimEntitlementRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementResponse'
        '400':
          description: Bad Request
  /basic/legacy-cloud/campaigns/schedule:
    put:
      tags:
        - Campaign
      operationId: Campaign_updateSchedule
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RescheduleMessageCampaignRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-cloud/templates:
    get:
      tags:
        - Template
      operationId: Template_getLegacyCloudTemplates
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCloudStorageResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Template
      operationId: Template_createLegacyCloudTemplate
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageTemplateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Template
      operationId: Template_deleteLegacyCloud
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-cloud/campaigns:
    get:
      tags:
        - Campaign
      operationId: Campaign_getLegacyCloudCampaigns
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCampaignsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Campaign
      operationId: Campaign_createNewLegacyCloudCampaign
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageCampaignRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Campaign
      operationId: Campaign_removeLegacyCloud
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EjectMessageCampaignRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-pvp-defs/file:
    post:
      tags:
        - LegacyPvpDef
      operationId: LegacyPvpDef_submitPvpFile
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PvpRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-shards/accepting:
    get:
      tags:
        - Shard
      operationId: Shard_getLegacyAccepting
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardListResponse'
        '400':
          description: Bad Request
  /basic/legacy-shards/preferred:
    get:
      tags:
        - Shard
      operationId: Shard_getPreferredLegacyShards
      security:
        - scope: []
          user: []
      parameters:
        - name: preference
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardResponse'
        '400':
          description: Bad Request
  /basic/history/apiaccess/url:
    get:
      tags:
        - History
      operationId: History_getApiAccessUrl
      security:
        - scope: []
          user: []
      parameters:
        - name: from
          in: query
          schema:
            type: integer
            format: int64
          required: true
        - name: to
          in: query
          schema:
            type: integer
            format: int64
          required: true
        - name: customerScoped
          in: query
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryUrlResponse'
        '400':
          description: Bad Request
  /basic/history/query/url:
    post:
      tags:
        - History
      operationId: History_getQueryData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryUrlResponse'
        '400':
          description: Bad Request
  /basic/history/query:
    post:
      tags:
        - History
      operationId: History_getQueryResults
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          description: Bad Request
  /basic/history/microservices:
    get:
      tags:
        - History
      operationId: History_getMicroservicesHistory
      security:
        - scope: []
          user: []
      parameters:
        - name: from
          in: query
          schema:
            type: integer
            format: int64
          required: true
        - name: to
          in: query
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMicroservicesResponse'
        '400':
          description: Bad Request
  /basic/history/account/roles:
    get:
      tags:
        - Account
      operationId: Account_listRoles
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserRolesView'
        '400':
          description: Bad Request
  /basic/history/apiaccess:
    get:
      tags:
        - History
      operationId: History_getApiAccessHistory
      security:
        - scope: []
          user: []
      parameters:
        - name: from
          in: query
          schema:
            type: integer
            format: int64
          required: true
        - name: to
          in: query
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessLogResponse'
        '400':
          description: Bad Request
  /basic/history/events:
    get:
      tags:
        - History
      operationId: History_getEventHistory
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespacesResponse'
        '400':
          description: Bad Request
  /basic/trials:
    get:
      tags:
        - Trial
      operationId: Trial_listTrials
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTrialsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Trial
      operationId: Trial_createNewTrial
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrialRestRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSuccessResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Trial
      operationId: Trial_removeTrial
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTrialRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrialSuccessResponse'
        '400':
          description: Bad Request
  /basic/announcements:
    post:
      tags:
        - Announcement
      operationId: Announcement_createNewAnnouncement
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Announcement
      operationId: Announcement_deleteAnnouncement
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAnnouncementRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /object/announcements/{objectId}:
    get:
      tags:
        - Announcement
      operationId: Announcement_getObjectDetails
      security:
        - scope: []
      parameters:
        - name: include_deleted
          in: query
          schema:
            type: boolean
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementQueryResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Announcement
      operationId: Announcement_removeAnnouncementObject
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/calendars/{objectId}:
    get:
      tags:
        - Object
      operationId: Object_getCalendars
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarQueryResponse'
        '400':
          description: Bad Request
  /object/chatV2/{objectId}:
    get:
      tags:
        - Object
      operationId: Object_getChatV2
      security:
        - scope: []
          user: []
      parameters:
        - name: scope
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoomsResponse'
        '400':
          description: Bad Request
  /basic/cloudsaving:
    get:
      tags:
        - Cloudsaving
      operationId: Cloudsaving_getData
      security:
        - scope: []
          user: []
      parameters:
        - name: playerId
          in: query
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '400':
          description: Bad Request
  /object/commerce/{objectId}:
    get:
      tags:
        - Object
      operationId: Object_getById
      security:
        - scope: []
          user: []
      parameters:
        - name: scope
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActiveOffersResponse'
        '400':
          description: Bad Request
  /basic/content:
    post:
      tags:
        - Content
      operationId: Content_createNewContent
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveContentRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveContentResponse'
        '400':
          description: Bad Request
  /object/events/{objectId}:
    get:
      tags:
        - Event
      operationId: Event_getObjectEvents
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventObjectData'
        '400':
          description: Bad Request
  /object/event-players/{objectId}:
    get:
      tags:
        - Event
      operationId: Event_getPlayersData
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlayerView'
        '400':
          description: Bad Request
  /object/gamerelay/{objectId}:
    post:
      tags:
        - Game
      operationId: Game_relayObjectPost
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/inventory/{objectId}:
    get:
      tags:
        - Object
      operationId: Object_getInventoryObjectById
      security:
        - scope: []
      parameters:
        - name: scope
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryView'
        '400':
          description: Bad Request
    post:
      tags:
        - Object
      operationId: Object_createInventoryObject
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryQueryRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryView'
        '400':
          description: Bad Request
    put:
      tags:
        - Object
      operationId: Object_updateInventoryObject
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/leaderboards/{objectId}:
    post:
      tags:
        - Leaderboard
      operationId: Leaderboard_submitObjectScores
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardCreateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Leaderboard
      operationId: Leaderboard_deleteObjectById
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/groups/{objectId}:
    get:
      tags:
        - Group
      operationId: Group_getObjectGroups
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad Request
    put:
      tags:
        - Group
      operationId: Group_updateObjectGroup
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Group
      operationId: Group_deleteObjectGroup
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisbandRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /object/group-users/{objectId}:
    get:
      tags:
        - Group
      operationId: Group_getGroupUsers
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUser'
        '400':
          description: Bad Request
  /basic/mail:
    get:
      tags:
        - Mail
      operationId: Mail_getMessages
      security:
        - scope: []
      parameters:
        - name: mid
          in: query
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Mail
      operationId: Mail_updateMailContent
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMailRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
  /object/mail/{objectId}:
    get:
      tags:
        - Mail
      operationId: Mail_getObjectMail
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailQueryResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Mail
      operationId: Mail_createObjectMail
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMailObjectRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMailResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Mail
      operationId: Mail_updateObjectMail
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMailRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSuccessResponse'
        '400':
          description: Bad Request
  /object/payments/{objectId}:
    get:
      tags:
        - Object
      operationId: Object_getPaymentDetails
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Bad Request
  /basic/notification:
    get:
      tags:
        - Notification
      operationId: Notification_getUnreadMessages
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberDetailsResponse'
        '400':
          description: Bad Request
  /basic/session:
    post:
      tags:
        - Session
      operationId: Session_createSessionRequest
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartSessionRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartSessionResponse'
        '400':
          description: Bad Request
  /object/stats/{objectId}:
    get:
      tags:
        - Object
      operationId: Object_getObjectStats
      security:
        - scope: []
          user: []
      parameters:
        - name: stats
          in: query
          schema:
            type: string
          required: false
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Object
      operationId: Object_createObjectStats
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Object
      operationId: Object_deleteStatsObject
      security:
        - scope: []
          user: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/tournaments:
    get:
      tags:
        - Tournament
      operationId: Tournament_listTournaments
      security:
        - scope: []
      parameters:
        - name: isRunning
          in: query
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentQueryResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Tournament
      operationId: Tournament_createNewTournament
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerStatus'
        '400':
          description: Bad Request
  /object/tournaments/{objectId}:
    get:
      tags:
        - Tournament
      operationId: Tournament_getTournamentObject
      security:
        - scope: []
      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentClientView'
        '400':
          description: Bad Request
  /basic/legacy-timers:
    get:
      tags:
        - Timer
      operationId: Timer_getLegacyTimers
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CookedTimerResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Timer
      operationId: Timer_createLegacyTimer
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTimerRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
        '400':
          description: Bad Request
    delete:
      tags:
        - Timer
      operationId: Timer_deleteLegacyTimers
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTimerRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-promos:
    get:
      tags:
        - Promo
      operationId: Promo_getLegacyPromos
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDefinitionsResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Promo
      operationId: Promo_createLegacyPromo
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeCreateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeRedemptionResponse'
        '400':
          description: Bad Request
  /basic/legacy-entitlement-defs:
    get:
      tags:
        - LegacyPvpDef
      operationId: LegacyPvpDef_getEntitlementDefs
      security:
        - scope: []
          user: []
      parameters:
        - name: symbol
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementDefinitions'
        '400':
          description: Bad Request
    post:
      tags:
        - LegacyEntitlementDef
      operationId: LegacyEntitlementDef_createDefinition
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyEntitlementDefinitionRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Entitlement
      operationId: Entitlement_createLegacyEntitlementDefs
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyEntitlementDefinitionRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - LegacyPvpDef
      operationId: LegacyPvpDef_deleteEntitlementDefinition
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEntitlementDefinitionRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-pvp-defs:
    get:
      tags:
        - LegacyPvpDef
      operationId: LegacyPvpDef_getDefinitions
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvpDefinitions'
        '400':
          description: Bad Request
    put:
      tags:
        - LegacyPvpDef
      operationId: LegacyPvpDef_createOrUpdateDefinition
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PvpRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - LegacyPvpDef
      operationId: LegacyPvpDef_deleteDefinition
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PvpRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '400':
          description: Bad Request
  /basic/legacy-shards:
    get:
      tags:
        - Shard
      operationId: Shard_getLegacyData
      security:
        - scope: []
          user: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardListResponse'
        '400':
          description: Bad Request
    post:
      tags:
        - Shard
      operationId: Shard_postLegacyShard
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShardDef'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardResponse'
        '400':
          description: Bad Request
    put:
      tags:
        - Shard
      operationId: Shard_updateLegacyShardData
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShardUpdateRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardResponse'
        '400':
          description: Bad Request
    delete:
      tags:
        - Shard
      operationId: Shard_deleteLegacyShard
      security:
        - scope: []
          user: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShardDeleteRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardResponse'
        '400':
          description: Bad Request
components:
  schemas:
    ScheduleTrialRequest:
      title: Schedule Trial Request
      properties:
        name:
          type: string
        time:
          type: integer
      type: object
      required:
        - time
    Trial:
      type: object
      properties:
        name:
          type: string
        activated:
          type: integer
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/Cohort'
        ctype:
          type: string
        scheduleStart:
          type: integer
        assigned:
          type: integer
        strategy:
          type: string
        ttype:
          type: string
        created:
          type: integer
        active:
          type: boolean
      required:
        - active
        - assigned
    CustomCohortRule:
      type: object
      properties:
        customAttr:
          type: string
        customOp:
          type: string
        customVal:
          type: array
          items:
            type: string
    Cohort:
      type: object
      properties:
        name:
          type: string
        customRule:
          type: array
          items:
            $ref: '#/components/schemas/CustomCohortRule'
        populationCap:
          type: integer
        assigned:
          type: integer
        pct:
          type: integer
        cloudData:
          type: array
          items:
            $ref: '#/components/schemas/CloudStorage'
      required:
        - assigned
    DeleteTrialDataRequest:
      title: Delete Trial Data Request
      properties:
        id:
          type: integer
      type: object
      required:
        - id
    SaveGameDataResponse:
      title: Save Game Data Response
      properties:
        version:
          type: integer
        result:
          type: string
        sid:
          type: integer
      type: object
      required:
        - sid
        - version
    PauseTrialRequest:
      title: Pause Trial Request
      properties:
        name:
          type: string
      type: object
    StartTrialRequest:
      title: Start Trial Request
      properties:
        name:
          type: string
      type: object
    CloudStorage:
      type: object
      properties:
        version:
          type: integer
        retrieved:
          type: integer
        uniqueIdentifier:
          type: string
        data: {}
        ref:
          type: string
        added:
          type: integer
        stype:
          type: integer
        updated:
          type: integer
        expiration:
          type: integer
        gt:
          type: integer
        sid:
          type: integer
      required:
        - sid
        - stype
    ListTrialsResponse:
      title: List Trials Response
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Trial'
      type: object
    CohortEntry:
      type: object
      properties:
        trial:
          type: string
        cohort:
          type: string
    GetPlayerTrialsResponse:
      title: Get Player Trials Response
      properties:
        trials:
          type: array
          items:
            $ref: '#/components/schemas/CohortEntry'
        cohortData:
          type: array
          items:
            $ref: '#/components/schemas/CloudStorage'
      type: object
    GetS3DataResponse:
      title: Get S 3 Data Response
      properties:
        data:
          type: array
          items:
            type: integer
      type: object
    CreateTrialRestRequest:
      title: Create Trial Rest Request
      properties:
        name:
          type: string
        strat:
          type: string
        cohortType:
          type: string
        cohorts:
          type: string
      type: object
    UploadTrialDataRequest:
      title: Upload Trial Data Request
      properties:
        trialName:
          type: string
        cohortName:
          type: string
        dataName:
          type: string
        filePayloadBase64:
          type: string
      type: object
    GetS3DataRequest:
      title: Get S 3 Data Request
      properties:
        id:
          type: integer
      type: object
      required:
        - id
    DeleteTrialRequest:
      title: Delete Trial Request
      properties:
        trialType:
          type: string
        name:
          type: string
      type: object
    GetPlayerTrialsRequest:
      title: Get Player Trials Request
      properties:
        dbid:
          type: integer
      type: object
      required:
        - dbid
    TrialSuccessResponse:
      title: Trial Success Response
      properties:
        result:
          type: boolean
      type: object
      required:
        - result
    PasswordUpdateConfirmation:
      title: Password Update Confirmation
      properties:
        code:
          type: string
        newPassword:
          type: string
        email:
          type: string
      type: object
      required:
        - code
        - newPassword
    DeviceIdAvailableRequest:
      title: Device Id Available Request
      properties:
        deviceId:
          type: string
      type: object
      required:
        - deviceId
    AccountUpdate:
      title: Account Update
      properties:
        thirdParty:
          type: string
        hasThirdPartyToken:
          type: boolean
        country:
          type: string
        language:
          type: string
        gamerTagAssoc:
          $ref: '#/components/schemas/GamerTagAssociation'
        token:
          type: string
        deviceId:
          type: string
        userName:
          type: string
      type: object
      required:
        - hasThirdPartyToken
    EmailUpdateRequest:
      title: Email Update Request
      properties:
        newEmail:
          type: string
        codeType:
          type: string
      type: object
      required:
        - newEmail
    ThirdPartyAssociation:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        userBusinessId:
          type: string
        userAppId:
          type: string
        meta:
          type: object
          additionalProperties: true
        appId:
          type: string
      required:
        - name
        - appId
        - userAppId
        - meta
    DeleteDevicesRequest:
      title: Delete Devices Request
      properties:
        deviceIds:
          type: array
          items:
            type: string
      type: object
    ItemCreateRequest:
      type: object
      properties:
        contentId:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ItemProperty'
      required:
        - contentId
        - properties
    AccountPersonallyIdentifiableInformationResponse:
      title: Account Personally Identifiable Information Response
      properties:
        account:
          $ref: '#/components/schemas/Account'
        stats:
          type: array
          items:
            $ref: '#/components/schemas/StatsResponse'
        paymentAudits:
          $ref: '#/components/schemas/ListAuditResponse'
      type: object
      required:
        - account
        - stats
        - paymentAudits
    InFlightMessage:
      type: object
      properties:
        method:
          type: string
        body:
          type: string
        path:
          type: string
        gamerTag:
          type: integer
          format: int64
        shard:
          type: string
        service:
          type: string
        id:
          type: string
      required:
        - service
        - id
        - method
        - path
        - body
    AccountPortalView:
      type: object
      properties:
        email:
          type: string
        roleString:
          type: string
        scopes:
          type: array
          items:
            type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        thirdPartyAppAssociations:
          type: array
          items:
            type: string
      required:
        - id
        - scopes
        - thirdPartyAppAssociations
    SearchAccountsRequest:
      title: Search Accounts Request
      properties:
        query:
          type: string
        page:
          type: integer
          format: int32
        pagesize:
          type: integer
          format: int32
      type: object
      required:
        - query
        - page
        - pagesize
    PasswordUpdateRequest:
      title: Password Update Request
      properties:
        email:
          type: string
        codeType:
          type: string
      type: object
      required:
        - email
    PaymentAuditEntryViewModel:
      type: object
      properties:
        version:
          type: string
        providerid:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/PaymentHistoryEntryViewModel'
        txid:
          type: integer
          format: int64
        providername:
          type: string
        obtainItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        txstate:
          type: string
        updated:
          type: integer
          format: int64
        obtainCurrency:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        entitlements:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementGenerator'
        details:
          $ref: '#/components/schemas/PaymentDetailsEntryViewModel'
        replayGuardValue:
          type: string
        gt:
          type: integer
          format: int64
        created:
          type: integer
          format: int64
      required:
        - gt
        - txid
        - providername
        - details
        - providerid
        - txstate
        - history
        - entitlements
    AccountPlayerView:
      title: Account Player View
      properties:
        email:
          type: string
        deviceIds:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        thirdPartyAppAssociations:
          type: array
          items:
            type: string
      type: object
      required:
        - id
        - scopes
        - thirdPartyAppAssociations
        - deviceIds
    PaymentHistoryEntryViewModel:
      type: object
      properties:
        change:
          type: string
        data:
          type: string
        timestamp:
          type: string
      required:
        - change
    AccountAvailableResponse:
      title: Account Available Response
      properties:
        available:
          type: boolean
      type: object
      required:
        - available
    EntitlementGenerator:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        claimWindow:
          $ref: '#/components/schemas/EntitlementClaimWindow'
        params:
          type: object
          additionalProperties: true
        symbol:
          type: string
        specialization:
          type: string
        action:
          type: string
      required:
        - symbol
        - action
    StatsResponse:
      title: Stats Response
      type: object
      properties:
        id:
          type: integer
          format: int64
        stats:
          type: object
          additionalProperties: true
      required:
        - id
    RoleMapping:
      type: object
      properties:
        projectId:
          type: string
        role:
          type: string
      required:
        - projectId
        - role
    AccountRegistration:
      title: Account Registration
      properties:
        email:
          type: string
        password:
          type: string
      type: object
      required:
        - email
        - password
    EmailUpdateConfirmation:
      title: Email Update Confirmation
      properties:
        code:
          type: string
        password:
          type: string
      type: object
      required:
        - code
        - password
    GetAdminsResponse:
      title: Get Admins Response
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountPortalView'
      type: object
      required:
        - accounts
    PaymentDetailsEntryViewModel:
      type: object
      properties:
        reference:
          type: string
        name:
          type: string
        quantity:
          type: integer
          format: int32
        sku:
          type: string
        price:
          type: integer
          format: int32
        subcategory:
          type: string
        gameplace:
          type: string
        localPrice:
          type: string
        category:
          type: string
        localCurrency:
          type: string
        providerProductId:
          type: string
      required:
        - price
        - quantity
        - name
        - reference
        - gameplace
        - sku
        - providerProductId
    CurrencyChange:
      type: object
      properties:
        symbol:
          type: string
        amount:
          type: integer
          format: int64
        originalAmount:
          type: integer
          format: int64
      required:
        - amount
    AddAccountRequest:
      title: Add Account Request
      properties:
        email:
          type: string
        role:
          type: string
      type: object
      required:
        - email
    EntitlementClaimWindow:
      type: object
      properties:
        open:
          type: integer
          format: int64
        close:
          type: integer
          format: int64
      required:
        - open
        - close
    GamerTagAssociation:
      type: object
      properties:
        projectId:
          type: string
        gamerTag:
          type: integer
          format: int64
      required:
        - gamerTag
    EmptyResponse:
      title: Empty Response
      properties:
        result:
          type: string
      type: object
      required:
        - result
    ItemProperty:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    ThirdPartyAvailableRequest:
      title: Third Party Available Request
      properties:
        thirdParty:
          type: string
        token:
          type: string
      type: object
      required:
        - thirdParty
        - token
    AccountSearchResponse:
      title: Account Search Response
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      type: object
      required:
        - accounts
    ListAuditResponse:
      title: List Audit Response
      type: object
      properties:
        audits:
          type: array
          items:
            $ref: '#/components/schemas/PaymentAuditEntry'
      required:
        - audits
    AccountAvailableRequest:
      title: Account Available Request
      properties:
        email:
          type: string
      type: object
      required:
        - email
    FindAccountRequest:
      title: Find Account Request
      properties:
        query:
          type: string
      type: object
      required:
        - query
    Account:
      title: Account
      type: object
      properties:
        inFlight:
          type: array
          items:
            $ref: '#/components/schemas/InFlightMessage'
        createdTimeMillis:
          type: integer
          format: int64
        realmId:
          type: string
        email:
          type: string
        roleString:
          type: string
        deviceIds:
          type: array
          items:
            type: string
        privilegedAccount:
          type: boolean
        country:
          type: string
        wasMigrated:
          type: boolean
        id:
          type: integer
          format: int64
        gamerTags:
          type: array
          items:
            $ref: '#/components/schemas/GamerTagAssociation'
        language:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        updatedTimeMillis:
          type: integer
          format: int64
        thirdParties:
          type: array
          items:
            $ref: '#/components/schemas/ThirdPartyAssociation'
        deviceId:
          type: string
        userName:
          type: string
        heartbeat:
          type: integer
          format: int64
        password:
          type: string
        user:
          type: string
        projects:
          type: array
          items:
            type: string
        created:
          type: integer
          format: int64
      required:
        - user
        - password
        - projects
    GetAccountRequest:
      title: Get Account Request
      properties:
        gamerTag:
          type: integer
        email:
          type: string
        thirdPartyAssoc:
          $ref: '#/components/schemas/ThirdPartyAssociation'
        deviceId:
          type: string
      type: object
    DeleteThirdPartyAssociation:
      title: Delete Third Party Association
      properties:
        thirdParty:
          type: string
        userAppId:
          type: string
      type: object
    UpdateRole:
      title: Update Role
      properties:
        cid:
          type: string
        realm:
          type: string
        role:
          type: string
      type: object
    AvailableRolesResponse:
      title: Available Roles Response
      properties:
        roles:
          type: array
          items:
            type: string
      type: object
    TransferThirdPartyAssociation:
      title: Transfer Third Party Association
      properties:
        fromAccountId:
          type: integer
        thirdParty:
          $ref: '#/components/schemas/ThirdPartyAssociation'
      type: object
      required:
        - fromAccountId
    WebhookComet:
      type: object
      properties:
        description:
          type: string
        parameters:
          $ref: '#/components/schemas/RouteParameters'
        method:
          type: string
        variables:
          $ref: '#/components/schemas/RouteVariables'
        symbol:
          type: string
        route:
          $ref: '#/components/schemas/ServiceRoute'
    AnnouncementContentResponse:
      title: Announcement Content Response
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Announcement'
      type: object
    AnnouncementAttachment:
      type: object
      properties:
        symbol:
          type: string
        count:
          type: integer
        type:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentProperty'
      required:
        - count
    RouteVariable:
      type: object
      properties:
        name:
          type: string
        typeName:
          type: string
    WebhookInvocationStrategy:
      type: object
      properties:
        invocationType:
          type: string
        retryType:
          type: string
    Announcement:
      type: object
      properties:
        summary:
          type: string
        title:
          type: string
        body:
          type: string
        channel:
          type: string
        start_date:
          type: string
        gift:
          $ref: '#/components/schemas/PlayerReward'
        mongo_start_date:
          type: integer
        stat_requirements:
          type: array
          items:
            $ref: '#/components/schemas/PlayerStatRequirement'
        mongo_end_date:
          type: integer
        symbol:
          type: string
        clientData:
          type: object
          additionalProperties: true
        validationErrors:
          type: array
          items:
            type: string
        end_date:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AnnouncementAttachment'
    RouteParameter:
      type: object
      properties:
        name:
          type: string
        body:
          type: string
        typeName:
          type: string
        variableRef:
          $ref: '#/components/schemas/VariableReference'
    RouteVariables:
      type: object
      properties:
        variables:
          type: array
          items:
            $ref: '#/components/schemas/RouteVariable'
    PlayerReward:
      type: object
      properties:
        description:
          type: string
        addItemRequests:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        changeCurrencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChangeReward'
        callWebhooks:
          type: array
          items:
            $ref: '#/components/schemas/WebhookReward'
        addItems:
          type: array
          items:
            $ref: '#/components/schemas/NewItemReward'
        applyVipBonus:
          type: boolean
        addCurrencyMap:
          type: object
          additionalProperties: true
    VariableReference:
      type: object
      properties:
        name:
          type: string
    AttachmentProperty:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PlayerStatRequirement:
      type: object
      properties:
        domain:
          type: string
        stat:
          type: string
        constraint:
          type: string
        value:
          type: string
        access:
          type: string
    RouteParameters:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/RouteParameter'
        payload:
          type: string
        objectId:
          type: string
    ServiceRoute:
      type: object
      properties:
        service:
          type: string
        endpoint:
          type: string
        serviceTypeStr:
          type: string
    CurrencyChangeReward:
      type: object
      properties:
        symbol:
          type: string
        amount:
          type: integer
      required:
        - amount
    DeleteAnnouncementRequest:
      title: Delete Announcement Request
      properties:
        symbol:
          type: string
      type: object
    WebhookReward:
      type: object
      properties:
        webhookSymbol:
          type: string
        strategy:
          $ref: '#/components/schemas/WebhookInvocationStrategy'
        webHookComet:
          $ref: '#/components/schemas/WebhookComet'
    NewItemReward:
      type: object
      properties:
        symbol:
          type: string
        properties:
          type: object
          additionalProperties: true
    SearchAnnouncementsRequest:
      title: Search Announcements Request
      properties:
        date:
          type: string
      type: object
    AnnouncementRawResponse:
      title: Announcement Raw Response
      properties:
        announcements:
          type: object
          additionalProperties: true
      type: object
    CommonResponse:
      title: Common Response
      properties:
        result:
          type: string
        data:
          type: object
          additionalProperties: true
      type: object
      required:
        - result
        - data
    AnnouncementQuery:
      title: Announcement Query
      properties:
        include_deleted:
          type: boolean
      type: object
    AnnouncementRequest:
      title: Announcement Request
      properties:
        announcement:
          type: string
        announcements:
          type: array
          items:
            type: string
      type: object
    AnnouncementQueryResponse:
      title: Announcement Query Response
      properties:
        announcements:
          type: array
          items:
            $ref: '#/components/schemas/AnnouncementView'
      type: object
    AnnouncementView:
      type: object
      properties:
        summary:
          type: string
        title:
          type: string
        body:
          type: string
        isClaimed:
          type: boolean
        channel:
          type: string
        endDate:
          type: string
        clientDataList:
          type: array
          items:
            $ref: '#/components/schemas/ClientDataEntry'
        secondsRemaining:
          type: integer
        id:
          type: string
        isDeleted:
          type: boolean
        isRead:
          type: boolean
        startDate:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AnnouncementAttachment'
      required:
        - isRead
        - isClaimed
        - isDeleted
    ClientDataEntry:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    TokenRequestWrapper:
      title: Token Request Wrapper
      properties:
        username:
          type: string
        scope:
          type: array
          items:
            type: string
        refresh_token:
          type: string
        third_party:
          type: string
        redirect_uri:
          type: string
        client_id:
          type: string
        code:
          type: string
        token:
          type: string
        customerScoped:
          type: boolean
        grant_type:
          type: string
        password:
          type: string
      type: object
    GetTokenRequest:
      title: Get Token Request
      properties:
        token:
          type: string
      type: object
    TokenResponse:
      title: Token Response
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
          format: int64
        refresh_token:
          type: string
        scopes:
          type: array
          items:
            type: string
        token_type:
          type: string
      type: object
      required:
        - access_token
        - expires_in
        - refresh_token
        - token_type
    Token:
      title: Token
      properties:
        gamerTag:
          type: integer
        scopes:
          type: array
          items:
            type: string
        accountId:
          type: integer
        cid:
          type: integer
        pid:
          type: string
        expiresMs:
          type: integer
        token:
          type: string
        type:
          type: string
        created:
          type: integer
      type: object
      required:
        - created
        - cid
    RewardCalendarDay:
      type: object
      properties:
        obtain:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementGenerator'
    CalendarView:
      type: object
      properties:
        nextIndex:
          type: integer
        nextClaimSeconds:
          type: integer
        id:
          type: string
        remainingSeconds:
          type: integer
        days:
          type: array
          items:
            $ref: '#/components/schemas/RewardCalendarDay'
      required:
        - nextIndex
        - remainingSeconds
        - nextClaimSeconds
    CalendarClaimRequest:
      title: Calendar Claim Request
      properties:
        id:
          type: string
      type: object
    CalendarQueryResponse:
      title: Calendar Query Response
      properties:
        calendars:
          type: array
          items:
            $ref: '#/components/schemas/CalendarView'
      type: object
    CreateRoomResponse:
      title: Create Room Response
      properties:
        room:
          $ref: '#/components/schemas/RoomInfo'
      type: object
    SendMessageResponse:
      title: Send Message Response
      properties:
        message:
          $ref: '#/components/schemas/Message'
      type: object
    LeaveRoomRequest:
      title: Leave Room Request
      properties:
        roomId:
          type: string
      type: object
    SendMessageRequest:
      title: Send Message Request
      properties:
        roomId:
          type: string
        content:
          type: string
      type: object
    CreateRoomRequest:
      title: Create Room Request
      properties:
        roomName:
          type: string
        keepSubscribed:
          type: boolean
        players:
          type: array
          items:
            type: integer
        gameType:
          type: string
        dbids:
          type: array
          items:
            type: integer
      type: object
      required:
        - keepSubscribed
    RoomInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        keepSubscribed:
          type: boolean
        players:
          type: array
          items:
            type: integer
      required:
        - keepSubscribed
    LeaveRoomResponse:
      title: Leave Room Response
      properties:
        removed:
          type: string
      type: object
    GetRoomsResponse:
      title: Get Rooms Response
      properties:
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/RoomInfo'
      type: object
    Message:
      type: object
      properties:
        roomId:
          type: string
        gamerTag:
          type: integer
        reactions:
          type: object
          additionalProperties: true
        timestampMillis:
          type: integer
        censoredContent:
          type: string
        messageId:
          type: string
        content:
          type: string
        body:
          type: string
        expires:
          type: integer
          format: utc-millisec
        receiverGamerTag:
          type: integer
        subject:
          type: string
        state:
          type: string
        id:
          type: integer
        senderGamerTag:
          type: integer
        sent:
          type: integer
          format: utc-millisec
        category:
          type: string
        bodyRef:
          type: integer
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        rewards:
          $ref: '#/components/schemas/MailRewards'
        claimedTimeMs:
          type: integer
      required:
        - id
        - receiverGamerTag
        - senderGamerTag
    ChatGetRequest:
      title: Chat Get Request
      properties:
        scope:
          type: string
      type: object
    ObjectRequest:
      type: object
      properties:
        objectKey:
          type: string
    ObjectRequests:
      title: Object Requests
      properties:
        request:
          type: array
          items:
            $ref: '#/components/schemas/ObjectRequest'
        playerId:
          type: integer
      type: object
    ObjectsMetadataResponse:
      title: Objects Metadata Response
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ObjectMetadataResponse'
      type: object
    URLSResponse:
      title: URLS Response
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/URLResponse'
      type: object
    URLResponse:
      type: object
      properties:
        url:
          type: string
        objectKey:
          type: string
    Reference:
      type: object
      properties:
        contentPrefix:
          type: string
        visibility:
          type: string
          enum:
            - not-available
        type:
          type: string
          enum:
            - not-available
    ObjectMetadataResponse:
      type: object
      properties:
        objectKey:
          type: string
        metadata:
          type: object
          additionalProperties: true
    MetadataPair:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Manifest:
      title: Manifest
      properties:
        id:
          type: string
        manifest:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
        created:
          type: integer
        replacement:
          type: boolean
        references:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
        checksum:
          type: string
      type: object
      required:
        - created
    PlayerBasicCloudDataRequest:
      title: Player Basic Cloud Data Request
      properties:
        playerId:
          type: integer
      type: object
    UploadRequestsFromPortal:
      title: Upload Requests From Portal
      properties:
        request:
          type: array
          items:
            $ref: '#/components/schemas/UploadRequestFromPortal'
        playerId:
          type: integer
      type: object
    UploadRequests:
      title: Upload Requests
      properties:
        request:
          type: array
          items:
            $ref: '#/components/schemas/UploadRequest'
        playerId:
          type: integer
      type: object
    ReplaceObjectsRequest:
      title: Replace Objects Request
      properties:
        sourcePlayerId:
          type: integer
        targetPlayerId:
          type: integer
      type: object
      required:
        - sourcePlayerId
        - targetPlayerId
    UploadRequest:
      type: object
      properties:
        objectKey:
          type: string
        lastModified:
          type: integer
        checksum:
          type: string
        sizeInBytes:
          type: integer
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/MetadataPair'
      required:
        - sizeInBytes
    UploadRequestFromPortal:
      type: object
      properties:
        objectKey:
          type: string
        sizeInBytes:
          type: integer
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/MetadataPair'
        lastModified:
          type: integer
      required:
        - sizeInBytes
    OfferDefinition:
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
        symbol:
          type: string
        obtainItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        lootRoll:
          $ref: '#/components/schemas/CommerceLootRoll'
        obtainCurrency:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        metadata:
          type: string
        images:
          type: array
          items:
            type: string
        descriptions:
          type: array
          items:
            type: string
        obtain:
          type: array
          items:
            type: string
    EntitlementRequirement:
      type: object
      properties:
        symbol:
          type: string
        constraint:
          type: string
        state:
          type: string
        specialization:
          type: string
    GetSkusReq:
      title: Get Skus Req
      properties:
        version:
          type: integer
      type: object
    Listing:
      type: object
      properties:
        cohortRequirements:
          type: array
          items:
            $ref: '#/components/schemas/CohortRequirement'
        offerSymbol:
          type: string
        purchaseLimit:
          type: integer
        price:
          $ref: '#/components/schemas/Price'
        playerStatRequirements:
          type: array
          items:
            $ref: '#/components/schemas/PlayerStatRequirement'
        buttonText:
          type: object
          additionalProperties: true
        entitlementRequirements:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementRequirement'
        symbol:
          type: string
        clientData:
          type: object
          additionalProperties: true
        activeDurationCoolDownSeconds:
          type: integer
        activeDurationSeconds:
          type: integer
        activeDurationPurchaseLimit:
          type: integer
        offerRequirements:
          type: array
          items:
            $ref: '#/components/schemas/OfferRequirement'
        activePeriod:
          $ref: '#/components/schemas/Period'
    Function1:
      type: object
      properties: {}
    ResultResponse:
      title: Result Response
      properties:
        result:
          type: boolean
      type: object
      required:
        - result
    SKU:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        realPrice:
          type: integer
        productIds:
          type: object
          additionalProperties: true
      required:
        - realPrice
    GetCatalogResponse:
      title: Get Catalog Response
      properties:
        catalog:
          $ref: '#/components/schemas/Catalog'
      type: object
    SKUDefinitions:
      type: object
      properties:
        version:
          type: integer
        created:
          type: integer
          format: utc-millisec
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/SKU'
      required:
        - version
    Price:
      type: object
      properties:
        type:
          type: string
        symbol:
          type: string
        amount:
          type: integer
        schedule:
          type: array
          items:
            type: integer
    CommerceLootRoll:
      type: object
      properties:
        preroll:
          type: boolean
        externalTables:
          type: array
          items:
            type: string
      required:
        - preroll
    DateTime:
      type: object
      properties:
        dayOfYear:
          type: integer
        minuteOfHour:
          type: integer
        chronology:
          $ref: '#/components/schemas/Chronology'
        dayOfWeek:
          type: integer
        hourOfDay:
          type: integer
        dayOfMonth:
          type: integer
        yearOfEra:
          type: integer
        year:
          type: integer
        secondOfDay:
          type: integer
        yearOfCentury:
          type: integer
        equalNow:
          type: boolean
        afterNow:
          type: boolean
        secondOfMinute:
          type: integer
        monthOfYear:
          type: integer
        millis:
          type: integer
        beforeNow:
          type: boolean
        centuryOfEra:
          type: integer
        minuteOfDay:
          type: integer
        era:
          type: integer
        millisOfDay:
          type: integer
        zone:
          $ref: '#/components/schemas/DateTimeZone'
        millisOfSecond:
          type: integer
        weekOfWeekyear:
          type: integer
        weekyear:
          type: integer
      required:
        - era
        - dayOfYear
        - dayOfWeek
        - dayOfMonth
        - year
        - millisOfDay
        - monthOfYear
        - hourOfDay
        - minuteOfHour
        - secondOfMinute
        - millisOfSecond
        - weekyear
        - weekOfWeekyear
        - yearOfEra
        - yearOfCentury
        - centuryOfEra
        - secondOfDay
        - minuteOfDay
        - millis
        - afterNow
        - beforeNow
        - equalNow
    Period:
      type: object
      properties:
        start:
          type: string
        end:
          type: string
    DateTimeZone:
      type: object
      properties:
        fixed:
          type: boolean
        id:
          type: string
      required:
        - fixed
    OfferConstraint:
      type: object
      properties:
        constraint:
          type: string
        value:
          type: integer
      required:
        - value
    GetSKUsResponse:
      title: Get SK Us Response
      properties:
        skus:
          $ref: '#/components/schemas/SKUDefinitions'
      type: object
    GetCatalogReq:
      title: Get Catalog Req
      properties:
        version:
          type: integer
      type: object
    Chronology:
      type: object
      properties:
        zone:
          $ref: '#/components/schemas/DateTimeZone'
    SaveSKUsRequest:
      title: Save SK Us Request
      properties:
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/SKU'
      type: object
    OfferRequirement:
      type: object
      properties:
        offerSymbol:
          type: string
        purchases:
          $ref: '#/components/schemas/OfferConstraint'
    CohortRequirement:
      type: object
      properties:
        trial:
          type: string
        cohort:
          type: string
        constraint:
          type: string
    Catalog:
      type: object
      properties:
        version:
          type: integer
        listingInfo$default$2:
          $ref: '#/components/schemas/Function1'
        offerDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/OfferDefinition'
        stores:
          type: array
          items:
            $ref: '#/components/schemas/Store'
        listingInfo$default$3:
          $ref: '#/components/schemas/SKUDefinitions'
        created:
          type: integer
          format: utc-millisec
      required:
        - version
    Store:
      type: object
      properties:
        title:
          type: string
        activeListingLimit:
          type: integer
        choose:
          type: integer
        listings:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
        showInactiveListings:
          type: boolean
        symbol:
          type: string
        refreshTime:
          type: integer
        storeWithAnnotations$default$3:
          type: boolean
        storeWithAnnotations$default$2:
          $ref: '#/components/schemas/DateTime'
      required:
        - storeWithAnnotations$default$3
    ReportPurchaseRequest:
      title: Report Purchase Request
      properties:
        listingId:
          type: string
        free:
          type: boolean
      type: object
    GetActiveListingRequest:
      title: Get Active Listing Request
      properties:
        listing:
          type: string
        store:
          type: string
        time:
          type: string
      type: object
    GetOffersReq:
      title: Get Offers Req
      properties:
        language:
          type: string
        time:
          type: string
        stores:
          type: string
      type: object
    ClearStatusRequest:
      title: Clear Status Request
      properties:
        store:
          type: string
      type: object
    PlayerListingView:
      type: object
      properties:
        clientDataList:
          type: array
          items:
            $ref: '#/components/schemas/ClientDataEntry'
        symbol:
          type: string
        clientData:
          type: object
          additionalProperties: true
        cooldown:
          type: integer
        secondsActive:
          type: integer
        offer:
          $ref: '#/components/schemas/PlayerOfferView'
        queryAfterPurchase:
          type: boolean
        purchasesRemain:
          type: integer
        secondsRemain:
          type: integer
        active:
          type: boolean
      required:
        - secondsActive
        - active
        - queryAfterPurchase
    StatSubscriptionNotification:
      title: Stat Subscription Notification
      properties:
        statsBefore:
          type: object
          additionalProperties: true
        statsAfter:
          type: object
          additionalProperties: true
      type: object
    GetTotalCouponResponse:
      title: Get Total Coupon Response
      properties:
        count:
          type: integer
      type: object
      required:
        - count
    GiveCouponReq:
      title: Give Coupon Req
      properties:
        listing:
          type: string
      type: object
    GetStoresReq:
      title: Get Stores Req
      properties:
        scope:
          type: string
      type: object
    PlayerStoreView:
      type: object
      properties:
        title:
          type: string
        listings:
          type: array
          items:
            $ref: '#/components/schemas/PlayerListingView'
        symbol:
          type: string
        nextDeltaSeconds:
          type: integer
        secondsRemain:
          type: integer
    PurchaseRequest:
      title: Purchase Request
      properties:
        purchaseId:
          type: string
      type: object
    PlayerOfferView:
      type: object
      properties:
        coupons:
          type: integer
        price:
          $ref: '#/components/schemas/Price'
        buttonText:
          type: string
        titles:
          type: array
          items:
            type: string
        symbol:
          type: string
        obtainItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        obtainCurrency:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        images:
          type: array
          items:
            type: string
        descriptions:
          type: array
          items:
            type: string
        obtain:
          type: array
          items:
            type: string
      required:
        - coupons
    ActiveListingResponse:
      title: Active Listing Response
      properties:
        storeSymbol:
          type: string
        listing:
          $ref: '#/components/schemas/PlayerListingView'
      type: object
    GetActiveOffersResponse:
      title: Get Active Offers Response
      properties:
        stores:
          type: array
          items:
            $ref: '#/components/schemas/PlayerStoreView'
      type: object
    ReferenceSuperset:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        version:
          type: string
        uri:
          type: string
        id:
          type: string
        checksum:
          type: string
        type:
          type: string
        visibility:
          type: string
    PullManifestRequest:
      title: Pull Manifest Request
      properties:
        sourceRealmPid:
          type: string
        id:
          type: string
      type: object
    TextReference:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        version:
          type: string
        contentPrefix:
          type: string
        uri:
          type: string
        id:
          type: string
        checksum:
          type: string
        type:
          type: string
          enum:
            - not-available
        visibility:
          type: string
          enum:
            - not-available
    SaveTextRequest:
      title: Save Text Request
      properties:
        text:
          type: array
          items:
            $ref: '#/components/schemas/TextDefinition'
      type: object
    TextDefinition:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        id:
          type: string
        checksum:
          type: string
        properties:
          type: object
          additionalProperties: true
    ContentOrText:
      title: Content Or Text
      properties:
        version:
          type: string
        id:
          type: string
        properties:
          type: object
          additionalProperties: true
      type: object
    ClientManifest:
      title: Client Manifest
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ClientContentInfo'
        contentType:
          type: string
      type: object
    GetManifestRequest:
      title: Get Manifest Request
      properties:
        id:
          type: string
      type: object
    ContentDefinition:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        prefix:
          type: string
        id:
          type: string
        checksum:
          type: string
        properties:
          type: object
          additionalProperties: true
        variants:
          type: array
          items:
            type: object
            additionalProperties: true
    ManifestChecksum:
      title: Manifest Checksum
      properties:
        id:
          type: string
        checksum:
          type: string
        createdAt:
          type: integer
      type: object
      required:
        - createdAt
    SaveContentRequest:
      title: Save Content Request
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ContentDefinition'
      type: object
    SaveManifestRequest:
      title: Save Manifest Request
      properties:
        id:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceSuperset'
      type: object
    GetContentRequest:
      title: Get Content Request
      properties:
        version:
          type: string
        contentId:
          type: string
      type: object
    SaveTextResponse:
      title: Save Text Response
      properties:
        text:
          type: array
          items:
            $ref: '#/components/schemas/TextReference'
      type: object
    ClientContentInfo:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        version:
          type: string
        uri:
          type: string
        contentId:
          type: string
        type:
          type: string
          enum:
            - not-available
    SaveContentResponse:
      title: Save Content Response
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ContentReference'
      type: object
    ContentReference:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        version:
          type: string
        contentPrefix:
          type: string
        tag:
          type: string
        uri:
          type: string
        id:
          type: string
        checksum:
          type: string
        type:
          type: string
          enum:
            - not-available
        visibility:
          type: string
          enum:
            - not-available
    EventInventoryRewardItem:
      type: object
      properties:
        id:
          type: string
        properties:
          type: object
          additionalProperties: true
    LeaderboardCohort:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        statRequirements:
          type: array
          items:
            $ref: '#/components/schemas/PlayerStatRequirement'
    LeaderboardCohortSettings:
      type: object
      properties:
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardCohort'
    Event:
      type: object
      properties:
        name:
          type: string
        start_date:
          type: string
        phases:
          type: array
          items:
            $ref: '#/components/schemas/EventPhase'
        partition_size:
          type: integer
        group_rewards:
          $ref: '#/components/schemas/EventGroupRewards'
        cohortSettings:
          $ref: '#/components/schemas/LeaderboardCohortSettings'
        permissions:
          $ref: '#/components/schemas/ClientPermission'
        stores:
          type: array
          items:
            type: string
        symbol:
          type: string
        score_rewards:
          type: array
          items:
            $ref: '#/components/schemas/EventRewardItem'
        schedule:
          $ref: '#/components/schemas/Schedule'
        rank_rewards:
          type: array
          items:
            $ref: '#/components/schemas/EventRewardItem'
    EventQueryResponse:
      title: Event Query Response
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventObjectData'
      type: object
    EventRewardObtain:
      type: object
      properties:
        symbol:
          type: string
        count:
          type: integer
      required:
        - count
    EventGroupRewards:
      type: object
      properties:
        scoreRewards:
          type: array
          items:
            $ref: '#/components/schemas/EventRewardContent'
    EventsWithinDateRangeRequest:
      title: Events Within Date Range Request
      properties:
        from:
          type: string
        to:
          type: string
        query:
          type: string
        limit:
          type: integer
      type: object
    ClientPermission:
      type: object
      properties:
        write_self:
          type: boolean
      required:
        - write_self
    EventRewardContent:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/EventInventoryRewardCurrency'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EventInventoryRewardItem'
        min:
          type: number
        max:
          type: number
        obtain:
          type: array
          items:
            $ref: '#/components/schemas/EventRewardObtain'
      required:
        - min
    EventPhaseRuntime:
      type: object
      properties:
        name:
          type: string
        startTime:
          type: integer
        endTime:
          type: integer
        rules:
          type: array
          items:
            $ref: '#/components/schemas/EventRule'
      required:
        - startTime
        - endTime
    EventDateRanges:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        state:
          type: string
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateRange'
    EventObjectData:
      title: Event Object Data
      type: object
      properties:
        inFlight:
          type: array
          items:
            $ref: '#/components/schemas/InFlightMessage'
        startTime:
          type: integer
        rootEventId:
          type: string
        state:
          type: string
          enum:
            - not-available
        running:
          type: boolean
        phase:
          $ref: '#/components/schemas/EventPhaseRuntime'
        permissions:
          $ref: '#/components/schemas/ClientPermission'
        lastChildEventId:
          type: string
        id:
          type: string
        origin:
          type: string
        content:
          $ref: '#/components/schemas/Event'
        done:
          type: boolean
        leaderboardId:
          type: string
      required:
        - done
        - running
    EventInventoryRewardCurrency:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
      required:
        - amount
    DateRange:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
    EventsInDateRangeResponse:
      title: Events In Date Range Response
      properties:
        eventInDateRange:
          type: array
          items:
            $ref: '#/components/schemas/EventDateRanges'
      type: object
    EventApplyRequest:
      title: Event Apply Request
      properties:
        content:
          $ref: '#/components/schemas/Event'
      type: object
    EventRule:
      type: object
      properties:
        rule:
          type: string
        value:
          type: string
    Schedule:
      type: object
      properties:
        description:
          type: string
        crons:
          type: array
          items:
            type: string
        activeTo:
          type: string
        activeFrom:
          type: string
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/ScheduleDefinition'
    ScheduleDefinition:
      type: object
      properties:
        dayOfWeek:
          type: array
          items:
            type: string
        minute:
          type: array
          items:
            type: string
        dayOfMonth:
          type: array
          items:
            type: string
        year:
          type: array
          items:
            type: string
        hour:
          type: array
          items:
            type: string
        second:
          type: array
          items:
            type: string
        month:
          type: array
          items:
            type: string
    EventPhase:
      type: object
      properties:
        name:
          type: string
        duration_minutes:
          type: integer
        durationMillis:
          type: integer
        rules:
          type: array
          items:
            $ref: '#/components/schemas/EventRule'
        durationSeconds:
          type: integer
      required:
        - duration_minutes
        - durationMillis
        - durationSeconds
    EventContentResponse:
      title: Event Content Response
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      type: object
    EventPhaseEndRequest:
      title: Event Phase End Request
      properties:
        time:
          type: string
      type: object
    PingRsp:
      title: Ping Rsp
      properties:
        keepAlive:
          type: boolean
      type: object
      required:
        - keepAlive
    EventRewardItem:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/EventInventoryRewardCurrency'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EventInventoryRewardItem'
        min:
          type: number
        max:
          type: number
        obtain:
          type: array
          items:
            $ref: '#/components/schemas/EventRewardObtain'
      required:
        - min
    SetContentRequest:
      title: Set Content Request
      properties:
        event:
          $ref: '#/components/schemas/Event'
        origin:
          type: string
      type: object
    EventClaimResponse:
      title: Event Claim Response
      properties:
        view:
          $ref: '#/components/schemas/EventPlayerStateView'
        gameRspJson:
          type: string
      type: object
    EventPlayerView:
      title: Event Player View
      properties:
        running:
          type: array
          items:
            $ref: '#/components/schemas/EventPlayerStateView'
        done:
          type: array
          items:
            $ref: '#/components/schemas/EventPlayerStateView'
      type: object
    EventPlayerReward:
      type: object
      properties:
        pendingInventoryRewards:
          $ref: '#/components/schemas/EventInventoryPendingRewards'
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/EventInventoryRewardCurrency'
        pendingCurrencyRewards:
          type: object
          additionalProperties: true
        pendingItemRewards:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        items:
          type: array
          items:
            $ref: '#/components/schemas/EventInventoryRewardItem'
        min:
          type: number
        max:
          type: number
        earned:
          type: boolean
        claimed:
          type: boolean
        pendingEntitlementRewards:
          type: object
          additionalProperties: true
        obtain:
          type: array
          items:
            $ref: '#/components/schemas/EventRewardObtain'
      required:
        - min
        - earned
        - claimed
    EventScoreRequest:
      title: Event Score Request
      properties:
        eventId:
          type: string
        score:
          type: number
        increment:
          type: boolean
        stats:
          type: object
          additionalProperties: true
      type: object
      required:
        - score
    EventClaimRequest:
      title: Event Claim Request
      properties:
        eventId:
          type: string
      type: object
    EventInventoryPendingRewards:
      type: object
      properties:
        currencies:
          type: object
          additionalProperties: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        empty:
          type: boolean
      required:
        - empty
    EventPlayerStateView:
      type: object
      properties:
        name:
          type: string
        running:
          type: boolean
        allPhases:
          type: array
          items:
            $ref: '#/components/schemas/EventPlayerPhaseView'
        rank:
          type: integer
        score:
          type: number
        currentPhase:
          $ref: '#/components/schemas/EventPlayerPhaseView'
        secondsRemaining:
          type: integer
        id:
          type: string
        leaderboardId:
          type: string
        rankRewards:
          type: array
          items:
            $ref: '#/components/schemas/EventPlayerReward'
        scoreRewards:
          type: array
          items:
            $ref: '#/components/schemas/EventPlayerReward'
      required:
        - score
        - rank
        - running
        - secondsRemaining
    EventPlayerPhaseView:
      type: object
      properties:
        name:
          type: string
        durationSeconds:
          type: integer
        rules:
          type: array
          items:
            $ref: '#/components/schemas/EventRule'
      required:
        - durationSeconds
    SyncRsp:
      title: Sync Rsp
      properties:
        t:
          type: integer
        events:
          type: array
          items:
            $ref: '#/components/schemas/SimEvent'
      type: object
      required:
        - t
    GameResultsMessage:
      title: Game Results Message
      properties:
        cheatingDetected:
          type: boolean
        deltaScores:
          type: array
          items:
            $ref: '#/components/schemas/DeltaScoreByLeaderBoardId'
        currenciesGranted:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        itemsGranted:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
      type: object
      required:
        - cheatingDetected
    DeltaScoreByLeaderBoardId:
      type: object
      properties:
        leaderBoardId:
          type: string
        scoreDelta:
          type: number
      required:
        - scoreDelta
    ResultsRequest:
      title: Results Request
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PlayerResult'
      type: object
    PlayerResult:
      type: object
      properties:
        playerId:
          type: integer
        rank:
          type: integer
        score:
          type: number
      required:
        - playerId
        - rank
        - score
    SyncReq:
      title: Sync Req
      properties:
        t:
          type: integer
        events:
          type: array
          items:
            $ref: '#/components/schemas/SimEvent'
      type: object
      required:
        - t
    SimEvent:
      type: object
      properties:
        t:
          type: integer
        type:
          type: string
        origin:
          type: integer
        body:
          type: string
      required:
        - t
        - origin
    ItemGroup:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
      required:
        - id
        - items
    ItemUpdateRequest:
      type: object
      properties:
        contentId:
          type: string
        id:
          type: integer
          format: int64
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ItemProperty'
      required:
        - contentId
        - id
        - properties
    CurrencyPreview:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
          format: int64
        originalAmount:
          type: integer
          format: int64
      required:
        - id
        - amount
        - originalAmount
    CurrencyView:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
          format: int64
        properties:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyProperty'
      required:
        - id
        - amount
        - properties
    InventoryView:
      title: Inventory View
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyView'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemGroup'
        scope:
          type: string
      type: object
      required:
        - currencies
        - items
    InventoryGetRequest:
      title: Inventory Get Request
      properties:
        scope:
          type: string
      type: object
    MultipliersGetResponse:
      title: Multipliers Get Response
      properties:
        multipliers:
          type: array
          items:
            $ref: '#/components/schemas/VipBonus'
      type: object
      required:
        - multipliers
    CurrencyProperty:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    EndTransactionRequest:
      title: End Transaction Request
      properties:
        transaction:
          type: string
      type: object
      required:
        - transaction
    InventoryUpdateRequest:
      title: Inventory Update Request
      properties:
        currencies:
          type: object
          additionalProperties:
            type: integer
            format: int64
        empty:
          type: boolean
        currencyProperties:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyProperty'
        currencyContentIds:
          type: array
          items:
            type: string
        applyVipBonus:
          type: boolean
        itemContentIds:
          type: array
          items:
            type: string
        updateItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemUpdateRequest'
        newItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        transaction:
          type: string
        deleteItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemDeleteRequest'
      type: object
      required:
        - itemContentIds
        - currencyContentIds
        - empty
    Item:
      type: object
      properties:
        updatedAt:
          type: integer
          format: int64
        proxyId:
          type: string
        id:
          type: integer
          format: int64
        properties:
          type: array
          items:
            $ref: '#/components/schemas/ItemProperty'
        createdAt:
          type: integer
          format: int64
      required:
        - id
        - properties
    InventoryQueryRequest:
      title: Inventory Query Request
      properties:
        scopes:
          type: array
          items:
            type: string
      type: object
    ItemDeleteRequest:
      type: object
      properties:
        contentId:
          type: string
        id:
          type: integer
          format: int64
      required:
        - contentId
        - id
    VipBonus:
      type: object
      properties:
        currency:
          type: string
        multiplier:
          type: number
          format: double
        roundToNearest:
          type: integer
          format: int32
      required:
        - currency
        - multiplier
        - roundToNearest
    PreviewVipBonusResponse:
      title: Preview Vip Bonus Response
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyPreview'
      type: object
      required:
        - currencies
    TransferRequest:
      title: Transfer Request
      properties:
        transaction:
          type: string
        recipientPlayer:
          type: integer
          format: int64
        currencies:
          type: object
          additionalProperties:
            type: integer
            format: int64
      type: object
      required:
        - recipientPlayer
    CurrencyContentResponse:
      title: Currency Content Response
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyArchetype'
      type: object
      required:
        - content
    CurrencyArchetype:
      type: object
      properties:
        symbol:
          type: string
        proxy:
          $ref: '#/components/schemas/InventoryProxySettings'
        clientPermission:
          $ref: '#/components/schemas/ClientPermission'
        startingAmount:
          type: integer
          format: int64
      required:
        - symbol
    InventoryProxySettings:
      type: object
      properties:
        service:
          type: string
      required:
        - service
    ItemArchetype:
      type: object
      properties:
        symbol:
          type: string
        proxy:
          $ref: '#/components/schemas/InventoryProxySettings'
        clientPermission:
          $ref: '#/components/schemas/ClientPermission'
      required:
        - symbol
    ItemContentResponse:
      title: Item Content Response
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ItemArchetype'
      type: object
      required:
        - content
    RankEntryStat:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    LeaderboardUidResponse:
      title: Leaderboard Uid Response
      properties:
        id:
          type: integer
          format: int64
      type: object
      required:
        - id
    ListLeaderBoardViewResponse:
      title: List Leader Board View Response
      properties:
        result:
          type: string
        lbs:
          type: array
          items:
            $ref: '#/components/schemas/LeaderBoardView'
      type: object
      required:
        - result
        - lbs
    RankEntry:
      type: object
      properties:
        stats:
          type: array
          items:
            $ref: '#/components/schemas/RankEntryStat'
        rank:
          type: integer
          format: int64
        score:
          type: number
          format: double
        columns:
          type: object
          additionalProperties: true
        gt:
          type: integer
          format: int64
      required:
        - gt
        - rank
    LeaderboardPlayerAssignmentRequest:
      title: Leaderboard Player Assignment Request
      properties:
        boardId:
          type: string
        joinBoard:
          type: boolean
      type: object
      required:
        - boardId
    LeaderboardPlayerRequest:
      title: Leaderboard Player Request
      properties:
        dbid:
          type: integer
          format: int64
      type: object
      required:
        - dbid
    LeaderboardListRequest:
      title: Leaderboard List Request
      properties:
        skip:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
      type: object
    LeaderboardAssignmentInfo:
      title: Leaderboard Assignment Info
      properties:
        playerId:
          type: integer
          format: int64
        leaderboardId:
          type: string
      type: object
      required:
        - playerId
        - leaderboardId
    LeaderboardListResponse:
      title: Leaderboard List Response
      properties:
        total:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        nameList:
          type: array
          items:
            type: string
      type: object
      required:
        - total
        - offset
        - nameList
    LeaderBoardView:
      type: object
      properties:
        lbId:
          type: string
        boardSize:
          type: integer
          format: int64
        rankgt:
          $ref: '#/components/schemas/RankEntry'
        rankings:
          type: array
          items:
            $ref: '#/components/schemas/RankEntry'
      required:
        - boardSize
    LeaderboardPartitionInfo:
      title: Leaderboard Partition Info
      properties:
        playerId:
          type: integer
        leaderboardId:
          type: string
        partition: {}
      type: object
      required:
        - playerId
    LeaderboardPartitionRequest:
      title: Leaderboard Partition Request
      properties:
        playerId:
          type: integer
      type: object
      required:
        - playerId
    OrderRule:
      type: object
      properties:
        v:
          type: string
        o:
          type: integer
      required:
        - o
    LeaderboardMembershipRequest:
      title: Leaderboard Membership Request
      properties:
        playerId:
          type: integer
      type: object
      required:
        - playerId
    LeaderboardRemoveCacheEntryRequest:
      title: Leaderboard Remove Cache Entry Request
      properties:
        playerId:
          type: integer
      type: object
      required:
        - playerId
    LeaderboardGetRanksRequest:
      title: Leaderboard Get Ranks Request
      properties:
        ids:
          type: string
      type: object
    LeaderboardApiViewRequest:
      title: Leaderboard Api View Request
      properties:
        max:
          type: integer
        focus:
          type: integer
        friends:
          type: boolean
        from:
          type: integer
        outlier:
          type: integer
        guild:
          type: boolean
      type: object
    MatchMakingRanking:
      type: object
      properties:
        gt:
          type: integer
        rank:
          type: integer
        isUnranked:
          type: boolean
        variables:
          type: object
          additionalProperties: true
      required:
        - gt
        - rank
        - isUnranked
    LeaderBoardViewResponse:
      title: Leader Board View Response
      properties:
        result:
          type: string
        lb:
          $ref: '#/components/schemas/LeaderBoardView'
      type: object
    LeaderboardDetails:
      title: Leaderboard Details
      properties:
        lbid:
          type: string
        orules:
          $ref: '#/components/schemas/OrderRules'
        numberOfEntries:
          type: integer
        fullName:
          type: string
        view:
          $ref: '#/components/schemas/LeaderBoardView'
      type: object
      required:
        - numberOfEntries
    OrderRules:
      type: object
      properties:
        orules:
          type: array
          items:
            $ref: '#/components/schemas/OrderRule'
    LeaderboardRemoveEntryRequest:
      title: Leaderboard Remove Entry Request
      properties:
        id:
          type: integer
      type: object
      required:
        - id
    MatchMakingMatchesPvpResponse:
      title: Match Making Matches Pvp Response
      properties:
        result:
          type: string
        totalEntries:
          type: integer
        playerRank:
          $ref: '#/components/schemas/MatchMakingRanking'
        windows:
          type: array
          items:
            $ref: '#/components/schemas/MatchMakingWindowResp'
      type: object
      required:
        - totalEntries
    LeaderboardGetMatchRequest:
      title: Leaderboard Get Match Request
      properties:
        poolSize:
          type: integer
        windows:
          type: integer
        windowSize:
          type: integer
      type: object
      required:
        - poolSize
        - windows
        - windowSize
    LeaderboardCreateRequest:
      title: Leaderboard Create Request
      properties:
        freezeTime:
          type: integer
        derivatives:
          type: array
          items:
            type: string
        scoreName:
          type: string
        permissions:
          $ref: '#/components/schemas/ClientPermission'
        maxEntries:
          type: integer
        partitioned:
          type: boolean
        sharded:
          type: boolean
        ttl:
          type: integer
      type: object
      required:
        - sharded
    LeaderboardDetailsRequest:
      title: Leaderboard Details Request
      properties:
        from:
          type: integer
        max:
          type: integer
      type: object
    MatchMakingWindowResp:
      type: object
      properties:
        difficulty:
          type: integer
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchMakingRanking'
      required:
        - difficulty
    LeaderboardSwapRequest:
      title: Leaderboard Swap Request
      properties:
        winnerId:
          type: integer
        loserId:
          type: integer
        swapBase:
          type: integer
        delta:
          type: integer
      type: object
      required:
        - swapBase
        - delta
    LeaderboardAddRequest:
      title: Leaderboard Add Request
      properties:
        maxScore:
          type: number
        stats:
          type: object
          additionalProperties: true
        score:
          type: number
        minScore:
          type: number
        id:
          type: integer
        increment:
          type: boolean
      type: object
      required:
        - id
        - score
    LeaderboardMembershipResponse:
      title: Leaderboard Membership Response
      properties:
        result:
          type: boolean
      type: object
      required:
        - result
    DonationEntry:
      type: object
      properties:
        playerId:
          type: integer
        amount:
          type: integer
        time:
          type: integer
      required:
        - playerId
        - amount
        - time
    Member:
      type: object
      properties:
        canDemote:
          type: boolean
        canKick:
          type: boolean
        role:
          type: string
        gamerTag:
          type: integer
        canPromote:
          type: boolean
        scores:
          type: array
          items:
            $ref: '#/components/schemas/GroupScoreBinding'
      required:
        - gamerTag
    GroupRole:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    DonationRequest:
      type: object
      properties:
        timeRequested:
          type: integer
        progress:
          type: array
          items:
            $ref: '#/components/schemas/DonationEntry'
        satisfied:
          type: boolean
        playerId:
          type: integer
        currency:
          $ref: '#/components/schemas/Currency'
      required:
        - playerId
        - timeRequested
        - satisfied
    GroupSearchResponse:
      title: Group Search Response
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
      type: object
    Group:
      type: object
      properties:
        version:
          type: integer
        inFlight:
          type: array
          items:
            $ref: '#/components/schemas/InFlightMessage'
        name:
          type: string
        enrollmentType:
          type: string
        donations:
          type: array
          items:
            $ref: '#/components/schemas/DonationRequest'
        freeSlots:
          type: integer
        maybeDonations:
          type: object
          additionalProperties: true
        tag:
          type: string
        canUpdateMOTD:
          type: boolean
        shard:
          type: string
        canUpdateSlogan:
          type: boolean
        leader:
          type: integer
        slogan:
          type: string
        requirement:
          type: integer
        motd:
          type: string
        id:
          type: integer
        clientData:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/GroupRole'
        scores:
          type: object
          additionalProperties: true
        canUpdateEnrollment:
          type: boolean
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        canDisband:
          type: boolean
        type:
          type: string
          enum:
            - not-available
        maxSize:
          type: integer
        subGroups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        created:
          type: integer
          format: utc-millisec
      required:
        - id
        - requirement
        - maxSize
        - freeSlots
        - leader
    Currency:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
      required:
        - amount
    GroupScoreBinding:
      type: object
      properties:
        board:
          type: string
        derivatives:
          type: array
          items:
            type: string
        score:
          type: integer
      required:
        - score
    GroupSearchRequest:
      title: Group Search Request
      properties:
        name:
          type: string
        scoreMin:
          type: integer
        sortField:
          type: string
        userScore:
          type: integer
        hasSlots:
          type: boolean
        enrollmentTypes:
          type: string
        offset:
          type: integer
        scoreMax:
          type: integer
        subGroup:
          type: boolean
        sortValue:
          type: integer
        type:
          type: string
          enum:
            - not-available
        limit:
          type: integer
      type: object
    GroupInvite:
      title: Group Invite
      properties:
        gamerTag:
          type: integer
        subGroup:
          type: integer
      type: object
      required:
        - gamerTag
    CreateDonationRequest:
      title: Create Donation Request
      properties:
        currencyId:
          type: string
        amount:
          type: integer
        config:
          type: string
      type: object
      required:
        - amount
    KickRequest:
      title: Kick Request
      properties:
        gamerTag:
          type: integer
        subGroup:
          type: integer
      type: object
      required:
        - gamerTag
    GroupMembershipResponse:
      title: Group Membership Response
      properties:
        gamerTag:
          type: integer
        member:
          type: boolean
        type:
          type: string
          enum:
            - not-available
        subGroups:
          type: array
          items:
            type: integer
        group:
          $ref: '#/components/schemas/GroupMetaData'
      type: object
      required:
        - member
    GroupUpdate:
      title: Group Update
      properties:
        name:
          type: string
        enrollmentType:
          type: string
        tag:
          type: string
        slogan:
          type: string
        requirement:
          type: integer
        motd:
          type: string
        clientData:
          type: string
        subGroup:
          type: integer
      type: object
    GroupApplication:
      title: Group Application
      properties:
        subGroup:
          type: integer
      type: object
    GroupMetaData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        tag:
          type: string
      required:
        - id
    MakeDonationRequest:
      title: Make Donation Request
      properties:
        recipientId:
          type: integer
        amount:
          type: integer
      type: object
      required:
        - recipientId
        - amount
    RoleChangeRequest:
      title: Role Change Request
      properties:
        gamerTag:
          type: integer
        role:
          type: string
        subGroup:
          type: integer
      type: object
      required:
        - gamerTag
    DisbandRequest:
      title: Disband Request
      properties:
        subGroup:
          type: integer
      type: object
    GroupCreate:
      title: Group Create
      properties:
        name:
          type: string
        enrollmentType:
          type: string
        tag:
          type: string
        requirement:
          type: integer
        clientData:
          type: string
        scores:
          type: array
          items:
            $ref: '#/components/schemas/GroupScoreBinding'
        time:
          type: integer
          format: utc-millisec
        type:
          type: string
          enum:
            - not-available
        maxSize:
          type: integer
        group:
          type: integer
      type: object
      required:
        - requirement
        - maxSize
    AvailabilityResponse:
      title: Availability Response
      properties:
        name:
          type: boolean
        tag:
          type: boolean
      type: object
      required:
        - name
        - tag
    GroupCreateResponse:
      title: Group Create Response
      properties:
        group:
          $ref: '#/components/schemas/GroupMetaData'
      type: object
    GroupUserMember:
      type: object
      properties:
        id:
          type: integer
        subGroups:
          type: array
          items:
            $ref: '#/components/schemas/GroupUserMember'
        joined:
          type: integer
      required:
        - id
    GroupMembershipRequest:
      title: Group Membership Request
      properties:
        successor:
          type: integer
        score:
          type: integer
        subGroup:
          type: integer
        type:
          type: string
          enum:
            - not-available
        group:
          type: integer
      type: object
      required:
        - group
    AvailabilityRequest:
      title: Availability Request
      properties:
        name:
          type: string
        tag:
          type: string
        type:
          type: string
          enum:
            - not-available
        subGroup:
          type: boolean
      type: object
    GroupUser:
      title: Group User
      properties:
        inFlight:
          type: array
          items:
            $ref: '#/components/schemas/InFlightMessage'
        gamerTag:
          type: integer
        allGroups:
          type: array
          items:
            $ref: '#/components/schemas/GroupUserMember'
        updated:
          type: integer
          format: utc-millisec
        member:
          type: object
          additionalProperties: true
        scores:
          type: array
          items:
            $ref: '#/components/schemas/GroupScoreBinding'
      type: object
      required:
        - gamerTag
    UpdateMailRequest:
      title: Update Mail Request
      properties:
        body:
          type: string
        expires:
          type: string
        subject:
          type: string
        state:
          type: string
        mailId:
          type: integer
        category:
          type: string
        acceptAttachments:
          type: boolean
      type: object
      required:
        - mailId
    GetTemplateRequest:
      title: Get Template Request
      properties:
        templateName:
          type: string
        gamerTag:
          type: integer
      type: object
      required:
        - gamerTag
    AttachmentRequest:
      type: object
      properties:
        quantity:
          type: integer
        symbol:
          type: string
        specialization:
          type: string
        target:
          type: integer
        action:
          type: string
    MailResponse:
      title: Mail Response
      properties:
        result:
          $ref: '#/components/schemas/Message'
      type: object
    MailTemplate:
      title: Mail Template
      properties:
        subject:
          type: string
        body:
          type: string
      type: object
    SendMailRequest:
      type: object
      properties:
        body:
          type: string
        expires:
          type: string
        receiverGamerTag:
          type: integer
        subject:
          type: string
        id:
          type: integer
        senderGamerTag:
          type: integer
        category:
          type: string
        bodyRef:
          type: integer
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentRequest'
        rewards:
          $ref: '#/components/schemas/MailRewards'
      required:
        - senderGamerTag
        - receiverGamerTag
    Attachment:
      type: object
      properties:
        id:
          type: integer
        wrapped:
          $ref: '#/components/schemas/EntitlementGenerator'
        state:
          type: string
        target:
          type: integer
      required:
        - id
    AcceptMultipleAttachments:
      title: Accept Multiple Attachments
      properties:
        mailIds:
          type: array
          items:
            type: integer
      type: object
    GetMailDetailsRequest:
      title: Get Mail Details Request
      properties:
        mid:
          type: integer
      type: object
      required:
        - mid
    MailSuccessResponse:
      title: Mail Success Response
      properties:
        result:
          type: boolean
      type: object
      required:
        - result
    BulkSendMailRequest:
      title: Bulk Send Mail Request
      properties:
        sendMailRequests:
          type: array
          items:
            $ref: '#/components/schemas/SendMailRequest'
      type: object
    MailSearchClause:
      type: object
      properties:
        forSender:
          type: integer
        name:
          type: string
        onlyCount:
          type: boolean
        categories:
          type: array
          items:
            type: string
        start:
          type: integer
        limit:
          type: integer
        states:
          type: array
          items:
            type: string
      required:
        - onlyCount
    MailSearchRequest:
      title: Mail Search Request
      properties:
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/MailSearchClause'
      type: object
    MailSearchResponse:
      title: Mail Search Response
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/MailSearchResponseClause'
      type: object
    SendMailObjectRequest:
      title: Send Mail Object Request
      properties:
        body:
          type: string
        expires:
          type: string
        subject:
          type: string
        rewards:
          $ref: '#/components/schemas/MailRewards'
        id:
          type: integer
        senderGamerTag:
          type: integer
        category:
          type: string
        bodyRef:
          type: integer
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentRequest'
      type: object
      required:
        - senderGamerTag
    SendMailResponse:
      title: Send Mail Response
      properties:
        mailId:
          type: integer
      type: object
    MyMailUpdate:
      type: object
      properties:
        id:
          type: integer
        update:
          $ref: '#/components/schemas/UpdateMailRequest'
      required:
        - id
    MailQueryResponse:
      title: Mail Query Response
      properties:
        unreadCount:
          type: integer
      type: object
      required:
        - unreadCount
    BulkUpdateMailObjectRequest:
      title: Bulk Update Mail Object Request
      properties:
        updateMailRequests:
          type: array
          items:
            $ref: '#/components/schemas/MyMailUpdate'
      type: object
    MailRewards:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
    ListMailCategoriesResponse:
      title: List Mail Categories Response
      properties:
        result:
          type: array
          items:
            type: string
      type: object
    MailSearchResponseClause:
      type: object
      properties:
        name:
          type: string
        count:
          type: integer
        content:
          type: array
          items:
            $ref: '#/components/schemas/Message'
      required:
        - count
    MatchUpdate:
      title: Match Update
      properties:
        players:
          type: array
          items:
            type: integer
        secondsRemaining:
          type: integer
        minPlayersReached:
          type: boolean
        gameStarted:
          type: boolean
        game:
          type: string
      type: object
      required:
        - minPlayersReached
        - gameStarted
    CompletePurchaseRequest:
      title: Complete Purchase Request
      properties:
        txid:
          type: integer
        receipt:
          type: string
        priceInLocalCurrency:
          type: string
        isoCurrencySymbol:
          type: string
      type: object
      required:
        - txid
    TrackPurchaseRequest:
      title: Track Purchase Request
      properties:
        priceInLocalCurrency:
          type: number
        skuName:
          type: string
        skuProductId:
          type: string
        store:
          type: string
        obtainItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        obtainCurrency:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        purchaseId:
          type: string
        isoCurrencySymbol:
          type: string
      type: object
      required:
        - priceInLocalCurrency
    FacebookUpdatedEntry:
      type: object
      properties:
        id:
          type: string
        time:
          type: integer
        changed_fields:
          type: array
          items:
            type: string
      required:
        - time
    GetPricesRequest:
      title: Get Prices Request
      properties:
        steamId:
          type: integer
      type: object
      required:
        - steamId
    PaymentAuditEntry:
      type: object
      properties:
        version:
          type: string
        inFlight:
          type: array
          items:
            $ref: '#/components/schemas/InFlightMessage'
        providerid:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/PaymentHistoryEntry'
        txid:
          type: integer
        providername:
          type: string
        obtainItems:
          type: array
          items:
            $ref: '#/components/schemas/ItemCreateRequest'
        txstate:
          type: string
        updated:
          type: integer
        obtainCurrency:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyChange'
        entitlements:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementGenerator'
        details:
          $ref: '#/components/schemas/PaymentDetailsEntry'
        replayGuardValue:
          type: string
        gt:
          type: integer
        created:
          type: integer
      required:
        - gt
        - txid
    FacebookPaymentUpdateRequest:
      title: Facebook Payment Update Request
      properties:
        object:
          type: string
        entry:
          type: array
          items:
            $ref: '#/components/schemas/FacebookUpdatedEntry'
      type: object
    GetOrderInfoRequest:
      title: Get Order Info Request
      properties:
        orderId:
          type: string
      type: object
    ListAuditRequest:
      title: List Audit Request
      properties:
        providerid:
          type: string
        provider:
          type: string
        state:
          type: string
        txid:
          type: integer
        player:
          type: integer
        start:
          type: integer
        limit:
          type: integer
      type: object
    FailPurchaseRequest:
      title: Fail Purchase Request
      properties:
        txid:
          type: integer
        reason:
          type: string
      type: object
      required:
        - txid
    BeginPurchaseRequest:
      title: Begin Purchase Request
      properties:
        purchaseId:
          type: string
        language:
          type: string
        time:
          type: string
      type: object
    SteamOrderInfoItem:
      type: object
      properties:
        vat:
          type: integer
        amount:
          type: integer
        itemid:
          type: integer
        qty:
          type: integer
        itemstatus:
          type: string
      required:
        - itemid
        - qty
        - amount
        - vat
    SubscriptionVerificationRequest:
      title: Subscription Verification Request
      properties:
        hubMode:
          type: string
        hubChallenge:
          type: string
        hubVerifyToken:
          type: string
      type: object
    GetProductResponse:
      title: Get Product Response
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        price:
          type: integer
      type: object
      required:
        - price
    LocalizedPriceMap:
      title: Localized Price Map
      properties:
        currency:
          type: string
        prices:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedPrice'
      type: object
    LocalizedPrice:
      type: object
      properties:
        to:
          type: integer
        price:
          type: integer
      required:
        - to
        - price
    PaymentResultResponse:
      title: Payment Result Response
      properties:
        result:
          type: string
      type: object
    BeginPurchaseResponse:
      title: Begin Purchase Response
      properties:
        txid:
          type: integer
        access_token:
          type: string
      type: object
      required:
        - txid
    SteamOrderInfoResponse:
      title: Steam Order Info Response
      properties:
        usstate:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/SteamOrderInfoItem'
        country:
          type: string
        timecreated:
          type: string
        transid:
          type: integer
        status:
          type: string
        orderid:
          type: integer
        steamid:
          type: integer
        currency:
          type: string
        time:
          type: string
      type: object
      required:
        - orderid
        - transid
        - steamid
    GetProductRequest:
      title: Get Product Request
      properties:
        sku:
          type: string
      type: object
    PaymentHistoryEntry:
      type: object
      properties:
        change:
          type: string
        data:
          type: string
        timestamp:
          type: string
        MAX_FIELD_SIZE:
          type: integer
      required:
        - MAX_FIELD_SIZE
    CancelPurchaseRequest:
      title: Cancel Purchase Request
      properties:
        txid:
          type: integer
      type: object
      required:
        - txid
    PaymentDetailsEntry:
      type: object
      properties:
        reference:
          type: string
        name:
          type: string
        quantity:
          type: integer
        sku:
          type: string
        price:
          type: integer
        subcategory:
          type: string
        gameplace:
          type: string
        localPrice:
          type: string
        category:
          type: string
        localCurrency:
          type: string
        providerProductId:
          type: string
      required:
        - price
        - quantity
    SteamAuthRequest:
      title: Steam Auth Request
      properties:
        ticket:
          type: string
      type: object
    FacebookPaymentUpdateResponse:
      title: Facebook Payment Update Response
      properties:
        result:
          type: string
        contentType:
          type: string
      type: object
    SubscriptionVerificationResponse:
      title: Subscription Verification Response
      properties:
        hubChallenge:
          type: string
        contentType:
          type: string
      type: object
    EmptyRsp:
      title: Empty Rsp
      properties: {}
      type: object
    SendNotification:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
    RegisterReq:
      title: Register Req
      properties:
        provider:
          type: string
        token:
          type: string
      type: object
    SendReq:
      title: Send Req
      properties:
        msgs:
          type: array
          items:
            $ref: '#/components/schemas/SendMsg'
      type: object
    SendMsg:
      type: object
      properties:
        to:
          type: array
          items:
            type: integer
        notification:
          $ref: '#/components/schemas/SendNotification'
        data:
          type: object
          additionalProperties: true
    Promotable:
      type: object
      properties:
        checksum:
          type: string
        createdAt:
          type: integer
          format: int64
      required:
        - checksum
        - createdAt
    ArchiveProjectRequest:
      title: Archive Project Request
      properties:
        pid:
          type: string
      type: object
      required:
        - pid
    UpdateGameHierarchyRequest:
      title: Update Game Hierarchy Request
      properties:
        rootPID:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectView'
      type: object
      required:
        - rootPID
        - projects
    LaunchMessageListResponse:
      title: Launch Message List Response
      properties:
        files:
          type: array
          items:
            type: string
      type: object
      required:
        - files
    CustomerResponse:
      title: Customer Response
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
      type: object
      required:
        - customer
    CustomersResponse:
      title: Customers Response
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
      type: object
      required:
        - result
    CreatePlanRequest:
      title: Create Plan Request
      properties:
        name:
          type: string
        messageBusAnalytics:
          type: array
          items:
            type: string
        memcachedHosts:
          type: string
        mongoSSL:
          type: boolean
        platformJBDC:
          type: string
        sharded:
          type: boolean
        mongoHosts:
          type: string
        messageBusCommon:
          type: array
          items:
            type: string
        redisShards:
          type: array
          items:
            $ref: '#/components/schemas/RedisShardRequest'
      type: object
      required:
        - name
        - mongoHosts
        - sharded
        - mongoSSL
        - platformJBDC
        - memcachedHosts
        - redisShards
    ContentLimits:
      type: object
      properties:
        maxDistinctContentIds:
          type: integer
          format: int32
    ServiceLimits:
      type: object
      properties:
        beamo:
          $ref: '#/components/schemas/BeamoLimits'
        content:
          $ref: '#/components/schemas/ContentLimits'
        gateway:
          $ref: '#/components/schemas/GatewayLimits'
    GatewayLimits:
      type: object
      properties:
        maxConcurrentRequests:
          type: integer
          format: int32
      required:
        - maxConcurrentRequests
    NewCustomerRequest:
      title: New Customer Request
      properties:
        projectName:
          type: string
        email:
          type: string
        customerName:
          type: string
        hierarchy:
          type: boolean
        alias:
          type: string
        password:
          type: string
      type: object
      required:
        - projectName
        - email
        - password
    PromoteRealmResponseOld:
      title: Promote Realm Response Old
      properties:
        sourcePid:
          type: string
        promotions:
          type: array
          items:
            $ref: '#/components/schemas/RealmPromotion'
      type: object
      required:
        - sourcePid
        - promotions
    CustomerView:
      type: object
      properties:
        cid:
          type: integer
          format: int64
        name:
          type: string
        alias:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectView'
      required:
        - cid
        - name
        - projects
    GetGameResponse:
      title: Get Game Response
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectView'
      type: object
      required:
        - projects
    PromoteRealmRequest:
      title: Promote Realm Request
      properties:
        sourcePid:
          type: string
        promotions:
          type: array
          items:
            type: string
        contentManifestIds:
          type: array
          items:
            type: string
      type: object
      required:
        - sourcePid
    CreateLaunchMessageRequest:
      title: Create Launch Message Request
      properties:
        name:
          type: string
        body:
          type: string
      type: object
      required:
        - name
        - body
    RealmConfigSaveRequest:
      title: Realm Config Save Request
      properties:
        config:
          type: object
          additionalProperties:
            type: string
      type: object
      required:
        - config
    PromotionScope:
      type: object
      properties:
        name:
          type: string
        promotions:
          type: array
          items:
            $ref: '#/components/schemas/Promotion'
      required:
        - name
        - promotions
    ServicePlan:
      type: object
      properties:
        minCustomerStatusSaved:
          type: string
        name:
          type: string
        dataDomain:
          $ref: '#/components/schemas/DataDomain'
        limits:
          $ref: '#/components/schemas/ServiceLimits'
        created:
          type: integer
          format: int64
      required:
        - name
        - dataDomain
    CustomerViewResponse:
      title: Customer View Response
      properties:
        customer:
          $ref: '#/components/schemas/CustomerView'
      type: object
      required:
        - customer
    AliasAvailableResponse:
      title: Alias Available Response
      properties:
        alias:
          type: string
        available:
          type: boolean
        cid:
          type: integer
          format: int64
      type: object
      required:
        - alias
        - available
        - cid
    RealmPromotion:
      type: object
      properties:
        name:
          type: string
        source:
          $ref: '#/components/schemas/Promotable'
        destination:
          $ref: '#/components/schemas/Promotable'
      required:
        - name
        - source
        - destination
    BeamoLimits:
      type: object
      properties:
        maxContainerSize:
          type: string
        maxRunningContainersPerService:
          type: integer
          format: int32
      required:
        - maxContainerSize
        - maxRunningContainersPerService
    Project:
      type: object
      properties:
        displayName:
          type: string
        secret:
          type: string
        parent:
          type: string
        children:
          type: array
          items:
            type: string
        name:
          type: string
        customCharts:
          type: object
          additionalProperties:
            type: string
        root:
          type: boolean
        archived:
          type: boolean
        config:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
        sharded:
          type: boolean
        sigval:
          type: boolean
        plan:
          type: string
        created:
          type: integer
          format: int64
      required:
        - name
        - secret
        - plan
        - customCharts
        - archived
        - root
    RedisShardRequest:
      type: object
      properties:
        shardId:
          type: integer
          format: int32
        masterHost:
          type: string
        slaveHosts:
          type: string
      required:
        - shardId
        - masterHost
        - slaveHosts
    RealmConfigResponse:
      title: Realm Config Response
      properties:
        config:
          type: object
          additionalProperties:
            type: string
      type: object
      required:
        - config
    Customer:
      type: object
      properties:
        name:
          type: string
        paymentStatus:
          type: string
        image:
          type: string
        contact:
          type: string
        alias:
          type: string
        cid:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        crm_link:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        created:
          type: integer
          format: int64
      required:
        - cid
        - name
        - projects
        - accounts
    AliasAvailableRequest:
      title: Alias Available Request
      properties:
        alias:
          type: string
      type: object
      required:
        - alias
    Promotion:
      type: object
      properties:
        id:
          type: string
        source:
          $ref: '#/components/schemas/Promotable'
        destination:
          $ref: '#/components/schemas/Promotable'
      required:
        - id
        - source
        - destination
    GetGameRequest:
      title: Get Game Request
      properties:
        rootPID:
          type: string
      type: object
      required:
        - rootPID
    NewCustomerResponse:
      title: New Customer Response
      properties:
        name:
          type: string
        projectName:
          type: string
        alias:
          type: string
        cid:
          type: integer
          format: int64
        pid:
          type: string
        token:
          $ref: '#/components/schemas/TokenResponse'
      type: object
      required:
        - token
        - cid
        - pid
        - name
        - projectName
    DataDomain:
      type: object
      properties:
        messageBusAnalytics:
          type: array
          items:
            type: string
        memcachedHosts:
          type: array
          items:
            type: string
        mongoSharded:
          type: boolean
        mongoSSL:
          type: boolean
        mongoHosts:
          type: array
          items:
            type: string
        mongoSSLEnabled:
          type: boolean
        messageBusCommon:
          type: array
          items:
            type: string
        redisShards:
          type: array
          items:
            $ref: '#/components/schemas/RedisShard'
      required:
        - mongoHosts
        - mongoSharded
        - memcachedHosts
        - mongoSSLEnabled
    ServicePlansResponse:
      title: Service Plans Response
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/ServicePlan'
      type: object
      required:
        - result
    RenameProjectRequest:
      title: Rename Project Request
      properties:
        projectId:
          type: string
        newName:
          type: string
      type: object
      required:
        - projectId
        - newName
    NewGameRequest:
      title: New Game Request
      properties:
        gameName:
          type: string
      type: object
      required:
        - gameName
    CreateProjectRequest:
      title: Create Project Request
      properties:
        name:
          type: string
        plan:
          type: string
        sharded:
          type: boolean
        parent:
          type: string
      type: object
      required:
        - name
    UnarchiveProjectRequest:
      title: Unarchive Project Request
      properties:
        projectId:
          type: string
      type: object
      required:
        - projectId
    RedisShard:
      type: object
      properties:
        shardId:
          type: integer
          format: int32
        masterHost:
          type: string
        slaveHosts:
          type: array
          items:
            type: string
      required:
        - shardId
        - masterHost
        - slaveHosts
    PromoteRealmResponse:
      title: Promote Realm Response
      properties:
        sourcePid:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/PromotionScope'
      type: object
      required:
        - sourcePid
        - scopes
    RemoveLaunchMessageRequest:
      title: Remove Launch Message Request
      properties:
        file:
          type: string
      type: object
      required:
        - file
    ProjectView:
      type: object
      properties:
        secret:
          type: string
        parent:
          type: string
        children:
          type: array
          items:
            type: string
        projectName:
          type: string
        archived:
          type: boolean
        cid:
          type: integer
          format: int64
        pid:
          type: string
        sharded:
          type: boolean
      required:
        - projectName
        - pid
    NotificationRequestData:
      type: object
      properties:
        messageParams:
          type: array
          items:
            type: string
        channel:
          type: string
        messageKey:
          type: string
        context:
          type: string
        shard:
          type: string
        meta:
          type: object
          additionalProperties: true
        messageFull:
          type: string
    ServerEvent:
      title: Server Event
      properties:
        event:
          type: string
        payload: {}
        toAll:
          type: boolean
      type: object
      required:
        - toAll
    NotificationRequest:
      title: Notification Request
      properties:
        payload:
          $ref: '#/components/schemas/NotificationRequestData'
        dbid:
          type: integer
        customChannelSuffix:
          type: string
        dbids:
          type: array
          items:
            type: integer
      type: object
    SubscriberDetailsResponse:
      title: Subscriber Details Response
      properties:
        customChannelPrefix:
          type: string
        playerForRealmChannel:
          type: string
        authenticationKey:
          type: string
        gameGlobalNotificationChannel:
          type: string
        gameNotificationChannel:
          type: string
        subscribeKey:
          type: string
        playerChannel:
          type: string
      type: object
    SessionHistoryRequest:
      title: Session History Request
      properties:
        dbid:
          type: integer
        month:
          type: integer
        year:
          type: integer
      type: object
      required:
        - dbid
    SessionHeartbeat:
      title: Session Heartbeat
      properties:
        gt:
          type: integer
        heartbeat:
          type: integer
      type: object
      required:
        - gt
    Era:
      type: object
      properties:
        value:
          type: integer
      required:
        - value
    OnlineStatusResponses:
      title: Online Status Responses
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerOnlineStatusResponse'
      type: object
    SessionHistoryResponse:
      title: Session History Response
      properties:
        payments:
          type: array
          items:
            type: string
        totalPaid:
          type: array
          items:
            $ref: '#/components/schemas/PaymentTotal'
        sessions:
          type: array
          items:
            type: string
        date:
          $ref: '#/components/schemas/LocalDate'
        installDate:
          type: string
        daysPlayed:
          type: integer
      type: object
      required:
        - daysPlayed
    LocalDate:
      type: object
      properties:
        dayOfYear:
          type: integer
        leapYear:
          type: boolean
        chronology:
          $ref: '#/components/schemas/IsoChronology'
        dayOfWeek:
          type: string
          enum:
            - SATURDAY
            - MONDAY
            - THURSDAY
            - TUESDAY
            - FRIDAY
            - WEDNESDAY
            - SUNDAY
        monthValue:
          type: integer
        dayOfMonth:
          type: integer
        year:
          type: integer
        era:
          $ref: '#/components/schemas/Era'
        month:
          type: string
          enum:
            - DECEMBER
            - APRIL
            - JULY
            - SEPTEMBER
            - JUNE
            - FEBRUARY
            - OCTOBER
            - AUGUST
            - NOVEMBER
            - MARCH
            - MAY
            - JANUARY
      required:
        - year
        - dayOfYear
        - leapYear
        - dayOfMonth
        - monthValue
    StartSessionRequest:
      title: Start Session Request
      properties:
        source:
          type: string
        customParams:
          type: object
          additionalProperties: true
        shard:
          type: string
        locale:
          type: string
        deviceParams:
          type: object
          additionalProperties: true
        language:
          $ref: '#/components/schemas/SessionLanguageContext'
        time:
          type: integer
        platform:
          type: string
        gamer:
          type: integer
        device:
          type: string
      type: object
    OnlineStatusRequest:
      title: Online Status Request
      properties:
        playerIds:
          type: string
        intervalSecs:
          type: integer
        playerIdsSeq:
          type: array
          items: {}
      type: object
      required:
        - intervalSecs
    PlayerOnlineStatusResponse:
      type: object
      properties:
        playerId:
          type: integer
        online:
          type: boolean
        lastSeen:
          type: integer
      required:
        - playerId
        - online
        - lastSeen
    GamerTag:
      type: object
      properties:
        tag:
          type: integer
        alias:
          type: string
        added:
          type: integer
        trials:
          type: array
          items:
            $ref: '#/components/schemas/CohortEntry'
        platform:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - tag
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        gamerTag:
          type: integer
        username:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        id:
          type: integer
        cid:
          type: string
        lang:
          type: string
        heartbeat:
          type: integer
        password:
          type: string
      required:
        - id
        - gamerTag
    SessionLanguageContext:
      type: object
      properties:
        code:
          type: string
        ctx:
          type: string
    IsoChronology:
      type: object
      properties:
        calendarType:
          type: string
        id:
          type: string
    PaymentTotal:
      type: object
      properties:
        currencyCode:
          type: string
        totalRevenue:
          type: integer
      required:
        - totalRevenue
    StartSessionResponse:
      title: Start Session Response
      properties:
        result:
          type: string
        gamer:
          $ref: '#/components/schemas/GamerTag'
      type: object
    StatUpdateRequest:
      title: Stat Update Request
      type: object
      properties:
        objectId:
          type: string
        set:
          type: object
          additionalProperties: true
        add:
          type: object
          additionalProperties: true
        emitAnalytics:
          type: boolean
    StatsSubscribeRequest:
      title: Stats Subscribe Request
      properties:
        service:
          type: string
        subscriptions:
          type: array
          items:
            type: string
      type: object
    StatsSearchResponse:
      title: Stats Search Response
      properties:
        ids:
          type: array
          items:
            type: integer
      type: object
    NetworkSerializable:
      type: object
      properties: {}
    BatchReadStatsRequest:
      title: Batch Read Stats Request
      properties:
        objectIds:
          type: string
        stats:
          type: string
        format:
          type: string
      type: object
    BatchSetStatsRequest:
      title: Batch Set Stats Request
      properties:
        updates:
          type: array
          items:
            $ref: '#/components/schemas/StatUpdateRequest'
      type: object
    StatsSearchRequest:
      title: Stats Search Request
      properties:
        domain:
          type: string
        access:
          type: string
        objectType:
          type: string
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/StatsSearchCriteria'
      type: object
    StatsSearchCriteria:
      type: object
      properties:
        stat:
          type: string
        rel:
          type: string
        value: {}
    BatchReadStatsResponse:
      title: Batch Read Stats Response
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/NetworkSerializable'
      type: object
    StatUpdateRequestStringListFormat:
      title: Stat Update Request String List Format
      properties:
        set:
          type: array
          items:
            $ref: '#/components/schemas/StatStringListEntry'
      type: object
    StatRequest:
      title: Stat Request
      properties:
        stats:
          type: string
      type: object
    StatStringListEntry:
      type: object
      properties:
        k:
          type: string
        v:
          type: string
    RewardsResponse:
      title: Rewards Response
      properties:
        rewardCurrencies:
          type: array
          items:
            $ref: '#/components/schemas/TournamentReward'
      type: object
    GetPlayerStatusRequest:
      title: Get Player Status Request
      properties:
        tournamentId:
          type: string
      type: object
    GetPlayerStatusResponse:
      title: Get Player Status Response
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/PlayerStatus'
      type: object
    RewardsRequest:
      title: Rewards Request
      properties:
        tournamentId:
          type: string
      type: object
    ScoreRequest:
      title: Score Request
      properties:
        tournamentId:
          type: string
        stats:
          type: object
          additionalProperties: true
        score:
          type: number
        playerId:
          type: integer
        increment:
          type: boolean
      type: object
      required:
        - playerId
        - score
    AdminGetPlayerStatusRequest:
      title: Admin Get Player Status Request
      properties:
        playerId:
          type: integer
        tournamentId:
          type: string
      type: object
      required:
        - playerId
    TournamentReward:
      type: object
      properties:
        symbol:
          type: string
        amount:
          type: integer
      required:
        - amount
    GetChampionsResponse:
      title: Get Champions Response
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ChampionScore'
      type: object
    TournamentClientView:
      title: Tournament Client View
      type: object
      properties:
        tournamentId:
          type: string
        secondsRemaining:
          type: integer
        contentId:
          type: string
      required:
        - secondsRemaining
    GetStandingsRequest:
      title: Get Standings Request
      properties:
        tournamentId:
          type: string
        max:
          type: integer
        focus:
          type: integer
        cycle:
          type: integer
        from:
          type: integer
      type: object
    TournamentEntry:
      type: object
      properties:
        rank:
          type: integer
        score:
          type: number
        currencyRewards:
          type: array
          items:
            $ref: '#/components/schemas/TournamentReward'
        playerId:
          type: integer
        stageChange:
          type: integer
      required:
        - playerId
        - rank
        - score
        - stageChange
    PlayerStatusUpdate:
      type: object
      properties:
        tier:
          type: integer
        stage:
          type: integer
        score:
          type: number
    TournamentQueryResponse:
      title: Tournament Query Response
      properties:
        tournaments:
          type: array
          items:
            $ref: '#/components/schemas/TournamentClientView'
      type: object
    PlayerStatus:
      type: object
      properties:
        lastUpdateCycle:
          type: integer
        tournamentId:
          type: string
        stage:
          type: integer
        unclaimedRewards:
          type: array
          items:
            $ref: '#/components/schemas/TournamentReward'
        tier:
          type: integer
        playerId:
          type: integer
        contentId:
          type: string
      required:
        - playerId
        - tier
        - stage
        - lastUpdateCycle
    GetStandingsResponse:
      title: Get Standings Response
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/TournamentEntry'
        me:
          $ref: '#/components/schemas/TournamentEntry'
      type: object
    TournamentQueryRequest:
      title: Tournament Query Request
      properties:
        isRunning:
          type: boolean
      type: object
    JoinRequest:
      title: Join Request
      properties:
        tournamentId:
          type: string
      type: object
    AdminPlayerStatus:
      type: object
      properties:
        tournamentId:
          type: string
        stage:
          type: integer
        unclaimedRewards:
          type: array
          items:
            $ref: '#/components/schemas/TournamentReward'
        tier:
          type: integer
        rank:
          type: integer
        score:
          type: number
        playerId:
          type: integer
        contentId:
          type: string
        nextCycleStartMs:
          type: integer
      required:
        - playerId
        - tier
        - stage
        - rank
        - score
        - nextCycleStartMs
    UpdatePlayerStatusRequest:
      title: Update Player Status Request
      properties:
        playerId:
          type: integer
        tournamentId:
          type: string
        update:
          $ref: '#/components/schemas/PlayerStatusUpdate'
      type: object
      required:
        - playerId
    ChampionScore:
      type: object
      properties:
        endTimeMs:
          type: integer
        startTimeMs:
          type: integer
        score:
          type: number
        cycle:
          type: integer
        playerId:
          type: integer
      required:
        - playerId
        - score
        - cycle
        - startTimeMs
        - endTimeMs
    GetChampionsRequest:
      title: Get Champions Request
      properties:
        tournamentId:
          type: string
        cycles:
          type: integer
      type: object
      required:
        - cycles
    AdminGetPlayerStatusResponse:
      title: Admin Get Player Status Response
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/AdminPlayerStatus'
      type: object
    Player:
      type: object
      properties:
        playerId:
          type: string
    Friend:
      type: object
      properties:
        playerId:
          type: string
        source:
          type: string
          enum:
            - not-available
    Social:
      title: Social
      properties:
        playerId:
          type: string
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Friend'
        blocked:
          type: array
          items:
            $ref: '#/components/schemas/Player'
      type: object
    PlayerIdRequest:
      title: Player Id Request
      properties:
        playerId:
          type: string
      type: object
    FriendshipStatus:
      title: Friendship Status
      properties:
        playerId:
          type: string
        friendId:
          type: string
        isBlocked:
          type: boolean
      type: object
      required:
        - isBlocked
    ImportFriendsRequest:
      title: Import Friends Request
      properties:
        source:
          type: string
        token:
          type: string
      type: object
    CreateTimerRequest:
      title: Create Timer Request
      properties:
        name:
          type: string
        cronish:
          type: string
      type: object
    Timer:
      title: Timer
      properties:
        name:
          type: string
        cronish:
          type: string
      type: object
    ListTimersResponse:
      title: List Timers Response
      properties:
        result:
          type: string
        timers:
          type: array
          items:
            $ref: '#/components/schemas/CookedTimerDef'
      type: object
    CookedTimerResponse:
      title: Cooked Timer Response
      properties:
        result:
          type: string
        timers:
          type: array
          items:
            $ref: '#/components/schemas/CookedTimer'
      type: object
    CookedTimer:
      type: object
      properties:
        name:
          type: string
        nextFire:
          type: integer
        secsTillFire:
          type: integer
        secsInPeriod:
          type: integer
      required:
        - nextFire
        - secsTillFire
        - secsInPeriod
    CookedTimerDef:
      type: object
      properties:
        name:
          type: string
        secsTillFire:
          type: integer
        nextFire:
          type: integer
        cronish:
          type: string
        secsInPeriod:
          type: integer
      required:
        - nextFire
        - secsTillFire
        - secsInPeriod
    DeleteTimerRequest:
      title: Delete Timer Request
      properties:
        name:
          type: string
      type: object
    GetCodesRequest:
      title: Get Codes Request
      properties:
        id:
          type: integer
      type: object
      required:
        - id
    CodeClaimRequest:
      title: Code Claim Request
      properties:
        code:
          type: string
      type: object
    CreateRedemptionDef:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        timeExpires:
          type: integer
        reward:
          $ref: '#/components/schemas/EntitlementGenerator'
        gift:
          $ref: '#/components/schemas/PlayerReward'
        maxPerUser:
          type: integer
        whitelist:
          type: array
          items:
            type: integer
        classification:
          type: string
      required:
        - maxPerUser
    CodeRedemptionSummary:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/RedemptionDef'
        capacity:
          type: integer
        redeemed:
          type: integer
      required:
        - capacity
        - redeemed
    CodeRedemptionResponse:
      title: Code Redemption Response
      properties:
        result:
          type: string
      type: object
    CodeCreateRequest:
      title: Code Create Request
      properties:
        definition:
          $ref: '#/components/schemas/CreateRedemptionDef'
        codes:
          type: integer
        claimsPerCode:
          type: integer
      type: object
      required:
        - codes
        - claimsPerCode
    RedemptionDef:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        creatorGt:
          type: integer
        timeExpires:
          type: integer
        reward:
          $ref: '#/components/schemas/EntitlementGenerator'
        gift:
          $ref: '#/components/schemas/PlayerReward'
        timeCreated:
          type: integer
        maxPerUser:
          type: integer
        id:
          type: integer
        whitelist:
          type: array
          items:
            type: integer
        classification:
          type: string
      required:
        - maxPerUser
        - creatorGt
        - timeCreated
        - id
    GetDefinitionsResponse:
      title: Get Definitions Response
      properties:
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/CodeRedemptionSummary'
      type: object
    ImportCodesRequest:
      title: Import Codes Request
      properties:
        definitionId:
          type: integer
        codes:
          type: array
          items:
            type: string
        claimsPerCode:
          type: integer
      type: object
      required:
        - definitionId
        - claimsPerCode
    GetAvailableCodesResponse:
      title: Get Available Codes Response
      properties:
        codes:
          type: array
          items:
            type: string
      type: object
    DeleteEntitlementDefinitionRequest:
      title: Delete Entitlement Definition Request
      properties:
        symbol:
          type: string
      type: object
    GetPlayerEntitlementsRequest:
      title: Get Player Entitlements Request
      properties:
        state:
          type: string
        skip:
          type: integer
        symbol:
          type: string
        icw:
          type: boolean
        spec:
          type: string
        limit:
          type: integer
        gt:
          type: integer
      type: object
      required:
        - gt
    RevokeEntitlementRequest:
      title: Revoke Entitlement Request
      properties:
        uuid:
          type: string
      type: object
    ModifyEntitlementDefinitionRequest:
      type: object
      properties:
        symbol:
          type: string
        request:
          $ref: '#/components/schemas/EntitlementDefRequest'
    EntitlementGrantMultiRequest:
      title: Entitlement Grant Multi Request
      properties:
        gamerTags:
          type: array
          items:
            type: integer
        generators:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementGenerator'
      type: object
    EntitlementDefinition:
      type: object
      properties:
        description:
          type: string
        maxGrants:
          type: integer
        groupSymbols:
          type: array
          items:
            type: string
        transferable:
          type: boolean
        name:
          type: string
        claimTrigger:
          $ref: '#/components/schemas/StateChangeTrigger'
        image:
          type: string
        grantTrigger:
          $ref: '#/components/schemas/StateChangeTrigger'
        terminalExpirationSecs:
          type: integer
        symbol:
          type: string
        revokeMode:
          type: integer
        replaces:
          type: string
        created:
          type: integer
        parameterized:
          type: boolean
      required:
        - maxGrants
        - revokeMode
        - transferable
        - created
    EntitlementResponse:
      title: Entitlement Response
      properties:
        status:
          type: string
        uuid:
          type: string
        state:
          type: string
      type: object
    UploadEntitlementDefinitionRequest:
      title: Upload Entitlement Definition Request
      properties:
        entitlements:
          type: array
          items:
            $ref: '#/components/schemas/ModifyEntitlementDefinitionRequest'
      type: object
    StateChangeCondition:
      type: object
      properties:
        statvalue: {}
    EntitlementDefRequest:
      type: object
      properties:
        description:
          type: string
        maxGrants:
          type: integer
        groupSymbols:
          type: array
          items:
            type: string
        transferable:
          type: boolean
        name:
          type: string
        claimTrigger:
          $ref: '#/components/schemas/StateChangeTriggerDef'
        image:
          type: string
        grantTrigger:
          $ref: '#/components/schemas/StateChangeTriggerDef'
        terminalExpirationSecs:
          type: integer
        revokeMode:
          type: integer
        replaces:
          type: string
        parameterized:
          type: boolean
    EntitlementListResponse:
      title: Entitlement List Response
      properties:
        entitlements:
          type: array
          items:
            $ref: '#/components/schemas/Entitlement'
      type: object
    StateChangeTriggerDef:
      type: object
      properties:
        domain:
          type: string
        subject:
          type: string
        action:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/StateChangeCondition'
    GetEntitlementDefinitionsRequest:
      title: Get Entitlement Definitions Request
      properties:
        symbol:
          type: string
      type: object
    StateChangeTrigger:
      type: object
      properties:
        domain:
          type: string
        subject:
          type: string
        action:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/StateChangeCondition'
    EntitlementDefinitions:
      title: Entitlement Definitions
      properties:
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/EntitlementDefinition'
      type: object
    Entitlement:
      type: object
      properties:
        cwinSecsTillOpen:
          type: integer
        history:
          type: array
          items:
            type: string
        state:
          type: string
        gamerTag:
          type: integer
        uuid:
          type: string
        cwin:
          $ref: '#/components/schemas/EntitlementClaimWindow'
        symbol:
          type: string
        specialized:
          type: string
        updated:
          type: integer
        cwinSecsTillClose:
          type: integer
        ttl:
          type: integer
          format: utc-millisec
      required:
        - gamerTag
        - updated
    ClaimEntitlementRequest:
      title: Claim Entitlement Request
      properties:
        gt:
          type: integer
        symbol:
          type: string
        spec:
          type: string
        uuid:
          type: string
      type: object
      required:
        - gt
    CreateMessageCampaignRequest:
      title: Create Message Campaign Request
      properties:
        mtype:
          type: string
        mb_store:
          type: string
        mb_expiration:
          type: string
        name:
          type: string
        subject:
          type: string
        mb_ent_spec:
          type: string
        mb_ent_quant:
          type: integer
        resend_to_past_recipients:
          type: boolean
        datepoint:
          type: string
        mb_attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentRequest'
        recur:
          type: string
        sent:
          type: integer
        msg:
          type: string
        rules:
          type: array
          items:
            type: string
        mb_ent:
          type: string
        start:
          type: string
        days:
          type: string
      type: object
      required:
        - sent
        - resend_to_past_recipients
    RescheduleMessageCampaignRequest:
      title: Reschedule Message Campaign Request
      properties:
        sid:
          type: string
        startDate:
          type: string
      type: object
    GetCloudStorageResponse:
      title: Get Cloud Storage Response
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CloudStorage'
      type: object
    EjectMessageCampaignRequest:
      title: Eject Message Campaign Request
      properties:
        sid:
          type: string
      type: object
    GetCampaignsResponse:
      title: Get Campaigns Response
      properties:
        campaigns:
          type: array
          items:
            $ref: '#/components/schemas/CloudStorage'
      type: object
    DeleteRequest:
      title: Delete Request
      properties:
        id:
          type: integer
      type: object
      required:
        - id
    CreateMessageTemplateRequest:
      title: Create Message Template Request
      properties:
        name:
          type: string
        msg:
          type: string
      type: object
    PvpRewardDefinition:
      type: object
      properties:
        playerCap:
          type: integer
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/PvpRewardTier'
        rewardExpHours:
          type: integer
    PvpRewardTier:
      type: object
      properties:
        percentage:
          type: integer
        bundleSymbol:
          type: string
      required:
        - percentage
    PvpRequest:
      title: Pvp Request
      properties:
        lbid:
          type: string
      type: object
    PvpDefinition:
      type: object
      properties:
        description:
          type: string
        nextReward:
          type: integer
        lbid:
          type: string
        state:
          type: integer
        idleDays:
          type: integer
        cron:
          type: string
        rewardDefinition:
          $ref: '#/components/schemas/PvpRewardDefinition'
        protectedRanks:
          type: integer
        minPlayers:
          type: integer
      required:
        - state
    PvpDefinitions:
      title: Pvp Definitions
      properties:
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/PvpDefinition'
      type: object
    ShardDeleteRequest:
      title: Shard Delete Request
      properties:
        shardId:
          type: string
      type: object
    MetadataUpdate:
      type: object
      properties:
        set:
          type: object
          additionalProperties: true
        add:
          type: object
          additionalProperties: true
    ShardResponse:
      title: Shard Response
      properties:
        result:
          type: string
        shard:
          $ref: '#/components/schemas/ShardDef'
      type: object
    ShardDef:
      type: object
      properties:
        shardId:
          type: string
        uri:
          type: string
        metadata:
          type: object
          additionalProperties: true
    ShardListResponse:
      title: Shard List Response
      properties:
        result:
          type: string
        shards:
          type: array
          items:
            $ref: '#/components/schemas/ShardDef'
      type: object
    GetPreferredRequest:
      title: Get Preferred Request
      properties:
        preference:
          type: string
      type: object
    ShardUpdateRequest:
      title: Shard Update Request
      properties:
        shardId:
          type: string
        uri:
          type: string
        metadata:
          $ref: '#/components/schemas/MetadataUpdate'
      type: object
    GetNamespacesResponse:
      title: Get Namespaces Response
      properties:
        namespaces:
          type: array
          items:
            type: string
      type: object
      required:
        - namespaces
    MicroserviceStateTotals:
      type: object
      properties:
        min:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
        avg:
          type: number
          format: double
        last:
          type: integer
          format: int32
      required:
        - min
        - max
        - avg
        - last
    MicroserviceStateDetail:
      type: object
      properties:
        servicename:
          type: string
        runninginstances:
          type: integer
          format: int32
      required:
        - servicename
        - runninginstances
    AccessLogServices:
      type: object
      properties:
        name:
          type: string
        requests:
          $ref: '#/components/schemas/AccessLogServiceDetails'
      required:
        - name
        - requests
    MicroserviceStatePoints:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/MicroserviceStateDetail'
        timestamp:
          type: integer
          format: int64
      required:
        - services
        - timestamp
    GetAccessLogRequest:
      title: Get Access Log Request
      properties:
        from:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
        to:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
      type: object
      required:
        - from
        - to
    AccessLogResultView:
      type: object
      properties:
        date:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
        count:
          type: integer
          format: int64
      required:
        - date
        - count
    AccessLogAggregates:
      type: object
      properties:
        sum:
          type: integer
          format: int64
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
        avg:
          type: number
          format: double
      required:
        - sum
        - min
        - max
        - avg
    QueryRequest:
      title: Query Request
      properties:
        query:
          type: string
      type: object
      required:
        - query
    AdminUserRolesView:
      title: Admin User Roles View
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleCountView'
      type: object
      required:
        - roles
    RoleCountView:
      type: object
      properties:
        name:
          type: string
        accounts:
          type: integer
          format: int32
      required:
        - name
        - accounts
    AccessLogServiceDetails:
      type: object
      properties:
        aggregates:
          $ref: '#/components/schemas/AccessLogAggregates'
        details:
          type: array
          items:
            $ref: '#/components/schemas/AccessLogResultView'
      required:
        - aggregates
        - details
    GetAccessLogUrlRequest:
      title: Get Access Log Url Request
      properties:
        from:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
        to:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
        customerScoped:
          type: boolean
      type: object
      required:
        - from
        - to
    GetAccessLogResponse:
      title: Get Access Log Response
      properties:
        aggregates:
          $ref: '#/components/schemas/AccessLogAggregates'
        services:
          type: array
          items:
            $ref: '#/components/schemas/AccessLogServices'
      type: object
      required:
        - aggregates
        - services
    GetMicroservicesResponse:
      title: Get Microservices Response
      properties:
        serviceAggregates:
          $ref: '#/components/schemas/MicroserviceStateTotals'
        runningInstanceAggregates:
          $ref: '#/components/schemas/MicroserviceStateTotals'
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/MicroserviceStatePoints'
      type: object
    QueryResponse:
      title: Query Response
      properties:
        results:
          type: array
          items:
            type: string
      type: object
      required:
        - results
    QueryUrlResponse:
      title: Query Url Response
      properties:
        url:
          type: string
      type: object
      required:
        - url
    GetMicroservicesRequest:
      title: Get Microservices Request
      properties:
        from:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
        to:
          description: Milliseconds since midnight, January 1, 1970 UTC
          type: integer
          format: int64
          x-beamable-date-format: unix
      type: object
      required:
        - from
        - to
  securitySchemes:
    userRequired:
      description: Gamer Tag of the player.
      type: apiKey
      name: X-DE-GAMERTAG
      in: header
    scope:
      description: >-
        Customer and project scope. This should contain the
        '<customer-id>.<project-id>'.
      type: apiKey
      name: X-DE-SCOPE
      in: header
    api:
      description: Signed Request authentication using project secret key.
      type: apiKey
      name: X-DE-SIGNATURE
      in: header
    user:
      description: >-
        Bearer authentication with an player access token in the Authorization
        header.
      type: http
      scheme: bearer
      bearerFormat: Bearer <Access Token>
security: []
externalDocs:
  description: Beamable Documentation
  url: https://docs.beamable.com
x-readme:
  explorer-enabled: true
  proxy-enabled: true
_id: 6407b33aad681d006c66907c
