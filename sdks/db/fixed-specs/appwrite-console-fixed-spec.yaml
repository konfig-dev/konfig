openapi: 3.0.0
info:
  title: Appwrite
  description: >-
    Appwrite backend as a service cuts up to 70% of the time and costs required
    for building a modern application. We abstract and simplify common
    development tasks behind a REST APIs, to help you develop your app in a fast
    and secure way. For full API documentation and tutorials go to
    [https://appwrite.io/docs](https://appwrite.io/docs)
  version: 1.5.0
  termsOfService: https://appwrite.io/policy/terms
  contact:
    name: Appwrite Team
    url: https://appwrite.io/support
    email: team@appwrite.io
  license:
    name: BSD-3-Clause
    url: https://raw.githubusercontent.com/appwrite/appwrite/master/LICENSE
servers:
  - url: https://cloud.appwrite.io/v1
tags:
  - description: The Account service allows you to authenticate and manage a user account.
    name: account
    x-globalAttributes: []
  - description: >-
      The Databases service allows you to create structured collections of
      documents, query and filter lists of documents
    name: databases
    x-globalAttributes:
      - databaseId
  - description: >-
      The Messaging service allows you to send messages to any provider type
      (SMTP, push notification, SMS, etc.).
    name: messaging
    x-globalAttributes: []
  - description: >-
      The Project service allows you to manage all the projects in your Appwrite
      server.
    name: projects
    x-globalAttributes: []
  - description: The Users service allows you to manage your project users.
    name: users
    x-globalAttributes: []
  - description: >-
      The Health service allows you to both validate and monitor your Appwrite
      server's health.
    name: health
    x-globalAttributes: []
  - description: >-
      The Functions Service allows you view, create and manage your Cloud
      Functions.
    name: functions
    x-globalAttributes: []
  - description: >-
      The Migrations service allows you to migrate third-party data to your
      Appwrite project.
    name: migrations
    x-globalAttributes: []
  - description: The Storage service allows you to manage your project files.
    name: storage
    x-globalAttributes: []
  - description: >-
      The Teams service allows you to group users of your project and to enable
      them to share read and write access to your project resources
    name: teams
    x-globalAttributes: []
  - name: vcs
  - description: >-
      The Locale service allows you to customize your app based on your users'
      location.
    name: locale
    x-globalAttributes: []
  - description: >-
      The Avatars service aims to help you complete everyday tasks related to
      your app image, icons, and avatars.
    name: avatars
    x-globalAttributes: []
  - description: >-
      The Project service allows you to manage all the projects in your Appwrite
      server.
    name: project
    x-globalAttributes: []
  - description: >-
      The Proxy Service allows you to configure actions for your domains beyond
      DNS configuration.
    name: proxy
    x-globalAttributes: []
  - description: >-
      The GraphQL API allows you to query and mutate your Appwrite server using
      GraphQL.
    name: graphql
    x-globalAttributes: []
  - description: >-
      The Console service allows you to interact with console relevant
      informations.
    name: console
    x-globalAttributes: []
  - name: assistant
paths:
  /account:
    get:
      tags:
        - account
      summary: Get account
      operationId: Account_getUser
      security:
        - Project: []
          JWT: []
      description: Get the currently logged in user.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: get
        weight: 8
        cookies: false
        type: ''
        deprecated: false
        demo: account/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/get.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - account
      summary: Create account
      operationId: Account_createNewUser
      security:
        - Project: []
      description: >-
        Use this endpoint to allow a new user to register a new account in your
        project. After the user registration completes successfully, you can use
        the
        [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification)
        route to start verifying the user email address. To allow the new user
        to login to their new account, you need to create a new [account
        session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateNewUserRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: create
        weight: 7
        cookies: false
        type: ''
        deprecated: false
        demo: account/create.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - account
      summary: Delete account
      operationId: Account_deleteUser
      security:
        - Project: []
      description: Delete the currently logged in user.
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 9
        cookies: false
        type: ''
        deprecated: false
        demo: account/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/email:
    patch:
      tags:
        - account
      summary: Update email
      operationId: Account_updateEmailAddress
      security:
        - Project: []
          JWT: []
      description: >
        Update currently logged in user account email address. After changing
        user address, the user confirmation status will get reset. A new
        confirmation email is not sent automatically however you can use the
        send confirmation email endpoint again to send the confirmation email.
        For security measures, user password is required to complete this
        request.

        This endpoint can also be used to convert an anonymous account to a
        normal one, by passing an email address and a new password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateEmailAddressRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateEmail
        weight: 33
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-email.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-email.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/identities:
    get:
      tags:
        - account
      summary: List Identities
      operationId: Account_listIdentities
      security:
        - Project: []
          JWT: []
      description: Get the list of identities for the currently logged in user.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: userId, provider, providerUid, providerEmail,
            providerAccessTokenExpiry
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Identities List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identityList'
      x-appwrite:
        method: listIdentities
        weight: 56
        cookies: false
        type: ''
        deprecated: false
        demo: account/list-identities.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/list-identities.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account/identities
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/identities/{identityId}:
    delete:
      tags:
        - account
      summary: Delete identity
      operationId: Account_deleteIdentityById
      security:
        - Project: []
          JWT: []
      description: Delete an identity by its unique ID.
      parameters:
        - description: Identity ID.
          name: identityId
          required: true
          schema:
            type: string
            x-example: <IDENTITY_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteIdentity
        weight: 57
        cookies: false
        type: ''
        deprecated: false
        demo: account/delete-identity.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete-identity.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/jwt:
    post:
      tags:
        - account
      summary: Create JWT
      operationId: Account_createJWT
      security:
        - Project: []
      description: >-
        Use this endpoint to create a JSON Web Token. You can use the resulting
        JWT to authenticate on behalf of the current user when working with the
        Appwrite server-side API and SDKs. The JWT secret is valid for 15
        minutes from its creation and will be invalid if the user will logout in
        that time frame.
      responses:
        '201':
          description: JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwt'
      x-appwrite:
        method: createJWT
        weight: 28
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-j-w-t.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-jwt.md
        rate-limit: 100
        rate-time: 3600
        rate-key: url:{url},userId:{userId}
        scope: account
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/logs:
    get:
      tags:
        - account
      summary: List logs
      operationId: Account_listUserLogs
      security:
        - Project: []
          JWT: []
      description: >-
        Get the list of latest security activity logs for the currently logged
        in user. Each log returns user IP address, location and date and time of
        log.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listLogs
        weight: 30
        cookies: false
        type: ''
        deprecated: false
        demo: account/list-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/list-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/mfa:
    patch:
      tags:
        - account
      summary: Update MFA
      operationId: Account_updateMfaStatus
      security:
        - Project: []
          JWT: []
      description: Enable or disable MFA on an account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateMfaStatusRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateMFA
        weight: 43
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-m-f-a.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-mfa.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/mfa/authenticators/{type}:
    post:
      tags:
        - account
      summary: Add Authenticator
      operationId: Account_addAuthenticatorApp
      security:
        - Project: []
          JWT: []
      description: >-
        Add an authenticator app to be used as an MFA factor. Verify the
        authenticator using the [verify
        authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator)
        method.
      parameters:
        - description: Type of authenticator. Must be `totp`
          name: type
          required: true
          schema:
            type: string
            x-example: totp
            enum:
              - totp
            x-enum-name: AuthenticatorType
            x-enum-keys: []
          in: path
      responses:
        '200':
          description: MFAType
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaType'
      x-appwrite:
        method: createMfaAuthenticator
        weight: 45
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-mfa-authenticator.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-mfa-authenticator.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - account
      summary: Verify Authenticator
      operationId: Account_verifyAuthenticator
      security:
        - Project: []
          JWT: []
      description: >-
        Verify an authenticator app after adding it using the [add
        authenticator](/docs/references/cloud/client-web/account#addAuthenticator)
        method.
      parameters:
        - description: Type of authenticator.
          name: type
          required: true
          schema:
            type: string
            x-example: totp
            enum:
              - totp
            x-enum-name: AuthenticatorType
            x-enum-keys: []
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountVerifyAuthenticatorRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateMfaAuthenticator
        weight: 46
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-mfa-authenticator.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-mfa-authenticator.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - account
      summary: Delete Authenticator
      operationId: Account_deleteAuthenticatorById
      security:
        - Project: []
          JWT: []
      description: Delete an authenticator for a user by ID.
      parameters:
        - description: Type of authenticator.
          name: type
          required: true
          schema:
            type: string
            x-example: totp
            enum:
              - totp
            x-enum-name: AuthenticatorType
            x-enum-keys: []
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDeleteAuthenticatorByIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: deleteMfaAuthenticator
        weight: 50
        cookies: false
        type: ''
        deprecated: false
        demo: account/delete-mfa-authenticator.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete-mfa-authenticator.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/mfa/challenge:
    post:
      tags:
        - account
      summary: Create 2FA Challenge
      operationId: Account_createMfaChallenge
      security:
        - Project: []
      description: >-
        Begin the process of MFA verification after sign-in. Finish the flow
        with
        [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge)
        method.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateMfaChallengeRequest'
      responses:
        '201':
          description: MFA Challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaChallenge'
      x-appwrite:
        method: createMfaChallenge
        weight: 51
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-mfa-challenge.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-mfa-challenge.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},token:{param-token}
        scope: account
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - account
      summary: Create MFA Challenge (confirmation)
      operationId: Account_completeMfaChallenge
      security:
        - Project: []
          JWT: []
      description: >-
        Complete the MFA challenge by providing the one-time password. Finish
        the process of MFA verification by providing the one-time password. To
        begin the flow, use
        [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)
        method.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCompleteMfaChallengeRequest'
      responses:
        '204':
          description: No content
          content:
            '':
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: updateMfaChallenge
        weight: 52
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-mfa-challenge.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-mfa-challenge.md
        rate-limit: 10
        rate-time: 3600
        rate-key: userId:{param-userId}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/mfa/factors:
    get:
      tags:
        - account
      summary: List Factors
      operationId: Account_listMfaFactors
      security:
        - Project: []
          JWT: []
      description: List the factors available on the account to be used as a MFA challange.
      responses:
        '200':
          description: MFAFactors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaFactors'
      x-appwrite:
        method: listMfaFactors
        weight: 44
        cookies: false
        type: ''
        deprecated: false
        demo: account/list-mfa-factors.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/list-mfa-factors.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/mfa/recovery-codes:
    get:
      tags:
        - account
      summary: Get MFA Recovery Codes
      operationId: Account_getMfaRecoveryCodes
      security:
        - Project: []
          JWT: []
      description: >-
        Get recovery codes that can be used as backup for MFA flow. Before
        getting codes, they must be generated using
        [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)
        method. An OTP challenge is required to read recovery codes.
      responses:
        '200':
          description: MFA Recovery Codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaRecoveryCodes'
      x-appwrite:
        method: getMfaRecoveryCodes
        weight: 49
        cookies: false
        type: ''
        deprecated: false
        demo: account/get-mfa-recovery-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-mfa-recovery-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - account
      summary: Create MFA Recovery Codes
      operationId: Account_generateRecoveryCodes
      security:
        - Project: []
          JWT: []
      description: >-
        Generate recovery codes as backup for MFA flow. It's recommended to
        generate and show then immediately after user successfully adds their
        authehticator. Recovery codes can be used as a MFA verification type in
        [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)
        method.
      responses:
        '201':
          description: MFA Recovery Codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaRecoveryCodes'
      x-appwrite:
        method: createMfaRecoveryCodes
        weight: 47
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-mfa-recovery-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-mfa-recovery-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - account
      summary: Regenerate MFA Recovery Codes
      operationId: Account_regenerateMfaRecoveryCodes
      security:
        - Project: []
          JWT: []
      description: >-
        Regenerate recovery codes that can be used as backup for MFA flow.
        Before regenerating codes, they must be first generated using
        [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)
        method. An OTP challenge is required to regenreate recovery codes.
      responses:
        '200':
          description: MFA Recovery Codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaRecoveryCodes'
      x-appwrite:
        method: updateMfaRecoveryCodes
        weight: 48
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-mfa-recovery-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-mfa-recovery-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/name:
    patch:
      tags:
        - account
      summary: Update name
      operationId: Account_updateName
      security:
        - Project: []
          JWT: []
      description: Update currently logged in user account name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateNameRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateName
        weight: 31
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-name.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-name.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/password:
    patch:
      tags:
        - account
      summary: Update password
      operationId: Account_updatePassword
      security:
        - Project: []
          JWT: []
      description: >-
        Update currently logged in user password. For validation, user is
        required to pass in the new password, and the old password. For users
        created with OAuth, Team Invites and Magic URL, oldPassword is optional.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatePasswordRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updatePassword
        weight: 32
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-password.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-password.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/phone:
    patch:
      tags:
        - account
      summary: Update phone
      operationId: Account_updatePhone
      security:
        - Project: []
          JWT: []
      description: >-
        Update the currently logged in user's phone number. After updating the
        phone number, the phone verification status will be reset. A
        confirmation SMS is not sent automatically, however you can use the
        [POST
        /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification)
        endpoint to send a confirmation SMS.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatePhoneRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updatePhone
        weight: 34
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-phone.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-phone.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/prefs:
    get:
      tags:
        - account
      summary: Get account preferences
      operationId: Account_getPrefsOperation
      security:
        - Project: []
          JWT: []
      description: >-
        Get the preferences as a key-value object for the currently logged in
        user.
      responses:
        '200':
          description: Preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
      x-appwrite:
        method: getPrefs
        weight: 29
        cookies: false
        type: ''
        deprecated: false
        demo: account/get-prefs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-prefs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account/prefs
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - account
      summary: Update preferences
      operationId: Account_updatePrefsOperation
      security:
        - Project: []
          JWT: []
      description: >-
        Update currently logged in user account preferences. The object you pass
        is stored as is, and replaces any previous value. The maximum allowed
        prefs size is 64kB and throws error if exceeded.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatePrefsOperationRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updatePrefs
        weight: 35
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-prefs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-prefs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account/prefs
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /account/recovery:
    post:
      tags:
        - account
      summary: Create password recovery
      operationId: Account_createPasswordRecovery
      security:
        - Project: []
          JWT: []
      description: >-
        Sends the user an email with a temporary secret key for password reset.
        When the user clicks the confirmation link he is redirected back to your
        app password reset URL with the secret key and email address values
        attached to the URL query string. Use the query string params to submit
        a request to the [PUT
        /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery)
        endpoint to complete the process. The verification link sent to the
        user's email address is valid for 1 hour.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreatePasswordRecoveryRequest'
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createRecovery
        weight: 37
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-recovery.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-recovery.md
        rate-limit: 10
        rate-time: 3600
        rate-key:
          - url:{url},email:{param-email}
          - url:{url},ip:{ip}
        scope: sessions.write
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - account
      summary: Create password recovery (confirmation)
      operationId: Account_completePasswordRecovery
      security:
        - Project: []
          JWT: []
      description: >-
        Use this endpoint to complete the user account password reset. Both the
        **userId** and **secret** arguments will be passed as query parameters
        to the redirect URL you have provided when sending your request to the
        [POST
        /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery)
        endpoint.


        Please note that in order to avoid a [Redirect
        Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)
        the only valid redirect URLs are the ones from domains you have set when
        adding your platforms in the console interface.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCompletePasswordRecoveryRequest'
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: updateRecovery
        weight: 38
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-recovery.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-recovery.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},userId:{param-userId}
        scope: sessions.write
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions:
    get:
      tags:
        - account
      summary: List sessions
      operationId: Account_listSessions
      security:
        - Project: []
          JWT: []
      description: >-
        Get the list of active sessions across different devices for the
        currently logged in user.
      responses:
        '200':
          description: Sessions List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sessionList'
      x-appwrite:
        method: listSessions
        weight: 10
        cookies: false
        type: ''
        deprecated: false
        demo: account/list-sessions.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/list-sessions.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account/sessions
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - account
      summary: Delete sessions
      operationId: Account_deleteSessions
      security:
        - Project: []
          JWT: []
      description: >-
        Delete all sessions from the user account and remove any sessions
        cookies from the end client.
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteSessions
        weight: 11
        cookies: false
        type: ''
        deprecated: false
        demo: account/delete-sessions.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete-sessions.md
        rate-limit: 100
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/anonymous:
    post:
      tags:
        - account
      summary: Create anonymous session
      operationId: Account_createAnonymousSession
      security:
        - Project: []
      description: >-
        Use this endpoint to allow a new user to register an anonymous account
        in your project. This route will also create a new session for the user.
        To allow the new user to convert an anonymous account to a normal
        account, you need to update its [email and
        password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail)
        or create an [OAuth2
        session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).
      responses:
        '201':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: createAnonymousSession
        weight: 16
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-anonymous-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-session-anonymous.md
        rate-limit: 50
        rate-time: 3600
        rate-key: ip:{ip}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/email:
    post:
      tags:
        - account
      summary: Create email password session
      operationId: Account_createEmailPasswordSession
      security:
        - Project: []
      description: >-
        Allow the user to login into their account by providing a valid email
        and password combination. This route will create a new session for the
        user.


        A user is limited to 10 active sessions at a time by default. [Learn
        more about session
        limits](https://appwrite.io/docs/authentication-security#limits).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateEmailPasswordSessionRequest'
      responses:
        '201':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: createEmailPasswordSession
        weight: 15
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-email-password-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-session-email-password.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},email:{param-email}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/magic-url:
    put:
      tags:
        - account
      summary: Update magic URL session
      operationId: Account_updateMagicUrlSession
      security:
        - Project: []
      description: >-
        Use this endpoint to create a session from token. Provide the **userId**
        and **secret** parameters from the successful response of authentication
        flows initiated by token creation. For example, magic URL and phone
        login.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateMagicUrlSessionRequest'
      responses:
        '201':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: updateMagicURLSession
        weight: 25
        cookies: false
        type: ''
        deprecated: true
        demo: account/update-magic-u-r-l-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-session.md
        rate-limit: 10
        rate-time: 3600
        rate-key: ip:{ip},userId:{param-userId}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/oauth2/{provider}:
    get:
      tags:
        - account
      summary: Create OAuth2 session
      operationId: Account_createOAuth2Session
      security:
        - Project: []
      description: >
        Allow the user to login to their account using the OAuth2 provider of
        their choice. Each OAuth2 provider should be enabled from the Appwrite
        console first. Use the success and failure arguments to provide a
        redirect URL's back to your app when login is completed.


        If there is already an active session, the new session will be attached
        to the logged-in account. If there are no active sessions, the server
        will attempt to look for a user with the same email address as the email
        received from the OAuth2 provider and attach the new session to the
        existing user. If no matching user is found - the server will create a
        new user.


        A user is limited to 10 active sessions at a time by default. [Learn
        more about session
        limits](https://appwrite.io/docs/authentication-security#limits).
      parameters:
        - description: >-
            OAuth2 Provider. Currently, supported providers are: amazon, apple,
            auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion,
            discord, disqus, dropbox, etsy, facebook, github, gitlab, google,
            linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox,
            podio, salesforce, slack, spotify, stripe, tradeshift,
            tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.
          name: provider
          required: true
          schema:
            type: string
            x-example: amazon
            enum:
              - amazon
              - apple
              - auth0
              - authentik
              - autodesk
              - bitbucket
              - bitly
              - box
              - dailymotion
              - discord
              - disqus
              - dropbox
              - etsy
              - facebook
              - github
              - gitlab
              - google
              - linkedin
              - microsoft
              - notion
              - oidc
              - okta
              - paypal
              - paypalSandbox
              - podio
              - salesforce
              - slack
              - spotify
              - stripe
              - tradeshift
              - tradeshiftBox
              - twitch
              - wordpress
              - yahoo
              - yammer
              - yandex
              - zoho
              - zoom
              - mock
            x-enum-name: OAuthProvider
            x-enum-keys: []
          in: path
        - description: >-
            URL to redirect back to your app after a successful login attempt. 
            Only URLs from hostnames in your project's platform list are
            allowed. This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          name: success
          required: false
          schema:
            type: string
            format: url
            x-example: https://example.com
            default: ''
          in: query
        - description: >-
            URL to redirect back to your app after a failed login attempt.  Only
            URLs from hostnames in your project's platform list are allowed.
            This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          name: failure
          required: false
          schema:
            type: string
            format: url
            x-example: https://example.com
            default: ''
          in: query
        - description: >-
            A list of custom OAuth2 scopes. Check each provider internal docs
            for a list of supported scopes. Maximum of 100 scopes are allowed,
            each 4096 characters long.
          name: scopes
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        default:
          description: File
      x-appwrite:
        method: createOAuth2Session
        weight: 18
        cookies: false
        type: webAuth
        deprecated: false
        demo: account/create-o-auth2session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-session-oauth2.md
        rate-limit: 50
        rate-time: 3600
        rate-key: ip:{ip}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/phone:
    put:
      tags:
        - account
      summary: Update phone session
      operationId: Account_updatePhoneSession
      security:
        - Project: []
      description: >-
        Use this endpoint to create a session from token. Provide the **userId**
        and **secret** parameters from the successful response of authentication
        flows initiated by token creation. For example, magic URL and phone
        login.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatePhoneSessionRequest'
      responses:
        '201':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: updatePhoneSession
        weight: 26
        cookies: false
        type: ''
        deprecated: true
        demo: account/update-phone-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-session.md
        rate-limit: 10
        rate-time: 3600
        rate-key: ip:{ip},userId:{param-userId}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/token:
    post:
      tags:
        - account
      summary: Create session
      operationId: Account_createSessionFromToken
      security:
        - Project: []
      description: >-
        Use this endpoint to create a session from token. Provide the **userId**
        and **secret** parameters from the successful response of authentication
        flows initiated by token creation. For example, magic URL and phone
        login.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateSessionFromTokenRequest'
      responses:
        '201':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: createSession
        weight: 17
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-session.md
        rate-limit: 10
        rate-time: 3600
        rate-key: ip:{ip},userId:{param-userId}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/sessions/{sessionId}:
    get:
      tags:
        - account
      summary: Get session
      operationId: Account_getSession
      security:
        - Project: []
          JWT: []
      description: >-
        Use this endpoint to get a logged in user's session using a Session ID.
        Inputting 'current' will return the current session being used.
      parameters:
        - description: >-
            Session ID. Use the string 'current' to get the current device
            session.
          name: sessionId
          required: true
          schema:
            type: string
            x-example: <SESSION_ID>
          in: path
      responses:
        '200':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: getSession
        weight: 12
        cookies: false
        type: ''
        deprecated: false
        demo: account/get-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/get-session.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: /account/sessions
        offline-key: '{sessionId}'
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - account
      summary: Update session
      operationId: Account_extendSessionLength
      security:
        - Project: []
          JWT: []
      description: >-
        Use this endpoint to extend a session's length. Extending a session is
        useful when session expiry is short. If the session was created using an
        OAuth provider, this endpoint refreshes the access token from the
        provider.
      parameters:
        - description: >-
            Session ID. Use the string 'current' to update the current device
            session.
          name: sessionId
          required: true
          schema:
            type: string
            x-example: <SESSION_ID>
          in: path
      responses:
        '200':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: updateSession
        weight: 14
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-session.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - account
      summary: Delete session
      operationId: Account_logoutSession
      security:
        - Project: []
          JWT: []
      description: >-
        Logout the user. Use 'current' as the session ID to logout on this
        device, use a session ID to logout on another device. If you're looking
        to logout the user on all devices, use [Delete
        Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions)
        instead.
      parameters:
        - description: >-
            Session ID. Use the string 'current' to delete the current device
            session.
          name: sessionId
          required: true
          schema:
            type: string
            x-example: <SESSION_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteSession
        weight: 13
        cookies: false
        type: ''
        deprecated: false
        demo: account/delete-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/delete-session.md
        rate-limit: 100
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/status:
    patch:
      tags:
        - account
      summary: Update status
      operationId: Account_updateStatus
      security:
        - Project: []
          JWT: []
      description: >-
        Block the currently logged in user account. Behind the scene, the user
        record is not deleted but permanently blocked from any access. To
        completely delete a user, use the Users API instead.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateStatus
        weight: 36
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-status.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-status.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/targets/push:
    post:
      tags:
        - account
      summary: Create push target
      operationId: Account_createPushTarget
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreatePushTargetRequest'
      responses:
        '201':
          description: Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/target'
      x-appwrite:
        method: createPushTarget
        weight: 53
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-push-target.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.write
        platforms:
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/targets/{targetId}/push:
    put:
      tags:
        - account
      summary: Update push target
      operationId: Account_updatePushTarget
      security:
        - Project: []
      description: ''
      parameters:
        - description: Target ID.
          name: targetId
          required: true
          schema:
            type: string
            x-example: <TARGET_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdatePushTargetRequest'
      responses:
        '200':
          description: Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/target'
      x-appwrite:
        method: updatePushTarget
        weight: 54
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-push-target.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.write
        platforms:
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - account
      summary: Delete push target
      operationId: Account_deletePushTarget
      security:
        - Project: []
      description: ''
      parameters:
        - description: Target ID.
          name: targetId
          required: true
          schema:
            type: string
            x-example: <TARGET_ID>
          in: path
      responses:
        '204':
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/target'
      x-appwrite:
        method: deletePushTarget
        weight: 55
        cookies: false
        type: ''
        deprecated: false
        demo: account/delete-push-target.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.write
        platforms:
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/tokens/email:
    post:
      tags:
        - account
      summary: Create email token (OTP)
      operationId: Account_createEmailToken
      security:
        - Project: []
      description: >-
        Sends the user an email with a secret key for creating a session. If the
        provided user ID has not be registered, a new user will be created. Use
        the returned user ID and secret and submit a request to the [POST
        /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)
        endpoint to complete the login process. The secret sent to the user's
        email is valid for 15 minutes.


        A user is limited to 10 active sessions at a time by default. [Learn
        more about session
        limits](https://appwrite.io/docs/authentication-security#limits).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateEmailTokenRequest'
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createEmailToken
        weight: 24
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-email-token.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-token-email.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},email:{param-email}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/tokens/magic-url:
    post:
      tags:
        - account
      summary: Create magic URL token
      operationId: Account_createMagicUrlToken
      security:
        - Project: []
      description: >
        Sends the user an email with a secret key for creating a session. If the
        provided user ID has not been registered, a new user will be created.
        When the user clicks the link in the email, the user is redirected back
        to the URL you provided with the secret key and userId values attached
        to the URL query string. Use the query string parameters to submit a
        request to the [POST
        /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)
        endpoint to complete the login process. The link sent to the user's
        email address is valid for 1 hour. If you are on a mobile device you can
        leave the URL parameter empty, so that the login completion will be
        handled by your Appwrite instance by default.


        A user is limited to 10 active sessions at a time by default. [Learn
        more about session
        limits](https://appwrite.io/docs/authentication-security#limits).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateMagicUrlTokenRequest'
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createMagicURLToken
        weight: 23
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-magic-u-r-l-token.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-token-magic-url.md
        rate-limit: 60
        rate-time: 3600
        rate-key:
          - url:{url},email:{param-email}
          - url:{url},ip:{ip}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/tokens/oauth2/{provider}:
    get:
      tags:
        - account
      summary: Create OAuth2 token
      operationId: Account_createOAuth2Token
      security:
        - Project: []
      description: >-
        Allow the user to login to their account using the OAuth2 provider of
        their choice. Each OAuth2 provider should be enabled from the Appwrite
        console first. Use the success and failure arguments to provide a
        redirect URL's back to your app when login is completed. 


        If authentication succeeds, `userId` and `secret` of a token will be
        appended to the success URL as query parameters. These can be used to
        create a new session using the [Create
        session](https://appwrite.io/docs/references/cloud/client-web/account#createSession)
        endpoint.


        A user is limited to 10 active sessions at a time by default. [Learn
        more about session
        limits](https://appwrite.io/docs/authentication-security#limits).
      parameters:
        - description: >-
            OAuth2 Provider. Currently, supported providers are: amazon, apple,
            auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion,
            discord, disqus, dropbox, etsy, facebook, github, gitlab, google,
            linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox,
            podio, salesforce, slack, spotify, stripe, tradeshift,
            tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.
          name: provider
          required: true
          schema:
            type: string
            x-example: amazon
            enum:
              - amazon
              - apple
              - auth0
              - authentik
              - autodesk
              - bitbucket
              - bitly
              - box
              - dailymotion
              - discord
              - disqus
              - dropbox
              - etsy
              - facebook
              - github
              - gitlab
              - google
              - linkedin
              - microsoft
              - notion
              - oidc
              - okta
              - paypal
              - paypalSandbox
              - podio
              - salesforce
              - slack
              - spotify
              - stripe
              - tradeshift
              - tradeshiftBox
              - twitch
              - wordpress
              - yahoo
              - yammer
              - yandex
              - zoho
              - zoom
              - mock
            x-enum-name: OAuthProvider
            x-enum-keys: []
          in: path
        - description: >-
            URL to redirect back to your app after a successful login attempt. 
            Only URLs from hostnames in your project's platform list are
            allowed. This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          name: success
          required: false
          schema:
            type: string
            format: url
            x-example: https://example.com
            default: ''
          in: query
        - description: >-
            URL to redirect back to your app after a failed login attempt.  Only
            URLs from hostnames in your project's platform list are allowed.
            This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          name: failure
          required: false
          schema:
            type: string
            format: url
            x-example: https://example.com
            default: ''
          in: query
        - description: >-
            A list of custom OAuth2 scopes. Check each provider internal docs
            for a list of supported scopes. Maximum of 100 scopes are allowed,
            each 4096 characters long.
          name: scopes
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        default:
          description: File
      x-appwrite:
        method: createOAuth2Token
        weight: 22
        cookies: false
        type: webAuth
        deprecated: false
        demo: account/create-o-auth2token.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-token-oauth2.md
        rate-limit: 50
        rate-time: 3600
        rate-key: ip:{ip}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/tokens/phone:
    post:
      tags:
        - account
      summary: Create phone token
      operationId: Account_createPhoneToken
      security:
        - Project: []
      description: >-
        Sends the user an SMS with a secret key for creating a session. If the
        provided user ID has not be registered, a new user will be created. Use
        the returned user ID and secret and submit a request to the [POST
        /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)
        endpoint to complete the login process. The secret sent to the user's
        phone is valid for 15 minutes.


        A user is limited to 10 active sessions at a time by default. [Learn
        more about session
        limits](https://appwrite.io/docs/authentication-security#limits).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreatePhoneTokenRequest'
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createPhoneToken
        weight: 27
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-phone-token.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-token-phone.md
        rate-limit: 10
        rate-time: 3600
        rate-key:
          - url:{url},phone:{param-phone}
          - url:{url},ip:{ip}
        scope: sessions.write
        platforms:
          - server
          - client
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/verification:
    post:
      tags:
        - account
      summary: Create email verification
      operationId: Account_createEmailVerification
      security:
        - Project: []
          JWT: []
      description: >
        Use this endpoint to send a verification message to your user email
        address to confirm they are the valid owners of that address. Both the
        **userId** and **secret** arguments will be passed as query parameters
        to the URL you have provided to be attached to the verification email.
        The provided URL should redirect the user back to your app and allow you
        to complete the verification process by verifying both the **userId**
        and **secret** parameters. Learn more about how to [complete the
        verification
        process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification).
        The verification link sent to the user's email address is valid for 7
        days.


        Please note that in order to avoid a [Redirect
        Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),
        the only valid redirect URLs are the ones from domains you have set when
        adding your platforms in the console interface.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateEmailVerificationRequest'
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createVerification
        weight: 39
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-verification.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-email-verification.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},userId:{userId}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - account
      summary: Create email verification (confirmation)
      operationId: Account_completeEmailVerification
      security:
        - Project: []
          JWT: []
      description: >-
        Use this endpoint to complete the user email verification process. Use
        both the **userId** and **secret** parameters that were attached to your
        app URL to verify the user email ownership. If confirmed this route will
        return a 200 status code.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCompleteEmailVerificationRequest'
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: updateVerification
        weight: 40
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-verification.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-email-verification.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},userId:{param-userId}
        scope: public
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /account/verification/phone:
    post:
      tags:
        - account
      summary: Create phone verification
      operationId: Account_sendVerificationSms
      security:
        - Project: []
          JWT: []
      description: >-
        Use this endpoint to send a verification SMS to the currently logged in
        user. This endpoint is meant for use after updating a user's phone
        number using the
        [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone)
        endpoint. Learn more about how to [complete the verification
        process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification).
        The verification code sent to the user's phone number is valid for 15
        minutes.
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createPhoneVerification
        weight: 41
        cookies: false
        type: ''
        deprecated: false
        demo: account/create-phone-verification.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/create-phone-verification.md
        rate-limit: 10
        rate-time: 3600
        rate-key:
          - url:{url},userId:{userId}
          - url:{url},ip:{ip}
        scope: account
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - account
      summary: Create phone verification (confirmation)
      operationId: Account_confirmPhoneVerification
      security:
        - Project: []
          JWT: []
      description: >-
        Use this endpoint to complete the user phone verification process. Use
        the **userId** and **secret** that were sent to your user's phone number
        to verify the user email ownership. If confirmed this route will return
        a 200 status code.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountConfirmPhoneVerificationRequest'
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: updatePhoneVerification
        weight: 42
        cookies: false
        type: ''
        deprecated: false
        demo: account/update-phone-verification.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/account/update-phone-verification.md
        rate-limit: 10
        rate-time: 3600
        rate-key: userId:{param-userId}
        scope: public
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/browsers/{code}:
    get:
      tags:
        - avatars
      summary: Get browser icon
      operationId: Avatars_getBrowserIcon
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        You can use this endpoint to show different browser icons to your users.
        The code argument receives the browser code as it appears in your user
        [GET
        /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions)
        endpoint. Use width, height and quality arguments to change the output
        settings.


        When one dimension is specified and the other is 0, the image is scaled
        with preserved aspect ratio. If both dimensions are 0, the API provides
        an image at source quality. If dimensions are not specified, the default
        size of image returned is 100x100px.
      parameters:
        - description: Browser Code.
          name: code
          required: true
          schema:
            type: string
            x-example: aa
            enum:
              - aa
              - an
              - ch
              - ci
              - cm
              - cr
              - ff
              - sf
              - mf
              - ps
              - oi
              - om
              - op
              - 'on'
            x-enum-name: Browser
            x-enum-keys:
              - Avant Browser
              - Android WebView Beta
              - Google Chrome
              - Google Chrome (iOS)
              - Google Chrome (Mobile)
              - Chromium
              - Mozilla Firefox
              - Safari
              - Mobile Safari
              - Microsoft Edge
              - Microsoft Edge (iOS)
              - Opera Mini
              - Opera
              - Opera (Next)
          in: path
        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.
          name: width
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.
          name: height
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: Image quality. Pass an integer between 0 to 100. Defaults to 100.
          name: quality
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getBrowser
        weight: 59
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-browser.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-browser.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/credit-cards/{code}:
    get:
      tags:
        - avatars
      summary: Get credit card icon
      operationId: Avatars_getCreditCardIcon
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        The credit card endpoint will return you the icon of the credit card
        provider you need. Use width, height and quality arguments to change the
        output settings.


        When one dimension is specified and the other is 0, the image is scaled
        with preserved aspect ratio. If both dimensions are 0, the API provides
        an image at source quality. If dimensions are not specified, the default
        size of image returned is 100x100px.
      parameters:
        - description: >-
            Credit Card Code. Possible values: amex, argencard, cabal, censosud,
            diners, discover, elo, hipercard, jcb, mastercard, naranja,
            targeta-shopping, union-china-pay, visa, mir, maestro.
          name: code
          required: true
          schema:
            type: string
            x-example: amex
            enum:
              - amex
              - argencard
              - cabal
              - censosud
              - diners
              - discover
              - elo
              - hipercard
              - jcb
              - mastercard
              - naranja
              - targeta-shopping
              - union-china-pay
              - visa
              - mir
              - maestro
            x-enum-name: CreditCard
            x-enum-keys:
              - American Express
              - Argencard
              - Cabal
              - Consosud
              - Diners Club
              - Discover
              - Elo
              - Hipercard
              - JCB
              - Mastercard
              - Naranja
              - Tarjeta Shopping
              - Union China Pay
              - Visa
              - MIR
              - Maestro
          in: path
        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.
          name: width
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.
          name: height
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: Image quality. Pass an integer between 0 to 100. Defaults to 100.
          name: quality
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getCreditCard
        weight: 58
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-credit-card.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-credit-card.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/favicon:
    get:
      tags:
        - avatars
      summary: Get favicon
      operationId: Avatars_getFavicon
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Use this endpoint to fetch the favorite icon (AKA favicon) of any remote
        website URL.
      parameters:
        - description: Website URL which you want to fetch the favicon from.
          name: url
          required: true
          schema:
            type: string
            format: url
            x-example: https://example.com
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getFavicon
        weight: 62
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-favicon.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-favicon.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/flags/{code}:
    get:
      tags:
        - avatars
      summary: Get country flag
      operationId: Avatars_getFlagByCode
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        You can use this endpoint to show different country flags icons to your
        users. The code argument receives the 2 letter country code. Use width,
        height and quality arguments to change the output settings. Country
        codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1)
        standard.


        When one dimension is specified and the other is 0, the image is scaled
        with preserved aspect ratio. If both dimensions are 0, the API provides
        an image at source quality. If dimensions are not specified, the default
        size of image returned is 100x100px.
      parameters:
        - description: Country Code. ISO Alpha-2 country code format.
          name: code
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ao
              - al
              - ad
              - ae
              - ar
              - am
              - ag
              - au
              - at
              - az
              - bi
              - be
              - bj
              - bf
              - bd
              - bg
              - bh
              - bs
              - ba
              - by
              - bz
              - bo
              - br
              - bb
              - bn
              - bt
              - bw
              - cf
              - ca
              - ch
              - cl
              - cn
              - ci
              - cm
              - cd
              - cg
              - co
              - km
              - cv
              - cr
              - cu
              - cy
              - cz
              - de
              - dj
              - dm
              - dk
              - do
              - dz
              - ec
              - eg
              - er
              - es
              - ee
              - et
              - fi
              - fj
              - fr
              - fm
              - ga
              - gb
              - ge
              - gh
              - gn
              - gm
              - gw
              - gq
              - gr
              - gd
              - gt
              - gy
              - hn
              - hr
              - ht
              - hu
              - id
              - in
              - ie
              - ir
              - iq
              - is
              - il
              - it
              - jm
              - jo
              - jp
              - kz
              - ke
              - kg
              - kh
              - ki
              - kn
              - kr
              - kw
              - la
              - lb
              - lr
              - ly
              - lc
              - li
              - lk
              - ls
              - lt
              - lu
              - lv
              - ma
              - mc
              - md
              - mg
              - mv
              - mx
              - mh
              - mk
              - ml
              - mt
              - mm
              - me
              - mn
              - mz
              - mr
              - mu
              - mw
              - my
              - na
              - ne
              - ng
              - ni
              - nl
              - 'no'
              - np
              - nr
              - nz
              - om
              - pk
              - pa
              - pe
              - ph
              - pw
              - pg
              - pl
              - kp
              - pt
              - py
              - qa
              - ro
              - ru
              - rw
              - sa
              - sd
              - sn
              - sg
              - sb
              - sl
              - sv
              - sm
              - so
              - rs
              - ss
              - st
              - sr
              - sk
              - si
              - se
              - sz
              - sc
              - sy
              - td
              - tg
              - th
              - tj
              - tm
              - tl
              - to
              - tt
              - tn
              - tr
              - tv
              - tz
              - ug
              - ua
              - uy
              - us
              - uz
              - va
              - vc
              - ve
              - vn
              - vu
              - ws
              - ye
              - za
              - zm
              - zw
            x-enum-name: Flag
            x-enum-keys:
              - Afghanistan
              - Angola
              - Albania
              - Andorra
              - United Arab Emirates
              - Argentina
              - Armenia
              - Antigua and Barbuda
              - Australia
              - Austria
              - Azerbaijan
              - Burundi
              - Belgium
              - Benin
              - Burkina Faso
              - Bangladesh
              - Bulgaria
              - Bahrain
              - Bahamas
              - Bosnia and Herzegovina
              - Belarus
              - Belize
              - Bolivia
              - Brazil
              - Barbados
              - Brunei Darussalam
              - Bhutan
              - Botswana
              - Central African Republic
              - Canada
              - Switzerland
              - Chile
              - China
              - Côte d'Ivoire
              - Cameroon
              - Democratic Republic of the Congo
              - Republic of the Congo
              - Colombia
              - Comoros
              - Cape Verde
              - Costa Rica
              - Cuba
              - Cyprus
              - Czech Republic
              - Germany
              - Djibouti
              - Dominica
              - Denmark
              - Dominican Republic
              - Algeria
              - Ecuador
              - Egypt
              - Eritrea
              - Spain
              - Estonia
              - Ethiopia
              - Finland
              - Fiji
              - France
              - Micronesia (Federated States of)
              - Gabon
              - United Kingdom
              - Georgia
              - Ghana
              - Guinea
              - Gambia
              - Guinea-Bissau
              - Equatorial Guinea
              - Greece
              - Grenada
              - Guatemala
              - Guyana
              - Honduras
              - Croatia
              - Haiti
              - Hungary
              - Indonesia
              - India
              - Ireland
              - Iran (Islamic Republic of)
              - Iraq
              - Iceland
              - Israel
              - Italy
              - Jamaica
              - Jordan
              - Japan
              - Kazakhstan
              - Kenya
              - Kyrgyzstan
              - Cambodia
              - Kiribati
              - Saint Kitts and Nevis
              - South Korea
              - Kuwait
              - Lao People's Democratic Republic
              - Lebanon
              - Liberia
              - Libya
              - Saint Lucia
              - Liechtenstein
              - Sri Lanka
              - Lesotho
              - Lithuania
              - Luxembourg
              - Latvia
              - Morocco
              - Monaco
              - Moldova
              - Madagascar
              - Maldives
              - Mexico
              - Marshall Islands
              - North Macedonia
              - Mali
              - Malta
              - Myanmar
              - Montenegro
              - Mongolia
              - Mozambique
              - Mauritania
              - Mauritius
              - Malawi
              - Malaysia
              - Namibia
              - Niger
              - Nigeria
              - Nicaragua
              - Netherlands
              - Norway
              - Nepal
              - Nauru
              - New Zealand
              - Oman
              - Pakistan
              - Panama
              - Peru
              - Philippines
              - Palau
              - Papua New Guinea
              - Poland
              - North Korea
              - Portugal
              - Paraguay
              - Qatar
              - Romania
              - Russia
              - Rwanda
              - Saudi Arabia
              - Sudan
              - Senegal
              - Singapore
              - Solomon Islands
              - Sierra Leone
              - El Salvador
              - San Marino
              - Somalia
              - Serbia
              - South Sudan
              - Sao Tome and Principe
              - Suriname
              - Slovakia
              - Slovenia
              - Sweden
              - Eswatini
              - Seychelles
              - Syria
              - Chad
              - Togo
              - Thailand
              - Tajikistan
              - Turkmenistan
              - Timor-Leste
              - Tonga
              - Trinidad and Tobago
              - Tunisia
              - Turkey
              - Tuvalu
              - Tanzania
              - Uganda
              - Ukraine
              - Uruguay
              - United States
              - Uzbekistan
              - Vatican City
              - Saint Vincent and the Grenadines
              - Venezuela
              - Vietnam
              - Vanuatu
              - Samoa
              - Yemen
              - South Africa
              - Zambia
              - Zimbabwe
          in: path
        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.
          name: width
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.
          name: height
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: Image quality. Pass an integer between 0 to 100. Defaults to 100.
          name: quality
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getFlag
        weight: 60
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-flag.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-flag.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/image:
    get:
      tags:
        - avatars
      summary: Get image from URL
      operationId: Avatars_getImageUrlAndCrop
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Use this endpoint to fetch a remote image URL and crop it to any image
        size you want. This endpoint is very useful if you need to crop and
        display remote images in your app or in case you want to make sure a 3rd
        party image is properly served using a TLS protocol.


        When one dimension is specified and the other is 0, the image is scaled
        with preserved aspect ratio. If both dimensions are 0, the API provides
        an image at source quality. If dimensions are not specified, the default
        size of image returned is 400x400px.
      parameters:
        - description: Image URL which you want to crop.
          name: url
          required: true
          schema:
            type: string
            format: url
            x-example: https://example.com
          in: query
        - description: >-
            Resize preview image width, Pass an integer between 0 to 2000.
            Defaults to 400.
          name: width
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 400
          in: query
        - description: >-
            Resize preview image height, Pass an integer between 0 to 2000.
            Defaults to 400.
          name: height
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 400
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getImage
        weight: 61
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-image.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-image.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/initials:
    get:
      tags:
        - avatars
      summary: Get user initials
      operationId: Avatars_getUserInitials
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Use this endpoint to show your user initials avatar icon on your website
        or app. By default, this route will try to print your logged-in user
        name or email initials. You can also overwrite the user name if you pass
        the 'name' parameter. If no name is given and no user is logged, an
        empty avatar will be returned.


        You can use the color and background params to change the avatar colors.
        By default, a random theme will be selected. The random theme will
        persist for the user's initials when reloading the same theme will
        always return for the same initials.


        When one dimension is specified and the other is 0, the image is scaled
        with preserved aspect ratio. If both dimensions are 0, the API provides
        an image at source quality. If dimensions are not specified, the default
        size of image returned is 100x100px.
      parameters:
        - description: >-
            Full Name. When empty, current user name or email will be used. Max
            length: 128 chars.
          name: name
          required: false
          schema:
            type: string
            x-example: <NAME>
            default: ''
          in: query
        - description: Image width. Pass an integer between 0 to 2000. Defaults to 100.
          name: width
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 500
          in: query
        - description: Image height. Pass an integer between 0 to 2000. Defaults to 100.
          name: height
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 500
          in: query
        - description: >-
            Changes background color. By default a random color will be picked
            and stay will persistent to the given name.
          name: background
          required: false
          schema:
            type: string
            default: ''
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getInitials
        weight: 64
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-initials.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-initials.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /avatars/qr:
    get:
      tags:
        - avatars
      summary: Get QR code
      operationId: Avatars_generateQrCode
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Converts a given plain text to a QR code image. You can use the query
        parameters to change the size and style of the resulting image.
      parameters:
        - description: Plain text to be converted to QR code image.
          name: text
          required: true
          schema:
            type: string
            x-example: <TEXT>
          in: query
        - description: QR code size. Pass an integer between 1 to 1000. Defaults to 400.
          name: size
          required: false
          schema:
            type: integer
            format: int32
            x-example: 1
            default: 400
          in: query
        - description: Margin from edge. Pass an integer between 0 to 10. Defaults to 1.
          name: margin
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 1
          in: query
        - description: >-
            Return resulting image with 'Content-Disposition: attachment '
            headers for the browser to start downloading it. Pass 0 for no
            header, or 1 for otherwise. Default value is set to 0.
          name: download
          required: false
          schema:
            type: boolean
            x-example: false
            default: false
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getQR
        weight: 63
        cookies: false
        type: location
        deprecated: false
        demo: avatars/get-q-r.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/avatars/get-qr.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: avatars.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /console/assistant:
    post:
      tags:
        - assistant
      summary: Ask Query
      operationId: Assistant_askQuery
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantAskQueryRequest'
      responses:
        '200':
          description: File
      x-appwrite:
        method: chat
        weight: 320
        cookies: false
        type: ''
        deprecated: false
        demo: assistant/chat.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/assistant/chat.md
        rate-limit: 15
        rate-time: 3600
        rate-key: userId:{userId}
        scope: assistant.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /console/variables:
    get:
      tags:
        - console
      summary: Get variables
      operationId: Console_listVariables
      security:
        - Project: []
      description: Get all Environment Variables that are relevant for the console.
      responses:
        '200':
          description: Console Variables
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/consoleVariables'
      x-appwrite:
        method: variables
        weight: 319
        cookies: false
        type: ''
        deprecated: false
        demo: console/variables.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/console/variables.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases:
    get:
      tags:
        - databases
      summary: List databases
      operationId: Databases_listAllDatabases
      security:
        - Project: []
          Key: []
      description: >-
        Get a list of all databases from the current Appwrite project. You can
        use the search parameter to filter your results.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Databases List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/databaseList'
      x-appwrite:
        method: list
        weight: 69
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/list.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: databases.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - databases
      summary: Create database
      operationId: Databases_createNewDatabase
      security:
        - Project: []
          Key: []
      description: |
        Create a new Database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateNewDatabaseRequest'
      responses:
        '201':
          description: Database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/database'
      x-appwrite:
        method: create
        weight: 68
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: databases.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/usage:
    get:
      tags:
        - databases
      summary: Get databases usage stats
      operationId: Databases_getUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: '`Date range.'
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: DatabaseUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: UsageDatabases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageDatabases'
      x-appwrite:
        method: getUsage
        weight: 113
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}:
    get:
      tags:
        - databases
      summary: Get database
      operationId: Databases_getById
      security:
        - Project: []
          Key: []
      description: >-
        Get a database by its unique ID. This endpoint response returns a JSON
        object with the database metadata.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
      responses:
        '200':
          description: Database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/database'
      x-appwrite:
        method: get
        weight: 70
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: databases.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - databases
      summary: Update database
      operationId: Databases_updateById
      security:
        - Project: []
          Key: []
      description: Update a database by its unique ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateByIdRequest'
      responses:
        '200':
          description: Database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/database'
      x-appwrite:
        method: update
        weight: 72
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: databases.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - databases
      summary: Delete database
      operationId: Databases_deleteById
      security:
        - Project: []
          Key: []
      description: >-
        Delete a database by its unique ID. Only API keys with with
        databases.write scope can delete a database.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 73
        cookies: false
        type: ''
        deprecated: false
        demo: databases/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/delete.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: databases.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections:
    get:
      tags:
        - databases
      summary: List collections
      operationId: Databases_listCollections
      security:
        - Project: []
          Key: []
      description: >-
        Get a list of all collections that belong to the provided databaseId.
        You can use the search parameter to filter your results.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, enabled, documentSecurity
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Collections List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionList'
      x-appwrite:
        method: listCollections
        weight: 75
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-collections.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/list-collections.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - databases
      summary: Create collection
      operationId: Databases_createCollection
      security:
        - Project: []
          Key: []
      description: >-
        Create a new Collection. Before using this route, you should create a
        new database resource using either a [server
        integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)
        API or directly from your database console.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateCollectionRequest'
      responses:
        '201':
          description: Collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
      x-appwrite:
        method: createCollection
        weight: 74
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-collection.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-collection.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}:
    get:
      tags:
        - databases
      summary: Get collection
      operationId: Databases_getCollectionById
      security:
        - Project: []
          Key: []
      description: >-
        Get a collection by its unique ID. This endpoint response returns a JSON
        object with the collection metadata.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      responses:
        '200':
          description: Collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
      x-appwrite:
        method: getCollection
        weight: 76
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-collection.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-collection.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - databases
      summary: Update collection
      operationId: Databases_updateCollectionById
      security:
        - Project: []
          Key: []
      description: Update a collection by its unique ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateCollectionByIdRequest'
      responses:
        '200':
          description: Collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
      x-appwrite:
        method: updateCollection
        weight: 78
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-collection.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-collection.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - databases
      summary: Delete collection
      operationId: Databases_deleteCollectionById
      security:
        - Project: []
          Key: []
      description: >-
        Delete a collection by its unique ID. Only users with write permissions
        have access to delete this resource.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteCollection
        weight: 79
        cookies: false
        type: ''
        deprecated: false
        demo: databases/delete-collection.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/delete-collection.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes:
    get:
      tags:
        - databases
      summary: List attributes
      operationId: Databases_listAttributes
      security:
        - Project: []
          Key: []
      description: List attributes in the collection.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: key, type, size, required, array, status,
            error
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Attributes List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeList'
      x-appwrite:
        method: listAttributes
        weight: 90
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-attributes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/list-attributes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/boolean:
    post:
      tags:
        - databases
      summary: Create boolean attribute
      operationId: Databases_createBooleanAttribute
      security:
        - Project: []
          Key: []
      description: |
        Create a boolean attribute.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateBooleanAttributeRequest'
      responses:
        '202':
          description: AttributeBoolean
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeBoolean'
      x-appwrite:
        method: createBooleanAttribute
        weight: 87
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-boolean-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-boolean-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}:
    patch:
      tags:
        - databases
      summary: Update boolean attribute
      operationId: Databases_updateBooleanAttribute
      security:
        - Project: []
          Key: []
      description: >-
        Update a boolean attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateBooleanAttributeRequest'
      responses:
        '200':
          description: AttributeBoolean
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeBoolean'
      x-appwrite:
        method: updateBooleanAttribute
        weight: 99
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-boolean-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-boolean-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/datetime:
    post:
      tags:
        - databases
      summary: Create datetime attribute
      operationId: Databases_createDatetimeAttribute
      security:
        - Project: []
          Key: []
      description: Create a date time attribute according to the ISO 8601 standard.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateDatetimeAttributeRequest'
      responses:
        '202':
          description: AttributeDatetime
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeDatetime'
      x-appwrite:
        method: createDatetimeAttribute
        weight: 88
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-datetime-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-datetime-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}:
    patch:
      tags:
        - databases
      summary: Update dateTime attribute
      operationId: Databases_patchDateTimeAttribute
      security:
        - Project: []
          Key: []
      description: >-
        Update a date time attribute. Changing the `default` value will not
        update already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesPatchDateTimeAttributeRequest'
      responses:
        '200':
          description: AttributeDatetime
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeDatetime'
      x-appwrite:
        method: updateDatetimeAttribute
        weight: 100
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-datetime-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-datetime-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/email:
    post:
      tags:
        - databases
      summary: Create email attribute
      operationId: Databases_createEmailAttribute
      security:
        - Project: []
          Key: []
      description: |
        Create an email attribute.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateEmailAttributeRequest'
      responses:
        '202':
          description: AttributeEmail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeEmail'
      x-appwrite:
        method: createEmailAttribute
        weight: 81
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-email-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-email-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/email/{key}:
    patch:
      tags:
        - databases
      summary: Update email attribute
      operationId: Databases_updateEmailAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update an email attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateEmailAttributeRequest'
      responses:
        '200':
          description: AttributeEmail
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeEmail'
      x-appwrite:
        method: updateEmailAttribute
        weight: 93
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-email-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-email-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/enum:
    post:
      tags:
        - databases
      summary: Create enum attribute
      operationId: Databases_createEnumAttribute
      security:
        - Project: []
          Key: []
      description: >
        Create an enumeration attribute. The `elements` param acts as a
        white-list of accepted values for this attribute. 
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateEnumAttributeRequest'
      responses:
        '202':
          description: AttributeEnum
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeEnum'
      x-appwrite:
        method: createEnumAttribute
        weight: 82
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-enum-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-attribute-enum.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}:
    patch:
      tags:
        - databases
      summary: Update enum attribute
      operationId: Databases_updateEnumAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update an enum attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateEnumAttributeRequest'
      responses:
        '200':
          description: AttributeEnum
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeEnum'
      x-appwrite:
        method: updateEnumAttribute
        weight: 94
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-enum-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-enum-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/float:
    post:
      tags:
        - databases
      summary: Create float attribute
      operationId: Databases_createFloatAttribute
      security:
        - Project: []
          Key: []
      description: >
        Create a float attribute. Optionally, minimum and maximum values can be
        provided.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateFloatAttributeRequest'
      responses:
        '202':
          description: AttributeFloat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeFloat'
      x-appwrite:
        method: createFloatAttribute
        weight: 86
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-float-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-float-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/float/{key}:
    patch:
      tags:
        - databases
      summary: Update float attribute
      operationId: Databases_updateFloatAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update a float attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateFloatAttributeRequest'
      responses:
        '200':
          description: AttributeFloat
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeFloat'
      x-appwrite:
        method: updateFloatAttribute
        weight: 98
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-float-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-float-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/integer:
    post:
      tags:
        - databases
      summary: Create integer attribute
      operationId: Databases_createIntegerAttribute
      security:
        - Project: []
          Key: []
      description: >
        Create an integer attribute. Optionally, minimum and maximum values can
        be provided.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateIntegerAttributeRequest'
      responses:
        '202':
          description: AttributeInteger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeInteger'
      x-appwrite:
        method: createIntegerAttribute
        weight: 85
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-integer-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-integer-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}:
    patch:
      tags:
        - databases
      summary: Update integer attribute
      operationId: Databases_updateIntegerAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update an integer attribute. Changing the `default` value will not
        update already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateIntegerAttributeRequest'
      responses:
        '200':
          description: AttributeInteger
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeInteger'
      x-appwrite:
        method: updateIntegerAttribute
        weight: 97
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-integer-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-integer-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/ip:
    post:
      tags:
        - databases
      summary: Create IP address attribute
      operationId: Databases_createIpAttribute
      security:
        - Project: []
          Key: []
      description: |
        Create IP address attribute.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateIpAttributeRequest'
      responses:
        '202':
          description: AttributeIP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeIp'
      x-appwrite:
        method: createIpAttribute
        weight: 83
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-ip-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-ip-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}:
    patch:
      tags:
        - databases
      summary: Update IP address attribute
      operationId: Databases_updateIpAddressAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update an ip attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateIpAddressAttributeRequest'
      responses:
        '200':
          description: AttributeIP
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeIp'
      x-appwrite:
        method: updateIpAttribute
        weight: 95
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-ip-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-ip-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/relationship:
    post:
      tags:
        - databases
      summary: Create relationship attribute
      operationId: Databases_createRelationshipAttribute
      security:
        - Project: []
          Key: []
      description: >
        Create relationship attribute. [Learn more about relationship
        attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateRelationshipAttributeRequest'
      responses:
        '202':
          description: AttributeRelationship
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeRelationship'
      x-appwrite:
        method: createRelationshipAttribute
        weight: 89
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-relationship-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-relationship-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/string:
    post:
      tags:
        - databases
      summary: Create string attribute
      operationId: Databases_createStringAttribute
      security:
        - Project: []
          Key: []
      description: |
        Create a string attribute.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateStringAttributeRequest'
      responses:
        '202':
          description: AttributeString
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeString'
      x-appwrite:
        method: createStringAttribute
        weight: 80
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-string-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-string-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/string/{key}:
    patch:
      tags:
        - databases
      summary: Update string attribute
      operationId: Databases_updateStringAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update a string attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateStringAttributeRequest'
      responses:
        '200':
          description: AttributeString
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeString'
      x-appwrite:
        method: updateStringAttribute
        weight: 92
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-string-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-string-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/url:
    post:
      tags:
        - databases
      summary: Create URL attribute
      operationId: Databases_createUrlAttribute
      security:
        - Project: []
          Key: []
      description: |
        Create a URL attribute.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateUrlAttributeRequest'
      responses:
        '202':
          description: AttributeURL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeUrl'
      x-appwrite:
        method: createUrlAttribute
        weight: 84
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-url-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-url-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/url/{key}:
    patch:
      tags:
        - databases
      summary: Update URL attribute
      operationId: Databases_updateUrlAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update an url attribute. Changing the `default` value will not update
        already existing documents.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateUrlAttributeRequest'
      responses:
        '200':
          description: AttributeURL
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeUrl'
      x-appwrite:
        method: updateUrlAttribute
        weight: 96
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-url-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-url-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/{key}:
    get:
      tags:
        - databases
      summary: Get attribute
      operationId: Databases_getAttributeById
      security:
        - Project: []
          Key: []
      description: Get attribute by ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      responses:
        '200':
          description: >-
            AttributeBoolean, or AttributeInteger, or AttributeFloat, or
            AttributeEmail, or AttributeEnum, or AttributeURL, or AttributeIP,
            or AttributeDatetime, or AttributeRelationship, or AttributeString
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabasesGetAttributeByIdResponse'
      x-appwrite:
        method: getAttribute
        weight: 91
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - databases
      summary: Delete attribute
      operationId: Databases_deleteAttributeById
      security:
        - Project: []
          Key: []
      description: Deletes an attribute.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteAttribute
        weight: 102
        cookies: false
        type: ''
        deprecated: false
        demo: databases/delete-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/delete-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship:
    patch:
      tags:
        - databases
      summary: Update relationship attribute
      operationId: Databases_updateRelationshipAttribute
      security:
        - Project: []
          Key: []
      description: >
        Update relationship attribute. [Learn more about relationship
        attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Attribute Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateRelationshipAttributeRequest'
      responses:
        '200':
          description: AttributeRelationship
          content:
            '':
              schema:
                $ref: '#/components/schemas/attributeRelationship'
      x-appwrite:
        method: updateRelationshipAttribute
        weight: 101
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-relationship-attribute.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-relationship-attribute.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/documents:
    get:
      tags:
        - databases
      summary: List documents
      operationId: Databases_getDocuments
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a list of all the user's documents in a given collection. You can
        use the query params to filter your results.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long.
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Documents List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documentList'
      x-appwrite:
        method: listDocuments
        weight: 108
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-documents.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/list-documents.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: documents.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /databases/{databaseId}/collections/{collectionId}/documents
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - databases
      summary: Create document
      operationId: Databases_createDocument
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Create a new Document. Before using this route, you should create a new
        collection resource using either a [server
        integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)
        API or directly from your database console.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
            Make sure to define attributes before creating documents.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateDocumentRequest'
      responses:
        '201':
          description: Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
      x-appwrite:
        method: createDocument
        weight: 107
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-document.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-document.md
        rate-limit: 120
        rate-time: 60
        rate-key: ip:{ip},method:{method},url:{url},userId:{userId}
        scope: documents.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /databases/{databaseId}/collections/{collectionId}/documents
        offline-key: '{documentId}'
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/documents/{documentId}:
    get:
      tags:
        - databases
      summary: Get document
      operationId: Databases_getDocumentById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a document by its unique ID. This endpoint response returns a JSON
        object with the document data.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Document ID.
          name: documentId
          required: true
          schema:
            type: string
            x-example: <DOCUMENT_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long.
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
      x-appwrite:
        method: getDocument
        weight: 109
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-document.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-document.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: documents.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /databases/{databaseId}/collections/{collectionId}/documents
        offline-key: '{documentId}'
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - databases
      summary: Update document
      operationId: Databases_updateDocumentById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Update a document by its unique ID. Using the patch method you can pass
        only specific fields that will get updated.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Document ID.
          name: documentId
          required: true
          schema:
            type: string
            x-example: <DOCUMENT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesUpdateDocumentByIdRequest'
      responses:
        '200':
          description: Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
      x-appwrite:
        method: updateDocument
        weight: 111
        cookies: false
        type: ''
        deprecated: false
        demo: databases/update-document.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/update-document.md
        rate-limit: 120
        rate-time: 60
        rate-key: ip:{ip},method:{method},url:{url},userId:{userId}
        scope: documents.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /databases/{databaseId}/collections/{collectionId}/documents
        offline-key: '{documentId}'
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - databases
      summary: Delete document
      operationId: Databases_deleteDocumentById
      security:
        - Project: []
          Key: []
          JWT: []
      description: Delete a document by its unique ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Document ID.
          name: documentId
          required: true
          schema:
            type: string
            x-example: <DOCUMENT_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteDocument
        weight: 112
        cookies: false
        type: ''
        deprecated: false
        demo: databases/delete-document.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/delete-document.md
        rate-limit: 60
        rate-time: 60
        rate-key: ip:{ip},method:{method},url:{url},userId:{userId}
        scope: documents.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /databases/{databaseId}/collections/{collectionId}/documents
        offline-key: '{documentId}'
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/documents/{documentId}/logs:
    get:
      tags:
        - databases
      summary: List document logs
      operationId: Databases_listDocumentLogs
      security:
        - Project: []
      description: Get the document activity logs list by its unique ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Document ID.
          name: documentId
          required: true
          schema:
            type: string
            x-example: <DOCUMENT_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listDocumentLogs
        weight: 110
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-document-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-document-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: documents.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/indexes:
    get:
      tags:
        - databases
      summary: List indexes
      operationId: Databases_listCollectionIndexes
      security:
        - Project: []
          Key: []
      description: List indexes in the collection.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: key, type, status, attributes, error
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Indexes List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexList'
      x-appwrite:
        method: listIndexes
        weight: 104
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-indexes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/list-indexes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - databases
      summary: Create index
      operationId: Databases_createIndexOnAttributes
      security:
        - Project: []
          Key: []
      description: >-
        Creates an index on the attributes listed. Your index should include all
        the attributes you will query in a single request.

        Attributes can be `key`, `fulltext`, and `unique`.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabasesCreateIndexOnAttributesRequest'
      responses:
        '202':
          description: Index
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/index'
      x-appwrite:
        method: createIndex
        weight: 103
        cookies: false
        type: ''
        deprecated: false
        demo: databases/create-index.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/create-index.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/indexes/{key}:
    get:
      tags:
        - databases
      summary: Get index
      operationId: Databases_getIndexById
      security:
        - Project: []
          Key: []
      description: Get index by ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Index Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      responses:
        '200':
          description: Index
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/index'
      x-appwrite:
        method: getIndex
        weight: 105
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-index.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-index.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - databases
      summary: Delete index
      operationId: Databases_deleteIndexByKey
      security:
        - Project: []
          Key: []
      description: Delete an index.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Collection ID. You can create a new collection using the Database
            service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: Index Key.
          name: key
          required: true
          schema:
            type: string
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteIndex
        weight: 106
        cookies: false
        type: ''
        deprecated: false
        demo: databases/delete-index.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/delete-index.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/logs:
    get:
      tags:
        - databases
      summary: List collection logs
      operationId: Databases_listCollectionLogs
      security:
        - Project: []
      description: Get the collection activity logs list by its unique ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listCollectionLogs
        weight: 77
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-collection-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-collection-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/collections/{collectionId}/usage:
    get:
      tags:
        - databases
      summary: Get collection usage stats
      operationId: Databases_getCollectionUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: Date range.
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: DatabaseUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
        - description: Collection ID.
          name: collectionId
          required: true
          schema:
            type: string
            x-example: <COLLECTION_ID>
          in: path
      responses:
        '200':
          description: UsageCollection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageCollection'
      x-appwrite:
        method: getCollectionUsage
        weight: 115
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-collection-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/logs:
    get:
      tags:
        - databases
      summary: List database logs
      operationId: Databases_listLogs
      security:
        - Project: []
      description: Get the database activity logs list by its unique ID.
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listLogs
        weight: 71
        cookies: false
        type: ''
        deprecated: false
        demo: databases/list-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/databases/get-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: databases.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /databases/{databaseId}/usage:
    get:
      tags:
        - databases
      summary: Get database usage stats
      operationId: Databases_getUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Database ID.
          name: databaseId
          required: true
          schema:
            type: string
            x-example: <DATABASE_ID>
          in: path
        - description: '`Date range.'
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: DatabaseUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: UsageDatabase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageDatabase'
      x-appwrite:
        method: getDatabaseUsage
        weight: 114
        cookies: false
        type: ''
        deprecated: false
        demo: databases/get-database-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: collections.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions:
    get:
      tags:
        - functions
      summary: List functions
      operationId: Functions_listAll
      security:
        - Project: []
          Key: []
      description: >-
        Get a list of all the project's functions. You can use the query params
        to filter your results.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, enabled, runtime, deployment, schedule,
            scheduleNext, schedulePrevious, timeout, entrypoint, commands,
            installationId
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Functions List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/functionList'
      x-appwrite:
        method: list
        weight: 282
        cookies: false
        type: ''
        deprecated: false
        demo: functions/list.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-functions.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - functions
      summary: Create function
      operationId: Functions_createFunction
      security:
        - Project: []
          Key: []
      description: >-
        Create a new function. You can pass a list of
        [permissions](https://appwrite.io/docs/permissions) to allow different
        project users or team with access to execute the function using the
        client API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionsCreateFunctionRequest'
      responses:
        '201':
          description: Function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function'
      x-appwrite:
        method: create
        weight: 281
        cookies: false
        type: ''
        deprecated: false
        demo: functions/create.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-function.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/runtimes:
    get:
      tags:
        - functions
      summary: List runtimes
      operationId: Functions_listRuntimes
      security:
        - Project: []
          Key: []
      description: Get a list of all runtimes that are currently active on your instance.
      responses:
        '200':
          description: Runtimes List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runtimeList'
      x-appwrite:
        method: listRuntimes
        weight: 283
        cookies: false
        type: ''
        deprecated: false
        demo: functions/list-runtimes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-runtimes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/usage:
    get:
      tags:
        - functions
      summary: Get functions usage
      operationId: Functions_getUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Date range.
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: FunctionUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: UsageFunctions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageFunctions'
      x-appwrite:
        method: getUsage
        weight: 286
        cookies: false
        type: ''
        deprecated: false
        demo: functions/get-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}:
    get:
      tags:
        - functions
      summary: Get function
      operationId: Functions_getById
      security:
        - Project: []
          Key: []
      description: Get a function by its unique ID.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      responses:
        '200':
          description: Function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function'
      x-appwrite:
        method: get
        weight: 284
        cookies: false
        type: ''
        deprecated: false
        demo: functions/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-function.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - functions
      summary: Update function
      operationId: Functions_updateById
      security:
        - Project: []
          Key: []
      description: Update function by its unique ID.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionsUpdateByIdRequest'
      responses:
        '200':
          description: Function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function'
      x-appwrite:
        method: update
        weight: 287
        cookies: false
        type: ''
        deprecated: false
        demo: functions/update.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/update-function.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - functions
      summary: Delete function
      operationId: Functions_deleteFunctionById
      security:
        - Project: []
          Key: []
      description: Delete a function by its unique ID.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 290
        cookies: false
        type: ''
        deprecated: false
        demo: functions/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/delete-function.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/deployments:
    get:
      tags:
        - functions
      summary: List deployments
      operationId: Functions_listDeployments
      security:
        - Project: []
          Key: []
      description: >-
        Get a list of all the project's code deployments. You can use the query
        params to filter your results.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: size, buildId, activate, entrypoint, commands
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Deployments List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentList'
      x-appwrite:
        method: listDeployments
        weight: 292
        cookies: false
        type: ''
        deprecated: false
        demo: functions/list-deployments.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-deployments.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - functions
      summary: Create deployment
      operationId: Functions_createDeployment
      security:
        - Project: []
          Key: []
      description: >-
        Create a new function code deployment. Use this endpoint to upload a new
        version of your code function. To execute your newly uploaded code,
        you'll need to update the function's deployment to use your new
        deployment UID.


        This endpoint accepts a tar.gz file compressed with your code. Make sure
        to include any dependencies your code has within the compressed file.
        You can learn more about code packaging in the [Appwrite Cloud Functions
        tutorial](https://appwrite.io/docs/functions).


        Use the "command" param to set the entrypoint used to execute your code.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FunctionsCreateDeploymentRequest'
      responses:
        '202':
          description: Deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
      x-appwrite:
        method: createDeployment
        weight: 291
        cookies: false
        type: ''
        deprecated: false
        demo: functions/create-deployment.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-deployment.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: true
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/deployments/{deploymentId}:
    get:
      tags:
        - functions
      summary: Get deployment
      operationId: Functions_getDeploymentById
      security:
        - Project: []
          Key: []
      description: Get a code deployment by its unique ID.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Deployment ID.
          name: deploymentId
          required: true
          schema:
            type: string
            x-example: <DEPLOYMENT_ID>
          in: path
      responses:
        '200':
          description: Deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deployment'
      x-appwrite:
        method: getDeployment
        weight: 293
        cookies: false
        type: ''
        deprecated: false
        demo: functions/get-deployment.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-deployment.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - functions
      summary: Update function deployment
      operationId: Functions_updateDeploymentByFunctionAndId
      security:
        - Project: []
          Key: []
      description: >-
        Update the function code deployment ID using the unique function ID. Use
        this endpoint to switch the code deployment that should be executed by
        the execution endpoint.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Deployment ID.
          name: deploymentId
          required: true
          schema:
            type: string
            x-example: <DEPLOYMENT_ID>
          in: path
      responses:
        '200':
          description: Function
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function'
      x-appwrite:
        method: updateDeployment
        weight: 289
        cookies: false
        type: ''
        deprecated: false
        demo: functions/update-deployment.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/update-function-deployment.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - functions
      summary: Delete deployment
      operationId: Functions_deleteDeployment
      security:
        - Project: []
          Key: []
      description: Delete a code deployment by its unique ID.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Deployment ID.
          name: deploymentId
          required: true
          schema:
            type: string
            x-example: <DEPLOYMENT_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteDeployment
        weight: 294
        cookies: false
        type: ''
        deprecated: false
        demo: functions/delete-deployment.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/delete-deployment.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/deployments/{deploymentId}/builds/{buildId}:
    post:
      tags:
        - functions
      summary: Create build
      operationId: Functions_retryBuild
      security:
        - Project: []
          Key: []
      description: >-
        Create a new build for an Appwrite Function deployment. This endpoint
        can be used to retry a failed build.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Deployment ID.
          name: deploymentId
          required: true
          schema:
            type: string
            x-example: <DEPLOYMENT_ID>
          in: path
        - description: Build unique ID.
          name: buildId
          required: true
          schema:
            type: string
            x-example: <BUILD_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: createBuild
        weight: 295
        cookies: false
        type: ''
        deprecated: false
        demo: functions/create-build.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-build.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/deployments/{deploymentId}/download:
    get:
      tags:
        - functions
      summary: Download Deployment
      operationId: Functions_downloadDeploymentContents
      security:
        - Project: []
          Key: []
      description: >-
        Get a Deployment's contents by its unique ID. This endpoint supports
        range requests for partial or streaming file download.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Deployment ID.
          name: deploymentId
          required: true
          schema:
            type: string
            x-example: <DEPLOYMENT_ID>
          in: path
      responses:
        '200':
          description: File
      x-appwrite:
        method: downloadDeployment
        weight: 288
        cookies: false
        type: location
        deprecated: false
        demo: functions/download-deployment.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/download-deployment.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/executions:
    get:
      tags:
        - functions
      summary: List executions
      operationId: Functions_listExecutions
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a list of all the current user function execution logs. You can use
        the query params to filter your results.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: trigger, status, responseStatusCode, duration
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Executions List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executionList'
      x-appwrite:
        method: listExecutions
        weight: 297
        cookies: false
        type: ''
        deprecated: false
        demo: functions/list-executions.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-executions.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: execution.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - functions
      summary: Create execution
      operationId: Functions_triggerExecution
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Trigger a function execution. The returned object will return you the
        current execution status. You can ping the `Get Execution` endpoint to
        get updates on the current execution status. Once this endpoint is
        called, your function execution process will start asynchronously.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionsTriggerExecutionRequest'
      responses:
        '201':
          description: Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/execution'
      x-appwrite:
        method: createExecution
        weight: 296
        cookies: false
        type: ''
        deprecated: false
        demo: functions/create-execution.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-execution.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: execution.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/executions/{executionId}:
    get:
      tags:
        - functions
      summary: Get execution
      operationId: Functions_getExecutionLog
      security:
        - Project: []
          Key: []
          JWT: []
      description: Get a function execution log by its unique ID.
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Execution ID.
          name: executionId
          required: true
          schema:
            type: string
            x-example: <EXECUTION_ID>
          in: path
      responses:
        '200':
          description: Execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/execution'
      x-appwrite:
        method: getExecution
        weight: 298
        cookies: false
        type: ''
        deprecated: false
        demo: functions/get-execution.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-execution.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: execution.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/usage:
    get:
      tags:
        - functions
      summary: Get function usage
      operationId: Functions_getFunctionUsage
      security:
        - Project: []
      description: ''
      parameters:
        - description: Function ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Date range.
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: FunctionUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: UsageFunction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageFunction'
      x-appwrite:
        method: getFunctionUsage
        weight: 285
        cookies: false
        type: ''
        deprecated: false
        demo: functions/get-function-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/variables:
    get:
      tags:
        - functions
      summary: List variables
      operationId: Functions_listVariables
      security:
        - Project: []
          Key: []
      description: Get a list of all variables of a specific function.
      parameters:
        - description: Function unique ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      responses:
        '200':
          description: Variables List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variableList'
      x-appwrite:
        method: listVariables
        weight: 300
        cookies: false
        type: ''
        deprecated: false
        demo: functions/list-variables.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/list-variables.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - functions
      summary: Create variable
      operationId: Functions_createVariable
      security:
        - Project: []
          Key: []
      description: >-
        Create a new function environment variable. These variables can be
        accessed in the function at runtime as environment variables.
      parameters:
        - description: Function unique ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionsCreateVariableRequest'
      responses:
        '201':
          description: Variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variable'
      x-appwrite:
        method: createVariable
        weight: 299
        cookies: false
        type: ''
        deprecated: false
        demo: functions/create-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/create-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /functions/{functionId}/variables/{variableId}:
    get:
      tags:
        - functions
      summary: Get variable
      operationId: Functions_getVariableById
      security:
        - Project: []
          Key: []
      description: Get a variable by its unique ID.
      parameters:
        - description: Function unique ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Variable unique ID.
          name: variableId
          required: true
          schema:
            type: string
            x-example: <VARIABLE_ID>
          in: path
      responses:
        '200':
          description: Variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variable'
      x-appwrite:
        method: getVariable
        weight: 301
        cookies: false
        type: ''
        deprecated: false
        demo: functions/get-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/get-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - functions
      summary: Update variable
      operationId: Functions_updateVariableById
      security:
        - Project: []
          Key: []
      description: Update variable by its unique ID.
      parameters:
        - description: Function unique ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Variable unique ID.
          name: variableId
          required: true
          schema:
            type: string
            x-example: <VARIABLE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionsUpdateVariableByIdRequest'
      responses:
        '200':
          description: Variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variable'
      x-appwrite:
        method: updateVariable
        weight: 302
        cookies: false
        type: ''
        deprecated: false
        demo: functions/update-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/update-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - functions
      summary: Delete variable
      operationId: Functions_deleteVariableById
      security:
        - Project: []
          Key: []
      description: Delete a variable by its unique ID.
      parameters:
        - description: Function unique ID.
          name: functionId
          required: true
          schema:
            type: string
            x-example: <FUNCTION_ID>
          in: path
        - description: Variable unique ID.
          name: variableId
          required: true
          schema:
            type: string
            x-example: <VARIABLE_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteVariable
        weight: 303
        cookies: false
        type: ''
        deprecated: false
        demo: functions/delete-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/functions/delete-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: functions.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /graphql:
    post:
      tags:
        - graphql
      summary: GraphQL endpoint
      operationId: Graphql_executeMutation
      security:
        - Project: []
          Key: []
          JWT: []
      description: Execute a GraphQL mutation.
      responses:
        '200':
          description: Any
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/any'
      x-appwrite:
        method: query
        weight: 318
        cookies: false
        type: graphql
        deprecated: false
        demo: graphql/query.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/graphql/post.md
        rate-limit: 60
        rate-time: 60
        rate-key: url:{url},ip:{ip}
        scope: graphql
        platforms:
          - server
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /graphql/mutation:
    post:
      tags:
        - graphql
      summary: GraphQL endpoint
      operationId: Graphql_executeMutation
      security:
        - Project: []
          Key: []
          JWT: []
      description: Execute a GraphQL mutation.
      responses:
        '200':
          description: Any
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/any'
      x-appwrite:
        method: mutation
        weight: 317
        cookies: false
        type: graphql
        deprecated: false
        demo: graphql/mutation.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/graphql/post.md
        rate-limit: 60
        rate-time: 60
        rate-key: url:{url},ip:{ip}
        scope: graphql
        platforms:
          - server
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health:
    get:
      tags:
        - health
      summary: Get HTTP
      operationId: Health_checkAppwriteHttpServer
      security:
        - Project: []
          Key: []
      description: Check the Appwrite HTTP server is up and responsive.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: get
        weight: 124
        cookies: false
        type: ''
        deprecated: false
        demo: health/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/anti-virus:
    get:
      tags:
        - health
      summary: Get antivirus
      operationId: Health_checkAvStatus
      security:
        - Project: []
          Key: []
      description: Check the Appwrite Antivirus server is up and connection is successful.
      responses:
        '200':
          description: Health Antivirus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthAntivirus'
      x-appwrite:
        method: getAntivirus
        weight: 146
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-antivirus.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-storage-anti-virus.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/cache:
    get:
      tags:
        - health
      summary: Get cache
      operationId: Health_checkCacheStatus
      security:
        - Project: []
          Key: []
      description: >-
        Check the Appwrite in-memory cache servers are up and connection is
        successful.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: getCache
        weight: 127
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-cache.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-cache.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/certificate:
    get:
      tags:
        - health
      summary: Get the SSL certificate for a domain
      operationId: Health_getSslCertificate
      security:
        - Project: []
          Key: []
      description: Get the SSL certificate for a domain
      parameters:
        - description: string
          name: domain
          required: false
          schema:
            type: string
          in: query
      responses:
        '200':
          description: Health Certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCertificate'
      x-appwrite:
        method: getCertificate
        weight: 133
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-certificate.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-certificate.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/db:
    get:
      tags:
        - health
      summary: Get DB
      operationId: Health_checkDatabaseStatus
      security:
        - Project: []
          Key: []
      description: Check the Appwrite database servers are up and connection is successful.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: getDB
        weight: 126
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-d-b.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-db.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/pubsub:
    get:
      tags:
        - health
      summary: Get pubsub
      operationId: Health_pubsubGet
      security:
        - Project: []
          Key: []
      description: Check the Appwrite pub-sub servers are up and connection is successful.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: getPubSub
        weight: 129
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-pub-sub.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-pubsub.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue:
    get:
      tags:
        - health
      summary: Get queue
      operationId: Health_checkQueueStatus
      security:
        - Project: []
          Key: []
      description: >-
        Check the Appwrite queue messaging servers are up and connection is
        successful.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: getQueue
        weight: 128
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/builds:
    get:
      tags:
        - health
      summary: Get builds queue
      operationId: Health_getBuildsQueue
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of builds that are waiting to be processed in the
        Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueBuilds
        weight: 135
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-builds.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-builds.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/certificates:
    get:
      tags:
        - health
      summary: Get certificates queue
      operationId: Health_certificatesQueueCount
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of certificates that are waiting to be issued against
        [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue
        server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueCertificates
        weight: 134
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-certificates.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-certificates.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/databases:
    get:
      tags:
        - health
      summary: Get databases queue
      operationId: Health_getDatabasesQueue
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of database changes that are waiting to be processed in
        the Appwrite internal queue server.
      parameters:
        - description: Queue name for which to check the queue size
          name: name
          required: false
          schema:
            type: string
            x-example: <NAME>
            default: database_db_main
          in: query
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueDatabases
        weight: 136
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-databases.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-databases.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/deletes:
    get:
      tags:
        - health
      summary: Get deletes queue
      operationId: Health_getQueueDeletes
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of background destructive changes that are waiting to be
        processed in the Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueDeletes
        weight: 137
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-deletes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-deletes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/failed/{name}:
    get:
      tags:
        - health
      summary: Get number of failed queue jobs
      operationId: Health_getFailedJobs
      security:
        - Project: []
          Key: []
      description: |
        Returns the amount of failed jobs in a given queue.
      parameters:
        - description: The name of the queue
          name: name
          required: true
          schema:
            type: string
            x-example: v1-database
            enum:
              - v1-database
              - v1-deletes
              - v1-audits
              - v1-mails
              - v1-functions
              - v1-usage
              - v1-usage-dump
              - webhooksv1
              - v1-certificates
              - v1-builds
              - v1-messaging
              - v1-migrations
              - hamsterv1
            x-enum-name: null
            x-enum-keys: []
          in: path
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getFailedJobs
        weight: 147
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-failed-jobs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-failed-queue-jobs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/functions:
    get:
      tags:
        - health
      summary: Get functions queue
      operationId: Health_functionsQueueCount
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of function executions that are waiting to be processed
        in the Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueFunctions
        weight: 141
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-functions.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-functions.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/logs:
    get:
      tags:
        - health
      summary: Get logs queue
      operationId: Health_getQueueLogs
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of logs that are waiting to be processed in the Appwrite
        internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueLogs
        weight: 132
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/mails:
    get:
      tags:
        - health
      summary: Get mails queue
      operationId: Health_getMailsQueue
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of mails that are waiting to be processed in the Appwrite
        internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueMails
        weight: 138
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-mails.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-mails.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/messaging:
    get:
      tags:
        - health
      summary: Get messaging queue
      operationId: Health_getMessagingQueue
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of messages that are waiting to be processed in the
        Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueMessaging
        weight: 139
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-messaging.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-messaging.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/migrations:
    get:
      tags:
        - health
      summary: Get migrations queue
      operationId: Health_getMigrationsQueue
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of migrations that are waiting to be processed in the
        Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueMigrations
        weight: 140
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-migrations.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-migrations.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/usage:
    get:
      tags:
        - health
      summary: Get usage queue
      operationId: Health_getQueueUsageMetrics
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of metrics that are waiting to be processed in the
        Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueUsage
        weight: 142
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-usage.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-usage.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/usage-dump:
    get:
      tags:
        - health
      summary: Get usage dump queue
      operationId: Health_getUsageDumpQueue
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of projects containing metrics that are waiting to be
        processed in the Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueUsageDump
        weight: 143
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-usage-dump.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-usage-dump.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/queue/webhooks:
    get:
      tags:
        - health
      summary: Get webhooks queue
      operationId: Health_webhooksQueueCount
      security:
        - Project: []
          Key: []
      description: >-
        Get the number of webhooks that are waiting to be processed in the
        Appwrite internal queue server.
      parameters:
        - description: >-
            Queue size threshold. When hit (equal or higher), endpoint returns
            server error. Default value is 5000.
          name: threshold
          required: false
          schema:
            type: integer
            format: int32
            default: 5000
          in: query
      responses:
        '200':
          description: Health Queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthQueue'
      x-appwrite:
        method: getQueueWebhooks
        weight: 131
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-queue-webhooks.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-queue-webhooks.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/storage:
    get:
      tags:
        - health
      summary: Get storage
      operationId: Health_checkStorageDevice
      security:
        - Project: []
          Key: []
      description: Check the Appwrite storage device is up and connection is successful.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: getStorage
        weight: 145
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-storage.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-storage.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/storage/local:
    get:
      tags:
        - health
      summary: Get local storage
      operationId: Health_checkLocalStorage
      security:
        - Project: []
          Key: []
      description: >-
        Check the Appwrite local storage device is up and connection is
        successful.
      responses:
        '200':
          description: Health Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthStatus'
      x-appwrite:
        method: getStorageLocal
        weight: 144
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-storage-local.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-storage-local.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /health/time:
    get:
      tags:
        - health
      summary: Get time
      operationId: Health_syncTimeWithNtp
      security:
        - Project: []
          Key: []
      description: >-
        Check the Appwrite server time is synced with Google remote NTP server.
        We use this technology to smoothly handle leap seconds with no
        disruptive events. The [Network Time
        Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is
        used by hundreds of millions of computers and devices to synchronize
        their clocks over the Internet. If your computer sets its own clock, it
        likely uses NTP.
      responses:
        '200':
          description: Health Time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthTime'
      x-appwrite:
        method: getTime
        weight: 130
        cookies: false
        type: ''
        deprecated: false
        demo: health/get-time.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/health/get-time.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: health.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /locale:
    get:
      tags:
        - locale
      summary: Get user locale
      operationId: Locale_getUserLocaleDetails
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get the current user location based on IP. Returns an object with user
        country code, country name, continent name, continent code, ip address
        and suggested currency. You can use the locale header to get the data in
        a supported language.


        ([IP Geolocation by DB-IP](https://db-ip.com))
      responses:
        '200':
          description: Locale
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locale'
      x-appwrite:
        method: get
        weight: 116
        cookies: false
        type: ''
        deprecated: false
        demo: locale/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/get-locale.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /localed
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /locale/codes:
    get:
      tags:
        - locale
      summary: List Locale Codes
      operationId: Locale_listCodes
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all locale codes in [ISO
        639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
      responses:
        '200':
          description: Locale codes list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/localeCodeList'
      x-appwrite:
        method: listCodes
        weight: 117
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-locale-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/localeCode
        offline-key: current
        offline-response-key: $id
        auth:
          Project: []
  /locale/continents:
    get:
      tags:
        - locale
      summary: List continents
      operationId: Locale_listContinents
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all continents. You can use the locale header to get the data in
        a supported language.
      responses:
        '200':
          description: Continents List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/continentList'
      x-appwrite:
        method: listContinents
        weight: 121
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-continents.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-continents.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/continents
        offline-key: ''
        offline-response-key: code
        auth:
          Project: []
  /locale/countries:
    get:
      tags:
        - locale
      summary: List countries
      operationId: Locale_listCountries
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all countries. You can use the locale header to get the data in
        a supported language.
      responses:
        '200':
          description: Countries List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/countryList'
      x-appwrite:
        method: listCountries
        weight: 118
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-countries.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-countries.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/countries
        offline-key: ''
        offline-response-key: code
        auth:
          Project: []
  /locale/countries/eu:
    get:
      tags:
        - locale
      summary: List EU countries
      operationId: Locale_listEUCountries
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all countries that are currently members of the EU. You can use
        the locale header to get the data in a supported language.
      responses:
        '200':
          description: Countries List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/countryList'
      x-appwrite:
        method: listCountriesEU
        weight: 119
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-countries-e-u.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-countries-eu.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/countries/eu
        offline-key: ''
        offline-response-key: code
        auth:
          Project: []
  /locale/countries/phones:
    get:
      tags:
        - locale
      summary: List countries phone codes
      operationId: Locale_listCountriesPhones
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all countries phone codes. You can use the locale header to get
        the data in a supported language.
      responses:
        '200':
          description: Phones List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/phoneList'
      x-appwrite:
        method: listCountriesPhones
        weight: 120
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-countries-phones.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-countries-phones.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/countries/phones
        offline-key: ''
        offline-response-key: countryCode
        auth:
          Project: []
  /locale/currencies:
    get:
      tags:
        - locale
      summary: List currencies
      operationId: Locale_listCurrencies
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all currencies, including currency symbol, name, plural, and
        decimal digits for all major and minor currencies. You can use the
        locale header to get the data in a supported language.
      responses:
        '200':
          description: Currencies List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currencyList'
      x-appwrite:
        method: listCurrencies
        weight: 122
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-currencies.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-currencies.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/currencies
        offline-key: ''
        offline-response-key: code
        auth:
          Project: []
  /locale/languages:
    get:
      tags:
        - locale
      summary: List languages
      operationId: Locale_listLanguages
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        List of all languages classified by ISO 639-1 including 2-letter code,
        name in English, and name in the respective language.
      responses:
        '200':
          description: Languages List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/languageList'
      x-appwrite:
        method: listLanguages
        weight: 123
        cookies: false
        type: ''
        deprecated: false
        demo: locale/list-languages.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/locale/list-languages.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: locale.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /locale/languages
        offline-key: ''
        offline-response-key: code
        auth:
          Project: []
  /messaging/messages:
    get:
      tags:
        - messaging
      summary: List messages
      operationId: Messaging_listAllMessages
      security:
        - Project: []
          Key: []
      description: Get a list of all messages from the current Appwrite project.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: scheduledAt, deliveredAt, deliveredTotal,
            status, description, providerType
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Message list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageList'
      x-appwrite:
        method: listMessages
        weight: 377
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-messages.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-messages.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/email:
    post:
      tags:
        - messaging
      summary: Create email
      operationId: Messaging_createEmailMessage
      security:
        - Project: []
          Key: []
      description: Create a new email message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateEmailMessageRequest'
      responses:
        '201':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: createEmail
        weight: 374
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-email.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-email.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/email/{messageId}:
    patch:
      tags:
        - messaging
      summary: Update email
      operationId: Messaging_updateEmailById
      security:
        - Project: []
          Key: []
      description: |
        Update an email message by its unique ID.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateEmailByIdRequest'
      responses:
        '200':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: updateEmail
        weight: 381
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-email.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-email.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/push:
    post:
      tags:
        - messaging
      summary: Create push notification
      operationId: Messaging_createPushNotification
      security:
        - Project: []
          Key: []
      description: Create a new push notification.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreatePushNotificationRequest'
      responses:
        '201':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: createPush
        weight: 376
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-push.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-push.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/push/{messageId}:
    patch:
      tags:
        - messaging
      summary: Update push notification
      operationId: Messaging_updatePushMessage
      security:
        - Project: []
          Key: []
      description: |
        Update a push notification by its unique ID.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdatePushMessageRequest'
      responses:
        '200':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: updatePush
        weight: 383
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-push.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-push.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/sms:
    post:
      tags:
        - messaging
      summary: Create SMS
      operationId: Messaging_createSmsMessage
      security:
        - Project: []
          Key: []
      description: Create a new SMS message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateSmsMessageRequest'
      responses:
        '201':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: createSms
        weight: 375
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-sms.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-sms.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/sms/{messageId}:
    patch:
      tags:
        - messaging
      summary: Update SMS
      operationId: Messaging_updateSmsMessageById
      security:
        - Project: []
          Key: []
      description: |
        Update an email message by its unique ID.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateSmsMessageByIdRequest'
      responses:
        '200':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: updateSms
        weight: 382
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-sms.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-email.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/{messageId}:
    get:
      tags:
        - messaging
      summary: Get message
      operationId: Messaging_getMessageById
      security:
        - Project: []
          Key: []
      description: |
        Get a message by its unique ID.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
      responses:
        '200':
          description: Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      x-appwrite:
        method: getMessage
        weight: 380
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/get-message.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/get-message.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - messaging
      summary: Delete message
      operationId: Messaging_deleteMessage
      security:
        - Project: []
          Key: []
      description: >-
        Delete a message. If the message is not a draft or scheduled, but has
        been sent, this will not recall the message.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 384
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/delete-message.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/{messageId}/logs:
    get:
      tags:
        - messaging
      summary: List message logs
      operationId: Messaging_listMessageLogs
      security:
        - Project: []
          Key: []
      description: Get the message activity logs listed by its unique ID.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listMessageLogs
        weight: 378
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-message-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-message-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/messages/{messageId}/targets:
    get:
      tags:
        - messaging
      summary: List message targets
      operationId: Messaging_listTargets
      security:
        - Project: []
          Key: []
      description: Get a list of the targets associated with a message.
      parameters:
        - description: Message ID.
          name: messageId
          required: true
          schema:
            type: string
            x-example: <MESSAGE_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: userId, providerId, identifier, providerType
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Target list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/targetList'
      x-appwrite:
        method: listTargets
        weight: 379
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-targets.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-message-targets.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: messages.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers:
    get:
      tags:
        - messaging
      summary: List providers
      operationId: Messaging_listProviders
      security:
        - Project: []
          Key: []
      description: Get a list of all providers from the current Appwrite project.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, provider, type, enabled
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Provider list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/providerList'
      x-appwrite:
        method: listProviders
        weight: 349
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-providers.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-providers.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/apns:
    post:
      tags:
        - messaging
      summary: Create APNS provider
      operationId: Messaging_createApnsProvider
      security:
        - Project: []
          Key: []
      description: Create a new Apple Push Notification service provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateApnsProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createApnsProvider
        weight: 348
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-apns-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-apns-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/apns/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update APNS provider
      operationId: Messaging_updateApnsProvider
      security:
        - Project: []
          Key: []
      description: Update a Apple Push Notification service provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateApnsProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateApnsProvider
        weight: 361
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-apns-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-apns-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/fcm:
    post:
      tags:
        - messaging
      summary: Create FCM provider
      operationId: Messaging_createFcmProvider
      security:
        - Project: []
          Key: []
      description: Create a new Firebase Cloud Messaging provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateFcmProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createFcmProvider
        weight: 347
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-fcm-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-fcm-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/fcm/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update FCM provider
      operationId: Messaging_updateFcmProvider
      security:
        - Project: []
          Key: []
      description: Update a Firebase Cloud Messaging provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateFcmProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateFcmProvider
        weight: 360
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-fcm-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-fcm-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/mailgun:
    post:
      tags:
        - messaging
      summary: Create Mailgun provider
      operationId: Messaging_createMailgunProvider
      security:
        - Project: []
          Key: []
      description: Create a new Mailgun provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateMailgunProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createMailgunProvider
        weight: 339
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-mailgun-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-mailgun-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/mailgun/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Mailgun provider
      operationId: Messaging_updateMailgunProvider
      security:
        - Project: []
          Key: []
      description: Update a Mailgun provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateMailgunProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateMailgunProvider
        weight: 352
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-mailgun-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-mailgun-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/msg91:
    post:
      tags:
        - messaging
      summary: Create Msg91 provider
      operationId: Messaging_createMsgProvider
      security:
        - Project: []
          Key: []
      description: Create a new MSG91 provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateMsgProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createMsg91Provider
        weight: 342
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-msg91provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-msg91-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/msg91/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Msg91 provider
      operationId: Messaging_updateProviderById
      security:
        - Project: []
          Key: []
      description: Update a MSG91 provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateProviderByIdRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateMsg91Provider
        weight: 355
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-msg91provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-msg91-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/sendgrid:
    post:
      tags:
        - messaging
      summary: Create Sendgrid provider
      operationId: Messaging_createSendgridProvider
      security:
        - Project: []
          Key: []
      description: Create a new Sendgrid provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateSendgridProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createSendgridProvider
        weight: 340
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-sendgrid-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-sendgrid-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/sendgrid/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Sendgrid provider
      operationId: Messaging_updateSendgridProvider
      security:
        - Project: []
          Key: []
      description: Update a Sendgrid provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateSendgridProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateSendgridProvider
        weight: 353
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-sendgrid-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-sendgrid-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/smtp:
    post:
      tags:
        - messaging
      summary: Create SMTP provider
      operationId: Messaging_createSmtpProvider
      security:
        - Project: []
          Key: []
      description: Create a new SMTP provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateSmtpProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createSmtpProvider
        weight: 341
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-smtp-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-smtp-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/smtp/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update SMTP provider
      operationId: Messaging_updateSmtpProvider
      security:
        - Project: []
          Key: []
      description: Update a SMTP provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateSmtpProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateSmtpProvider
        weight: 354
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-smtp-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-smtp-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/telesign:
    post:
      tags:
        - messaging
      summary: Create Telesign provider
      operationId: Messaging_createTelesignProvider
      security:
        - Project: []
          Key: []
      description: Create a new Telesign provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateTelesignProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createTelesignProvider
        weight: 343
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-telesign-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-telesign-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/telesign/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Telesign provider
      operationId: Messaging_updateTelesignProvider
      security:
        - Project: []
          Key: []
      description: Update a Telesign provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateTelesignProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateTelesignProvider
        weight: 356
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-telesign-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-telesign-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/textmagic:
    post:
      tags:
        - messaging
      summary: Create Textmagic provider
      operationId: Messaging_createTextmagicProvider
      security:
        - Project: []
          Key: []
      description: Create a new Textmagic provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateTextmagicProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createTextmagicProvider
        weight: 344
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-textmagic-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-textmagic-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/textmagic/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Textmagic provider
      operationId: Messaging_updateTextmagicProvider
      security:
        - Project: []
          Key: []
      description: Update a Textmagic provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateTextmagicProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateTextmagicProvider
        weight: 357
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-textmagic-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-textmagic-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/twilio:
    post:
      tags:
        - messaging
      summary: Create Twilio provider
      operationId: Messaging_createTwilioProvider
      security:
        - Project: []
          Key: []
      description: Create a new Twilio provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateTwilioProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createTwilioProvider
        weight: 345
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-twilio-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-twilio-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/twilio/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Twilio provider
      operationId: Messaging_updateTwilioProvider
      security:
        - Project: []
          Key: []
      description: Update a Twilio provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateTwilioProviderRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateTwilioProvider
        weight: 358
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-twilio-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-twilio-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/vonage:
    post:
      tags:
        - messaging
      summary: Create Vonage provider
      operationId: Messaging_createVonageProvider
      security:
        - Project: []
          Key: []
      description: Create a new Vonage provider.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateVonageProviderRequest'
      responses:
        '201':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: createVonageProvider
        weight: 346
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-vonage-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-vonage-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/vonage/{providerId}:
    patch:
      tags:
        - messaging
      summary: Update Vonage provider
      operationId: Messaging_updateVonageProviderById
      security:
        - Project: []
          Key: []
      description: Update a Vonage provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateVonageProviderByIdRequest'
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: updateVonageProvider
        weight: 359
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-vonage-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-vonage-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/{providerId}:
    get:
      tags:
        - messaging
      summary: Get provider
      operationId: Messaging_getProviderById
      security:
        - Project: []
          Key: []
      description: |
        Get a provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      responses:
        '200':
          description: Provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
      x-appwrite:
        method: getProvider
        weight: 351
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/get-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/get-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - messaging
      summary: Delete provider
      operationId: Messaging_deleteProviderById
      security:
        - Project: []
          Key: []
      description: Delete a provider by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteProvider
        weight: 362
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/delete-provider.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/delete-provider.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/providers/{providerId}/logs:
    get:
      tags:
        - messaging
      summary: List provider logs
      operationId: Messaging_listProviderLogs
      security:
        - Project: []
          Key: []
      description: Get the provider activity logs listed by its unique ID.
      parameters:
        - description: Provider ID.
          name: providerId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listProviderLogs
        weight: 350
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-provider-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-provider-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: providers.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/subscribers/{subscriberId}/logs:
    get:
      tags:
        - messaging
      summary: List subscriber logs
      operationId: Messaging_listSubscriberLogs
      security:
        - Project: []
          Key: []
      description: Get the subscriber activity logs listed by its unique ID.
      parameters:
        - description: Subscriber ID.
          name: subscriberId
          required: true
          schema:
            type: string
            x-example: <SUBSCRIBER_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listSubscriberLogs
        weight: 371
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-subscriber-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-subscriber-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: subscribers.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/topics:
    get:
      tags:
        - messaging
      summary: List topics
      operationId: Messaging_listTopics
      security:
        - Project: []
          Key: []
      description: Get a list of all topics from the current Appwrite project.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, description, emailTotal, smsTotal,
            pushTotal
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Topic list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topicList'
      x-appwrite:
        method: listTopics
        weight: 364
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-topics.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-topics.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: topics.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - messaging
      summary: Create topic
      operationId: Messaging_createNewTopic
      security:
        - Project: []
          Key: []
      description: Create a new topic.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateNewTopicRequest'
      responses:
        '201':
          description: Topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
      x-appwrite:
        method: createTopic
        weight: 363
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-topic.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-topic.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: topics.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/topics/{topicId}:
    get:
      tags:
        - messaging
      summary: Get topic
      operationId: Messaging_getTopicById
      security:
        - Project: []
          Key: []
      description: |
        Get a topic by its unique ID.
      parameters:
        - description: Topic ID.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
      responses:
        '200':
          description: Topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
      x-appwrite:
        method: getTopic
        weight: 366
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/get-topic.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/get-topic.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: topics.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - messaging
      summary: Update topic
      operationId: Messaging_updateTopicById
      security:
        - Project: []
          Key: []
      description: |
        Update a topic by its unique ID.
      parameters:
        - description: Topic ID.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingUpdateTopicByIdRequest'
      responses:
        '200':
          description: Topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
      x-appwrite:
        method: updateTopic
        weight: 367
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/update-topic.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/update-topic.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: topics.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - messaging
      summary: Delete topic
      operationId: Messaging_deleteTopicById
      security:
        - Project: []
          Key: []
      description: Delete a topic by its unique ID.
      parameters:
        - description: Topic ID.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteTopic
        weight: 368
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/delete-topic.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/delete-topic.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: topics.write
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/topics/{topicId}/logs:
    get:
      tags:
        - messaging
      summary: List topic logs
      operationId: Messaging_listTopicLogs
      security:
        - Project: []
          Key: []
      description: Get the topic activity logs listed by its unique ID.
      parameters:
        - description: Topic ID.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listTopicLogs
        weight: 365
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-topic-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-topic-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: topics.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/topics/{topicId}/subscribers:
    get:
      tags:
        - messaging
      summary: List subscribers
      operationId: Messaging_listSubscribers
      security:
        - Project: []
          Key: []
      description: Get a list of all subscribers from the current Appwrite project.
      parameters:
        - description: Topic ID. The topic ID subscribed to.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, provider, type, enabled
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Subscriber list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriberList'
      x-appwrite:
        method: listSubscribers
        weight: 370
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/list-subscribers.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/list-subscribers.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: subscribers.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - messaging
      summary: Create subscriber
      operationId: Messaging_createSubscriber
      security:
        - Project: []
          JWT: []
          Key: []
      description: Create a new subscriber.
      parameters:
        - description: Topic ID. The topic ID to subscribe to.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagingCreateSubscriberRequest'
      responses:
        '201':
          description: Subscriber
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriber'
      x-appwrite:
        method: createSubscriber
        weight: 369
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/create-subscriber.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/create-subscriber.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: subscribers.write
        platforms:
          - server
          - client
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /messaging/topics/{topicId}/subscribers/{subscriberId}:
    get:
      tags:
        - messaging
      summary: Get subscriber
      operationId: Messaging_getSubscriberById
      security:
        - Project: []
          Key: []
      description: |
        Get a subscriber by its unique ID.
      parameters:
        - description: Topic ID. The topic ID subscribed to.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
        - description: Subscriber ID.
          name: subscriberId
          required: true
          schema:
            type: string
            x-example: <SUBSCRIBER_ID>
          in: path
      responses:
        '200':
          description: Subscriber
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriber'
      x-appwrite:
        method: getSubscriber
        weight: 372
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/get-subscriber.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/get-subscriber.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: subscribers.read
        platforms:
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - messaging
      summary: Delete subscriber
      operationId: Messaging_deleteSubscriberById
      security:
        - Project: []
          JWT: []
          Key: []
      description: Delete a subscriber by its unique ID.
      parameters:
        - description: Topic ID. The topic ID subscribed to.
          name: topicId
          required: true
          schema:
            type: string
            x-example: <TOPIC_ID>
          in: path
        - description: Subscriber ID.
          name: subscriberId
          required: true
          schema:
            type: string
            x-example: <SUBSCRIBER_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteSubscriber
        weight: 373
        cookies: false
        type: ''
        deprecated: false
        demo: messaging/delete-subscriber.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/messaging/delete-subscriber.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: subscribers.write
        platforms:
          - server
          - client
          - console
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations:
    get:
      tags:
        - migrations
      summary: List Migrations
      operationId: Migrations_listMigrations
      security:
        - Project: []
      description: ''
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/databases#querying-documents).
            Maximum of 100 queries are allowed, each 4096 characters long. You
            may filter on the following attributes: status, stage, source,
            resources, statusCounters, resourceData, errors
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Migrations List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migrationList'
      x-appwrite:
        method: list
        weight: 326
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/list.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/list-migrations.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/appwrite:
    post:
      tags:
        - migrations
      summary: Migrate Appwrite Data
      operationId: Migrations_createAppwriteMigration
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationsCreateAppwriteMigrationRequest'
      responses:
        '202':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: createAppwriteMigration
        weight: 321
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/create-appwrite-migration.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-appwrite.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/appwrite/report:
    get:
      tags:
        - migrations
      summary: Generate a report on Appwrite Data
      operationId: Migrations_generateReportOnAppwriteData
      security:
        - Project: []
      description: ''
      parameters:
        - description: List of resources to migrate
          name: resources
          required: true
          schema:
            type: array
            items:
              type: string
          in: query
        - description: Source's Appwrite Endpoint
          name: endpoint
          required: true
          schema:
            type: string
            format: url
            x-example: https://example.com
          in: query
        - description: Source's Project ID
          name: projectID
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: query
        - description: Source's API Key
          name: key
          required: true
          schema:
            type: string
            x-example: <KEY>
          in: query
      responses:
        '200':
          description: Migration Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migrationReport'
      x-appwrite:
        method: getAppwriteReport
        weight: 328
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/get-appwrite-report.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-appwrite-report.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/firebase:
    post:
      tags:
        - migrations
      summary: Migrate Firebase Data (Service Account)
      operationId: Migrations_firebaseDataMigration
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationsFirebaseDataMigrationRequest'
      responses:
        '202':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: createFirebaseMigration
        weight: 323
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/create-firebase-migration.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-firebase.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/firebase/deauthorize:
    get:
      tags:
        - migrations
      summary: Revoke Appwrite's authorization to access Firebase Projects
      operationId: Migrations_revokeFirebaseAuthorization
      security:
        - Project: []
      description: ''
      responses:
        '200':
          description: File
      x-appwrite:
        method: deleteFirebaseAuth
        weight: 334
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/delete-firebase-auth.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/firebase/oauth:
    post:
      tags:
        - migrations
      summary: Migrate Firebase Data (OAuth)
      operationId: Migrations_firebaseOAuthMigrate
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationsFirebaseOAuthMigrateRequest'
      responses:
        '202':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: createFirebaseOAuthMigration
        weight: 322
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/create-firebase-o-auth-migration.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-firebase.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/firebase/projects:
    get:
      tags:
        - migrations
      summary: List Firebase Projects
      operationId: Migrations_listFirebaseProjects
      security:
        - Project: []
      description: ''
      responses:
        '200':
          description: Migrations Firebase Projects List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/firebaseProjectList'
      x-appwrite:
        method: listFirebaseProjects
        weight: 333
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/list-firebase-projects.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/firebase/report:
    get:
      tags:
        - migrations
      summary: Generate a report on Firebase Data
      operationId: Migrations_generateFirebaseReport
      security:
        - Project: []
      description: ''
      parameters:
        - description: List of resources to migrate
          name: resources
          required: true
          schema:
            type: array
            items:
              type: string
          in: query
        - description: JSON of the Firebase service account credentials
          name: serviceAccount
          required: true
          schema:
            type: string
            x-example: <SERVICE_ACCOUNT>
          in: query
      responses:
        '200':
          description: Migration Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migrationReport'
      x-appwrite:
        method: getFirebaseReport
        weight: 329
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/get-firebase-report.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-firebase-report.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/firebase/report/oauth:
    get:
      tags:
        - migrations
      summary: Generate a report on Firebase Data using OAuth
      operationId: Migrations_generateFirebaseReportOAuth
      security:
        - Project: []
      description: ''
      parameters:
        - description: List of resources to migrate
          name: resources
          required: true
          schema:
            type: array
            items:
              type: string
          in: query
        - description: Project ID
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: query
      responses:
        '200':
          description: Migration Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migrationReport'
      x-appwrite:
        method: getFirebaseReportOAuth
        weight: 330
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/get-firebase-report-o-auth.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-firebase-report.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/nhost:
    post:
      tags:
        - migrations
      summary: Migrate NHost Data
      operationId: Migrations_createNHostMigration
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationsCreateNHostMigrationRequest'
      responses:
        '202':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: createNHostMigration
        weight: 325
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/create-n-host-migration.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-nhost.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/nhost/report:
    get:
      tags:
        - migrations
      summary: Generate a report on NHost Data
      operationId: Migrations_generateNhostReport
      security:
        - Project: []
      description: ''
      parameters:
        - description: List of resources to migrate.
          name: resources
          required: true
          schema:
            type: array
            items:
              type: string
          in: query
        - description: Source's Subdomain.
          name: subdomain
          required: true
          schema:
            type: string
            x-example: <SUBDOMAIN>
          in: query
        - description: Source's Region.
          name: region
          required: true
          schema:
            type: string
            x-example: <REGION>
          in: query
        - description: Source's Admin Secret.
          name: adminSecret
          required: true
          schema:
            type: string
            x-example: <ADMIN_SECRET>
          in: query
        - description: Source's Database Name.
          name: database
          required: true
          schema:
            type: string
            x-example: <DATABASE>
          in: query
        - description: Source's Database Username.
          name: username
          required: true
          schema:
            type: string
            x-example: <USERNAME>
          in: query
        - description: Source's Database Password.
          name: password
          required: true
          schema:
            type: string
            x-example: <PASSWORD>
          in: query
        - description: Source's Database Port.
          name: port
          required: false
          schema:
            type: integer
            format: int32
            default: 5432
          in: query
      responses:
        '200':
          description: Migration Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migrationReport'
      x-appwrite:
        method: getNHostReport
        weight: 336
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/get-n-host-report.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-nhost-report.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/supabase:
    post:
      tags:
        - migrations
      summary: Migrate Supabase Data
      operationId: Migrations_migrateSupabaseData
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrationsMigrateSupabaseDataRequest'
      responses:
        '202':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: createSupabaseMigration
        weight: 324
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/create-supabase-migration.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-supabase.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/supabase/report:
    get:
      tags:
        - migrations
      summary: Generate a report on Supabase Data
      operationId: Migrations_generateSupabaseReport
      security:
        - Project: []
      description: ''
      parameters:
        - description: List of resources to migrate
          name: resources
          required: true
          schema:
            type: array
            items:
              type: string
          in: query
        - description: Source's Supabase Endpoint.
          name: endpoint
          required: true
          schema:
            type: string
            format: url
            x-example: https://example.com
          in: query
        - description: Source's API Key.
          name: apiKey
          required: true
          schema:
            type: string
            x-example: <API_KEY>
          in: query
        - description: Source's Database Host.
          name: databaseHost
          required: true
          schema:
            type: string
            x-example: <DATABASE_HOST>
          in: query
        - description: Source's Database Username.
          name: username
          required: true
          schema:
            type: string
            x-example: <USERNAME>
          in: query
        - description: Source's Database Password.
          name: password
          required: true
          schema:
            type: string
            x-example: <PASSWORD>
          in: query
        - description: Source's Database Port.
          name: port
          required: false
          schema:
            type: integer
            format: int32
            default: 5432
          in: query
      responses:
        '200':
          description: Migration Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migrationReport'
      x-appwrite:
        method: getSupabaseReport
        weight: 335
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/get-supabase-report.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/migration-supabase-report.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /migrations/{migrationId}:
    get:
      tags:
        - migrations
      summary: Get Migration
      operationId: Migrations_getById
      security:
        - Project: []
      description: ''
      parameters:
        - description: Migration unique ID.
          name: migrationId
          required: true
          schema:
            type: string
            x-example: <MIGRATION_ID>
          in: path
      responses:
        '200':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: get
        weight: 327
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/get-migration.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - migrations
      summary: Retry Migration
      operationId: Migrations_retryMigration
      security:
        - Project: []
      description: ''
      parameters:
        - description: Migration unique ID.
          name: migrationId
          required: true
          schema:
            type: string
            x-example: <MIGRATION_ID>
          in: path
      responses:
        '202':
          description: Migration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/migration'
      x-appwrite:
        method: retry
        weight: 337
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/retry.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/retry-migration.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - migrations
      summary: Delete Migration
      operationId: Migrations_deleteMigration
      security:
        - Project: []
      description: ''
      parameters:
        - description: Migration ID.
          name: migrationId
          required: true
          schema:
            type: string
            x-example: <MIGRATION_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 338
        cookies: false
        type: ''
        deprecated: false
        demo: migrations/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/migrations/delete-migration.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: migrations.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /project/usage:
    get:
      tags:
        - project
      summary: Get project usage stats
      operationId: Project_getUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Starting date for the usage
          name: startDate
          required: true
          schema:
            type: string
          in: query
        - description: End date for the usage
          name: endDate
          required: true
          schema:
            type: string
          in: query
        - description: Period used
          name: period
          required: false
          schema:
            type: string
            x-example: 1h
            enum:
              - 1h
              - 1d
            x-enum-name: ProjectUsageRange
            x-enum-keys:
              - One Hour
              - One Day
            default: 1d
          in: query
      responses:
        '200':
          description: UsageProject
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageProject'
      x-appwrite:
        method: getUsage
        weight: 191
        cookies: false
        type: ''
        deprecated: false
        demo: project/get-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /project/variables:
    get:
      tags:
        - project
      summary: List Variables
      operationId: Project_listVariables
      security:
        - Project: []
      description: >-
        Get a list of all project variables. These variables will be accessible
        in all Appwrite Functions at runtime.
      responses:
        '200':
          description: Variables List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variableList'
      x-appwrite:
        method: listVariables
        weight: 193
        cookies: false
        type: ''
        deprecated: false
        demo: project/list-variables.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/project/list-variables.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - project
      summary: Create Variable
      operationId: Project_createVariable
      security:
        - Project: []
      description: >-
        Create a new project variable. This variable will be accessible in all
        Appwrite Functions at runtime.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateVariableRequest'
      responses:
        '201':
          description: Variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variable'
      x-appwrite:
        method: createVariable
        weight: 192
        cookies: false
        type: ''
        deprecated: false
        demo: project/create-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/project/create-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /project/variables/{variableId}:
    get:
      tags:
        - project
      summary: Get Variable
      operationId: Project_variableDetails
      security:
        - Project: []
      description: Get a project variable by its unique ID.
      parameters:
        - description: Variable unique ID.
          name: variableId
          required: true
          schema:
            type: string
            x-example: <VARIABLE_ID>
          in: path
      responses:
        '200':
          description: Variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variable'
      x-appwrite:
        method: getVariable
        weight: 194
        cookies: false
        type: ''
        deprecated: false
        demo: project/get-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/project/get-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - project
      summary: Update Variable
      operationId: Project_updateVariableById
      security:
        - Project: []
      description: >-
        Update project variable by its unique ID. This variable will be
        accessible in all Appwrite Functions at runtime.
      parameters:
        - description: Variable unique ID.
          name: variableId
          required: true
          schema:
            type: string
            x-example: <VARIABLE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateVariableByIdRequest'
      responses:
        '200':
          description: Variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variable'
      x-appwrite:
        method: updateVariable
        weight: 195
        cookies: false
        type: ''
        deprecated: false
        demo: project/update-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/project/update-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - project
      summary: Delete Variable
      operationId: Project_deleteVariableById
      security:
        - Project: []
      description: 'Delete a project variable by its unique ID. '
      parameters:
        - description: Variable unique ID.
          name: variableId
          required: true
          schema:
            type: string
            x-example: <VARIABLE_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteVariable
        weight: 196
        cookies: false
        type: ''
        deprecated: false
        demo: project/delete-variable.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/project/delete-variable.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects:
    get:
      tags:
        - projects
      summary: List projects
      operationId: Projects_listProjects
      security:
        - Project: []
      description: ''
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, teamId
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Projects List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectList'
      x-appwrite:
        method: list
        weight: 150
        cookies: false
        type: ''
        deprecated: false
        demo: projects/list.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - projects
      summary: Create project
      operationId: Projects_createNewProject
      security:
        - Project: []
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsCreateNewProjectRequest'
      responses:
        '201':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: create
        weight: 149
        cookies: false
        type: ''
        deprecated: false
        demo: projects/create.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}:
    get:
      tags:
        - projects
      summary: Get project
      operationId: Projects_get
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: get
        weight: 151
        cookies: false
        type: ''
        deprecated: false
        demo: projects/get.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - projects
      summary: Update project
      operationId: Projects_updateDetail
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateDetailRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: update
        weight: 152
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - projects
      summary: Delete project
      operationId: Projects_removeById
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 166
        cookies: false
        type: ''
        deprecated: false
        demo: projects/delete.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/api:
    patch:
      tags:
        - projects
      summary: Update API status
      operationId: Projects_updateApiStatus
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateApiStatusRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateApiStatus
        weight: 156
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-api-status.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/api/all:
    patch:
      tags:
        - projects
      summary: Update all API status
      operationId: Projects_updateAllApiStatus
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateAllApiStatusRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateApiStatusAll
        weight: 157
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-api-status-all.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/duration:
    patch:
      tags:
        - projects
      summary: Update project authentication duration
      operationId: Projects_updateAuthDuration
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateAuthDurationRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateAuthDuration
        weight: 160
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-auth-duration.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/limit:
    patch:
      tags:
        - projects
      summary: Update project users limit
      operationId: Projects_updateUserLimit
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateUserLimitRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateAuthLimit
        weight: 159
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-auth-limit.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/max-sessions:
    patch:
      tags:
        - projects
      summary: Update project user sessions limit
      operationId: Projects_updateMaxSessionsLimit
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateMaxSessionsLimitRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateAuthSessionsLimit
        weight: 165
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-auth-sessions-limit.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/password-dictionary:
    patch:
      tags:
        - projects
      summary: >-
        Update authentication password dictionary status. Use this endpoint to
        enable or disable the dicitonary check for user password
      operationId: Projects_updateAuthPasswordDictionary
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateAuthPasswordDictionaryRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateAuthPasswordDictionary
        weight: 163
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-auth-password-dictionary.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/password-history:
    patch:
      tags:
        - projects
      summary: >-
        Update authentication password history. Use this endpoint to set the
        number of password history to save and 0 to disable password history.
      operationId: Projects_updateAuthPasswordHistory
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateAuthPasswordHistoryRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateAuthPasswordHistory
        weight: 162
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-auth-password-history.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/personal-data:
    patch:
      tags:
        - projects
      summary: >-
        Enable or disable checking user passwords for similarity with their
        personal data.
      operationId: Projects_enablePersonalDataCheck
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsEnablePersonalDataCheckRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updatePersonalDataCheck
        weight: 164
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-personal-data-check.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/auth/{method}:
    patch:
      tags:
        - projects
      summary: >-
        Update project auth method status. Use this endpoint to enable or
        disable a given auth method for this project.
      operationId: Projects_updateAuthMethodStatus
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: >-
            Auth Method. Possible values:
            email-password,magic-url,email-otp,anonymous,invites,jwt,phone
          name: method
          required: true
          schema:
            type: string
            x-example: email-password
            enum:
              - email-password
              - magic-url
              - email-otp
              - anonymous
              - invites
              - jwt
              - phone
            x-enum-name: AuthMethod
            x-enum-keys: []
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateAuthMethodStatusRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateAuthStatus
        weight: 161
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-auth-status.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/keys:
    get:
      tags:
        - projects
      summary: List keys
      operationId: Projects_listKeys
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      responses:
        '200':
          description: API Keys List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyList'
      x-appwrite:
        method: listKeys
        weight: 174
        cookies: false
        type: ''
        deprecated: false
        demo: projects/list-keys.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - projects
      summary: Create key
      operationId: Projects_createKey
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsCreateKeyRequest'
      responses:
        '201':
          description: Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
      x-appwrite:
        method: createKey
        weight: 173
        cookies: false
        type: ''
        deprecated: false
        demo: projects/create-key.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/keys/{keyId}:
    get:
      tags:
        - projects
      summary: Get key
      operationId: Projects_getKey
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Key unique ID.
          name: keyId
          required: true
          schema:
            type: string
            x-example: <KEY_ID>
          in: path
      responses:
        '200':
          description: Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
      x-appwrite:
        method: getKey
        weight: 175
        cookies: false
        type: ''
        deprecated: false
        demo: projects/get-key.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - projects
      summary: Update key
      operationId: Projects_updateKey
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Key unique ID.
          name: keyId
          required: true
          schema:
            type: string
            x-example: <KEY_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateKeyRequest'
      responses:
        '200':
          description: Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key'
      x-appwrite:
        method: updateKey
        weight: 176
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-key.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - projects
      summary: Delete key
      operationId: Projects_deleteKey
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Key unique ID.
          name: keyId
          required: true
          schema:
            type: string
            x-example: <KEY_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteKey
        weight: 177
        cookies: false
        type: ''
        deprecated: false
        demo: projects/delete-key.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/oauth2:
    patch:
      tags:
        - projects
      summary: Update project OAuth2
      operationId: Projects_updateOAuth
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateOAuthRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateOAuth2
        weight: 158
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-o-auth2.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/platforms:
    get:
      tags:
        - projects
      summary: List platforms
      operationId: Projects_listPlatforms
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      responses:
        '200':
          description: Platforms List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platformList'
      x-appwrite:
        method: listPlatforms
        weight: 179
        cookies: false
        type: ''
        deprecated: false
        demo: projects/list-platforms.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - projects
      summary: Create platform
      operationId: Projects_createPlatform
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsCreatePlatformRequest'
      responses:
        '201':
          description: Platform
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platform'
      x-appwrite:
        method: createPlatform
        weight: 178
        cookies: false
        type: ''
        deprecated: false
        demo: projects/create-platform.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/platforms/{platformId}:
    get:
      tags:
        - projects
      summary: Get platform
      operationId: Projects_getPlatformById
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Platform unique ID.
          name: platformId
          required: true
          schema:
            type: string
            x-example: <PLATFORM_ID>
          in: path
      responses:
        '200':
          description: Platform
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platform'
      x-appwrite:
        method: getPlatform
        weight: 180
        cookies: false
        type: ''
        deprecated: false
        demo: projects/get-platform.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - projects
      summary: Update platform
      operationId: Projects_updatePlatformById
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Platform unique ID.
          name: platformId
          required: true
          schema:
            type: string
            x-example: <PLATFORM_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdatePlatformByIdRequest'
      responses:
        '200':
          description: Platform
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platform'
      x-appwrite:
        method: updatePlatform
        weight: 181
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-platform.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - projects
      summary: Delete platform
      operationId: Projects_deletePlatform
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Platform unique ID.
          name: platformId
          required: true
          schema:
            type: string
            x-example: <PLATFORM_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deletePlatform
        weight: 182
        cookies: false
        type: ''
        deprecated: false
        demo: projects/delete-platform.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/service:
    patch:
      tags:
        - projects
      summary: Update service status
      operationId: Projects_updateServiceStatus
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateServiceStatusRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateServiceStatus
        weight: 154
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-service-status.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/service/all:
    patch:
      tags:
        - projects
      summary: Update all service status
      operationId: Projects_updateAllServiceStatus
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateAllServiceStatusRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateServiceStatusAll
        weight: 155
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-service-status-all.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/smtp:
    patch:
      tags:
        - projects
      summary: Update SMTP
      operationId: Projects_updateSmtp
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateSmtpRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateSmtp
        weight: 183
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-smtp.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/smtp/tests:
    post:
      tags:
        - projects
      summary: Create SMTP test
      operationId: Projects_createSmtpTest
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsCreateSmtpTestRequest'
      responses:
        '204':
          description: No content
      x-appwrite:
        method: createSmtpTest
        weight: 184
        cookies: false
        type: ''
        deprecated: false
        demo: projects/create-smtp-test.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/team:
    patch:
      tags:
        - projects
      summary: Update Project Team
      operationId: Projects_updateTeam
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateTeamRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateTeam
        weight: 153
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-team.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/templates/email/{type}/{locale}:
    get:
      tags:
        - projects
      summary: Get custom email template
      operationId: Projects_getEmailTemplate
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Template type
          name: type
          required: true
          schema:
            type: string
            x-example: verification
            enum:
              - verification
              - magicsession
              - recovery
              - invitation
              - mfachallenge
            x-enum-name: EmailTemplateType
            x-enum-keys: []
          in: path
        - description: Template locale
          name: locale
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ar-ae
              - ar-bh
              - ar-dz
              - ar-eg
              - ar-iq
              - ar-jo
              - ar-kw
              - ar-lb
              - ar-ly
              - ar-ma
              - ar-om
              - ar-qa
              - ar-sa
              - ar-sy
              - ar-tn
              - ar-ye
              - as
              - az
              - be
              - bg
              - bh
              - bn
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - de-at
              - de-ch
              - de-li
              - de-lu
              - el
              - en
              - en-au
              - en-bz
              - en-ca
              - en-gb
              - en-ie
              - en-jm
              - en-nz
              - en-tt
              - en-us
              - en-za
              - eo
              - es
              - es-ar
              - es-bo
              - es-cl
              - es-co
              - es-cr
              - es-do
              - es-ec
              - es-gt
              - es-hn
              - es-mx
              - es-ni
              - es-pa
              - es-pe
              - es-pr
              - es-py
              - es-sv
              - es-uy
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fo
              - fr
              - fr-be
              - fr-ca
              - fr-ch
              - fr-lu
              - ga
              - gd
              - he
              - hi
              - hr
              - hu
              - id
              - is
              - it
              - it-ch
              - ja
              - ji
              - ko
              - ku
              - lt
              - lv
              - mk
              - ml
              - ms
              - mt
              - nb
              - ne
              - nl
              - nl-be
              - nn
              - 'no'
              - pa
              - pl
              - pt
              - pt-br
              - rm
              - ro
              - ro-md
              - ru
              - ru-md
              - sb
              - sk
              - sl
              - sq
              - sr
              - sv
              - sv-fi
              - th
              - tn
              - tr
              - ts
              - ua
              - ur
              - ve
              - vi
              - xh
              - zh-cn
              - zh-hk
              - zh-sg
              - zh-tw
              - zu
            x-enum-name: EmailTemplateLocale
            x-enum-keys: []
          in: path
      responses:
        '200':
          description: EmailTemplate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emailTemplate'
      x-appwrite:
        method: getEmailTemplate
        weight: 186
        cookies: false
        type: ''
        deprecated: false
        demo: projects/get-email-template.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - projects
      summary: Update custom email templates
      operationId: Projects_updateCustomEmailTemplates
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Template type
          name: type
          required: true
          schema:
            type: string
            x-example: verification
            enum:
              - verification
              - magicsession
              - recovery
              - invitation
              - mfachallenge
            x-enum-name: EmailTemplateType
            x-enum-keys: []
          in: path
        - description: Template locale
          name: locale
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ar-ae
              - ar-bh
              - ar-dz
              - ar-eg
              - ar-iq
              - ar-jo
              - ar-kw
              - ar-lb
              - ar-ly
              - ar-ma
              - ar-om
              - ar-qa
              - ar-sa
              - ar-sy
              - ar-tn
              - ar-ye
              - as
              - az
              - be
              - bg
              - bh
              - bn
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - de-at
              - de-ch
              - de-li
              - de-lu
              - el
              - en
              - en-au
              - en-bz
              - en-ca
              - en-gb
              - en-ie
              - en-jm
              - en-nz
              - en-tt
              - en-us
              - en-za
              - eo
              - es
              - es-ar
              - es-bo
              - es-cl
              - es-co
              - es-cr
              - es-do
              - es-ec
              - es-gt
              - es-hn
              - es-mx
              - es-ni
              - es-pa
              - es-pe
              - es-pr
              - es-py
              - es-sv
              - es-uy
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fo
              - fr
              - fr-be
              - fr-ca
              - fr-ch
              - fr-lu
              - ga
              - gd
              - he
              - hi
              - hr
              - hu
              - id
              - is
              - it
              - it-ch
              - ja
              - ji
              - ko
              - ku
              - lt
              - lv
              - mk
              - ml
              - ms
              - mt
              - nb
              - ne
              - nl
              - nl-be
              - nn
              - 'no'
              - pa
              - pl
              - pt
              - pt-br
              - rm
              - ro
              - ro-md
              - ru
              - ru-md
              - sb
              - sk
              - sl
              - sq
              - sr
              - sv
              - sv-fi
              - th
              - tn
              - tr
              - ts
              - ua
              - ur
              - ve
              - vi
              - xh
              - zh-cn
              - zh-hk
              - zh-sg
              - zh-tw
              - zu
            x-enum-name: EmailTemplateLocale
            x-enum-keys: []
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateCustomEmailTemplatesRequest'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
      x-appwrite:
        method: updateEmailTemplate
        weight: 188
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-email-template.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - projects
      summary: Reset custom email template
      operationId: Projects_resetEmailTemplate
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Template type
          name: type
          required: true
          schema:
            type: string
            x-example: verification
            enum:
              - verification
              - magicsession
              - recovery
              - invitation
              - mfachallenge
            x-enum-name: EmailTemplateType
            x-enum-keys: []
          in: path
        - description: Template locale
          name: locale
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ar-ae
              - ar-bh
              - ar-dz
              - ar-eg
              - ar-iq
              - ar-jo
              - ar-kw
              - ar-lb
              - ar-ly
              - ar-ma
              - ar-om
              - ar-qa
              - ar-sa
              - ar-sy
              - ar-tn
              - ar-ye
              - as
              - az
              - be
              - bg
              - bh
              - bn
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - de-at
              - de-ch
              - de-li
              - de-lu
              - el
              - en
              - en-au
              - en-bz
              - en-ca
              - en-gb
              - en-ie
              - en-jm
              - en-nz
              - en-tt
              - en-us
              - en-za
              - eo
              - es
              - es-ar
              - es-bo
              - es-cl
              - es-co
              - es-cr
              - es-do
              - es-ec
              - es-gt
              - es-hn
              - es-mx
              - es-ni
              - es-pa
              - es-pe
              - es-pr
              - es-py
              - es-sv
              - es-uy
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fo
              - fr
              - fr-be
              - fr-ca
              - fr-ch
              - fr-lu
              - ga
              - gd
              - he
              - hi
              - hr
              - hu
              - id
              - is
              - it
              - it-ch
              - ja
              - ji
              - ko
              - ku
              - lt
              - lv
              - mk
              - ml
              - ms
              - mt
              - nb
              - ne
              - nl
              - nl-be
              - nn
              - 'no'
              - pa
              - pl
              - pt
              - pt-br
              - rm
              - ro
              - ro-md
              - ru
              - ru-md
              - sb
              - sk
              - sl
              - sq
              - sr
              - sv
              - sv-fi
              - th
              - tn
              - tr
              - ts
              - ua
              - ur
              - ve
              - vi
              - xh
              - zh-cn
              - zh-hk
              - zh-sg
              - zh-tw
              - zu
            x-enum-name: EmailTemplateLocale
            x-enum-keys: []
          in: path
      responses:
        '200':
          description: EmailTemplate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emailTemplate'
      x-appwrite:
        method: deleteEmailTemplate
        weight: 190
        cookies: false
        type: ''
        deprecated: false
        demo: projects/delete-email-template.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/templates/sms/{type}/{locale}:
    get:
      tags:
        - projects
      summary: Get custom SMS template
      operationId: Projects_getSmsTemplate
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Template type
          name: type
          required: true
          schema:
            type: string
            x-example: verification
            enum:
              - verification
              - login
              - invitation
              - mfachallenge
            x-enum-name: SmsTemplateType
            x-enum-keys: []
          in: path
        - description: Template locale
          name: locale
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ar-ae
              - ar-bh
              - ar-dz
              - ar-eg
              - ar-iq
              - ar-jo
              - ar-kw
              - ar-lb
              - ar-ly
              - ar-ma
              - ar-om
              - ar-qa
              - ar-sa
              - ar-sy
              - ar-tn
              - ar-ye
              - as
              - az
              - be
              - bg
              - bh
              - bn
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - de-at
              - de-ch
              - de-li
              - de-lu
              - el
              - en
              - en-au
              - en-bz
              - en-ca
              - en-gb
              - en-ie
              - en-jm
              - en-nz
              - en-tt
              - en-us
              - en-za
              - eo
              - es
              - es-ar
              - es-bo
              - es-cl
              - es-co
              - es-cr
              - es-do
              - es-ec
              - es-gt
              - es-hn
              - es-mx
              - es-ni
              - es-pa
              - es-pe
              - es-pr
              - es-py
              - es-sv
              - es-uy
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fo
              - fr
              - fr-be
              - fr-ca
              - fr-ch
              - fr-lu
              - ga
              - gd
              - he
              - hi
              - hr
              - hu
              - id
              - is
              - it
              - it-ch
              - ja
              - ji
              - ko
              - ku
              - lt
              - lv
              - mk
              - ml
              - ms
              - mt
              - nb
              - ne
              - nl
              - nl-be
              - nn
              - 'no'
              - pa
              - pl
              - pt
              - pt-br
              - rm
              - ro
              - ro-md
              - ru
              - ru-md
              - sb
              - sk
              - sl
              - sq
              - sr
              - sv
              - sv-fi
              - th
              - tn
              - tr
              - ts
              - ua
              - ur
              - ve
              - vi
              - xh
              - zh-cn
              - zh-hk
              - zh-sg
              - zh-tw
              - zu
            x-enum-name: SmsTemplateLocale
            x-enum-keys: []
          in: path
      responses:
        '200':
          description: SmsTemplate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smsTemplate'
      x-appwrite:
        method: getSmsTemplate
        weight: 185
        cookies: false
        type: ''
        deprecated: false
        demo: projects/get-sms-template.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - projects
      summary: Update custom SMS template
      operationId: Projects_updateSmsTemplate
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Template type
          name: type
          required: true
          schema:
            type: string
            x-example: verification
            enum:
              - verification
              - login
              - invitation
              - mfachallenge
            x-enum-name: SmsTemplateType
            x-enum-keys: []
          in: path
        - description: Template locale
          name: locale
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ar-ae
              - ar-bh
              - ar-dz
              - ar-eg
              - ar-iq
              - ar-jo
              - ar-kw
              - ar-lb
              - ar-ly
              - ar-ma
              - ar-om
              - ar-qa
              - ar-sa
              - ar-sy
              - ar-tn
              - ar-ye
              - as
              - az
              - be
              - bg
              - bh
              - bn
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - de-at
              - de-ch
              - de-li
              - de-lu
              - el
              - en
              - en-au
              - en-bz
              - en-ca
              - en-gb
              - en-ie
              - en-jm
              - en-nz
              - en-tt
              - en-us
              - en-za
              - eo
              - es
              - es-ar
              - es-bo
              - es-cl
              - es-co
              - es-cr
              - es-do
              - es-ec
              - es-gt
              - es-hn
              - es-mx
              - es-ni
              - es-pa
              - es-pe
              - es-pr
              - es-py
              - es-sv
              - es-uy
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fo
              - fr
              - fr-be
              - fr-ca
              - fr-ch
              - fr-lu
              - ga
              - gd
              - he
              - hi
              - hr
              - hu
              - id
              - is
              - it
              - it-ch
              - ja
              - ji
              - ko
              - ku
              - lt
              - lv
              - mk
              - ml
              - ms
              - mt
              - nb
              - ne
              - nl
              - nl-be
              - nn
              - 'no'
              - pa
              - pl
              - pt
              - pt-br
              - rm
              - ro
              - ro-md
              - ru
              - ru-md
              - sb
              - sk
              - sl
              - sq
              - sr
              - sv
              - sv-fi
              - th
              - tn
              - tr
              - ts
              - ua
              - ur
              - ve
              - vi
              - xh
              - zh-cn
              - zh-hk
              - zh-sg
              - zh-tw
              - zu
            x-enum-name: SmsTemplateLocale
            x-enum-keys: []
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateSmsTemplateRequest'
      responses:
        '200':
          description: SmsTemplate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smsTemplate'
      x-appwrite:
        method: updateSmsTemplate
        weight: 187
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-sms-template.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - projects
      summary: Reset custom SMS template
      operationId: Projects_resetSmsTemplate
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Template type
          name: type
          required: true
          schema:
            type: string
            x-example: verification
            enum:
              - verification
              - login
              - invitation
              - mfachallenge
            x-enum-name: SmsTemplateType
            x-enum-keys: []
          in: path
        - description: Template locale
          name: locale
          required: true
          schema:
            type: string
            x-example: af
            enum:
              - af
              - ar-ae
              - ar-bh
              - ar-dz
              - ar-eg
              - ar-iq
              - ar-jo
              - ar-kw
              - ar-lb
              - ar-ly
              - ar-ma
              - ar-om
              - ar-qa
              - ar-sa
              - ar-sy
              - ar-tn
              - ar-ye
              - as
              - az
              - be
              - bg
              - bh
              - bn
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - de-at
              - de-ch
              - de-li
              - de-lu
              - el
              - en
              - en-au
              - en-bz
              - en-ca
              - en-gb
              - en-ie
              - en-jm
              - en-nz
              - en-tt
              - en-us
              - en-za
              - eo
              - es
              - es-ar
              - es-bo
              - es-cl
              - es-co
              - es-cr
              - es-do
              - es-ec
              - es-gt
              - es-hn
              - es-mx
              - es-ni
              - es-pa
              - es-pe
              - es-pr
              - es-py
              - es-sv
              - es-uy
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fo
              - fr
              - fr-be
              - fr-ca
              - fr-ch
              - fr-lu
              - ga
              - gd
              - he
              - hi
              - hr
              - hu
              - id
              - is
              - it
              - it-ch
              - ja
              - ji
              - ko
              - ku
              - lt
              - lv
              - mk
              - ml
              - ms
              - mt
              - nb
              - ne
              - nl
              - nl-be
              - nn
              - 'no'
              - pa
              - pl
              - pt
              - pt-br
              - rm
              - ro
              - ro-md
              - ru
              - ru-md
              - sb
              - sk
              - sl
              - sq
              - sr
              - sv
              - sv-fi
              - th
              - tn
              - tr
              - ts
              - ua
              - ur
              - ve
              - vi
              - xh
              - zh-cn
              - zh-hk
              - zh-sg
              - zh-tw
              - zu
            x-enum-name: SmsTemplateLocale
            x-enum-keys: []
          in: path
      responses:
        '200':
          description: SmsTemplate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/smsTemplate'
      x-appwrite:
        method: deleteSmsTemplate
        weight: 189
        cookies: false
        type: ''
        deprecated: false
        demo: projects/delete-sms-template.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/webhooks:
    get:
      tags:
        - projects
      summary: List webhooks
      operationId: Projects_listWebhooks
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      responses:
        '200':
          description: Webhooks List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhookList'
      x-appwrite:
        method: listWebhooks
        weight: 168
        cookies: false
        type: ''
        deprecated: false
        demo: projects/list-webhooks.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - projects
      summary: Create webhook
      operationId: Projects_createWebhook
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsCreateWebhookRequest'
      responses:
        '201':
          description: Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
      x-appwrite:
        method: createWebhook
        weight: 167
        cookies: false
        type: ''
        deprecated: false
        demo: projects/create-webhook.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/webhooks/{webhookId}:
    get:
      tags:
        - projects
      summary: Get webhook
      operationId: Projects_getWebhook
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Webhook unique ID.
          name: webhookId
          required: true
          schema:
            type: string
            x-example: <WEBHOOK_ID>
          in: path
      responses:
        '200':
          description: Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
      x-appwrite:
        method: getWebhook
        weight: 169
        cookies: false
        type: ''
        deprecated: false
        demo: projects/get-webhook.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - projects
      summary: Update webhook
      operationId: Projects_updateWebhook
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Webhook unique ID.
          name: webhookId
          required: true
          schema:
            type: string
            x-example: <WEBHOOK_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectsUpdateWebhookRequest'
      responses:
        '200':
          description: Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
      x-appwrite:
        method: updateWebhook
        weight: 170
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-webhook.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - projects
      summary: Delete webhook
      operationId: Projects_deleteWebhook
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Webhook unique ID.
          name: webhookId
          required: true
          schema:
            type: string
            x-example: <WEBHOOK_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteWebhook
        weight: 172
        cookies: false
        type: ''
        deprecated: false
        demo: projects/delete-webhook.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /projects/{projectId}/webhooks/{webhookId}/signature:
    patch:
      tags:
        - projects
      summary: Update webhook signature key
      operationId: Projects_updateWebhookSignature
      security:
        - Project: []
      description: ''
      parameters:
        - description: Project unique ID.
          name: projectId
          required: true
          schema:
            type: string
            x-example: <PROJECT_ID>
          in: path
        - description: Webhook unique ID.
          name: webhookId
          required: true
          schema:
            type: string
            x-example: <WEBHOOK_ID>
          in: path
      responses:
        '200':
          description: Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
      x-appwrite:
        method: updateWebhookSignature
        weight: 171
        cookies: false
        type: ''
        deprecated: false
        demo: projects/update-webhook-signature.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: projects.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /proxy/rules:
    get:
      tags:
        - proxy
      summary: List Rules
      operationId: Proxy_listRules
      security:
        - Project: []
      description: >-
        Get a list of all the proxy rules. You can use the query params to
        filter your results.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/databases#querying-documents).
            Maximum of 100 queries are allowed, each 4096 characters long. You
            may filter on the following attributes: domain, resourceType,
            resourceId, url
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Rule List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proxyRuleList'
      x-appwrite:
        method: listRules
        weight: 305
        cookies: false
        type: ''
        deprecated: false
        demo: proxy/list-rules.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/proxy/list-rules.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: rules.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - proxy
      summary: Create Rule
      operationId: Proxy_createNewRule
      security:
        - Project: []
      description: Create a new proxy rule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyCreateNewRuleRequest'
      responses:
        '201':
          description: Rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proxyRule'
      x-appwrite:
        method: createRule
        weight: 304
        cookies: false
        type: ''
        deprecated: false
        demo: proxy/create-rule.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/proxy/create-rule.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: rules.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /proxy/rules/{ruleId}:
    get:
      tags:
        - proxy
      summary: Get Rule
      operationId: Proxy_getRuleById
      security:
        - Project: []
      description: Get a proxy rule by its unique ID.
      parameters:
        - description: Rule ID.
          name: ruleId
          required: true
          schema:
            type: string
            x-example: <RULE_ID>
          in: path
      responses:
        '200':
          description: Rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proxyRule'
      x-appwrite:
        method: getRule
        weight: 306
        cookies: false
        type: ''
        deprecated: false
        demo: proxy/get-rule.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/proxy/get-rule.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: rules.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - proxy
      summary: Delete Rule
      operationId: Proxy_deleteRuleById
      security:
        - Project: []
      description: Delete a proxy rule by its unique ID.
      parameters:
        - description: Rule ID.
          name: ruleId
          required: true
          schema:
            type: string
            x-example: <RULE_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteRule
        weight: 307
        cookies: false
        type: ''
        deprecated: false
        demo: proxy/delete-rule.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/proxy/delete-rule.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: rules.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /proxy/rules/{ruleId}/verification:
    patch:
      tags:
        - proxy
      summary: Update Rule Verification Status
      operationId: Proxy_updateRuleVerificationStatus
      security:
        - Project: []
      description: ''
      parameters:
        - description: Rule ID.
          name: ruleId
          required: true
          schema:
            type: string
            x-example: <RULE_ID>
          in: path
      responses:
        '200':
          description: Rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proxyRule'
      x-appwrite:
        method: updateRuleVerification
        weight: 308
        cookies: false
        type: ''
        deprecated: false
        demo: proxy/update-rule-verification.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: rules.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets:
    get:
      tags:
        - storage
      summary: List buckets
      operationId: Storage_listBuckets
      security:
        - Project: []
          Key: []
      description: >-
        Get a list of all the storage buckets. You can use the query params to
        filter your results.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: enabled, name, fileSecurity, maximumFileSize,
            encryption, antivirus
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Buckets List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketList'
      x-appwrite:
        method: listBuckets
        weight: 198
        cookies: false
        type: ''
        deprecated: false
        demo: storage/list-buckets.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/list-buckets.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: buckets.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - storage
      summary: Create bucket
      operationId: Storage_createBucket
      security:
        - Project: []
          Key: []
      description: Create a new storage bucket.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageCreateBucketRequest'
      responses:
        '201':
          description: Bucket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucket'
      x-appwrite:
        method: createBucket
        weight: 197
        cookies: false
        type: ''
        deprecated: false
        demo: storage/create-bucket.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/create-bucket.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: buckets.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets/{bucketId}:
    get:
      tags:
        - storage
      summary: Get bucket
      operationId: Storage_getBucket
      security:
        - Project: []
          Key: []
      description: >-
        Get a storage bucket by its unique ID. This endpoint response returns a
        JSON object with the storage bucket metadata.
      parameters:
        - description: Bucket unique ID.
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
      responses:
        '200':
          description: Bucket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucket'
      x-appwrite:
        method: getBucket
        weight: 199
        cookies: false
        type: ''
        deprecated: false
        demo: storage/get-bucket.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-bucket.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: buckets.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - storage
      summary: Update bucket
      operationId: Storage_updateBucketById
      security:
        - Project: []
          Key: []
      description: Update a storage bucket by its unique ID.
      parameters:
        - description: Bucket unique ID.
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageUpdateBucketByIdRequest'
      responses:
        '200':
          description: Bucket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucket'
      x-appwrite:
        method: updateBucket
        weight: 200
        cookies: false
        type: ''
        deprecated: false
        demo: storage/update-bucket.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/update-bucket.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: buckets.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - storage
      summary: Delete bucket
      operationId: Storage_deleteBucketById
      security:
        - Project: []
          Key: []
      description: Delete a storage bucket by its unique ID.
      parameters:
        - description: Bucket unique ID.
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteBucket
        weight: 201
        cookies: false
        type: ''
        deprecated: false
        demo: storage/delete-bucket.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/delete-bucket.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: buckets.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets/{bucketId}/files:
    get:
      tags:
        - storage
      summary: List files
      operationId: Storage_listFiles
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a list of all the user files. You can use the query params to filter
        your results.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, signature, mimeType, sizeOriginal,
            chunksTotal, chunksUploaded
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Files List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileList'
      x-appwrite:
        method: listFiles
        weight: 203
        cookies: false
        type: ''
        deprecated: false
        demo: storage/list-files.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/list-files.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - storage
      summary: Create file
      operationId: Storage_createFile
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Create a new file. Before using this route, you should create a new
        bucket resource using either a [server
        integration](https://appwrite.io/docs/server/storage#storageCreateBucket)
        API or directly from your Appwrite console.


        Larger files should be uploaded using multiple requests with the
        [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)
        header to send a partial request with a maximum supported chunk of
        `5MB`. The `content-range` header values should always be in bytes.


        When the first request is sent, the server will return the **File**
        object, and the subsequent part request must include the file's **id**
        in `x-appwrite-id` header to allow the server to know that the partial
        upload is for the existing file and not for a new one.


        If you're creating a new file using one of the Appwrite SDKs, all the
        chunking logic will be managed by the SDK internally.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StorageCreateFileRequest'
      responses:
        '201':
          description: File
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
      x-appwrite:
        method: createFile
        weight: 202
        cookies: false
        type: upload
        deprecated: false
        demo: storage/create-file.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/create-file.md
        rate-limit: 60
        rate-time: 60
        rate-key: ip:{ip},method:{method},url:{url},userId:{userId}
        scope: files.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets/{bucketId}/files/{fileId}:
    get:
      tags:
        - storage
      summary: Get file
      operationId: Storage_getFileById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a file by its unique ID. This endpoint response returns a JSON
        object with the file metadata.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: File ID.
          name: fileId
          required: true
          schema:
            type: string
            x-example: <FILE_ID>
          in: path
      responses:
        '200':
          description: File
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
      x-appwrite:
        method: getFile
        weight: 204
        cookies: false
        type: ''
        deprecated: false
        demo: storage/get-file.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - storage
      summary: Update file
      operationId: Storage_updateFileById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Update a file by its unique ID. Only users with write permissions have
        access to update this resource.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: File unique ID.
          name: fileId
          required: true
          schema:
            type: string
            x-example: <FILE_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageUpdateFileByIdRequest'
      responses:
        '200':
          description: File
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
      x-appwrite:
        method: updateFile
        weight: 209
        cookies: false
        type: ''
        deprecated: false
        demo: storage/update-file.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/update-file.md
        rate-limit: 60
        rate-time: 60
        rate-key: ip:{ip},method:{method},url:{url},userId:{userId}
        scope: files.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - storage
      summary: Delete File
      operationId: Storage_deleteFileById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Delete a file by its unique ID. Only users with write permissions have
        access to delete this resource.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: File ID.
          name: fileId
          required: true
          schema:
            type: string
            x-example: <FILE_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteFile
        weight: 210
        cookies: false
        type: ''
        deprecated: false
        demo: storage/delete-file.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/delete-file.md
        rate-limit: 60
        rate-time: 60
        rate-key: ip:{ip},method:{method},url:{url},userId:{userId}
        scope: files.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets/{bucketId}/files/{fileId}/download:
    get:
      tags:
        - storage
      summary: Get file for download
      operationId: Storage_getDownloadFile
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a file content by its unique ID. The endpoint response return with a
        'Content-Disposition: attachment' header that tells the browser to start
        downloading the file to user downloads directory.
      parameters:
        - description: >-
            Storage bucket ID. You can create a new storage bucket using the
            Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: File ID.
          name: fileId
          required: true
          schema:
            type: string
            x-example: <FILE_ID>
          in: path
      responses:
        '200':
          description: File
      x-appwrite:
        method: getFileDownload
        weight: 206
        cookies: false
        type: location
        deprecated: false
        demo: storage/get-file-download.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file-download.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets/{bucketId}/files/{fileId}/preview:
    get:
      tags:
        - storage
      summary: Get file preview
      operationId: Storage_getFilePreviewImage
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a file preview image. Currently, this method supports preview for
        image files (jpg, png, and gif), other supported formats, like pdf,
        docs, slides, and spreadsheets, will return the file icon image. You can
        also pass query string arguments for cutting and resizing your preview
        image. Preview is supported only for image files smaller than 10MB.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: File ID
          name: fileId
          required: true
          schema:
            type: string
            x-example: <FILE_ID>
          in: path
        - description: Resize preview image width, Pass an integer between 0 to 4000.
          name: width
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 0
          in: query
        - description: Resize preview image height, Pass an integer between 0 to 4000.
          name: height
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 0
          in: query
        - description: >-
            Image crop gravity. Can be one of
            center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right
          name: gravity
          required: false
          schema:
            type: string
            x-example: center
            enum:
              - center
              - top-left
              - top
              - top-right
              - left
              - right
              - bottom-left
              - bottom
              - bottom-right
            x-enum-name: ImageGravity
            x-enum-keys: []
            default: center
          in: query
        - description: >-
            Preview image quality. Pass an integer between 0 to 100. Defaults to
            100.
          name: quality
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 100
          in: query
        - description: >-
            Preview image border in pixels. Pass an integer between 0 to 100.
            Defaults to 0.
          name: borderWidth
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 0
          in: query
        - description: >-
            Preview image border color. Use a valid HEX color, no # is needed
            for prefix.
          name: borderColor
          required: false
          schema:
            type: string
            default: ''
          in: query
        - description: >-
            Preview image border radius in pixels. Pass an integer between 0 to
            4000.
          name: borderRadius
          required: false
          schema:
            type: integer
            format: int32
            x-example: 0
            default: 0
          in: query
        - description: >-
            Preview image opacity. Only works with images having an alpha
            channel (like png). Pass a number between 0 to 1.
          name: opacity
          required: false
          schema:
            type: number
            format: float
            x-example: 0
            default: 1
          in: query
        - description: >-
            Preview image rotation in degrees. Pass an integer between -360 and
            360.
          name: rotation
          required: false
          schema:
            type: integer
            format: int32
            x-example: -360
            default: 0
          in: query
        - description: >-
            Preview image background color. Only works with transparent images
            (png). Use a valid HEX color, no # is needed for prefix.
          name: background
          required: false
          schema:
            type: string
            default: ''
          in: query
        - description: Output format type (jpeg, jpg, png, gif and webp).
          name: output
          required: false
          schema:
            type: string
            x-example: jpg
            enum:
              - jpg
              - jpeg
              - gif
              - png
              - webp
            x-enum-name: ImageFormat
            x-enum-keys: []
            default: ''
          in: query
      responses:
        '200':
          description: Image
      x-appwrite:
        method: getFilePreview
        weight: 205
        cookies: false
        type: location
        deprecated: false
        demo: storage/get-file-preview.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file-preview.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/buckets/{bucketId}/files/{fileId}/view:
    get:
      tags:
        - storage
      summary: Get file for view
      operationId: Storage_getFileView
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a file content by its unique ID. This endpoint is similar to the
        download method but returns with no  'Content-Disposition: attachment'
        header.
      parameters:
        - description: >-
            Storage bucket unique ID. You can create a new storage bucket using
            the Storage service [server
            integration](https://appwrite.io/docs/server/storage#createBucket).
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: File ID.
          name: fileId
          required: true
          schema:
            type: string
            x-example: <FILE_ID>
          in: path
      responses:
        '200':
          description: File
      x-appwrite:
        method: getFileView
        weight: 207
        cookies: false
        type: location
        deprecated: false
        demo: storage/get-file-view.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/storage/get-file-view.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/usage:
    get:
      tags:
        - storage
      summary: Get storage usage stats
      operationId: Storage_getUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Date range.
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: StorageUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: StorageUsage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageStorage'
      x-appwrite:
        method: getUsage
        weight: 211
        cookies: false
        type: ''
        deprecated: false
        demo: storage/get-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /storage/{bucketId}/usage:
    get:
      tags:
        - storage
      summary: Get bucket usage stats
      operationId: Storage_getBucketUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Bucket ID.
          name: bucketId
          required: true
          schema:
            type: string
            x-example: <BUCKET_ID>
          in: path
        - description: Date range.
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: StorageUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: UsageBuckets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageBuckets'
      x-appwrite:
        method: getBucketUsage
        weight: 212
        cookies: false
        type: ''
        deprecated: false
        demo: storage/get-bucket-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: files.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams:
    get:
      tags:
        - teams
      summary: List teams
      operationId: Teams_getFilteredTeams
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a list of all the teams in which the current user is a member. You
        can use the parameters to filter your results.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, total, billingPlan
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Teams List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamList'
      x-appwrite:
        method: list
        weight: 214
        cookies: false
        type: ''
        deprecated: false
        demo: teams/list.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/list-teams.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /teams
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - teams
      summary: Create team
      operationId: Teams_createTeam
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Create a new team. The user who creates the team will automatically be
        assigned as the owner of the team. Only the users with the owner role
        can invite new members, add new owners and delete or update the team.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsCreateTeamRequest'
      responses:
        '201':
          description: Team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
      x-appwrite:
        method: create
        weight: 213
        cookies: false
        type: ''
        deprecated: false
        demo: teams/create.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/create-team.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams/{teamId}:
    get:
      tags:
        - teams
      summary: Get team
      operationId: Teams_getById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a team by its ID. All team members have read access for this
        resource.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
      responses:
        '200':
          description: Team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
      x-appwrite:
        method: get
        weight: 215
        cookies: false
        type: ''
        deprecated: false
        demo: teams/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/get-team.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /teams
        offline-key: '{teamId}'
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - teams
      summary: Update name
      operationId: Teams_updateNameById
      security:
        - Project: []
          Key: []
          JWT: []
      description: Update the team's name by its unique ID.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsUpdateNameByIdRequest'
      responses:
        '200':
          description: Team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
      x-appwrite:
        method: updateName
        weight: 217
        cookies: false
        type: ''
        deprecated: false
        demo: teams/update-name.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team-name.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /teams
        offline-key: '{teamId}'
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - teams
      summary: Delete team
      operationId: Teams_removeById
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Delete a team using its ID. Only team members with the owner role can
        delete the team.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 219
        cookies: false
        type: ''
        deprecated: false
        demo: teams/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/delete-team.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams/{teamId}/logs:
    get:
      tags:
        - teams
      summary: List team logs
      operationId: Teams_listLogs
      security:
        - Project: []
      description: Get the team activity logs list by its unique ID.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listLogs
        weight: 226
        cookies: false
        type: ''
        deprecated: false
        demo: teams/list-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/get-team-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams/{teamId}/memberships:
    get:
      tags:
        - teams
      summary: List team memberships
      operationId: Teams_listMemberships
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Use this endpoint to list a team's members using the team's ID. All team
        members have read access to this endpoint.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: userId, teamId, invited, joined, confirm
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Memberships List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membershipList'
      x-appwrite:
        method: listMemberships
        weight: 221
        cookies: false
        type: ''
        deprecated: false
        demo: teams/list-memberships.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/list-team-members.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /teams/{teamId}/memberships
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - teams
      summary: Create team membership
      operationId: Teams_createMembership
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Invite a new member to join your team. Provide an ID for existing users,
        or invite unregistered users using an email or phone number. If
        initiated from a Client SDK, Appwrite will send an email or sms with a
        link to join the team to the invited user, and an account will be
        created for them if one doesn't exist. If initiated from a Server SDK,
        the new member will be added automatically to the team.


        You only need to provide one of a user ID, email, or phone number.
        Appwrite will prioritize accepting the user ID > email > phone number if
        you provide more than one of these parameters.


        Use the `url` parameter to redirect the user from the invitation email
        to your app. After the user is redirected, use the [Update Team
        Membership
        Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus)
        endpoint to allow the user to accept the invitation to the team. 


        Please note that to avoid a [Redirect
        Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)
        Appwrite will accept the only redirect URLs under the domains you have
        added as a platform on the Appwrite Console.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsCreateMembershipRequest'
      responses:
        '201':
          description: Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membership'
      x-appwrite:
        method: createMembership
        weight: 220
        cookies: false
        type: ''
        deprecated: false
        demo: teams/create-membership.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/create-team-membership.md
        rate-limit: 10
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams/{teamId}/memberships/{membershipId}:
    get:
      tags:
        - teams
      summary: Get team membership
      operationId: Teams_getMembership
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        Get a team member by the membership unique id. All team members have
        read access for this resource.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
        - description: Membership ID.
          name: membershipId
          required: true
          schema:
            type: string
            x-example: <MEMBERSHIP_ID>
          in: path
      responses:
        '200':
          description: Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membership'
      x-appwrite:
        method: getMembership
        weight: 222
        cookies: false
        type: ''
        deprecated: false
        demo: teams/get-membership.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/get-team-member.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.read
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: /teams/{teamId}/memberships
        offline-key: '{membershipId}'
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - teams
      summary: Update membership
      operationId: Teams_updateMembershipRoles
      security:
        - Project: []
          Key: []
          JWT: []
      description: >
        Modify the roles of a team member. Only team members with the owner role
        have access to this endpoint. Learn more about [roles and
        permissions](https://appwrite.io/docs/permissions).
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
        - description: Membership ID.
          name: membershipId
          required: true
          schema:
            type: string
            x-example: <MEMBERSHIP_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsUpdateMembershipRolesRequest'
      responses:
        '200':
          description: Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membership'
      x-appwrite:
        method: updateMembership
        weight: 223
        cookies: false
        type: ''
        deprecated: false
        demo: teams/update-membership.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team-membership.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - teams
      summary: Delete team membership
      operationId: Teams_removeMembership
      security:
        - Project: []
          Key: []
          JWT: []
      description: >-
        This endpoint allows a user to leave a team or for a team owner to
        delete the membership of any other team member. You can also use this
        endpoint to delete a user membership even if it is not accepted.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
        - description: Membership ID.
          name: membershipId
          required: true
          schema:
            type: string
            x-example: <MEMBERSHIP_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteMembership
        weight: 225
        cookies: false
        type: ''
        deprecated: false
        demo: teams/delete-membership.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/delete-team-membership.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams/{teamId}/memberships/{membershipId}/status:
    patch:
      tags:
        - teams
      summary: Update team membership status
      operationId: Teams_updateMembershipStatus
      security:
        - Project: []
          JWT: []
      description: >
        Use this endpoint to allow a user to accept an invitation to join a team
        after being redirected back to your app from the invitation email
        received by the user.


        If the request is successful, a session for the user is automatically
        created.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
        - description: Membership ID.
          name: membershipId
          required: true
          schema:
            type: string
            x-example: <MEMBERSHIP_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsUpdateMembershipStatusRequest'
      responses:
        '200':
          description: Membership
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membership'
      x-appwrite:
        method: updateMembershipStatus
        weight: 224
        cookies: false
        type: ''
        deprecated: false
        demo: teams/update-membership-status.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team-membership-status.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: public
        platforms:
          - client
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /teams/{teamId}/prefs:
    get:
      tags:
        - teams
      summary: Get team preferences
      operationId: Teams_getPrefs
      security:
        - Project: []
          JWT: []
      description: >-
        Get the team's shared preferences by its unique ID. If a preference
        doesn't need to be shared by all team members, prefer storing them in
        [user
        preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
      responses:
        '200':
          description: Preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
      x-appwrite:
        method: getPrefs
        weight: 216
        cookies: false
        type: ''
        deprecated: false
        demo: teams/get-prefs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/get-team-prefs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.read
        platforms:
          - client
          - server
        packaging: false
        offline-model: /teams/{teamId}/prefs
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - teams
      summary: Update preferences
      operationId: Teams_updatePrefsById
      security:
        - Project: []
          JWT: []
      description: >-
        Update the team's preferences by its unique ID. The object you pass is
        stored as is and replaces any previous value. The maximum allowed prefs
        size is 64kB and throws an error if exceeded.
      parameters:
        - description: Team ID.
          name: teamId
          required: true
          schema:
            type: string
            x-example: <TEAM_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamsUpdatePrefsByIdRequest'
      responses:
        '200':
          description: Preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
      x-appwrite:
        method: updatePrefs
        weight: 218
        cookies: false
        type: ''
        deprecated: false
        demo: teams/update-prefs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/teams/update-team-prefs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: teams.write
        platforms:
          - client
          - server
        packaging: false
        offline-model: /teams/{teamId}/prefs
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users:
    get:
      tags:
        - users
      summary: List users
      operationId: Users_listFilteredUsers
      security:
        - Project: []
          Key: []
      description: >-
        Get a list of all the project's users. You can use the query params to
        filter your results.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, email, phone, status, passwordUpdate,
            registration, emailVerification, phoneVerification, labels
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Users List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
      x-appwrite:
        method: list
        weight: 236
        cookies: false
        type: ''
        deprecated: false
        demo: users/list.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-users.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - users
      summary: Create user
      operationId: Users_createNewUser
      security:
        - Project: []
          Key: []
      description: Create a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateNewUserRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: create
        weight: 227
        cookies: false
        type: ''
        deprecated: false
        demo: users/create.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/argon2:
    post:
      tags:
        - users
      summary: Create user with Argon2 password
      operationId: Users_createArgonUser
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the
        [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST
        /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to
        create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateArgonUserRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createArgon2User
        weight: 230
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-argon2user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-argon2-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/bcrypt:
    post:
      tags:
        - users
      summary: Create user with bcrypt password
      operationId: Users_createBcryptPassword
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the
        [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST
        /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to
        create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateBcryptPasswordRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createBcryptUser
        weight: 228
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-bcrypt-user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-bcrypt-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/identities:
    get:
      tags:
        - users
      summary: List Identities
      operationId: Users_listIdentities
      security:
        - Project: []
          Key: []
      description: Get identities for all users.
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: userId, provider, providerUid, providerEmail,
            providerAccessTokenExpiry
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Identities List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identityList'
      x-appwrite:
        method: listIdentities
        weight: 244
        cookies: false
        type: ''
        deprecated: false
        demo: users/list-identities.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-identities.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/identities/{identityId}:
    delete:
      tags:
        - users
      summary: Delete identity
      operationId: Users_deleteIdentityById
      security:
        - Project: []
          Key: []
      description: Delete an identity by its unique ID.
      parameters:
        - description: Identity ID.
          name: identityId
          required: true
          schema:
            type: string
            x-example: <IDENTITY_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteIdentity
        weight: 267
        cookies: false
        type: ''
        deprecated: false
        demo: users/delete-identity.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-identity.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/md5:
    post:
      tags:
        - users
      summary: Create user with MD5 password
      operationId: Users_createMD5User
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the
        [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST
        /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to
        create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateMd5UserRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createMD5User
        weight: 229
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-m-d5user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-md5-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/phpass:
    post:
      tags:
        - users
      summary: Create user with PHPass password
      operationId: Users_createWithPHPass
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the
        [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST
        /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to
        create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateWithPhPassRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createPHPassUser
        weight: 232
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-p-h-pass-user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-phpass-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/scrypt:
    post:
      tags:
        - users
      summary: Create user with Scrypt password
      operationId: Users_createScryptUser
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the
        [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST
        /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to
        create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateScryptUserRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createScryptUser
        weight: 233
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-scrypt-user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-scrypt-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/scrypt-modified:
    post:
      tags:
        - users
      summary: Create user with Scrypt modified password
      operationId: Users_createScryptModifiedUser
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the [Scrypt
        Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc)
        algorithm. Use the [POST
        /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to
        create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateScryptModifiedUserRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createScryptModifiedUser
        weight: 234
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-scrypt-modified-user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-scrypt-modified-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/sha:
    post:
      tags:
        - users
      summary: Create user with SHA password
      operationId: Users_createWithShaPassword
      security:
        - Project: []
          Key: []
      description: >-
        Create a new user. Password provided must be hashed with the
        [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm.
        Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate)
        endpoint to create users with a plain text password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateWithShaPasswordRequest'
      responses:
        '201':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: createSHAUser
        weight: 231
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-s-h-a-user.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-sha-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/usage:
    get:
      tags:
        - users
      summary: Get users usage stats
      operationId: Users_getUsageStats
      security:
        - Project: []
      description: ''
      parameters:
        - description: Date range.
          name: range
          required: false
          schema:
            type: string
            x-example: 24h
            enum:
              - 24h
              - 30d
              - 90d
            x-enum-name: UserUsageRange
            x-enum-keys:
              - Twenty Four Hours
              - Thirty Days
              - Ninety Days
            default: 30d
          in: query
      responses:
        '200':
          description: UsageUsers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usageUsers'
      x-appwrite:
        method: getUsage
        weight: 268
        cookies: false
        type: ''
        deprecated: false
        demo: users/get-usage.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user
      operationId: Users_getUserById
      security:
        - Project: []
          Key: []
      description: Get a user by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: get
        weight: 237
        cookies: false
        type: ''
        deprecated: false
        demo: users/get.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - users
      summary: Delete user
      operationId: Users_deleteById
      security:
        - Project: []
          Key: []
      description: >-
        Delete a user by its unique ID, thereby releasing it's ID. Since ID is
        released and can be reused, all user-related resources like documents or
        storage files should be deleted before user deletion. If you want to
        keep ID reserved, use the
        [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus)
        endpoint instead.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: delete
        weight: 265
        cookies: false
        type: ''
        deprecated: false
        demo: users/delete.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/email:
    patch:
      tags:
        - users
      summary: Update email
      operationId: Users_updateEmailById
      security:
        - Project: []
          Key: []
      description: Update the user email by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateEmailByIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateEmail
        weight: 250
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-email.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-email.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/labels:
    put:
      tags:
        - users
      summary: Update user labels
      operationId: Users_updateLabelsByUserId
      security:
        - Project: []
          Key: []
      description: >-
        Update the user labels by its unique ID. 


        Labels can be used to grant access to resources. While teams are a way
        for user's to share access to a resource, labels can be defined by the
        developer to grant access without an invitation. See the [Permissions
        docs](https://appwrite.io/docs/permissions) for more info.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateLabelsByUserIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateLabels
        weight: 246
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-labels.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-labels.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/logs:
    get:
      tags:
        - users
      summary: List user logs
      operationId: Users_getLogsByUserId
      security:
        - Project: []
          Key: []
      description: Get the user activity logs list by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Only supported methods
            are limit and offset
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Logs List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logList'
      x-appwrite:
        method: listLogs
        weight: 242
        cookies: false
        type: ''
        deprecated: false
        demo: users/list-logs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-user-logs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/memberships:
    get:
      tags:
        - users
      summary: List user memberships
      operationId: Users_getMembershipsById
      security:
        - Project: []
          Key: []
      description: Get the user membership list by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: Memberships List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membershipList'
      x-appwrite:
        method: listMemberships
        weight: 241
        cookies: false
        type: ''
        deprecated: false
        demo: users/list-memberships.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-user-memberships.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/mfa:
    patch:
      tags:
        - users
      summary: Update MFA
      operationId: Users_updateMfaStatus
      security:
        - Project: []
          Key: []
      description: Enable or disable MFA on a user account.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateMfaStatusRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateMfa
        weight: 255
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-mfa.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-mfa.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/mfa/authenticators/{type}:
    delete:
      tags:
        - users
      summary: Delete Authenticator
      operationId: Users_deleteAuthenticator
      security:
        - Project: []
          Key: []
      description: Delete an authenticator app.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: Type of authenticator.
          name: type
          required: true
          schema:
            type: string
            x-example: totp
            enum:
              - totp
            x-enum-name: AuthenticatorType
            x-enum-keys: []
          in: path
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: deleteMfaAuthenticator
        weight: 260
        cookies: false
        type: ''
        deprecated: false
        demo: users/delete-mfa-authenticator.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-mfa-authenticator.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/mfa/factors:
    get:
      tags:
        - users
      summary: List Factors
      operationId: Users_listMfaFactors
      security:
        - Project: []
          Key: []
      description: List the factors available on the account to be used as a MFA challange.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: MFAFactors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaFactors'
      x-appwrite:
        method: listMfaFactors
        weight: 256
        cookies: false
        type: ''
        deprecated: false
        demo: users/list-mfa-factors.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-mfa-factors.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/mfa/recovery-codes:
    get:
      tags:
        - users
      summary: Get MFA Recovery Codes
      operationId: Users_getMfaRecoveryCodes
      security:
        - Project: []
          Key: []
      description: >-
        Get recovery codes that can be used as backup for MFA flow by User ID.
        Before getting codes, they must be generated using
        [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)
        method.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: MFA Recovery Codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaRecoveryCodes'
      x-appwrite:
        method: getMfaRecoveryCodes
        weight: 257
        cookies: false
        type: ''
        deprecated: false
        demo: users/get-mfa-recovery-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-mfa-recovery-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    put:
      tags:
        - users
      summary: Regenerate MFA Recovery Codes
      operationId: Users_regenerateMfaRecoveryCodesByUserId
      security:
        - Project: []
          Key: []
      description: >-
        Regenerate recovery codes that can be used as backup for MFA flow by
        User ID. Before regenerating codes, they must be first generated using
        [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)
        method.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: MFA Recovery Codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaRecoveryCodes'
      x-appwrite:
        method: updateMfaRecoveryCodes
        weight: 259
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-mfa-recovery-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-mfa-recovery-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - users
      summary: Create MFA Recovery Codes
      operationId: Users_createMfaRecoveryCodes
      security:
        - Project: []
          Key: []
      description: >-
        Generate recovery codes used as backup for MFA flow for User ID.
        Recovery codes can be used as a MFA verification type in
        [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)
        method by client SDK.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '201':
          description: MFA Recovery Codes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaRecoveryCodes'
      x-appwrite:
        method: createMfaRecoveryCodes
        weight: 258
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-mfa-recovery-codes.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-mfa-recovery-codes.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/name:
    patch:
      tags:
        - users
      summary: Update name
      operationId: Users_updateNameById
      security:
        - Project: []
          Key: []
      description: Update the user name by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateNameByIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateName
        weight: 248
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-name.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-name.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/password:
    patch:
      tags:
        - users
      summary: Update password
      operationId: Users_updatePasswordByUserId
      security:
        - Project: []
          Key: []
      description: Update the user password by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdatePasswordByUserIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updatePassword
        weight: 249
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-password.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-password.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/phone:
    patch:
      tags:
        - users
      summary: Update phone
      operationId: Users_updatePhoneByUserId
      security:
        - Project: []
          Key: []
      description: Update the user phone by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdatePhoneByUserIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updatePhone
        weight: 251
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-phone.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-phone.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/prefs:
    get:
      tags:
        - users
      summary: Get user preferences
      operationId: Users_getUserPrefsById
      security:
        - Project: []
          Key: []
      description: Get the user preferences by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: Preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
      x-appwrite:
        method: getPrefs
        weight: 238
        cookies: false
        type: ''
        deprecated: false
        demo: users/get-prefs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user-prefs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - users
      summary: Update user preferences
      operationId: Users_updatePrefsById
      security:
        - Project: []
          Key: []
      description: >-
        Update the user preferences by its unique ID. The object you pass is
        stored as is, and replaces any previous value. The maximum allowed prefs
        size is 64kB and throws error if exceeded.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdatePrefsByIdRequest'
      responses:
        '200':
          description: Preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences'
      x-appwrite:
        method: updatePrefs
        weight: 253
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-prefs.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-prefs.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/sessions:
    get:
      tags:
        - users
      summary: List user sessions
      operationId: Users_listSessionsByUserId
      security:
        - Project: []
          Key: []
      description: Get the user sessions list by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '200':
          description: Sessions List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sessionList'
      x-appwrite:
        method: listSessions
        weight: 240
        cookies: false
        type: ''
        deprecated: false
        demo: users/list-sessions.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-user-sessions.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.read
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - users
      summary: Create session
      operationId: Users_createSession
      security:
        - Project: []
          Key: []
      description: >-
        Creates a session for a user. Returns an immediately usable session
        object.


        If you want to generate a token for a custom authentication flow, use
        the [POST
        /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken)
        endpoint.
      parameters:
        - description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '201':
          description: Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
      x-appwrite:
        method: createSession
        weight: 261
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-session.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - users
      summary: Delete user sessions
      operationId: Users_deleteSessionsById
      security:
        - Project: []
          Key: []
      description: Delete all user's sessions by using the user's unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteSessions
        weight: 264
        cookies: false
        type: ''
        deprecated: false
        demo: users/delete-sessions.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-user-sessions.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/sessions/{sessionId}:
    delete:
      tags:
        - users
      summary: Delete user session
      operationId: Users_deleteSessionByUserIdAndSessionId
      security:
        - Project: []
          Key: []
      description: Delete a user sessions by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: Session ID.
          name: sessionId
          required: true
          schema:
            type: string
            x-example: <SESSION_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteSession
        weight: 263
        cookies: false
        type: ''
        deprecated: false
        demo: users/delete-session.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-user-session.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/status:
    patch:
      tags:
        - users
      summary: Update user status
      operationId: Users_updateStatusByUserId
      security:
        - Project: []
          Key: []
      description: >-
        Update the user status by its unique ID. Use this endpoint as an
        alternative to deleting a user if you want to keep user's ID reserved.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateStatusByUserIdRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateStatus
        weight: 245
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-status.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-status.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/targets:
    get:
      tags:
        - users
      summary: List User Targets
      operationId: Users_listTargets
      security:
        - Project: []
          Key: []
      description: List the messaging targets that are associated with a user.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: name, email, phone, status, passwordUpdate,
            registration, emailVerification, phoneVerification, labels
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
      responses:
        '200':
          description: Target list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/targetList'
      x-appwrite:
        method: listTargets
        weight: 243
        cookies: false
        type: ''
        deprecated: false
        demo: users/list-targets.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/list-user-targets.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.read
        platforms:
          - server
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - users
      summary: Create User Target
      operationId: Users_createMessagingTarget
      security:
        - Project: []
          Key: []
      description: Create a messaging target.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersCreateMessagingTargetRequest'
      responses:
        '201':
          description: Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/target'
      x-appwrite:
        method: createTarget
        weight: 235
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-target.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-target.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.write
        platforms:
          - server
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/targets/{targetId}:
    get:
      tags:
        - users
      summary: Get User Target
      operationId: Users_getTarget
      security:
        - Project: []
          Key: []
      description: Get a user's push notification target by ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: Target ID.
          name: targetId
          required: true
          schema:
            type: string
            x-example: <TARGET_ID>
          in: path
      responses:
        '200':
          description: Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/target'
      x-appwrite:
        method: getTarget
        weight: 239
        cookies: false
        type: ''
        deprecated: false
        demo: users/get-target.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/get-user-target.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.read
        platforms:
          - server
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    patch:
      tags:
        - users
      summary: Update User target
      operationId: Users_updateMessagingTarget
      security:
        - Project: []
          Key: []
      description: Update a messaging target.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: Target ID.
          name: targetId
          required: true
          schema:
            type: string
            x-example: <TARGET_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateMessagingTargetRequest'
      responses:
        '200':
          description: Target
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/target'
      x-appwrite:
        method: updateTarget
        weight: 254
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-target.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-target.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.write
        platforms:
          - server
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - users
      summary: Delete user target
      operationId: Users_deleteTargetMessaging
      security:
        - Project: []
          Key: []
      description: Delete a messaging target.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
        - description: Target ID.
          name: targetId
          required: true
          schema:
            type: string
            x-example: <TARGET_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteTarget
        weight: 266
        cookies: false
        type: ''
        deprecated: false
        demo: users/delete-target.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/delete-target.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: targets.write
        platforms:
          - server
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/tokens:
    post:
      tags:
        - users
      summary: Create token
      operationId: Users_generateToken
      security:
        - Project: []
          Key: []
      description: >-
        Returns a token with a secret key for creating a session. If the
        provided user ID has not be registered, a new user will be created. Use
        the returned user ID and secret and submit a request to the [PUT
        /account/sessions/custom](https://appwrite.io/docs/references/cloud/client-web/account#updateCustomSession)
        endpoint to complete the login process.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersGenerateTokenRequest'
      responses:
        '201':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
      x-appwrite:
        method: createToken
        weight: 262
        cookies: false
        type: ''
        deprecated: false
        demo: users/create-token.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/create-token.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/verification:
    patch:
      tags:
        - users
      summary: Update email verification
      operationId: Users_updateEmailVerificationStatus
      security:
        - Project: []
          Key: []
      description: Update the user email verification status by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdateEmailVerificationStatusRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updateEmailVerification
        weight: 252
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-email-verification.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-email-verification.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /users/{userId}/verification/phone:
    patch:
      tags:
        - users
      summary: Update phone verification
      operationId: Users_updatePhoneVerification
      security:
        - Project: []
          Key: []
      description: Update the user phone verification status by its unique ID.
      parameters:
        - description: User ID.
          name: userId
          required: true
          schema:
            type: string
            x-example: <USER_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUpdatePhoneVerificationRequest'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      x-appwrite:
        method: updatePhoneVerification
        weight: 247
        cookies: false
        type: ''
        deprecated: false
        demo: users/update-phone-verification.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/users/update-user-phone-verification.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: users.write
        platforms:
          - server
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/github/installations/{installationId}/providerRepositories:
    get:
      tags:
        - vcs
      summary: List Repositories
      operationId: Vcs_listProviderRepositories
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Provider Repositories List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/providerRepositoryList'
      x-appwrite:
        method: listRepositories
        weight: 272
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/list-repositories.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    post:
      tags:
        - vcs
      summary: Create repository
      operationId: Vcs_createProviderRepository
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VcsCreateProviderRepositoryRequest'
      responses:
        '200':
          description: ProviderRepository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/providerRepository'
      x-appwrite:
        method: createRepository
        weight: 273
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/create-repository.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}:
    get:
      tags:
        - vcs
      summary: Get repository
      operationId: Vcs_getRepository
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
        - description: Repository Id
          name: providerRepositoryId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_REPOSITORY_ID>
          in: path
      responses:
        '200':
          description: ProviderRepository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/providerRepository'
      x-appwrite:
        method: getRepository
        weight: 274
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/get-repository.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}/branches:
    get:
      tags:
        - vcs
      summary: List Repository Branches
      operationId: Vcs_listRepositoryBranches
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
        - description: Repository Id
          name: providerRepositoryId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_REPOSITORY_ID>
          in: path
      responses:
        '200':
          description: Branches List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branchList'
      x-appwrite:
        method: listRepositoryBranches
        weight: 275
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/list-repository-branches.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/github/installations/{installationId}/providerRepositories/{providerRepositoryId}/detection:
    post:
      tags:
        - vcs
      summary: Detect runtime settings from source code
      operationId: Vcs_detectRuntimeSettings
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
        - description: Repository Id
          name: providerRepositoryId
          required: true
          schema:
            type: string
            x-example: <PROVIDER_REPOSITORY_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VcsDetectRuntimeSettingsRequest'
      responses:
        '200':
          description: Detection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detection'
      x-appwrite:
        method: createRepositoryDetection
        weight: 271
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/create-repository-detection.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/github/installations/{installationId}/repositories/{repositoryId}:
    patch:
      tags:
        - vcs
      summary: Authorize external deployment
      operationId: Vcs_authorizeExternalDeployment
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
        - description: VCS Repository Id
          name: repositoryId
          required: true
          schema:
            type: string
            x-example: <REPOSITORY_ID>
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VcsAuthorizeExternalDeploymentRequest'
      responses:
        '204':
          description: No content
      x-appwrite:
        method: updateExternalDeployments
        weight: 280
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/update-external-deployments.md
        edit: https://github.com/appwrite/appwrite/edit/master
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/installations:
    get:
      tags:
        - vcs
      summary: List installations
      operationId: Vcs_listInstallations
      security:
        - Project: []
      description: ''
      parameters:
        - description: >-
            Array of query strings generated using the Query class provided by
            the SDK. [Learn more about
            queries](https://appwrite.io/docs/queries). Maximum of 100 queries
            are allowed, each 4096 characters long. You may filter on the
            following attributes: provider, organization
          name: queries
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          in: query
        - description: 'Search term to filter your list results. Max length: 256 chars.'
          name: search
          required: false
          schema:
            type: string
            x-example: <SEARCH>
            default: ''
          in: query
      responses:
        '200':
          description: Installations List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installationList'
      x-appwrite:
        method: listInstallations
        weight: 277
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/list-installations.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/vcs/list-installations.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
  /vcs/installations/{installationId}:
    get:
      tags:
        - vcs
      summary: Get installation
      operationId: Vcs_getInstallationById
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
      responses:
        '200':
          description: Installation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installation'
      x-appwrite:
        method: getInstallation
        weight: 278
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/get-installation.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/vcs/get-installation.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.read
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
    delete:
      tags:
        - vcs
      summary: Delete Installation
      operationId: Vcs_deleteInstallation
      security:
        - Project: []
      description: ''
      parameters:
        - description: Installation Id
          name: installationId
          required: true
          schema:
            type: string
            x-example: <INSTALLATION_ID>
          in: path
      responses:
        '204':
          description: No content
      x-appwrite:
        method: deleteInstallation
        weight: 279
        cookies: false
        type: ''
        deprecated: false
        demo: vcs/delete-installation.md
        edit: >-
          https://github.com/appwrite/appwrite/edit/master/docs/references/vcs/delete-installation.md
        rate-limit: 0
        rate-time: 3600
        rate-key: url:{url},ip:{ip}
        scope: vcs.write
        platforms:
          - console
        packaging: false
        offline-model: ''
        offline-key: ''
        offline-response-key: $id
        auth:
          Project: []
components:
  schemas:
    any:
      description: Any
      type: object
      additionalProperties: true
    error:
      description: Error
      type: object
      properties:
        version:
          description: Server version number.
          type: string
          x-example: '1.0'
        message:
          description: Error message.
          type: string
          x-example: Not found
        code:
          description: Error code.
          type: string
          x-example: '404'
        type:
          description: >-
            Error type. You can learn more about all the error types at
            https://appwrite.io/docs/error-codes#errorTypes
          type: string
          x-example: not_found
      required:
        - message
        - code
        - type
        - version
    documentList:
      description: Documents List
      type: object
      properties:
        total:
          description: Total number of documents documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        documents:
          description: List of documents.
          type: array
          items:
            $ref: '#/components/schemas/document'
          x-example: ''
      required:
        - total
        - documents
    collectionList:
      description: Collections List
      type: object
      properties:
        total:
          description: Total number of collections documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        collections:
          description: List of collections.
          type: array
          items:
            $ref: '#/components/schemas/collection'
          x-example: ''
      required:
        - total
        - collections
    databaseList:
      description: Databases List
      type: object
      properties:
        total:
          description: Total number of databases documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        databases:
          description: List of databases.
          type: array
          items:
            $ref: '#/components/schemas/database'
          x-example: ''
      required:
        - total
        - databases
    indexList:
      description: Indexes List
      type: object
      properties:
        total:
          description: Total number of indexes documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        indexes:
          description: List of indexes.
          type: array
          items:
            $ref: '#/components/schemas/index'
          x-example: ''
      required:
        - total
        - indexes
    userList:
      description: Users List
      type: object
      properties:
        total:
          description: Total number of users documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        users:
          description: List of users.
          type: array
          items:
            $ref: '#/components/schemas/user'
          x-example: ''
      required:
        - total
        - users
    sessionList:
      description: Sessions List
      type: object
      properties:
        total:
          description: Total number of sessions documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        sessions:
          description: List of sessions.
          type: array
          items:
            $ref: '#/components/schemas/session'
          x-example: ''
      required:
        - total
        - sessions
    identityList:
      description: Identities List
      type: object
      properties:
        total:
          description: Total number of identities documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        identities:
          description: List of identities.
          type: array
          items:
            $ref: '#/components/schemas/identity'
          x-example: ''
      required:
        - total
        - identities
    logList:
      description: Logs List
      type: object
      properties:
        total:
          description: Total number of logs documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        logs:
          description: List of logs.
          type: array
          items:
            $ref: '#/components/schemas/log'
          x-example: ''
      required:
        - total
        - logs
    fileList:
      description: Files List
      type: object
      properties:
        total:
          description: Total number of files documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        files:
          description: List of files.
          type: array
          items:
            $ref: '#/components/schemas/file'
          x-example: ''
      required:
        - total
        - files
    bucketList:
      description: Buckets List
      type: object
      properties:
        total:
          description: Total number of buckets documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        buckets:
          description: List of buckets.
          type: array
          items:
            $ref: '#/components/schemas/bucket'
          x-example: ''
      required:
        - total
        - buckets
    teamList:
      description: Teams List
      type: object
      properties:
        total:
          description: Total number of teams documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        teams:
          description: List of teams.
          type: array
          items:
            $ref: '#/components/schemas/team'
          x-example: ''
      required:
        - total
        - teams
    membershipList:
      description: Memberships List
      type: object
      properties:
        total:
          description: Total number of memberships documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        memberships:
          description: List of memberships.
          type: array
          items:
            $ref: '#/components/schemas/membership'
          x-example: ''
      required:
        - total
        - memberships
    functionList:
      description: Functions List
      type: object
      properties:
        total:
          description: Total number of functions documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        functions:
          description: List of functions.
          type: array
          items:
            $ref: '#/components/schemas/function'
          x-example: ''
      required:
        - total
        - functions
    installationList:
      description: Installations List
      type: object
      properties:
        total:
          description: Total number of installations documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        installations:
          description: List of installations.
          type: array
          items:
            $ref: '#/components/schemas/installation'
          x-example: ''
      required:
        - total
        - installations
    providerRepositoryList:
      description: Provider Repositories List
      type: object
      properties:
        total:
          description: >-
            Total number of providerRepositories documents that matched your
            query.
          type: integer
          x-example: 5
          format: int32
        providerRepositories:
          description: List of providerRepositories.
          type: array
          items:
            $ref: '#/components/schemas/providerRepository'
          x-example: ''
      required:
        - total
        - providerRepositories
    branchList:
      description: Branches List
      type: object
      properties:
        total:
          description: Total number of branches documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        branches:
          description: List of branches.
          type: array
          items:
            $ref: '#/components/schemas/branch'
          x-example: ''
      required:
        - total
        - branches
    runtimeList:
      description: Runtimes List
      type: object
      properties:
        total:
          description: Total number of runtimes documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        runtimes:
          description: List of runtimes.
          type: array
          items:
            $ref: '#/components/schemas/runtime'
          x-example: ''
      required:
        - total
        - runtimes
    deploymentList:
      description: Deployments List
      type: object
      properties:
        total:
          description: Total number of deployments documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        deployments:
          description: List of deployments.
          type: array
          items:
            $ref: '#/components/schemas/deployment'
          x-example: ''
      required:
        - total
        - deployments
    executionList:
      description: Executions List
      type: object
      properties:
        total:
          description: Total number of executions documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        executions:
          description: List of executions.
          type: array
          items:
            $ref: '#/components/schemas/execution'
          x-example: ''
      required:
        - total
        - executions
    projectList:
      description: Projects List
      type: object
      properties:
        total:
          description: Total number of projects documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        projects:
          description: List of projects.
          type: array
          items:
            $ref: '#/components/schemas/project'
          x-example: ''
      required:
        - total
        - projects
    webhookList:
      description: Webhooks List
      type: object
      properties:
        total:
          description: Total number of webhooks documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        webhooks:
          description: List of webhooks.
          type: array
          items:
            $ref: '#/components/schemas/webhook'
          x-example: ''
      required:
        - total
        - webhooks
    keyList:
      description: API Keys List
      type: object
      properties:
        total:
          description: Total number of keys documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        keys:
          description: List of keys.
          type: array
          items:
            $ref: '#/components/schemas/key'
          x-example: ''
      required:
        - total
        - keys
    platformList:
      description: Platforms List
      type: object
      properties:
        total:
          description: Total number of platforms documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        platforms:
          description: List of platforms.
          type: array
          items:
            $ref: '#/components/schemas/platform'
          x-example: ''
      required:
        - total
        - platforms
    countryList:
      description: Countries List
      type: object
      properties:
        total:
          description: Total number of countries documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        countries:
          description: List of countries.
          type: array
          items:
            $ref: '#/components/schemas/country'
          x-example: ''
      required:
        - total
        - countries
    continentList:
      description: Continents List
      type: object
      properties:
        total:
          description: Total number of continents documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        continents:
          description: List of continents.
          type: array
          items:
            $ref: '#/components/schemas/continent'
          x-example: ''
      required:
        - total
        - continents
    languageList:
      description: Languages List
      type: object
      properties:
        total:
          description: Total number of languages documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        languages:
          description: List of languages.
          type: array
          items:
            $ref: '#/components/schemas/language'
          x-example: ''
      required:
        - total
        - languages
    currencyList:
      description: Currencies List
      type: object
      properties:
        total:
          description: Total number of currencies documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        currencies:
          description: List of currencies.
          type: array
          items:
            $ref: '#/components/schemas/currency'
          x-example: ''
      required:
        - total
        - currencies
    phoneList:
      description: Phones List
      type: object
      properties:
        total:
          description: Total number of phones documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        phones:
          description: List of phones.
          type: array
          items:
            $ref: '#/components/schemas/phone'
          x-example: ''
      required:
        - total
        - phones
    variableList:
      description: Variables List
      type: object
      properties:
        total:
          description: Total number of variables documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        variables:
          description: List of variables.
          type: array
          items:
            $ref: '#/components/schemas/variable'
          x-example: ''
      required:
        - total
        - variables
    proxyRuleList:
      description: Rule List
      type: object
      properties:
        total:
          description: Total number of rules documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        rules:
          description: List of rules.
          type: array
          items:
            $ref: '#/components/schemas/proxyRule'
          x-example: ''
      required:
        - total
        - rules
    localeCodeList:
      description: Locale codes list
      type: object
      properties:
        total:
          description: Total number of localeCodes documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        localeCodes:
          description: List of localeCodes.
          type: array
          items:
            $ref: '#/components/schemas/localeCode'
          x-example: ''
      required:
        - total
        - localeCodes
    providerList:
      description: Provider list
      type: object
      properties:
        total:
          description: Total number of providers documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        providers:
          description: List of providers.
          type: array
          items:
            $ref: '#/components/schemas/provider'
          x-example: ''
      required:
        - total
        - providers
    messageList:
      description: Message list
      type: object
      properties:
        total:
          description: Total number of messages documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        messages:
          description: List of messages.
          type: array
          items:
            $ref: '#/components/schemas/message'
          x-example: ''
      required:
        - total
        - messages
    topicList:
      description: Topic list
      type: object
      properties:
        total:
          description: Total number of topics documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        topics:
          description: List of topics.
          type: array
          items:
            $ref: '#/components/schemas/topic'
          x-example: ''
      required:
        - total
        - topics
    subscriberList:
      description: Subscriber list
      type: object
      properties:
        total:
          description: Total number of subscribers documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        subscribers:
          description: List of subscribers.
          type: array
          items:
            $ref: '#/components/schemas/subscriber'
          x-example: ''
      required:
        - total
        - subscribers
    targetList:
      description: Target list
      type: object
      properties:
        total:
          description: Total number of targets documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        targets:
          description: List of targets.
          type: array
          items:
            $ref: '#/components/schemas/target'
          x-example: ''
      required:
        - total
        - targets
    migrationList:
      description: Migrations List
      type: object
      properties:
        total:
          description: Total number of migrations documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        migrations:
          description: List of migrations.
          type: array
          items:
            $ref: '#/components/schemas/migration'
          x-example: ''
      required:
        - total
        - migrations
    firebaseProjectList:
      description: Migrations Firebase Projects List
      type: object
      properties:
        total:
          description: Total number of projects documents that matched your query.
          type: integer
          x-example: 5
          format: int32
        projects:
          description: List of projects.
          type: array
          items:
            $ref: '#/components/schemas/firebaseProject'
          x-example: ''
      required:
        - total
        - projects
    database:
      description: Database
      type: object
      properties:
        $id:
          description: Database ID.
          type: string
          x-example: 5e5ea5c16897e
        name:
          description: Database name.
          type: string
          x-example: My Database
        $createdAt:
          description: Database creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Database update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        enabled:
          description: >-
            If database is enabled. Can be 'enabled' or 'disabled'. When
            disabled, the database is inaccessible to users, but remains
            accessible to Server SDKs using API keys.
          type: boolean
          x-example: false
      required:
        - $id
        - name
        - $createdAt
        - $updatedAt
        - enabled
    collection:
      description: Collection
      type: object
      properties:
        $id:
          description: Collection ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Collection creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Collection update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $permissions:
          description: >-
            Collection permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          items:
            type: string
          x-example:
            - read("any")
        databaseId:
          description: Database ID.
          type: string
          x-example: 5e5ea5c16897e
        name:
          description: Collection name.
          type: string
          x-example: My Collection
        enabled:
          description: >-
            Collection enabled. Can be 'enabled' or 'disabled'. When disabled,
            the collection is inaccessible to users, but remains accessible to
            Server SDKs using API keys.
          type: boolean
          x-example: false
        documentSecurity:
          description: >-
            Whether document-level permissions are enabled. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: boolean
          x-example: true
        attributes:
          description: Collection attributes.
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/attributeBoolean'
              - $ref: '#/components/schemas/attributeInteger'
              - $ref: '#/components/schemas/attributeFloat'
              - $ref: '#/components/schemas/attributeEmail'
              - $ref: '#/components/schemas/attributeEnum'
              - $ref: '#/components/schemas/attributeUrl'
              - $ref: '#/components/schemas/attributeIp'
              - $ref: '#/components/schemas/attributeDatetime'
              - $ref: '#/components/schemas/attributeRelationship'
              - $ref: '#/components/schemas/attributeString'
          x-example: {}
        indexes:
          description: Collection indexes.
          type: array
          items:
            $ref: '#/components/schemas/index'
          x-example: {}
      required:
        - $id
        - $createdAt
        - $updatedAt
        - $permissions
        - databaseId
        - name
        - enabled
        - documentSecurity
        - attributes
        - indexes
    attributeList:
      description: Attributes List
      type: object
      properties:
        total:
          description: Total number of attributes in the given collection.
          type: integer
          x-example: 5
          format: int32
        attributes:
          description: List of attributes.
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/attributeBoolean'
              - $ref: '#/components/schemas/attributeInteger'
              - $ref: '#/components/schemas/attributeFloat'
              - $ref: '#/components/schemas/attributeEmail'
              - $ref: '#/components/schemas/attributeEnum'
              - $ref: '#/components/schemas/attributeUrl'
              - $ref: '#/components/schemas/attributeIp'
              - $ref: '#/components/schemas/attributeDatetime'
              - $ref: '#/components/schemas/attributeRelationship'
              - $ref: '#/components/schemas/attributeString'
          x-example: ''
      required:
        - total
        - attributes
    attributeString:
      description: AttributeString
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: fullName
        type:
          description: Attribute type.
          type: string
          x-example: string
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        size:
          description: Attribute size.
          type: integer
          x-example: 128
          format: int32
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: default
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
        - size
    attributeInteger:
      description: AttributeInteger
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: count
        type:
          description: Attribute type.
          type: string
          x-example: integer
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        min:
          description: Minimum value to enforce for new documents.
          type: integer
          x-example: 1
          format: int32
          nullable: true
        max:
          description: Maximum value to enforce for new documents.
          type: integer
          x-example: 10
          format: int32
          nullable: true
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: integer
          x-example: 10
          format: int32
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
    attributeFloat:
      description: AttributeFloat
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: percentageCompleted
        type:
          description: Attribute type.
          type: string
          x-example: double
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        min:
          description: Minimum value to enforce for new documents.
          type: number
          x-example: 1.5
          format: double
          nullable: true
        max:
          description: Maximum value to enforce for new documents.
          type: number
          x-example: 10.5
          format: double
          nullable: true
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: number
          x-example: 2.5
          format: double
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
    attributeBoolean:
      description: AttributeBoolean
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: isEnabled
        type:
          description: Attribute type.
          type: string
          x-example: boolean
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: boolean
          x-example: false
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
    attributeEmail:
      description: AttributeEmail
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: userEmail
        type:
          description: Attribute type.
          type: string
          x-example: string
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        format:
          description: String format.
          type: string
          x-example: email
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: default@example.com
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
        - format
    attributeEnum:
      description: AttributeEnum
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: status
        type:
          description: Attribute type.
          type: string
          x-example: string
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        elements:
          description: Array of elements in enumerated type.
          type: array
          items:
            type: string
          x-example: element
        format:
          description: String format.
          type: string
          x-example: enum
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: element
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
        - elements
        - format
    attributeIp:
      description: AttributeIP
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: ipAddress
        type:
          description: Attribute type.
          type: string
          x-example: string
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        format:
          description: String format.
          type: string
          x-example: ip
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: 192.0.2.0
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
        - format
    attributeUrl:
      description: AttributeURL
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: githubUrl
        type:
          description: Attribute type.
          type: string
          x-example: string
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        format:
          description: String format.
          type: string
          x-example: url
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: http://example.com
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
        - format
    attributeDatetime:
      description: AttributeDatetime
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: birthDay
        type:
          description: Attribute type.
          type: string
          x-example: datetime
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        format:
          description: ISO 8601 format.
          type: string
          x-example: datetime
        default:
          description: Default value for attribute when not provided. Only null is optional
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - required
        - format
    attributeRelationship:
      description: AttributeRelationship
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: fullName
        type:
          description: Attribute type.
          type: string
          x-example: string
        status:
          description: >-
            Attribute status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an attribute.
          type: string
          x-example: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: true
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
          nullable: true
        relatedCollection:
          description: The ID of the related collection.
          type: string
          x-example: collection
        relationType:
          description: The type of the relationship.
          type: string
          x-example: oneToOne|oneToMany|manyToOne|manyToMany
        twoWay:
          description: Is the relationship two-way?
          type: boolean
          x-example: false
        twoWayKey:
          description: The key of the two-way relationship.
          type: string
          x-example: string
        onDelete:
          description: How deleting the parent document will propagate to child documents.
          type: string
          x-example: restrict|cascade|setNull
        side:
          description: Whether this is the parent or child side of the relationship
          type: string
          x-example: parent|child
      required:
        - key
        - type
        - status
        - error
        - required
        - relatedCollection
        - relationType
        - twoWay
        - twoWayKey
        - onDelete
        - side
    index:
      description: Index
      type: object
      properties:
        key:
          description: Index Key.
          type: string
          x-example: index1
        type:
          description: Index type.
          type: string
          x-example: primary
        status:
          description: >-
            Index status. Possible values: `available`, `processing`,
            `deleting`, `stuck`, or `failed`
          type: string
          x-example: available
        error:
          description: >-
            Error message. Displays error generated on failure of creating or
            deleting an index.
          type: string
          x-example: string
        attributes:
          description: Index attributes.
          type: array
          items:
            type: string
          x-example: []
        orders:
          description: Index orders.
          type: array
          items:
            type: string
          x-example: []
          nullable: true
      required:
        - key
        - type
        - status
        - error
        - attributes
    document:
      description: Document
      type: object
      properties:
        $id:
          description: Document ID.
          type: string
          x-example: 5e5ea5c16897e
        $collectionId:
          description: Collection ID.
          type: string
          x-example: 5e5ea5c15117e
        $databaseId:
          description: Database ID.
          type: string
          x-example: 5e5ea5c15117e
        $createdAt:
          description: Document creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Document update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $permissions:
          description: >-
            Document permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          items:
            type: string
          x-example:
            - read("any")
      additionalProperties: true
      required:
        - $id
        - $collectionId
        - $databaseId
        - $createdAt
        - $updatedAt
        - $permissions
    log:
      description: Log
      type: object
      properties:
        event:
          description: Event name.
          type: string
          x-example: account.sessions.create
        userId:
          description: User ID.
          type: string
          x-example: 610fc2f985ee0
        userEmail:
          description: User Email.
          type: string
          x-example: john@appwrite.io
        userName:
          description: User Name.
          type: string
          x-example: John Doe
        mode:
          description: API mode when event triggered.
          type: string
          x-example: admin
        ip:
          description: IP session in use when the session was created.
          type: string
          x-example: 127.0.0.1
        time:
          description: Log creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        osCode:
          description: >-
            Operating system code name. View list of [available
            options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
          type: string
          x-example: Mac
        osName:
          description: Operating system name.
          type: string
          x-example: Mac
        osVersion:
          description: Operating system version.
          type: string
          x-example: Mac
        clientType:
          description: Client type.
          type: string
          x-example: browser
        clientCode:
          description: >-
            Client code name. View list of [available
            options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
          type: string
          x-example: CM
        clientName:
          description: Client name.
          type: string
          x-example: Chrome Mobile iOS
        clientVersion:
          description: Client version.
          type: string
          x-example: '84.0'
        clientEngine:
          description: Client engine name.
          type: string
          x-example: WebKit
        clientEngineVersion:
          description: Client engine name.
          type: string
          x-example: 605.1.15
        deviceName:
          description: Device name.
          type: string
          x-example: smartphone
        deviceBrand:
          description: Device brand name.
          type: string
          x-example: Google
        deviceModel:
          description: Device model name.
          type: string
          x-example: Nexus 5
        countryCode:
          description: Country two-character ISO 3166-1 alpha code.
          type: string
          x-example: US
        countryName:
          description: Country name.
          type: string
          x-example: United States
      required:
        - event
        - userId
        - userEmail
        - userName
        - mode
        - ip
        - time
        - osCode
        - osName
        - osVersion
        - clientType
        - clientCode
        - clientName
        - clientVersion
        - clientEngine
        - clientEngineVersion
        - deviceName
        - deviceBrand
        - deviceModel
        - countryCode
        - countryName
    user:
      description: User
      type: object
      properties:
        $id:
          description: User ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: User creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: User update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: User name.
          type: string
          x-example: John Doe
        password:
          description: Hashed user password.
          type: string
          x-example: >-
            $argon2id$v=19$m=2048,t=4,p=3$aUZjLnliVWRINmFNTWMudg$5S+x+7uA31xFnrHFT47yFwcJeaP0w92L/4LdgrVRXxE
          nullable: true
        hash:
          description: Password hashing algorithm.
          type: string
          x-example: argon2
          nullable: true
        hashOptions:
          description: Password hashing algorithm configuration.
          type: object
          x-example: {}
          items:
            oneOf:
              - $ref: '#/components/schemas/algoArgon2'
              - $ref: '#/components/schemas/algoScrypt'
              - $ref: '#/components/schemas/algoScryptModified'
              - $ref: '#/components/schemas/algoBcrypt'
              - $ref: '#/components/schemas/algoPhpass'
              - $ref: '#/components/schemas/algoSha'
              - $ref: '#/components/schemas/algoMd5'
          nullable: true
        registration:
          description: User registration date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        status:
          description: User status. Pass `true` for enabled and `false` for disabled.
          type: boolean
          x-example: true
        labels:
          description: Labels for the user.
          type: array
          items:
            type: string
          x-example:
            - vip
        passwordUpdate:
          description: Password update time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        email:
          description: User email address.
          type: string
          x-example: john@appwrite.io
        phone:
          description: User phone number in E.164 format.
          type: string
          x-example: '+4930901820'
        emailVerification:
          description: Email verification status.
          type: boolean
          x-example: true
        phoneVerification:
          description: Phone verification status.
          type: boolean
          x-example: true
        mfa:
          description: Multi factor authentication status.
          type: boolean
          x-example: true
        prefs:
          description: User preferences as a key-value object
          type: object
          x-example:
            theme: pink
            timezone: UTC
          items:
            $ref: '#/components/schemas/preferences'
        targets:
          description: >-
            A user-owned message receiver. A single user may have multiple e.g.
            emails, phones, and a browser. Each target is registered with a
            single provider.
          type: array
          items:
            $ref: '#/components/schemas/target'
          x-example: []
        accessedAt:
          description: >-
            Most recent access date in ISO 8601 format. This attribute is only
            updated again after 24 hours.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - registration
        - status
        - labels
        - passwordUpdate
        - email
        - phone
        - emailVerification
        - phoneVerification
        - mfa
        - prefs
        - targets
        - accessedAt
    algoMd5:
      description: AlgoMD5
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: md5
      required:
        - type
    algoSha:
      description: AlgoSHA
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: sha
      required:
        - type
    algoPhpass:
      description: AlgoPHPass
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: phpass
      required:
        - type
    algoBcrypt:
      description: AlgoBcrypt
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: bcrypt
      required:
        - type
    algoScrypt:
      description: AlgoScrypt
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: scrypt
        costCpu:
          description: CPU complexity of computed hash.
          type: integer
          x-example: 8
          format: int32
        costMemory:
          description: Memory complexity of computed hash.
          type: integer
          x-example: 14
          format: int32
        costParallel:
          description: Parallelization of computed hash.
          type: integer
          x-example: 1
          format: int32
        length:
          description: Length used to compute hash.
          type: integer
          x-example: 64
          format: int32
      required:
        - type
        - costCpu
        - costMemory
        - costParallel
        - length
    algoScryptModified:
      description: AlgoScryptModified
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: scryptMod
        salt:
          description: Salt used to compute hash.
          type: string
          x-example: UxLMreBr6tYyjQ==
        saltSeparator:
          description: Separator used to compute hash.
          type: string
          x-example: Bw==
        signerKey:
          description: Key used to compute hash.
          type: string
          x-example: >-
            XyEKE9RcTDeLEsL/RjwPDBv/RqDl8fb3gpYEOQaPihbxf1ZAtSOHCjuAAa7Q3oHpCYhXSN9tizHgVOwn6krflQ==
      required:
        - type
        - salt
        - saltSeparator
        - signerKey
    algoArgon2:
      description: AlgoArgon2
      type: object
      properties:
        type:
          description: Algo type.
          type: string
          x-example: argon2
        memoryCost:
          description: Memory used to compute hash.
          type: integer
          x-example: 65536
          format: int32
        timeCost:
          description: Amount of time consumed to compute hash
          type: integer
          x-example: 4
          format: int32
        threads:
          description: Number of threads used to compute hash.
          type: integer
          x-example: 3
          format: int32
      required:
        - type
        - memoryCost
        - timeCost
        - threads
    preferences:
      description: Preferences
      type: object
      additionalProperties: true
    session:
      description: Session
      type: object
      properties:
        $id:
          description: Session ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Session creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        userId:
          description: User ID.
          type: string
          x-example: 5e5bb8c16897e
        expire:
          description: Session expiration date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        provider:
          description: Session Provider.
          type: string
          x-example: email
        providerUid:
          description: Session Provider User ID.
          type: string
          x-example: user@example.com
        providerAccessToken:
          description: Session Provider Access Token.
          type: string
          x-example: MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3
        providerAccessTokenExpiry:
          description: The date of when the access token expires in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        providerRefreshToken:
          description: Session Provider Refresh Token.
          type: string
          x-example: MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3
        ip:
          description: IP in use when the session was created.
          type: string
          x-example: 127.0.0.1
        osCode:
          description: >-
            Operating system code name. View list of [available
            options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
          type: string
          x-example: Mac
        osName:
          description: Operating system name.
          type: string
          x-example: Mac
        osVersion:
          description: Operating system version.
          type: string
          x-example: Mac
        clientType:
          description: Client type.
          type: string
          x-example: browser
        clientCode:
          description: >-
            Client code name. View list of [available
            options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
          type: string
          x-example: CM
        clientName:
          description: Client name.
          type: string
          x-example: Chrome Mobile iOS
        clientVersion:
          description: Client version.
          type: string
          x-example: '84.0'
        clientEngine:
          description: Client engine name.
          type: string
          x-example: WebKit
        clientEngineVersion:
          description: Client engine name.
          type: string
          x-example: 605.1.15
        deviceName:
          description: Device name.
          type: string
          x-example: smartphone
        deviceBrand:
          description: Device brand name.
          type: string
          x-example: Google
        deviceModel:
          description: Device model name.
          type: string
          x-example: Nexus 5
        countryCode:
          description: Country two-character ISO 3166-1 alpha code.
          type: string
          x-example: US
        countryName:
          description: Country name.
          type: string
          x-example: United States
        current:
          description: Returns true if this the current user session.
          type: boolean
          x-example: true
        factors:
          description: Returns a list of active session factors.
          type: array
          items:
            type: string
          x-example:
            - email
        secret:
          description: >-
            Secret used to authenticate the user. Only included if the request
            was made with an API key
          type: string
          x-example: 5e5bb8c16897e
        mfaUpdatedAt:
          description: >-
            Most recent date in ISO 8601 format when the session successfully
            passed MFA challenge.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
      required:
        - $id
        - $createdAt
        - userId
        - expire
        - provider
        - providerUid
        - providerAccessToken
        - providerAccessTokenExpiry
        - providerRefreshToken
        - ip
        - osCode
        - osName
        - osVersion
        - clientType
        - clientCode
        - clientName
        - clientVersion
        - clientEngine
        - clientEngineVersion
        - deviceName
        - deviceBrand
        - deviceModel
        - countryCode
        - countryName
        - current
        - factors
        - secret
        - mfaUpdatedAt
    identity:
      description: Identity
      type: object
      properties:
        $id:
          description: Identity ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Identity creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Identity update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        userId:
          description: User ID.
          type: string
          x-example: 5e5bb8c16897e
        provider:
          description: Identity Provider.
          type: string
          x-example: email
        providerUid:
          description: ID of the User in the Identity Provider.
          type: string
          x-example: 5e5bb8c16897e
        providerEmail:
          description: Email of the User in the Identity Provider.
          type: string
          x-example: user@example.com
        providerAccessToken:
          description: Identity Provider Access Token.
          type: string
          x-example: MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3
        providerAccessTokenExpiry:
          description: The date of when the access token expires in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        providerRefreshToken:
          description: Identity Provider Refresh Token.
          type: string
          x-example: MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3
      required:
        - $id
        - $createdAt
        - $updatedAt
        - userId
        - provider
        - providerUid
        - providerEmail
        - providerAccessToken
        - providerAccessTokenExpiry
        - providerRefreshToken
    token:
      description: Token
      type: object
      properties:
        $id:
          description: Token ID.
          type: string
          x-example: bb8ea5c16897e
        $createdAt:
          description: Token creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        userId:
          description: User ID.
          type: string
          x-example: 5e5ea5c168bb8
        secret:
          description: >-
            Token secret key. This will return an empty string unless the
            response is returned using an API key or as part of a webhook
            payload.
          type: string
          x-example: ''
        expire:
          description: Token expiration date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        phrase:
          description: >-
            Security phrase of a token. Empty if security phrase was not
            requested when creating a token. It includes randomly generated
            phrase which is also sent in the external resource such as email.
          type: string
          x-example: Golden Fox
      required:
        - $id
        - $createdAt
        - userId
        - secret
        - expire
        - phrase
    jwt:
      description: JWT
      type: object
      properties:
        jwt:
          description: JWT encoded string.
          type: string
          x-example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - jwt
    locale:
      description: Locale
      type: object
      properties:
        ip:
          description: User IP address.
          type: string
          x-example: 127.0.0.1
        countryCode:
          description: >-
            Country code in [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character
            format
          type: string
          x-example: US
        country:
          description: Country name. This field support localization.
          type: string
          x-example: United States
        continentCode:
          description: >-
            Continent code. A two character continent code "AF" for Africa, "AN"
            for Antarctica, "AS" for Asia, "EU" for Europe, "NA" for North
            America, "OC" for Oceania, and "SA" for South America.
          type: string
          x-example: NA
        continent:
          description: Continent name. This field support localization.
          type: string
          x-example: North America
        eu:
          description: True if country is part of the European Union.
          type: boolean
          x-example: false
        currency:
          description: >-
            Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217)
            three-character format
          type: string
          x-example: USD
      required:
        - ip
        - countryCode
        - country
        - continentCode
        - continent
        - eu
        - currency
    localeCode:
      description: LocaleCode
      type: object
      properties:
        code:
          description: >-
            Locale codes in [ISO
            639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
          type: string
          x-example: en-us
        name:
          description: Locale name
          type: string
          x-example: US
      required:
        - code
        - name
    file:
      description: File
      type: object
      properties:
        $id:
          description: File ID.
          type: string
          x-example: 5e5ea5c16897e
        bucketId:
          description: Bucket ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: File creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: File update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $permissions:
          description: >-
            File permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          items:
            type: string
          x-example:
            - read("any")
        name:
          description: File name.
          type: string
          x-example: Pink.png
        signature:
          description: File MD5 signature.
          type: string
          x-example: 5d529fd02b544198ae075bd57c1762bb
        mimeType:
          description: File mime type.
          type: string
          x-example: image/png
        sizeOriginal:
          description: File original size in bytes.
          type: integer
          x-example: 17890
          format: int32
        chunksTotal:
          description: Total number of chunks available
          type: integer
          x-example: 17890
          format: int32
        chunksUploaded:
          description: Total number of chunks uploaded
          type: integer
          x-example: 17890
          format: int32
      required:
        - $id
        - bucketId
        - $createdAt
        - $updatedAt
        - $permissions
        - name
        - signature
        - mimeType
        - sizeOriginal
        - chunksTotal
        - chunksUploaded
    bucket:
      description: Bucket
      type: object
      properties:
        $id:
          description: Bucket ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Bucket creation time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Bucket update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $permissions:
          description: >-
            Bucket permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          items:
            type: string
          x-example:
            - read("any")
        fileSecurity:
          description: >-
            Whether file-level security is enabled. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: boolean
          x-example: true
        name:
          description: Bucket name.
          type: string
          x-example: Documents
        enabled:
          description: Bucket enabled.
          type: boolean
          x-example: false
        maximumFileSize:
          description: Maximum file size supported.
          type: integer
          x-example: 100
          format: int32
        allowedFileExtensions:
          description: Allowed file extensions.
          type: array
          items:
            type: string
          x-example:
            - jpg
            - png
        compression:
          description: >-
            Compression algorithm choosen for compression. Will be one of none,
            [gzip](https://en.wikipedia.org/wiki/Gzip), or
            [zstd](https://en.wikipedia.org/wiki/Zstd).
          type: string
          x-example: gzip
        encryption:
          description: Bucket is encrypted.
          type: boolean
          x-example: false
        antivirus:
          description: Virus scanning is enabled.
          type: boolean
          x-example: false
      required:
        - $id
        - $createdAt
        - $updatedAt
        - $permissions
        - fileSecurity
        - name
        - enabled
        - maximumFileSize
        - allowedFileExtensions
        - compression
        - encryption
        - antivirus
    team:
      description: Team
      type: object
      properties:
        $id:
          description: Team ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Team creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Team update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: Team name.
          type: string
          x-example: VIP
        total:
          description: Total number of team members.
          type: integer
          x-example: 7
          format: int32
        prefs:
          description: Team preferences as a key-value object
          type: object
          x-example:
            theme: pink
            timezone: UTC
          items:
            $ref: '#/components/schemas/preferences'
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - total
        - prefs
    membership:
      description: Membership
      type: object
      properties:
        $id:
          description: Membership ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Membership creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Membership update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        userId:
          description: User ID.
          type: string
          x-example: 5e5ea5c16897e
        userName:
          description: User name.
          type: string
          x-example: John Doe
        userEmail:
          description: User email address.
          type: string
          x-example: john@appwrite.io
        teamId:
          description: Team ID.
          type: string
          x-example: 5e5ea5c16897e
        teamName:
          description: Team name.
          type: string
          x-example: VIP
        invited:
          description: Date, the user has been invited to join the team in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        joined:
          description: >-
            Date, the user has accepted the invitation to join the team in ISO
            8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        confirm:
          description: >-
            User confirmation status, true if the user has joined the team or
            false otherwise.
          type: boolean
          x-example: false
        mfa:
          description: >-
            Multi factor authentication status, true if the user has MFA enabled
            or false otherwise.
          type: boolean
          x-example: false
        roles:
          description: User list of roles
          type: array
          items:
            type: string
          x-example:
            - owner
      required:
        - $id
        - $createdAt
        - $updatedAt
        - userId
        - userName
        - userEmail
        - teamId
        - teamName
        - invited
        - joined
        - confirm
        - mfa
        - roles
    function:
      description: Function
      type: object
      properties:
        version:
          description: Version of Open Runtimes used for the function.
          type: string
          x-example: v2
        $id:
          description: Function ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Function creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Function update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        execute:
          description: Execution permissions.
          type: array
          items:
            type: string
          x-example: users
        name:
          description: Function name.
          type: string
          x-example: My Function
        enabled:
          description: Function enabled.
          type: boolean
          x-example: false
        live:
          description: >-
            Is the function deployed with the latest configuration? This is set
            to false if you've changed an environment variables, entrypoint,
            commands, or other settings that needs redeploy to be applied. When
            the value is false, redeploy the function to update it with the
            latest configuration.
          type: boolean
          x-example: false
        logging:
          description: >-
            Whether executions will be logged. When set to false, executions
            will not be logged, but will reduce resource used by your Appwrite
            project.
          type: boolean
          x-example: false
        runtime:
          description: Function execution runtime.
          type: string
          x-example: python-3.8
        deployment:
          description: Function's active deployment ID.
          type: string
          x-example: 5e5ea5c16897e
        vars:
          description: Function variables.
          type: array
          items:
            $ref: '#/components/schemas/variable'
          x-example: []
        events:
          description: Function trigger events.
          type: array
          items:
            type: string
          x-example: account.create
        schedule:
          description: Function execution schedult in CRON format.
          type: string
          x-example: 5 4 * * *
        timeout:
          description: Function execution timeout in seconds.
          type: integer
          x-example: 300
          format: int32
        entrypoint:
          description: The entrypoint file used to execute the deployment.
          type: string
          x-example: index.js
        commands:
          description: The build command used to build the deployment.
          type: string
          x-example: npm install
        installationId:
          description: Function VCS (Version Control System) installation id.
          type: string
          x-example: 6m40at4ejk5h2u9s1hboo
        providerRepositoryId:
          description: VCS (Version Control System) Repository ID
          type: string
          x-example: appwrite
        providerBranch:
          description: VCS (Version Control System) branch name
          type: string
          x-example: main
        providerRootDirectory:
          description: Path to function in VCS (Version Control System) repository
          type: string
          x-example: functions/helloWorld
        providerSilentMode:
          description: >-
            Is VCS (Version Control System) connection is in silent mode? When
            in silence mode, no comments will be posted on the repository pull
            or merge requests
          type: boolean
          x-example: false
      required:
        - $id
        - $createdAt
        - $updatedAt
        - execute
        - name
        - enabled
        - live
        - logging
        - runtime
        - deployment
        - vars
        - events
        - schedule
        - timeout
        - entrypoint
        - commands
        - version
        - installationId
        - providerRepositoryId
        - providerBranch
        - providerRootDirectory
        - providerSilentMode
    installation:
      description: Installation
      type: object
      properties:
        $id:
          description: Function ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Function creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Function update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        provider:
          description: VCS (Version Control System) provider name.
          type: string
          x-example: github
        organization:
          description: VCS (Version Control System) organization name.
          type: string
          x-example: appwrite
        providerInstallationId:
          description: VCS (Version Control System) installation ID.
          type: string
          x-example: '5322'
      required:
        - $id
        - $createdAt
        - $updatedAt
        - provider
        - organization
        - providerInstallationId
    providerRepository:
      description: ProviderRepository
      type: object
      properties:
        id:
          description: VCS (Version Control System) repository ID.
          type: string
          x-example: 5e5ea5c16897e
        name:
          description: VCS (Version Control System) repository name.
          type: string
          x-example: appwrite
        organization:
          description: VCS (Version Control System) organization name
          type: string
          x-example: appwrite
        provider:
          description: VCS (Version Control System) provider name.
          type: string
          x-example: github
        private:
          description: Is VCS (Version Control System) repository private?
          type: boolean
          x-example: true
        runtime:
          description: >-
            Auto-detected runtime suggestion. Empty if getting response of
            getRuntime().
          type: string
          x-example: node
        pushedAt:
          description: Last commit date in ISO 8601 format.
          type: string
          x-example: datetime
      required:
        - id
        - name
        - organization
        - provider
        - private
        - runtime
        - pushedAt
    detection:
      description: Detection
      type: object
      properties:
        runtime:
          description: Runtime
          type: string
          x-example: node
      required:
        - runtime
    branch:
      description: Branch
      type: object
      properties:
        name:
          description: Branch Name.
          type: string
          x-example: main
      required:
        - name
    runtime:
      description: Runtime
      type: object
      properties:
        version:
          description: Runtime version.
          type: string
          x-example: '3.8'
        $id:
          description: Runtime ID.
          type: string
          x-example: python-3.8
        name:
          description: Runtime Name.
          type: string
          x-example: Python
        base:
          description: Base Docker image used to build the runtime.
          type: string
          x-example: python:3.8-alpine
        image:
          description: Image name of Docker Hub.
          type: string
          x-example: appwrite\/runtime-for-python:3.8
        logo:
          description: Name of the logo image.
          type: string
          x-example: python.png
        supports:
          description: List of supported architectures.
          type: array
          items:
            type: string
          x-example: amd64
      required:
        - $id
        - name
        - version
        - base
        - image
        - logo
        - supports
    deployment:
      description: Deployment
      type: object
      properties:
        $id:
          description: Deployment ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Deployment creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Deployment update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        type:
          description: Type of deployment.
          type: string
          x-example: vcs
        resourceId:
          description: Resource ID.
          type: string
          x-example: 5e5ea6g16897e
        resourceType:
          description: Resource type.
          type: string
          x-example: functions
        entrypoint:
          description: The entrypoint file to use to execute the deployment code.
          type: string
          x-example: index.js
        size:
          description: The code size in bytes.
          type: integer
          x-example: 128
          format: int32
        buildId:
          description: The current build ID.
          type: string
          x-example: 5e5ea5c16897e
        activate:
          description: Whether the deployment should be automatically activated.
          type: boolean
          x-example: true
        status:
          description: >-
            The deployment status. Possible values are "processing", "building",
            "waiting", "ready", and "failed".
          type: string
          x-example: ready
        buildLogs:
          description: The build logs.
          type: string
          x-example: Compiling source files...
        buildTime:
          description: The current build time in seconds.
          type: integer
          x-example: 128
          format: int32
        providerRepositoryName:
          description: The name of the vcs provider repository
          type: string
          x-example: database
        providerRepositoryOwner:
          description: The name of the vcs provider repository owner
          type: string
          x-example: utopia
        providerRepositoryUrl:
          description: The url of the vcs provider repository
          type: string
          x-example: https://github.com/vermakhushboo/g4-node-function
        providerBranch:
          description: The branch of the vcs repository
          type: string
          x-example: 0.7.x
        providerCommitHash:
          description: The commit hash of the vcs commit
          type: string
          x-example: 7c3f25d
        providerCommitAuthorUrl:
          description: The url of vcs commit author
          type: string
          x-example: https://github.com/vermakhushboo
        providerCommitAuthor:
          description: The name of vcs commit author
          type: string
          x-example: Khushboo Verma
        providerCommitMessage:
          description: The commit message
          type: string
          x-example: Update index.js
        providerCommitUrl:
          description: The url of the vcs commit
          type: string
          x-example: >-
            https://github.com/vermakhushboo/g4-node-function/commit/60c0416257a9cbcdd96b2d370c38d8f8d150ccfb
        providerBranchUrl:
          description: The branch of the vcs repository
          type: string
          x-example: https://github.com/vermakhushboo/appwrite/tree/0.7.x
      required:
        - $id
        - $createdAt
        - $updatedAt
        - type
        - resourceId
        - resourceType
        - entrypoint
        - size
        - buildId
        - activate
        - status
        - buildLogs
        - buildTime
        - providerRepositoryName
        - providerRepositoryOwner
        - providerRepositoryUrl
        - providerBranch
        - providerCommitHash
        - providerCommitAuthorUrl
        - providerCommitAuthor
        - providerCommitMessage
        - providerCommitUrl
        - providerBranchUrl
    execution:
      description: Execution
      type: object
      properties:
        $id:
          description: Execution ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Execution creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Execution upate date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $permissions:
          description: Execution roles.
          type: array
          items:
            type: string
          x-example:
            - any
        functionId:
          description: Function ID.
          type: string
          x-example: 5e5ea6g16897e
        trigger:
          description: >-
            The trigger that caused the function to execute. Possible values can
            be: `http`, `schedule`, or `event`.
          type: string
          x-example: http
        status:
          description: >-
            The status of the function execution. Possible values can be:
            `waiting`, `processing`, `completed`, or `failed`.
          type: string
          x-example: processing
        requestMethod:
          description: HTTP request method type.
          type: string
          x-example: GET
        requestPath:
          description: HTTP request path and query.
          type: string
          x-example: /articles?id=5
        requestHeaders:
          description: >-
            HTTP response headers as a key-value object. This will return only
            whitelisted headers. All headers are returned if execution is
            created as synchronous.
          type: array
          items:
            $ref: '#/components/schemas/headers'
          x-example:
            - Content-Type: application/json
        responseStatusCode:
          description: HTTP response status code.
          type: integer
          x-example: 200
          format: int32
        responseBody:
          description: >-
            HTTP response body. This will return empty unless execution is
            created as synchronous.
          type: string
          x-example: Developers are awesome.
        responseHeaders:
          description: >-
            HTTP response headers as a key-value object. This will return only
            whitelisted headers. All headers are returned if execution is
            created as synchronous.
          type: array
          items:
            $ref: '#/components/schemas/headers'
          x-example:
            - Content-Type: application/json
        logs:
          description: >-
            Function logs. Includes the last 4,000 characters. This will return
            an empty string unless the response is returned using an API key or
            as part of a webhook payload.
          type: string
          x-example: ''
        errors:
          description: >-
            Function errors. Includes the last 4,000 characters. This will
            return an empty string unless the response is returned using an API
            key or as part of a webhook payload.
          type: string
          x-example: ''
        duration:
          description: Function execution duration in seconds.
          type: number
          x-example: 0.4
          format: double
      required:
        - $id
        - $createdAt
        - $updatedAt
        - $permissions
        - functionId
        - trigger
        - status
        - requestMethod
        - requestPath
        - requestHeaders
        - responseStatusCode
        - responseBody
        - responseHeaders
        - logs
        - errors
        - duration
    project:
      description: Project
      type: object
      properties:
        description:
          description: Project description.
          type: string
          x-example: This is a new project.
        $id:
          description: Project ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Project creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Project update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: Project name.
          type: string
          x-example: New Project
        teamId:
          description: Project team ID.
          type: string
          x-example: '1592981250'
        logo:
          description: Project logo file ID.
          type: string
          x-example: 5f5c451b403cb
        url:
          description: Project website URL.
          type: string
          x-example: 5f5c451b403cb
        legalName:
          description: Company legal name.
          type: string
          x-example: Company LTD.
        legalCountry:
          description: >-
            Country code in [ISO
            3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character
            format.
          type: string
          x-example: US
        legalState:
          description: State name.
          type: string
          x-example: New York
        legalCity:
          description: City name.
          type: string
          x-example: New York City.
        legalAddress:
          description: Company Address.
          type: string
          x-example: 620 Eighth Avenue, New York, NY 10018
        legalTaxId:
          description: Company Tax ID.
          type: string
          x-example: '131102020'
        authDuration:
          description: Session duration in seconds.
          type: integer
          x-example: 60
          format: int32
        authLimit:
          description: Max users allowed. 0 is unlimited.
          type: integer
          x-example: 100
          format: int32
        authSessionsLimit:
          description: Max sessions allowed per user. 100 maximum.
          type: integer
          x-example: 10
          format: int32
        authPasswordHistory:
          description: >-
            Max allowed passwords in the history list per user. Max passwords
            limit allowed in history is 20. Use 0 for disabling password
            history.
          type: integer
          x-example: 5
          format: int32
        authPasswordDictionary:
          description: >-
            Whether or not to check user's password against most commonly used
            passwords.
          type: boolean
          x-example: true
        authPersonalDataCheck:
          description: >-
            Whether or not to check the user password for similarity with their
            personal data.
          type: boolean
          x-example: true
        oAuthProviders:
          description: List of Auth Providers.
          type: array
          items:
            $ref: '#/components/schemas/authProvider'
          x-example:
            - {}
        platforms:
          description: List of Platforms.
          type: array
          items:
            $ref: '#/components/schemas/platform'
          x-example: {}
        webhooks:
          description: List of Webhooks.
          type: array
          items:
            $ref: '#/components/schemas/webhook'
          x-example: {}
        keys:
          description: List of API Keys.
          type: array
          items:
            $ref: '#/components/schemas/key'
          x-example: {}
        smtpEnabled:
          description: Status for custom SMTP
          type: boolean
          x-example: false
        smtpSenderName:
          description: SMTP sender name
          type: string
          x-example: John Appwrite
        smtpSenderEmail:
          description: SMTP sender email
          type: string
          x-example: john@appwrite.io
        smtpReplyTo:
          description: SMTP reply to email
          type: string
          x-example: support@appwrite.io
        smtpHost:
          description: SMTP server host name
          type: string
          x-example: mail.appwrite.io
        smtpPort:
          description: SMTP server port
          type: integer
          x-example: 25
          format: int32
        smtpUsername:
          description: SMTP server username
          type: string
          x-example: emailuser
        smtpPassword:
          description: SMTP server password
          type: string
          x-example: securepassword
        smtpSecure:
          description: SMTP server secure protocol
          type: string
          x-example: tls
        authEmailPassword:
          description: Email/Password auth method status
          type: boolean
          x-example: true
        authUsersAuthMagicURL:
          description: Magic URL auth method status
          type: boolean
          x-example: true
        authEmailOtp:
          description: Email (OTP) auth method status
          type: boolean
          x-example: true
        authAnonymous:
          description: Anonymous auth method status
          type: boolean
          x-example: true
        authInvites:
          description: Invites auth method status
          type: boolean
          x-example: true
        authJWT:
          description: JWT auth method status
          type: boolean
          x-example: true
        authPhone:
          description: Phone auth method status
          type: boolean
          x-example: true
        serviceStatusForAccount:
          description: Account service status
          type: boolean
          x-example: true
        serviceStatusForAvatars:
          description: Avatars service status
          type: boolean
          x-example: true
        serviceStatusForDatabases:
          description: Databases service status
          type: boolean
          x-example: true
        serviceStatusForLocale:
          description: Locale service status
          type: boolean
          x-example: true
        serviceStatusForHealth:
          description: Health service status
          type: boolean
          x-example: true
        serviceStatusForStorage:
          description: Storage service status
          type: boolean
          x-example: true
        serviceStatusForTeams:
          description: Teams service status
          type: boolean
          x-example: true
        serviceStatusForUsers:
          description: Users service status
          type: boolean
          x-example: true
        serviceStatusForFunctions:
          description: Functions service status
          type: boolean
          x-example: true
        serviceStatusForGraphql:
          description: GraphQL service status
          type: boolean
          x-example: true
        serviceStatusForMessaging:
          description: Messaging service status
          type: boolean
          x-example: true
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - description
        - teamId
        - logo
        - url
        - legalName
        - legalCountry
        - legalState
        - legalCity
        - legalAddress
        - legalTaxId
        - authDuration
        - authLimit
        - authSessionsLimit
        - authPasswordHistory
        - authPasswordDictionary
        - authPersonalDataCheck
        - oAuthProviders
        - platforms
        - webhooks
        - keys
        - smtpEnabled
        - smtpSenderName
        - smtpSenderEmail
        - smtpReplyTo
        - smtpHost
        - smtpPort
        - smtpUsername
        - smtpPassword
        - smtpSecure
        - authEmailPassword
        - authUsersAuthMagicURL
        - authEmailOtp
        - authAnonymous
        - authInvites
        - authJWT
        - authPhone
        - serviceStatusForAccount
        - serviceStatusForAvatars
        - serviceStatusForDatabases
        - serviceStatusForLocale
        - serviceStatusForHealth
        - serviceStatusForStorage
        - serviceStatusForTeams
        - serviceStatusForUsers
        - serviceStatusForFunctions
        - serviceStatusForGraphql
        - serviceStatusForMessaging
    webhook:
      description: Webhook
      type: object
      properties:
        security:
          description: Indicated if SSL / TLS Certificate verification is enabled.
          type: boolean
          x-example: true
        $id:
          description: Webhook ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Webhook creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Webhook update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: Webhook name.
          type: string
          x-example: My Webhook
        url:
          description: Webhook URL endpoint.
          type: string
          x-example: https://example.com/webhook
        events:
          description: Webhook trigger events.
          type: array
          items:
            type: string
          x-example: database.collections.update
        httpUser:
          description: HTTP basic authentication username.
          type: string
          x-example: username
        httpPass:
          description: HTTP basic authentication password.
          type: string
          x-example: password
        signatureKey:
          description: Signature key which can be used to validated incoming
          type: string
          x-example: ad3d581ca230e2b7059c545e5a
        enabled:
          description: Indicates if this webhook is enabled.
          type: boolean
          x-example: true
        logs:
          description: Webhook error logs from the most recent failure.
          type: string
          x-example: Failed to connect to remote server.
        attempts:
          description: Number of consecutive failed webhook attempts.
          type: integer
          x-example: 10
          format: int32
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - url
        - events
        - security
        - httpUser
        - httpPass
        - signatureKey
        - enabled
        - logs
        - attempts
    key:
      description: Key
      type: object
      properties:
        $id:
          description: Key ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Key creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Key update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: Key name.
          type: string
          x-example: My API Key
        expire:
          description: Key expiration date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        scopes:
          description: Allowed permission scopes.
          type: array
          items:
            type: string
          x-example: users.read
        secret:
          description: Secret key.
          type: string
          x-example: 919c2d18fb5d4...a2ae413da83346ad2
        accessedAt:
          description: >-
            Most recent access date in ISO 8601 format. This attribute is only
            updated again after 24 hours.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        sdks:
          description: List of SDK user agents that used this key.
          type: array
          items:
            type: string
          x-example: appwrite:flutter
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - expire
        - scopes
        - secret
        - accessedAt
        - sdks
    authProvider:
      description: AuthProvider
      type: object
      properties:
        key:
          description: Auth Provider.
          type: string
          x-example: github
        name:
          description: Auth Provider name.
          type: string
          x-example: GitHub
        appId:
          description: OAuth 2.0 application ID.
          type: string
          x-example: '259125845563242502'
        secret:
          description: >-
            OAuth 2.0 application secret. Might be JSON string if provider
            requires extra configuration.
          type: string
          x-example: Bpw_g9c2TGXxfgLshDbSaL8tsCcqgczQ
        enabled:
          description: Auth Provider is active and can be used to create session.
          type: boolean
          x-example: ''
      required:
        - key
        - name
        - appId
        - secret
        - enabled
    platform:
      description: Platform
      type: object
      properties:
        $id:
          description: Platform ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Platform creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Platform update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: Platform name.
          type: string
          x-example: My Web App
        type:
          description: >-
            Platform type. Possible values are: web, flutter-web, flutter-ios,
            flutter-android, ios, android, and unity.
          type: string
          x-example: web
        key:
          description: >-
            Platform Key. iOS bundle ID or Android package name.  Empty string
            for other platforms.
          type: string
          x-example: com.company.appname
        store:
          description: App store or Google Play store ID.
          type: string
          x-example: ''
        hostname:
          description: Web app hostname. Empty string for other platforms.
          type: string
          x-example: true
        httpUser:
          description: HTTP basic authentication username.
          type: string
          x-example: username
        httpPass:
          description: HTTP basic authentication password.
          type: string
          x-example: password
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - type
        - key
        - store
        - hostname
        - httpUser
        - httpPass
    variable:
      description: Variable
      type: object
      properties:
        $id:
          description: Variable ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Variable creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Variable creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        key:
          description: Variable key.
          type: string
          x-example: API_KEY
        value:
          description: Variable value.
          type: string
          x-example: myPa$$word1
        resourceType:
          description: >-
            Service to which the variable belongs. Possible values are
            "project", "function"
          type: string
          x-example: function
        resourceId:
          description: >-
            ID of resource to which the variable belongs. If resourceType is
            "project", it is empty. If resourceType is "function", it is ID of
            the function.
          type: string
          x-example: myAwesomeFunction
      required:
        - $id
        - $createdAt
        - $updatedAt
        - key
        - value
        - resourceType
        - resourceId
    country:
      description: Country
      type: object
      properties:
        name:
          description: Country name.
          type: string
          x-example: United States
        code:
          description: Country two-character ISO 3166-1 alpha code.
          type: string
          x-example: US
      required:
        - name
        - code
    continent:
      description: Continent
      type: object
      properties:
        name:
          description: Continent name.
          type: string
          x-example: Europe
        code:
          description: Continent two letter code.
          type: string
          x-example: EU
      required:
        - name
        - code
    language:
      description: Language
      type: object
      properties:
        name:
          description: Language name.
          type: string
          x-example: Italian
        code:
          description: Language two-character ISO 639-1 codes.
          type: string
          x-example: it
        nativeName:
          description: Language native name.
          type: string
          x-example: Italiano
      required:
        - name
        - code
        - nativeName
    currency:
      description: Currency
      type: object
      properties:
        symbol:
          description: Currency symbol.
          type: string
          x-example: $
        name:
          description: Currency name.
          type: string
          x-example: US dollar
        symbolNative:
          description: Currency native symbol.
          type: string
          x-example: $
        decimalDigits:
          description: Number of decimal digits.
          type: integer
          x-example: 2
          format: int32
        rounding:
          description: Currency digit rounding.
          type: number
          x-example: 0
          format: double
        code:
          description: >-
            Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217)
            three-character format.
          type: string
          x-example: USD
        namePlural:
          description: Currency plural name
          type: string
          x-example: US dollars
      required:
        - symbol
        - name
        - symbolNative
        - decimalDigits
        - rounding
        - code
        - namePlural
    phone:
      description: Phone
      type: object
      properties:
        code:
          description: Phone code.
          type: string
          x-example: '+1'
        countryCode:
          description: Country two-character ISO 3166-1 alpha code.
          type: string
          x-example: US
        countryName:
          description: Country name.
          type: string
          x-example: United States
      required:
        - code
        - countryCode
        - countryName
    healthAntivirus:
      description: Health Antivirus
      type: object
      properties:
        version:
          description: Antivirus version.
          type: string
          x-example: 1.0.0
        status:
          description: >-
            Antivirus status. Possible values can are: `disabled`, `offline`,
            `online`
          type: string
          x-example: online
      required:
        - version
        - status
    healthQueue:
      description: Health Queue
      type: object
      properties:
        size:
          description: Amount of actions in the queue.
          type: integer
          x-example: 8
          format: int32
      required:
        - size
    healthStatus:
      description: Health Status
      type: object
      properties:
        name:
          description: Name of the service.
          type: string
          x-example: database
        ping:
          description: Duration in milliseconds how long the health check took.
          type: integer
          x-example: 128
          format: int32
        status:
          description: 'Service status. Possible values can are: `pass`, `fail`'
          type: string
          x-example: pass
      required:
        - name
        - ping
        - status
    healthCertificate:
      description: Health Certificate
      type: object
      properties:
        name:
          description: Certificate name
          type: string
          x-example: /CN=www.google.com
        subjectSN:
          description: Subject SN
          type: string
          x-example: ''
        issuerOrganisation:
          description: Issuer organisation
          type: string
          x-example: ''
        validFrom:
          description: Valid from
          type: string
          x-example: '1704200998'
        validTo:
          description: Valid to
          type: string
          x-example: '1711458597'
        signatureTypeSN:
          description: Signature type SN
          type: string
          x-example: RSA-SHA256
      required:
        - name
        - subjectSN
        - issuerOrganisation
        - validFrom
        - validTo
        - signatureTypeSN
    healthTime:
      description: Health Time
      type: object
      properties:
        remoteTime:
          description: Current unix timestamp on trustful remote server.
          type: integer
          x-example: 1639490751
          format: int32
        localTime:
          description: Current unix timestamp of local server where Appwrite runs.
          type: integer
          x-example: 1639490844
          format: int32
        diff:
          description: Difference of unix remote and local timestamps in milliseconds.
          type: integer
          x-example: 93
          format: int32
      required:
        - remoteTime
        - localTime
        - diff
    metric:
      description: Metric
      type: object
      properties:
        value:
          description: The value of this metric at the timestamp.
          type: integer
          x-example: 1
          format: int32
        date:
          description: The date at which this metric was aggregated in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
      required:
        - value
        - date
    metricBreakdown:
      description: Metric Breakdown
      type: object
      properties:
        resourceId:
          description: Resource ID.
          type: string
          x-example: 5e5ea5c16897e
        name:
          description: Resource name.
          type: string
          x-example: Documents
        value:
          description: The value of this metric at the timestamp.
          type: integer
          x-example: 1
          format: int32
      required:
        - resourceId
        - name
        - value
    usageDatabases:
      description: UsageDatabases
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        databasesTotal:
          description: Total aggregated number of databases.
          type: integer
          x-example: 0
          format: int32
        collectionsTotal:
          description: Total aggregated number  of collections.
          type: integer
          x-example: 0
          format: int32
        documentsTotal:
          description: Total aggregated number of documents.
          type: integer
          x-example: 0
          format: int32
        databases:
          description: Aggregated number of databases per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        collections:
          description: Aggregated number of collections per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        documents:
          description: Aggregated number of documents per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - databasesTotal
        - collectionsTotal
        - documentsTotal
        - databases
        - collections
        - documents
    usageDatabase:
      description: UsageDatabase
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        collectionsTotal:
          description: Total aggregated number of collections.
          type: integer
          x-example: 0
          format: int32
        documentsTotal:
          description: Total aggregated number of documents.
          type: integer
          x-example: 0
          format: int32
        collections:
          description: Aggregated  number of collections per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        documents:
          description: Aggregated  number of documents per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - collectionsTotal
        - documentsTotal
        - collections
        - documents
    usageCollection:
      description: UsageCollection
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        documentsTotal:
          description: Total aggregated number of of documents.
          type: integer
          x-example: 0
          format: int32
        documents:
          description: Aggregated  number of documents per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - documentsTotal
        - documents
    usageUsers:
      description: UsageUsers
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        usersTotal:
          description: Total aggregated number of statistics of users.
          type: integer
          x-example: 0
          format: int32
        sessionsTotal:
          description: Total aggregated number of active sessions.
          type: integer
          x-example: 0
          format: int32
        users:
          description: Aggregated number of users per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        sessions:
          description: Aggregated number of active sessions  per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - usersTotal
        - sessionsTotal
        - users
        - sessions
    usageStorage:
      description: StorageUsage
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        bucketsTotal:
          description: Total aggregated number of buckets
          type: integer
          x-example: 0
          format: int32
        filesTotal:
          description: Total aggregated number of files.
          type: integer
          x-example: 0
          format: int32
        filesStorageTotal:
          description: Total aggregated number of files storage (in bytes).
          type: integer
          x-example: 0
          format: int32
        buckets:
          description: Aggregated number of buckets per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        files:
          description: Aggregated number of files per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        storage:
          description: Aggregated number of files storage (in bytes) per period .
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - bucketsTotal
        - filesTotal
        - filesStorageTotal
        - buckets
        - files
        - storage
    usageBuckets:
      description: UsageBuckets
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        filesTotal:
          description: Total aggregated number of bucket files.
          type: integer
          x-example: 0
          format: int32
        filesStorageTotal:
          description: Total aggregated number of bucket files storage (in bytes).
          type: integer
          x-example: 0
          format: int32
        files:
          description: Aggregated  number of bucket files per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        storage:
          description: Aggregated  number of bucket storage files (in bytes) per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - filesTotal
        - filesStorageTotal
        - files
        - storage
    usageFunctions:
      description: UsageFunctions
      type: object
      properties:
        range:
          description: Time range of the usage stats.
          type: string
          x-example: 30d
        functionsTotal:
          description: Total aggregated number of functions.
          type: integer
          x-example: 0
          format: int32
        deploymentsTotal:
          description: Total aggregated number of functions deployments.
          type: integer
          x-example: 0
          format: int32
        deploymentsStorageTotal:
          description: Total aggregated sum of functions deployment storage.
          type: integer
          x-example: 0
          format: int32
        buildsTotal:
          description: Total aggregated number of functions build.
          type: integer
          x-example: 0
          format: int32
        buildsStorageTotal:
          description: total aggregated sum of functions build storage.
          type: integer
          x-example: 0
          format: int32
        buildsTimeTotal:
          description: Total aggregated sum of functions build compute time.
          type: integer
          x-example: 0
          format: int32
        executionsTotal:
          description: Total  aggregated number of functions execution.
          type: integer
          x-example: 0
          format: int32
        executionsTimeTotal:
          description: Total aggregated sum of functions  execution compute time.
          type: integer
          x-example: 0
          format: int32
        functions:
          description: Aggregated number of functions per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: 0
        deployments:
          description: Aggregated number of functions deployment per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        deploymentsStorage:
          description: Aggregated number of  functions deployment storage per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        builds:
          description: Aggregated number of functions build per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        buildsStorage:
          description: Aggregated sum of functions build storage per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        buildsTime:
          description: Aggregated sum of  functions build compute time per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        executions:
          description: Aggregated number of  functions execution per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        executionsTime:
          description: Aggregated number of functions execution compute time per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - functionsTotal
        - deploymentsTotal
        - deploymentsStorageTotal
        - buildsTotal
        - buildsStorageTotal
        - buildsTimeTotal
        - executionsTotal
        - executionsTimeTotal
        - functions
        - deployments
        - deploymentsStorage
        - builds
        - buildsStorage
        - buildsTime
        - executions
        - executionsTime
    usageFunction:
      description: UsageFunction
      type: object
      properties:
        range:
          description: The time range of the usage stats.
          type: string
          x-example: 30d
        deploymentsTotal:
          description: Total aggregated number of function deployments.
          type: integer
          x-example: 0
          format: int32
        deploymentsStorageTotal:
          description: Total aggregated sum of function deployments storage.
          type: integer
          x-example: 0
          format: int32
        buildsTotal:
          description: Total aggregated number of function builds.
          type: integer
          x-example: 0
          format: int32
        buildsStorageTotal:
          description: total aggregated sum of function builds storage.
          type: integer
          x-example: 0
          format: int32
        buildsTimeTotal:
          description: Total aggregated sum of function builds compute time.
          type: integer
          x-example: 0
          format: int32
        executionsTotal:
          description: Total  aggregated number of function executions.
          type: integer
          x-example: 0
          format: int32
        executionsTimeTotal:
          description: Total aggregated sum of function  executions compute time.
          type: integer
          x-example: 0
          format: int32
        deployments:
          description: Aggregated number of function deployments per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        deploymentsStorage:
          description: Aggregated number of  function deployments storage per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        builds:
          description: Aggregated number of function builds per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        buildsStorage:
          description: Aggregated sum of function builds storage per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        buildsTime:
          description: Aggregated sum of function builds compute time per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        executions:
          description: Aggregated number of function executions per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        executionsTime:
          description: Aggregated number of function executions compute time per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
      required:
        - range
        - deploymentsTotal
        - deploymentsStorageTotal
        - buildsTotal
        - buildsStorageTotal
        - buildsTimeTotal
        - executionsTotal
        - executionsTimeTotal
        - deployments
        - deploymentsStorage
        - builds
        - buildsStorage
        - buildsTime
        - executions
        - executionsTime
    usageProject:
      description: UsageProject
      type: object
      properties:
        executionsTotal:
          description: Total aggregated number of function executions.
          type: integer
          x-example: 0
          format: int32
        documentsTotal:
          description: Total aggregated  number of documents.
          type: integer
          x-example: 0
          format: int32
        databasesTotal:
          description: Total aggregated number of databases.
          type: integer
          x-example: 0
          format: int32
        usersTotal:
          description: Total aggregated number of users.
          type: integer
          x-example: 0
          format: int32
        filesStorageTotal:
          description: Total aggregated sum of files storage size (in bytes).
          type: integer
          x-example: 0
          format: int32
        bucketsTotal:
          description: Total aggregated number of buckets.
          type: integer
          x-example: 0
          format: int32
        requests:
          description: Aggregated  number of requests per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        network:
          description: Aggregated number of consumed bandwidth per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        users:
          description: Aggregated number of users per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        executions:
          description: Aggregated number of executions per period.
          type: array
          items:
            $ref: '#/components/schemas/metric'
          x-example: []
        executionsBreakdown:
          description: Aggregated breakdown in totals of executions by functions.
          type: array
          items:
            $ref: '#/components/schemas/metricBreakdown'
          x-example: []
        bucketsBreakdown:
          description: Aggregated breakdown in totals of usage by buckets.
          type: array
          items:
            $ref: '#/components/schemas/metricBreakdown'
          x-example: []
      required:
        - executionsTotal
        - documentsTotal
        - databasesTotal
        - usersTotal
        - filesStorageTotal
        - bucketsTotal
        - requests
        - network
        - users
        - executions
        - executionsBreakdown
        - bucketsBreakdown
    headers:
      description: Headers
      type: object
      properties:
        name:
          description: Header name.
          type: string
          x-example: Content-Type
        value:
          description: Header value.
          type: string
          x-example: application/json
      required:
        - name
        - value
    proxyRule:
      description: Rule
      type: object
      properties:
        $id:
          description: Rule ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Rule creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Rule update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        domain:
          description: Domain name.
          type: string
          x-example: appwrite.company.com
        resourceType:
          description: >-
            Action definition for the rule. Possible values are "api",
            "function", or "redirect"
          type: string
          x-example: function
        resourceId:
          description: >-
            ID of resource for the action type. If resourceType is "api" or
            "url", it is empty. If resourceType is "function", it is ID of the
            function.
          type: string
          x-example: myAwesomeFunction
        status:
          description: >-
            Domain verification status. Possible values are "created",
            "verifying", "verified" and "unverified"
          type: string
          x-example: verified
        logs:
          description: >-
            Certificate generation logs. This will return an empty string if
            generation did not run, or succeeded.
          type: string
          x-example: HTTP challegne failed.
        renewAt:
          description: Certificate auto-renewal date in ISO 8601 format.
          type: string
          x-example: datetime
      required:
        - $id
        - $createdAt
        - $updatedAt
        - domain
        - resourceType
        - resourceId
        - status
        - logs
        - renewAt
    smsTemplate:
      description: SmsTemplate
      type: object
      properties:
        type:
          description: Template type
          type: string
          x-example: verification
        locale:
          description: Template locale
          type: string
          x-example: en_us
        message:
          description: Template message
          type: string
          x-example: Click on the link to verify your account.
      required:
        - type
        - locale
        - message
    emailTemplate:
      description: EmailTemplate
      type: object
      properties:
        type:
          description: Template type
          type: string
          x-example: verification
        locale:
          description: Template locale
          type: string
          x-example: en_us
        message:
          description: Template message
          type: string
          x-example: Click on the link to verify your account.
        senderName:
          description: Name of the sender
          type: string
          x-example: My User
        senderEmail:
          description: Email of the sender
          type: string
          x-example: mail@appwrite.io
        replyTo:
          description: Reply to email address
          type: string
          x-example: emails@appwrite.io
        subject:
          description: Email subject
          type: string
          x-example: Please verify your email address
      required:
        - type
        - locale
        - message
        - senderName
        - senderEmail
        - replyTo
        - subject
    consoleVariables:
      description: Console Variables
      type: object
      properties:
        _APP_DOMAIN_TARGET:
          description: CNAME target for your Appwrite custom domains.
          type: string
          x-example: appwrite.io
        _APP_STORAGE_LIMIT:
          description: Maximum file size allowed for file upload in bytes.
          type: integer
          x-example: '30000000'
          format: int32
        _APP_FUNCTIONS_SIZE_LIMIT:
          description: Maximum file size allowed for deployment in bytes.
          type: integer
          x-example: '30000000'
          format: int32
        _APP_USAGE_STATS:
          description: >-
            Defines if usage stats are enabled. This value is set to 'enabled'
            by default, to disable the usage stats set the value to 'disabled'.
          type: string
          x-example: enabled
        _APP_VCS_ENABLED:
          description: Defines if VCS (Version Control System) is enabled.
          type: boolean
          x-example: true
        _APP_DOMAIN_ENABLED:
          description: >-
            Defines if main domain is configured. If so, custom domains can be
            created.
          type: boolean
          x-example: true
        _APP_ASSISTANT_ENABLED:
          description: Defines if AI assistant is enabled.
          type: boolean
          x-example: true
      required:
        - _APP_DOMAIN_TARGET
        - _APP_STORAGE_LIMIT
        - _APP_FUNCTIONS_SIZE_LIMIT
        - _APP_USAGE_STATS
        - _APP_VCS_ENABLED
        - _APP_DOMAIN_ENABLED
        - _APP_ASSISTANT_ENABLED
    mfaChallenge:
      description: MFA Challenge
      type: object
      properties:
        $id:
          description: Token ID.
          type: string
          x-example: bb8ea5c16897e
        $createdAt:
          description: Token creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        userId:
          description: User ID.
          type: string
          x-example: 5e5ea5c168bb8
        expire:
          description: Token expiration date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
      required:
        - $id
        - $createdAt
        - userId
        - expire
    mfaRecoveryCodes:
      description: MFA Recovery Codes
      type: object
      properties:
        recoveryCodes:
          description: Recovery codes.
          type: array
          items:
            type: string
          x-example:
            - a3kf0-s0cl2
            - s0co1-as98s
      required:
        - recoveryCodes
    mfaType:
      description: MFAType
      type: object
      properties:
        secret:
          description: Secret token used for TOTP factor.
          type: string
          x-example: true
        uri:
          description: URI for authenticator apps.
          type: string
          x-example: true
      required:
        - secret
        - uri
    mfaFactors:
      description: MFAFactors
      type: object
      properties:
        totp:
          description: TOTP
          type: boolean
          x-example: true
        phone:
          description: Phone
          type: boolean
          x-example: true
        email:
          description: Email
          type: boolean
          x-example: true
      required:
        - totp
        - phone
        - email
    provider:
      description: Provider
      type: object
      properties:
        $id:
          description: Provider ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Provider creation time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Provider update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: The name for the provider instance.
          type: string
          x-example: Mailgun
        provider:
          description: The name of the provider service.
          type: string
          x-example: mailgun
        enabled:
          description: Is provider enabled?
          type: boolean
          x-example: true
        type:
          description: Type of provider.
          type: string
          x-example: sms
        credentials:
          description: Provider credentials.
          type: object
          x-example:
            key: '123456789'
        options:
          description: Provider options.
          type: object
          x-example:
            from: sender-email@mydomain
          nullable: true
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - provider
        - enabled
        - type
        - credentials
    message:
      description: Message
      type: object
      properties:
        $id:
          description: Message ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Message creation time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Message update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        providerType:
          description: Message provider type.
          type: string
          x-example: email
        topics:
          description: Topic IDs set as recipients.
          type: array
          items:
            type: string
          x-example:
            - 5e5ea5c16897e
        users:
          description: User IDs set as recipients.
          type: array
          items:
            type: string
          x-example:
            - 5e5ea5c16897e
        targets:
          description: Target IDs set as recipients.
          type: array
          items:
            type: string
          x-example:
            - 5e5ea5c16897e
        scheduledAt:
          description: The scheduled time for message.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
          nullable: true
        deliveredAt:
          description: The time when the message was delivered.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
          nullable: true
        deliveryErrors:
          description: Delivery errors if any.
          type: array
          items:
            type: string
          x-example:
            - >-
              Failed to send message to target 5e5ea5c16897e: Credentials not
              valid.
          nullable: true
        deliveredTotal:
          description: Number of recipients the message was delivered to.
          type: integer
          x-example: 1
          format: int32
        data:
          description: Data of the message.
          type: object
          x-example:
            subject: Welcome to Appwrite
            content: Hi there, welcome to Appwrite family.
        status:
          description: Status of delivery.
          type: string
          x-example: >-
            Message status can be one of the following: draft, processing,
            scheduled, sent, or failed.
      required:
        - $id
        - $createdAt
        - $updatedAt
        - providerType
        - topics
        - users
        - targets
        - deliveredTotal
        - data
        - status
    topic:
      description: Topic
      type: object
      properties:
        $id:
          description: Topic ID.
          type: string
          x-example: '259125845563242502'
        $createdAt:
          description: Topic creation time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Topic update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: The name of the topic.
          type: string
          x-example: events
        emailTotal:
          description: Total count of email subscribers subscribed to the topic.
          type: integer
          x-example: 100
          format: int32
        smsTotal:
          description: Total count of SMS subscribers subscribed to the topic.
          type: integer
          x-example: 100
          format: int32
        pushTotal:
          description: Total count of push subscribers subscribed to the topic.
          type: integer
          x-example: 100
          format: int32
        subscribe:
          description: Subscribe permissions.
          type: array
          items:
            type: string
          x-example: users
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - emailTotal
        - smsTotal
        - pushTotal
        - subscribe
    subscriber:
      description: Subscriber
      type: object
      properties:
        $id:
          description: Subscriber ID.
          type: string
          x-example: '259125845563242502'
        $createdAt:
          description: Subscriber creation time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Subscriber update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        targetId:
          description: Target ID.
          type: string
          x-example: '259125845563242502'
        target:
          description: Target.
          type: object
          x-example:
            $id: '259125845563242502'
            $createdAt: '2020-10-15T06:38:00.000+00:00'
            $updatedAt: '2020-10-15T06:38:00.000+00:00'
            providerType: email
            providerId: '259125845563242502'
            name: ageon-app-email
            identifier: random-mail@email.org
            userId: 5e5ea5c16897e
          items:
            $ref: '#/components/schemas/target'
        userId:
          description: Topic ID.
          type: string
          x-example: 5e5ea5c16897e
        userName:
          description: User Name.
          type: string
          x-example: Aegon Targaryen
        topicId:
          description: Topic ID.
          type: string
          x-example: '259125845563242502'
        providerType:
          description: >-
            The target provider type. Can be one of the following: `email`,
            `sms` or `push`.
          type: string
          x-example: email
      required:
        - $id
        - $createdAt
        - $updatedAt
        - targetId
        - target
        - userId
        - userName
        - topicId
        - providerType
    target:
      description: Target
      type: object
      properties:
        $id:
          description: Target ID.
          type: string
          x-example: '259125845563242502'
        $createdAt:
          description: Target creation time in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Target update date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        name:
          description: Target Name.
          type: string
          x-example: Aegon apple token
        userId:
          description: User ID.
          type: string
          x-example: '259125845563242502'
        providerId:
          description: Provider ID.
          type: string
          x-example: '259125845563242502'
          nullable: true
        providerType:
          description: >-
            The target provider type. Can be one of the following: `email`,
            `sms` or `push`.
          type: string
          x-example: email
        identifier:
          description: The target identifier.
          type: string
          x-example: token
      required:
        - $id
        - $createdAt
        - $updatedAt
        - name
        - userId
        - providerType
        - identifier
    migration:
      description: Migration
      type: object
      properties:
        $id:
          description: Migration ID.
          type: string
          x-example: 5e5ea5c16897e
        $createdAt:
          description: Variable creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        $updatedAt:
          description: Variable creation date in ISO 8601 format.
          type: string
          x-example: '2020-10-15T06:38:00.000+00:00'
        status:
          description: 'Migration status ( pending, processing, failed, completed ) '
          type: string
          x-example: pending
        stage:
          description: >-
            Migration stage ( init, processing, source-check, destination-check,
            migrating, finished )
          type: string
          x-example: init
        source:
          description: A string containing the type of source of the migration.
          type: string
          x-example: Appwrite
        resources:
          description: Resources to migration.
          type: array
          items:
            type: string
          x-example:
            - user
        statusCounters:
          description: >-
            A group of counters that represent the total progress of the
            migration.
          type: object
          x-example: >-
            {"Database": {"PENDING": 0, "SUCCESS": 1, "ERROR": 0, "SKIP": 0,
            "PROCESSING": 0, "WARNING": 0}}
        resourceData:
          description: >-
            An array of objects containing the report data of the resources that
            were migrated.
          type: object
          x-example: >-
            [{"resource":"Database","id":"public","status":"SUCCESS","message":""}]
        errors:
          description: All errors that occurred during the migration process.
          type: array
          items:
            type: string
          x-example: []
      required:
        - $id
        - $createdAt
        - $updatedAt
        - status
        - stage
        - source
        - resources
        - statusCounters
        - resourceData
        - errors
    migrationReport:
      description: Migration Report
      type: object
      properties:
        version:
          description: Version of the Appwrite instance to be migrated.
          type: string
          x-example: 1.4.0
        user:
          description: Number of users to be migrated.
          type: integer
          x-example: 20
          format: int32
        team:
          description: Number of teams to be migrated.
          type: integer
          x-example: 20
          format: int32
        database:
          description: Number of databases to be migrated.
          type: integer
          x-example: 20
          format: int32
        document:
          description: Number of documents to be migrated.
          type: integer
          x-example: 20
          format: int32
        file:
          description: Number of files to be migrated.
          type: integer
          x-example: 20
          format: int32
        bucket:
          description: Number of buckets to be migrated.
          type: integer
          x-example: 20
          format: int32
        function:
          description: Number of functions to be migrated.
          type: integer
          x-example: 20
          format: int32
        size:
          description: Size of files to be migrated in mb.
          type: integer
          x-example: 30000
          format: int32
      required:
        - user
        - team
        - database
        - document
        - file
        - bucket
        - function
        - size
        - version
    firebaseProject:
      description: MigrationFirebaseProject
      type: object
      properties:
        projectId:
          description: Project ID.
          type: string
          x-example: my-project
        displayName:
          description: Project display name.
          type: string
          x-example: My Project
      required:
        - projectId
        - displayName
    AccountCreateNewUserRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: New user password. Must be between 8 and 256 chars.
          type: string
          x-example: null
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
    AccountUpdateEmailAddressRequest:
      type: object
      properties:
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password. Must be at least 8 chars.
          type: string
          x-example: password
      required:
        - email
        - password
    AccountUpdateMfaStatusRequest:
      type: object
      properties:
        mfa:
          description: Enable or disable MFA.
          type: boolean
          x-example: false
      required:
        - mfa
    AccountDeleteAuthenticatorByIdRequest:
      type: object
      properties:
        otp:
          description: Valid verification token.
          type: string
          x-example: <OTP>
      required:
        - otp
    AccountVerifyAuthenticatorRequest:
      type: object
      properties:
        otp:
          description: Valid verification token.
          type: string
          x-example: <OTP>
      required:
        - otp
    AccountCreateMfaChallengeRequest:
      type: object
      properties:
        factor:
          description: >-
            Factor used for verification. Must be one of following: `email`,
            `phone`, `totp`, `recoveryCode`.
          type: string
          x-example: email
          enum:
            - email
            - phone
            - totp
            - recoverycode
          x-enum-name: AuthenticationFactor
          x-enum-keys: []
      required:
        - factor
    AccountCompleteMfaChallengeRequest:
      type: object
      properties:
        challengeId:
          description: ID of the challenge.
          type: string
          x-example: <CHALLENGE_ID>
        otp:
          description: Valid verification token.
          type: string
          x-example: <OTP>
      required:
        - challengeId
        - otp
    AccountUpdateNameRequest:
      type: object
      properties:
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - name
    AccountUpdatePasswordRequest:
      type: object
      properties:
        password:
          description: New user password. Must be at least 8 chars.
          type: string
          x-example: null
        oldPassword:
          description: Current user password. Must be at least 8 chars.
          type: string
          x-example: password
      required:
        - password
    AccountUpdatePhoneRequest:
      type: object
      properties:
        phone:
          description: >-
            Phone number. Format this number with a leading '+' and a country
            code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        password:
          description: User password. Must be at least 8 chars.
          type: string
          x-example: password
      required:
        - phone
        - password
    AccountUpdatePrefsOperationRequest:
      type: object
      properties:
        prefs:
          description: Prefs key-value JSON object.
          type: object
          x-example: '{}'
      required:
        - prefs
    AccountCreatePasswordRecoveryRequest:
      type: object
      properties:
        email:
          description: User email.
          type: string
          x-example: email@example.com
        url:
          description: >-
            URL to redirect the user back to your app from the recovery email.
            Only URLs from hostnames in your project platform list are allowed.
            This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          type: string
          x-example: https://example.com
      required:
        - email
        - url
    AccountCompletePasswordRecoveryRequest:
      type: object
      properties:
        userId:
          description: User ID.
          type: string
          x-example: <USER_ID>
        secret:
          description: Valid reset token.
          type: string
          x-example: <SECRET>
        password:
          description: New user password. Must be between 8 and 256 chars.
          type: string
          x-example: null
      required:
        - userId
        - secret
        - password
    AccountCreateEmailPasswordSessionRequest:
      type: object
      properties:
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password. Must be at least 8 chars.
          type: string
          x-example: password
      required:
        - email
        - password
    AccountUpdateMagicUrlSessionRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        secret:
          description: Valid verification token.
          type: string
          x-example: <SECRET>
      required:
        - userId
        - secret
    AccountUpdatePhoneSessionRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        secret:
          description: Valid verification token.
          type: string
          x-example: <SECRET>
      required:
        - userId
        - secret
    AccountCreateSessionFromTokenRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        secret:
          description: >-
            Secret of a token generated by login methods. For example, the
            `createMagicURLToken` or `createPhoneToken` methods.
          type: string
          x-example: <SECRET>
      required:
        - userId
        - secret
    AccountCreatePushTargetRequest:
      type: object
      properties:
        targetId:
          description: >-
            Target ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <TARGET_ID>
        identifier:
          description: The target identifier (token, email, phone etc.)
          type: string
          x-example: <IDENTIFIER>
        providerId:
          description: >-
            Provider ID. Message will be sent to this target from the specified
            provider ID. If no provider ID is set the first setup provider will
            be used.
          type: string
          x-example: <PROVIDER_ID>
      required:
        - targetId
        - identifier
    AccountUpdatePushTargetRequest:
      type: object
      properties:
        identifier:
          description: The target identifier (token, email, phone etc.)
          type: string
          x-example: <IDENTIFIER>
      required:
        - identifier
    AccountCreateEmailTokenRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        phrase:
          description: >-
            Toggle for security phrase. If enabled, email will be send with a
            randomly generated phrase and the phrase will also be included in
            the response. Confirming phrases match increases the security of
            your authentication flow.
          type: boolean
          x-example: false
      required:
        - userId
        - email
    AccountCreateMagicUrlTokenRequest:
      type: object
      properties:
        userId:
          description: >-
            Unique Id. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        url:
          description: >-
            URL to redirect the user back to your app from the magic URL login.
            Only URLs from hostnames in your project platform list are allowed.
            This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          type: string
          x-example: https://example.com
        phrase:
          description: >-
            Toggle for security phrase. If enabled, email will be send with a
            randomly generated phrase and the phrase will also be included in
            the response. Confirming phrases match increases the security of
            your authentication flow.
          type: boolean
          x-example: false
      required:
        - userId
        - email
    AccountCreatePhoneTokenRequest:
      type: object
      properties:
        userId:
          description: >-
            Unique Id. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        phone:
          description: >-
            Phone number. Format this number with a leading '+' and a country
            code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
      required:
        - userId
        - phone
    AccountCreateEmailVerificationRequest:
      type: object
      properties:
        url:
          description: >-
            URL to redirect the user back to your app from the verification
            email. Only URLs from hostnames in your project platform list are
            allowed. This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          type: string
          x-example: https://example.com
      required:
        - url
    AccountCompleteEmailVerificationRequest:
      type: object
      properties:
        userId:
          description: User ID.
          type: string
          x-example: <USER_ID>
        secret:
          description: Valid verification token.
          type: string
          x-example: <SECRET>
      required:
        - userId
        - secret
    AccountConfirmPhoneVerificationRequest:
      type: object
      properties:
        userId:
          description: User ID.
          type: string
          x-example: <USER_ID>
        secret:
          description: Valid verification token.
          type: string
          x-example: <SECRET>
      required:
        - userId
        - secret
    AssistantAskQueryRequest:
      type: object
      properties:
        prompt:
          description: Prompt. A string containing questions asked to the AI assistant.
          type: string
          x-example: <PROMPT>
      required:
        - prompt
    DatabasesCreateNewDatabaseRequest:
      type: object
      properties:
        databaseId:
          description: >-
            Unique Id. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <DATABASE_ID>
        name:
          description: 'Database name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        enabled:
          description: >-
            Is the database enabled? When set to 'disabled', users cannot access
            the database but Server SDKs with an API key can still read and
            write to the database. No data is lost when this is toggled.
          type: boolean
          x-example: false
      required:
        - databaseId
        - name
    DatabasesUpdateByIdRequest:
      type: object
      properties:
        name:
          description: 'Database name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        enabled:
          description: >-
            Is database enabled? When set to 'disabled', users cannot access the
            database but Server SDKs with an API key can still read and write to
            the database. No data is lost when this is toggled.
          type: boolean
          x-example: false
      required:
        - name
    DatabasesCreateCollectionRequest:
      type: object
      properties:
        collectionId:
          description: >-
            Unique Id. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <COLLECTION_ID>
        name:
          description: 'Collection name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        permissions:
          description: >-
            An array of permissions strings. By default, no user is granted with
            any permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
        documentSecurity:
          description: >-
            Enables configuring permissions for individual documents. A user
            needs one of document or collection level permissions to access a
            document. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: boolean
          x-example: false
        enabled:
          description: >-
            Is collection enabled? When set to 'disabled', users cannot access
            the collection but Server SDKs with and API key can still read and
            write to the collection. No data is lost when this is toggled.
          type: boolean
          x-example: false
      required:
        - collectionId
        - name
    DatabasesUpdateCollectionByIdRequest:
      type: object
      properties:
        name:
          description: 'Collection name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        permissions:
          description: >-
            An array of permission strings. By default, the current permissions
            are inherited. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
        documentSecurity:
          description: >-
            Enables configuring permissions for individual documents. A user
            needs one of document or collection level permissions to access a
            document. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: boolean
          x-example: false
        enabled:
          description: >-
            Is collection enabled? When set to 'disabled', users cannot access
            the collection but Server SDKs with and API key can still read and
            write to the collection. No data is lost when this is toggled.
          type: boolean
          x-example: false
      required:
        - name
    DatabasesCreateBooleanAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: boolean
          x-example: false
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesUpdateBooleanAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: boolean
          x-example: false
          x-nullable: true
      required:
        - required
        - default
    DatabasesCreateDatetimeAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for the attribute in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. Cannot be set when attribute is required.
          type: string
          x-example: null
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesPatchDateTimeAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: null
          x-nullable: true
      required:
        - required
        - default
    DatabasesCreateEmailAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: email@example.com
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesUpdateEmailAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: email@example.com
          x-nullable: true
      required:
        - required
        - default
    DatabasesCreateEnumAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        elements:
          description: >-
            Array of elements in enumerated type. Uses length of longest element
            to determine size. Maximum of 100 elements are allowed, each 255
            characters long.
          type: array
          x-example: null
          items:
            type: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: <DEFAULT>
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - elements
        - required
    DatabasesUpdateEnumAttributeRequest:
      type: object
      properties:
        elements:
          description: >-
            Array of elements in enumerated type. Uses length of longest element
            to determine size. Maximum of 100 elements are allowed, each 255
            characters long.
          type: array
          x-example: null
          items:
            type: string
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: <DEFAULT>
          x-nullable: true
      required:
        - elements
        - required
        - default
    DatabasesCreateFloatAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        min:
          description: Minimum value to enforce on new documents
          type: number
          x-example: null
        max:
          description: Maximum value to enforce on new documents
          type: number
          x-example: null
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: number
          x-example: null
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesUpdateFloatAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        min:
          description: Minimum value to enforce on new documents
          type: number
          x-example: null
        max:
          description: Maximum value to enforce on new documents
          type: number
          x-example: null
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: number
          x-example: null
          x-nullable: true
      required:
        - required
        - min
        - max
        - default
    DatabasesCreateIntegerAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        min:
          description: Minimum value to enforce on new documents
          type: integer
          x-example: null
        max:
          description: Maximum value to enforce on new documents
          type: integer
          x-example: null
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: integer
          x-example: null
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesUpdateIntegerAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        min:
          description: Minimum value to enforce on new documents
          type: integer
          x-example: null
        max:
          description: Maximum value to enforce on new documents
          type: integer
          x-example: null
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: integer
          x-example: null
          x-nullable: true
      required:
        - required
        - min
        - max
        - default
    DatabasesCreateIpAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: null
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesUpdateIpAddressAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: null
          x-nullable: true
      required:
        - required
        - default
    DatabasesCreateRelationshipAttributeRequest:
      type: object
      properties:
        relatedCollectionId:
          description: >-
            Related Collection ID. You can create a new collection using the
            Database service [server
            integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).
          type: string
          x-example: <RELATED_COLLECTION_ID>
        type:
          description: Relation type
          type: string
          x-example: oneToOne
          enum:
            - oneToOne
            - manyToOne
            - manyToMany
            - oneToMany
          x-enum-name: RelationshipType
          x-enum-keys: []
        twoWay:
          description: Is Two Way?
          type: boolean
          x-example: false
        key:
          description: Attribute Key.
          type: string
          x-example: null
        twoWayKey:
          description: Two Way Attribute Key.
          type: string
          x-example: null
        onDelete:
          description: Constraints option
          type: string
          x-example: cascade
          enum:
            - cascade
            - restrict
            - setNull
          x-enum-name: RelationMutate
          x-enum-keys: []
      required:
        - relatedCollectionId
        - type
    DatabasesCreateStringAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        size:
          description: Attribute size for text attributes, in number of characters.
          type: integer
          x-example: 1
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: <DEFAULT>
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
        encrypt:
          description: >-
            Toggle encryption for the attribute. Encryption enhances security by
            not storing any plain text values in the database. However,
            encrypted attributes cannot be queried.
          type: boolean
          x-example: false
      required:
        - key
        - size
        - required
    DatabasesUpdateStringAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: <DEFAULT>
          x-nullable: true
      required:
        - required
        - default
    DatabasesCreateUrlAttributeRequest:
      type: object
      properties:
        key:
          description: Attribute Key.
          type: string
          x-example: null
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: https://example.com
        array:
          description: Is attribute an array?
          type: boolean
          x-example: false
      required:
        - key
        - required
    DatabasesUpdateUrlAttributeRequest:
      type: object
      properties:
        required:
          description: Is attribute required?
          type: boolean
          x-example: false
        default:
          description: >-
            Default value for attribute when not provided. Cannot be set when
            attribute is required.
          type: string
          x-example: https://example.com
          x-nullable: true
      required:
        - required
        - default
    DatabasesUpdateRelationshipAttributeRequest:
      type: object
      properties:
        onDelete:
          description: Constraints option
          type: string
          x-example: cascade
          enum:
            - cascade
            - restrict
            - setNull
          x-enum-name: RelationMutate
          x-enum-keys: []
    DatabasesCreateDocumentRequest:
      type: object
      properties:
        documentId:
          description: >-
            Document ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <DOCUMENT_ID>
        data:
          description: Document data as JSON object.
          type: object
          x-example: '{}'
        permissions:
          description: >-
            An array of permissions strings. By default, only the current user
            is granted all permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
      required:
        - documentId
        - data
    DatabasesUpdateDocumentByIdRequest:
      type: object
      properties:
        data:
          description: >-
            Document data as JSON object. Include only attribute and value pairs
            to be updated.
          type: object
          x-example: '{}'
        permissions:
          description: >-
            An array of permissions strings. By default, the current permissions
            are inherited. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
    DatabasesCreateIndexOnAttributesRequest:
      type: object
      properties:
        key:
          description: Index Key.
          type: string
          x-example: null
        type:
          description: Index type.
          type: string
          x-example: key
          enum:
            - key
            - fulltext
            - unique
          x-enum-name: IndexType
          x-enum-keys: []
        attributes:
          description: >-
            Array of attributes to index. Maximum of 100 attributes are allowed,
            each 32 characters long.
          type: array
          x-example: null
          items:
            type: string
        orders:
          description: Array of index orders. Maximum of 100 orders are allowed.
          type: array
          x-example: null
          items:
            type: string
      required:
        - key
        - type
        - attributes
    FunctionsCreateFunctionRequest:
      type: object
      properties:
        functionId:
          description: >-
            Function ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <FUNCTION_ID>
        name:
          description: 'Function name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        runtime:
          description: Execution runtime.
          type: string
          x-example: node-14.5
          enum:
            - node-14.5
            - node-16.0
            - node-18.0
            - node-19.0
            - node-20.0
            - node-21.0
            - php-8.0
            - php-8.1
            - php-8.2
            - php-8.3
            - ruby-3.0
            - ruby-3.1
            - ruby-3.2
            - ruby-3.3
            - python-3.8
            - python-3.9
            - python-3.10
            - python-3.11
            - python-3.12
            - deno-1.40
            - dart-2.15
            - dart-2.16
            - dart-2.17
            - dart-2.18
            - dart-3.0
            - dart-3.1
            - dart-3.3
            - dotnet-3.1
            - dotnet-6.0
            - dotnet-7.0
            - java-8.0
            - java-11.0
            - java-17.0
            - java-18.0
            - java-21.0
            - swift-5.5
            - swift-5.8
            - swift-5.9
            - kotlin-1.6
            - kotlin-1.8
            - kotlin-1.9
            - cpp-17
            - cpp-20
            - bun-1.0
          x-enum-name: null
          x-enum-keys: []
        execute:
          description: >-
            An array of role strings with execution permissions. By default no
            user is granted with any execute permissions. [learn more about
            roles](https://appwrite.io/docs/permissions#permission-roles).
            Maximum of 100 roles are allowed, each 64 characters long.
          type: array
          x-example: '["any"]'
          items:
            type: string
        events:
          description: Events list. Maximum of 100 events are allowed.
          type: array
          x-example: null
          items:
            type: string
        schedule:
          description: Schedule CRON syntax.
          type: string
          x-example: null
        timeout:
          description: Function maximum execution time in seconds.
          type: integer
          x-example: 1
        enabled:
          description: >-
            Is function enabled? When set to 'disabled', users cannot access the
            function but Server SDKs with and API key can still access the
            function. No data is lost when this is toggled.
          type: boolean
          x-example: false
        logging:
          description: >-
            Whether executions will be logged. When set to false, executions
            will not be logged, but will reduce resource used by your Appwrite
            project.
          type: boolean
          x-example: false
        entrypoint:
          description: >-
            Entrypoint File. This path is relative to the
            "providerRootDirectory".
          type: string
          x-example: <ENTRYPOINT>
        commands:
          description: Build Commands.
          type: string
          x-example: <COMMANDS>
        installationId:
          description: >-
            Appwrite Installation ID for VCS (Version Control System)
            deployment.
          type: string
          x-example: <INSTALLATION_ID>
        providerRepositoryId:
          description: Repository ID of the repo linked to the function.
          type: string
          x-example: <PROVIDER_REPOSITORY_ID>
        providerBranch:
          description: Production branch for the repo linked to the function.
          type: string
          x-example: <PROVIDER_BRANCH>
        providerSilentMode:
          description: >-
            Is the VCS (Version Control System) connection in silent mode for
            the repo linked to the function? In silent mode, comments will not
            be made on commits and pull requests.
          type: boolean
          x-example: false
        providerRootDirectory:
          description: Path to function code in the linked repo.
          type: string
          x-example: <PROVIDER_ROOT_DIRECTORY>
        templateRepository:
          description: Repository name of the template.
          type: string
          x-example: <TEMPLATE_REPOSITORY>
        templateOwner:
          description: The name of the owner of the template.
          type: string
          x-example: <TEMPLATE_OWNER>
        templateRootDirectory:
          description: Path to function code in the template repo.
          type: string
          x-example: <TEMPLATE_ROOT_DIRECTORY>
        templateBranch:
          description: Production branch for the repo linked to the function template.
          type: string
          x-example: <TEMPLATE_BRANCH>
      required:
        - functionId
        - name
        - runtime
    FunctionsUpdateByIdRequest:
      type: object
      properties:
        name:
          description: 'Function name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        runtime:
          description: Execution runtime.
          type: string
          x-example: node-14.5
          enum:
            - node-14.5
            - node-16.0
            - node-18.0
            - node-19.0
            - node-20.0
            - node-21.0
            - php-8.0
            - php-8.1
            - php-8.2
            - php-8.3
            - ruby-3.0
            - ruby-3.1
            - ruby-3.2
            - ruby-3.3
            - python-3.8
            - python-3.9
            - python-3.10
            - python-3.11
            - python-3.12
            - deno-1.40
            - dart-2.15
            - dart-2.16
            - dart-2.17
            - dart-2.18
            - dart-3.0
            - dart-3.1
            - dart-3.3
            - dotnet-3.1
            - dotnet-6.0
            - dotnet-7.0
            - java-8.0
            - java-11.0
            - java-17.0
            - java-18.0
            - java-21.0
            - swift-5.5
            - swift-5.8
            - swift-5.9
            - kotlin-1.6
            - kotlin-1.8
            - kotlin-1.9
            - cpp-17
            - cpp-20
            - bun-1.0
          x-enum-name: null
          x-enum-keys: []
        execute:
          description: >-
            An array of role strings with execution permissions. By default no
            user is granted with any execute permissions. [learn more about
            roles](https://appwrite.io/docs/permissions#permission-roles).
            Maximum of 100 roles are allowed, each 64 characters long.
          type: array
          x-example: '["any"]'
          items:
            type: string
        events:
          description: Events list. Maximum of 100 events are allowed.
          type: array
          x-example: null
          items:
            type: string
        schedule:
          description: Schedule CRON syntax.
          type: string
          x-example: null
        timeout:
          description: Maximum execution time in seconds.
          type: integer
          x-example: 1
        enabled:
          description: >-
            Is function enabled? When set to 'disabled', users cannot access the
            function but Server SDKs with and API key can still access the
            function. No data is lost when this is toggled.
          type: boolean
          x-example: false
        logging:
          description: >-
            Whether executions will be logged. When set to false, executions
            will not be logged, but will reduce resource used by your Appwrite
            project.
          type: boolean
          x-example: false
        entrypoint:
          description: >-
            Entrypoint File. This path is relative to the
            "providerRootDirectory".
          type: string
          x-example: <ENTRYPOINT>
        commands:
          description: Build Commands.
          type: string
          x-example: <COMMANDS>
        installationId:
          description: >-
            Appwrite Installation ID for VCS (Version Controle System)
            deployment.
          type: string
          x-example: <INSTALLATION_ID>
        providerRepositoryId:
          description: Repository ID of the repo linked to the function
          type: string
          x-example: <PROVIDER_REPOSITORY_ID>
        providerBranch:
          description: Production branch for the repo linked to the function
          type: string
          x-example: <PROVIDER_BRANCH>
        providerSilentMode:
          description: >-
            Is the VCS (Version Control System) connection in silent mode for
            the repo linked to the function? In silent mode, comments will not
            be made on commits and pull requests.
          type: boolean
          x-example: false
        providerRootDirectory:
          description: Path to function code in the linked repo.
          type: string
          x-example: <PROVIDER_ROOT_DIRECTORY>
      required:
        - name
    FunctionsCreateDeploymentRequest:
      type: object
      properties:
        entrypoint:
          description: Entrypoint File.
          type: string
          x-example: <ENTRYPOINT>
        commands:
          description: Build Commands.
          type: string
          x-example: <COMMANDS>
        code:
          description: >-
            Gzip file with your code package. When used with the Appwrite CLI,
            pass the path to your code directory, and the CLI will automatically
            package your code. Use a path that is within the current directory.
          type: string
          x-example: null
        activate:
          description: Automatically activate the deployment when it is finished building.
          type: boolean
          x-example: false
      required:
        - code
        - activate
    FunctionsTriggerExecutionRequest:
      type: object
      properties:
        body:
          description: HTTP body of execution. Default value is empty string.
          type: string
          x-example: <BODY>
        async:
          description: Execute code in the background. Default value is false.
          type: boolean
          x-example: false
        path:
          description: >-
            HTTP path of execution. Path can include query params. Default value
            is /
          type: string
          x-example: <PATH>
        method:
          description: HTTP method of execution. Default value is GET.
          type: string
          x-example: GET
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
            - OPTIONS
          x-enum-name: ExecutionMethod
          x-enum-keys: []
        headers:
          description: HTTP headers of execution. Defaults to empty.
          type: object
          x-example: '{}'
    FunctionsCreateVariableRequest:
      type: object
      properties:
        key:
          description: 'Variable key. Max length: 255 chars.'
          type: string
          x-example: <KEY>
        value:
          description: 'Variable value. Max length: 8192 chars.'
          type: string
          x-example: <VALUE>
      required:
        - key
        - value
    FunctionsUpdateVariableByIdRequest:
      type: object
      properties:
        key:
          description: 'Variable key. Max length: 255 chars.'
          type: string
          x-example: <KEY>
        value:
          description: 'Variable value. Max length: 8192 chars.'
          type: string
          x-example: <VALUE>
      required:
        - key
    MessagingCreateEmailMessageRequest:
      type: object
      properties:
        messageId:
          description: >-
            Message ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <MESSAGE_ID>
        subject:
          description: Email Subject.
          type: string
          x-example: <SUBJECT>
        content:
          description: Email Content.
          type: string
          x-example: <CONTENT>
        topics:
          description: List of Topic IDs.
          type: array
          x-example: null
          items:
            type: string
        users:
          description: List of User IDs.
          type: array
          x-example: null
          items:
            type: string
        targets:
          description: List of Targets IDs.
          type: array
          x-example: null
          items:
            type: string
        cc:
          description: Array of target IDs to be added as CC.
          type: array
          x-example: null
          items:
            type: string
        bcc:
          description: Array of target IDs to be added as BCC.
          type: array
          x-example: null
          items:
            type: string
        attachments:
          description: >-
            Array of compound bucket IDs to file IDs to be attached to the
            email.
          type: array
          x-example: null
          items:
            type: string
        draft:
          description: Is message a draft
          type: boolean
          x-example: false
        html:
          description: Is content of type HTML
          type: boolean
          x-example: false
        scheduledAt:
          description: >-
            Scheduled delivery time for message in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. DateTime value must be in future.
          type: string
          x-example: null
      required:
        - messageId
        - subject
        - content
    MessagingUpdateEmailByIdRequest:
      type: object
      properties:
        topics:
          description: List of Topic IDs.
          type: array
          x-example: null
          items:
            type: string
        users:
          description: List of User IDs.
          type: array
          x-example: null
          items:
            type: string
        targets:
          description: List of Targets IDs.
          type: array
          x-example: null
          items:
            type: string
        subject:
          description: Email Subject.
          type: string
          x-example: <SUBJECT>
        content:
          description: Email Content.
          type: string
          x-example: <CONTENT>
        draft:
          description: Is message a draft
          type: boolean
          x-example: false
        html:
          description: Is content of type HTML
          type: boolean
          x-example: false
        cc:
          description: Array of target IDs to be added as CC.
          type: array
          x-example: null
          items:
            type: string
        bcc:
          description: Array of target IDs to be added as BCC.
          type: array
          x-example: null
          items:
            type: string
        scheduledAt:
          description: >-
            Scheduled delivery time for message in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. DateTime value must be in future.
          type: string
          x-example: null
    MessagingCreatePushNotificationRequest:
      type: object
      properties:
        title:
          description: Title for push notification.
          type: string
          x-example: <TITLE>
        messageId:
          description: >-
            Message ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <MESSAGE_ID>
        body:
          description: Body for push notification.
          type: string
          x-example: <BODY>
        topics:
          description: List of Topic IDs.
          type: array
          x-example: null
          items:
            type: string
        users:
          description: List of User IDs.
          type: array
          x-example: null
          items:
            type: string
        targets:
          description: List of Targets IDs.
          type: array
          x-example: null
          items:
            type: string
        data:
          description: Additional Data for push notification.
          type: object
          x-example: '{}'
        action:
          description: Action for push notification.
          type: string
          x-example: <ACTION>
        image:
          description: >-
            Image for push notification. Must be a compound bucket ID to file ID
            of a jpeg, png, or bmp image in Appwrite Storage.
          type: string
          x-example: '[ID1:ID2]'
        icon:
          description: >-
            Icon for push notification. Available only for Android and Web
            Platform.
          type: string
          x-example: <ICON>
        sound:
          description: >-
            Sound for push notification. Available only for Android and IOS
            Platform.
          type: string
          x-example: <SOUND>
        color:
          description: Color for push notification. Available only for Android Platform.
          type: string
          x-example: <COLOR>
        tag:
          description: Tag for push notification. Available only for Android Platform.
          type: string
          x-example: <TAG>
        badge:
          description: Badge for push notification. Available only for IOS Platform.
          type: string
          x-example: <BADGE>
        draft:
          description: Is message a draft
          type: boolean
          x-example: false
        scheduledAt:
          description: >-
            Scheduled delivery time for message in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. DateTime value must be in future.
          type: string
          x-example: null
      required:
        - messageId
        - title
        - body
    MessagingUpdatePushMessageRequest:
      type: object
      properties:
        title:
          description: Title for push notification.
          type: string
          x-example: <TITLE>
        topics:
          description: List of Topic IDs.
          type: array
          x-example: null
          items:
            type: string
        users:
          description: List of User IDs.
          type: array
          x-example: null
          items:
            type: string
        targets:
          description: List of Targets IDs.
          type: array
          x-example: null
          items:
            type: string
        body:
          description: Body for push notification.
          type: string
          x-example: <BODY>
        data:
          description: Additional Data for push notification.
          type: object
          x-example: '{}'
        action:
          description: Action for push notification.
          type: string
          x-example: <ACTION>
        image:
          description: >-
            Image for push notification. Must be a compound bucket ID to file ID
            of a jpeg, png, or bmp image in Appwrite Storage.
          type: string
          x-example: '[ID1:ID2]'
        icon:
          description: >-
            Icon for push notification. Available only for Android and Web
            platforms.
          type: string
          x-example: <ICON>
        sound:
          description: >-
            Sound for push notification. Available only for Android and iOS
            platforms.
          type: string
          x-example: <SOUND>
        color:
          description: Color for push notification. Available only for Android platforms.
          type: string
          x-example: <COLOR>
        tag:
          description: Tag for push notification. Available only for Android platforms.
          type: string
          x-example: <TAG>
        badge:
          description: Badge for push notification. Available only for iOS platforms.
          type: integer
          x-example: null
        draft:
          description: Is message a draft
          type: boolean
          x-example: false
        scheduledAt:
          description: >-
            Scheduled delivery time for message in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. DateTime value must be in future.
          type: string
          x-example: null
    MessagingCreateSmsMessageRequest:
      type: object
      properties:
        messageId:
          description: >-
            Message ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <MESSAGE_ID>
        content:
          description: SMS Content.
          type: string
          x-example: <CONTENT>
        topics:
          description: List of Topic IDs.
          type: array
          x-example: null
          items:
            type: string
        users:
          description: List of User IDs.
          type: array
          x-example: null
          items:
            type: string
        targets:
          description: List of Targets IDs.
          type: array
          x-example: null
          items:
            type: string
        draft:
          description: Is message a draft
          type: boolean
          x-example: false
        scheduledAt:
          description: >-
            Scheduled delivery time for message in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. DateTime value must be in future.
          type: string
          x-example: null
      required:
        - messageId
        - content
    MessagingUpdateSmsMessageByIdRequest:
      type: object
      properties:
        topics:
          description: List of Topic IDs.
          type: array
          x-example: null
          items:
            type: string
        users:
          description: List of User IDs.
          type: array
          x-example: null
          items:
            type: string
        targets:
          description: List of Targets IDs.
          type: array
          x-example: null
          items:
            type: string
        content:
          description: Email Content.
          type: string
          x-example: <CONTENT>
        draft:
          description: Is message a draft
          type: boolean
          x-example: false
        scheduledAt:
          description: >-
            Scheduled delivery time for message in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. DateTime value must be in future.
          type: string
          x-example: null
    MessagingCreateApnsProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        authKey:
          description: APNS authentication key.
          type: string
          x-example: <AUTH_KEY>
        authKeyId:
          description: APNS authentication key ID.
          type: string
          x-example: <AUTH_KEY_ID>
        teamId:
          description: APNS team ID.
          type: string
          x-example: <TEAM_ID>
        bundleId:
          description: APNS bundle ID.
          type: string
          x-example: <BUNDLE_ID>
        sandbox:
          description: Use APNS sandbox environment.
          type: boolean
          x-example: false
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateApnsProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        authKey:
          description: APNS authentication key.
          type: string
          x-example: <AUTH_KEY>
        authKeyId:
          description: APNS authentication key ID.
          type: string
          x-example: <AUTH_KEY_ID>
        teamId:
          description: APNS team ID.
          type: string
          x-example: <TEAM_ID>
        bundleId:
          description: APNS bundle ID.
          type: string
          x-example: <BUNDLE_ID>
        sandbox:
          description: Use APNS sandbox environment.
          type: boolean
          x-example: false
    MessagingCreateFcmProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        serviceAccountJSON:
          description: FCM service account JSON.
          type: object
          x-example: '{}'
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateFcmProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        serviceAccountJSON:
          description: FCM service account JSON.
          type: object
          x-example: '{}'
    MessagingCreateMailgunProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        apiKey:
          description: Mailgun API Key.
          type: string
          x-example: <API_KEY>
        domain:
          description: Mailgun Domain.
          type: string
          x-example: <DOMAIN>
        isEuRegion:
          description: Set as EU region.
          type: boolean
          x-example: false
        fromName:
          description: Sender Name.
          type: string
          x-example: <FROM_NAME>
        fromEmail:
          description: Sender email address.
          type: string
          x-example: email@example.com
        replyToName:
          description: >-
            Name set in the reply to field for the mail. Default value is sender
            name. Reply to name must have reply to email as well.
          type: string
          x-example: <REPLY_TO_NAME>
        replyToEmail:
          description: >-
            Email set in the reply to field for the mail. Default value is
            sender email. Reply to email must have reply to name as well.
          type: string
          x-example: email@example.com
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateMailgunProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        apiKey:
          description: Mailgun API Key.
          type: string
          x-example: <API_KEY>
        domain:
          description: Mailgun Domain.
          type: string
          x-example: <DOMAIN>
        isEuRegion:
          description: Set as EU region.
          type: boolean
          x-example: false
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        fromName:
          description: Sender Name.
          type: string
          x-example: <FROM_NAME>
        fromEmail:
          description: Sender email address.
          type: string
          x-example: email@example.com
        replyToName:
          description: >-
            Name set in the reply to field for the mail. Default value is sender
            name.
          type: string
          x-example: <REPLY_TO_NAME>
        replyToEmail:
          description: >-
            Email set in the reply to field for the mail. Default value is
            sender email.
          type: string
          x-example: <REPLY_TO_EMAIL>
    MessagingCreateMsgProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        from:
          description: >-
            Sender Phone number. Format this number with a leading '+' and a
            country code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        senderId:
          description: Msg91 Sender ID.
          type: string
          x-example: <SENDER_ID>
        authKey:
          description: Msg91 Auth Key.
          type: string
          x-example: <AUTH_KEY>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateProviderByIdRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        senderId:
          description: Msg91 Sender ID.
          type: string
          x-example: <SENDER_ID>
        authKey:
          description: Msg91 Auth Key.
          type: string
          x-example: <AUTH_KEY>
        from:
          description: Sender number.
          type: string
          x-example: <FROM>
    MessagingCreateSendgridProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        apiKey:
          description: Sendgrid API key.
          type: string
          x-example: <API_KEY>
        fromName:
          description: Sender Name.
          type: string
          x-example: <FROM_NAME>
        fromEmail:
          description: Sender email address.
          type: string
          x-example: email@example.com
        replyToName:
          description: >-
            Name set in the reply to field for the mail. Default value is sender
            name.
          type: string
          x-example: <REPLY_TO_NAME>
        replyToEmail:
          description: >-
            Email set in the reply to field for the mail. Default value is
            sender email.
          type: string
          x-example: email@example.com
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateSendgridProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        apiKey:
          description: Sendgrid API key.
          type: string
          x-example: <API_KEY>
        fromName:
          description: Sender Name.
          type: string
          x-example: <FROM_NAME>
        fromEmail:
          description: Sender email address.
          type: string
          x-example: email@example.com
        replyToName:
          description: >-
            Name set in the Reply To field for the mail. Default value is Sender
            Name.
          type: string
          x-example: <REPLY_TO_NAME>
        replyToEmail:
          description: >-
            Email set in the Reply To field for the mail. Default value is
            Sender Email.
          type: string
          x-example: <REPLY_TO_EMAIL>
    MessagingCreateSmtpProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        host:
          description: >-
            SMTP hosts. Either a single hostname or multiple semicolon-delimited
            hostnames. You can also specify a different port for each host such
            as `smtp1.example.com:25;smtp2.example.com`. You can also specify
            encryption type, for example:
            `tls://smtp1.example.com:587;ssl://smtp2.example.com:465"`. Hosts
            will be tried in order.
          type: string
          x-example: <HOST>
        port:
          description: The default SMTP server port.
          type: integer
          x-example: 1
        username:
          description: Authentication username.
          type: string
          x-example: <USERNAME>
        password:
          description: Authentication password.
          type: string
          x-example: <PASSWORD>
        encryption:
          description: Encryption type. Can be omitted, 'ssl', or 'tls'
          type: string
          x-example: none
          enum:
            - none
            - ssl
            - tls
          x-enum-name: SmtpEncryption
          x-enum-keys: []
        autoTLS:
          description: Enable SMTP AutoTLS feature.
          type: boolean
          x-example: false
        mailer:
          description: The value to use for the X-Mailer header.
          type: string
          x-example: <MAILER>
        fromName:
          description: Sender Name.
          type: string
          x-example: <FROM_NAME>
        fromEmail:
          description: Sender email address.
          type: string
          x-example: email@example.com
        replyToName:
          description: >-
            Name set in the reply to field for the mail. Default value is sender
            name.
          type: string
          x-example: <REPLY_TO_NAME>
        replyToEmail:
          description: >-
            Email set in the reply to field for the mail. Default value is
            sender email.
          type: string
          x-example: email@example.com
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
        - host
    MessagingUpdateSmtpProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        host:
          description: >-
            SMTP hosts. Either a single hostname or multiple semicolon-delimited
            hostnames. You can also specify a different port for each host such
            as `smtp1.example.com:25;smtp2.example.com`. You can also specify
            encryption type, for example:
            `tls://smtp1.example.com:587;ssl://smtp2.example.com:465"`. Hosts
            will be tried in order.
          type: string
          x-example: <HOST>
        port:
          description: SMTP port.
          type: integer
          x-example: 1
        username:
          description: Authentication username.
          type: string
          x-example: <USERNAME>
        password:
          description: Authentication password.
          type: string
          x-example: <PASSWORD>
        encryption:
          description: Encryption type. Can be 'ssl' or 'tls'
          type: string
          x-example: none
          enum:
            - none
            - ssl
            - tls
          x-enum-name: SmtpEncryption
          x-enum-keys: []
        autoTLS:
          description: Enable SMTP AutoTLS feature.
          type: boolean
          x-example: false
        mailer:
          description: The value to use for the X-Mailer header.
          type: string
          x-example: <MAILER>
        fromName:
          description: Sender Name.
          type: string
          x-example: <FROM_NAME>
        fromEmail:
          description: Sender email address.
          type: string
          x-example: email@example.com
        replyToName:
          description: >-
            Name set in the Reply To field for the mail. Default value is Sender
            Name.
          type: string
          x-example: <REPLY_TO_NAME>
        replyToEmail:
          description: >-
            Email set in the Reply To field for the mail. Default value is
            Sender Email.
          type: string
          x-example: <REPLY_TO_EMAIL>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
    MessagingCreateTelesignProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        from:
          description: >-
            Sender Phone number. Format this number with a leading '+' and a
            country code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        customerId:
          description: Telesign customer ID.
          type: string
          x-example: <CUSTOMER_ID>
        apiKey:
          description: Telesign API key.
          type: string
          x-example: <API_KEY>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateTelesignProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        customerId:
          description: Telesign customer ID.
          type: string
          x-example: <CUSTOMER_ID>
        apiKey:
          description: Telesign API key.
          type: string
          x-example: <API_KEY>
        from:
          description: Sender number.
          type: string
          x-example: <FROM>
    MessagingCreateTextmagicProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        from:
          description: >-
            Sender Phone number. Format this number with a leading '+' and a
            country code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        username:
          description: Textmagic username.
          type: string
          x-example: <USERNAME>
        apiKey:
          description: Textmagic apiKey.
          type: string
          x-example: <API_KEY>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateTextmagicProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        username:
          description: Textmagic username.
          type: string
          x-example: <USERNAME>
        apiKey:
          description: Textmagic apiKey.
          type: string
          x-example: <API_KEY>
        from:
          description: Sender number.
          type: string
          x-example: <FROM>
    MessagingCreateTwilioProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        from:
          description: >-
            Sender Phone number. Format this number with a leading '+' and a
            country code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        accountSid:
          description: Twilio account secret ID.
          type: string
          x-example: <ACCOUNT_SID>
        authToken:
          description: Twilio authentication token.
          type: string
          x-example: <AUTH_TOKEN>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateTwilioProviderRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        accountSid:
          description: Twilio account secret ID.
          type: string
          x-example: <ACCOUNT_SID>
        authToken:
          description: Twilio authentication token.
          type: string
          x-example: <AUTH_TOKEN>
        from:
          description: Sender number.
          type: string
          x-example: <FROM>
    MessagingCreateVonageProviderRequest:
      type: object
      properties:
        providerId:
          description: >-
            Provider ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        from:
          description: >-
            Sender Phone number. Format this number with a leading '+' and a
            country code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        apiKey:
          description: Vonage API key.
          type: string
          x-example: <API_KEY>
        apiSecret:
          description: Vonage API secret.
          type: string
          x-example: <API_SECRET>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
      required:
        - providerId
        - name
    MessagingUpdateVonageProviderByIdRequest:
      type: object
      properties:
        name:
          description: Provider name.
          type: string
          x-example: <NAME>
        enabled:
          description: Set as enabled.
          type: boolean
          x-example: false
        apiKey:
          description: Vonage API key.
          type: string
          x-example: <API_KEY>
        apiSecret:
          description: Vonage API secret.
          type: string
          x-example: <API_SECRET>
        from:
          description: Sender number.
          type: string
          x-example: <FROM>
    MessagingCreateNewTopicRequest:
      type: object
      properties:
        topicId:
          description: Topic ID. Choose a custom Topic ID or a new Topic ID.
          type: string
          x-example: <TOPIC_ID>
        name:
          description: Topic Name.
          type: string
          x-example: <NAME>
        subscribe:
          description: >-
            An array of role strings with subscribe permission. By default all
            users are granted with any subscribe permission. [learn more about
            roles](https://appwrite.io/docs/permissions#permission-roles).
            Maximum of 100 roles are allowed, each 64 characters long.
          type: array
          x-example: '["any"]'
          items:
            type: string
      required:
        - topicId
        - name
    MessagingUpdateTopicByIdRequest:
      type: object
      properties:
        name:
          description: Topic Name.
          type: string
          x-example: <NAME>
        subscribe:
          description: >-
            An array of role strings with subscribe permission. By default all
            users are granted with any subscribe permission. [learn more about
            roles](https://appwrite.io/docs/permissions#permission-roles).
            Maximum of 100 roles are allowed, each 64 characters long.
          type: array
          x-example: '["any"]'
          items:
            type: string
    MessagingCreateSubscriberRequest:
      type: object
      properties:
        subscriberId:
          description: Subscriber ID. Choose a custom Subscriber ID or a new Subscriber ID.
          type: string
          x-example: <SUBSCRIBER_ID>
        targetId:
          description: Target ID. The target ID to link to the specified Topic ID.
          type: string
          x-example: <TARGET_ID>
      required:
        - subscriberId
        - targetId
    MigrationsCreateAppwriteMigrationRequest:
      type: object
      properties:
        resources:
          description: List of resources to migrate
          type: array
          x-example: null
          items:
            type: string
        endpoint:
          description: Source's Appwrite Endpoint
          type: string
          x-example: https://example.com
        projectId:
          description: Source's Project ID
          type: string
          x-example: <PROJECT_ID>
        apiKey:
          description: Source's API Key
          type: string
          x-example: <API_KEY>
      required:
        - resources
        - endpoint
        - projectId
        - apiKey
    MigrationsFirebaseDataMigrationRequest:
      type: object
      properties:
        resources:
          description: List of resources to migrate
          type: array
          x-example: null
          items:
            type: string
        serviceAccount:
          description: JSON of the Firebase service account credentials
          type: string
          x-example: <SERVICE_ACCOUNT>
      required:
        - resources
        - serviceAccount
    MigrationsFirebaseOAuthMigrateRequest:
      type: object
      properties:
        resources:
          description: List of resources to migrate
          type: array
          x-example: null
          items:
            type: string
        projectId:
          description: Project ID of the Firebase Project
          type: string
          x-example: <PROJECT_ID>
      required:
        - resources
        - projectId
    MigrationsCreateNHostMigrationRequest:
      type: object
      properties:
        resources:
          description: List of resources to migrate
          type: array
          x-example: null
          items:
            type: string
        subdomain:
          description: Source's Subdomain
          type: string
          x-example: <SUBDOMAIN>
        region:
          description: Source's Region
          type: string
          x-example: <REGION>
        adminSecret:
          description: Source's Admin Secret
          type: string
          x-example: <ADMIN_SECRET>
        database:
          description: Source's Database Name
          type: string
          x-example: <DATABASE>
        username:
          description: Source's Database Username
          type: string
          x-example: <USERNAME>
        password:
          description: Source's Database Password
          type: string
          x-example: <PASSWORD>
        port:
          description: Source's Database Port
          type: integer
          x-example: null
      required:
        - resources
        - subdomain
        - region
        - adminSecret
        - database
        - username
        - password
    MigrationsMigrateSupabaseDataRequest:
      type: object
      properties:
        resources:
          description: List of resources to migrate
          type: array
          x-example: null
          items:
            type: string
        endpoint:
          description: Source's Supabase Endpoint
          type: string
          x-example: https://example.com
        apiKey:
          description: Source's API Key
          type: string
          x-example: <API_KEY>
        databaseHost:
          description: Source's Database Host
          type: string
          x-example: <DATABASE_HOST>
        username:
          description: Source's Database Username
          type: string
          x-example: <USERNAME>
        password:
          description: Source's Database Password
          type: string
          x-example: <PASSWORD>
        port:
          description: Source's Database Port
          type: integer
          x-example: null
      required:
        - resources
        - endpoint
        - apiKey
        - databaseHost
        - username
        - password
    ProjectCreateVariableRequest:
      type: object
      properties:
        key:
          description: 'Variable key. Max length: 255 chars.'
          type: string
          x-example: <KEY>
        value:
          description: 'Variable value. Max length: 8192 chars.'
          type: string
          x-example: <VALUE>
      required:
        - key
        - value
    ProjectUpdateVariableByIdRequest:
      type: object
      properties:
        key:
          description: 'Variable key. Max length: 255 chars.'
          type: string
          x-example: <KEY>
        value:
          description: 'Variable value. Max length: 8192 chars.'
          type: string
          x-example: <VALUE>
      required:
        - key
    ProjectsCreateNewProjectRequest:
      type: object
      properties:
        description:
          description: 'Project description. Max length: 256 chars.'
          type: string
          x-example: <DESCRIPTION>
        projectId:
          description: >-
            Unique Id. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, and hyphen. Can't start with a
            special char. Max length is 36 chars.
          type: string
          x-example: null
        name:
          description: 'Project name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        teamId:
          description: Team unique ID.
          type: string
          x-example: <TEAM_ID>
        region:
          description: Project Region.
          type: string
          x-example: default
          enum:
            - default
            - fra
          x-enum-name: null
          x-enum-keys: []
        logo:
          description: Project logo.
          type: string
          x-example: <LOGO>
        url:
          description: Project URL.
          type: string
          x-example: https://example.com
        legalName:
          description: 'Project legal Name. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_NAME>
        legalCountry:
          description: 'Project legal Country. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_COUNTRY>
        legalState:
          description: 'Project legal State. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_STATE>
        legalCity:
          description: 'Project legal City. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_CITY>
        legalAddress:
          description: 'Project legal Address. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_ADDRESS>
        legalTaxId:
          description: 'Project legal Tax ID. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_TAX_ID>
      required:
        - projectId
        - name
        - teamId
    ProjectsUpdateDetailRequest:
      type: object
      properties:
        description:
          description: 'Project description. Max length: 256 chars.'
          type: string
          x-example: <DESCRIPTION>
        name:
          description: 'Project name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        logo:
          description: Project logo.
          type: string
          x-example: <LOGO>
        url:
          description: Project URL.
          type: string
          x-example: https://example.com
        legalName:
          description: 'Project legal name. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_NAME>
        legalCountry:
          description: 'Project legal country. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_COUNTRY>
        legalState:
          description: 'Project legal state. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_STATE>
        legalCity:
          description: 'Project legal city. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_CITY>
        legalAddress:
          description: 'Project legal address. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_ADDRESS>
        legalTaxId:
          description: 'Project legal tax ID. Max length: 256 chars.'
          type: string
          x-example: <LEGAL_TAX_ID>
      required:
        - name
    ProjectsUpdateApiStatusRequest:
      type: object
      properties:
        api:
          description: API name.
          type: string
          x-example: rest
          enum:
            - rest
            - graphql
            - realtime
          x-enum-name: null
          x-enum-keys: []
        status:
          description: API status.
          type: boolean
          x-example: false
      required:
        - api
        - status
    ProjectsUpdateAllApiStatusRequest:
      type: object
      properties:
        status:
          description: API status.
          type: boolean
          x-example: false
      required:
        - status
    ProjectsUpdateAuthDurationRequest:
      type: object
      properties:
        duration:
          description: 'Project session length in seconds. Max length: 31536000 seconds.'
          type: integer
          x-example: 0
      required:
        - duration
    ProjectsUpdateUserLimitRequest:
      type: object
      properties:
        limit:
          description: >-
            Set the max number of users allowed in this project. Use 0 for
            unlimited.
          type: integer
          x-example: 0
      required:
        - limit
    ProjectsUpdateMaxSessionsLimitRequest:
      type: object
      properties:
        limit:
          description: >-
            Set the max number of users allowed in this project. Value allowed
            is between 1-100. Default is 10
          type: integer
          x-example: 1
      required:
        - limit
    ProjectsUpdateAuthPasswordDictionaryRequest:
      type: object
      properties:
        enabled:
          description: >-
            Set whether or not to enable checking user's password against most
            commonly used passwords. Default is false.
          type: boolean
          x-example: false
      required:
        - enabled
    ProjectsUpdateAuthPasswordHistoryRequest:
      type: object
      properties:
        limit:
          description: >-
            Set the max number of passwords to store in user history. User can't
            choose a new password that is already stored in the password history
            list.  Max number of passwords allowed in history is20. Default
            value is 0
          type: integer
          x-example: 0
      required:
        - limit
    ProjectsEnablePersonalDataCheckRequest:
      type: object
      properties:
        enabled:
          description: >-
            Set whether or not to check a password for similarity with personal
            data. Default is false.
          type: boolean
          x-example: false
      required:
        - enabled
    ProjectsUpdateAuthMethodStatusRequest:
      type: object
      properties:
        status:
          description: Set the status of this auth method.
          type: boolean
          x-example: false
      required:
        - status
    ProjectsCreateKeyRequest:
      type: object
      properties:
        name:
          description: 'Key name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        scopes:
          description: Key scopes list. Maximum of 100 scopes are allowed.
          type: array
          x-example: null
          items:
            type: string
        expire:
          description: >-
            Expiration time in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. Use null for unlimited expiration.
          type: string
          x-example: null
      required:
        - name
        - scopes
    ProjectsUpdateKeyRequest:
      type: object
      properties:
        name:
          description: 'Key name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        scopes:
          description: Key scopes list. Maximum of 100 events are allowed.
          type: array
          x-example: null
          items:
            type: string
        expire:
          description: >-
            Expiration time in [ISO
            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format. Use null for unlimited expiration.
          type: string
          x-example: null
      required:
        - name
        - scopes
    ProjectsUpdateOAuthRequest:
      type: object
      properties:
        provider:
          description: Provider Name
          type: string
          x-example: amazon
          enum:
            - amazon
            - apple
            - auth0
            - authentik
            - autodesk
            - bitbucket
            - bitly
            - box
            - dailymotion
            - discord
            - disqus
            - dropbox
            - etsy
            - facebook
            - github
            - gitlab
            - google
            - linkedin
            - microsoft
            - notion
            - oidc
            - okta
            - paypal
            - paypalSandbox
            - podio
            - salesforce
            - slack
            - spotify
            - stripe
            - tradeshift
            - tradeshiftBox
            - twitch
            - wordpress
            - yahoo
            - yammer
            - yandex
            - zoho
            - zoom
            - mock
          x-enum-name: OAuthProvider
          x-enum-keys: []
        appId:
          description: 'Provider app ID. Max length: 256 chars.'
          type: string
          x-example: <APP_ID>
        secret:
          description: 'Provider secret key. Max length: 512 chars.'
          type: string
          x-example: <SECRET>
        enabled:
          description: Provider status. Set to 'false' to disable new session creation.
          type: boolean
          x-example: false
      required:
        - provider
    ProjectsCreatePlatformRequest:
      type: object
      properties:
        type:
          description: Platform type.
          type: string
          x-example: web
          enum:
            - web
            - flutter-web
            - flutter-ios
            - flutter-android
            - flutter-linux
            - flutter-macos
            - flutter-windows
            - apple-ios
            - apple-macos
            - apple-watchos
            - apple-tvos
            - android
            - unity
          x-enum-name: PlatformType
          x-enum-keys: []
        name:
          description: 'Platform name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        key:
          description: >-
            Package name for Android or bundle ID for iOS or macOS. Max length:
            256 chars.
          type: string
          x-example: <KEY>
        store:
          description: 'App store or Google Play store ID. Max length: 256 chars.'
          type: string
          x-example: <STORE>
        hostname:
          description: 'Platform client hostname. Max length: 256 chars.'
          type: string
          x-example: null
      required:
        - type
        - name
    ProjectsUpdatePlatformByIdRequest:
      type: object
      properties:
        name:
          description: 'Platform name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        key:
          description: >-
            Package name for android or bundle ID for iOS. Max length: 256
            chars.
          type: string
          x-example: <KEY>
        store:
          description: 'App store or Google Play store ID. Max length: 256 chars.'
          type: string
          x-example: <STORE>
        hostname:
          description: 'Platform client URL. Max length: 256 chars.'
          type: string
          x-example: null
      required:
        - name
    ProjectsUpdateServiceStatusRequest:
      type: object
      properties:
        service:
          description: Service name.
          type: string
          x-example: account
          enum:
            - account
            - avatars
            - databases
            - locale
            - health
            - storage
            - teams
            - users
            - functions
            - graphql
            - messaging
          x-enum-name: ApiService
          x-enum-keys: []
        status:
          description: Service status.
          type: boolean
          x-example: false
      required:
        - service
        - status
    ProjectsUpdateAllServiceStatusRequest:
      type: object
      properties:
        status:
          description: Service status.
          type: boolean
          x-example: false
      required:
        - status
    ProjectsUpdateSmtpRequest:
      type: object
      properties:
        enabled:
          description: Enable custom SMTP service
          type: boolean
          x-example: false
        senderName:
          description: Name of the email sender
          type: string
          x-example: <SENDER_NAME>
        senderEmail:
          description: Email of the sender
          type: string
          x-example: email@example.com
        replyTo:
          description: Reply to email
          type: string
          x-example: email@example.com
        host:
          description: SMTP server host name
          type: string
          x-example: null
        port:
          description: SMTP server port
          type: integer
          x-example: null
        username:
          description: SMTP server username
          type: string
          x-example: <USERNAME>
        password:
          description: SMTP server password
          type: string
          x-example: <PASSWORD>
        secure:
          description: Does SMTP server use secure connection
          type: string
          x-example: tls
          enum:
            - tls
            - ssl
          x-enum-name: SMTPSecure
          x-enum-keys: []
      required:
        - enabled
    ProjectsCreateSmtpTestRequest:
      type: object
      properties:
        emails:
          description: >-
            Array of emails to send test email to. Maximum of 10 emails are
            allowed.
          type: array
          x-example: null
          items:
            type: string
        senderName:
          description: Name of the email sender
          type: string
          x-example: <SENDER_NAME>
        senderEmail:
          description: Email of the sender
          type: string
          x-example: email@example.com
        replyTo:
          description: Reply to email
          type: string
          x-example: email@example.com
        host:
          description: SMTP server host name
          type: string
          x-example: null
        port:
          description: SMTP server port
          type: integer
          x-example: null
        username:
          description: SMTP server username
          type: string
          x-example: <USERNAME>
        password:
          description: SMTP server password
          type: string
          x-example: <PASSWORD>
        secure:
          description: Does SMTP server use secure connection
          type: string
          x-example: tls
          enum:
            - tls
          x-enum-name: SMTPSecure
          x-enum-keys: []
      required:
        - emails
        - senderName
        - senderEmail
        - host
    ProjectsUpdateTeamRequest:
      type: object
      properties:
        teamId:
          description: Team ID of the team to transfer project to.
          type: string
          x-example: <TEAM_ID>
      required:
        - teamId
    ProjectsUpdateCustomEmailTemplatesRequest:
      type: object
      properties:
        subject:
          description: Email Subject
          type: string
          x-example: <SUBJECT>
        message:
          description: Template message
          type: string
          x-example: <MESSAGE>
        senderName:
          description: Name of the email sender
          type: string
          x-example: <SENDER_NAME>
        senderEmail:
          description: Email of the sender
          type: string
          x-example: email@example.com
        replyTo:
          description: Reply to email
          type: string
          x-example: email@example.com
      required:
        - subject
        - message
    ProjectsUpdateSmsTemplateRequest:
      type: object
      properties:
        message:
          description: Template message
          type: string
          x-example: <MESSAGE>
      required:
        - message
    ProjectsCreateWebhookRequest:
      type: object
      properties:
        security:
          description: Certificate verification, false for disabled or true for enabled.
          type: boolean
          x-example: false
        name:
          description: 'Webhook name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        enabled:
          description: Enable or disable a webhook.
          type: boolean
          x-example: false
        events:
          description: Events list. Maximum of 100 events are allowed.
          type: array
          x-example: null
          items:
            type: string
        url:
          description: Webhook URL.
          type: string
          x-example: null
        httpUser:
          description: 'Webhook HTTP user. Max length: 256 chars.'
          type: string
          x-example: <HTTP_USER>
        httpPass:
          description: 'Webhook HTTP password. Max length: 256 chars.'
          type: string
          x-example: <HTTP_PASS>
      required:
        - name
        - events
        - url
        - security
    ProjectsUpdateWebhookRequest:
      type: object
      properties:
        security:
          description: Certificate verification, false for disabled or true for enabled.
          type: boolean
          x-example: false
        name:
          description: 'Webhook name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        enabled:
          description: Enable or disable a webhook.
          type: boolean
          x-example: false
        events:
          description: Events list. Maximum of 100 events are allowed.
          type: array
          x-example: null
          items:
            type: string
        url:
          description: Webhook URL.
          type: string
          x-example: null
        httpUser:
          description: 'Webhook HTTP user. Max length: 256 chars.'
          type: string
          x-example: <HTTP_USER>
        httpPass:
          description: 'Webhook HTTP password. Max length: 256 chars.'
          type: string
          x-example: <HTTP_PASS>
      required:
        - name
        - events
        - url
        - security
    ProxyCreateNewRuleRequest:
      type: object
      properties:
        domain:
          description: Domain name.
          type: string
          x-example: null
        resourceType:
          description: >-
            Action definition for the rule. Possible values are "api",
            "function"
          type: string
          x-example: api
          enum:
            - api
            - function
          x-enum-name: null
          x-enum-keys: []
        resourceId:
          description: >-
            ID of resource for the action type. If resourceType is "api", leave
            empty. If resourceType is "function", provide ID of the function.
          type: string
          x-example: <RESOURCE_ID>
      required:
        - domain
        - resourceType
    StorageCreateBucketRequest:
      type: object
      properties:
        bucketId:
          description: >-
            Unique Id. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <BUCKET_ID>
        name:
          description: Bucket name
          type: string
          x-example: <NAME>
        permissions:
          description: >-
            An array of permission strings. By default, no user is granted with
            any permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
        fileSecurity:
          description: >-
            Enables configuring permissions for individual file. A user needs
            one of file or bucket level permissions to access a file. [Learn
            more about permissions](https://appwrite.io/docs/permissions).
          type: boolean
          x-example: false
        enabled:
          description: >-
            Is bucket enabled? When set to 'disabled', users cannot access the
            files in this bucket but Server SDKs with and API key can still
            access the bucket. No files are lost when this is toggled.
          type: boolean
          x-example: false
        maximumFileSize:
          description: Maximum file size allowed in bytes. Maximum allowed value is 30MB.
          type: integer
          x-example: 1
        allowedFileExtensions:
          description: >-
            Allowed file extensions. Maximum of 100 extensions are allowed, each
            64 characters long.
          type: array
          x-example: null
          items:
            type: string
        compression:
          description: >-
            Compression algorithm choosen for compression. Can be one of none, 
            [gzip](https://en.wikipedia.org/wiki/Gzip), or
            [zstd](https://en.wikipedia.org/wiki/Zstd), For file size above 20MB
            compression is skipped even if it's enabled
          type: string
          x-example: none
          enum:
            - none
            - gzip
            - zstd
          x-enum-name: null
          x-enum-keys: []
        encryption:
          description: >-
            Is encryption enabled? For file size above 20MB encryption is
            skipped even if it's enabled
          type: boolean
          x-example: false
        antivirus:
          description: >-
            Is virus scanning enabled? For file size above 20MB AntiVirus
            scanning is skipped even if it's enabled
          type: boolean
          x-example: false
      required:
        - bucketId
        - name
    StorageUpdateBucketByIdRequest:
      type: object
      properties:
        name:
          description: Bucket name
          type: string
          x-example: <NAME>
        permissions:
          description: >-
            An array of permission strings. By default, the current permissions
            are inherited. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
        fileSecurity:
          description: >-
            Enables configuring permissions for individual file. A user needs
            one of file or bucket level permissions to access a file. [Learn
            more about permissions](https://appwrite.io/docs/permissions).
          type: boolean
          x-example: false
        enabled:
          description: >-
            Is bucket enabled? When set to 'disabled', users cannot access the
            files in this bucket but Server SDKs with and API key can still
            access the bucket. No files are lost when this is toggled.
          type: boolean
          x-example: false
        maximumFileSize:
          description: Maximum file size allowed in bytes. Maximum allowed value is 30MB.
          type: integer
          x-example: 1
        allowedFileExtensions:
          description: >-
            Allowed file extensions. Maximum of 100 extensions are allowed, each
            64 characters long.
          type: array
          x-example: null
          items:
            type: string
        compression:
          description: >-
            Compression algorithm choosen for compression. Can be one of none,
            [gzip](https://en.wikipedia.org/wiki/Gzip), or
            [zstd](https://en.wikipedia.org/wiki/Zstd), For file size above 20MB
            compression is skipped even if it's enabled
          type: string
          x-example: none
          enum:
            - none
            - gzip
            - zstd
          x-enum-name: null
          x-enum-keys: []
        encryption:
          description: >-
            Is encryption enabled? For file size above 20MB encryption is
            skipped even if it's enabled
          type: boolean
          x-example: false
        antivirus:
          description: >-
            Is virus scanning enabled? For file size above 20MB AntiVirus
            scanning is skipped even if it's enabled
          type: boolean
          x-example: false
      required:
        - name
    StorageCreateFileRequest:
      type: object
      properties:
        fileId:
          description: >-
            File ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <FILE_ID>
          x-upload-id: true
        file:
          description: >-
            Binary file. Appwrite SDKs provide helpers to handle file input.
            [Learn about file
            input](https://appwrite.io/docs/storage#file-input).
          type: string
          x-example: null
        permissions:
          description: >-
            An array of permission strings. By default, only the current user is
            granted all permissions. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
      required:
        - fileId
        - file
    StorageUpdateFileByIdRequest:
      type: object
      properties:
        name:
          description: Name of the file
          type: string
          x-example: <NAME>
        permissions:
          description: >-
            An array of permission string. By default, the current permissions
            are inherited. [Learn more about
            permissions](https://appwrite.io/docs/permissions).
          type: array
          x-example: '["read("any")"]'
          items:
            type: string
    TeamsCreateTeamRequest:
      type: object
      properties:
        teamId:
          description: >-
            Team ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <TEAM_ID>
        name:
          description: 'Team name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
        roles:
          description: >-
            Array of strings. Use this param to set the roles in the team for
            the user who created it. The default role is **owner**. A role can
            be any string. Learn more about [roles and
            permissions](https://appwrite.io/docs/permissions). Maximum of 100
            roles are allowed, each 32 characters long.
          type: array
          x-example: null
          items:
            type: string
      required:
        - teamId
        - name
    TeamsUpdateNameByIdRequest:
      type: object
      properties:
        name:
          description: 'New team name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - name
    TeamsCreateMembershipRequest:
      type: object
      properties:
        email:
          description: Email of the new team member.
          type: string
          x-example: email@example.com
        userId:
          description: ID of the user to be added to a team.
          type: string
          x-example: <USER_ID>
        phone:
          description: >-
            Phone number. Format this number with a leading '+' and a country
            code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        roles:
          description: >-
            Array of strings. Use this param to set the user roles in the team.
            A role can be any string. Learn more about [roles and
            permissions](https://appwrite.io/docs/permissions). Maximum of 100
            roles are allowed, each 32 characters long.
          type: array
          x-example: null
          items:
            type: string
        url:
          description: >-
            URL to redirect the user back to your app from the invitation
            email.  Only URLs from hostnames in your project platform list are
            allowed. This requirement helps to prevent an [open
            redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
            attack against your project API.
          type: string
          x-example: https://example.com
        name:
          description: 'Name of the new team member. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - roles
    TeamsUpdateMembershipRolesRequest:
      type: object
      properties:
        roles:
          description: >-
            An array of strings. Use this param to set the user's roles in the
            team. A role can be any string. Learn more about [roles and
            permissions](https://appwrite.io/docs/permissions). Maximum of 100
            roles are allowed, each 32 characters long.
          type: array
          x-example: null
          items:
            type: string
      required:
        - roles
    TeamsUpdateMembershipStatusRequest:
      type: object
      properties:
        userId:
          description: User ID.
          type: string
          x-example: <USER_ID>
        secret:
          description: Secret key.
          type: string
          x-example: <SECRET>
      required:
        - userId
        - secret
    TeamsUpdatePrefsByIdRequest:
      type: object
      properties:
        prefs:
          description: Prefs key-value JSON object.
          type: object
          x-example: '{}'
      required:
        - prefs
    UsersCreateNewUserRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        phone:
          description: >-
            Phone number. Format this number with a leading '+' and a country
            code, e.g., +16175551212.
          type: string
          x-example: '+12065550100'
        password:
          description: Plain text user password. Must be at least 8 chars.
          type: string
          x-example: null
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
    UsersCreateArgonUserRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using Argon2.
          type: string
          x-example: password
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
    UsersCreateBcryptPasswordRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using Bcrypt.
          type: string
          x-example: password
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
    UsersCreateMd5UserRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using MD5.
          type: string
          x-example: password
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
    UsersCreateWithPhPassRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or pass the string `ID.unique()`to auto
            generate it. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using PHPass.
          type: string
          x-example: password
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
    UsersCreateScryptUserRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using Scrypt.
          type: string
          x-example: password
        passwordSalt:
          description: Optional salt used to hash password.
          type: string
          x-example: <PASSWORD_SALT>
        passwordCpu:
          description: Optional CPU cost used to hash password.
          type: integer
          x-example: null
        passwordMemory:
          description: Optional memory cost used to hash password.
          type: integer
          x-example: null
        passwordParallel:
          description: Optional parallelization cost used to hash password.
          type: integer
          x-example: null
        passwordLength:
          description: Optional hash length used to hash password.
          type: integer
          x-example: null
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
        - passwordSalt
        - passwordCpu
        - passwordMemory
        - passwordParallel
        - passwordLength
    UsersCreateScryptModifiedUserRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using Scrypt Modified.
          type: string
          x-example: password
        passwordSalt:
          description: Salt used to hash password.
          type: string
          x-example: <PASSWORD_SALT>
        passwordSaltSeparator:
          description: Salt separator used to hash password.
          type: string
          x-example: <PASSWORD_SALT_SEPARATOR>
        passwordSignerKey:
          description: Signer key used to hash password.
          type: string
          x-example: <PASSWORD_SIGNER_KEY>
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
        - passwordSalt
        - passwordSaltSeparator
        - passwordSignerKey
    UsersCreateWithShaPasswordRequest:
      type: object
      properties:
        userId:
          description: >-
            User ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <USER_ID>
        email:
          description: User email.
          type: string
          x-example: email@example.com
        password:
          description: User password hashed using SHA.
          type: string
          x-example: password
        passwordVersion:
          description: >-
            Optional SHA version used to hash password. Allowed values are:
            'sha1', 'sha224', 'sha256', 'sha384', 'sha512/224', 'sha512/256',
            'sha512', 'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512'
          type: string
          x-example: sha1
          enum:
            - sha1
            - sha224
            - sha256
            - sha384
            - sha512/224
            - sha512/256
            - sha512
            - sha3-224
            - sha3-256
            - sha3-384
            - sha3-512
          x-enum-name: PasswordHash
          x-enum-keys: []
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - userId
        - email
        - password
    UsersUpdateEmailByIdRequest:
      type: object
      properties:
        email:
          description: User email.
          type: string
          x-example: email@example.com
      required:
        - email
    UsersUpdateLabelsByUserIdRequest:
      type: object
      properties:
        labels:
          description: >-
            Array of user labels. Replaces the previous labels. Maximum of 1000
            labels are allowed, each up to 36 alphanumeric characters long.
          type: array
          x-example: null
          items:
            type: string
      required:
        - labels
    UsersUpdateMfaStatusRequest:
      type: object
      properties:
        mfa:
          description: Enable or disable MFA.
          type: boolean
          x-example: false
      required:
        - mfa
    UsersUpdateNameByIdRequest:
      type: object
      properties:
        name:
          description: 'User name. Max length: 128 chars.'
          type: string
          x-example: <NAME>
      required:
        - name
    UsersUpdatePasswordByUserIdRequest:
      type: object
      properties:
        password:
          description: New user password. Must be at least 8 chars.
          type: string
          x-example: null
      required:
        - password
    UsersUpdatePhoneByUserIdRequest:
      type: object
      properties:
        number:
          description: User phone number.
          type: string
          x-example: '+12065550100'
      required:
        - number
    UsersUpdatePrefsByIdRequest:
      type: object
      properties:
        prefs:
          description: Prefs key-value JSON object.
          type: object
          x-example: '{}'
      required:
        - prefs
    UsersUpdateStatusByUserIdRequest:
      type: object
      properties:
        status:
          description: >-
            User Status. To activate the user pass `true` and to block the user
            pass `false`.
          type: boolean
          x-example: false
      required:
        - status
    UsersCreateMessagingTargetRequest:
      type: object
      properties:
        targetId:
          description: >-
            Target ID. Choose a custom ID or generate a random ID with
            `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and
            underscore. Can't start with a special char. Max length is 36 chars.
          type: string
          x-example: <TARGET_ID>
        providerType:
          description: >-
            The target provider type. Can be one of the following: `email`,
            `sms` or `push`.
          type: string
          x-example: email
          enum:
            - email
            - sms
            - push
          x-enum-name: MessagingProviderType
          x-enum-keys: []
        identifier:
          description: The target identifier (token, email, phone etc.)
          type: string
          x-example: <IDENTIFIER>
        providerId:
          description: >-
            Provider ID. Message will be sent to this target from the specified
            provider ID. If no provider ID is set the first setup provider will
            be used.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: >-
            Target name. Max length: 128 chars. For example: My Awesome App
            Galaxy S23.
          type: string
          x-example: <NAME>
      required:
        - targetId
        - providerType
        - identifier
    UsersUpdateMessagingTargetRequest:
      type: object
      properties:
        identifier:
          description: The target identifier (token, email, phone etc.)
          type: string
          x-example: <IDENTIFIER>
        providerId:
          description: >-
            Provider ID. Message will be sent to this target from the specified
            provider ID. If no provider ID is set the first setup provider will
            be used.
          type: string
          x-example: <PROVIDER_ID>
        name:
          description: >-
            Target name. Max length: 128 chars. For example: My Awesome App
            Galaxy S23.
          type: string
          x-example: <NAME>
    UsersGenerateTokenRequest:
      type: object
      properties:
        length:
          description: Token length in characters. The default length is 6 characters
          type: integer
          x-example: 4
        expire:
          description: >-
            Token expiration period in seconds. The default expiration is 15
            minutes.
          type: integer
          x-example: 60
    UsersUpdateEmailVerificationStatusRequest:
      type: object
      properties:
        emailVerification:
          description: User email verification status.
          type: boolean
          x-example: false
      required:
        - emailVerification
    UsersUpdatePhoneVerificationRequest:
      type: object
      properties:
        phoneVerification:
          description: User phone verification status.
          type: boolean
          x-example: false
      required:
        - phoneVerification
    VcsCreateProviderRepositoryRequest:
      type: object
      properties:
        name:
          description: Repository name (slug)
          type: string
          x-example: <NAME>
        private:
          description: Mark repository public or private
          type: boolean
          x-example: false
      required:
        - name
        - private
    VcsDetectRuntimeSettingsRequest:
      type: object
      properties:
        providerRootDirectory:
          description: Path to Root Directory
          type: string
          x-example: <PROVIDER_ROOT_DIRECTORY>
    VcsAuthorizeExternalDeploymentRequest:
      type: object
      properties:
        providerPullRequestId:
          description: GitHub Pull Request Id
          type: string
          x-example: <PROVIDER_PULL_REQUEST_ID>
      required:
        - providerPullRequestId
    DatabasesGetAttributeByIdResponse:
      oneOf:
        - $ref: '#/components/schemas/attributeBoolean'
        - $ref: '#/components/schemas/attributeInteger'
        - $ref: '#/components/schemas/attributeFloat'
        - $ref: '#/components/schemas/attributeEmail'
        - $ref: '#/components/schemas/attributeEnum'
        - $ref: '#/components/schemas/attributeUrl'
        - $ref: '#/components/schemas/attributeIp'
        - $ref: '#/components/schemas/attributeDatetime'
        - $ref: '#/components/schemas/attributeRelationship'
        - $ref: '#/components/schemas/attributeString'
  securitySchemes:
    Project:
      description: Your project ID
      type: apiKey
      name: X-Appwrite-Project
      in: header
      x-appwrite:
        demo: 5df5acd0d48c2
    Key:
      description: Your secret API key
      type: apiKey
      name: X-Appwrite-Key
      in: header
      x-appwrite:
        demo: 919c2d18fb5d4...a2ae413da83346ad2
    JWT:
      description: Your secret JSON Web Token
      type: apiKey
      name: X-Appwrite-JWT
      in: header
    Locale:
      description: ''
      type: apiKey
      name: X-Appwrite-Locale
      in: header
      x-appwrite:
        demo: en
    Mode:
      description: ''
      type: apiKey
      name: X-Appwrite-Mode
      in: header
      x-appwrite:
        demo: ''
externalDocs:
  description: Full API docs, specs and tutorials
  url: https://appwrite.io/docs
