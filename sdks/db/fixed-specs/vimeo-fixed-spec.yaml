openapi: 3.0.2
info:
  title: Vimeo API
  description: >-
    Build something great. Vimeo's API supports flexible, high-quality video
    integration with your custom apps.
  version: '3.4'
  contact:
    url: https://developer.vimeo.com/help
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - description: Vimeo.com
    url: https://api.vimeo.com
tags:
  - description: These are the most common methods for working with live events.
    name: Live\Essentials
  - description: Use these methods to work with live event destinations.
    name: Live\Event destinations
  - description: Use these methods to manage showcase videos.
    name: Showcases\Showcase videos
  - description: Use these methods to work with the thumbnail images of live events.
    name: Live\Event thumbnails
  - description: Use these methods to work with live event videos.
    name: Live\Event videos
  - description: Use these methods to work with user followers.
    name: Users\Followers
  - description: Use these methods to work with video chapters.
    name: Videos\Chapters
  - description: These are the most common methods for working with videos.
    name: Videos\Essentials
  - description: These are the most common methods for working with folders.
    name: Folders\Essentials
  - description: These are the most common methods for working with likes.
    name: Likes\Essentials
  - description: These are the most common methods for working with showcases.
    name: Showcases\Essentials
  - description: Use these methods to manage videos in folders.
    name: Folders\Videos
  - description: Use these methods to work with user pictures.
    name: Users\Pictures
  - description: Use these methods to work with video comments.
    name: Videos\Video comments
  - description: Use these methods to manage user interactions with a category.
    name: Categories\Users
  - description: >-
      Vimeo members with access to embed presets can include their own logo
      images in the embedded player. These custom logos can be part of an embed
      preset.

                  Use these methods to work with custom logos.
    name: Embed Presets\Custom logos
  - description: These are the most common methods for working with embed presets.
    name: Embed Presets\Essentials
  - description: Use these methods to work with On Demand genres.
    name: On Demand\Genres
  - description: Use these methods to work with regions on On Demand pages.
    name: On Demand\Regions
  - description: Use these methods to manage portfolio videos.
    name: Portfolios\Videos
  - description: Use these methods to work with credited users in videos.
    name: Videos\Credits
  - description: >-
      These are the most common methods for working with a user's Watch Later
      queue.
    name: Watch Later Queue\Essentials
  - description: >-
      Use these methods to work with webinar registrations, including signup and
      login.
    name: Webinar\Registrations
  - description: These are the most common methods for working with channels.
    name: Channels\Essentials
  - description: Use these methods to work with channel moderators.
    name: Channels\Moderators
  - description: Use these methods to work with channel subscriptions.
    name: Channels\Subscriptions and subscribers
  - description: Use these methods to work with videos in channels.
    name: Channels\Videos
  - description: These are the most common methods for working with On Demand pages.
    name: On Demand\Essentials
  - description: Use these methods to work with video text tracks.
    name: Videos\Text tracks
  - description: Use these methods to work with video thumbnails.
    name: Videos\Thumbnails
  - description: These are the most common methods for working with webinars.
    name: Webinar\Essentials
  - description: Use these methods to work with embed privacy for live events.
    name: Live\Embed privacy
  - description: Use these methods to work with associated tags.
    name: Videos\Tags
  - description: Use these methods to work with unlisted videos.
    name: Videos\Unlisted videos
  - description: Use these methods to work with video versioning.
    name: Videos\Versions
  - description: Use these methods to work with tags in channels.
    name: Channels\Tags
  - description: Use these methods to work with videos that have embed presets.
    name: Embed Presets\Videos
  - description: Use these methods to manage group members.
    name: Groups\Users
  - description: Use these methods to work with background images on an On Demand page.
    name: On Demand\Backgrounds
  - description: Use these methods to work with promotions on On Demand pages.
    name: On Demand\Promotions
  - description: >-
      Use these methods to manage custom showcase logos, or the supplementary
      images, usually logos, that appear on a showcase's page. These images
      aren't the same as showcase thumbnails, or the images that represent the
      showcase across Vimeo.
    name: Showcases\Custom showcase logos
  - description: >-
      Use these methods to manage custom thumbnail images for showcases. These
      thumbnails come from uploaded image files that aren't necessarily stills
      from a video.
    name: Showcases\Custom showcase thumbnails
  - description: Use these methods to work with animated thumbnails for videos.
    name: Videos\Animated thumbnails
  - description: Use these methods to work with videos in a category.
    name: Categories\Videos
  - description: Use these methods to work with channel categories.
    name: Channels\Categories
  - description: Use these methods to work with private channel members.
    name: Channels\Private channel members
  - description: These are the most common methods for working with groups.
    name: Groups\Essentials
  - description: Use these methods to manage group membership.
    name: Groups\Subscriptions
  - description: Use these methods to manage group videos.
    name: Groups\Videos
  - description: Use these methods to work with poster images on On Demand pages.
    name: On Demand\Posters
  - description: Use these methods to work with videos on On Demand pages.
    name: On Demand\Videos
  - description: These are the most common methods for working with portfolios.
    name: Portfolios\Essentials
  - description: These are the most common methods for working with users.
    name: Users\Essentials
  - description: Use these methods to work with video uploads.
    name: Videos\Uploads
  - description: Use these methods to work with webinar email customizations.
    name: Webinar\Emails
  - description: Use these methods to manage items in folders.
    name: Folders\Items
  - description: Use these methods to work with the activation of live events.
    name: Live\Event activation
  - description: >-
      Use these methods to work with the automated closed captions preferences
      of live events.
    name: Live\Event automated closed captions
  - description: Use these methods to work with the ending of live events.
    name: Live\Event end
  - description: Use these methods to manage a live event's low-latency option.
    name: Live\Event low latency
  - description: Use these methods to work with purchases and rentals on On Demand pages.
    name: On Demand\Purchases and rentals
  - description: Use these methods to work with On Demand seasons.
    name: On Demand\Seasons
  - description: Use these methods to work with team members.
    name: Teams\Members
  - description: Use these methods to work with a user's watch history.
    name: Users\Watch history
  - description: Use these methods to manage the whitelist of embeddable videos.
    name: Videos\Embed privacy
  - description: >-
      Use these methods to work with the video fragments for branched or
      segmented scrubbers.
    name: Videos\Fragments
  - description: These are the most common methods for working with authentication.
    name: Authentication Extras\Essentials
  - description: These are the most common methods for working with categories.
    name: Categories\Essentials
  - description: Use these methods to work with timeline events.
    name: Embed Presets\Timeline events
  - description: Use these methods to work with M3U8 playback URLs for live event streams.
    name: Live\Event M3U8 playback
  - description: These are the most common methods for making product purchases.
    name: Payments\Essentials
  - description: Use these methods to work with user analytics.
    name: Users\Analytics
  - description: Use these methods to work with user feeds.
    name: Users\Feeds
  - description: Use these methods to work with M3U8 playback URLs for live event streams.
    name: Videos\Live M3U8 playback
  - description: Use these methods to work with nondestructive trimming.
    name: Videos\Nondestructive trimming
  - description: Use these methods to work with showcase videos.
    name: Videos\Showcases
  - description: >-
      These are the most common methods for retrieving information about the
      Vimeo API.
    name: API Information\Essentials
  - description: Use these methods to perform authentication.
    name: Authentication Extras\Authenticate
  - description: Use these methods to convert authentication resources.
    name: Authentication Extras\Convert
  - description: Use these methods to exchange authentication resources.
    name: Authentication Extras\Exchange
  - description: Use these methods to work with channels in a category.
    name: Categories\Channels
  - description: Use these methods to work with groups in a category.
    name: Categories\Groups
  - description: Use these methods to work with live event sessions.
    name: Live\Event sessions
  - description: These are the most common methods for working with subscription plans.
    name: Subscription Plans\Essentials
  - description: These are the most common methods for working with tags.
    name: Tags\Essentials
  - description: These are the most common methods for working with the API tutorial.
    name: Tutorial\Essentials
  - description: Use these methods to search for users.
    name: Users\Search
  - description: Use these methods to work with video content ratings.
    name: Videos\Content ratings
  - description: Use these methods to work with Creative Commons licenses.
    name: Videos\Creative Commons
  - description: Use these methods to work with video languages.
    name: Videos\Languages
  - description: Use these methods to work with recommended videos.
    name: Videos\Recommendations
  - description: Use these methods to work with video transcripts.
    name: Videos\Transcripts
paths:
  /:
    get:
      tags:
        - API Information\Essentials
      summary: Get the API specification
      operationId: get_endpoints
      description: This method returns the full OpenAPI specification for the Vimeo API.
      parameters:
        - description: Return an OpenAPI specification.
          in: query
          name: openapi
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            Return an OpenAPI specification for the specified API version. This
            overwrites the **version** field provided in the **Accept** header.
          in: query
          name: version
          required: false
          schema:
            type: string
            example: '3.4'
      responses:
        '200':
          description: Standard request.
          content:
            application/vnd.vimeo.endpoint+json:
              schema:
                $ref: '#/components/schemas/endpoint'
  /albums/{album_id}/available_videos:
    get:
      tags:
        - Showcases\Showcase videos
      summary: >-
        Get all the user's videos that can be added to or removed from a
        showcase
      operationId: ShowcasesShowcaseVideos_listInShowcase
      description: >-
        This endpoint returns every video belonging to the authenticated user
        that can be added to or removed from the specified showcase. The user
        must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `default` - Sort the results by the default method.
             * `duration` - Sort the results by duration.
             * `last_user_action_event_date` - Sort the results by most recent user interaction.
             * `likes` - Sort the results by number of likes.
             * `modified_time` - Sort the results by last modification.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - default
              - duration
              - last_user_action_event_date
              - likes
              - modified_time
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesShowcaseVideosListInShowcaseResponse
        '403':
          description: >-
            Error code 3433: The authenticated user can't add videos to this
            showcase.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /categories:
    get:
      tags:
        - Categories\Essentials
      summary: Get all categories
      operationId: get_categories
      description: This method returns every available category.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The way to sort the results.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - last_video_featured_time
              - name
      responses:
        '200':
          description: The categories were returned.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/GetCategoriesResponse'
  /categories/{category}:
    get:
      tags:
        - Categories\Essentials
      summary: Get a specific category
      operationId: get_category
      description: This method returns the specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
      responses:
        '200':
          description: The category was returned.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/category'
        '404':
          description: No such category exists.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /categories/{category}/channels:
    get:
      tags:
        - Categories\Channels
      summary: Get all the channels in a category
      operationId: CategoriesChannels_listInCategory
      description: >-
        This method returns every channel that belongs to the specified
        category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `followers` - Sort the results by number of followers.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - followers
              - videos
      responses:
        '200':
          description: The channels were returned.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/CategoriesChannelsListInCategoryResponse'
        '404':
          description: No such category exists.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /categories/{category}/groups:
    get:
      tags:
        - Categories\Groups
      summary: Get all the groups in a category
      operationId: CategoriesGroups_getAllGroups
      description: This method returns every group that belongs to the specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `members` - Sort the results by number of members.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - members
              - videos
      responses:
        '200':
          description: The groups were returned.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/CategoriesGroupsGetAllGroupsResponse'
        '404':
          description: No such category exists.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /categories/{category}/videos:
    get:
      tags:
        - Categories\Videos
      summary: Get all the videos in a category
      operationId: CategoriesVideos_listVideosInCategory
      description: This method returns every video that belongs to the specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `conditional_featured` - Return featured videos.
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - conditional_featured
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `duration` - Sort the results by duration.
             * `featured` - Sort the results by featured status.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
             * `relevant` - Sort the results by relevance.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - featured
              - likes
              - plays
              - relevant
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/CategoriesVideosListVideosInCategoryResponse
        '404':
          description: No such category exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /categories/{category}/videos/{video_id}:
    get:
      tags:
        - Categories\Videos
      summary: Get a specific video in a category
      operationId: CategoriesVideos_getVideoInCategory
      description: >-
        This method returns a single video in the specified category. You can
        use this method to determine whether the video belongs to the category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 273576296
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: No such category exists, or the video doesn't belong to it.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels:
    get:
      tags:
        - Channels\Essentials
      summary: Get all channels
      operationId: get_channels
      description: This method returns all available channels.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `featured` - Return featured channels.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - featured
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `default` - Sort the results by creation date.
             * `followers` - Sort the results by number of followers.
             * `relevant` - Sort the results by relevance. This option is available for search queries only.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - followers
              - relevant
              - videos
      responses:
        '200':
          description: The channels were returned.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/GetChannelsResponse'
        '400':
          description: The relevant sort has no search query.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Channels\Essentials
      summary: Create a channel
      operationId: create_channel
      security:
        - oauth2:
            - create
      description: This method creates a new channel.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.channel+json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '200':
          description: The channel was created.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/channel'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't create channels.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}:
    delete:
      tags:
        - Channels\Essentials
      summary: Delete a channel
      operationId: delete_channel
      security:
        - oauth2:
            - delete
      description: This method deletes the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '204':
          description: The channel was deleted.
        '403':
          description: The authenticated user doesn't own this channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Channels\Essentials
      summary: Get a specific channel
      operationId: get_channel
      description: This method returns a single channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '200':
          description: The channel was returned.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/channel'
    patch:
      tags:
        - Channels\Essentials
      summary: Edit a channel
      operationId: edit_channel
      security:
        - oauth2:
            - edit
      description: This method edits the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: false
        content:
          application/vnd.vimeo.channel+json:
            schema:
              $ref: '#/components/schemas/EditChannelRequest'
      responses:
        '200':
          description: The channel was edited.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/channel'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/categories:
    get:
      tags:
        - Channels\Categories
      summary: Get all the categories to which a channel belongs
      operationId: ChannelsCategories_getBelongingCategories
      description: >-
        This method returns every category to which the specified channel
        belongs.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '200':
          description: The categories were returned.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsCategoriesGetBelongingCategoriesResponse
        '404':
          description: No such channel exists.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Categories
      summary: Add a channel to a list of categories
      operationId: ChannelsCategories_addChannelToMultipleCategories
      description: This method adds the specified channel to multiple categories.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ChannelsCategoriesAddChannelToMultipleCategoriesRequest
      responses:
        '204':
          description: The channel was added to the categories.
        '400':
          description: >-
            * Error code 2204: You exceeded the maximum number of channel
            categories.

            * Error code 2205: There was no request body, or the request body is
            malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't add categories to the
            channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/categories/{category}:
    delete:
      tags:
        - Channels\Categories
      summary: Remove a channel from a category
      operationId: ChannelsCategories_removeChannelFromCategory
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a channel from the specified category. The
        authenticated user must be the owner of the channel.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '204':
          description: The channel was removed.
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user doesn't own the channel or
            isn't a channel moderator.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such channel or category exists.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Categories
      summary: Add a channel to a specific category
      operationId: categorize_channel
      security:
        - oauth2:
            - edit
      description: >-
        This method adds the specified channel to a single category. The
        authenticated user must be the owner of the channel.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '204':
          description: The channel was added to the category.
        '400':
          description: >-
            Error code 2204: You exceeded the maximum number of channel
            categories.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user doesn't own the channel or
            isn't a channel moderator.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such channel or category exists.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/moderators:
    delete:
      tags:
        - Channels\Moderators
      summary: Remove a list of moderators from a channel
      operationId: ChannelsModerators_removeMultipleFromChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method removes multiple moderators from the specified channel. The
        authenticated user must be the owner of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/vnd.vimeo.user+json:
            schema:
              $ref: >-
                #/components/schemas/ChannelsModeratorsRemoveMultipleFromChannelRequest
      responses:
        '204':
          description: The moderators were removed.
        '403':
          description: >-
            The authenticated user doesn't own the channel, a requested user
            isn't a moderator of the channel, or a requested user is the owner
            of the channel.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel exists, or no such user exists.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Channels\Moderators
      summary: Get all the moderators of a channel
      operationId: ChannelsModerators_listByChannel
      description: This method returns every moderator of the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date added.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The moderators were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/ChannelsModeratorsListByChannelResponse'
    patch:
      tags:
        - Channels\Moderators
      summary: Replace the moderators of a channel
      operationId: ChannelsModerators_replaceModerators
      security:
        - oauth2:
            - edit
      description: >-
        This method replaces the current list of channel moderators with a new
        list. The authenticated user must be the owner of the channel and a
        follower of each requested user to add them as a channel moderator.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelsModeratorsReplaceModeratorsRequest'
      responses:
        '200':
          description: The moderators were replaced.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsModeratorsReplaceModeratorsResponse
        '400':
          description: 'Error code 2908: The list contains more than 100 users.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: The authenticated user doesn't own the channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Moderators
      summary: Add a list of moderators to a channel
      operationId: ChannelsModerators_bulkAddModerators
      security:
        - oauth2:
            - edit
      description: >-
        This method adds multiple users as moderators to the specified channel.
        Include the users by their URI as a JSON array in the body of the
        request using the **user_uri** field, like this: `[{ "user_uri":
        "/users/1234" }, { "user_uri": "/users/1235" }]`. The authenticated user
        must be a follower of a requested user to add this person as a
        moderator. For more information on batch requests like this one, see
        [Using Common Formats and
        Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '200':
          description: The moderators were added.
        '400':
          description: 'Error code 2908: The list contains more than 100 users.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            The authenticated user doesn't own the channel, a requested user is
            already a moderator of the channel, or the authenticated user
            doesn't follow a requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel exists, or no such user exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/moderators/{user_id}:
    get:
      tags:
        - Channels\Moderators
      summary: Get a specific moderator of a channel
      operationId: ChannelsModerators_getSpecificModerator
      description: This method returns a single moderator of the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The moderator was returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/user'
    delete:
      tags:
        - Channels\Moderators
      summary: Remove a specific moderator from a channel
      operationId: ChannelsModerators_removeModerator
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a single moderator from the specified channel. The
        authenticated user must be the owner of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The moderator was removed.
        '403':
          description: >-
            The authenticated user doesn't own the channel, the requested user
            isn't a moderator of the channel, or the requested user is the owner
            of the channel.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel exists, or no such user exists.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Moderators
      summary: Add a specific moderator to a channel
      operationId: ChannelsModerators_addModeratorToChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single user as a moderator to the specified channel.
        The authenticated user must be a follower of the requested user to add
        them as a channel moderator.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: OK
        '403':
          description: >-
            The authenticated user doesn't own the channel, the requested user
            is already a moderator of the channel, or the authenticated user
            doesn't follow the requested user.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel exists, or no such user exists.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/privacy/users:
    get:
      tags:
        - Channels\Private channel members
      summary: Get all the users who can access a private channel
      operationId: ChannelsPrivateChannelMembers_getAccessibleUsers
      description: >-
        This method returns all the users who have access to the specified
        private channel. The authenticated user must be the owner of the
        channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsPrivateChannelMembersGetAccessibleUsersResponse
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3200: The authenticated user doesn''t own this channel.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Channels\Private channel members
      summary: Permit a list of users to access a private channel
      operationId: ChannelsPrivateChannelMembers_permitUserAccess
      security:
        - oauth2:
            - edit
      description: >-
        This method gives multiple users access to the specified private
        channel. The authenticated user must be the owner of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/vnd.vimeo.user+json:
            schema:
              $ref: >-
                #/components/schemas/ChannelsPrivateChannelMembersPermitUserAccessRequest
      responses:
        '200':
          description: The users can access the private channel.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsPrivateChannelMembersPermitUserAccessResponse
        '400':
          description: >-
            * Error code 2205: There was no request body, or the request body is
            malformed.

            * Error code 2900: No such user exists.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3200: The authenticated user doesn''t own this channel.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 2204: A requested user can''t have access to the channel.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
  /channels/{channel_id}/privacy/users/{user_id}:
    delete:
      tags:
        - Channels\Private channel members
      summary: Restrict a user from accessing a private channel
      operationId: ChannelsPrivateChannelMembers_restrictUserAccess
      security:
        - oauth2:
            - edit
      description: >-
        This method prevents a single user from being able to access the
        specified private channel. The authenticated user must be the owner of
        the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user can't acceess the private channel.
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3200: The authenticated user doesn''t own the channel.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Channels\Private channel members
      summary: Permit a specific user to access a private channel
      operationId: ChannelsPrivateChannelMembers_permitUserAccess
      security:
        - oauth2:
            - edit
      description: >-
        This method gives a single user access to the specified private channel.
        The authenticated user must be the owner of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The user can now view the private channel.
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3200: The authenticated user doesn''t own the channel.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /channels/{channel_id}/tags:
    get:
      tags:
        - Channels\Tags
      summary: Get all the tags that have been added to a channel
      operationId: ChannelsTags_getAllChannelTags
      description: >-
        This method returns every tag that has been added to the specified
        channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '200':
          description: The tags were returned.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/ChannelsTagsGetAllChannelTagsResponse'
        '400':
          description: No such channel exists.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Tags
      summary: Add a list of tags to a channel
      operationId: ChannelsTags_addMultipleTagsToChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method adds multiple tags to the specified channel. Include the
        tags as a JSON array in the body of the request using the **tag** field,
        like this: `[{ "tag": "funny" }, { "tag": "concert" }]`. The
        authenticated user must be the owner of the channel. For more
        information on batch requests like this one, see [Using Common Formats
        and
        Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/vnd.vimeo.tag+json:
            schema:
              $ref: '#/components/schemas/ChannelsTagsAddMultipleTagsToChannelRequest'
      responses:
        '200':
          description: The tags were added.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsTagsAddMultipleTagsToChannelResponse
        '400':
          description: >-
            * No such channel exists, or a parameter is invalid.

            * Error code 2501: The channel can't have more than 20 tags.

            * Error code 2205: There was no request body, or the request body is
            malformed.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't add tags to this
            channel.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
  /channels/{channel_id}/tags/{word}:
    delete:
      tags:
        - Channels\Tags
      summary: Remove a tag from a channel
      operationId: ChannelsTags_removeTagFromChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a single tag from the specified channel. The
        authenticated user must be the owner of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The word to use as the tag.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '204':
          description: The tag was removed.
        '400':
          description: The tag is invalid, or a parameter is invalid.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't remove tags from this
            channel.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Channels\Tags
      summary: Check if a tag has been added to a channel
      operationId: ChannelsTags_checkIfTagAddedToChannel
      description: >-
        This method determines whether a tag has been added to the specified
        channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The word to use as the tag.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '204':
          description: The tag has been added to the channel.
        '400':
          description: No such tag exists.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: 'Error code 5000: The tag exists, but the channel isn''t tagged by it.'
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Channels\Tags
      summary: Add a specific tag to a channel
      operationId: ChannelsTags_addTagToChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single tag to the specified channel. The
        authenticated user must be the owner of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The word to use as the tag.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '204':
          description: The tag was added.
        '400':
          description: |-
            * The tag is invalid, or a parameter is invalid.
            * Error code 2501: The channel can't have more than 20 tags.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't add tags to this
            channel.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/error'
  /channels/{channel_id}/users:
    get:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Get all the followers of a channel
      operationId: ChannelsSubscriptionsAndSubscribers_listChannelFollowers
      description: This method returns every follower of the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `moderators` - Return moderators.
          in: query
          name: filter
          required: true
          schema:
            type: string
            enum:
              - moderators
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by follow date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The followers were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsSubscriptionsAndSubscribersListChannelFollowersResponse
        '404':
          description: No such channel exists.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/videos:
    delete:
      tags:
        - Channels\Videos
      summary: Remove a list of videos from a channel
      operationId: ChannelsVideos_removeMultipleFromChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method removes multiple videos from the specified channel. Include
        the videos by their URI as a JSON block in the body of the request using
        the **video_uri** field, like this: `[{ "video_uri": "/videos/1234" }, {
        "video_uri": "/videos/1235" }]`. The authenticated user must be a
        moderator of the channel. For more information on batch requests like
        this one, see [Using Common Formats and
        Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ChannelsVideosRemoveMultipleFromChannelRequest
      responses:
        '204':
          description: The videos were removed.
        '403':
          description: >-
            The authenticated user can't remove videos from this channel, or a
            video can't be removed from the channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel or user exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Channels\Videos
      summary: Get all the videos in a channel
      operationId: ChannelsVideos_listInChannel
      description: This method returns every video in the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The page that contains the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by date added.
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `default` - Use the default sorting method.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `manual` - Sort the results as the user has arranged them.
             * `modified_time` - Sort the results by last modification.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - comments
              - date
              - default
              - duration
              - likes
              - manual
              - modified_time
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/ChannelsVideosListInChannelResponse'
        '304':
          description: >-
            No videos have been added to this channel since the given
            `If-Modified-Since` header.
        '400':
          description: >-
            The **sort** field is `default`, but the **direction** field has a
            value.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Videos
      summary: Add a list of videos to a channel
      operationId: ChannelsVideos_addMultipleToChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method adds multiple videos to the specified channel. The
        authenticated user must be a moderator of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelsVideosAddMultipleToChannelRequest'
      responses:
        '200':
          description: The videos were added.
        '403':
          description: >-
            The authenticated user can't add videos to the channel, or a video
            can't be added to the channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel or user exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/videos/{video_id}:
    delete:
      tags:
        - Channels\Videos
      summary: Remove a specific video from a channel
      operationId: ChannelsVideos_removeSpecificVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a single video from the specified channel. The
        authenticated user must be a moderator of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
        '403':
          description: >-
            The authenticated user can't remove videos from this channel, or the
            video can't be removed from the channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel or video exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Channels\Videos
      summary: Get a specific video in a channel
      operationId: ChannelsVideos_getSpecificVideoInChannel
      description: >-
        This method returns a single video in the specified channel. You can use
        it to determine whether the video is in the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: No such channel exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Videos
      summary: Add a specific video to a channel
      operationId: ChannelsVideos_addVideoToChannel
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single video to the specified channel. The
        authenticated user must be a moderator of the channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
        '403':
          description: >-
            The video can't be added to a channel, or the authenticated user
            can't add videos to this channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such channel or video exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/videos/{video_id}/comments:
    get:
      tags:
        - Videos\Video comments
      summary: Get all the video comments on a video
      operationId: VideosVideoComments_getAllReplies
      description: This method returns every video comment on the specified video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The comments were returned.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/VideosVideoCommentsGetAllRepliesResponse'
    post:
      tags:
        - Videos\Video comments
      summary: Add a video comment to a video
      operationId: VideosVideoComments_addNewComment
      security:
        - oauth2:
            - interact
      description: This method adds a video comment to the specified video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.comment+json:
            schema:
              $ref: '#/components/schemas/VideosVideoCommentsAddNewCommentRequest'
      responses:
        '201':
          description: The comment was added.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: 'Error code 2207: The comment text is missing.'
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3301: The comment was flagged as spam.
            * Error code 3411: The authenticated user is unverified.
            * Error code 3412: The authenticated user can't comment.
            * Error code 3413: Comments are disabled for this video.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
  /channels/{channel_id}/videos/{video_id}/credits:
    get:
      tags:
        - Videos\Credits
      summary: Get all the credited users in a video
      operationId: VideosCredits_getAllCreditedUsersInVideo
      description: This method returns every credited user in a video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The credited users were returned.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosCreditsGetAllCreditedUsersInVideoResponse
    post:
      tags:
        - Videos\Credits
      summary: Credit a user in a video
      operationId: VideosCredits_addUserCreditInVideo
      description: This method adds a user credit to the specified video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.credit+json:
            schema:
              $ref: '#/components/schemas/VideosCreditsAddUserCreditInVideoRequest'
      responses:
        '201':
          description: The credit was added.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/credit'
        '400':
          description: >-
            * A parameter is invalid.

            * The authenticated user has an unverified email address.

            * There is a user block between the video owner and the person
            receiving credit.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user doesn't own the video.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/videos/{video_id}/likes:
    get:
      tags:
        - Likes\Essentials
      summary: Get all the users who have liked a video
      operationId: LikesEssentials_getUsersWhoLikedVideo
      description: This method returns every user who has liked the specified video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by join date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/LikesEssentialsGetUsersWhoLikedVideoResponse
  /channels/{channel_id}/videos/{video_id}/pictures:
    get:
      tags:
        - Videos\Thumbnails
      summary: Get all the thumbnails of a video
      operationId: VideosThumbnails_getAllByVideoId
      description: >-
        This method returns all thumbnail images of the specified video. The
        authenticated user must have team permissions for the video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The thumbnails were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/VideosThumbnailsGetAllByVideoIdResponse'
    post:
      tags:
        - Videos\Thumbnails
      summary: Add a video thumbnail
      operationId: VideosThumbnails_addThumbnailToVideo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a thumbnail image to the specified video. The
        authenticated user must have team permissions for the video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/VideosThumbnailsAddThumbnailToVideoRequest'
      responses:
        '201':
          description: The thumbnail was created.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /channels/{channel_id}/videos/{video_id}/privacy/users:
    get:
      tags:
        - Videos\Unlisted videos
      summary: Get the users who can access an unlisted video
      operationId: VideosUnlistedVideos_listAccessibleUsers
      description: >-
        This method returns every user who has access to the specified unlisted
        video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosUnlistedVideosListAccessibleUsersResponse
        '400':
          description: No users can access this unlisted video.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Videos\Unlisted videos
      summary: Permit a list of users to access an unlisted video
      operationId: VideosUnlistedVideos_grantAccessToUsers
      security:
        - oauth2:
            - edit
      description: >-
        This method gives multiple users permission to access the specified
        unlisted video. The authenticated user must be the owner of the video.
        The body of the request should follow our [batch request
        format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests):
        each object must contain a single **uri** field whose value is the URI
        of the user who can access the video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The users have been granted access to the unlisted video.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosUnlistedVideosGrantAccessToUsersResponse
  /channels/{channel_id}/videos/{video_id}/texttracks:
    get:
      tags:
        - Videos\Text tracks
      summary: Get all the text tracks of a video
      operationId: VideosTextTracks_getAllTracks
      description: >-
        This method returns every text track of the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The text tracks were returned.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/VideosTextTracksGetAllTracksResponse'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Videos\Text tracks
      summary: Add a text track to a video
      operationId: VideosTextTracks_addTextTrackToVideo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a text track to the specified video. For more
        information, see [Working with Text Track
        Uploads](https://developer.vimeo.com/api/upload/texttracks).
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.video.texttrack+json:
            schema:
              $ref: '#/components/schemas/VideosTextTracksAddTextTrackToVideoRequest'
      responses:
        '201':
          description: The text track was added.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/text-track'
        '403':
          description: |-
            * The authenticated user can't add the text track.
            * Error code 2204: The request contains errors.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /channels/{channel_id}/videos/{video_id}/versions:
    get:
      tags:
        - Videos\Versions
      summary: Get all the versions of a video
      operationId: VideosVersions_getAllVideoVersions
      description: >-
        This method returns every version of the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The versions were returned.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/VideosVersionsGetAllVideoVersionsResponse'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /contentratings:
    get:
      tags:
        - Videos\Content ratings
      summary: Get all content ratings
      operationId: VideosContentRatings_getAllContentRatings
      description: This method returns all available content ratings.
      responses:
        '200':
          description: The content ratings were returned.
          content:
            application/vnd.vimeo.contentrating+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosContentRatingsGetAllContentRatingsResponse
  /creativecommons:
    get:
      tags:
        - Videos\Creative Commons
      summary: Get all Creative Commons licenses
      operationId: VideosCreativeCommons_getAllCCLicenses
      description: This method returns all available Creative Commons licenses.
      parameters:
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The Creative Commons licenses were returned.
          content:
            application/vnd.vimeo.creativecommons+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosCreativeCommonsGetAllCcLicensesResponse
  /destination/{destination_id}:
    delete:
      tags:
        - Live\Event destinations
      summary: Delete a live event destination
      operationId: LiveEventDestinations_deleteDestination
      security:
        - oauth2:
            - public
      description: >-
        This method deletes the specified event destination belonging to the
        authenticated user.
      parameters:
        - description: The ID of the event destination.
          in: path
          name: destination_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The event destination was deleted.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event destination exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event destinations
      summary: Get a live event destination
      operationId: LiveEventDestinations_getDestination
      security:
        - oauth2:
            - public
      description: >-
        This method returns the specified event destination belonging to the
        authenticated user.
      parameters:
        - description: The ID of the event destination.
          in: path
          name: destination_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The event destination was returned.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/live-event-destination'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event destination exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Event destinations
      summary: Update a live event destination
      operationId: LiveEventDestinations_updateDestination
      security:
        - oauth2:
            - public
      description: >-
        This method updates the specified event destination belonging to the
        authenticated user.
      parameters:
        - description: The ID of the event destination.
          in: path
          name: destination_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.live.simulcast.destination+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventDestinationsUpdateDestinationRequest
      responses:
        '200':
          description: The event destination was updated.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/live-event-destination'
        '400':
          description: >-
            * Error code 13000: The RTMP URL and key are already being used for
            one of the authenticated user's events.

            * Error code 13001: The authenticated user can simulcast on up to 20
            custom RTMP destinations at once.

            * Error code 13002: The authenticated user can simulcast on up to 10
            destinations on Facebook, YouTube, or LinkedIn.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event destination exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /groups:
    get:
      tags:
        - Groups\Essentials
      summary: Get all groups
      operationId: get_groups
      description: This method returns every available group.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `featured` - Return featured groups.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - featured
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `followers` - Sort the results by number of followers.
             * `relevant` - Sort the results by relevance. This option is available for search queries only.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - followers
              - relevant
              - videos
      responses:
        '200':
          description: The groups were returned.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/GetGroupsResponse'
    post:
      tags:
        - Groups\Essentials
      summary: Create a group
      operationId: create_group
      security:
        - oauth2:
            - create
      description: This method creates a new group.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.group+json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '200':
          description: The group was created.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/group'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't create groups.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /groups/{group_id}:
    delete:
      tags:
        - Groups\Essentials
      summary: Delete a group
      operationId: delete_group
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified group. The authenticated user must be
        the owner of the group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
      responses:
        '204':
          description: The group was deleted.
        '403':
          description: The authenticated user can't delete the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Groups\Essentials
      summary: Get a specific group
      operationId: get_group
      description: This method returns the specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
      responses:
        '200':
          description: The group was returned.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/group'
  /groups/{group_id}/users:
    get:
      tags:
        - Groups\Users
      summary: Get all the members of a group
      operationId: GroupsUsers_getGroupUsers
      description: This method returns every user who belongs to the specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `moderators` - Return group moderators.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - moderators
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The members were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/GroupsUsersGetGroupUsersResponse'
        '404':
          description: No such group exists.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /groups/{group_id}/videos:
    get:
      tags:
        - Groups\Videos
      summary: Get all the videos in a group
      operationId: GroupsVideos_getAllGroupVideos
      description: This method returns every video from the specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/GroupsVideosGetAllGroupVideosResponse'
        '304':
          description: >-
            No videos have been added to the group since the given
            `If-Modified-Since` header.
        '404':
          description: No such group exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /groups/{group_id}/videos/{video_id}:
    delete:
      tags:
        - Groups\Videos
      summary: Remove a video from a group
      operationId: GroupsVideos_removeFromGroup
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a video from the specified group. The authenticated
        user must be the owner of the group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
        '403':
          description: The authenticated user can't remove the video from the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Groups\Videos
      summary: Get a specific video in a group
      operationId: GroupsVideos_getSingleVideo
      description: >-
        This method returns a single video from the specified group. You can use
        this method to determine whether the video belongs to the group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: No such video or group exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Groups\Videos
      summary: Add a video to a group
      operationId: GroupsVideos_addToGroup
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a video to the specified group. The authenticated user
        must be the owner of the group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was added.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '202':
          description: The video is in pending status.
        '403':
          description: |-
            * The video is already in the group.
            * The authenticated user can't add videos to the group.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /languages:
    get:
      tags:
        - Videos\Languages
      summary: Get all languages
      operationId: get_languages
      description: This method returns all available video languages.
      parameters:
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `audiotracks` - Return languages that can be used for audio tracks.
             * `texttracks` - Return languages that can be used for text tracks.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - audiotracks
              - texttracks
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The languages were returned.
          content:
            application/vnd.vimeo.language+json:
              schema:
                $ref: '#/components/schemas/GetLanguagesResponse'
  /live_events:
    delete:
      tags:
        - Live\Essentials
      summary: Delete a list of live events
      operationId: LiveEssentials_deleteMultipleEvents
      security:
        - oauth2:
            - delete
      description: This method deletes multiple events belonging to the authenticated user.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: '#/components/schemas/LiveEssentialsDeleteMultipleEventsRequest'
      responses:
        '200':
          description: OK
    get:
      tags:
        - Live\Essentials
      summary: Get all the live events that belong to the user
      operationId: LiveEssentials_getUserLiveEvents
      description: The method returns every event belonging to the authenticated user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `not_in_folder` - Show only events that aren't in a folder.
             * `not_in_showcase` - Show only events that aren't in a showcase.
             * `not_in_webinar` - Show only events that aren't in a webinar.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - not_in_folder
              - not_in_showcase
              - not_in_webinar
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
        - description: |
            The type of event to return.

            Option descriptions:
             * `all` - Return all events.
             * `one_time` - Return one-time events only.
             * `recurring` - Return recurring events only.
          in: query
          name: type
          required: false
          schema:
            type: string
            example: recurring
            enum:
              - all
              - one_time
              - recurring
      responses:
        '200':
          description: The events were returned.
          content:
            application/vnd.vimeo.live.event+json:
              schema:
                $ref: '#/components/schemas/LiveEssentialsGetUserLiveEventsResponse'
    post:
      tags:
        - Live\Essentials
      summary: Create a live event
      operationId: LiveEssentials_createEvent
      security:
        - oauth2:
            - create
      description: This method creates a new event for the authenticated user.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: '#/components/schemas/LiveEssentialsCreateEventRequest'
      responses:
        '200':
          description: The event was created.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: |-
            * Error code 3200: The authenticated user can't create an event.
            * Error code 8000: The user credentials are invalid.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3422: The authenticated user can't create an event.

            * Error code 3439: The authenticated user can't edit the content
            rating of an event.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}:
    delete:
      tags:
        - Live\Essentials
      summary: Delete a specific live event
      operationId: LiveEssentials_deleteSpecificLiveEvent
      security:
        - oauth2:
            - delete
            - private
      description: This method deletes a single event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
      responses:
        '204':
          description: The event was deleted.
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to delete the event.

            * Error code 3422: The authenticated user can't delete the event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Essentials
      summary: Get a specific live event
      operationId: LiveEssentials_getEventById
      security:
        - oauth2:
            - private
      description: This method returns a single event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The password of the event when the privacy is set to `password`.
          in: query
          name: password
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The event was returned.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Essentials
      summary: Update a live event
      operationId: LiveEssentials_updateEventBelongingToAuthenticatedUser
      security:
        - oauth2:
            - edit
            - private
      description: This method updates an event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest
      responses:
        '200':
          description: The event was updated.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to update the event.

            * Error code 3422: The authenticated user can't update the event.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/activate:
    post:
      tags:
        - Live\Event activation
      summary: Activate a live event
      operationId: LiveEventActivation_createRtmpLinks
      security:
        - oauth2:
            - create
            - private
      description: >-
        This method creates the necessary RTMP links for the specified event.
        Begin streaming to these links to trigger the event on Vimeo. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video+json:
            schema:
              $ref: '#/components/schemas/LiveEventActivationCreateRtmpLinksRequest'
      responses:
        '200':
          description: The event was activated.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            * Error code 2428: The event has already been activated.

            * Error code 2551: The session can't be activated when the scheduled
            media playback feature is enabled.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to stream to the event.

            * Error code 3422: The authenticated user can't activate the event.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4017: An unexpected error occurred.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: 'Error code 7701: The service is unavailable.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/auto_cc:
    patch:
      tags:
        - Live\Event automated closed captions
      summary: Edit the automated closed captions preference of a live event
      operationId: LiveEventAutomatedClosedCaptions_editPreference
      security:
        - oauth2:
            - private
      description: >-
        This method edits the automated closed captions preference for the
        specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/application/vnd.vimeo.live.auto_cc+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventAutomatedClosedCaptionsEditPreferenceRequest
      responses:
        '200':
          description: The automated closed captions preference was edited.
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/live-event-automated-closed-captions'
        '400':
          description: 'Error code 2204: The payload is invalid.'
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The user doesn't have permission to edit the
            closed captions preference for the specified event.

            * Error code 3422: The authenticated user can't edit the closed
            captions preference for the specified event.

            * Error code 3439: The authenticated user has reached the automated
            closed captions usage limit, or they can't use the automated closed
            captions feature at all.
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/end:
    post:
      tags:
        - Live\Event end
      summary: End a live event
      operationId: LiveEventEnd_eventTermination
      security:
        - oauth2:
            - create
            - private
      description: >-
        This method ends the specified event. The authenticated user must be the
        owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the streamable video.
          in: query
          name: clip_id
          required: false
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The event was ended.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: 'Error code 10004: The event isn''t being streamed.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3200: The user can't end the session.
            * Error code 3422: The authenticated user can't end the event.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4021: There is no video for the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/low_latency:
    patch:
      tags:
        - Live\Event low latency
      summary: Toggle the low-latency option of a live event
      operationId: LiveEventLowLatency_toggleOption
      security:
        - oauth2:
            - private
      description: This method toggles the low-latency option of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/application/vnd.vimeo.live.low_latency+json:
            schema:
              $ref: '#/components/schemas/LiveEventLowLatencyToggleOptionRequest'
      responses:
        '200':
          description: The low-latency status of the event was returned.
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/recurring-live-event-low-latency'
        '403':
          description: >-
            Error code 3200: The authenticated user can't toggle the low-latency
            option of the event.
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/pictures:
    get:
      tags:
        - Live\Event thumbnails
      summary: Get all the thumbnails of a live event
      operationId: LiveEventThumbnails_getAllThumbnails
      security:
        - oauth2:
            - private
      description: This method returns every thumbnail image of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The thumbnails were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventThumbnailsGetAllThumbnailsResponse
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event thumbnails
      summary: Create a live event thumbnail
      operationId: LiveEventThumbnails_createThumbnailForEvent
      security:
        - oauth2:
            - upload
            - private
      description: This method creates a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventThumbnailsCreateThumbnailForEventRequest
      responses:
        '200':
          description: The thumbnail was created.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete the
            thumbnails for the event.

            * Error code 3422: The authenticated user can't create a thumbnail
            for the event.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/pictures/{thumbnail_id}:
    delete:
      tags:
        - Live\Event thumbnails
      summary: Delete a live event thumbnail
      operationId: LiveEventThumbnails_deleteThumbnailForEvent
      security:
        - oauth2:
            - delete
            - private
      description: This method deletes a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '204':
          description: The thumbnail was deleted.
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete the thumbnail
            for the event.

            * Error code 3422: The authenticated user can't delete the
            thumbnail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event thumbnails
      summary: Get a specific live event thumbnail
      operationId: LiveEventThumbnails_getSpecificThumbnail
      security:
        - oauth2:
            - private
      description: This method returns a single thumbnail image of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The thumbnail was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: 'Error code 3200: The authenticated user can''t access the thumbnail.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Event thumbnails
      summary: Edit a live event thumbnail
      operationId: LiveEventThumbnails_editLiveEventThumbnail
      security:
        - oauth2:
            - edit
            - private
      description: This method edits a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventThumbnailsEditLiveEventThumbnailRequest
      responses:
        '200':
          description: The thumbnail was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't update the thumbnail
            for the event.

            * Error code 3422: The authenticated user can't edit the thumbnail
            of the event.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/privacy/domains:
    get:
      tags:
        - Live\Embed privacy
      summary: Get all the domains on which a live event can be embedded
      operationId: LiveEmbedPrivacy_getWhitelistDomains
      security:
        - oauth2:
            - private
      description: >-
        This method returns every whitelisted domain for an event. The embed
        privacy setting must be `whitelist`.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The whitelisted domains for the event were returned.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEmbedPrivacyGetWhitelistDomainsResponse
        '400':
          description: 'Error code 2518: The embed permission isn''t `whitelist`.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't get domains for the
            event.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Live\Embed privacy
      summary: Embed a live event on one or more domains
      operationId: LiveEmbedPrivacy_embedEventOnDomains
      security:
        - oauth2:
            - edit
            - private
      description: >-
        This method embeds an event on the specified domains. The embed privacy
        setting must be `whitelist`.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEmbedPrivacyEmbedEventOnDomainsRequest'
      responses:
        '204':
          description: The domains were added to the whitelist.
        '400':
          description: 'Error code 2518: The embed permission isn''t `whitelist`.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't edit domains for the
            event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists under the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/videos:
    delete:
      tags:
        - Live\Event videos
      summary: Remove a list of videos from a live event
      operationId: LiveEventVideos_removeMultipleVideos
      security:
        - oauth2:
            - edit
            - private
      description: This method removes multiple videos from the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEventVideosRemoveMultipleVideosRequest'
      responses:
        '204':
          description: The videos were removed.
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't remove one or more
            of the listed videos.

            * Error code 3422: The authenticated user can't remove videos from
            the event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event videos
      summary: Get all the videos in a live event
      operationId: LiveEventVideos_listLiveEventVideos
      security:
        - oauth2:
            - private
      description: This method returns every video in the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The page that contains the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable events.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added videos.
             * `alphabetical` - Sort the results alphabetically.
             * `arranged` - Sort the results in the order that the user has arranged the videos.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - arranged
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventVideosListLiveEventVideosResponse
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event videos
      summary: Add a list of videos to a live event
      operationId: LiveEventVideos_addMultiple
      security:
        - oauth2:
            - edit
            - private
      description: This method adds multiple videos to the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEventVideosAddMultipleRequest'
      responses:
        '204':
          description: The videos were added.
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't add videos to the
            event.

            * Error code 3422: The authenticated user can't add one or more of
            the listed videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /live_events/{live_event_id}/videos/{video_id}:
    get:
      tags:
        - Live\Event videos
      summary: Get a specific video in a live event
      operationId: LiveEventVideos_specificEventVideo
      security:
        - oauth2:
            - private
      description: This method returns a single video in the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, video, or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /me:
    get:
      tags:
        - Users\Essentials
      summary: Get the user
      operationId: UsersEssentials_getUser
      description: This method returns the authenticated user.
      responses:
        '200':
          description: The user was returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/user'
    patch:
      tags:
        - Users\Essentials
      summary: Edit the user
      operationId: UsersEssentials_editVimeoAccount
      description: This method edits the Vimeo account of the authenticated user.
      requestBody:
        required: false
        content:
          application/vnd.vimeo.user+json:
            schema:
              $ref: '#/components/schemas/UsersEssentialsEditVimeoAccountRequest'
      responses:
        '200':
          description: The user's Vimeo account was edited.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/albums:
    get:
      tags:
        - Showcases\Essentials
      summary: Get all the showcases that belong to the user
      operationId: ShowcasesEssentials_getAllUserShowcases
      description: This method returns every showcase belonging to the authenticated user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date of creation.
             * `duration` - Sort the results by duration.
             * `videos` - Sort the results by the number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - duration
              - videos
      responses:
        '200':
          description: The showcases were returned.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesEssentialsGetAllUserShowcasesResponse
        '400':
          description: A parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Showcases\Essentials
      summary: Create a showcase
      operationId: ShowcasesEssentials_createUserShowcase
      security:
        - oauth2:
            - create
      description: This method creates a new showcase for the specified user.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.album+json:
            schema:
              $ref: >-
                #/components/schemas/ShowcasesEssentialsCreateUserShowcaseRequest
      responses:
        '201':
          description: The showcase was created.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/album'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't create showcases.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/albums/{album_id}:
    delete:
      tags:
        - Showcases\Essentials
      summary: Delete a showcase
      operationId: ShowcasesEssentials_deleteShowcase
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified showcase. The authenticated user must
        be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
      responses:
        '204':
          description: The showcase was deleted.
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't delete the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Showcases\Essentials
      summary: Get a specific showcase
      operationId: ShowcasesEssentials_getSpecificShowcase
      description: >-
        This method returns the specified showcase. The authenticated user must
        be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
      responses:
        '200':
          description: The showcase was returned.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/album'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Showcases\Essentials
      summary: Edit a showcase
      operationId: ShowcasesEssentials_editShowcase
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified showcase. The authenticated user must be
        the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
      requestBody:
        required: false
        content:
          application/vnd.vimeo.album+json:
            schema:
              $ref: '#/components/schemas/ShowcasesEssentialsEditShowcaseRequest'
      responses:
        '200':
          description: The showcase was edited.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/album'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: >-
            The authenticated user doesn't own the showcase, the supplied token
            doesn't have the proper scopes, or the authenticated user can't edit
            the showcase.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/albums/{album_id}/videos:
    get:
      tags:
        - Showcases\Showcase videos
      summary: Get all the videos in a showcase
      operationId: ShowcasesShowcaseVideos_listInShowcase
      description: >-
        This method returns every video in the specified showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The page containing the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Filter the results by the **embeddable** attribute.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: The password of the showcase.
          in: query
          name: password
          required: false
          schema:
            type: string
            example: hunter1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `default` - Sort the results by the default method.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `manual` - Sort the results by their manual order.
             * `modified_time` - Sort the results by last modification.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - default
              - duration
              - likes
              - manual
              - modified_time
              - plays
        - description: >-
            Whether to include private videos in the search. Please note that a
            separate search service provides this functionality. The service
            performs a partial text search on the video's name.
          in: query
          name: weak_search
          required: false
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesShowcaseVideosListInShowcase200Response
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Showcases\Showcase videos
      summary: Replace all the videos in a showcase
      operationId: ShowcasesShowcaseVideos_replaceVideos
      security:
        - oauth2:
            - edit
      description: >-
        This method replaces all the videos in the specified showcase with a new
        set of one or more videos. The authenticated user must be the owner of
        the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowcasesShowcaseVideosReplaceVideosRequest'
      responses:
        '201':
          description: The videos were added.
        '403':
          description: The authenticated user can't add videos to the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/albums/{album_id}/videos/{video_id}:
    delete:
      tags:
        - Showcases\Showcase videos
      summary: Remove a video from a showcase
      operationId: ShowcasesShowcaseVideos_removeFromShowcase
      security:
        - oauth2:
            - edit
      description: >-
        This method removes the specified video from its showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      responses:
        '204':
          description: The video was removed.
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't remove videos from the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Showcases\Showcase videos
      summary: Get a specific video in a showcase
      operationId: ShowcasesShowcaseVideos_getSpecificVideoInShowcase
      description: >-
        This method returns a single video belonging to the specified showcase.
        The authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
        - description: The password of the showcase.
          in: query
          name: password
          required: false
          schema:
            type: string
            example: hunter1
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: No such showcase exists, or the video doesn't belong to it.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Showcases\Showcase videos
      summary: Add a specific video to a showcase
      operationId: ShowcasesShowcaseVideos_addToShowcase
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single video to the specified showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      responses:
        '204':
          description: The video was added.
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't add videos to the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/albums/{album_id}/videos/{video_id}/set_album_thumbnail:
    post:
      tags:
        - Showcases\Showcase videos
      summary: Create a thumbnail for a showcase from a showcase video
      operationId: ShowcasesShowcaseVideos_createShowcaseThumbnail
      security:
        - oauth2:
            - edit
      description: >-
        This method creates a thumbnail image for a showcase from the specified
        frame of a showcase video. The authenticated user must be the owner of
        the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest
      responses:
        '200':
          description: The showcase thumbnail was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
        '403':
          description: >-
            Error code 3429: The authenticated user can't create a thumbnail for
            this showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such showcase, user, or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/albums/{album_id}/videos/{video_id}/set_featured_video:
    patch:
      tags:
        - Showcases\Showcase videos
      summary: Set the featured video of a showcase
      operationId: ShowcasesShowcaseVideos_setFeaturedVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method sets the featured video of the specified showcase. The
        authenticated user must be the owner of the showcase, and the featured
        video must belong to it.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      responses:
        '200':
          description: The video is now the featured video of the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
        '403':
          description: >-
            Error code 3429: The authenticated user can't set the featured video
            of this showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such showcase, user, or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/analytics:
    get:
      tags:
        - Users\Analytics
      summary: Get analytics for the user
      operationId: UsersAnalytics_getUserMetrics
      security:
        - oauth2:
            - stats
      description: This method returns analytic metrics for the authenticated user.
      parameters:
        - description: |
            The data dimension by which to group the results.

            Option descriptions:
             * `country` - Group the results by country.
             * `embed_domain` - Group the results by embed domain.
             * `total` - Group the results by the time range provided.
             * `video` - Group the results by video.
          in: query
          name: dimension
          required: true
          schema:
            type: string
            enum:
              - country
              - embed_domain
              - total
              - video
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: A comma-separated list of video, folder, or event URIs to filter.
          in: query
          name: filter_content
          required: false
          schema:
            type: string
            example: /folder/1233456,/video/7890123,/folder/123
        - description: >-
            A comma-separated list of country codes in ISO-3166 format to filter
            on.
          in: query
          name: filter_countries
          required: false
          schema:
            type: array
            example: UK,US,IN
            items:
              type: string
        - description: A comma-separated list of device types to filter on.
          in: query
          name: filter_device_types
          required: false
          schema:
            type: array
            example: android,ios
            items:
              type: string
        - description: A comma-separated list of domain names to filter on.
          in: query
          name: filter_embed_domains
          required: false
          schema:
            type: array
            example: abc.com,xyz.com
            items:
              type: string
        - description: A comma-separated list of streaming types to filter on.
          in: query
          name: filter_streaming_types
          required: false
          schema:
            type: array
            example: live,video
            items:
              type: string
        - description: The start date of the range of results in ISO 8601 format.
          in: query
          name: from
          required: true
          schema:
            type: string
            example: '2021-05-30T00:00:00+00:00'
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The maximum number of items returned from the request, up to a limit
            of 1000 items. The default value is `50`.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 50
        - description: |
            The way to sort the results.

            Option descriptions:
             * `average_percent_watched` - Sort the results by mean seconds played.
             * `average_time_watched` - Sort the results by mean percentage played.
             * `comments` - Sort the results by the number of comments.
             * `country` - Sort the results by country.
             * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.
             * `downloads` - Sort the results by the number of downloads.
             * `embed_domain` - Sort the results by embed domain.
             * `finishes` - Sort the results by the number of complete plays.
             * `impressions` - Sort the results by the number of impressions.
             * `like` - Sort the results by the number of likes.
             * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn't `none`.
             * `total_time_watched` - Sort the results by total seconds played.
             * `unique_impressions` - Sort the results by unique impressions.
             * `unique_viewers` - Sort the results by unique viewers.
             * `video` - Sort the results by video ID.
             * `views` - Sort the results by the number of views.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - average_percent_watched
              - average_time_watched
              - comments
              - country
              - default
              - downloads
              - embed_domain
              - finishes
              - impressions
              - like
              - time
              - total_time_watched
              - unique_impressions
              - unique_viewers
              - video
              - views
        - description: >
            The interval by which to aggregate the data according to the
            specified data dimension. The default value is `none`.


            Option descriptions:
             * `day` - Aggregate the results by day according to the specified data dimension.
             * `month` - Aggregate the results by month according to the specified data dimension.
             * `none` - The results are not aggregated by time interval.
             * `week` - Aggregate the results by week according to the specified data dimension.
             * `year` - Aggregate the results by year according to the specified data dimension.
          in: query
          name: time_interval
          required: false
          schema:
            type: string
            enum:
              - day
              - month
              - none
              - week
              - year
        - description: The end date of the range of results in ISO 8601 format.
          in: query
          name: to
          required: true
          schema:
            type: string
            example: '2021-06-30T23:59:59+00:00'
      responses:
        '200':
          description: The analytics were returned.
          content:
            application/vnd.vimeo.analytics+json:
              schema:
                $ref: '#/components/schemas/UsersAnalyticsGetUserMetricsResponse'
  /me/appearances:
    get:
      tags:
        - Videos\Essentials
      summary: Get all the videos in which the user appears
      operationId: VideosEssentials_getUserAppearances
      description: >-
        This method returns all the videos in which the authenticated user has a
        credited appearance.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosEssentialsGetUserAppearancesResponse
  /me/categories:
    get:
      tags:
        - Categories\Users
      summary: Get all the categories that the user follows
      operationId: CategoriesUsers_listFollowedCategories
      security:
        - oauth2:
            - private
      description: This method returns every category that the authenticated user follows.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `name` - Sort the results by name.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - name
      responses:
        '200':
          description: The categories were returned.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: >-
                  #/components/schemas/CategoriesUsersListFollowedCategoriesResponse
        '403':
          description: >-
            Error code 3200: Only the authenticated user can access this
            information.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/categories/{category}:
    delete:
      tags:
        - Categories\Users
      summary: Cause the user to stop following a category
      operationId: CategoriesUsers_stopFollowingCategory
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to stop following the
        specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
      responses:
        '204':
          description: The user has stopped following the category.
    get:
      tags:
        - Categories\Users
      summary: Check if the user follows a category
      operationId: CategoriesUsers_checkFollowedCategory
      security:
        - oauth2:
            - private
      description: >-
        This method determines whether the authenticated user follows the
        specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
      responses:
        '204':
          description: The user is following the category.
    put:
      tags:
        - Categories\Users
      summary: Cause the user to follow a specific category
      operationId: CategoriesUsers_followCategory
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to follow the specified
        category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: number
            example: 0
      responses:
        '204':
          description: The user is following the category.
  /me/channels:
    get:
      tags:
        - Channels\Essentials
      summary: Get all the channels to which a user subscribes
      operationId: ChannelsEssentials_getUserSubscriptions
      description: >-
        This method returns all the channels to which the specified user
        subscribes.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `moderated` - Return moderated channels.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - moderated
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `followers` - Sort the results by number of followers.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - followers
              - videos
      responses:
        '200':
          description: The channels were returned.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsEssentialsGetUserSubscriptionsResponse
        '304':
          description: >-
            No channel has been followed since the given `If-Modified-Since`
            header.
  /me/channels/{channel_id}:
    delete:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Unsubscribe the user from a specific channel
      operationId: ChannelsSubscriptionsAndSubscribers_unsubscribeUserFromChannel
      security:
        - oauth2:
            - interact
      description: >-
        This method unsubscribes the authenticated user from the specified
        channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '204':
          description: The user is unsubscribed from the channel.
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Check if a user follows a channel
      operationId: ChannelsSubscriptionsAndSubscribers_checkIfUserFollowsChannel
      description: >-
        This method determines whether the specified user is a follower of a
        particular channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '204':
          description: The user follows the channel.
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Subscribe the user to a specific channel
      operationId: ChannelsSubscriptionsAndSubscribers_subscribeUserToChannel
      security:
        - oauth2:
            - interact
      description: This method subscribes the authenticated user to the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
      responses:
        '204':
          description: The user is subscribed to the channel.
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/customlogos:
    get:
      tags:
        - Embed Presets\Custom logos
      summary: Get all the custom logos that belong to the user
      operationId: EmbedPresetsCustomLogos_list
      description: >-
        This method returns every custom logo that belongs to the authenticated
        user or team owner.
      responses:
        '200':
          description: The custom logos were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/EmbedPresetsCustomLogosListResponse'
        '403':
          description: The authenticated user can't access the custom logos.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Embed Presets\Custom logos
      summary: Add a custom user logo
      operationId: EmbedPresetsCustomLogos_addUserLogo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a custom logo representing the authenticated user for
        display in the embedded player. Be sure to use this method in the
        context of the multi-step upload procedure described in our [Working
        with Thumbnail
        Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail)
        guide. This method represents Step 2 of the procedure.
      responses:
        '201':
          description: The custom logo was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't add the custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/customlogos/{logo_id}:
    delete:
      tags:
        - Embed Presets\Custom logos
      summary: Delete a custom user logo
      operationId: EmbedPresetsCustomLogos_deleteUserLogo
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified custom logo belonging to the
        authenticated user.
      parameters:
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '204':
          description: The custom logo was deleted.
        '403':
          description: The authenticated user can't access the custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Embed Presets\Custom logos
      summary: Get a specific custom user logo
      operationId: EmbedPresetsCustomLogos_getSpecificUserLogo
      description: >-
        This method returns a single custom logo belonging to the authenticated
        user.
      parameters:
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The custom logo was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't access the custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all available live event destinations for the user to stream to
      operationId: LiveEventDestinations_getAllAvailableDestinations
      security:
        - oauth2:
            - public
      description: >-
        This method returns every available event destination for the
        authenticated user to stream to.
      responses:
        '200':
          description: The event destinations were returned.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't get the available
            destinations.

            * Error code 3422: The authenticated user can't live simulcast.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/feed:
    get:
      tags:
        - Users\Feeds
      summary: Get all the videos in the user's feed
      operationId: UsersFeeds_getUserFeedVideos
      security:
        - oauth2:
            - private
      description: This method returns every video in the authenticated user's feed.
      parameters:
        - description: >-
            The pagination offset. We recommend that you use the pagination
            links in the feed response instead of working with this value
            directly. For more details, see our [pagination
            documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).
          in: query
          name: offset
          required: false
          schema:
            type: string
            example: '280'
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The feed type.

            Option descriptions:
             * `appears` - Videos in which the user appears.
             * `category_featured` - Featured videos.
             * `channel` - Channel videos.
             * `facebook_feed` - Videos from the user's Facebook feed.
             * `following` - Videos from accounts that the user follows.
             * `group` - Group videos.
             * `likes` - Liked videos.
             * `ondemand_publish` - On Demand videos.
             * `share` - Shared videos.
             * `tagged_with` - Tagged videos.
             * `twitter_timeline` - Videos from the user's Twitter timeline.
             * `uploads` - Uploaded videos.
          in: query
          name: type
          required: false
          schema:
            type: string
            enum:
              - appears
              - category_featured
              - channel
              - facebook_feed
              - following
              - group
              - likes
              - ondemand_publish
              - share
              - tagged_with
              - twitter_timeline
              - uploads
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.activity+json:
              schema:
                $ref: '#/components/schemas/UsersFeedsGetUserFeedVideosResponse'
  /me/followers:
    get:
      tags:
        - Users\Followers
      summary: Get all the followers of the user
      operationId: UsersFollowers_listAll
      description: This method returns every follower of the authenticated user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date followed.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The user's followers were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/UsersFollowersListAllResponse'
  /me/following:
    get:
      tags:
        - Users\Followers
      summary: Get all the users that the user is following
      operationId: UsersFollowers_listOfFollowingUsers
      description: This method returns every user that the authenticated user is following.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `online` - Return users who are currently online.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - online
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date followed.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The followed users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/UsersFollowersListOfFollowingUsersResponse
    post:
      tags:
        - Users\Followers
      summary: Follow a list of users
      operationId: UsersFollowers_followMultipleUsers
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to become a follower of
        multiple users. In the body of the request, specify the list of users to
        follow as

        an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so
        on, are the user IDs of the users in question:


        ```

        {
         [
             {"uri" : "/users/{user01_id}"},
             {"uri" : "/users/{user02_id}"},
             {"uri" : "/users/{user03_id}"}
         ]
        }

        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersFollowersFollowMultipleUsersRequest'
      responses:
        '204':
          description: The users were followed.
        '400':
          description: >-
            * Error code 2205: The request body is empty, the users array is
            invalid, or the list of users doesn't contain URIs.

            * Error code 2900: A user in the list doesn't exist.

            * Error code 2901: The list contains more than 100 users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user access token is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3417: The authenticated user can't follow other users.

            * Error code 3438: The authenticated user can't follow other users
            because an email verification check hasn't been completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: >-
            Error code 9006: The authenticated user is rate-limited from
            following other users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4005: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/following/{follow_user_id}:
    delete:
      tags:
        - Users\Followers
      summary: Unfollow a user
      operationId: UsersFollowers_stopFollowingUser
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to stop following another
        user.
      parameters:
        - description: The ID of the user to unfollow.
          in: path
          name: follow_user_id
          required: true
          schema:
            type: number
            example: 3766357
      responses:
        '204':
          description: The user was unfollowed.
    get:
      tags:
        - Users\Followers
      summary: Check if the user is following another user
      operationId: UsersFollowers_checkFollowingUser
      description: >-
        This method determines whether the authenticated user is a follower of
        the specified user.
      parameters:
        - description: The ID of the user to follow.
          in: path
          name: follow_user_id
          required: true
          schema:
            type: number
            example: 3766357
      responses:
        '204':
          description: The authenticated user follows the specified user.
        '404':
          description: The authenticated user doesn't follow the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Users\Followers
      summary: Follow a specific user
      operationId: UsersFollowers_followSpecificUser
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to become the follower of the
        specified user.
      parameters:
        - description: The ID of the user to follow.
          in: path
          name: follow_user_id
          required: true
          schema:
            type: number
            example: 3766357
      responses:
        '204':
          description: The user was followed.
        '403':
          description: >-
            * The authenticated user can't follow other users.

            * Error code 3438: The authenticated user can't follow other users
            because an email verification check hasn't been completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/groups:
    get:
      tags:
        - Groups\Users
      summary: Get all the groups that the user has joined
      operationId: GroupsUsers_getUserGroups
      description: This method returns every group to which the authenticated user belongs.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `moderated` - Return moderated groups.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - moderated
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `members` - Sort the results by number of members.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - members
              - videos
      responses:
        '200':
          description: The groups were returned.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/GroupsUsersGetUserGroupsResponse'
  /me/groups/{group_id}:
    delete:
      tags:
        - Groups\Subscriptions
      summary: Remove the user from a group
      operationId: GroupsSubscriptions_removeUserFromGroup
      security:
        - oauth2:
            - interact
      description: >-
        This method removes the authenticated user from the specified group. The
        authenticated user can't be the owner of the group; assign a new owner
        through a PATCH request first.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
      responses:
        '204':
          description: The user was removed from the group.
        '403':
          description: The authenticated user can't leave the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Groups\Subscriptions
      summary: Add the user to a group
      operationId: GroupsSubscriptions_addUserToGroup
      security:
        - oauth2:
            - interact
      description: This method adds the authenticated user to the specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
      responses:
        '204':
          description: The user joined the group.
        '403':
          description: >-
            The authenticated user can't join the group. Possible reasons are
            that the group isn't public or that its privacy setting is
            `members`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Groups\Users
      summary: Check if a user has joined a group
      operationId: GroupsUsers_checkUserJoinedGroup
      description: >-
        This method determines whether the authenticated user belongs to the
        specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
      responses:
        '204':
          description: The user belongs to the group.
        '404':
          description: |-
            * No such group exists.
            * The authenticated user isn't a member of the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/likes:
    get:
      tags:
        - Likes\Essentials
      summary: Get all the videos that a user has liked
      operationId: LikesEssentials_getUserLikedVideos
      description: This method returns every video that the authenticated user has liked.
      parameters:
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/LikesEssentialsGetUserLikedVideosResponse'
  /me/likes/{video_id}:
    delete:
      tags:
        - Likes\Essentials
      summary: Cause a user to unlike a video
      operationId: LikesEssentials_unlikeVideo
      security:
        - oauth2:
            - interact
      description: This method causes the authenticated user to unlike the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was unliked.
        '403':
          description: The authenticated user can't like videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Likes\Essentials
      summary: Check if the user has liked a video
      operationId: LikesEssentials_checkUserLikedVideo
      description: >-
        This method checks if the authenticated user has liked the specified
        video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The user has liked the video.
        '404':
          description: The user hasn't liked the video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Likes\Essentials
      summary: Cause the user to like a video
      operationId: LikesEssentials_likeVideo
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to like the specified video.
        The user can't like their own video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was liked.
        '400':
          description: The authenticated user owns the video and can't like it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't like videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/live_events:
    delete:
      tags:
        - Live\Essentials
      summary: Delete a list of live events
      operationId: LiveEssentials_deleteMultipleEvents
      security:
        - oauth2:
            - delete
      description: This method deletes multiple events belonging to the authenticated user.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: '#/components/schemas/LiveEssentialsDeleteMultipleEventsRequest1'
      responses:
        '200':
          description: OK
    get:
      tags:
        - Live\Essentials
      summary: Get all the live events that belong to the user
      operationId: LiveEssentials_getAllUserLiveEvents
      description: The method returns every event belonging to the authenticated user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `not_in_folder` - Show only events that aren't in a folder.
             * `not_in_showcase` - Show only events that aren't in a showcase.
             * `not_in_webinar` - Show only events that aren't in a webinar.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - not_in_folder
              - not_in_showcase
              - not_in_webinar
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
        - description: |
            The type of event to return.

            Option descriptions:
             * `all` - Return all events.
             * `one_time` - Return one-time events only.
             * `recurring` - Return recurring events only.
          in: query
          name: type
          required: false
          schema:
            type: string
            example: recurring
            enum:
              - all
              - one_time
              - recurring
      responses:
        '200':
          description: The events were returned.
          content:
            application/vnd.vimeo.live.event+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEssentialsGetAllUserLiveEventsResponse
    post:
      tags:
        - Live\Essentials
      summary: Create a live event
      operationId: LiveEssentials_createLiveEvent
      security:
        - oauth2:
            - create
      description: This method creates a new event for the authenticated user.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: '#/components/schemas/LiveEssentialsCreateLiveEventRequest'
      responses:
        '200':
          description: The event was created.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: |-
            * Error code 3200: The authenticated user can't create an event.
            * Error code 8000: The user credentials are invalid.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3422: The authenticated user can't create an event.

            * Error code 3439: The authenticated user can't edit the content
            rating of an event.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}:
    delete:
      tags:
        - Live\Essentials
      summary: Delete a specific live event
      operationId: LiveEssentials_deleteSingleEvent
      security:
        - oauth2:
            - delete
            - private
      description: This method deletes a single event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
      responses:
        '204':
          description: The event was deleted.
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to delete the event.

            * Error code 3422: The authenticated user can't delete the event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Essentials
      summary: Get a specific live event
      operationId: LiveEssentials_getSpecificLiveEvent
      security:
        - oauth2:
            - private
      description: This method returns a single event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The password of the event when the privacy is set to `password`.
          in: query
          name: password
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The event was returned.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Essentials
      summary: Update a live event
      operationId: LiveEssentials_updateEventBelongingToAuthenticatedUser
      security:
        - oauth2:
            - edit
            - private
      description: This method updates an event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1
      responses:
        '200':
          description: The event was updated.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to update the event.

            * Error code 3422: The authenticated user can't update the event.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/activate:
    post:
      tags:
        - Live\Event activation
      summary: Activate a live event
      operationId: LiveEventActivation_createRtmpLinks
      security:
        - oauth2:
            - create
            - private
      description: >-
        This method creates the necessary RTMP links for the specified event.
        Begin streaming to these links to trigger the event on Vimeo. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video+json:
            schema:
              $ref: '#/components/schemas/LiveEventActivationCreateRtmpLinksRequest1'
      responses:
        '200':
          description: The event was activated.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            * Error code 2428: The event has already been activated.

            * Error code 2551: The session can't be activated when the scheduled
            media playback feature is enabled.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to stream to the event.

            * Error code 3422: The authenticated user can't activate the event.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4017: An unexpected error occurred.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: 'Error code 7701: The service is unavailable.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/auto_cc:
    patch:
      tags:
        - Live\Event automated closed captions
      summary: Edit the automated closed captions preference of a live event
      operationId: LiveEventAutomatedClosedCaptions_editPreferenceForEvent
      security:
        - oauth2:
            - private
      description: >-
        This method edits the automated closed captions preference for the
        specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/application/vnd.vimeo.live.auto_cc+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest
      responses:
        '200':
          description: The automated closed captions preference was edited.
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/live-event-automated-closed-captions'
        '400':
          description: 'Error code 2204: The payload is invalid.'
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The user doesn't have permission to edit the
            closed captions preference for the specified event.

            * Error code 3422: The authenticated user can't edit the closed
            captions preference for the specified event.

            * Error code 3439: The authenticated user has reached the automated
            closed captions usage limit, or they can't use the automated closed
            captions feature at all.
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all the destinations of a recurring live event
      operationId: LiveEventDestinations_listAllAvailableDestinations
      security:
        - oauth2:
            - public
      description: >-
        This method returns every destination of the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The event destinations were returned.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventDestinationsListAllAvailableDestinationsResponse
        '400':
          description: >-
            Error code 2204: Parameters are missing, or the body data is
            invalid.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event destinations
      summary: Create a live event destination
      operationId: LiveEventDestinations_createDestination
      security:
        - oauth2:
            - public
      description: >-
        This method creates a destination for the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.simulcast.destination+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventDestinationsCreateDestinationRequest
      responses:
        '200':
          description: The event destination was created.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/live-event-destination'
        '400':
          description: >-
            * Error code 2204: Parameters are missing, or the body data is
            invalid.

            * Error code 13003: You can create only one LinkedIn destination per
            event.

            * Error code 13004: You can create only one YouTube destination per
            event.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destinations.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/end:
    post:
      tags:
        - Live\Event end
      summary: End a live event
      operationId: LiveEventEnd_eventTerminationAlt1
      security:
        - oauth2:
            - create
            - private
      description: >-
        This method ends the specified event. The authenticated user must be the
        owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the streamable video.
          in: query
          name: clip_id
          required: false
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The event was ended.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: 'Error code 10004: The event isn''t being streamed.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3200: The user can't end the session.
            * Error code 3422: The authenticated user can't end the event.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4021: There is no video for the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/low_latency:
    patch:
      tags:
        - Live\Event low latency
      summary: Toggle the low-latency option of a live event
      operationId: LiveEventLowLatency_toggleOption
      security:
        - oauth2:
            - private
      description: This method toggles the low-latency option of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/application/vnd.vimeo.live.low_latency+json:
            schema:
              $ref: '#/components/schemas/LiveEventLowLatencyToggleOptionRequest1'
      responses:
        '200':
          description: The low-latency status of the event was returned.
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/recurring-live-event-low-latency'
        '403':
          description: >-
            Error code 3200: The authenticated user can't toggle the low-latency
            option of the event.
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/m3u8_playback:
    get:
      tags:
        - Live\Event M3U8 playback
      summary: Get an M3U8 playback URL for a live event
      operationId: LiveEventM3U8Playback_getUrl
      security:
        - oauth2:
            - private
      description: >-
        This method returns an M3U8 playback URL for the specified event stream.
        You should use this endpoint only in conjunction with our recommended
        procedure for playing events via HLS. For more information, see our [HLS
        guide](https://developer.vimeo.com/api/live/playback).
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The requested maximum frames per second.
          in: query
          name: max_fps_fhd
          required: false
          schema:
            type: number
            example: 30
      responses:
        '200':
          description: The M3U8 playback URL was returned.
        '400':
          description: 'Error code 10008: The event hasn''t started.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the M3U8
            playback URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: |-
            * Error code 4020: No streamable video was found.
            * Error code 4021: No video was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: >-
            Error code 7900: The streamable video in progress will be available
            soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/pictures:
    get:
      tags:
        - Live\Event thumbnails
      summary: Get all the thumbnails of a live event
      operationId: LiveEventThumbnails_getAll
      security:
        - oauth2:
            - private
      description: This method returns every thumbnail image of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The thumbnails were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/LiveEventThumbnailsGetAllResponse'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event thumbnails
      summary: Create a live event thumbnail
      operationId: LiveEventThumbnails_addThumbnail
      security:
        - oauth2:
            - upload
            - private
      description: This method creates a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/LiveEventThumbnailsAddThumbnailRequest'
      responses:
        '200':
          description: The thumbnail was created.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete the
            thumbnails for the event.

            * Error code 3422: The authenticated user can't create a thumbnail
            for the event.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/pictures/{thumbnail_id}:
    delete:
      tags:
        - Live\Event thumbnails
      summary: Delete a live event thumbnail
      operationId: LiveEventThumbnails_deleteForEvent
      security:
        - oauth2:
            - delete
            - private
      description: This method deletes a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '204':
          description: The thumbnail was deleted.
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete the thumbnail
            for the event.

            * Error code 3422: The authenticated user can't delete the
            thumbnail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event thumbnails
      summary: Get a specific live event thumbnail
      operationId: LiveEventThumbnails_getSpecificThumbnail
      security:
        - oauth2:
            - private
      description: This method returns a single thumbnail image of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The thumbnail was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: 'Error code 3200: The authenticated user can''t access the thumbnail.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Event thumbnails
      summary: Edit a live event thumbnail
      operationId: LiveEventThumbnails_updateEventThumbnail
      security:
        - oauth2:
            - edit
            - private
      description: This method edits a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventThumbnailsUpdateEventThumbnailRequest
      responses:
        '200':
          description: The thumbnail was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't update the thumbnail
            for the event.

            * Error code 3422: The authenticated user can't edit the thumbnail
            of the event.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/privacy/domains:
    get:
      tags:
        - Live\Embed privacy
      summary: Get all the domains on which a live event can be embedded
      operationId: LiveEmbedPrivacy_getWhitelistDomains
      security:
        - oauth2:
            - private
      description: >-
        This method returns every whitelisted domain for an event. The embed
        privacy setting must be `whitelist`.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The whitelisted domains for the event were returned.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEmbedPrivacyGetWhitelistDomains200Response
        '400':
          description: 'Error code 2518: The embed permission isn''t `whitelist`.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't get domains for the
            event.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Live\Embed privacy
      summary: Embed a live event on one or more domains
      operationId: LiveEmbedPrivacy_embedEventOnDomains
      security:
        - oauth2:
            - edit
            - private
      description: >-
        This method embeds an event on the specified domains. The embed privacy
        setting must be `whitelist`.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEmbedPrivacyEmbedEventOnDomainsRequest1'
      responses:
        '204':
          description: The domains were added to the whitelist.
        '400':
          description: 'Error code 2518: The embed permission isn''t `whitelist`.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't edit domains for the
            event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists under the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/videos:
    delete:
      tags:
        - Live\Event videos
      summary: Remove a list of videos from a live event
      operationId: LiveEventVideos_removeMultiple
      security:
        - oauth2:
            - edit
            - private
      description: This method removes multiple videos from the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEventVideosRemoveMultipleRequest'
      responses:
        '204':
          description: The videos were removed.
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't remove one or more
            of the listed videos.

            * Error code 3422: The authenticated user can't remove videos from
            the event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event videos
      summary: Get all the videos in a live event
      operationId: LiveEventVideos_getAll
      security:
        - oauth2:
            - private
      description: This method returns every video in the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The page that contains the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable events.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added videos.
             * `alphabetical` - Sort the results alphabetically.
             * `arranged` - Sort the results in the order that the user has arranged the videos.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - arranged
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/LiveEventVideosGetAllResponse'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event videos
      summary: Add a list of videos to a live event
      operationId: LiveEventVideos_uploadMultiple
      security:
        - oauth2:
            - edit
            - private
      description: This method adds multiple videos to the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEventVideosUploadMultipleRequest'
      responses:
        '204':
          description: The videos were added.
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't add videos to the
            event.

            * Error code 3422: The authenticated user can't add one or more of
            the listed videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/live_events/{live_event_id}/videos/{video_id}:
    get:
      tags:
        - Live\Event videos
      summary: Get a specific video in a live event
      operationId: LiveEventVideos_specificVideo
      security:
        - oauth2:
            - private
      description: This method returns a single video in the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, video, or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/ondemand/pages:
    get:
      tags:
        - On Demand\Essentials
      summary: Get all the On Demand pages of the user
      operationId: OnDemandEssentials_getAllUserPages
      description: >-
        This method returns every On Demand page belonging to the authenticated
        user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The type of the page to return.

            Option descriptions:
             * `film` - The page type is a film.
             * `series` - The page type is a series.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - film
              - series
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added page.
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `modified_time` - Sort the results by time of page modification.
             * `name` - Sort the results by page name.
             * `publish.time` - Sort the results by time of page publishing.
             * `rating` - Sort the results by content rating.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - date
              - modified_time
              - name
              - publish.time
              - rating
      responses:
        '200':
          description: The On Demand pages were returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/OnDemandEssentialsGetAllUserPagesResponse'
        '404':
          description: No such user exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - On Demand\Essentials
      summary: Create an On Demand page
      operationId: OnDemandEssentials_createPage
      description: >-
        This method creates a new On Demand page for the specified user. To
        publish the page, use the
        [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod)
        method.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnDemandEssentialsCreatePageRequest'
      responses:
        '201':
          description: The On Demand page was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/on-demand-page'
  /me/ondemand/purchases:
    get:
      tags:
        - On Demand\Purchases and rentals
      summary: Get all of the user's On Demand purchases and rentals
      operationId: OnDemandPurchasesAndRentals_getAllUserPurchasesAndRentals
      security:
        - oauth2:
            - purchased
      description: >-
        This method returns every purchase and rental that the authenticated
        user has made across all On Demand pages.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The type of the On Demand video to filter on.

            Option descriptions:
             * `all` - Filter by all video types.
             * `expiring_soon` - Filter by videos that expire soon.
             * `film` - Filter by film.
             * `important` - Filter by pages that are about to expire.
             * `purchased` - Filter by purchased videos.
             * `rented` - Filter by rented videos.
             * `series` - Filter by series.
             * `subscription` - Filter by video subscription.
             * `unwatched` - Filter by unwatched videos.
             * `watched` - Filter by watched videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - all
              - expiring_soon
              - film
              - important
              - purchased
              - rented
              - series
              - subscription
              - unwatched
              - watched
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added video.
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `name` - Sort the results by video name.
             * `purchase_time` - Sort the results by time of video purchase.
             * `rating` - Sort the results by content rating.
             * `release_date` - Sort the results by video release date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - date
              - name
              - purchase_time
              - rating
              - release_date
      responses:
        '200':
          description: The purchases and rentals were returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: >-
                  #/components/schemas/OnDemandPurchasesAndRentalsGetAllUserPurchasesAndRentalsResponse
        '403':
          description: >-
            The authenticated user can't get purchases and rentals for another
            user's account.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/ondemand/purchases/{ondemand_id}:
    get:
      tags:
        - On Demand\Purchases and rentals
      summary: Check if a user has made a purchase or rental from an On Demand page
      operationId: OnDemandPurchasesAndRentals_checkUserPurchasesAndRentals
      security:
        - oauth2:
            - purchased
      description: >-
        This method determines whether the authenticated user has made a
        purchase or rental from the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The authenticated user has made this purchase.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/on-demand-page'
        '403':
          description: >-
            The authenticated user can't make purchases for another user's
            account.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such user or On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/payment_methods:
    get:
      tags:
        - Payments\Essentials
      summary: Get a list of all payments service payment methods
      operationId: PaymentsEssentials_listPaymentMethods
      description: >-
        This method returns a list of all Vimeo payments service payment methods
        that are available to the authenticated user.
      parameters:
        - description: The name of the card member.
          in: query
          name: cardmember_name
          required: false
          schema:
            type: string
            example: John Doe
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: Whether to return disabled payment methods.
          in: query
          name: show_disabled
          required: false
          schema:
            type: boolean
            example: false
        - description: The ID of the user.
          in: query
          name: user_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentsEssentialsListPaymentMethodsRequest'
      responses:
        '200':
          description: The list of payments service payment methods was returned.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/PaymentsEssentialsListPaymentMethodsResponse
        '400':
          description: 'Error code 5000: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The authenticated user can''t make this request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/payment_methods/{payment_method_id}:
    get:
      tags:
        - Payments\Essentials
      summary: Get information about a payments service payment method
      operationId: PaymentsEssentials_getPaymentMethodInfo
      security:
        - oauth2:
            - public
      description: >-
        This method returns information about the specified Vimeo payments
        service payment method.
      parameters:
        - description: The ID of the payment method.
          in: path
          name: payment_method_id
          required: true
          schema:
            type: string
            example: abc12345
      responses:
        '200':
          description: The payments service payment method information was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment-method'
        '404':
          description: 'Error code 5000: No such payment method exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/pictures:
    get:
      tags:
        - Users\Pictures
      summary: Get all the pictures that belong to the user
      operationId: UsersPictures_list
      description: >-
        This method returns every portrait image belonging to the authenticated
        user.
      parameters:
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The portrait images were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/UsersPicturesListResponse'
    post:
      tags:
        - Users\Pictures
      summary: Add a picture to the user's account
      operationId: UsersPictures_addPortraitImage
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a portrait image to the authenticated user's Vimeo
        account. Send the binary data of the image file to the location that you
        receive

        from the **link** field in the response. For step-by-step instructions,
        see

        [Working with Thumbnail
        Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
      responses:
        '200':
          description: The portrait image was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /me/pictures/{portraitset_id}:
    delete:
      tags:
        - Users\Pictures
      summary: Delete a picture from the user's account
      operationId: UsersPictures_removePortraitImage
      security:
        - oauth2:
            - delete
      description: >-
        This method removes the specified portrait image from the authenticated
        user's Vimeo account.
      parameters:
        - description: The ID of the picture.
          in: path
          name: portraitset_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '204':
          description: The portrait image was removed.
    get:
      tags:
        - Users\Pictures
      summary: Get a specific picture that belongs to the user
      operationId: UsersPictures_getSpecificPictureBelongingToUser
      description: >-
        This method returns a single portrait image belonging to the
        authenticated user.
      parameters:
        - description: The ID of the picture.
          in: path
          name: portraitset_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The portrait image was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
    patch:
      tags:
        - Users\Pictures
      summary: Edit a picture in the user's account
      operationId: UsersPictures_editPortraitImage
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified portrait image belonging to the
        authenticated user.
      parameters:
        - description: The ID of the picture.
          in: path
          name: portraitset_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/UsersPicturesEditPortraitImageRequest'
      responses:
        '200':
          description: The portrait image was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /me/portfolios:
    get:
      tags:
        - Portfolios\Essentials
      summary: Get all the portfolios that belong to the user
      operationId: PortfoliosEssentials_getAllUserPortfolios
      description: This method returns every portfolio belonging to the authenticated user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The portfolios were returned.
          content:
            application/vnd.vimeo.portfolio+json:
              schema:
                $ref: >-
                  #/components/schemas/PortfoliosEssentialsGetAllUserPortfoliosResponse
  /me/portfolios/{portfolio_id}:
    get:
      tags:
        - Portfolios\Essentials
      summary: Get a specific portfolio
      operationId: PortfoliosEssentials_getUserPortfolio
      description: >-
        This method returns a single portfolio belonging to the authenticated
        user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The portfolio was returned.
          content:
            application/vnd.vimeo.portfolio+json:
              schema:
                $ref: '#/components/schemas/portfolio'
  /me/portfolios/{portfolio_id}/videos:
    get:
      tags:
        - Portfolios\Videos
      summary: Get all the videos in a portfolio
      operationId: PortfoliosVideos_getAllPortfolioVideos
      description: >-
        This method returns every video from the specified portfolio belonging
        to the authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The page that contains the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `default` - Use the default sorting method.
             * `likes` - Sort the results by number of likes.
             * `manual` - Sort the results by their user-specified order.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - default
              - likes
              - manual
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/PortfoliosVideosGetAllPortfolioVideosResponse
  /me/portfolios/{portfolio_id}/videos/{video_id}:
    delete:
      tags:
        - Portfolios\Videos
      summary: Remove a video from a portfolio
      operationId: PortfoliosVideos_removeFromPortfolio
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a video from the specified portfolio belonging to
        the authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
        '404':
          description: No such portfolio or video exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Portfolios\Videos
      summary: Get a specific video in a portfolio
      operationId: PortfoliosVideos_getSpecificVideo
      description: >-
        This method returns a single video from the specified portfolio
        belonging to the authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
    put:
      tags:
        - Portfolios\Videos
      summary: Add a video to a portfolio
      operationId: PortfoliosVideos_putVideoToPortfolio
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a video to the specified portfolio belonging to the
        authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
        '404':
          description: No such portfolio or video exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/presets:
    get:
      tags:
        - Embed Presets\Essentials
      summary: Get all the embed presets that a user has created
      operationId: EmbedPresetsEssentials_getAllUserCreatedEmbedPresets
      description: >-
        This method returns every embed preset that belongs to the authenticated
        user.
      parameters:
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The embed presets were returned.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: >-
                  #/components/schemas/EmbedPresetsEssentialsGetAllUserCreatedEmbedPresetsResponse
    post:
      tags:
        - Embed Presets\Essentials
      summary: Create an embed preset
      operationId: EmbedPresetsEssentials_createPreset
      description: This method creates an embed preset.
      requestBody:
        required: false
        content:
          application/vnd.vimeo.preset+json:
            schema:
              $ref: '#/components/schemas/EmbedPresetsEssentialsCreatePresetRequest'
      responses:
        '200':
          description: The embed preset was created.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/preset'
  /me/presets/{preset_id}:
    get:
      tags:
        - Embed Presets\Essentials
      summary: Get a specific embed preset
      operationId: EmbedPresetsEssentials_getSpecificPreset
      description: >-
        This method returns a single embed preset. The authenticated user must
        be the owner of the preset.
      parameters:
        - description: The ID of the preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The embed preset was returned.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/preset'
    patch:
      tags:
        - Embed Presets\Essentials
      summary: Edit an embed preset
      operationId: EmbedPresetsEssentials_editPreset
      description: >-
        This method edits the specified embed preset. The authenticated user
        must be the owner of the preset.
      parameters:
        - description: The ID of the preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.preset+json:
            schema:
              $ref: '#/components/schemas/EmbedPresetsEssentialsEditPresetRequest'
      responses:
        '200':
          description: The embed preset was edited.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/preset'
        '400':
          description: The outro type is invalid.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: |-
            * No such embed preset exists.
            * The authenticated user can't edit the embed preset.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/presets/{preset_id}/videos:
    get:
      tags:
        - Embed Presets\Videos
      summary: Get all the videos that have a specific embed preset
      operationId: EmbedPresetsVideos_getSpecificPresetVideos
      description: >-
        This method returns every video to which the specified embed preset has
        been added. The authenticated user must be the owner of videos.
      parameters:
        - description: The ID of the embed preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/EmbedPresetsVideosGetSpecificPresetVideosResponse
  /me/projects:
    get:
      tags:
        - Folders\Essentials
      summary: Get all the folders that belong to the user
      operationId: FoldersEssentials_getAllUserFolders
      security:
        - oauth2:
            - private
      description: This method returns all the folders belonging to the authenticated user.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `date` - Sort the results by date.
             * `default` - Use the default sort order.
             * `modified_time` - Sort the results by last modification.
             * `name` - Sort the results by name.
             * `pinned_on` - Sort the results by pinned timestamp.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - date
              - default
              - modified_time
              - name
              - pinned_on
      responses:
        '200':
          description: The folders were returned.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/FoldersEssentialsGetAllUserFoldersResponse
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Folders\Essentials
      summary: Create a folder
      operationId: FoldersEssentials_createFolder
      security:
        - oauth2:
            - create
      description: >-
        This method creates a new folder for the authenticated user. By default,
        this method creates a top-level folder. To create a subfolder — that is,
        to place the new folder inside an existing folder — specify the parent
        folder by URI with the **parent_folder_uri** parameter in the body of
        the request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoldersEssentialsCreateFolderRequest'
      responses:
        '201':
          description: The folder was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          description: |-
            * Error code 2204: The input is invalid.
            * Error code 2205: The input is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3200: The authenticated user can't create folders.
            * Error code 3701: The maximum folder depth has been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/projects/{project_id}:
    delete:
      tags:
        - Folders\Essentials
      summary: Delete a folder
      operationId: FoldersEssentials_deleteFolder
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified folder and optionally also the videos
        that it contains. The authenticated user must be the owner of the
        folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: >-
            Whether to delete all the videos in the folder along with the folder
            itself.
          in: query
          name: should_delete_clips
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '204':
          description: The folder was deleted.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3200: The authenticated user can''t delete the folder.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Folders\Essentials
      summary: Get a specific folder
      operationId: FoldersEssentials_getSpecificFolder
      description: This method returns a single folder belonging to the authenticated user.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The folder was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Folders\Essentials
      summary: Edit a folder
      operationId: FoldersEssentials_editFolder
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified folder. The authenticated user must be
        the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoldersEssentialsEditFolderRequest'
      responses:
        '200':
          description: The folder was edited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          description: |-
            * Error code 2204: The input is invalid.
            * Error code 2205: The input is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't edit the folder.

            * Error code 3449: The authenticated user can't edit folder
            settings.

            * Error code 3702: Folder settings aren't enabled for this team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/projects/{project_id}/items:
    delete:
      tags:
        - Folders\Items
      summary: Remove items from a folder
      operationId: FoldersItems_removeFromFolder
      security:
        - oauth2:
            - interact
      description: This method removes all items from the specified folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: Whether to delete the items when removing them from the folder.
          in: query
          name: should_delete_items
          required: false
          schema:
            type: boolean
            example: false
        - description: A comma-separated list of video or event URIs to remove.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/live_events/273576296
      responses:
        '204':
          description: The items were removed.
        '400':
          description: >-
            * Error code 2204: The input is invalid.

            * Error code 3200: The authenticated user can't remove items from
            the folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Folders\Items
      summary: Get all the items in a folder
      operationId: FoldersItems_getFolderItems
      description: This method returns every item that belongs to the specified folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `folder` - Filter the results by folder.
             * `live_event` - Filter the results by event.
             * `video` - Filter the results by video.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - folder
              - live_event
              - video
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `default` - Use the default sort order.
             * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.
             * `last_user_action_event_date` - Sort the results by the date of the last user action.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - duration
              - last_user_action_event_date
      responses:
        '200':
          description: OK
  /me/projects/{project_id}/videos:
    delete:
      tags:
        - Folders\Videos
      summary: Remove a list of videos from a folder
      operationId: FoldersVideos_removeMultipleFromFolder
      security:
        - oauth2:
            - interact
      description: >-
        This method removes multiple videos from the specified folder. The
        authenticated user must be the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: Whether to delete the videos when removing them from the folder.
          in: query
          name: should_delete_clips
          required: false
          schema:
            type: boolean
            example: false
        - description: A comma-separated list of the video URIs to remove.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/videos/273576296
      responses:
        '204':
          description: The videos were removed.
        '400':
          description: 'Error code 2204: The input is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Folders\Videos
      summary: Get all the videos in a folder
      operationId: FoldersVideos_getVideosInFolder
      description: This method returns all the videos that belong to the specified folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include at least one of these tags. The use of this parameter
            triggers a search.
          in: query
          name: filter_tag
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include all of these tags. The use of this parameter triggers a
            search.
          in: query
          name: filter_tag_all_of
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to exclude. The use of this parameter
            triggers a search.
          in: query
          name: filter_tag_exclude
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: Whether to include subfolders.
          in: query
          name: include_subfolders
          required: false
          schema:
            type: boolean
            example: false
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: >-
            A comma-separated list of fields to query over. The default value is
            `title,description,chapters,tags`.
          in: query
          name: query_fields
          required: false
          schema:
            type: string
            example: title,description
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `default` - Use the default sort order.
             * `duration` - Sort the results by duration.
             * `last_user_action_event_date` - Sort the results by the date of the last user action.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - duration
              - last_user_action_event_date
      responses:
        '200':
          description: The videos were returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersVideosGetVideosInFolderResponse'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Folders\Videos
      summary: Add a list of videos to a folder
      operationId: FoldersVideos_addMultipleToFolder
      security:
        - oauth2:
            - interact
      description: >-
        This method adds multiple videos to the specified folder. The
        authenticated user must be the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: A comma-separated list of video URIs to add.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/videos/273576296
      responses:
        '204':
          description: The videos were added.
        '400':
          description: 'Error code 2204: The input is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/projects/{project_id}/videos/{video_id}:
    delete:
      tags:
        - Folders\Videos
      summary: Remove a video from a folder
      operationId: FoldersVideos_removeSingleVideo
      security:
        - oauth2:
            - delete
      description: >-
        This method removes a single video from the specified folder. Please
        note that this doesn't delete the video itself.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
        '400':
          description: 'Error code 2204: The input is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such video exists in the folder.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Folders\Videos
      summary: Add a video to a folder
      operationId: FoldersVideos_addToFolder
      security:
        - oauth2:
            - interact
      description: >-
        This method adds a single video to the specified folder. The
        authenticated user must be the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
        '404':
          description: 'Error code 5000: No such user, folder, or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/videos:
    delete:
      tags:
        - Videos\Essentials
      summary: Delete a user's videos
      operationId: VideosEssentials_deleteUserVideos
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes one or more videos belonging to the specified user.
        The authenticated user must have permission to delete the videos.


        Specify the videos to delete in a comma-separated list by URI using the
        **uris** query parameter.
      parameters:
        - description: A comma-separated list of the video URIs to delete.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/videos/258684546
      responses:
        '204':
          description: The videos were deleted.
        '400':
          description: >-
            * Error code 2204: The input is invalid.

            * Error code 3200: The authenticated user can't delete one or more
            of the videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Videos\Essentials
      summary: Get all the videos that the user has uploaded
      operationId: VideosEssentials_getAllUserVideos
      description: >-
        This method returns all the videos that the authenticated user has
        uploaded.
      parameters:
        - description: >-
            The page that contains the video URI. The field is available only
            when not paired with **query**.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `app_only` - Return app-only videos.
             * `embeddable` - Return embeddable videos.
             * `featured` - Return featured videos.
             * `live` - Return only live videos.
             * `no_placeholder` - Return no placeholder videos.
             * `nolive` - Return no live videos.
             * `playable` - Return playable videos.
             * `screen_recorded` - Return screen-recorded videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - app_only
              - embeddable
              - featured
              - live
              - no_placeholder
              - nolive
              - playable
              - screen_recorded
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            Whether to filter the results by playable videos (`true`) or
            non-playable videos (`false`).
          in: query
          name: filter_playable
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            Whether to filter the results by screen-recorded videos (`true`) or
            non-screen-recorded videos (`false`).
          in: query
          name: filter_screen_recorded
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include at least one of these tags.
          in: query
          name: filter_tag
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include all of these tags.
          in: query
          name: filter_tag_all_of
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to exclude. All results must exclude
            all of these tags.
          in: query
          name: filter_tag_exclude
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            Whether to include content from the user's teams when searching.
            _This field is deprecated._
          in: query
          name: include_team_content
          required: false
          schema:
            type: string
            example: 'true'
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: >
            A comma-separated list of fields to query over. The default value is
            `title,description,chapters,tags`.


            Option descriptions:
             * `chapters` - Query by chapter titles that have been added to the video.
             * `description` - Query by the description of the video.
             * `tags` - Query by tag names that have been added to the video.
             * `title` - Query by the title of the video.
          in: query
          name: query_fields
          required: false
          schema:
            type: array
            example: title,description
            enum:
              - chapters
              - description
              - tags
              - title
            items:
              type: string
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically by title.
             * `date` - Sort the results by date.
             * `default` - Use the default sorting method.
             * `duration` - Sort the results by duration.
             * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn't had an interaction, the upload date is used instead.
             * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.
             * `modified_time` - Sort the results by last modification.
             * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - duration
              - last_user_action_event_date
              - likes
              - modified_time
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/VideosEssentialsGetAllUserVideosResponse'
        '304':
          description: >-
            The authenticated user hasn't uploaded any videos since the given
            **If-Modified-Since** header.
    post:
      tags:
        - Videos\Uploads
      summary: Upload a video
      operationId: VideosUploads_beginVideoUploadProcess
      security:
        - oauth2:
            - upload
      description: >-
        This method begins the video upload process for the authenticated user.
        For more information, see our [upload
        documentation](https://developer.vimeo.com/api/upload/videos).
      requestBody:
        required: true
        content:
          application/vnd.vimeo.video+json:
            schema:
              $ref: '#/components/schemas/VideosUploadsBeginVideoUploadProcessRequest'
      responses:
        '201':
          description: The upload procedure has begun.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            * Error code 2204: The request contains invalid body parameters.

            * Error code 2205: The body of the request isn't formatted properly.

            * Error code 2230: The upload type is invalid.

            * Error code 3116: The **type** payload parameter was supplied
            instead of **upload.approach**. Use **upload.approach** starting
            from API version 3.4.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8002: No user is associated with the access token.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 4101: The authenticated user's maximum disk space has
            been reached.

            * Error code 4102: The authenticated user's allotted weekly quota
            has been reached.

            * Error code 4104: The authenticated user's allotted daily quota has
            been reached.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4003: There is a problem initiating the upload.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/videos/{video_id}:
    get:
      tags:
        - Videos\Essentials
      summary: Check if the user owns a video
      operationId: VideosEssentials_checkUserOwnsVideo
      description: >-
        This method determines whether the authenticated user is the owner of
        the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The authenticated user owns the video.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: The authenticated user doesn't own the video.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/videos/{video_id}/destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all the destinations of a one-time live event
      operationId: LiveEventDestinations_getAllDestinations
      security:
        - oauth2:
            - public
      description: >-
        This method returns every destination of the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The event destinations were returned.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventDestinationsGetAllDestinationsResponse
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destinations.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event destinations
      summary: Create a one-time live event destination
      operationId: LiveEventDestinations_createOneTimeLiveEventDestination
      security:
        - oauth2:
            - public
      description: >-
        This method creates a destination for the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.simulcast.destination+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest
      responses:
        '200':
          description: OK
        '400':
          description: >-
            * Error code 2204: Parameters are missing, or the body data is
            invalid.

            * Error code 13003: You can create only one LinkedIn destination per
            event.

            * Error code 13004: You can create only one YouTube destination per
            event.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destinations.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/videos/{video_id}/m3u8_playback:
    get:
      tags:
        - Videos\Live M3U8 playback
      summary: Get an M3U8 playback URL for a one-time live event
      operationId: VideosLiveM3U8Playback_getPlaybackUrl
      security:
        - oauth2:
            - private
      description: >-
        This method returns an M3U8 playback URL for the specified event stream.
        You should use this endpoint only in conjunction with our recommended
        procedure for playing events via HLS. For more information, see our [HLS
        guide](https://developer.vimeo.com/api/live/playback).
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The M3U8 playback URL was returned.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the M3U8
            playback URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /me/watched/videos:
    delete:
      tags:
        - Users\Watch history
      summary: Delete the user's watch history
      operationId: UsersWatchHistory_deleteEntireWatchHistory
      security:
        - oauth2:
            - delete
      description: This method deletes the entire watch history of the authenticated user.
      responses:
        '204':
          description: The authenticated user's watch history was deleted.
    get:
      tags:
        - Users\Watch history
      summary: Get all the videos that a user has watched
      operationId: UsersWatchHistory_getWatchedVideos
      security:
        - oauth2:
            - private
      description: >-
        This method returns every video on the authenticated user's watch
        history. _This endpoint is deprecated. Any request to it returns empty
        data with HTTP status code 200._
      parameters:
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/UsersWatchHistoryGetWatchedVideosResponse'
        '403':
          description: The authenticated user can't view another user's watch history.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /me/watched/videos/{video_id}:
    delete:
      tags:
        - Users\Watch history
      summary: Delete a specific video from the user's watch history
      operationId: UsersWatchHistory_deleteSpecificVideo
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified video from the authenticated user's
        watch history.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was deleted from the authenticated user's watch history.
  /me/watchlater:
    get:
      tags:
        - Watch Later Queue\Essentials
      summary: Get all the videos in the user's Watch Later queue
      operationId: WatchLaterQueueEssentials_getVideosInQueue
      security:
        - oauth2:
            - private
      description: >-
        This method returns every video from the authenticated user's Watch
        Later queue.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date added.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/WatchLaterQueueEssentialsGetVideosInQueueResponse
        '304':
          description: >-
            The user hasn't added any videos to their Watch Later queue since
            the given `If-Modified-Since` header.
  /me/watchlater/{video_id}:
    delete:
      tags:
        - Watch Later Queue\Essentials
      summary: Remove a video from the user's Watch Later queue
      operationId: WatchLaterQueueEssentials_removeVideoFromQueue
      security:
        - oauth2:
            - interact
      description: >-
        This method removes the specified video from the authenticated user's
        Watch Later queue.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
    get:
      tags:
        - Watch Later Queue\Essentials
      summary: Check if the user has added a video to their Watch Later queue
      operationId: WatchLaterQueueEssentials_checkVideoInQueue
      security:
        - oauth2:
            - private
      description: >-
        This method checks the authenticated user's Watch Later queue for the
        specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video is in the user's Watch Later queue.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: The video isn't in the user's Watch Later queue.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Watch Later Queue\Essentials
      summary: Add a video to the user's Watch Later queue
      operationId: WatchLaterQueueEssentials_addVideoToQueue
      security:
        - oauth2:
            - interact
      description: >-
        This method adds the specified video to the authenticated user's Watch
        Later queue.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
  /me/webinars:
    post:
      tags:
        - Webinar\Essentials
      summary: Create a webinar
      operationId: WebinarEssentials_createWebinar
      security:
        - oauth2:
            - create
      description: This method creates a new webinar for the authenticated user.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.webinars+json:
            schema:
              $ref: '#/components/schemas/WebinarEssentialsCreateWebinarRequest'
      responses:
        '200':
          description: The webinar was created.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3441: The authenticated user can''t create a webinar.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: >-
            Error code 9006: The authenticated user is rate-limited from
            creating the webinar.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
  /me/webinars/{webinar_id}:
    get:
      tags:
        - Webinar\Essentials
      summary: Get a specific webinar
      operationId: WebinarEssentials_getSpecificWebinar
      description: >-
        This method returns a single webinar belonging to the authenticated
        user.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '200':
          description: The webinar was returned.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    patch:
      tags:
        - Webinar\Essentials
      summary: Update a webinar
      operationId: WebinarEssentials_updateWebinarBelongingToAuthenticatedUser
      security:
        - oauth2:
            - edit
      description: This method updates a webinar belonging to the authenticated user.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/vnd.vimeo.webinars+json:
            schema:
              $ref: >-
                #/components/schemas/WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest
      responses:
        '200':
          description: The webinar was updated.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '400':
          description: |-
            * Error code 2204: A parameter is invalid.
            * Error code 3153: The status provided is invalid.
            * Error code 3154: The webinar hasn't started and can't be ended.
            * Error code 3155: The parameter update isn't allowed.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3441: The authenticated user can't live stream
            webinars.

            * Error code 3442: The authenticated user can't update the webinar.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /me/webinars/{webinar_id}/email_settings:
    get:
      tags:
        - Webinar\Emails
      summary: Get customization email data for a webinar
      operationId: WebinarEmails_getCustomizationData
      description: >-
        This method returns customized email data for the specified webinar. The
        authenticated user must have administrative access to the webinar.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '200':
          description: The webinar email data was returned.
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/webinar-email-settings'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    patch:
      tags:
        - Webinar\Emails
      summary: Customize the email preferences of a webinar
      operationId: WebinarEmails_customizePreferences
      security:
        - oauth2:
            - edit
      description: >-
        This method causes the authenticated user to customize the email
        preferences of the specified webinar. The user must have administrative
        access to the webinar.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/vnd.vimeo.webinar.email.settings+json:
            schema:
              $ref: '#/components/schemas/WebinarEmailsCustomizePreferencesRequest'
      responses:
        '200':
          description: The email preferences were customized for the webinar.
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/webinar-email-settings'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /me/webinars/{webinar_id}/registrants:
    get:
      tags:
        - Webinar\Registrations
      summary: Get user registration data associated with a webinar
      operationId: WebinarRegistrations_getUserRegistrationsByWebinarId
      security:
        - oauth2:
            - stats
            - private
      description: >-
        This method returns the list of user registrations that is associated
        with the specified webinar and was originally submitted through a
        webinar form.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `registration_date` - Sort the results by registration date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - registration_date
      responses:
        '200':
          description: The user registration data was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webinar-registrant'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3441: The authenticated user can''t perform this action.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    put:
      tags:
        - Webinar\Registrations
      summary: Capture the user registration list associated with a webinar
      operationId: WebinarRegistrations_captureUserRegistrationList
      description: >-
        This method captures the user registration list associated with the
        specified webinar. A maximum of 50 registrants are permitted as part of
        the request.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/WebinarRegistrationsCaptureUserRegistrationListRequest
      responses:
        '200':
          description: The webinar data was captured.
        '400':
          description: >-
            * Error code 2204: A parameter is invalid.

            * Error code 3152: The registered email is blocked from viewing this
            webinar.

            * Error code 3166: Too many registrants were provided. The maximum
            number is 50.

            * Error code 3167: The user has exceeded the quota of registrants
            allowed for the webinar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /me/webinars/{webinar_id}/registrants/{registrant_id}:
    delete:
      tags:
        - Webinar\Registrations
      summary: Delete a registrant record associated with a webinar
      operationId: WebinarRegistrations_deleteRegistrantRecord
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified registrant associated with a webinar
        and originally submitted through a webinar form.
      parameters:
        - description: The ID of the webinar registrant.
          in: path
          name: registrant_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '204':
          description: The webinar registrant was deleted.
        '400':
          description: |-
            * Error code 3160: The webinar has started or ended.
            * Error code 3161: A CSV upload is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete a registrant
            from this webinar.

            * Error code 3442: The authenticated user can't update the webinar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar or registrant exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: >-
            Error code 9006: The authenticated user is rate-limited from
            deleting the registrant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    patch:
      tags:
        - Webinar\Registrations
      summary: Update user registration data associated with a webinar
      operationId: WebinarRegistrations_updateUserRegistrationData
      security:
        - oauth2:
            - edit
      description: >-
        This method updates the specified user registration data associated with
        a webinar and originally submitted through a webinar form.
      parameters:
        - description: The ID of the webinar registrant.
          in: path
          name: registrant_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/WebinarRegistrationsUpdateUserRegistrationDataRequest
      responses:
        '200':
          description: The webinar registrant data was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webinar-registrant'
        '400':
          description: |-
            * Error code 2204: A parameter is invalid.
            * Error code 3151: The webinar has ended.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3441: The authenticated user can''t update the webinar.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar or registrant exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /oauth/access_token:
    post:
      tags:
        - Authentication Extras\Exchange
      summary: Exchange an authorization code for an access token
      operationId: AuthenticationExtrasExchange_oAuthCodeExchange
      description: >-
        This method exchanges an OAuth authorization code for an OAuth access
        token.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.auth+json:
            schema:
              $ref: >-
                #/components/schemas/AuthenticationExtrasExchangeOAuthCodeExchangeRequest
      responses:
        '200':
          description: The authorization code was exchanged.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/auth'
        '400':
          description: >-
            * The grant type is invalid.

            * The authorization code is invalid.

            * The redirect URI doesn't match the URI to create the authorization
            code.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/auth-error'
  /oauth/authorize/client:
    post:
      tags:
        - Authentication Extras\Authenticate
      summary: Authorize a client with OAuth
      operationId: client_auth
      description: >-
        This method uses the OAuth protocol to authorize a client. For details
        on OAuth client authorization, see our [Working with
        Authentication](/api/authentication) guide or the [OAuth
        spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4).
      requestBody:
        required: true
        content:
          application/vnd.vimeo.auth+json:
            schema:
              $ref: '#/components/schemas/ClientAuthRequest'
      responses:
        '200':
          description: The authorization was successful.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/auth'
        '401':
          description: 'Error code 8001: No such client secret exists.'
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/error'
  /oauth/authorize/vimeo_oauth1:
    post:
      tags:
        - Authentication Extras\Convert
      summary: Convert an OAuth 1 access token to an OAuth 2 access token
      operationId: AuthenticationExtrasConvert_oAuth1ToOAuth2
      description: >-
        This method exchanges a legacy Advanced API OAuth 1 token for an API v3
        OAuth 2 token.
      requestBody:
        required: true
        content:
          application/vnd.vimeo.auth+json:
            schema:
              $ref: >-
                #/components/schemas/AuthenticationExtrasConvertOAuth1ToOAuth2Request
      responses:
        '200':
          description: The token was converted.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/auth'
        '400':
          description: |-
            * The token is invalid.
            * The token has unauthorized scopes.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/auth-error'
  /oauth/verify:
    get:
      tags:
        - Authentication Extras\Essentials
      summary: Verify an OAuth 2 access token
      operationId: verify_token
      description: This method verifies that an OAuth 2 access token exists.
      responses:
        '200':
          description: The token was verified.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/auth'
        '401':
          description: The token isn't a valid OAuth 2 token.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/genres:
    get:
      tags:
        - On Demand\Genres
      summary: Get all On Demand genres
      operationId: OnDemandGenres_getAllGenres
      description: This method returns every existing On Demand genre.
      responses:
        '200':
          description: The genres were returned.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/OnDemandGenresGetAllGenresResponse'
  /ondemand/genres/{genre_id}:
    get:
      tags:
        - On Demand\Genres
      summary: Get a specific On Demand genre
      operationId: OnDemandGenres_specificGenreGet
      description: This method returns a single On Demand genre.
      parameters:
        - description: The ID of the genre.
          in: path
          name: genre_id
          required: true
          schema:
            type: string
            example: animation
      responses:
        '200':
          description: The genre was returned.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/on-demand-genre'
        '404':
          description: No such genre exists.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/genres/{genre_id}/pages:
    get:
      tags:
        - On Demand\Genres
      summary: Get all the On Demand pages in a genre
      operationId: OnDemandGenres_getAllPagesInGenre
      description: >-
        This method returns every On Demand page that belongs to the specified
        genre.
      parameters:
        - description: The ID of the genre.
          in: path
          name: genre_id
          required: true
          schema:
            type: string
            example: animation
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `country` - Sort the results by country.
             * `my_region` - Sort the results by user's region.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - country
              - my_region
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `name` - Sort the results by name.
             * `publish.time` - Sort the results by time of publishing.
             * `videos` - Sort the results by video.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - name
              - publish.time
              - videos
      responses:
        '200':
          description: The On Demand pages in the genre were returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/OnDemandGenresGetAllPagesInGenreResponse'
  /ondemand/genres/{genre_id}/pages/{ondemand_id}:
    get:
      tags:
        - On Demand\Genres
      summary: Get a specific On Demand page in a genre
      operationId: OnDemandGenres_getSpecificPageInGenre
      description: >-
        This method returns a single On Demand page that belongs to the
        specified genre.
      parameters:
        - description: The ID of the genre.
          in: path
          name: genre_id
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The On Demand page in the genre was returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/on-demand-page'
        '404':
          description: No such On Demand page or genre exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}:
    delete:
      tags:
        - On Demand\Essentials
      summary: Delete an On Demand page
      operationId: OnDemandEssentials_deleteOnDemandPage
      security:
        - oauth2:
            - delete
      description: This method deletes the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '204':
          description: The On Demand page was deleted.
        '403':
          description: The authenticated user can't delete this On Demand page.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Essentials
      summary: Get a specific On Demand page
      operationId: get_vod
      description: This method returns the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The On Demand page was returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/on-demand-page'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - On Demand\Essentials
      summary: Edit an On Demand page
      operationId: edit_vod
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified On Demand page. Use this method to
        enable preorders on the page or to publish the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      requestBody:
        required: false
        content:
          application/vnd.vimeo.ondemand.page+json:
            schema:
              $ref: '#/components/schemas/EditVodRequest'
      responses:
        '200':
          description: The On Demand page was edited.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/on-demand-page'
        '403':
          description: The authenticated user can't edit the On Demand page.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/backgrounds:
    get:
      tags:
        - On Demand\Backgrounds
      summary: Get all the backgrounds on an On Demand page
      operationId: OnDemandBackgrounds_getAllBackgroundsOnPage
      description: >-
        This method returns every background image on the specified On Demand
        page. The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The background images were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/OnDemandBackgroundsGetAllBackgroundsOnPageResponse
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - On Demand\Backgrounds
      summary: Add a background to an On Demand page
      operationId: OnDemandBackgrounds_addBackgroundToPage
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a background image to the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The background image was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            The authenticated user can't add a background image to this On
            Demand page.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/backgrounds/{background_id}:
    delete:
      tags:
        - On Demand\Backgrounds
      summary: Delete a background on an On Demand page
      operationId: OnDemandBackgrounds_deleteBackgroundFromPage
      security:
        - oauth2:
            - edit
      description: >-
        This method deletes the specified background image on an On Demand page.
        The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the background image.
          in: path
          name: background_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '204':
          description: The background image was deleted.
        '403':
          description: The authenticated user can't delete this background image.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or background image exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Backgrounds
      summary: Get a specific background on an On Demand page
      operationId: OnDemandBackgrounds_getSpecificBackground
      description: >-
        This method returns a single background image on the specified On Demand
        page. The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the background image.
          in: path
          name: background_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The background image was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't get this background image.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or background image exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - On Demand\Backgrounds
      summary: Edit a background on an On Demand page
      operationId: OnDemandBackgrounds_editBackgroundOnPage
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified background image on an On Demand page.
        The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the background image.
          in: path
          name: background_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/OnDemandBackgroundsEditBackgroundOnPageRequest
      responses:
        '200':
          description: The background image was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't edit this background image.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or background image exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/genres:
    get:
      tags:
        - On Demand\Genres
      summary: Get all the genres of an On Demand page
      operationId: OnDemandGenres_getGenres
      description: >-
        This method returns every genre associated with the specified On Demand
        page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The genres were returned.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/OnDemandGenresGetGenresResponse'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/genres/{genre_id}:
    delete:
      tags:
        - On Demand\Genres
      summary: Remove a genre from an On Demand page
      operationId: OnDemandGenres_removeGenreFromPage
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a genre association from the specified On Demand
        page. The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the genre.
          in: path
          name: genre_id
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '204':
          description: The genre was removed.
        '400':
          description: The On Demand page must belong to at least one genre.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: >-
            The authenticated user can't remove a genre from this On Demand
            page.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or genre exists.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Genres
      summary: Check whether an On Demand page belongs to a specific genre
      operationId: OnDemandGenres_checkGenreAssociation
      description: >-
        This method determines whether an On Demand page is associated with the
        specified genre.
      parameters:
        - description: The ID of the genre.
          in: path
          name: genre_id
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The On Demand page is in this genre.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/on-demand-genre'
        '404':
          description: No such On Demand page or genre exists.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - On Demand\Genres
      summary: Add a genre to an On Demand page
      operationId: OnDemandGenres_addGenreToPage
      security:
        - oauth2:
            - edit
      description: >-
        This method adds the specified genre designation to an On Demand page. A
        page can be associated with a maximum of two genres. The authenticated
        user must be the owner of the page.
      parameters:
        - description: The ID of the genre.
          in: path
          name: genre_id
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '201':
          description: The genre was added.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/on-demand-genre'
        '400':
          description: The On Demand page already has two genres.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't add a genre to this On Demand page.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or genre exists.
          content:
            application/vnd.vimeo.ondemand.genre+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/likes:
    get:
      tags:
        - Likes\Essentials
      summary: Get all the users who have liked a video on an On Demand page
      operationId: LikesEssentials_getAllUserLikes
      description: >-
        This method returns every user who has liked the specified video on an
        On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `extra` - Consider extra content only.
             * `main` - Consider main content only.
             * `trailer` - Consider trailer content only.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - extra
              - main
              - trailer
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by join date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/LikesEssentialsGetAllUserLikesResponse'
  /ondemand/pages/{ondemand_id}/pictures:
    get:
      tags:
        - On Demand\Posters
      summary: Get all the posters on an On Demand page
      operationId: OnDemandPosters_getOnDemandPagePosters
      description: This method returns every poster on the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The posters were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/OnDemandPostersGetOnDemandPagePostersResponse
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - On Demand\Posters
      summary: Add a poster to an On Demand page
      operationId: OnDemandPosters_addPosterToPage
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a poster image to the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '201':
          description: The poster was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't add posters to this On Demand page.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/pictures/{poster_id}:
    get:
      tags:
        - On Demand\Posters
      summary: Get a specific poster on an On Demand page
      operationId: OnDemandPosters_getSpecificPoster
      description: This method returns a single poster on the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the poster.
          in: path
          name: poster_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The poster was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
    patch:
      tags:
        - On Demand\Posters
      summary: Edit a poster on an On Demand page
      operationId: OnDemandPosters_updatePoster
      security:
        - oauth2:
            - edit
      description: >-
        This method edits a poster image on the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the poster.
          in: path
          name: poster_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/OnDemandPostersUpdatePosterRequest'
      responses:
        '200':
          description: The poster was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /ondemand/pages/{ondemand_id}/promotions:
    get:
      tags:
        - On Demand\Promotions
      summary: Get all the promotions on an On Demand page
      operationId: OnDemandPromotions_getAllPagePromotions
      security:
        - oauth2:
            - promo_codes
      description: >-
        This method returns every promotion on the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: |
            The type of filter to apply to the results.

            Option descriptions:
             * `batch` - Filter the results by the `batch` promotion.
             * `default` - Filter the results by the default promotion.
             * `single` - Filter the results by the `single` promotion.
             * `vip` - Filter the results by the `vip` promotion.
          in: query
          name: filter
          required: true
          schema:
            type: string
            enum:
              - batch
              - default
              - single
              - vip
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The promotions were returned.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/on-demand-promotion'
        '400':
          description: The filter is invalid.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't get promotions on this On Demand page.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - On Demand\Promotions
      summary: Add a promotion to an On Demand page
      operationId: OnDemandPromotions_addPromotionToPage
      security:
        - oauth2:
            - promo_codes
            - create
      description: >-
        This method adds a promotion to the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      requestBody:
        required: true
        content:
          application/vnd.vimeo.ondemand.promotion+json:
            schema:
              $ref: '#/components/schemas/OnDemandPromotionsAddPromotionToPageRequest'
      responses:
        '200':
          description: The promotion was added.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/on-demand-promotion'
        '400':
          description: >-
            There are errors in the request, or the promotion code already
            exists.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't add promotions to this On Demand page.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/promotions/{promotion_id}:
    delete:
      tags:
        - On Demand\Promotions
      summary: Delete a promotion on an On Demand page
      operationId: OnDemandPromotions_deletePromotionOnPage
      security:
        - oauth2:
            - promo_codes
            - delete
      description: >-
        This method deletes a promotion on the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the promotion.
          in: path
          name: promotion_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '204':
          description: The promotion was deleted.
        '403':
          description: >-
            The authenticated user can't delete promotions on this On Demand
            page.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or promotion exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Promotions
      summary: Get a specific promotion on an On Demand page
      operationId: OnDemandPromotions_specificPromotionGet
      security:
        - oauth2:
            - promo_codes
      description: >-
        This method returns a single promotion on the specified On Demand page.
        The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the promotion.
          in: path
          name: promotion_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The promotion was returned.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/on-demand-promotion'
        '403':
          description: The authenticated user can't get promotions on this On Demand page.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or promotion exists.
          content:
            application/vnd.vimeo.ondemand.promotion+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes:
    get:
      tags:
        - On Demand\Promotions
      summary: Get all the codes of a promotion on an On Demand page
      operationId: OnDemandPromotions_getAllPromotionCodes
      security:
        - oauth2:
            - promo_codes
      description: >-
        This method returns every code of the specified promotion on an On
        Demand page. The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the promotion.
          in: path
          name: promotion_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The codes were returned.
          content:
            application/vnd.vimeo.ondemand.promocode+json:
              schema:
                $ref: '#/components/schemas/on-demand-promotion-code'
        '403':
          description: The authenticated user can't get promotions on this On Demand page.
          content:
            application/vnd.vimeo.ondemand.promocode+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or promotion exists.
          content:
            application/vnd.vimeo.ondemand.promocode+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/regions:
    delete:
      tags:
        - On Demand\Regions
      summary: Remove a list of regions from an On Demand page
      operationId: OnDemandRegions_removeMultiple
      security:
        - oauth2:
            - edit
      description: >-
        This method removes multiple regions from the specified On Demand page.
        The authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      requestBody:
        required: false
        content:
          application/vnd.vimeo.ondemand.region+json:
            schema:
              $ref: '#/components/schemas/OnDemandRegionsRemoveMultipleRequest'
      responses:
        '200':
          description: The regions were removed.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/OnDemandRegionsRemoveMultipleResponse'
        '403':
          description: >-
            The authenticated user can't remove regions from this On Demand
            page.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or region exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Regions
      summary: Get all the regions on an On Demand page
      operationId: OnDemandRegions_getAll
      description: >-
        This method returns every region on the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The regions were returned.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/OnDemandRegionsGetAllResponse'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - On Demand\Regions
      summary: Add a list of regions to an On Demand page
      operationId: OnDemandRegions_addMultiple
      security:
        - oauth2:
            - edit
      description: >-
        This method adds multiple regions to the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      requestBody:
        required: true
        content:
          application/vnd.vimeo.ondemand.region+json:
            schema:
              $ref: '#/components/schemas/OnDemandRegionsAddMultipleRequest'
      responses:
        '200':
          description: The list of regions was added.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/on-demand-region'
        '403':
          description: The authenticated user can't add regions to this On Demand page.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or region exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/regions/{country}:
    delete:
      tags:
        - On Demand\Regions
      summary: Remove a specific region from an On Demand page
      operationId: OnDemandRegions_removeSpecificRegion
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a single region from the specified On Demand page.
        The authenticated user must be the owner of the page.
      parameters:
        - description: The country code of the region to remove.
          in: path
          name: country
          required: true
          schema:
            type: string
            example: US
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '204':
          description: The region was removed.
        '403':
          description: >-
            The authenticated user can't remove regions from this On Demand
            page.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or region exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Regions
      summary: Get a specific region on an On Demand page
      operationId: OnDemandRegions_getSpecificRegion
      description: >-
        This method returns a single region on the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The country code of the region to return.
          in: path
          name: country
          required: true
          schema:
            type: string
            example: US
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '200':
          description: The region was returned.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/on-demand-region'
        '404':
          description: No such On Demand page or region exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - On Demand\Regions
      summary: Add a specific region to an On Demand page
      operationId: OnDemandRegions_addRegionToPage
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single region to the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The country code of the region to add.
          in: path
          name: country
          required: true
          schema:
            type: string
            example: US
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
      responses:
        '201':
          description: The region was added.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/on-demand-region'
        '403':
          description: The authenticated user can't add regions to this On Demand page.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such On Demand page or region exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/seasons:
    get:
      tags:
        - On Demand\Seasons
      summary: Get all the seasons on an On Demand page
      operationId: OnDemandSeasons_listAll
      description: This method returns every season on the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `viewable` - Filter by viewable seasons.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - viewable
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `date` - Sort the results by date.
             * `manual` - Sort the results manually.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - date
              - manual
      responses:
        '200':
          description: The seasons were returned.
          content:
            application/vnd.vimeo.ondemand.season+json:
              schema:
                $ref: '#/components/schemas/OnDemandSeasonsListAllResponse'
        '404':
          description: No such On Demand page exists.
          content:
            application/vnd.vimeo.ondemand.season+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/seasons/{season_id}:
    get:
      tags:
        - On Demand\Seasons
      summary: Get a specific season on an On Demand page
      operationId: OnDemandSeasons_specificGet
      description: This method returns a single season on the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the season.
          in: path
          name: season_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The season was returned.
          content:
            application/vnd.vimeo.ondemand.season+json:
              schema:
                $ref: '#/components/schemas/on-demand-season'
        '404':
          description: No such On Demand page or season exists.
          content:
            application/vnd.vimeo.ondemand.season+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/pages/{ondemand_id}/seasons/{season_id}/videos:
    get:
      tags:
        - On Demand\Seasons
      summary: Get all the videos in a season on an On Demand page
      operationId: OnDemandSeasons_getAllVideosInSeason
      description: >-
        This method returns every video in the specified season on an On Demand
        page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the season.
          in: path
          name: season_id
          required: true
          schema:
            type: number
            example: 12345
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `viewable` - Filter by viewable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - viewable
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `date` - Sort the results by date.
             * `default` - Use the default sorting method.
             * `manual` - Sort the results manually.
             * `name` - Sort the results by name.
             * `purchase_time` - Sort the results by time of purchase.
             * `release_date` - Sort the results by release date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - date
              - default
              - manual
              - name
              - purchase_time
              - release_date
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/OnDemandSeasonsGetAllVideosInSeasonResponse
  /ondemand/pages/{ondemand_id}/videos:
    get:
      tags:
        - On Demand\Videos
      summary: Get all the videos on an On Demand page
      operationId: OnDemandVideos_getAllVideos
      description: This method returns every video on the specified On Demand page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `all` - Filter for all videos.
             * `buy` - Filter for purchased videos.
             * `expiring_soon` - Filter for videos that expire soon.
             * `extra` - Filter for extra footage videos.
             * `main` - Filter for main videos.
             * `main.viewable` - Filter for videos that are both the main video and are viewable.
             * `rent` - Filter for rented videos.
             * `trailer` - Filter for trailer videos.
             * `unwatched` - Filter for unwatched videos.
             * `viewable` - Filter for videos that are viewable.
             * `watched` - Filter for watched videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - all
              - buy
              - expiring_soon
              - extra
              - main
              - main.viewable
              - rent
              - trailer
              - unwatched
              - viewable
              - watched
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `date` - Sort the results by date.
             * `default` - Use the default sorting method.
             * `episode` - Sort the results by episode.
             * `manual` - Sort the results manually.
             * `name` - Sort the results by name.
             * `purchase_time` - Sort the results by time of purchase.
             * `release_date` - Sort the results by release date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - date
              - default
              - episode
              - manual
              - name
              - purchase_time
              - release_date
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.ondemand.video+json:
              schema:
                $ref: '#/components/schemas/OnDemandVideosGetAllVideosResponse'
  /ondemand/pages/{ondemand_id}/videos/{video_id}:
    delete:
      tags:
        - On Demand\Videos
      summary: Remove a video from an On Demand page
      operationId: OnDemandVideos_removeFromPage
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a video from the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '204':
          description: The video was removed.
        '403':
          description: The authenticated user can't remove videos from this On Demand page.
          content:
            application/vnd.vimeo.ondemand.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - On Demand\Videos
      summary: Get a specific video on an On Demand page
      operationId: OnDemandVideos_specificVideoGet
      description: >-
        This method returns a single video on the specified On Demand page. Use
        this method to determine whether the video is on the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.ondemand.video+json:
              schema:
                $ref: '#/components/schemas/video'
    put:
      tags:
        - On Demand\Videos
      summary: Add a video to an On Demand page
      operationId: OnDemandVideos_addVideoToPage
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a video to the specified On Demand page. The
        authenticated user must be the owner of the page.
      parameters:
        - description: The ID of the On Demand page.
          in: path
          name: ondemand_id
          required: true
          schema:
            type: number
            example: 61326
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/vnd.vimeo.ondemand.video+json:
            schema:
              $ref: '#/components/schemas/OnDemandVideosAddVideoToPageRequest'
      responses:
        '200':
          description: The video was added.
          content:
            application/vnd.vimeo.ondemand.video+json:
              schema:
                $ref: '#/components/schemas/on-demand-video'
        '400':
          description: The video can't be added to this On Demand page.
          content:
            application/vnd.vimeo.ondemand.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't add videos to this On Demand page.
          content:
            application/vnd.vimeo.ondemand.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /ondemand/regions:
    get:
      tags:
        - On Demand\Regions
      summary: Get all the On Demand regions
      operationId: get_regions
      description: This method returns every existing On Demand region.
      responses:
        '200':
          description: The regions were returned.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/GetRegionsResponse'
  /ondemand/regions/{country}:
    get:
      tags:
        - On Demand\Regions
      summary: Get a specific On Demand region
      operationId: get_region
      description: This method returns a single On Demand region.
      parameters:
        - description: The country code of the region to return.
          in: path
          name: country
          required: true
          schema:
            type: string
            example: US
      responses:
        '200':
          description: The region was returned.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/on-demand-region'
        '404':
          description: No such region exists.
          content:
            application/vnd.vimeo.ondemand.region+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /subscription_plans/{tier}:
    get:
      tags:
        - Subscription Plans\Essentials
      summary: Get a single subscription plan
      operationId: get_plan
      description: This method returns the specified subscription plan.
      parameters:
        - description: |
            The type of subscription plan.

            Option descriptions:
             * `advanced` - The plan type is Vimeo Advanced.
             * `business` - The plan type is Vimeo Business.
             * `free` - The plan type is Vimeo Free.
             * `live_premium` - The plan type is Vimeo Premium.
             * `plus` - The plan type is Vimeo Plus.
             * `pro` - The plan type is Vimeo Pro.
             * `pro_unlimited` - The plan type is Vimeo Pro Unlimited.
             * `standard` - The plan type is Vimeo Standard.
             * `starter` - The plan type is Vimeo Starter.
          in: path
          name: tier
          required: true
          schema:
            type: string
            example: pro
            enum:
              - advanced
              - business
              - free
              - live_premium
              - plus
              - pro
              - pro_unlimited
              - standard
              - starter
      responses:
        '200':
          description: OK
  /tags/{word}:
    get:
      tags:
        - Tags\Essentials
      summary: Get a tag
      operationId: get_tag
      description: This method returns the specified tag.
      parameters:
        - description: The tag to return.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '200':
          description: The tag was returned.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/tag'
  /tags/{word}/videos:
    get:
      tags:
        - Videos\Tags
      summary: Get all the videos with a specific tag
      operationId: VideosTags_getAllByTag
      description: >-
        This method returns all the public videos associated with the specified
        tag.
      parameters:
        - description: The tag word.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `created_time` - Sort the results by creation time.
             * `duration` - Sort the results by duration.
             * `name` - Sort the results by name.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - created_time
              - duration
              - name
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/VideosTagsGetAllByTagResponse'
        '404':
          description: No such tag exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /teammembers/{code}:
    get:
      tags:
        - Teams\Members
      summary: Get membership information about a team
      operationId: TeamsMembers_getMembershipInformation
      description: >-
        This method returns information about the membership of the specified
        team. Usage is currently limited to the team join forms.
      parameters:
        - description: >-
            The code corresponding to the desired team. This value appears under
            `TeamUser` > `code`.
          in: path
          name: code
          required: true
          schema:
            type: string
            example: q3u4mrqoc3u4hcnqo34
      responses:
        '200':
          description: OK
  /tokens:
    delete:
      tags:
        - Authentication Extras\Essentials
      summary: Revoke the current access token
      operationId: delete_token
      description: >-
        This method revokes the access token that the requesting app is
        currently using. The token must be of the OAuth 2 type.
      responses:
        '204':
          description: The token was revoked.
        '400':
          description: Access can't be revoked for an OAuth 1 token.
          content:
            application/vnd.vimeo.auth+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /tutorial:
    get:
      tags:
        - Tutorial\Essentials
      summary: Get started with the Vimeo API
      operationId: developer_tutorial
      description: >-
        This method tests whether users who are working through the [Getting
        Started](https://developer.vimeo.com/api/guides/start) guides have set
        up their configurations correctly.
      responses:
        '200':
          description: OK
  /users:
    get:
      tags:
        - Users\Search
      summary: Search for users
      operationId: search_users
      description: This method returns user search results.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `followers` - Sort the results by number of followers.
             * `relevant` - Sort the results by relevance.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - followers
              - relevant
              - videos
      responses:
        '200':
          description: The search results were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/SearchUsersResponse'
        '500':
          description: There was an internal search error.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '503':
          description: Search is disabled.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{owner_id}/folders/private_to_me:
    get:
      tags:
        - Folders\Essentials
      summary: Get a user's private-to-me folder
      operationId: FoldersEssentials_getUserPrivateToMeFolder
      description: This method returns the specified private-to-me folder.
      parameters:
        - description: The ID of the owner.
          in: path
          name: owner_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The folder was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}:
    get:
      tags:
        - Users\Essentials
      summary: Get the user
      operationId: get_user
      description: This method returns the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The user was returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/user'
    patch:
      tags:
        - Users\Essentials
      summary: Edit the user
      operationId: edit_user
      description: This method edits the Vimeo account of the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.user+json:
            schema:
              $ref: '#/components/schemas/EditUserRequest'
      responses:
        '200':
          description: The user's Vimeo account was edited.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/albums:
    get:
      tags:
        - Showcases\Essentials
      summary: Get all the showcases that belong to the user
      operationId: get_showcases
      description: This method returns every showcase belonging to the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date of creation.
             * `duration` - Sort the results by duration.
             * `videos` - Sort the results by the number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - duration
              - videos
      responses:
        '200':
          description: The showcases were returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetShowcasesResponse'
        '400':
          description: A parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Showcases\Essentials
      summary: Add videos and live events to showcases
      operationId: update_showcases
      security:
        - oauth2:
            - edit
      description: >-
        This method adds videos and events to the specified showcases. The
        authenticated user must either be the owner of the showcase or have team
        permissions.


        The present setup permits only one event per showcase.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: A comma-separated list of video or event URIs.
          in: query
          name: album_item_uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/live_events/273576296
        - description: A comma-separated list of showcase URIs.
          in: query
          name: album_uris
          required: true
          schema:
            type: string
            example: /showcases/258684873, /showcases/356684937
      responses:
        '204':
          description: The videos and events were added to the showcases.
    post:
      tags:
        - Showcases\Essentials
      summary: Create a showcase
      operationId: create_showcase
      security:
        - oauth2:
            - create
      description: This method creates a new showcase for the specified user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/vnd.vimeo.album+json:
            schema:
              $ref: '#/components/schemas/CreateShowcaseRequest'
      responses:
        '201':
          description: The showcase was created.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/album'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't create showcases.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}:
    delete:
      tags:
        - Showcases\Essentials
      summary: Delete a showcase
      operationId: delete_showcase
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified showcase. The authenticated user must
        be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The showcase was deleted.
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't delete the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Showcases\Essentials
      summary: Get a specific showcase
      operationId: get_showcase
      description: >-
        This method returns the specified showcase. The authenticated user must
        be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The showcase was returned.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/album'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Showcases\Essentials
      summary: Edit a showcase
      operationId: edit_showcase
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified showcase. The authenticated user must be
        the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.album+json:
            schema:
              $ref: '#/components/schemas/EditShowcaseRequest'
      responses:
        '200':
          description: The showcase was edited.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/album'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: >-
            The authenticated user doesn't own the showcase, the supplied token
            doesn't have the proper scopes, or the authenticated user can't edit
            the showcase.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/custom_thumbnails:
    get:
      tags:
        - Showcases\Custom showcase thumbnails
      summary: Get all the custom thumbnails of a showcase
      operationId: ShowcasesCustomShowcaseThumbnails_list
      description: >-
        This method returns every custom thumbnail of the specified showcase.
        The authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The custom thumbnails were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesCustomShowcaseThumbnailsListResponse
        '403':
          description: >-
            Error code 3200: The authenticated user can't view the custon
            thumbnails from this showcase.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Showcases\Custom showcase thumbnails
      summary: Add a custom thumbnail to a showcase
      operationId: ShowcasesCustomShowcaseThumbnails_addCustomThumbnail
      security:
        - oauth2:
            - upload
      description: >-
        This method adds an uploaded image file as a custom thumbnail for the
        specified showcase. The image doesn't need to be a still from a showcase
        video, unlike with the [standard thumbnail
        method](https://developer.vimeo.com/api/reference/albums#set_video_as_album_thumbnail).
        The authenticated user must be the owner of the showcase.


        For information on how to upload the thumbnail, see our [Working with
        Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails)
        guide, and follow the same steps.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '201':
          description: The custom thumbnail was added to the showcase.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't add custom thumbnails to this showcase.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}:
    delete:
      tags:
        - Showcases\Custom showcase thumbnails
      summary: Delete a custom showcase thumbnail
      operationId: ShowcasesCustomShowcaseThumbnails_deleteCustomThumbnail
      security:
        - oauth2:
            - edit
      description: >-
        This method deletes the specified custom thumbnail from its showcase.
        The authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the custom thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The custom thumbnail was deleted.
        '403':
          description: The authenticated user can't delete this custom thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            No such showcase exists, or it doesn't contain the specified custom
            thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Showcases\Custom showcase thumbnails
      summary: Get a specific custom showcase thumbnail
      operationId: ShowcasesCustomShowcaseThumbnails_getSpecificThumbnail
      description: >-
        This method returns a single custom thumbnail of the specified showcase.
        The authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the custom thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The custom thumbnail was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't view this custom thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            No such showcase exists, or it doesn't contain the specified custom
            thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Showcases\Custom showcase thumbnails
      summary: Replace a custom showcase thumbnail
      operationId: ShowcasesCustomShowcaseThumbnails_replaceCustomThumbnail
      security:
        - oauth2:
            - edit
      description: >-
        This method replaces the specified custom showcase thumbnail with a new
        image file. The authenticated user must be the owner of the showcase.


        For information on how to upload the thumbnail, see our [Working with
        Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails)
        guide.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the custom thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest
      responses:
        '200':
          description: The custom thumbnail was replaced.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't replace this custom thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            No such showcase exists, or it doesn't contain the specified custom
            thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/logos:
    get:
      tags:
        - Showcases\Custom showcase logos
      summary: Get all the custom logos of a showcase
      operationId: ShowcasesCustomShowcaseLogos_listAllCustomLogos
      description: >-
        This method returns every custom logo of the specified showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The custom logos were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesCustomShowcaseLogosListAllCustomLogosResponse
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Showcases\Custom showcase logos
      summary: Add a custom logo to a showcase
      operationId: ShowcasesCustomShowcaseLogos_addCustomLogo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds an image file as a custom logo to the specified
        showcase. The authenticated user must be the owner of the showcase.


        For information on how to upload the logo, see our [Working with
        Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails)
        guide.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '201':
          description: The logo was added to the showcase.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't add custom logos to this showcase.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/logos/{logo_id}:
    delete:
      tags:
        - Showcases\Custom showcase logos
      summary: Delete a custom showcase logo
      operationId: ShowcasesCustomShowcaseLogos_deleteCustomLogo
      security:
        - oauth2:
            - edit
      description: >-
        This method deletes the specified custom logo from its showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The custom logo was deleted.
        '403':
          description: The authenticated user can't delete this custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            No such showcase exists, or it doesn't contain the specified custom
            logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Showcases\Custom showcase logos
      summary: Get a specific custom showcase logo
      operationId: ShowcasesCustomShowcaseLogos_getSpecificLogo
      description: >-
        This method returns a single custom logo of the specified showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The custom logo was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't access this custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            No such showcase exists, or it doesn't contain the specified custom
            logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Showcases\Custom showcase logos
      summary: Replace a custom showcase logo
      operationId: ShowcasesCustomShowcaseLogos_replaceLogo
      security:
        - oauth2:
            - edit
      description: >-
        This method replaces the specified custom showcase logo with a new image
        file. The authenticated user must be the owner of the showcase.


        For information on how to upload the logo, see our [Working with
        Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails)
        guide.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/ShowcasesCustomShowcaseLogosReplaceLogoRequest
      responses:
        '200':
          description: The custom logo was replaced.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't replace this custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            No such showcase exists, or it doesn't contain the specified custom
            logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/videos:
    get:
      tags:
        - Showcases\Showcase videos
      summary: Get all the videos in a showcase
      operationId: ShowcasesShowcaseVideos_getShowcaseVideos
      description: >-
        This method returns every video in the specified showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page containing the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Filter the results by the **embeddable** attribute.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: The password of the showcase.
          in: query
          name: password
          required: false
          schema:
            type: string
            example: hunter1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `default` - Sort the results by the default method.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `manual` - Sort the results by their manual order.
             * `modified_time` - Sort the results by last modification.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - default
              - duration
              - likes
              - manual
              - modified_time
              - plays
        - description: >-
            Whether to include private videos in the search. Please note that a
            separate search service provides this functionality. The service
            performs a partial text search on the video's name.
          in: query
          name: weak_search
          required: false
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesShowcaseVideosGetShowcaseVideosResponse
        '404':
          description: No such showcase exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Showcases\Showcase videos
      summary: Replace all the videos in a showcase
      operationId: ShowcasesShowcaseVideos_replaceShowcaseVideos
      security:
        - oauth2:
            - edit
      description: >-
        This method replaces all the videos in the specified showcase with a new
        set of one or more videos. The authenticated user must be the owner of
        the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ShowcasesShowcaseVideosReplaceShowcaseVideosRequest
      responses:
        '201':
          description: The videos were added.
        '403':
          description: The authenticated user can't add videos to the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/videos/{video_id}:
    delete:
      tags:
        - Showcases\Showcase videos
      summary: Remove a video from a showcase
      operationId: ShowcasesShowcaseVideos_removeVideoFromShowcase
      security:
        - oauth2:
            - edit
      description: >-
        This method removes the specified video from its showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      responses:
        '204':
          description: The video was removed.
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't remove videos from the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Showcases\Showcase videos
      summary: Get a specific video in a showcase
      operationId: ShowcasesShowcaseVideos_getSpecificVideoInShowcase
      description: >-
        This method returns a single video belonging to the specified showcase.
        The authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 3706071
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
        - description: The password of the showcase.
          in: query
          name: password
          required: false
          schema:
            type: string
            example: hunter1
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: No such showcase exists, or the video doesn't belong to it.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Showcases\Showcase videos
      summary: Add a specific video to a showcase
      operationId: ShowcasesShowcaseVideos_addToShowcase
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single video to the specified showcase. The
        authenticated user must be the owner of the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      responses:
        '204':
          description: The video was added.
        '403':
          description: >-
            The supplied token doesn't have the proper scopes, or the
            authenticated user can't add videos to the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such showcase exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail:
    post:
      tags:
        - Showcases\Showcase videos
      summary: Create a thumbnail for a showcase from a showcase video
      operationId: ShowcasesShowcaseVideos_createShowcaseThumbnail
      security:
        - oauth2:
            - edit
      description: >-
        This method creates a thumbnail image for a showcase from the specified
        frame of a showcase video. The authenticated user must be the owner of
        the showcase.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1
      responses:
        '200':
          description: The showcase thumbnail was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
        '403':
          description: >-
            Error code 3429: The authenticated user can't create a thumbnail for
            this showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such showcase, user, or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video:
    patch:
      tags:
        - Showcases\Showcase videos
      summary: Set the featured video of a showcase
      operationId: ShowcasesShowcaseVideos_setFeaturedVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method sets the featured video of the specified showcase. The
        authenticated user must be the owner of the showcase, and the featured
        video must belong to it.
      parameters:
        - description: The ID of the showcase.
          in: path
          name: album_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 196367152
      responses:
        '200':
          description: The video is now the featured video of the showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
        '403':
          description: >-
            Error code 3429: The authenticated user can't set the featured video
            of this showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such showcase, user, or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/analytics:
    get:
      tags:
        - Users\Analytics
      summary: Get analytics for the user
      operationId: UsersAnalytics_getMetrics
      security:
        - oauth2:
            - stats
      description: This method returns analytic metrics for the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 123456
        - description: |
            The data dimension by which to group the results.

            Option descriptions:
             * `country` - Group the results by country.
             * `embed_domain` - Group the results by embed domain.
             * `total` - Group the results by the time range provided.
             * `video` - Group the results by video.
          in: query
          name: dimension
          required: true
          schema:
            type: string
            enum:
              - country
              - embed_domain
              - total
              - video
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: A comma-separated list of video, folder, or event URIs to filter.
          in: query
          name: filter_content
          required: false
          schema:
            type: string
            example: /folder/1233456,/video/7890123,/folder/123
        - description: >-
            A comma-separated list of country codes in ISO-3166 format to filter
            on.
          in: query
          name: filter_countries
          required: false
          schema:
            type: array
            example: UK,US,IN
            items:
              type: string
        - description: A comma-separated list of device types to filter on.
          in: query
          name: filter_device_types
          required: false
          schema:
            type: array
            example: android,ios
            items:
              type: string
        - description: A comma-separated list of domain names to filter on.
          in: query
          name: filter_embed_domains
          required: false
          schema:
            type: array
            example: abc.com,xyz.com
            items:
              type: string
        - description: A comma-separated list of streaming types to filter on.
          in: query
          name: filter_streaming_types
          required: false
          schema:
            type: array
            example: live,video
            items:
              type: string
        - description: The start date of the range of results in ISO 8601 format.
          in: query
          name: from
          required: true
          schema:
            type: string
            example: '2021-05-30T00:00:00+00:00'
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The maximum number of items returned from the request, up to a limit
            of 1000 items. The default value is `50`.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 50
        - description: |
            The way to sort the results.

            Option descriptions:
             * `average_percent_watched` - Sort the results by mean seconds played.
             * `average_time_watched` - Sort the results by mean percentage played.
             * `comments` - Sort the results by the number of comments.
             * `country` - Sort the results by country.
             * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.
             * `downloads` - Sort the results by the number of downloads.
             * `embed_domain` - Sort the results by embed domain.
             * `finishes` - Sort the results by the number of complete plays.
             * `impressions` - Sort the results by the number of impressions.
             * `like` - Sort the results by the number of likes.
             * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn't `none`.
             * `total_time_watched` - Sort the results by total seconds played.
             * `unique_impressions` - Sort the results by unique impressions.
             * `unique_viewers` - Sort the results by unique viewers.
             * `video` - Sort the results by video ID.
             * `views` - Sort the results by the number of views.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - average_percent_watched
              - average_time_watched
              - comments
              - country
              - default
              - downloads
              - embed_domain
              - finishes
              - impressions
              - like
              - time
              - total_time_watched
              - unique_impressions
              - unique_viewers
              - video
              - views
        - description: >
            The interval by which to aggregate the data according to the
            specified data dimension. The default value is `none`.


            Option descriptions:
             * `day` - Aggregate the results by day according to the specified data dimension.
             * `month` - Aggregate the results by month according to the specified data dimension.
             * `none` - The results are not aggregated by time interval.
             * `week` - Aggregate the results by week according to the specified data dimension.
             * `year` - Aggregate the results by year according to the specified data dimension.
          in: query
          name: time_interval
          required: false
          schema:
            type: string
            enum:
              - day
              - month
              - none
              - week
              - year
        - description: The end date of the range of results in ISO 8601 format.
          in: query
          name: to
          required: true
          schema:
            type: string
            example: '2021-06-30T23:59:59+00:00'
      responses:
        '200':
          description: The analytics were returned.
          content:
            application/vnd.vimeo.analytics+json:
              schema:
                $ref: '#/components/schemas/UsersAnalyticsGetMetricsResponse'
  /users/{user_id}/appearances:
    get:
      tags:
        - Videos\Essentials
      summary: Get all the videos in which the user appears
      operationId: get_appearances
      description: >-
        This method returns all the videos in which the authenticated user has a
        credited appearance.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/GetAppearancesResponse'
  /users/{user_id}/categories:
    get:
      tags:
        - Categories\Users
      summary: Get all the categories that the user follows
      operationId: CategoriesUsers_listFollowedCategories
      security:
        - oauth2:
            - private
      description: This method returns every category that the authenticated user follows.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `name` - Sort the results by name.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - name
      responses:
        '200':
          description: The categories were returned.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: >-
                  #/components/schemas/CategoriesUsersListFollowedCategories200Response
        '403':
          description: >-
            Error code 3200: Only the authenticated user can access this
            information.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/categories/{category}:
    delete:
      tags:
        - Categories\Users
      summary: Cause the user to stop following a category
      operationId: CategoriesUsers_stopFollowingCategory
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to stop following the
        specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user has stopped following the category.
    get:
      tags:
        - Categories\Users
      summary: Check if the user follows a category
      operationId: CategoriesUsers_checkFollowedCategory
      security:
        - oauth2:
            - private
      description: >-
        This method determines whether the authenticated user follows the
        specified category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: string
            example: animation
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user is following the category.
    put:
      tags:
        - Categories\Users
      summary: Cause the user to follow a specific category
      operationId: CategoriesUsers_followSpecificCategory
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to follow the specified
        category.
      parameters:
        - description: The name of the category.
          in: path
          name: category
          required: true
          schema:
            type: number
            example: 0
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user is following the category.
  /users/{user_id}/channels:
    get:
      tags:
        - Channels\Essentials
      summary: Get all the channels to which a user subscribes
      operationId: ChannelsEssentials_getUserSubscriptions
      description: >-
        This method returns all the channels to which the specified user
        subscribes.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `moderated` - Return moderated channels.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - moderated
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `followers` - Sort the results by number of followers.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - followers
              - videos
      responses:
        '200':
          description: The channels were returned.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsEssentialsGetUserSubscriptions200Response
        '304':
          description: >-
            No channel has been followed since the given `If-Modified-Since`
            header.
  /users/{user_id}/channels/{channel_id}:
    delete:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Unsubscribe the user from a specific channel
      operationId: ChannelsSubscriptionsAndSubscribers_unsubscribeUserFromChannel
      security:
        - oauth2:
            - interact
      description: >-
        This method unsubscribes the authenticated user from the specified
        channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user is unsubscribed from the channel.
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Check if a user follows a channel
      operationId: ChannelsSubscriptionsAndSubscribers_checkUserFollowsChannel
      description: >-
        This method determines whether the specified user is a follower of a
        particular channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user follows the channel.
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Channels\Subscriptions and subscribers
      summary: Subscribe the user to a specific channel
      operationId: ChannelsSubscriptionsAndSubscribers_subscribeToChannel
      security:
        - oauth2:
            - interact
      description: This method subscribes the authenticated user to the specified channel.
      parameters:
        - description: The ID of the channel.
          in: path
          name: channel_id
          required: true
          schema:
            type: number
            example: 927
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user is subscribed to the channel.
        '404':
          description: No such channel exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/customlogos:
    get:
      tags:
        - Embed Presets\Custom logos
      summary: Get all the custom logos that belong to the user
      operationId: EmbedPresetsCustomLogos_listUserLogos
      description: >-
        This method returns every custom logo that belongs to the authenticated
        user or team owner.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The custom logos were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/EmbedPresetsCustomLogosListUserLogosResponse
        '403':
          description: The authenticated user can't access the custom logos.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Embed Presets\Custom logos
      summary: Add a custom user logo
      operationId: EmbedPresetsCustomLogos_addUserLogo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a custom logo representing the authenticated user for
        display in the embedded player. Be sure to use this method in the
        context of the multi-step upload procedure described in our [Working
        with Thumbnail
        Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail)
        guide. This method represents Step 2 of the procedure.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '201':
          description: The custom logo was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't add the custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/customlogos/{logo_id}:
    delete:
      tags:
        - Embed Presets\Custom logos
      summary: Delete a custom user logo
      operationId: EmbedPresetsCustomLogos_deleteUserLogo
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified custom logo belonging to the
        authenticated user.
      parameters:
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The custom logo was deleted.
        '403':
          description: The authenticated user can't access the custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Embed Presets\Custom logos
      summary: Get a specific custom user logo
      operationId: EmbedPresetsCustomLogos_getSpecificUserLogo
      description: >-
        This method returns a single custom logo belonging to the authenticated
        user.
      parameters:
        - description: The ID of the custom logo.
          in: path
          name: logo_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The custom logo was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't access the custom logo.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all available live event destinations for the user to stream to
      operationId: LiveEventDestinations_listAvailableDestinations
      security:
        - oauth2:
            - public
      description: >-
        This method returns every available event destination for the
        authenticated user to stream to.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The event destinations were returned.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't get the available
            destinations.

            * Error code 3422: The authenticated user can't live simulcast.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/feed:
    get:
      tags:
        - Users\Feeds
      summary: Get all the videos in the user's feed
      operationId: get_feed
      security:
        - oauth2:
            - private
      description: This method returns every video in the authenticated user's feed.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: >-
            The pagination offset. We recommend that you use the pagination
            links in the feed response instead of working with this value
            directly. For more details, see our [pagination
            documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).
          in: query
          name: offset
          required: false
          schema:
            type: string
            example: '280'
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The feed type.

            Option descriptions:
             * `appears` - Videos in which the user appears.
             * `category_featured` - Featured videos.
             * `channel` - Channel videos.
             * `facebook_feed` - Videos from the user's Facebook feed.
             * `following` - Videos from accounts that the user follows.
             * `group` - Group videos.
             * `likes` - Liked videos.
             * `ondemand_publish` - On Demand videos.
             * `share` - Shared videos.
             * `tagged_with` - Tagged videos.
             * `twitter_timeline` - Videos from the user's Twitter timeline.
             * `uploads` - Uploaded videos.
          in: query
          name: type
          required: false
          schema:
            type: string
            enum:
              - appears
              - category_featured
              - channel
              - facebook_feed
              - following
              - group
              - likes
              - ondemand_publish
              - share
              - tagged_with
              - twitter_timeline
              - uploads
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.activity+json:
              schema:
                $ref: '#/components/schemas/GetFeedResponse'
  /users/{user_id}/followers:
    get:
      tags:
        - Users\Followers
      summary: Get all the followers of the user
      operationId: get_followers
      description: This method returns every follower of the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date followed.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The user's followers were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/GetFollowersResponse'
  /users/{user_id}/following:
    get:
      tags:
        - Users\Followers
      summary: Get all the users that the user is following
      operationId: UsersFollowers_listOfFollowedUsers
      description: This method returns every user that the authenticated user is following.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `online` - Return users who are currently online.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - online
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date followed.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The followed users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/UsersFollowersListOfFollowedUsersResponse'
    post:
      tags:
        - Users\Followers
      summary: Follow a list of users
      operationId: follow_users
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to become a follower of
        multiple users. In the body of the request, specify the list of users to
        follow as

        an array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so
        on, are the user IDs of the users in question:


        ```

        {
         [
             {"uri" : "/users/{user01_id}"},
             {"uri" : "/users/{user02_id}"},
             {"uri" : "/users/{user03_id}"}
         ]
        }

        ```
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowUsersRequest'
      responses:
        '204':
          description: The users were followed.
        '400':
          description: >-
            * Error code 2205: The request body is empty, the users array is
            invalid, or the list of users doesn't contain URIs.

            * Error code 2900: A user in the list doesn't exist.

            * Error code 2901: The list contains more than 100 users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user access token is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3417: The authenticated user can't follow other users.

            * Error code 3438: The authenticated user can't follow other users
            because an email verification check hasn't been completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: >-
            Error code 9006: The authenticated user is rate-limited from
            following other users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4005: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/following/{follow_user_id}:
    delete:
      tags:
        - Users\Followers
      summary: Unfollow a user
      operationId: unfollow_user
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to stop following another
        user.
      parameters:
        - description: The ID of the user to unfollow.
          in: path
          name: follow_user_id
          required: true
          schema:
            type: number
            example: 3766357
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user was unfollowed.
    get:
      tags:
        - Users\Followers
      summary: Check if the user is following another user
      operationId: UsersFollowers_checkFollowingStatus
      description: >-
        This method determines whether the authenticated user is a follower of
        the specified user.
      parameters:
        - description: The ID of the user to follow.
          in: path
          name: follow_user_id
          required: true
          schema:
            type: number
            example: 3766357
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The authenticated user follows the specified user.
        '404':
          description: The authenticated user doesn't follow the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Users\Followers
      summary: Follow a specific user
      operationId: follow_user
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to become the follower of the
        specified user.
      parameters:
        - description: The ID of the user to follow.
          in: path
          name: follow_user_id
          required: true
          schema:
            type: number
            example: 3766357
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user was followed.
        '403':
          description: >-
            * The authenticated user can't follow other users.

            * Error code 3438: The authenticated user can't follow other users
            because an email verification check hasn't been completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/groups:
    get:
      tags:
        - Groups\Users
      summary: Get all the groups that the user has joined
      operationId: GroupsUsers_getUserGroupsList
      description: This method returns every group to which the authenticated user belongs.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `moderated` - Return moderated groups.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - moderated
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
             * `members` - Sort the results by number of members.
             * `videos` - Sort the results by number of videos.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - members
              - videos
      responses:
        '200':
          description: The groups were returned.
          content:
            application/vnd.vimeo.group+json:
              schema:
                $ref: '#/components/schemas/GroupsUsersGetUserGroupsListResponse'
  /users/{user_id}/groups/{group_id}:
    delete:
      tags:
        - Groups\Subscriptions
      summary: Remove the user from a group
      operationId: leave_group
      security:
        - oauth2:
            - interact
      description: >-
        This method removes the authenticated user from the specified group. The
        authenticated user can't be the owner of the group; assign a new owner
        through a PATCH request first.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user was removed from the group.
        '403':
          description: The authenticated user can't leave the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Groups\Subscriptions
      summary: Add the user to a group
      operationId: join_group
      security:
        - oauth2:
            - interact
      description: This method adds the authenticated user to the specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user joined the group.
        '403':
          description: >-
            The authenticated user can't join the group. Possible reasons are
            that the group isn't public or that its privacy setting is
            `members`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Groups\Users
      summary: Check if a user has joined a group
      operationId: GroupsUsers_checkBelongGroup
      description: >-
        This method determines whether the authenticated user belongs to the
        specified group.
      parameters:
        - description: The ID of the group.
          in: path
          name: group_id
          required: true
          schema:
            type: number
            example: 1108
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The user belongs to the group.
        '404':
          description: |-
            * No such group exists.
            * The authenticated user isn't a member of the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/likes:
    get:
      tags:
        - Likes\Essentials
      summary: Get all the videos that a user has liked
      operationId: get_likes
      description: This method returns every video that the authenticated user has liked.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/GetLikesResponse'
  /users/{user_id}/likes/{video_id}:
    delete:
      tags:
        - Likes\Essentials
      summary: Cause a user to unlike a video
      operationId: unlike_video
      security:
        - oauth2:
            - interact
      description: This method causes the authenticated user to unlike the specified video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was unliked.
        '403':
          description: The authenticated user can't like videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Likes\Essentials
      summary: Check if the user has liked a video
      operationId: LikesEssentials_checkVideoLikedByUser
      description: >-
        This method checks if the authenticated user has liked the specified
        video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The user has liked the video.
        '404':
          description: The user hasn't liked the video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Likes\Essentials
      summary: Cause the user to like a video
      operationId: like_video
      security:
        - oauth2:
            - interact
      description: >-
        This method causes the authenticated user to like the specified video.
        The user can't like their own video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was liked.
        '400':
          description: The authenticated user owns the video and can't like it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user can't like videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/live_events:
    delete:
      tags:
        - Live\Essentials
      summary: Delete a list of live events
      operationId: LiveEssentials_deleteMultipleEvents
      security:
        - oauth2:
            - delete
      description: This method deletes multiple events belonging to the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: '#/components/schemas/LiveEssentialsDeleteMultipleEventsRequest2'
      responses:
        '200':
          description: OK
    get:
      tags:
        - Live\Essentials
      summary: Get all the live events that belong to the user
      operationId: LiveEssentials_getUserLiveEvents
      description: The method returns every event belonging to the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `not_in_folder` - Show only events that aren't in a folder.
             * `not_in_showcase` - Show only events that aren't in a showcase.
             * `not_in_webinar` - Show only events that aren't in a webinar.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - not_in_folder
              - not_in_showcase
              - not_in_webinar
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
        - description: |
            The type of event to return.

            Option descriptions:
             * `all` - Return all events.
             * `one_time` - Return one-time events only.
             * `recurring` - Return recurring events only.
          in: query
          name: type
          required: false
          schema:
            type: string
            example: recurring
            enum:
              - all
              - one_time
              - recurring
      responses:
        '200':
          description: The events were returned.
          content:
            application/vnd.vimeo.live.event+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEssentialsGetUserLiveEvents200Response
    post:
      tags:
        - Live\Essentials
      summary: Create a live event
      operationId: LiveEssentials_createEventForUser
      security:
        - oauth2:
            - create
      description: This method creates a new event for the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: '#/components/schemas/LiveEssentialsCreateEventForUserRequest'
      responses:
        '200':
          description: The event was created.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: |-
            * Error code 3200: The authenticated user can't create an event.
            * Error code 8000: The user credentials are invalid.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3422: The authenticated user can't create an event.

            * Error code 3439: The authenticated user can't edit the content
            rating of an event.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}:
    delete:
      tags:
        - Live\Essentials
      summary: Delete a specific live event
      operationId: LiveEssentials_deleteSpecificEvent
      security:
        - oauth2:
            - delete
            - private
      description: This method deletes a single event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
      responses:
        '204':
          description: The event was deleted.
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to delete the event.

            * Error code 3422: The authenticated user can't delete the event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Essentials
      summary: Get a specific live event
      operationId: LiveEssentials_getEventById
      security:
        - oauth2:
            - private
      description: This method returns a single event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The password of the event when the privacy is set to `password`.
          in: query
          name: password
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The event was returned.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Essentials
      summary: Update a live event
      operationId: LiveEssentials_updateEventBelongingToAuthenticatedUser
      security:
        - oauth2:
            - edit
            - private
      description: This method updates an event belonging to the authenticated user.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.live.event.recurring+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2
      responses:
        '200':
          description: The event was updated.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/live-event-recurring'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to update the event.

            * Error code 3422: The authenticated user can't update the event.
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.event.recurring+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/activate:
    post:
      tags:
        - Live\Event activation
      summary: Activate a live event
      operationId: LiveEventActivation_createRtmpLinks
      security:
        - oauth2:
            - create
            - private
      description: >-
        This method creates the necessary RTMP links for the specified event.
        Begin streaming to these links to trigger the event on Vimeo. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video+json:
            schema:
              $ref: '#/components/schemas/LiveEventActivationCreateRtmpLinksRequest2'
      responses:
        '200':
          description: The event was activated.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            * Error code 2428: The event has already been activated.

            * Error code 2551: The session can't be activated when the scheduled
            media playback feature is enabled.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user doesn't have the necessary
            permissions to stream to the event.

            * Error code 3422: The authenticated user can't activate the event.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4017: An unexpected error occurred.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: 'Error code 7701: The service is unavailable.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/auto_cc:
    patch:
      tags:
        - Live\Event automated closed captions
      summary: Edit the automated closed captions preference of a live event
      operationId: LiveEventAutomatedClosedCaptions_editPreferenceForEvent
      security:
        - oauth2:
            - private
      description: >-
        This method edits the automated closed captions preference for the
        specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/application/vnd.vimeo.live.auto_cc+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1
      responses:
        '200':
          description: The automated closed captions preference was edited.
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/live-event-automated-closed-captions'
        '400':
          description: 'Error code 2204: The payload is invalid.'
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The user doesn't have permission to edit the
            closed captions preference for the specified event.

            * Error code 3422: The authenticated user can't edit the closed
            captions preference for the specified event.

            * Error code 3439: The authenticated user has reached the automated
            closed captions usage limit, or they can't use the automated closed
            captions feature at all.
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/application/vnd.vimeo.live.auto_cc+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all the destinations of a recurring live event
      operationId: LiveEventDestinations_getAllAvailableDestinations
      security:
        - oauth2:
            - public
      description: >-
        This method returns every destination of the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The event destinations were returned.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventDestinationsGetAllAvailableDestinationsResponse
        '400':
          description: >-
            Error code 2204: Parameters are missing, or the body data is
            invalid.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event destinations
      summary: Create a live event destination
      operationId: LiveEventDestinations_createEventDestination
      security:
        - oauth2:
            - public
      description: >-
        This method creates a destination for the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.simulcast.destination+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventDestinationsCreateEventDestinationRequest
      responses:
        '200':
          description: The event destination was created.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/live-event-destination'
        '400':
          description: >-
            * Error code 2204: Parameters are missing, or the body data is
            invalid.

            * Error code 13003: You can create only one LinkedIn destination per
            event.

            * Error code 13004: You can create only one YouTube destination per
            event.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destinations.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/end:
    post:
      tags:
        - Live\Event end
      summary: End a live event
      operationId: LiveEventEnd_eventTerminationAlt2
      security:
        - oauth2:
            - create
            - private
      description: >-
        This method ends the specified event. The authenticated user must be the
        owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the streamable video.
          in: query
          name: clip_id
          required: false
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The event was ended.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: 'Error code 10004: The event isn''t being streamed.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3200: The user can't end the session.
            * Error code 3422: The authenticated user can't end the event.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4021: There is no video for the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/low_latency:
    patch:
      tags:
        - Live\Event low latency
      summary: Toggle the low-latency option of a live event
      operationId: LiveEventLowLatency_toggleOption
      security:
        - oauth2:
            - private
      description: This method toggles the low-latency option of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/application/vnd.vimeo.live.low_latency+json:
            schema:
              $ref: '#/components/schemas/LiveEventLowLatencyToggleOptionRequest2'
      responses:
        '200':
          description: The low-latency status of the event was returned.
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/recurring-live-event-low-latency'
        '403':
          description: >-
            Error code 3200: The authenticated user can't toggle the low-latency
            option of the event.
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/application/vnd.vimeo.live.low_latency+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/m3u8_playback:
    get:
      tags:
        - Live\Event M3U8 playback
      summary: Get an M3U8 playback URL for a live event
      operationId: LiveEventM3U8Playback_getUrlForEventStream
      security:
        - oauth2:
            - private
      description: >-
        This method returns an M3U8 playback URL for the specified event stream.
        You should use this endpoint only in conjunction with our recommended
        procedure for playing events via HLS. For more information, see our [HLS
        guide](https://developer.vimeo.com/api/live/playback).
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The requested maximum frames per second.
          in: query
          name: max_fps_fhd
          required: false
          schema:
            type: number
            example: 30
      responses:
        '200':
          description: The M3U8 playback URL was returned.
        '400':
          description: 'Error code 10008: The event hasn''t started.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the M3U8
            playback URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: |-
            * Error code 4020: No streamable video was found.
            * Error code 4021: No video was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: >-
            Error code 7900: The streamable video in progress will be available
            soon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/ott_destination/{destination_id}:
    delete:
      tags:
        - Live\Event destinations
      summary: Delete a live event OTT destination
      operationId: LiveEventDestinations_deleteOttDestination
      security:
        - oauth2:
            - private
      description: >-
        This method deletes an OTT channel as the destination of the specified
        event. The authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The OTT destination was deleted.
        '400':
          description: >-
            Error code 2204: A parameter is missing, or the body data is
            invalid.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: |-
            * Error code 5000: No such event or user exists.
            * Error code 5018: The user doesn't have any OTT metadata.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/ott_destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all the OTT destinations of a recurring live event
      operationId: LiveEventDestinations_getAllOttDestinations
      security:
        - oauth2:
            - private
      description: >-
        This method returns every OTT destination of the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The OTT destinations were returned.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventDestinationsGetAllOttDestinationsResponse
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event destinations
      summary: Create a live event OTT destination
      operationId: LiveEventDestinations_createOttDestination
      security:
        - oauth2:
            - private
      description: >-
        This method creates an OTT channel as the destination of the specified
        event. The authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The new OTT destination was created.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/ott-destination'
        '400':
          description: >-
            Error code 2204: A parameter is missing, or the body data is
            invalid.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destination.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: |-
            * Error code 5000: No such event or user exists.
            * Error code 5018: The user doesn't have any OTT metadata.
          content:
            application/vnd.vimeo.live.ott.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/pictures:
    get:
      tags:
        - Live\Event thumbnails
      summary: Get all the thumbnails of a live event
      operationId: LiveEventThumbnails_getAllThumbs
      security:
        - oauth2:
            - private
      description: This method returns every thumbnail image of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The thumbnails were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/LiveEventThumbnailsGetAllThumbsResponse'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event thumbnails
      summary: Create a live event thumbnail
      operationId: LiveEventThumbnails_createThumbnailForEvent
      security:
        - oauth2:
            - upload
            - private
      description: This method creates a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventThumbnailsCreateThumbnailForEventRequest1
      responses:
        '200':
          description: The thumbnail was created.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete the
            thumbnails for the event.

            * Error code 3422: The authenticated user can't create a thumbnail
            for the event.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}:
    delete:
      tags:
        - Live\Event thumbnails
      summary: Delete a live event thumbnail
      operationId: LiveEventThumbnails_deleteThumbnailForEvent
      security:
        - oauth2:
            - delete
            - private
      description: This method deletes a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The thumbnail was deleted.
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete the thumbnail
            for the event.

            * Error code 3422: The authenticated user can't delete the
            thumbnail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event thumbnails
      summary: Get a specific live event thumbnail
      operationId: LiveEventThumbnails_getSpecificThumbnail
      security:
        - oauth2:
            - private
      description: This method returns a single thumbnail image of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The thumbnail was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: 'Error code 3200: The authenticated user can''t access the thumbnail.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Live\Event thumbnails
      summary: Edit a live event thumbnail
      operationId: LiveEventThumbnails_editEventThumbnail
      security:
        - oauth2:
            - edit
            - private
      description: This method edits a thumbnail image for the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventThumbnailsEditEventThumbnailRequest
      responses:
        '200':
          description: The thumbnail was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't update the thumbnail
            for the event.

            * Error code 3422: The authenticated user can't edit the thumbnail
            of the event.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, thumbnail, or user exists.'
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/privacy/domains:
    get:
      tags:
        - Live\Embed privacy
      summary: Get all the domains on which a live event can be embedded
      operationId: LiveEmbedPrivacy_getWhitelistDomains
      security:
        - oauth2:
            - private
      description: >-
        This method returns every whitelisted domain for an event. The embed
        privacy setting must be `whitelist`.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The whitelisted domains for the event were returned.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEmbedPrivacyGetWhitelistDomains200Response
        '400':
          description: 'Error code 2518: The embed permission isn''t `whitelist`.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't get domains for the
            event.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Live\Embed privacy
      summary: Embed a live event on one or more domains
      operationId: LiveEmbedPrivacy_embedEventOnDomains
      security:
        - oauth2:
            - edit
            - private
      description: >-
        This method embeds an event on the specified domains. The embed privacy
        setting must be `whitelist`.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEmbedPrivacyEmbedEventOnDomainsRequest2'
      responses:
        '204':
          description: The domains were added to the whitelist.
        '400':
          description: 'Error code 2518: The embed permission isn''t `whitelist`.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't edit domains for the
            event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists under the user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4016: An unexpected error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/videos:
    delete:
      tags:
        - Live\Event videos
      summary: Remove a list of videos from a live event
      operationId: LiveEventVideos_removeMultiple
      security:
        - oauth2:
            - edit
            - private
      description: This method removes multiple videos from the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEventVideosRemoveMultipleRequest1'
      responses:
        '204':
          description: The videos were removed.
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't remove one or more
            of the listed videos.

            * Error code 3422: The authenticated user can't remove videos from
            the event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Live\Event videos
      summary: Get all the videos in a live event
      operationId: LiveEventVideos_listAllVideosInEvent
      security:
        - oauth2:
            - private
      description: This method returns every video in the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page that contains the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable events.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added videos.
             * `alphabetical` - Sort the results alphabetically.
             * `arranged` - Sort the results in the order that the user has arranged the videos.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - arranged
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventVideosListAllVideosInEventResponse
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event videos
      summary: Add a list of videos to a live event
      operationId: LiveEventVideos_addMultipleVideos
      security:
        - oauth2:
            - edit
            - private
      description: This method adds multiple videos to the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiveEventVideosAddMultipleVideosRequest'
      responses:
        '204':
          description: The videos were added.
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't add videos to the
            event.

            * Error code 3422: The authenticated user can't add one or more of
            the listed videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/live_events/{live_event_id}/videos/{video_id}:
    get:
      tags:
        - Live\Event videos
      summary: Get a specific video in a live event
      operationId: LiveEventVideos_getSpecificVideo
      security:
        - oauth2:
            - private
      description: This method returns a single video in the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: live_event_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            Error code 2204: A password is required for password-protected
            events.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 3200: The authenticated user can''t access the event.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event, video, or user exists.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/ondemand/pages:
    get:
      tags:
        - On Demand\Essentials
      summary: Get all the On Demand pages of the user
      operationId: OnDemandEssentials_getAllUserPages
      description: >-
        This method returns every On Demand page belonging to the authenticated
        user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The type of the page to return.

            Option descriptions:
             * `film` - The page type is a film.
             * `series` - The page type is a series.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - film
              - series
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added page.
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `modified_time` - Sort the results by time of page modification.
             * `name` - Sort the results by page name.
             * `publish.time` - Sort the results by time of page publishing.
             * `rating` - Sort the results by content rating.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - date
              - modified_time
              - name
              - publish.time
              - rating
      responses:
        '200':
          description: The On Demand pages were returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: >-
                  #/components/schemas/OnDemandEssentialsGetAllUserPages200Response
        '404':
          description: No such user exists.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - On Demand\Essentials
      summary: Create an On Demand page
      operationId: create_vod
      description: >-
        This method creates a new On Demand page for the specified user. To
        publish the page, use the
        [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod)
        method.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVodRequest'
      responses:
        '201':
          description: The On Demand page was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/on-demand-page'
  /users/{user_id}/ondemand/purchases:
    get:
      tags:
        - On Demand\Purchases and rentals
      summary: Get all of the user's On Demand purchases and rentals
      operationId: OnDemandPurchasesAndRentals_listUserPurchasesAndRentals
      security:
        - oauth2:
            - purchased
      description: >-
        This method returns every purchase and rental that the authenticated
        user has made across all On Demand pages.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The type of the On Demand video to filter on.

            Option descriptions:
             * `all` - Filter by all video types.
             * `expiring_soon` - Filter by videos that expire soon.
             * `film` - Filter by film.
             * `important` - Filter by pages that are about to expire.
             * `purchased` - Filter by purchased videos.
             * `rented` - Filter by rented videos.
             * `series` - Filter by series.
             * `subscription` - Filter by video subscription.
             * `unwatched` - Filter by unwatched videos.
             * `watched` - Filter by watched videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - all
              - expiring_soon
              - film
              - important
              - purchased
              - rented
              - series
              - subscription
              - unwatched
              - watched
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `added` - Sort the results by most recently added video.
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `name` - Sort the results by video name.
             * `purchase_time` - Sort the results by time of video purchase.
             * `rating` - Sort the results by content rating.
             * `release_date` - Sort the results by video release date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - added
              - alphabetical
              - date
              - name
              - purchase_time
              - rating
              - release_date
      responses:
        '200':
          description: The purchases and rentals were returned.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: >-
                  #/components/schemas/OnDemandPurchasesAndRentalsListUserPurchasesAndRentalsResponse
        '403':
          description: >-
            The authenticated user can't get purchases and rentals for another
            user's account.
          content:
            application/vnd.vimeo.ondemand.page+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/pictures:
    get:
      tags:
        - Users\Pictures
      summary: Get all the pictures that belong to the user
      operationId: get_pictures
      description: >-
        This method returns every portrait image belonging to the authenticated
        user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The portrait images were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/GetPicturesResponse'
    post:
      tags:
        - Users\Pictures
      summary: Add a picture to the user's account
      operationId: create_picture
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a portrait image to the authenticated user's Vimeo
        account. Send the binary data of the image file to the location that you
        receive

        from the **link** field in the response. For step-by-step instructions,
        see

        [Working with Thumbnail
        Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The portrait image was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /users/{user_id}/pictures/{portraitset_id}:
    delete:
      tags:
        - Users\Pictures
      summary: Delete a picture from the user's account
      operationId: delete_picture
      security:
        - oauth2:
            - delete
      description: >-
        This method removes the specified portrait image from the authenticated
        user's Vimeo account.
      parameters:
        - description: The ID of the picture.
          in: path
          name: portraitset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '204':
          description: The portrait image was removed.
    get:
      tags:
        - Users\Pictures
      summary: Get a specific picture that belongs to the user
      operationId: get_picture
      description: >-
        This method returns a single portrait image belonging to the
        authenticated user.
      parameters:
        - description: The ID of the picture.
          in: path
          name: portraitset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The portrait image was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
    patch:
      tags:
        - Users\Pictures
      summary: Edit a picture in the user's account
      operationId: edit_picture
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified portrait image belonging to the
        authenticated user.
      parameters:
        - description: The ID of the picture.
          in: path
          name: portraitset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/EditPictureRequest'
      responses:
        '200':
          description: The portrait image was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /users/{user_id}/portfolios:
    get:
      tags:
        - Portfolios\Essentials
      summary: Get all the portfolios that belong to the user
      operationId: get_portfolios
      description: This method returns every portfolio belonging to the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by creation date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The portfolios were returned.
          content:
            application/vnd.vimeo.portfolio+json:
              schema:
                $ref: '#/components/schemas/GetPortfoliosResponse'
  /users/{user_id}/portfolios/{portfolio_id}:
    get:
      tags:
        - Portfolios\Essentials
      summary: Get a specific portfolio
      operationId: get_portfolio
      description: >-
        This method returns a single portfolio belonging to the authenticated
        user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The portfolio was returned.
          content:
            application/vnd.vimeo.portfolio+json:
              schema:
                $ref: '#/components/schemas/portfolio'
  /users/{user_id}/portfolios/{portfolio_id}/videos:
    get:
      tags:
        - Portfolios\Videos
      summary: Get all the videos in a portfolio
      operationId: PortfoliosVideos_getAllPortfolioVideos
      description: >-
        This method returns every video from the specified portfolio belonging
        to the authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page that contains the video URI.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by creation date.
             * `default` - Use the default sorting method.
             * `likes` - Sort the results by number of likes.
             * `manual` - Sort the results by their user-specified order.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - default
              - likes
              - manual
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/PortfoliosVideosGetAllPortfolioVideos200Response
  /users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}:
    delete:
      tags:
        - Portfolios\Videos
      summary: Remove a video from a portfolio
      operationId: PortfoliosVideos_removeFromPortfolioVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method removes a video from the specified portfolio belonging to
        the authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
        '404':
          description: No such portfolio or video exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Portfolios\Videos
      summary: Get a specific video in a portfolio
      operationId: PortfoliosVideos_getSpecificVideo
      description: >-
        This method returns a single video from the specified portfolio
        belonging to the authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
    put:
      tags:
        - Portfolios\Videos
      summary: Add a video to a portfolio
      operationId: PortfoliosVideos_addVideoToPortfolio
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a video to the specified portfolio belonging to the
        authenticated user.
      parameters:
        - description: The ID of the portfolio.
          in: path
          name: portfolio_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
        '404':
          description: No such portfolio or video exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/presets:
    get:
      tags:
        - Embed Presets\Essentials
      summary: Get all the embed presets that a user has created
      operationId: EmbedPresetsEssentials_getUserEmbedPresets
      description: >-
        This method returns every embed preset that belongs to the authenticated
        user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The embed presets were returned.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: >-
                  #/components/schemas/EmbedPresetsEssentialsGetUserEmbedPresetsResponse
    post:
      tags:
        - Embed Presets\Essentials
      summary: Create an embed preset
      operationId: EmbedPresetsEssentials_createEmbedPreset
      description: This method creates an embed preset.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.preset+json:
            schema:
              $ref: >-
                #/components/schemas/EmbedPresetsEssentialsCreateEmbedPresetRequest
      responses:
        '200':
          description: The embed preset was created.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/preset'
  /users/{user_id}/presets/{preset_id}:
    get:
      tags:
        - Embed Presets\Essentials
      summary: Get a specific embed preset
      operationId: EmbedPresetsEssentials_getSpecificEmbedPreset
      description: >-
        This method returns a single embed preset. The authenticated user must
        be the owner of the preset.
      parameters:
        - description: The ID of the preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The embed preset was returned.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/preset'
    patch:
      tags:
        - Embed Presets\Essentials
      summary: Edit an embed preset
      operationId: EmbedPresetsEssentials_editPreset
      description: >-
        This method edits the specified embed preset. The authenticated user
        must be the owner of the preset.
      parameters:
        - description: The ID of the preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: false
        content:
          application/vnd.vimeo.preset+json:
            schema:
              $ref: '#/components/schemas/EmbedPresetsEssentialsEditPresetRequest1'
      responses:
        '200':
          description: The embed preset was edited.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/preset'
        '400':
          description: The outro type is invalid.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: |-
            * No such embed preset exists.
            * The authenticated user can't edit the embed preset.
          content:
            application/vnd.vimeo.preset+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/presets/{preset_id}/videos:
    get:
      tags:
        - Embed Presets\Videos
      summary: Get all the videos that have a specific embed preset
      operationId: EmbedPresetsVideos_getPresetVideos
      description: >-
        This method returns every video to which the specified embed preset has
        been added. The authenticated user must be the owner of videos.
      parameters:
        - description: The ID of the embed preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/EmbedPresetsVideosGetPresetVideosResponse'
  /users/{user_id}/projects:
    get:
      tags:
        - Folders\Essentials
      summary: Get all the folders that belong to the user
      operationId: get_projects
      security:
        - oauth2:
            - private
      description: This method returns all the folders belonging to the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `date` - Sort the results by date.
             * `default` - Use the default sort order.
             * `modified_time` - Sort the results by last modification.
             * `name` - Sort the results by name.
             * `pinned_on` - Sort the results by pinned timestamp.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - date
              - default
              - modified_time
              - name
              - pinned_on
      responses:
        '200':
          description: The folders were returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectsResponse'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Folders\Essentials
      summary: Create a folder
      operationId: create_project
      security:
        - oauth2:
            - create
      description: >-
        This method creates a new folder for the authenticated user. By default,
        this method creates a top-level folder. To create a subfolder — that is,
        to place the new folder inside an existing folder — specify the parent
        folder by URI with the **parent_folder_uri** parameter in the body of
        the request.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: The folder was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          description: |-
            * Error code 2204: The input is invalid.
            * Error code 2205: The input is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3200: The authenticated user can't create folders.
            * Error code 3701: The maximum folder depth has been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/projects/{project_id}:
    delete:
      tags:
        - Folders\Essentials
      summary: Delete a folder
      operationId: delete_project
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified folder and optionally also the videos
        that it contains. The authenticated user must be the owner of the
        folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: >-
            Whether to delete all the videos in the folder along with the folder
            itself.
          in: query
          name: should_delete_clips
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '204':
          description: The folder was deleted.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3200: The authenticated user can''t delete the folder.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Folders\Essentials
      summary: Get a specific folder
      operationId: get_project
      description: This method returns a single folder belonging to the authenticated user.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The folder was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Folders\Essentials
      summary: Edit a folder
      operationId: edit_project
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified folder. The authenticated user must be
        the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditProjectRequest'
      responses:
        '200':
          description: The folder was edited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          description: |-
            * Error code 2204: The input is invalid.
            * Error code 2205: The input is empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't edit the folder.

            * Error code 3449: The authenticated user can't edit folder
            settings.

            * Error code 3702: Folder settings aren't enabled for this team.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/projects/{project_id}/items:
    get:
      tags:
        - Folders\Items
      summary: Get all the items in a folder
      operationId: FoldersItems_getFolderContents
      description: This method returns every item that belongs to the specified folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `folder` - Filter the results by folder.
             * `live_event` - Filter the results by event.
             * `video` - Filter the results by video.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - folder
              - live_event
              - video
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `default` - Use the default sort order.
             * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.
             * `last_user_action_event_date` - Sort the results by the date of the last user action.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - duration
              - last_user_action_event_date
      responses:
        '200':
          description: OK
  /users/{user_id}/projects/{project_id}/videos:
    delete:
      tags:
        - Folders\Videos
      summary: Remove a list of videos from a folder
      operationId: FoldersVideos_removeMultipleVideosFromFolder
      security:
        - oauth2:
            - interact
      description: >-
        This method removes multiple videos from the specified folder. The
        authenticated user must be the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: Whether to delete the videos when removing them from the folder.
          in: query
          name: should_delete_clips
          required: false
          schema:
            type: boolean
            example: false
        - description: A comma-separated list of the video URIs to remove.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/videos/273576296
      responses:
        '204':
          description: The videos were removed.
        '400':
          description: 'Error code 2204: The input is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Folders\Videos
      summary: Get all the videos in a folder
      operationId: FoldersVideos_getAllFolderVideos
      description: This method returns all the videos that belong to the specified folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include at least one of these tags. The use of this parameter
            triggers a search.
          in: query
          name: filter_tag
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include all of these tags. The use of this parameter triggers a
            search.
          in: query
          name: filter_tag_all_of
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to exclude. The use of this parameter
            triggers a search.
          in: query
          name: filter_tag_exclude
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: Whether to include subfolders.
          in: query
          name: include_subfolders
          required: false
          schema:
            type: boolean
            example: false
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: >-
            A comma-separated list of fields to query over. The default value is
            `title,description,chapters,tags`.
          in: query
          name: query_fields
          required: false
          schema:
            type: string
            example: title,description
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
             * `default` - Use the default sort order.
             * `duration` - Sort the results by duration.
             * `last_user_action_event_date` - Sort the results by the date of the last user action.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - duration
              - last_user_action_event_date
      responses:
        '200':
          description: The videos were returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersVideosGetAllFolderVideosResponse'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Folders\Videos
      summary: Add a list of videos to a folder
      operationId: FoldersVideos_addToFolderVideos
      security:
        - oauth2:
            - interact
      description: >-
        This method adds multiple videos to the specified folder. The
        authenticated user must be the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: A comma-separated list of video URIs to add.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/videos/273576296
      responses:
        '204':
          description: The videos were added.
        '400':
          description: 'Error code 2204: The input is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such folder or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/projects/{project_id}/videos/{video_id}:
    delete:
      tags:
        - Folders\Videos
      summary: Remove a video from a folder
      operationId: FoldersVideos_removeFromFolderVideo
      security:
        - oauth2:
            - delete
      description: >-
        This method removes a single video from the specified folder. Please
        note that this doesn't delete the video itself.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
        '400':
          description: 'Error code 2204: The input is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such video exists in the folder.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
        - Folders\Videos
      summary: Add a video to a folder
      operationId: FoldersVideos_addSingleFolderVideo
      security:
        - oauth2:
            - interact
      description: >-
        This method adds a single video to the specified folder. The
        authenticated user must be the owner of the folder.
      parameters:
        - description: The ID of the folder.
          in: path
          name: project_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
        '404':
          description: 'Error code 5000: No such user, folder, or video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/team/role:
    get:
      tags:
        - Teams\Members
      summary: Get information about the user's role on a team
      operationId: TeamsMembers_getUserTeamRole
      description: >-
        This method returns information about the authenticated user's role on
        the specified team owner's team.
      parameters:
        - description: The ID of the team owner.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: OK
  /users/{user_id}/team_users/{team_user_id}:
    get:
      tags:
        - Teams\Members
      summary: Get membership information about a team
      operationId: TeamsMembers_getTeamMembershipInformation
      description: >-
        This method returns information about the membership of the specified
        team. Usage is currently limited to the team join forms.
      parameters:
        - description: The ID of the team user.
          in: path
          name: team_user_id
          required: true
          schema:
            type: number
        - description: The ID of the team owner.
          in: path
          name: user_id
          required: true
          schema:
            type: number
      responses:
        '200':
          description: OK
  /users/{user_id}/uploads/{upload_id}:
    delete:
      tags:
        - Videos\Uploads
      summary: Complete a streaming upload
      operationId: VideosUploads_completeStreamingUpload
      security:
        - oauth2:
            - upload
      description: >-
        This method completes the specified streaming upload of the
        authenticated user.
      parameters:
        - description: The ID of the streaming upload.
          in: path
          name: upload_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The crypto signature of the completed upload.
          in: query
          name: signature
          required: true
          schema:
            type: string
            example: cd89a20adde7a608f3331e71c37bdfa087bacbf3
        - description: The ID of the uploaded file.
          in: query
          name: video_file_id
          required: true
          schema:
            type: number
            example: 1234
      responses:
        '201':
          description: The streaming upload has been completed.
        '400':
          description: 'Error code 2502: The format of the video file is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: |-
            * Error code 5006: No such video file exists.
            * Error code 5007: No such signature exists.
            * Error code 8400: The signature is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: >-
            Error code 4011: The upload server returned an HTTP status code
            other than 200.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Videos\Uploads
      summary: Get an upload attempt
      operationId: VideosUploads_getUploadAttempt
      security:
        - oauth2:
            - upload
      description: >-
        This method returns the specified upload attempt of the authenticated
        user. _This method has been deprecated. For information on our currently
        supported upload approaches, see our [Working with Video
        Uploads](https://developer.vimeo.com/api/upload/videos) guide._
      parameters:
        - description: The ID of the upload attempt.
          in: path
          name: upload_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      responses:
        '200':
          description: The upload attempt was returned.
          content:
            application/vnd.vimeo.uploadattempt+json:
              schema:
                $ref: '#/components/schemas/upload-attempt'
  /users/{user_id}/videos:
    delete:
      tags:
        - Videos\Essentials
      summary: Delete a user's videos
      operationId: delete_videos
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes one or more videos belonging to the specified user.
        The authenticated user must have permission to delete the videos.


        Specify the videos to delete in a comma-separated list by URI using the
        **uris** query parameter.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: A comma-separated list of the video URIs to delete.
          in: query
          name: uris
          required: true
          schema:
            type: string
            example: /videos/258684937,/videos/258684546
      responses:
        '204':
          description: The videos were deleted.
        '400':
          description: >-
            * Error code 2204: The input is invalid.

            * Error code 3200: The authenticated user can't delete one or more
            of the videos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such video exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Videos\Essentials
      summary: Get all the videos that the user has uploaded
      operationId: get_videos
      description: >-
        This method returns all the videos that the authenticated user has
        uploaded.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: >-
            The page that contains the video URI. The field is available only
            when not paired with **query**.
          in: query
          name: containing_uri
          required: false
          schema:
            type: string
            example: /videos/258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `app_only` - Return app-only videos.
             * `embeddable` - Return embeddable videos.
             * `featured` - Return featured videos.
             * `live` - Return only live videos.
             * `no_placeholder` - Return no placeholder videos.
             * `nolive` - Return no live videos.
             * `playable` - Return playable videos.
             * `screen_recorded` - Return screen-recorded videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - app_only
              - embeddable
              - featured
              - live
              - no_placeholder
              - nolive
              - playable
              - screen_recorded
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            Whether to filter the results by playable videos (`true`) or
            non-playable videos (`false`).
          in: query
          name: filter_playable
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            Whether to filter the results by screen-recorded videos (`true`) or
            non-screen-recorded videos (`false`).
          in: query
          name: filter_screen_recorded
          required: false
          schema:
            type: boolean
            example: true
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include at least one of these tags.
          in: query
          name: filter_tag
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to filter on. All results must
            include all of these tags.
          in: query
          name: filter_tag_all_of
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            A comma-separated list of tags to exclude. All results must exclude
            all of these tags.
          in: query
          name: filter_tag_exclude
          required: false
          schema:
            type: string
            example: abc,xyz
        - description: >-
            Whether to include content from the user's teams when searching.
            _This field is deprecated._
          in: query
          name: include_team_content
          required: false
          schema:
            type: string
            example: 'true'
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: >
            A comma-separated list of fields to query over. The default value is
            `title,description,chapters,tags`.


            Option descriptions:
             * `chapters` - Query by chapter titles that have been added to the video.
             * `description` - Query by the description of the video.
             * `tags` - Query by tag names that have been added to the video.
             * `title` - Query by the title of the video.
          in: query
          name: query_fields
          required: false
          schema:
            type: array
            example: title,description
            enum:
              - chapters
              - description
              - tags
              - title
            items:
              type: string
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically by title.
             * `date` - Sort the results by date.
             * `default` - Use the default sorting method.
             * `duration` - Sort the results by duration.
             * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn't had an interaction, the upload date is used instead.
             * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.
             * `modified_time` - Sort the results by last modification.
             * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
              - default
              - duration
              - last_user_action_event_date
              - likes
              - modified_time
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/GetVideosResponse'
        '304':
          description: >-
            The authenticated user hasn't uploaded any videos since the given
            **If-Modified-Since** header.
    post:
      tags:
        - Videos\Uploads
      summary: Upload a video
      operationId: upload_video
      security:
        - oauth2:
            - upload
      description: >-
        This method begins the video upload process for the authenticated user.
        For more information, see our [upload
        documentation](https://developer.vimeo.com/api/upload/videos).
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/vnd.vimeo.video+json:
            schema:
              $ref: '#/components/schemas/UploadVideoRequest'
      responses:
        '201':
          description: The upload procedure has begun.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: >-
            * Error code 2204: The request contains invalid body parameters.

            * Error code 2205: The body of the request isn't formatted properly.

            * Error code 2230: The upload type is invalid.

            * Error code 3116: The **type** payload parameter was supplied
            instead of **upload.approach**. Use **upload.approach** starting
            from API version 3.4.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8002: No user is associated with the access token.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 4101: The authenticated user's maximum disk space has
            been reached.

            * Error code 4102: The authenticated user's allotted weekly quota
            has been reached.

            * Error code 4104: The authenticated user's allotted daily quota has
            been reached.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: 'Error code 4003: There is a problem initiating the upload.'
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/videos/{video_id}:
    get:
      tags:
        - Videos\Essentials
      summary: Check if the user owns a video
      operationId: VideosEssentials_checkUserOwnership
      description: >-
        This method determines whether the authenticated user is the owner of
        the specified video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The authenticated user owns the video.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: The authenticated user doesn't own the video.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /users/{user_id}/videos/{video_id}/destinations:
    get:
      tags:
        - Live\Event destinations
      summary: Get all the destinations of a one-time live event
      operationId: LiveEventDestinations_getAllAvailableDestinations
      security:
        - oauth2:
            - public
      description: >-
        This method returns every destination of the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The event destinations were returned.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: >-
                  #/components/schemas/LiveEventDestinationsGetAllAvailableDestinations200Response
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destinations.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Live\Event destinations
      summary: Create a one-time live event destination
      operationId: LiveEventDestinations_createOneTimeLiveEventDestination
      security:
        - oauth2:
            - public
      description: >-
        This method creates a destination for the specified event. The
        authenticated user must be the owner of the event.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      requestBody:
        required: true
        content:
          application/vnd.vimeo.live.simulcast.destination+json:
            schema:
              $ref: >-
                #/components/schemas/LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1
      responses:
        '200':
          description: OK
        '400':
          description: >-
            * Error code 2204: Parameters are missing, or the body data is
            invalid.

            * Error code 13003: You can create only one LinkedIn destination per
            event.

            * Error code 13004: You can create only one YouTube destination per
            event.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the event
            destinations.
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/vnd.vimeo.live.simulcast.destination+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/videos/{video_id}/m3u8_playback:
    get:
      tags:
        - Videos\Live M3U8 playback
      summary: Get an M3U8 playback URL for a one-time live event
      operationId: VideosLiveM3U8Playback_getPlaybackUrlForEventStream
      security:
        - oauth2:
            - private
      description: >-
        This method returns an M3U8 playback URL for the specified event stream.
        You should use this endpoint only in conjunction with our recommended
        procedure for playing events via HLS. For more information, see our [HLS
        guide](https://developer.vimeo.com/api/live/playback).
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 12345
      responses:
        '200':
          description: The M3U8 playback URL was returned.
        '401':
          description: 'Error code 8000: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            Error code 3200: The authenticated user can't access the M3U8
            playback URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such event or user exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/watchlater:
    get:
      tags:
        - Watch Later Queue\Essentials
      summary: Get all the videos in the user's Watch Later queue
      operationId: WatchLaterQueueEssentials_listUserQueueVideos
      security:
        - oauth2:
            - private
      description: >-
        This method returns every video from the authenticated user's Watch
        Later queue.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `embeddable` - Return embeddable videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - embeddable
        - description: >-
            Whether to filter the results by embeddable videos (`true`) or
            non-embeddable videos (`false`). This parameter is required only
            when **filter** is `embeddable`.
          in: query
          name: filter_embeddable
          required: false
          schema:
            type: boolean
            example: true
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date added.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
      responses:
        '200':
          description: The videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/WatchLaterQueueEssentialsListUserQueueVideosResponse
        '304':
          description: >-
            The user hasn't added any videos to their Watch Later queue since
            the given `If-Modified-Since` header.
  /users/{user_id}/watchlater/{video_id}:
    delete:
      tags:
        - Watch Later Queue\Essentials
      summary: Remove a video from the user's Watch Later queue
      operationId: WatchLaterQueueEssentials_removeVideoFromQueue
      security:
        - oauth2:
            - interact
      description: >-
        This method removes the specified video from the authenticated user's
        Watch Later queue.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was removed.
    get:
      tags:
        - Watch Later Queue\Essentials
      summary: Check if the user has added a video to their Watch Later queue
      operationId: WatchLaterQueueEssentials_checkVideoInQueue
      security:
        - oauth2:
            - private
      description: >-
        This method checks the authenticated user's Watch Later queue for the
        specified video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video is in the user's Watch Later queue.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: The video isn't in the user's Watch Later queue.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Watch Later Queue\Essentials
      summary: Add a video to the user's Watch Later queue
      operationId: WatchLaterQueueEssentials_addVideoToQueue
      security:
        - oauth2:
            - interact
      description: >-
        This method adds the specified video to the authenticated user's Watch
        Later queue.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was added.
  /users/{user_id}/webinars:
    post:
      tags:
        - Webinar\Essentials
      summary: Create a webinar
      operationId: create_webinar
      security:
        - oauth2:
            - create
      description: This method creates a new webinar for the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
      requestBody:
        required: true
        content:
          application/vnd.vimeo.webinars+json:
            schema:
              $ref: '#/components/schemas/CreateWebinarRequest'
      responses:
        '200':
          description: The webinar was created.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3441: The authenticated user can''t create a webinar.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: >-
            Error code 9006: The authenticated user is rate-limited from
            creating the webinar.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
  /users/{user_id}/webinars/{webinar_id}:
    get:
      tags:
        - Webinar\Essentials
      summary: Get a specific webinar
      operationId: get_webinar
      description: >-
        This method returns a single webinar belonging to the authenticated
        user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '200':
          description: The webinar was returned.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    patch:
      tags:
        - Webinar\Essentials
      summary: Update a webinar
      operationId: update_webinar
      security:
        - oauth2:
            - edit
      description: This method updates a webinar belonging to the authenticated user.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/vnd.vimeo.webinars+json:
            schema:
              $ref: '#/components/schemas/UpdateWebinarRequest'
      responses:
        '200':
          description: The webinar was updated.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '400':
          description: |-
            * Error code 2204: A parameter is invalid.
            * Error code 3153: The status provided is invalid.
            * Error code 3154: The webinar hasn't started and can't be ended.
            * Error code 3155: The parameter update isn't allowed.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3441: The authenticated user can't live stream
            webinars.

            * Error code 3442: The authenticated user can't update the webinar.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /users/{user_id}/webinars/{webinar_id}/email_settings:
    get:
      tags:
        - Webinar\Emails
      summary: Get customization email data for a webinar
      operationId: WebinarEmails_getCustomizationData
      description: >-
        This method returns customized email data for the specified webinar. The
        authenticated user must have administrative access to the webinar.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '200':
          description: The webinar email data was returned.
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/webinar-email-settings'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    patch:
      tags:
        - Webinar\Emails
      summary: Customize the email preferences of a webinar
      operationId: WebinarEmails_customizePreferences
      security:
        - oauth2:
            - edit
      description: >-
        This method causes the authenticated user to customize the email
        preferences of the specified webinar. The user must have administrative
        access to the webinar.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/vnd.vimeo.webinar.email.settings+json:
            schema:
              $ref: '#/components/schemas/WebinarEmailsCustomizePreferencesRequest1'
      responses:
        '200':
          description: The email preferences were customized for the webinar.
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/webinar-email-settings'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinar.email.settings+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /users/{user_id}/webinars/{webinar_id}/registrants:
    get:
      tags:
        - Webinar\Registrations
      summary: Get user registration data associated with a webinar
      operationId: WebinarRegistrations_getUserRegistrationsByWebinarId
      security:
        - oauth2:
            - stats
            - private
      description: >-
        This method returns the list of user registrations that is associated
        with the specified webinar and was originally submitted through a
        webinar form.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `registration_date` - Sort the results by registration date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - registration_date
      responses:
        '200':
          description: The user registration data was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webinar-registrant'
        '400':
          description: 'Error code 2204: A parameter is invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3441: The authenticated user can''t perform this action.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    put:
      tags:
        - Webinar\Registrations
      summary: Capture the user registration list associated with a webinar
      operationId: WebinarRegistrations_captureUserRegistrationList
      description: >-
        This method captures the user registration list associated with the
        specified webinar. A maximum of 50 registrants are permitted as part of
        the request.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/WebinarRegistrationsCaptureUserRegistrationListRequest1
      responses:
        '200':
          description: The webinar data was captured.
        '400':
          description: >-
            * Error code 2204: A parameter is invalid.

            * Error code 3152: The registered email is blocked from viewing this
            webinar.

            * Error code 3166: Too many registrants were provided. The maximum
            number is 50.

            * Error code 3167: The user has exceeded the quota of registrants
            allowed for the webinar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /users/{user_id}/webinars/{webinar_id}/registrants/{registrant_id}:
    delete:
      tags:
        - Webinar\Registrations
      summary: Delete a registrant record associated with a webinar
      operationId: WebinarRegistrations_deleteRegistrantRecord
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified registrant associated with a webinar
        and originally submitted through a webinar form.
      parameters:
        - description: The ID of the webinar registrant.
          in: path
          name: registrant_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '204':
          description: The webinar registrant was deleted.
        '400':
          description: |-
            * Error code 3160: The webinar has started or ended.
            * Error code 3161: A CSV upload is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3200: The authenticated user can't delete a registrant
            from this webinar.

            * Error code 3442: The authenticated user can't update the webinar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar or registrant exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '429':
          description: >-
            Error code 9006: The authenticated user is rate-limited from
            deleting the registrant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
    patch:
      tags:
        - Webinar\Registrations
      summary: Update user registration data associated with a webinar
      operationId: WebinarRegistrations_updateUserRegistrationData
      security:
        - oauth2:
            - edit
      description: >-
        This method updates the specified user registration data associated with
        a webinar and originally submitted through a webinar form.
      parameters:
        - description: The ID of the webinar registrant.
          in: path
          name: registrant_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/WebinarRegistrationsUpdateUserRegistrationDataRequest1
      responses:
        '200':
          description: The webinar registrant data was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webinar-registrant'
        '400':
          description: |-
            * Error code 2204: A parameter is invalid.
            * Error code 3151: The webinar has ended.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3441: The authenticated user can''t update the webinar.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: 'Error code 5000: No such webinar or registrant exists.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
  /videos:
    get:
      tags:
        - Videos\Essentials
      summary: Search for videos
      operationId: search_videos
      description: This method returns all the videos that match custom search criteria.
      parameters:
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: >
            The attribute by which to filter the results. `CC` and related
            filters target videos with the corresponding Creative Commons
            licenses. For more information, see our [Creative
            Commons](https://vimeo.com/creativecommons) page.


            Option descriptions:
             * `CC` - Return videos under any Creative Commons license.
             * `CC-BY` - Return CC BY, or attribution-only, videos.
             * `CC-BY-NC` - Return CC BY-NC, or Attribution-NonCommercial, videos.
             * `CC-BY-NC-ND` - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.
             * `CC-BY-NC-SA` - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.
             * `CC-BY-ND` - Return CC BY-ND, or Attribution-NoDerivs, videos.
             * `CC-BY-SA` - Return CC BY-SA, or Attribution-ShareAlike, videos.
             * `CC0` - Return CC0, or public domain, videos.
             * `categories` - Filter by categories.
             * `duration` - Filter by duration.
             * `in-progress` - Return in-progress videos.
             * `minimum_likes` - Filter by minimum likes.
             * `trending` - Return trending videos.
             * `upload_date` - Filter by upload date.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - CC
              - CC-BY
              - CC-BY-NC
              - CC-BY-NC-ND
              - CC-BY-NC-SA
              - CC-BY-ND
              - CC-BY-SA
              - CC0
              - categories
              - duration
              - in-progress
              - minimum_likes
              - trending
              - upload_date
        - description: >-
            A comma-separated list of video URLs to find. Querying, filtering,
            and sorting aren't supported when using this field.
          in: query
          name: links
          required: false
          schema:
            type: string
            example: https://vimeo.com/122375452,https://vimeo.com/273576296
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query.
          in: query
          name: query
          required: true
          schema:
            type: string
            example: staff picks
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `comments` - Sort the results by number of comments.
             * `date` - Sort the results by date.
             * `duration` - Sort the results by duration.
             * `likes` - Sort the results by number of likes.
             * `plays` - Sort the results by number of plays.
             * `relevant` - Sort the results by relevance.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - comments
              - date
              - duration
              - likes
              - plays
              - relevant
        - description: >-
            A comma-separated list of video URIs to find. Querying, filtering,
            and sorting aren't supported when using this field.
          in: query
          name: uris
          required: false
          schema:
            type: string
            example: /videos/122375452,/videos/273576296
      responses:
        '200':
          description: The search results were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/SearchVideosResponse'
        '400':
          description: >-
            * Error code 2101: Either the **uris** or **links** parameter has
            filtering or sorting arguments.

            * Error code 2204: A problem occurred with the batch request.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: |-
            * Search is disabled.
            * Error code 7300: An internal search error occurred.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}:
    delete:
      tags:
        - Videos\Essentials
      summary: Delete a video
      operationId: delete_video
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified video. The authenticated user must be
        the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video was deleted.
        '403':
          description: The authenticated user can't delete the video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Essentials
      summary: Get a specific video
      operationId: get_video
      description: This method returns a single video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video was returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Essentials
      summary: Edit a video
      operationId: edit_video
      security:
        - oauth2:
            - edit
      description: This method edits the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.video+json:
            schema:
              $ref: '#/components/schemas/EditVideoRequest'
      responses:
        '200':
          description: The video was edited.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/video'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: >-
            * The authenticated user doesn't own the video.

            * The **privacy** field is `disable`, and the authenticated user
            can't set extra embed options.

            * The **privacy** field is `contacts`, and the authenticated user
            can't follow creators.

            * The authenticated user has an opted-out Pro account, and
            **privacy.view** is `users`, `password`, `nobody`, or `public`.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/albums:
    get:
      tags:
        - Videos\Showcases
      summary: Get all the showcases that contain a video
      operationId: VideosShowcases_getAllContShowcases
      description: This method returns all the showcases that contain the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The showcases were returned.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosShowcasesGetAllContShowcasesResponse
        '404':
          description: 'Error code 3433: No such video exists.'
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/error'
    patch:
      tags:
        - Videos\Showcases
      summary: Add or remove a video from a list of showcases
      operationId: VideosShowcases_addToMultipleShowcases
      description: >-
        This method adds or removes the specified video to or from multiple
        showcases.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.album+json:
            schema:
              $ref: >-
                #/components/schemas/VideosShowcasesAddToMultipleShowcasesRequest
      responses:
        '200':
          description: The videos were added or removed.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosShowcasesAddToMultipleShowcasesResponse
        '404':
          description: 'Error code 3433: No such video exists.'
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/animated_thumbsets:
    get:
      tags:
        - Videos\Animated thumbnails
      summary: Get all the animated thumbnails of a video
      operationId: VideosAnimatedThumbnails_getAllSets
      description: >-
        This method returns all the sets of animated thumbnails associated with
        the specified video. The authenticated user must be the owner of the
        video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The sets of animated thumbnails were returned.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosAnimatedThumbnailsGetAllSetsResponse
        '404':
          description: |-
            * Error code 5001: The authenticated user doesn't own the video.
            * Error code 5017: No such set of animated thumbnails exists.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Videos\Animated thumbnails
      summary: Create a set of animated thumbnails for a video
      operationId: VideosAnimatedThumbnails_createSet
      security:
        - oauth2:
            - create
      description: >-
        This method creates a set of animated thumbnails for the specified
        video. Please note that you can't create more than four sets of animated
        thumbnails for the same video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.animatedthumbnails+json:
            schema:
              $ref: '#/components/schemas/VideosAnimatedThumbnailsCreateSetRequest'
      responses:
        '200':
          description: The set of animated thumbnails was created.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/animated-thumbset'
        '400':
          description: >-
            * Error code 2204: A parameter is invalid.

            * Error code 3130: The video can't have more than four sets of
            animated thumbnails.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            The user can't create a set of animated thumbnails from the
            specified section of the video.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '429':
          description: >-
            The authenticated user is rate-limited from creating new animated
            thumbnails.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/animated_thumbsets/{picture_id}:
    delete:
      tags:
        - Videos\Animated thumbnails
      summary: Delete a set of animated thumbnails for a video
      operationId: VideosAnimatedThumbnails_deleteSet
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes a set of animated thumbnails for the specified
        video.
      parameters:
        - description: The UUID of the set of animated thumbnails.
          in: path
          name: picture_id
          required: true
          schema:
            type: string
            example: 23f34-b34h4-34hb3
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The set of animated thumbnails was deleted.
        '404':
          description: |-
            * Error code 5001: The authenticated user doesn't own the video.
            * Error code 5017: No such set of animated thumbnails exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      tags:
        - Videos\Animated thumbnails
      summary: Get a specific set of animated thumbnails
      operationId: VideosAnimatedThumbnails_specificSetGet
      description: >-
        This method returns a particular set of animated thumbnails associated
        with the specified video. The authenticated user must be the owner of
        the video.
      parameters:
        - description: The UUID of the set of animated thumbnails.
          in: path
          name: picture_id
          required: true
          schema:
            type: string
            example: 23few-h4hw4t-45j5
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The set of animated thumbnails was returned.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/animated-thumbset'
        '404':
          description: |-
            * Error code 5001: The authenticated user doesn't own the video.
            * Error code 5017: No such set of animated thumbnails exists.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/animated_thumbsets/{picture_id}/status:
    get:
      tags:
        - Videos\Animated thumbnails
      summary: Get the status of a set of animated thumbnails
      operationId: VideosAnimatedThumbnails_getStatusOfSet
      description: >-
        This method returns the status of a particular set of animated
        thumbnails associated with the specified video. The status indicates
        whether the thumbnails are ready to use. The authenticated user must be
        the owner of the video.
      parameters:
        - description: The UUID of the set of animated thumbnails.
          in: path
          name: picture_id
          required: true
          schema:
            type: string
            example: 23few-h4hw4t-45j5
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The status of the set of animated thumbnails was returned.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/animated-thumbset'
        '404':
          description: |-
            * Error code 5001: The authenticated user doesn't own the video.
            * Error code 5017: No such set of animated thumbnails exists.
          content:
            application/vnd.vimeo.animatedthumbnails+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/available_albums:
    get:
      tags:
        - Showcases\Showcase videos
      summary: >-
        Get all the showcases to which the user can add or remove a specific
        video
      operationId: ShowcasesShowcaseVideos_listAvailableShowcases
      description: >-
        This endpoint returns every showcase to which the authenticated user can
        add or remove the specified video. The user must be the owner of the
        showcase.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The showcases were returned.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: >-
                  #/components/schemas/ShowcasesShowcaseVideosListAvailableShowcasesResponse
        '403':
          description: >-
            Error code 3433: The authenticated user can't add the video to or
            remove the video from any showcases.
          content:
            application/vnd.vimeo.album+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/available_channels:
    get:
      tags:
        - Channels\Videos
      summary: >-
        Get all the channels to which the user can add or remove a specific
        video
      operationId: ChannelsVideos_getAccessibleChannels
      description: >-
        This method returns every channel to which the authenticated user can
        add or remove the specified video. The authenticated user must be a
        moderator of the channel.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The channels were returned.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: >-
                  #/components/schemas/ChannelsVideosGetAccessibleChannelsResponse
        '403':
          description: >-
            The authenticated user can't add or remove this video from a
            channel.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: The authenticated user isn't a moderator of the channel.
          content:
            application/vnd.vimeo.channel+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/categories:
    get:
      tags:
        - Categories\Videos
      summary: Get all the categories to which a video belongs
      operationId: CategoriesVideos_getAllVideoCategories
      description: This method returns every category that contains the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The categories were returned.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: >-
                  #/components/schemas/CategoriesVideosGetAllVideoCategoriesResponse
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Categories\Videos
      summary: Suggest categories for a video
      operationId: CategoriesVideos_setVideoCategories
      security:
        - oauth2:
            - edit
      description: >-
        This method sets multiple categories and subcategories for the specified
        video. Include the categories as a JSON block in the body of the request
        using the **category** field, like this: `[{ "category": "Tech" }, {
        "category": "Music" }]`. The authenticated user must have edit access to
        the video. For more information on batch requests like this one, see
        [Using Common Formats and
        Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.category+json:
            schema:
              $ref: '#/components/schemas/CategoriesVideosSetVideoCategoriesRequest'
      responses:
        '201':
          description: The categories were suggested.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/category'
        '403':
          description: The authenticated user doesn't own this video.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such video exists, or no such category exists.
          content:
            application/vnd.vimeo.category+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/chapters:
    get:
      tags:
        - Videos\Chapters
      summary: Get all the chapters of a video
      operationId: get_chapters
      description: This method returns every chapter of the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The chapters were returned.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/GetChaptersResponse'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Videos\Chapters
      summary: Add a chapter to a video
      operationId: create_chapter
      security:
        - oauth2:
            - upload
      description: This method adds a chapter to the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video.chapter+json:
            schema:
              $ref: '#/components/schemas/CreateChapterRequest'
      responses:
        '201':
          description: The chapter was added.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/chapter'
        '403':
          description: |-
            * The authenticated user can't add the chapter.
            * Error code 2204: The request contains errors.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/chapters/temporary/pictures:
    post:
      tags:
        - Videos\Chapters
      summary: >-
        Generate an upload link or timecode-based thumbnail for an unsaved video
        chapter
      operationId: VideosChapters_generateChapterThumbnail
      security:
        - oauth2:
            - public
      description: >-
        This method generates either an upload link or a timecode-based
        thumbnail for an unsaved video chapter. To generate the upload link,
        which enables the authenticated user to upload a chapter thumbnail image
        manually, leave the body of the request empty. To generate an automatic
        timecode-based thumbnail, specify the **timecode** parameter in the body
        of the request.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/VideosChaptersGenerateChapterThumbnailRequest
      responses:
        '200':
          description: The upload link or chapter thumbnail was generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: |-
            * The authenticated user can't perform this action.
            * Error code 2204: The request contains errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/chapters/temporary/pictures/{uid}:
    get:
      tags:
        - Videos\Chapters
      summary: Get a single chapter thumbnail associated with an unsaved video chapter
      operationId: VideosChapters_getSingleChapterThumbnail
      description: >-
        This method returns the specified thumbnail associated with an unsaved
        video chapter.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The chapter thumbnail was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/chapters/{chapter_id}:
    delete:
      tags:
        - Videos\Chapters
      summary: Delete a chapter
      operationId: delete_chapter
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified chapter from a video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The chapter was deleted.
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Chapters
      summary: Get a specific chapter
      operationId: get_chapter
      description: This method returns a single chapter of the specified video.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The chapter was returned.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/chapter'
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Chapters
      summary: Edit a chapter
      operationId: edit_chapter
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified chapter of a video. The authenticated
        user must be the owner of the video.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video.chapter+json:
            schema:
              $ref: '#/components/schemas/EditChapterRequest'
      responses:
        '200':
          description: The chapter was edited.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/chapter'
        '403':
          description: 'Error code 2204: There are errors in the request.'
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/vnd.vimeo.video.chapter+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/chapters/{chapter_id}/pictures:
    get:
      tags:
        - Videos\Chapters
      summary: Get all the thumbnails associated with a saved video chapter
      operationId: VideosChapters_getChapterThumbnails
      security:
        - oauth2:
            - public
      description: >-
        This method returns every thumbnail associated with the specified saved
        video chapter.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The chapter thumbnails were returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: |-
            * The authenticated user can't perform this action.
            * Error code 2204: The request contains errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Videos\Chapters
      summary: >-
        Generate an upload link or timecode-based thumbnail for a saved video
        chapter
      operationId: VideosChapters_generateChapterThumbnailOrUploadLink
      security:
        - oauth2:
            - create
      description: >-
        This method generates either an upload link or a timecode-based
        thumbnail for the specified saved video chapter. To generate the upload
        link, which enables the authenticated user to upload a chapter thumbnail
        image manually, leave the body of the request empty. To generate an
        automatic timecode-based thumbnail, include the **timecode** parameter
        in the body of the request.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest
      responses:
        '200':
          description: The chapter thumbnail or upload link was generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: |-
            * The authenticated user can't perform this action.
            * Error code 2204: The request contains errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/chapters/{chapter_id}/pictures/{uid}:
    delete:
      tags:
        - Videos\Chapters
      summary: Delete a chapter thumbnail
      operationId: VideosChapters_deleteChapterThumbnail
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified chapter thumbnail from a video.


        The authenticated user must be the owner of the video that the chapter
        belongs to.

        This method deletes both timecode-generated and custom-uploaded
        thumbnails.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The unique ID of the thumbnail.
          in: path
          name: uid
          required: true
          schema:
            type: string
            example: 24kjh4h4g38175db9f59fae9f7g9ekhg
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The chapter thumbnail was deleted.
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Chapters
      summary: Get a single chapter thumbnail associated with a saved video chapter
      operationId: VideosChapters_getSingleChapterThumbnail
      description: >-
        This method returns the specified thumbnail associated with a saved
        video chapter.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The chapter thumbnail was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Chapters
      summary: Set a chapter thumbnail as active
      operationId: VideosChapters_setChapterThumbnailActive
      security:
        - oauth2:
            - edit
      description: This method sets the specified chapter thumbnail for a video as active.
      parameters:
        - description: The ID of the chapter.
          in: path
          name: chapter_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/VideosChaptersSetChapterThumbnailActiveRequest
      responses:
        '200':
          description: The chapter thumbnail was set as active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/picture'
        '404':
          description: >-
            * No such video or chapter exists.

            * Error code 5020: The specified chapter doesn't exist.

            * Error code 5021: The specified chapter belongs to a different
            video.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/comments:
    get:
      tags:
        - Videos\Video comments
      summary: Get all the video comments on a video
      operationId: get_comments
      description: This method returns every video comment on the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The comments were returned.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
    post:
      tags:
        - Videos\Video comments
      summary: Add a video comment to a video
      operationId: create_comment
      security:
        - oauth2:
            - interact
      description: This method adds a video comment to the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.comment+json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: The comment was added.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: 'Error code 2207: The comment text is missing.'
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3301: The comment was flagged as spam.
            * Error code 3411: The authenticated user is unverified.
            * Error code 3412: The authenticated user can't comment.
            * Error code 3413: Comments are disabled for this video.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/comments/{comment_id}:
    delete:
      tags:
        - Videos\Video comments
      summary: Delete a video comment
      operationId: delete_comment
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified video comment. The authenticated user
        must be the owner of the comment.
      parameters:
        - description: The ID of the comment.
          in: path
          name: comment_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The comment was deleted.
        '403':
          description: 'Error code 3415: The authenticated user can''t delete this comment.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: |-
            * No such video or comment exists.
            * Error code 5000: The comment wasn't deleted and still exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Video comments
      summary: Get a specific video comment
      operationId: get_comment
      description: This method returns the specified video comment.
      parameters:
        - description: The ID of the comment.
          in: path
          name: comment_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The comment was returned.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/comment'
        '404':
          description: No such video or comment exists.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Video comments
      summary: Edit a video comment
      operationId: edit_comment
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified video comment. The authenticated user
        must be the owner of the comment.
      parameters:
        - description: The ID of the comment.
          in: path
          name: comment_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.comment+json:
            schema:
              $ref: '#/components/schemas/EditCommentRequest'
      responses:
        '200':
          description: The comment was edited.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: 'Error code 2207: The comment text is missing.'
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3301: The comment was flagged as spam.
            * Error code 3411: The authenticated user is unverified.
            * Error code 3412: The authenticated user can't post comments.
            * Error code 3414: The authenticated user can't edit this comment.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/comments/{comment_id}/replies:
    get:
      tags:
        - Videos\Video comments
      summary: Get all the replies to a video comment
      operationId: VideosVideoComments_getAllReplies
      description: This method returns every reply to the specified video comment.
      parameters:
        - description: The ID of the comment.
          in: path
          name: comment_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The replies were returned.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosVideoCommentsGetAllReplies200Response
        '404':
          description: No such video or comment exists.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Videos\Video comments
      summary: Add a reply to a video comment
      operationId: VideosVideoComments_createReply
      security:
        - oauth2:
            - interact
      description: This method adds a reply to the specified video comment.
      parameters:
        - description: The ID of the comment.
          in: path
          name: comment_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.comment+json:
            schema:
              $ref: '#/components/schemas/VideosVideoCommentsCreateReplyRequest'
      responses:
        '201':
          description: The reply was added.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: 'Error code 2207: The comment text is missing.'
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: |-
            * Error code 3301: The comment was flagged as spam.
            * Error code 3411: The authenticated user is unverified.
            * Error code 3412: The authenticated user can't comment.
            * Error code 3413: Comments are disabled on this video.
          content:
            application/vnd.vimeo.comment+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/credits:
    get:
      tags:
        - Videos\Credits
      summary: Get all the credited users in a video
      operationId: VideosCredits_getAllCreditedUsersInVideo
      description: This method returns every credited user in a video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The credited users were returned.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosCreditsGetAllCreditedUsersInVideo200Response
    post:
      tags:
        - Videos\Credits
      summary: Credit a user in a video
      operationId: VideosCredits_addUserCredit
      description: This method adds a user credit to the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.credit+json:
            schema:
              $ref: '#/components/schemas/VideosCreditsAddUserCreditRequest'
      responses:
        '201':
          description: The credit was added.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/credit'
        '400':
          description: >-
            * A parameter is invalid.

            * The authenticated user has an unverified email address.

            * There is a user block between the video owner and the person
            receiving credit.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The authenticated user doesn't own the video.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/credits/available_users:
    get:
      tags:
        - Videos\Credits
      summary: Get users who can be credited on a video
      operationId: available_users
      description: >-
        This method returns the users who can be credited on the specified
        video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: The search query to use to filter the results.
          in: query
          name: query
          required: false
          schema:
            type: string
            example: Stop motion
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by date followed.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The users who can be credited were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/AvailableUsersResponse'
  /videos/{video_id}/credits/{credit_id}:
    delete:
      tags:
        - Videos\Credits
      summary: Delete the credit for a user in a video
      operationId: VideosCredits_deleteUserCredit
      security:
        - oauth2:
            - edit
      description: >-
        This method deletes the specified user credit from a video. The
        authenticated user must be the creator of the credit or the credited
        user.
      parameters:
        - description: The ID of the credit.
          in: path
          name: credit_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The credit was deleted.
        '400':
          description: >-
            The authenticated user isn't the creator of the credit or the
            credited user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Credits
      summary: Get a specific credited user in a video
      operationId: VideosCredits_getSpecificCreditedUser
      description: This method returns a single credited user in a video.
      parameters:
        - description: The ID of the credit.
          in: path
          name: credit_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The credit was returned.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/credit'
        '404':
          description: No such video or credit exists.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Credits
      summary: Edit the credit for a user in a video
      operationId: VideosCredits_editUserCreditInVideo
      security:
        - oauth2:
            - edit
      description: This method edits the specified user credit in a video.
      parameters:
        - description: The ID of the credit.
          in: path
          name: credit_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.credit+json:
            schema:
              $ref: '#/components/schemas/VideosCreditsEditUserCreditInVideoRequest'
      responses:
        '200':
          description: The credit was edited.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/credit'
        '400':
          description: A parameter is invalid.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such video or credit exists.
          content:
            application/vnd.vimeo.credit+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/fragments:
    delete:
      tags:
        - Videos\Fragments
      summary: Delete a video's fragments
      operationId: delete_fragments
      description: This method deletes all fragments for the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 699033361
      responses:
        '204':
          description: The fragments were deleted.
    get:
      tags:
        - Videos\Fragments
      summary: Get all the fragments for a video
      operationId: get_fragments
      description: >-
        This method returns all of the fragments associated with the specified
        video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 699033361
      responses:
        '200':
          description: The fragments were returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fragments'
    put:
      tags:
        - Videos\Fragments
      summary: Update a video's fragments
      operationId: put_fragments
      description: This method updates the specified video with new fragments.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 699033361
      responses:
        '204':
          description: The fragments were updated.
  /videos/{video_id}/likes:
    get:
      tags:
        - Likes\Essentials
      summary: Get all the users who have liked a video
      operationId: LikesEssentials_getUserLikes
      description: This method returns every user who has liked the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The sort direction of the results.

            Option descriptions:
             * `asc` - Sort the results in ascending order.
             * `desc` - Sort the results in descending order.
          in: query
          name: direction
          required: false
          schema:
            type: string
            example: asc
            enum:
              - asc
              - desc
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
        - description: |
            The way to sort the results.

            Option descriptions:
             * `alphabetical` - Sort the results alphabetically.
             * `date` - Sort the results by join date.
          in: query
          name: sort
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - date
      responses:
        '200':
          description: The users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/LikesEssentialsGetUserLikesResponse'
  /videos/{video_id}/pictures:
    get:
      tags:
        - Videos\Thumbnails
      summary: Get all the thumbnails of a video
      operationId: VideosThumbnails_getAllByVideoId
      description: >-
        This method returns all thumbnail images of the specified video. The
        authenticated user must have team permissions for the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The thumbnails were returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosThumbnailsGetAllByVideoId200Response
    post:
      tags:
        - Videos\Thumbnails
      summary: Add a video thumbnail
      operationId: VideosThumbnails_addThumbnailToVideo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a thumbnail image to the specified video. The
        authenticated user must have team permissions for the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/VideosThumbnailsAddThumbnailToVideoRequest1'
      responses:
        '201':
          description: The thumbnail was created.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /videos/{video_id}/pictures/{picture_id}:
    delete:
      tags:
        - Videos\Thumbnails
      summary: Delete a video thumbnail
      operationId: VideosThumbnails_deleteThumbnailFromVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method deletes the specified thumbnail image from a video. The
        authenticated user must have team permissions for the video.
      parameters:
        - description: The ID of the thumbnail.
          in: path
          name: picture_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The thumbnail was deleted.
    get:
      tags:
        - Videos\Thumbnails
      summary: Get a specific video thumbnail
      operationId: VideosThumbnails_getThumbnailFromVideo
      description: >-
        This method returns a single thumbnail image from the specified video.
        The authenticated user must have team permissions for the video.
      parameters:
        - description: The ID of the thumbnail.
          in: path
          name: picture_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The thumbnail was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
    patch:
      tags:
        - Videos\Thumbnails
      summary: Edit a video thumbnail
      operationId: VideosThumbnails_editThumbnailImage
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified video thumbnail image. The authenticated
        user must be the owner of the thumbnail.
      parameters:
        - description: The ID of the thumbnail.
          in: path
          name: picture_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.picture+json:
            schema:
              $ref: '#/components/schemas/VideosThumbnailsEditThumbnailImageRequest'
      responses:
        '200':
          description: The thumbnail was edited.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
  /videos/{video_id}/presets/{preset_id}:
    delete:
      tags:
        - Embed Presets\Videos
      summary: Remove an embed preset from a video
      operationId: EmbedPresetsVideos_removePresetFromVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method removes the specified embed preset from a video. The
        authenticated user must either be the owner of the video or a team user
        with the contributor or admin role.
      parameters:
        - description: The ID of the embed preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The embed preset was removed.
        '404':
          description: No such video or embed preset exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Embed Presets\Videos
      summary: Check if an embed preset has been added to a video
      operationId: EmbedPresetsVideos_checkIfPresetAddedToVideo
      description: This method determines whether a video has the specified embed preset.
      parameters:
        - description: The ID of the embed preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The embed preset has been added to the video.
        '404':
          description: No such video or embed preset exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Embed Presets\Videos
      summary: Add an embed preset to a video
      operationId: EmbedPresetsVideos_addPresetToVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method adds an embed preset to the specified video. The
        authenticated user must either be the owner of the video or a team user
        with the contributor or admin role.
      parameters:
        - description: The ID of the embed preset.
          in: path
          name: preset_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The embed preset was added to the video.
  /videos/{video_id}/privacy/domains:
    get:
      tags:
        - Videos\Embed privacy
      summary: Get all the domains on a video's whitelist
      operationId: VideosEmbedPrivacy_listWhitelistDomains
      description: This method returns every domain on the specified video's whitelist.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The domains were returned.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosEmbedPrivacyListWhitelistDomainsResponse
        '403':
          description: There are no domains on which the video can be embedded.
          content:
            application/vnd.vimeo.domain+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/privacy/domains/{domain}:
    delete:
      tags:
        - Videos\Embed privacy
      summary: Remove a domain from a video's whitelist
      operationId: VideosEmbedPrivacy_removeDomainFromWhitelist
      security:
        - oauth2:
            - edit
      description: This method removes the specified domain from a video's whitelist.
      parameters:
        - description: The domain name.
          in: path
          name: domain
          required: true
          schema:
            type: string
            example: example.com
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The domain was removed.
        '403':
          description: The video's embed privacy setting isn't `whitelist`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such domain exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Videos\Embed privacy
      summary: Add a domain to a video's whitelist
      operationId: VideosEmbedPrivacy_addDomainToWhitelist
      security:
        - oauth2:
            - edit
      description: This method adds the specified domain to a video's whitelist.
      parameters:
        - description: The domain name.
          in: path
          name: domain
          required: true
          schema:
            type: string
            example: example.com
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video is embeddable on the domain.
        '403':
          description: The video doesn't have a user-defined access list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/privacy/users:
    get:
      tags:
        - Videos\Unlisted videos
      summary: Get the users who can access an unlisted video
      operationId: VideosUnlistedVideos_listAccessibleUsers
      description: >-
        This method returns every user who has access to the specified unlisted
        video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The users were returned.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosUnlistedVideosListAccessibleUsers200Response
        '400':
          description: No users can access this unlisted video.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Videos\Unlisted videos
      summary: Permit a list of users to access an unlisted video
      operationId: VideosUnlistedVideos_grantAccessToUsers
      security:
        - oauth2:
            - edit
      description: >-
        This method gives multiple users permission to access the specified
        unlisted video. The authenticated user must be the owner of the video.
        The body of the request should follow our [batch request
        format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests):
        each object must contain a single **uri** field whose value is the URI
        of the user who can access the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The users have been granted access to the unlisted video.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosUnlistedVideosGrantAccessToUsers200Response
  /videos/{video_id}/privacy/users/{user_id}:
    delete:
      tags:
        - Videos\Unlisted videos
      summary: Restrict a user from viewing an unlisted video
      operationId: VideosUnlistedVideos_restrictUserAccess
      security:
        - oauth2:
            - edit
      description: >-
        This method prevents a user from being able to view the specified
        unlisted video. The authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The user has been restricted from accessing the unlisted video.
        '403':
          description: The video isn't set to a user-defined access list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such user exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Videos\Unlisted videos
      summary: Permit a single user to access an unlisted video
      operationId: VideosUnlistedVideos_grantUserAccess
      security:
        - oauth2:
            - edit
      description: >-
        This method gives a single user permission to access the specified
        unlisted video. The authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: number
            example: 152184
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The user has been granted access to the unlisted video.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/user'
        '204':
          description: The user can already access this unlisted video.
        '403':
          description: The video doesn't have a user-defined access list.
          content:
            application/vnd.vimeo.user+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/sessions/status:
    get:
      tags:
        - Live\Event sessions
      summary: Get the ingest status of a one-time live event
      operationId: LiveEventSessions_getIngestStatus
      description: This method returns the ingest status of the specified event.
      parameters:
        - description: The ID of the event.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The ingest status was returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/live-event-session-status'
  /videos/{video_id}/tags:
    get:
      tags:
        - Videos\Tags
      summary: Get all the tags of a video
      operationId: VideosTags_getVideoTags
      description: >-
        This method returns all the tags associated with the specified video.
        The authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The tags were returned.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/VideosTagsGetVideoTagsResponse'
    put:
      tags:
        - Videos\Tags
      summary: Add a list of tags to a video
      operationId: VideosTags_addMultiple
      security:
        - oauth2:
            - edit
      description: >-
        This method adds multiple tags to the specified video. Include the tags
        as a JSON array  as the body of the request with the  **name** field,
        like this: `[{ "name": "funny"}, {"name": "concert" }]`. The
        authenticated user must have edit access to the video. For more
        information on batch requests like this one, see [Using Common Formats
        and
        Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The tags were added.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/VideosTagsAddMultipleResponse'
        '400':
          description: |-
            * The request body wasn't supplied.
            * A parameter is invalid.
            * The request body doesn't contain a JSON-encoded list of tags.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: |-
            * The authenticated user can't add tags to this video.
            * The total number of tags can't exceed 20.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/tags/{word}:
    delete:
      tags:
        - Videos\Tags
      summary: Remove a tag from a video
      operationId: VideosTags_removeTag
      security:
        - oauth2:
            - edit
      description: >-
        This method removes the specified tag from a video. The authenticated
        user must have edit access to the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The tag word.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '204':
          description: The tag was removed.
        '400':
          description: |-
            * A parameter is invalid.
            * The tag is invalid.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Tags
      summary: Check if a tag has been added to a video
      operationId: VideosTags_checkTagVideo
      description: >-
        This method determines whether the specified tag has been added to a
        video. The authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The tag word.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '200':
          description: The tag has been added to the video.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/tag'
        '400':
          description: |-
            * A parameter is invalid.
            * The tag is invalid.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: The video has no such tag.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    put:
      tags:
        - Videos\Tags
      summary: Add a specific tag to a video
      operationId: VideosTags_addTagToVideo
      security:
        - oauth2:
            - edit
      description: >-
        This method adds a single tag to the specified video. The authenticated
        user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The tag word.
          in: path
          name: word
          required: true
          schema:
            type: string
            example: awesome
      responses:
        '200':
          description: The tag was added.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/tag'
        '400':
          description: |-
            * The tag is invalid.
            * An unsupported parameter was supplied.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '403':
          description: The total number of tags can't exceed 20.
          content:
            application/vnd.vimeo.tag+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/texttracks:
    get:
      tags:
        - Videos\Text tracks
      summary: Get all the text tracks of a video
      operationId: VideosTextTracks_getAllVideoTracks
      description: >-
        This method returns every text track of the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The text tracks were returned.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/VideosTextTracksGetAllVideoTracksResponse'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Videos\Text tracks
      summary: Add a text track to a video
      operationId: VideosTextTracks_addTextTrack
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a text track to the specified video. For more
        information, see [Working with Text Track
        Uploads](https://developer.vimeo.com/api/upload/texttracks).
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.video.texttrack+json:
            schema:
              $ref: '#/components/schemas/VideosTextTracksAddTextTrackRequest'
      responses:
        '201':
          description: The text track was added.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/text-track'
        '403':
          description: |-
            * The authenticated user can't add the text track.
            * Error code 2204: The request contains errors.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/texttracks/{texttrack_id}:
    delete:
      tags:
        - Videos\Text tracks
      summary: Delete a text track
      operationId: VideosTextTracks_deleteTextTrack
      security:
        - oauth2:
            - delete
      description: >-
        This method deletes the specified text track from a video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the text track.
          in: path
          name: texttrack_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The text track was deleted.
        '403':
          description: >-
            * Error code 3430: The authenticated user doesn't have permission to
            access the text track.

            * Error code 3431: This text track is disabled.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: >-
            * No such video or text track exists.

            * The authenticated user can't delete the text track.

            * Error code 5014: The specified text track doesn't exist.

            * Error code 5015: The specified text track belongs to a different
            video.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Text tracks
      summary: Get a specific text track
      operationId: VideosTextTracks_getSpecificTextTrack
      description: >-
        This method returns a single text track of the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the text track.
          in: path
          name: texttrack_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The text track was returned.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/text-track'
        '403':
          description: >-
            * Error code 3430: The authenticated user doesn't have permission to
            access the text track.

            * Error code 3431: This text track is disabled.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: >-
            * No such video or text track exists.

            * Error code 5014: The specified text track doesn't exist.

            * Error code 5015: The specified text track belongs to a different
            video.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Text tracks
      summary: Edit a text track
      operationId: VideosTextTracks_editTextTrack
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified text track of a video. The authenticated
        user must be the owner of the video.
      parameters:
        - description: The ID of the text track.
          in: path
          name: texttrack_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video.texttrack+json:
            schema:
              $ref: '#/components/schemas/VideosTextTracksEditTextTrackRequest'
      responses:
        '200':
          description: The text track was edited.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/text-track'
        '403':
          description: >-
            * The authenticated user can't edit the text track.

            * Error code 2204: There are errors in the request.

            * Error code 3430: The authenticated user doesn't have permission to
            access the text track.

            * Error code 3431: This text track is disabled.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: >-
            * No such video or text track exists.

            * Error code 5014: The specified text track doesn't exist.

            * Error code 5015: The specified text track belongs to a different
            video.
          content:
            application/vnd.vimeo.video.texttrack+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/timelinethumbnails:
    post:
      tags:
        - Embed Presets\Timeline events
      summary: Add a timeline event thumbnail to a video
      operationId: EmbedPresetsTimelineEvents_addThumbnailToVideo
      security:
        - oauth2:
            - upload
      description: >-
        This method adds a timeline event thumbnail to the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '201':
          description: The timeline event thumbnail was added.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: >-
            The authenticated user can't add a timeline event thumbnail to the
            video.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/timelinethumbnails/{thumbnail_id}:
    get:
      tags:
        - Embed Presets\Timeline events
      summary: Get a timeline event thumbnail
      operationId: EmbedPresetsTimelineEvents_getSingleThumbnail
      description: >-
        This method returns a single timeline event thumbnail that belongs to
        the specified video.
      parameters:
        - description: The ID of the timeline event thumbnail.
          in: path
          name: thumbnail_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The timeline event thumbnail was returned.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/picture'
        '403':
          description: The authenticated user can't access the timeline event thumbnail.
          content:
            application/vnd.vimeo.picture+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/transcripts/{texttrack_id}:
    get:
      tags:
        - Videos\Transcripts
      summary: Get transcript segments
      operationId: get_transcript
      description: This method returns the transcript segments of the specified text track.
      parameters:
        - description: The ID of the text track.
          in: path
          name: texttrack_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The transcript segments were returned.
          content:
            application/vnd.vimeo.video.segment:
              schema:
                $ref: '#/components/schemas/GetTranscriptResponse'
        '404':
          description: |-
            * Error code 2: The specified video doesn't exist.
            * Error code 5014: The specified text track doesn't exist.
            * Error code 5022: The specified transcript doesn't exist.
          content:
            application/vnd.vimeo.video.segment:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/trim:
    get:
      tags:
        - Videos\Nondestructive trimming
      summary: Get the status of a video's trim operation
      operationId: clip_trim
      description: >-
        This method returns the status of the trim operation for the specified
        video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The status of the trim operation was returned or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trimmed-video'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3411: The authenticated user is unverified.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - Videos\Nondestructive trimming
      summary: Start a trim operation for a video
      operationId: clip_trim
      description: This method starts a trim operation for the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClipTrimRequest'
      responses:
        '200':
          description: The status of the trim operation was returned or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trimmed-video'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: 'Error code 3411: The authenticated user is unverified.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/versions:
    get:
      tags:
        - Videos\Versions
      summary: Get all the versions of a video
      operationId: VideosVersions_getAllVideoVersions
      description: >-
        This method returns every version of the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The versions were returned.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosVersionsGetAllVideoVersions200Response
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: No such video exists.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    post:
      tags:
        - Videos\Versions
      summary: Add a version to a video
      operationId: VideosVersions_addVideoVersion
      description: >-
        This method adds a version to the specified video. The authenticated
        user must be the owner of the video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: true
        content:
          application/vnd.vimeo.video.version+json:
            schema:
              $ref: '#/components/schemas/VideosVersionsAddVideoVersionRequest'
      responses:
        '201':
          description: The version was added.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/video-version'
        '400':
          description: 'Error code 2204: The request input contains invalid version data.'
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: >-
            * Error code 3427: The authenticated user can't edit the video.

            * Error code 4104: The authenticated user's allotted daily quota has
            been reached.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: >-
            * Error code 5011: An upload isn't associated with this version.

            * Error code 5012: A video isn't associated with this upload.

            * Error code 5013: The endpoint isn't available, because the
            specified version of the API is less than 3.4 and
            **upload.approach** isn't `tus`.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/error'
  /videos/{video_id}/versions/{version_id}:
    delete:
      tags:
        - Videos\Versions
      summary: Delete a video version
      operationId: VideosVersions_deleteVideoVersion
      security:
        - oauth2:
            - edit
      description: >-
        This method deletes the specified version from a video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video version.
          in: path
          name: version_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '204':
          description: The video version was deleted.
        '404':
          description: >-
            * No such video exists.

            * Error code 2523: The version isn't associated with the video.

            * Error code 2538: The specified version is the video's current
            version and can't be deleted.

            * Error code 3200: The authenticated user can't access the versions
            of this video.

            * Error code 8003: The user credentials are invalid.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    get:
      tags:
        - Videos\Versions
      summary: Get a specific video version
      operationId: VideosVersions_getSpecificVersion
      description: >-
        This method returns a single version of the specified video. The
        authenticated user must be the owner of the video.
      parameters:
        - description: The ID of the video version.
          in: path
          name: version_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      responses:
        '200':
          description: The video version was returned.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/video-version'
        '404':
          description: >-
            * No such video exists.

            * Error code 3200: The authenticated user can't access the versions
            of this video.

            * Error code 8003: The user credentials are invalid.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
    patch:
      tags:
        - Videos\Versions
      summary: Edit a video version
      operationId: VideosVersions_editVideoVersion
      security:
        - oauth2:
            - edit
      description: >-
        This method edits the specified version of a video. The authenticated
        user must be the owner of the video.
      parameters:
        - description: The ID of the video version.
          in: path
          name: version_id
          required: true
          schema:
            type: number
            example: 12345
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
      requestBody:
        required: false
        content:
          application/vnd.vimeo.video.version+json:
            schema:
              $ref: '#/components/schemas/VideosVersionsEditVideoVersionRequest'
      responses:
        '200':
          description: The version was edited.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/video-version'
        '401':
          description: 'Error code 8003: The user credentials are invalid.'
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: >-
            * No such video exists.

            * Error code 2205: A parameter is invalid.

            * Error code 3200: The authenticated user can't access the versions
            of this video.
          content:
            application/vnd.vimeo.video.version+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /videos/{video_id}/videos:
    get:
      tags:
        - Videos\Recommendations
      summary: Get all the related videos of a video
      operationId: VideosRecommendations_getRelatedVideos
      description: This method returns every related video of the specified video.
      parameters:
        - description: The ID of the video.
          in: path
          name: video_id
          required: true
          schema:
            type: number
            example: 258684937
        - description: |
            The attribute by which to filter the results.

            Option descriptions:
             * `related` - Return related videos.
          in: query
          name: filter
          required: false
          schema:
            type: string
            enum:
              - related
        - description: The page number of the results to show.
          in: query
          name: page
          required: false
          schema:
            type: number
            example: 1
        - description: >-
            The number of items to show on each page of results, up to a maximum
            of 100.
          in: query
          name: per_page
          required: false
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: The related videos were returned.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: >-
                  #/components/schemas/VideosRecommendationsGetRelatedVideosResponse
        '400':
          description: The value of **filter** isn't `related`.
          content:
            application/vnd.vimeo.video+json:
              schema:
                $ref: '#/components/schemas/legacy-error'
  /webinars/{webinar_id}:
    get:
      tags:
        - Webinar\Essentials
      summary: Get a specific webinar
      operationId: WebinarEssentials_getSpecificWebinar
      description: >-
        This method returns a single webinar belonging to the authenticated
        user.
      parameters:
        - description: The ID of the webinar.
          in: path
          name: webinar_id
          required: true
          schema:
            type: string
            example: f19bfa08-b266-4f20-bfce-db1d0719b52f
      responses:
        '200':
          description: The webinar was returned.
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/webinar'
        '404':
          description: 'Error code 5000: No such webinar exists.'
          content:
            application/vnd.vimeo.webinars+json:
              schema:
                $ref: '#/components/schemas/error'
      deprecated: true
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: bearer
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/access_token
          scopes:
            create: Create new albums, channels, and so on
            delete: Delete videos, albums, channels, and so on
            edit: Edit existing videos, albums, channels, and so on
            email: Access to email addresses
            interact: >-
              Interact with Vimeo resources on a member's behalf, such as liking
              a video or following another member
            private: Access private member data
            promo_codes: Add, remove, and review Vimeo On Demand promotions
            public: Access public member data
            purchase: Purchase content
            purchased: Access a member's Vimeo On Demand purchase history
            scim: Manage users and team groups via the SCIM protocol
            stats: Access video stats
            upload: Upload videos
            video_files: >-
              Access video files belonging to members with a PRO subscription or
              higher
        clientCredentials:
          tokenUrl: /oauth/authorize/client
          scopes:
            create: Create new albums, channels, and so on
            delete: Delete videos, albums, channels, and so on
            edit: Edit existing videos, albums, channels, and so on
            email: Access to email addresses
            interact: >-
              Interact with Vimeo resources on a member's behalf, such as liking
              a video or following another member
            private: Access private member data
            promo_codes: Add, remove, and review Vimeo On Demand promotions
            public: Access public member data
            purchase: Purchase content
            purchased: Access a member's Vimeo On Demand purchase history
            scim: Manage users and team groups via the SCIM protocol
            stats: Access video stats
            upload: Upload videos
            video_files: >-
              Access video files belonging to members with a PRO subscription or
              higher
  schemas:
    activity-3-1:
      title: Activity 3.1
      properties:
        category:
          $ref: '#/components/schemas/category'
        channel:
          $ref: '#/components/schemas/channel'
        clip:
          $ref: '#/components/schemas/video'
        group:
          $ref: '#/components/schemas/group'
        metadata:
          description: Information about the activity's metadata.
          properties:
            connections:
              description: A list of resource URIs related to the activity.
              properties:
                related:
                  description: The activity's related content.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/activities?offset=20
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - related
              type: object
          required:
            - connections
          type: object
        tag:
          $ref: '#/components/schemas/tag'
        time:
          description: The time that the event occurred.
          example: '2017-05-17T17:46:09+00:00'
          type: string
        type:
          description: |
            The activity type.

            Option descriptions:
             * `appearance` - The activity is an appearance action.
             * `category` - The activity is a category action.
             * `channel` - The activity is a channel action.
             * `facebook_feed` - The activity is a Facebook feed action.
             * `group` - The activity is a group action.
             * `like` - The activity is a like action.
             * `ondemand` - The activity is a Vimeo On Demand action.
             * `share` - The activity is a share action.
             * `tag` - The activity is a tag action.
             * `twitter_timeline` - The activity is a Twitter timeline action.
             * `upload` - The activity is an upload action.
          enum:
            - appearance
            - category
            - channel
            - facebook_feed
            - group
            - like
            - ondemand
            - share
            - tag
            - twitter_timeline
            - upload
          example: appearance
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - clip
        - metadata
        - time
        - type
      type: object
      x-konfig-properties:
        category:
          description: >-
            The category associated with the event. This field is present only
            when the activity type is `category`.
        channel:
          description: >-
            The channel associated with the event. This field is present only
            when the activity type is `channel`.
        clip:
          description: The video associated with the activity.
        group:
          description: >-
            The group associated with the event. This field is present only when
            the activity type is `group`.
        tag:
          description: >-
            The tag associated with the event. This field is present only when
            the activity type is `tag`.
        user:
          description: >-
            The user associated with the event. This field is present only when
            the activity type is `like`, `appearance`, or `share`.
    album:
      title: Album
      properties:
        description:
          description: A brief description of the showcase's content.
          example: Vimeo holiday videos!
          nullable: true
          type: string
        allow_continuous_play:
          description: Whether the showcase permits continuous play.
          example: true
          type: boolean
        allow_downloads:
          description: Whether the showcase permits downloads.
          example: true
          type: boolean
        allow_share:
          description: Whether the showcase permits sharing.
          example: true
          type: boolean
        autoplay:
          description: >-
            Whether to start playback of the next video in the showcase's
            embedded playlist immediately after the previous video finishes.
          example: true
          type: boolean
        brand_color:
          description: >-
            The hexadecimal code for the color of the player buttons and
            showcase controls.
          example: ff66ee
          nullable: true
          type: string
        created_time:
          description: The time in ISO 8601 format when the showcase was created.
          example: '2015-12-17T21:32:44+00:00'
          type: string
        custom_logo:
          $ref: '#/components/schemas/picture'
        domain:
          description: The custom domain of the showcase.
          example: mycustomdomain.com
          nullable: true
          type: string
        domain_certificate_state:
          description: >
            The state of the SSL certificate that is associated with the
            showcase's domain.


            Option descriptions:
             * `null` - There is no associated HTTPS domain with this showcase.
             * `0` - The new certificate has yet to be processed.
             * `1` - The new certificate is being processed in the queue.
             * `2` - The certificate is being processed for renewal in the queue.
             * `3` - The new certificate has failed to be issued in the queue.
             * `4` - The certificate has failed to be renewed in the queue.
             * `5` - The certificate has been successfully issued.
             * `6` - The certificate has been successfully renewed.
             * `7` - The certificate has failed in the polling flow.
             * `8` - The certificate has failed to be renewed in the polling flow.
          enum:
            - 'null'
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
          example: 'null'
          type: string
        duration:
          description: The total duration in seconds of all the videos in the showcase.
          example: 1163
          type: number
        embed:
          description: Embed data for the showcase.
          properties:
            html:
              description: >-
                The responsive HTML code to embed the showcase's playlist on a
                website. This field appears only when the showcase has
                embeddable videos.
              nullable: true
              type: string
          required:
            - html
          type: object
        embed_brand_color:
          description: >-
            Whether to show the showcase's custom brand color in the player of
            the showcase's embedded playlist.
          example: true
          nullable: true
          type: boolean
        embed_custom_logo:
          description: >-
            Whether to show the showcase's custom logo in the player of the
            showcase's embedded playlist.
          example: true
          nullable: true
          type: boolean
        has_chosen_thumbnail:
          description: Whether the showcase has a thumbnail.
          example: true
          type: boolean
        hide_from_vimeo:
          description: Whether the showcase should be hidden from Vimeo when unlisted.
          example: false
          type: boolean
        hide_nav:
          description: Whether to hide Vimeo navigation when displaying the showcase.
          example: true
          type: boolean
        hide_upcoming:
          description: Whether to include the upcoming event in the showcase.
          example: false
          type: boolean
        hide_vimeo_logo:
          description: >-
            Whether to hide the Vimeo logo in the player of the showcase's
            embedded playlist.
          example: true
          nullable: true
          type: boolean
        layout:
          description: |
            The type of layout for presenting the showcase.

            Option descriptions:
             * `grid` - The showcase videos appear in a grid.
             * `player` - The showcase videos appear in the player.
          enum:
            - grid
            - player
          example: grid
          type: string
        link:
          description: The URL of the showcase.
          example: https://vimeo.com/showcase/Vimeo Holiday Videos!
          type: string
        loop:
          description: >-
            Whether automatic playback restarts at the top of the showcase's
            embedded playlist after reaching the end of the last video in the
            playlist.
          example: true
          type: boolean
        metadata:
          description: Metadata about the showcase.
          properties:
            connections:
              description: Information about showcase connections.
              properties:
                available_videos:
                  description: >-
                    Information about the authenticated user's videos that can
                    be added to or removed from this showcase. This data
                    requires a bearer token with the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of videos on this connection. This data
                        requires a bearer token with the `private` scope.
                      example: 14
                      type: number
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /albums/3706071/available_videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                requested_clip:
                  description: Information about the requested video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: videos/1232
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                videos:
                  description: Information about the videos that belong to the showcase.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 6
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /albums/3706071/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - available_videos
                - requested_clip
                - videos
              type: object
            interactions:
              description: A list of resource URIs related to the showcase.
              nullable: true
              properties:
                add_custom_thumbnails:
                  description: >-
                    An action indicating that the authenticated user is an
                    administrator of the showcase and may therefore add custom
                    thumbnails. This data requires a bearer token with the
                    `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /users/123456/albums/654321/custom_thumbnails
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                add_live_events:
                  description: >-
                    An action indicating that the authenticated user is an
                    administrator of the showcase and may therefore add events.
                    This data requires a bearer token with the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /users/123456/albums/654321/live_events
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                add_logos:
                  description: >-
                    An action indicating that the authenticated user is an
                    administrator of the showcase and may therefore add custom
                    logos. This data requires a bearer token with the `private`
                    scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /users/123456/albums/654321/logos
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                add_to:
                  description: >-
                    Information about adding or removing a video from the
                    showcase. This data requires a bearer token with the
                    `private` scope.
                  nullable: true
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /albums/1234/videos/5678
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                add_videos:
                  description: >-
                    An action indicating that the authenticated user is an
                    administrator of the showcase and may therefore add videos.
                    This data requires a bearer token with the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /users/123456/albums/654321/videos
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - add_custom_thumbnails
                - add_live_events
                - add_logos
                - add_to
                - add_videos
              type: object
          required:
            - connections
            - interactions
          type: object
        modified_time:
          description: The time in ISO 8601 format when the showcase was last modified.
          example: '2018-02-06T21:24:17+00:00'
          type: string
        name:
          description: The display name of the showcase.
          example: Vimeo Holiday Videos!
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        privacy:
          description: The privacy settings of the showcase.
          properties:
            password:
              description: >-
                The showcase's password. This field appears only when
                **privacy.view** is `password`.
              example: hunter1
              type: string
            view:
              description: |
                The access level of the showcase.

                Option descriptions:
                 * `anybody` - Anyone can access the showcase. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The showcase doesn't appear on Vimeo, but the owner can embed it on other sites.
                 * `nobody` - No one can access the showacse, including the owner. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the showcase.
                 * `team` - Only the owner and members of the owner's team can access the showcase.
                 * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - team
                - unlisted
              example: anybody
              type: string
          required:
            - view
          type: object
        resource_key:
          description: The resource key of the showcase.
          example: e5595241643259c658ed6c85ca82985a6341edc7
          type: string
        review_mode:
          description: Whether showcase videos use the review mode URL.
          example: true
          type: boolean
        seo_allow_indexed:
          description: Whether search engines can index the showcase.
          example: false
          type: boolean
        seo_description:
          description: The SEO description of the showcase.
          nullable: true
          type: string
        seo_keywords:
          description: The SEO keywords of the showcase.
          items:
            type: string
          type: array
        seo_title:
          description: The SEO title of the showcase.
          nullable: true
          type: string
        share_link:
          description: The URL for sharing the showcase.
          type: string
        sort:
          description: |
            The sort order of the showcase.

            Option descriptions:
             * `added_first` - Sort the showcase videos in order of those most recently added.
             * `added_last` - Sort the showcase videos in order of those least recently added.
             * `alphabetical` - Sort the showcase videos alphabetically.
             * `arranged` - Sort the showcase videos according to their custom arrangement.
             * `comments` - Sort the showcase videos by number of comments.
             * `likes` - Sort the showcase videos by number of likes.
             * `newest` - Sort the showcase videos in order of creation date with the newest first.
             * `oldest` - Sort the showcase videos in order of creation date with the oldest first.
             * `plays` - Sort the showcase videos by number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        theme:
          description: |
            The color theme of the showcase.

            Option descriptions:
             * `dark` - The showcase uses the dark theme.
             * `standard` - The showcase uses the standard theme.
          enum:
            - dark
            - standard
          example: dark
          type: string
        unlisted_hash:
          description: >-
            The unlisted hash of the showcase. Omit this hash from the showcase
            URL to prevent access to the showcase on Vimeo.
          type: string
        uri:
          description: The URI of the showcase.
          example: /users/152184/albums/3706071
          type: string
        url:
          description: The custom Vimeo URL of the showcase.
          example: my-custom-url
          nullable: true
          type: string
        use_custom_domain:
          description: Whether the showcase uses a custom domain.
          example: false
          type: boolean
        user:
          $ref: '#/components/schemas/user'
        web_brand_color:
          description: Whether to use the showcase's brand color in the web layout.
          example: true
          type: boolean
        web_custom_logo:
          description: Whether to use the showcase's custom logo in the web layout.
          example: true
          type: boolean
      required:
        - allow_continuous_play
        - allow_downloads
        - allow_share
        - autoplay
        - brand_color
        - created_time
        - custom_logo
        - description
        - domain
        - domain_certificate_state
        - duration
        - embed
        - embed_brand_color
        - embed_custom_logo
        - has_chosen_thumbnail
        - hide_from_vimeo
        - hide_nav
        - hide_upcoming
        - hide_vimeo_logo
        - layout
        - link
        - loop
        - metadata
        - modified_time
        - name
        - pictures
        - privacy
        - resource_key
        - review_mode
        - seo_allow_indexed
        - seo_description
        - seo_keywords
        - seo_title
        - share_link
        - sort
        - theme
        - unlisted_hash
        - uri
        - url
        - use_custom_domain
        - user
        - web_brand_color
        - web_custom_logo
      type: object
      x-konfig-properties:
        custom_logo:
          description: The custom logo of the showcase.
          nullable: true
        pictures:
          description: The active image of the showcase.
        user:
          description: The owner of the showcase.
    analytics:
      title: Analytics
      properties:
        average_percent_watched:
          description: >-
            The average percent watched in seconds of the corresponding Vimeo
            content.
          example: 50
          type: number
        average_time_watched:
          description: >-
            The average time watched in seconds of the corresponding Vimeo
            content.
          example: 200
          type: number
        country:
          properties:
            code:
              description: The country code in ISO-3166 format.
              example: US
              type: string
            name:
              description: The name of the country.
              example: United States
              type: string
          required:
            - code
            - name
          type: object
        downloads:
          description: The number of downloads of the corresponding Vimeo content.
          example: 1
          type: number
        embed_domain:
          description: The domain name of the website.
          example: vimeo.com
          type: string
        end_date:
          description: The end time of the time interval in ISO 8601 format.
          example: '2023-11-06T21:04:47+00:00'
          type: string
        finishes:
          description: The number of finishes of the corresponding Vimeo content.
          example: 1
          type: number
        impressions:
          description: The number of impressions of the corresponding Vimeo content.
          example: 1
          type: number
        metadata:
          properties:
            connections:
              properties:
                video:
                  description: The associated video object.
                  properties:
                    title:
                      description: The title of the associated video.
                      type: string
                    duration:
                      description: The duration of the associated video.
                      type: number
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/152184
                      type: string
                  required:
                    - duration
                    - options
                    - title
                    - uri
                  type: object
              required:
                - video
              type: object
          required:
            - connections
          type: object
        start_date:
          description: The start time of the time interval in ISO 8601 format.
          example: '2023-11-05T21:04:47+00:00'
          type: string
        total_time_watched:
          description: >-
            The total time watched in seconds of the corresponding Vimeo
            content.
          example: 200
          type: number
        unique_impressions:
          description: The number of unique impressions of the corresponding Vimeo content.
          example: 1
          type: number
        unique_viewers:
          description: The number of unique viewers of the corresponding Vimeo content.
          example: 1
          type: number
        views:
          description: The number of views of the corresponding Vimeo content.
          example: 1
          type: number
      required:
        - average_percent_watched
        - average_time_watched
        - country
        - downloads
        - embed_domain
        - end_date
        - finishes
        - impressions
        - metadata
        - start_date
        - total_time_watched
        - unique_impressions
        - unique_viewers
        - views
      type: object
    ancestor-path:
      title: Ancestor Path
      properties:
        link:
          description: The link to the folder.
          type: string
        name:
          description: The name of the folder.
          type: string
      required:
        - link
        - name
      type: object
    animated-thumbnail:
      title: Animated Thumbnail
      properties:
        duration:
          description: The duration of the animated thumbnail in seconds.
          example: 4
          type: number
        file_format:
          description: The file format of the animated thumbnail.
          example: gif
          type: string
        file_size:
          description: The file size of the animated thumbnail in bytes.
          example: 1440000
          type: number
        height:
          description: The height of the animated thumbnail in pixels.
          example: 450
          type: number
        is_downloadable:
          description: Whether the animated thumbnail can be downloaded.
          example: true
          type: boolean
        link:
          description: The URL of the animated thumbnail file.
          example: >-
            https://videoapi-muybridge-dev.vimeocdn.com/animated-thumbnails/image/7005be96-e5ab-4c4c-9cdd-8b6dfc2b304
          type: string
        link_with_play_button:
          description: The URL of the animated thumbnail file with a play button overlay.
          example: >-
            https://videoapi-muybridge-dev.vimeocdn.com/animated-thumbnails/image/7005be96-e5ab-4c4c-9cdd-8b6dfc2b304
          type: string
        profile_id:
          description: The profile ID of the animated thumbnail.
          example: Low
          type: string
        start_time:
          description: >-
            The time in the video, in seconds, corresponding to the start of the
            animation.
          example: 0
          type: number
        uuid:
          description: The ID of the animated thumbnail.
          example: b2f1-711515ecf
          type: string
        width:
          description: The width of the animated thumbnail in pixels.
          example: 800
          type: number
      required:
        - duration
        - file_format
        - file_size
        - height
        - is_downloadable
        - link
        - link_with_play_button
        - profile_id
        - start_time
        - uuid
        - width
      type: object
    animated-thumbset:
      title: Animated Thumbset
      properties:
        clip_uri:
          description: >-
            The URI of the video from which the sets of animated thumbnails were
            created.
          example: /videos/23456
          type: string
        created_on:
          description: The time in ISO 8601 format when the GIF was created.
          example: '1494888499'
          type: string
        sizes:
          description: An array of all the animated thumbnails in the set.
          items:
            $ref: '#/components/schemas/animated-thumbnail'
          type: array
        status:
          description: |
            The availability of the animated thumbnail.

            Option descriptions:
             * `cancelled` - The animated thumbnail's creation has been cancelled.
             * `completed` - The animated thumbnail has been created.
             * `failed` - The animated thumbnail's creation has failed.
             * `started` - The animated thumbnail's creation has started.
          enum:
            - cancelled
            - completed
            - failed
            - started
          example: cancelled
          type: string
        uri:
          description: The URI of the set of animated thumbnails.
          example: /videos/234/animated_thumbsets/ww-4c4c-9cdd
          type: string
      required:
        - clip_uri
        - created_on
        - sizes
        - status
        - uri
      type: object
    api-app:
      title: API App
      properties:
        capabilities:
          description: The app's capabilities list.
          type: object
        name:
          description: The name of the API app.
          example: Vimeo Android
          type: string
        uri:
          description: The canonical URI of the API app.
          example: /apps/12345
          type: string
      required:
        - capabilities
        - name
        - uri
      type: object
    auth:
      title: Auth
      properties:
        access_token:
          description: The access token string.
          example: 01019a4a62aec63db077317ab7bb429db75652401e
          type: string
        app:
          $ref: '#/components/schemas/api-app'
        expires_on:
          description: The token's expiration date.
          example: '1495048954'
          type: string
        refresh_token:
          description: >-
            The refresh token string. The Vimeo API doesn't currently support
            refresh tokens, but we plan to add this support in the future.
          example: 3d3bc8a9cb7debfd01b270e419b2d265983362f9
          type: string
        scope:
          description: The scope or scopes that the token supports.
          example: private create edit upload public
          type: string
        token_type:
          description: |
            The token type.

            Option descriptions:
             * `bearer` - The token is of the `bearer` type.
          enum:
            - bearer
          example: bearer
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - access_token
        - app
        - scope
        - token_type
      type: object
      x-konfig-properties:
        app:
          description: The API application associated with the token.
        user:
          description: The user associated with the token.
    auth-error:
      title: Auth Error
      properties:
        error:
          description: The name of the error.
          example: server_error
          type: string
        error_description:
          description: The description of the error.
          example: An error has occurred on Vimeo's servers. Please try again.
          type: string
      required:
        - error
        - error_description
      type: object
    category:
      title: Category
      properties:
        icon:
          $ref: '#/components/schemas/picture'
        is_deprecated:
          description: >-
            Whether the category is deprecated and should not be used for new
            categorization.
          example: false
          type: boolean
        last_video_featured_time:
          description: The most recent time in ISO 8601 format when the video was featured.
          example: '2017-05-17T17:46:09+00:00'
          type: string
        link:
          description: The URL to access the category in a browser.
          example: https://vimeo.com/categories/animation
          type: string
        metadata:
          description: Metadata about the category.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                channels:
                  description: Information about the channels related to this category.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of channels on this connection.
                      example: 90
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /categories/animation/channels
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                groups:
                  description: Information about the groups related to this category.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of groups on this connection.
                      example: 15
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /categories/animation/groups
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                users:
                  description: Information about the users related to this category.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of users on this connection.
                      example: 140
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /categories/animation/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                videos:
                  description: Information about the videos related to this category.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 960
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /categories/animation/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - channels
                - groups
                - users
                - videos
              type: object
            interactions:
              description: The permissible actions related to the category.
              properties:
                follow:
                  description: >-
                    An action indicating if the authenticated user has followed
                    the category.
                  properties:
                    added:
                      description: >-
                        Whether the authenticated user has followed the
                        category.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the user followed the
                        category, or the null value if the user hasn't followed
                        the category.
                      example: '2017-05-17T17:46:09+00:00'
                      nullable: true
                      type: string
                    uri:
                      description: >-
                        The URI for following or unfollowing the category: PUT
                        to this URI to follow the category, or DELETE to this
                        URI to unfollow the category.
                      example: /users/152184/categories/animation
                      type: string
                  required:
                    - added
                    - added_time
                    - uri
                  type: object
              required:
                - follow
              type: object
          required:
            - connections
            - interactions
          type: object
        name:
          description: The display name that identifies the category.
          example: Animation
          type: string
        parent:
          description: >-
            The container of the category's parent category, if the current
            category is a subcategory.
          nullable: true
          properties:
            link:
              description: The URL to access the parent category in a browser.
              example: https://vimeo.com/categories/animation
              type: string
            name:
              description: The display name that identifies the parent category.
              example: Animation
              type: string
            uri:
              description: >-
                The unique identifier to access the parent of the category
                resource.
              example: /categories/animation
              type: string
          required:
            - link
            - name
            - uri
          type: object
        pictures:
          $ref: '#/components/schemas/picture'
        resource_key:
          description: The resource key of the category.
          example: e5595241643259c658ed6c85ca82985a6341edc7
          type: string
        subcategories:
          description: >-
            All the subcategories that belong to the category, if the current
            category is a top-level parent.
          items:
            type: object
            properties:
              link:
                description: The URL to access the subcategory in a browser.
                example: https://vimeo.com/categories/animation/2d/videos
                type: string
              name:
                description: The display name that identifies the subcategory.
                example: 2D
                type: string
              uri:
                description: The unique identifier to access the subcategory. resource.
                example: /categories/animation/subcategories/2d
                type: string
            required:
              - link
              - name
              - uri
          type: array
        top_level:
          description: Whether the category isn't a subcategory of another category.
          example: true
          type: boolean
        uri:
          description: The unique identifier to access the category resource.
          example: /categories/animation
          type: string
      required:
        - is_deprecated
        - last_video_featured_time
        - link
        - metadata
        - name
        - parent
        - pictures
        - resource_key
        - top_level
        - uri
      type: object
      x-konfig-properties:
        icon:
          description: The active icon for the category.
        pictures:
          description: >-
            The active picture for this category. The default shows vertical
            color bars.
    channel:
      title: Channel
      properties:
        tags:
          description: An array of all tags assigned to the channel.
          items:
            $ref: '#/components/schemas/tag'
          type: array
        description:
          description: A brief explanation of the channel's content.
          example: >-
            We really love videos, and these are the videos we really, really
            love.
          nullable: true
          type: string
        categories:
          description: >-
            The categories to which the channel belongs as specified by the
            channel moderators.
          items:
            $ref: '#/components/schemas/category'
          type: array
        created_time:
          description: The time in ISO 8601 format when the channel was created.
          example: '2007-10-23T17:00:43+00:00'
          type: string
        header:
          $ref: '#/components/schemas/picture'
        link:
          description: The URL to access the channel in a browser.
          example: https://vimeo.com/channels/staffpicks
          type: string
        metadata:
          description: Metadata about the channel.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                privacy_users:
                  description: >-
                    Information provided to channel moderators about which users
                    they have specifically permitted to access this private
                    channel. This data requires a bearer token with the
                    `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of users on this connection. This data
                        requires a bearer token with the `private` scope.
                      example: 36
                      type: number
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /channels/927/privacy/users
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                users:
                  description: >-
                    Information about the users following or moderating this
                    channel.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of users on this connection.
                      example: 794634
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /channels/927/users
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                videos:
                  description: Information about the videos that belong to this channel.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 12448
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /channels/927/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - privacy_users
                - users
                - videos
              type: object
            interactions:
              description: A list of resource URIs related to the channel.
              nullable: true
              properties:
                add_moderators:
                  description: >-
                    An action indicating that the authenticated user is the
                    owner of the channel and may therefore add other users as
                    channel moderators. This data requires a bearer token with
                    the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /channels/1234/moderators
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                add_to:
                  description: >-
                    When a channel appears in the context of adding or removing
                    a video from it (`/videos/{video_id}/available_channels`),
                    include information about adding or removing the video. This
                    data requires a bearer token with the `private` scope.
                  nullable: true
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /channels/1234/videos/5678
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                follow:
                  description: >-
                    An action indicating if the authenticated user has followed
                    this channel. This data requires a bearer token with the
                    `private` scope.
                  properties:
                    added:
                      description: >-
                        Whether the authenticated user has followed this
                        channel. This data requires a bearer token with the
                        `private` scope.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format that the user followed this
                        channel, or the null value if the user hasn't followed
                        the channel. This data requires a bearer token with the
                        `private` scope.
                      example: '2017-05-22T17:50:11+00:00'
                      nullable: true
                      type: string
                    type:
                      description: >
                        Whether the authenticated user is a moderator or
                        subscriber. This data requires a bearer token with the
                        `private` scope.


                        Option descriptions:
                         * `moderator` - The authenticated user is a moderator.
                         * `subscriber` - The authenticated user is a subscriber.
                      enum:
                        - moderator
                        - subscriber
                      example: moderator
                      nullable: true
                      type: string
                    uri:
                      description: >-
                        The URI for following or unfollowing this channel. PUT
                        to this URI to follow the channel, or DELETE to this URI
                        to unfollow the channel. This data requires a bearer
                        token with the `private` scope.
                      example: /users/1234/channels/927
                      type: string
                  required:
                    - added
                    - added_time
                    - type
                    - uri
                  type: object
                moderate_videos:
                  description: >-
                    An action indicating that the authenticated user is a
                    moderator of the channel and may therefore add or remove
                    videos from the channel. This data requires a bearer token
                    with the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods allowed on this URI. This data
                        requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /channels/1234/videos
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - add_moderators
                - add_to
                - follow
                - moderate_videos
              type: object
          required:
            - connections
            - interactions
          type: object
        modified_time:
          description: The time in ISO 8601 format when the channel was last modified.
          example: '2018-03-21T22:52:29+00:00'
          type: string
        name:
          description: The display name that identifies the channel.
          example: Vimeo Staff Picks
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        privacy:
          description: The privacy settings of the channel.
          properties:
            view:
              description: |
                The privacy setting of the channel.

                Option descriptions:
                 * `anybody` - Anyone can access the channel. This privacy setting appears as `Public` on the Vimeo front end.
                 * `moderators` - Only moderators can access the channel.
                 * `users` - Only registered users can access the channel. _This field is deprecated._
              enum:
                - anybody
                - moderators
                - users
              example: anybody
              type: string
          required:
            - view
          type: object
        resource_key:
          description: The channel resource key.
          example: e5595241643259c658ed6c85ca82985a6341edc7
          type: string
        uri:
          description: The unique identifier to access the channel resource.
          example: /channels/927
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - categories
        - created_time
        - description
        - header
        - link
        - metadata
        - modified_time
        - name
        - pictures
        - privacy
        - resource_key
        - tags
        - uri
        - user
      type: object
      x-konfig-properties:
        header:
          description: The banner that appears by default at the top of the channel page.
        pictures:
          description: >-
            The active image for the channel. The default is the thumbnail of
            the last video added to the channel.
        user:
          description: The Vimeo user who owns the channel.
    chapter:
      title: Chapter
      properties:
        title:
          description: The title of the chapter.
          example: Chapter 1
          nullable: true
          type: string
        active_thumbnail_uri:
          description: The URI of the active thumbnail.
          example: >-
            /videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg
          type: string
        thumbnails:
          description: The thumbnails associated with the video chapter.
          items:
            $ref: '#/components/schemas/picture'
          type: array
        timecode:
          description: The timecode of the chapter in seconds from the start of the video.
          example: 140
          nullable: true
          type: number
        uri:
          description: The relative URI of the chapter.
          example: /videos/258684937/chapters/12345
          type: string
      required:
        - thumbnails
        - timecode
        - title
        - uri
      type: object
    comment:
      title: Comment
      properties:
        created_on:
          description: The time in ISO 8601 format when the comment was posted.
          example: '2018-03-05T21:04:47+00:00'
          type: string
        link:
          description: The permalink to the comment.
          example: https://vimeo.com/258684937#comment_12345
          type: string
        metadata:
          properties:
            connections:
              properties:
                replies:
                  description: Information about the replies to the comment.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of replies on this connection.
                      example: 42
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/comments/12345/replies
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                user:
                  description: Information about the user who posted the reply.
                  properties:
                    link:
                      description: >-
                        The absolute URL of the authenticated users's profile
                        page.
                      type: string
                    name:
                      description: The display name of the user who posted the reply.
                      type: string
                    pictures:
                      $ref: '#/components/schemas/picture'
                    uri:
                      description: The unique identifier to access the user resource.
                      type: string
                  required:
                    - link
                    - name
                    - pictures
                    - uri
                  type: object
                  x-konfig-properties:
                    pictures:
                      description: Information about the user's portraits.
              required:
                - replies
                - user
              type: object
          required:
            - connections
          type: object
        replies:
          description: The list of replies to the comment.
          items:
            $ref: '#/components/schemas/reply'
          type: array
        resource_key:
          description: The comment's resource key string.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        text:
          description: The content of the comment.
          example: I love this!
          type: string
        type:
          description: |
            The Vimeo content to which the comment relates.

            Option descriptions:
             * `video` - The comment is about a video.
          enum:
            - video
          example: video
          type: string
        uri:
          description: The unique identifier to access the comment resource.
          example: /videos/258684937/comments/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - created_on
        - link
        - metadata
        - replies
        - resource_key
        - text
        - type
        - uri
        - user
      type: object
      x-konfig-properties:
        user:
          description: >-
            The user who posted the comment. _This field is deprecated. Use the
            `metadata.connections.user` field instead._
          nullable: true
    content-rating:
      title: Content Rating
      properties:
        code:
          description: |
            The reason for the content rating.

            Option descriptions:
             * `advertisement` - The content contains an advertisement.
             * `drugs` - The content contains drug or alcohol use.
             * `language` - The content contains profanity or sexually suggestive language.
             * `nudity` - The content contains nudity.
             * `safe` - The content is suitable for all audiences.
             * `unrated` - The content hasn't been rated.
             * `violence` - The content contains violence or is graphic.
          enum:
            - advertisement
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          example: violence
          type: string
        name:
          description: The name of the content rating.
          example: Violence
          type: string
        uri:
          description: The canonical relative URI of the content rating.
          example: /contentrating/violence
          nullable: true
          type: string
      required:
        - code
        - name
        - uri
      type: object
    creative-commons:
      title: Creative Commons
      properties:
        code:
          description: |
            The type of Creative Commons license.

            Option descriptions:
             * `by` - Attribution.
             * `by-nc` - Attribution Non-Commercial.
             * `by-nc-nd` - Attribution Non-Commercial No Derivatives.
             * `by-nc-sa` - Attribution Non-Commercial Share Alike.
             * `by-nd` - Attribution No Derivatives.
             * `by-sa` - Attribution Share Alike.
             * `cc0` - Public Domain Dedication.
          enum:
            - by
            - by-nc
            - by-nc-nd
            - by-nc-sa
            - by-nd
            - by-sa
            - cc0
          example: by-sa
          type: string
        name:
          description: The description of the Creative Commons license.
          example: Attribution Share Alike
          type: string
        uri:
          description: The canonical relative URI of the Creative Commons license.
          example: /creativecommons/by-sa
          nullable: true
          type: string
      required:
        - code
        - name
        - uri
      type: object
    credit:
      title: Credit
      properties:
        name:
          description: The name of the person credited.
          example: Sam Doe
          type: string
        role:
          description: >-
            The character that the person portrayed, or the job that the person
            performed.
          example: Themselves
          type: string
        uri:
          description: The unique identifier to access the credit resource.
          example: /videos/258684937/credits/1234
          type: string
        user:
          $ref: '#/components/schemas/user'
        video:
          $ref: '#/components/schemas/video'
      required:
        - name
        - role
        - uri
      type: object
      x-konfig-properties:
        user:
          description: The Vimeo user associated with the credit.
        video:
          description: The video associated with the credit.
    disabled-video-properties:
      title: Disabled Video Properties
      properties:
        add_to_collection:
          description: >-
            An object that represents the reason why adding to a collection is
            disabled for the video.
          properties:
            enable_link:
              description: The relative link to upgrade to access adding to a collection.
              example: /store/pro
              type: string
            min_tier_for_capability:
              description: |
                The capability required to activate adding to a collection.

                Option descriptions:
                 * `basic` - The user must have at least a Vimeo Basic account.
                 * `business` - The user must have at least a Vimeo Business account.
                 * `enterprise` - The user must have at least a Vimeo Enterprise account.
                 * `live_business` - The user must have at least a Vimeo Business Live account.
                 * `live_premium` - The user must have at least a Vimeo Premium account.
                 * `live_pro` - The user must have at least a Vimeo Pro Live account.
                 * `plus` - The user must have at least a Vimeo Plus account.
                 * `pro` - The user must have at least a Vimeo Pro account.
                 * `pro_unlimited` - The user must have at least a Vimeo Pro Unlimited account.
                 * `producer` - The user must have at least a Vimeo Producer account.
              enum:
                - basic
                - business
                - enterprise
                - live_business
                - live_premium
                - live_pro
                - plus
                - pro
                - pro_unlimited
                - producer
              example: pro
              type: string
            reasons:
              description: >-
                The reasons why adding to a collection is disabled for the
                video.
              items:
                type: object
                properties:
                  icon:
                    description: >
                      The icon that represents the reason why adding to a
                      collection is disabled.


                      Option descriptions:
                       * `clock` - The reason is represented by a clock icon.
                       * `create` - The reason is represented by a create icon.
                       * `image` - The reason is represented by an image icon.
                       * `theme` - The reason is represented by a theme icon.
                    enum:
                      - clock
                      - create
                      - image
                      - theme
                    example: clock
                    type: string
                  message:
                    description: >-
                      A user-deliverable message of why adding to a collection
                      is disabled.
                    example: Pro template
                    type: string
                required:
                  - icon
                  - message
              type: array
          required:
            - enable_link
            - min_tier_for_capability
            - reasons
          type: object
        download:
          description: >-
            An object that represents the reason why download is disabled for
            the video.
          properties:
            enable_link:
              description: The relative link to upgrade downloads.
              example: /store/pro
              type: string
            key_path:
              description: The path to the download object in the video response.
              type: string
            min_tier_for_capability:
              description: |
                The capability required to activate downloads.

                Option descriptions:
                 * `basic` - The user must have at least a Vimeo Basic account.
                 * `business` - The user must have at least a Vimeo Business account.
                 * `enterprise` - The user must have at least a Vimeo Enterprise account.
                 * `live_business` - The user must have at least a Vimeo Business Live account.
                 * `live_premium` - The user must have at least a Vimeo Premium account.
                 * `live_pro` - The user must have at least a Vimeo Pro Live account.
                 * `plus` - The user must have at least a Vimeo Plus account.
                 * `pro` - The user must have at least a Vimeo Pro account.
                 * `pro_unlimited` - The user must have at least a Vimeo Pro Unlimited account.
                 * `producer` - The user must have at least a Vimeo Producer account.
              enum:
                - basic
                - business
                - enterprise
                - live_business
                - live_premium
                - live_pro
                - plus
                - pro
                - pro_unlimited
                - producer
              example: pro
              type: string
            reasons:
              description: The reasons why download is disabled for the video.
              items:
                type: object
                properties:
                  icon:
                    description: >
                      The icon that represents the reason why download is
                      disabled.


                      Option descriptions:
                       * `clock` - The reason is represented by a clock icon.
                       * `create` - The reason is represented by a create icon.
                       * `image` - The reason is represented by an image icon.
                       * `theme` - The reason is represented by a theme icon.
                    enum:
                      - clock
                      - create
                      - image
                      - theme
                    example: clock
                    type: string
                  message:
                    description: >-
                      A user-deliverable message of why the download is
                      disabled.
                    example: Pro template
                    type: string
                required:
                  - icon
                  - message
              type: array
          required:
            - enable_link
            - key_path
            - min_tier_for_capability
            - reasons
          type: object
        duplicate:
          description: >-
            An object that represents the reason why duplication is disabled for
            the video.
          properties:
            enable_link:
              description: The relative link to upgrade to duplication.
              example: /store/pro
              type: string
            key_path:
              description: The path to the duplicate object in the video response.
              type: string
            min_tier_for_capability:
              description: |
                The capability required to activate duplication.

                Option descriptions:
                 * `basic` - The user must have at least a Vimeo Basic account.
                 * `business` - The user must have at least a Vimeo Business account.
                 * `enterprise` - The user must have at least a Vimeo Enterprise account.
                 * `live_business` - The user must have at least a Vimeo Business Live account.
                 * `live_premium` - The user must have at least a Vimeo Premium account.
                 * `live_pro` - The user must have at least a Vimeo Pro Live account.
                 * `plus` - The user must have at least a Vimeo Plus account.
                 * `pro` - The user must have at least a Vimeo Pro account.
                 * `pro_unlimited` - The user must have at least a Vimeo Pro Unlimited account.
                 * `producer` - The user must have at least a Vimeo Producer account.
              enum:
                - basic
                - business
                - enterprise
                - live_business
                - live_premium
                - live_pro
                - plus
                - pro
                - pro_unlimited
                - producer
              example: pro
              type: string
            reasons:
              description: The reasons why duplication is disabled for the video.
              items:
                type: object
                properties:
                  icon:
                    description: >
                      The icon that represents the reason why duplication is
                      disabled.


                      Option descriptions:
                       * `clock` - The reason is represented by a clock icon.
                       * `create` - The reason is represented by a create icon.
                       * `image` - The reason is represented by an image icon.
                       * `theme` - The reason is represented by a theme icon.
                    enum:
                      - clock
                      - create
                      - image
                      - theme
                    example: clock
                    type: string
                  message:
                    description: A user-deliverable message of why duplication is disabled.
                    example: Pro template
                    type: string
                required:
                  - icon
                  - message
              type: array
          required:
            - enable_link
            - key_path
            - min_tier_for_capability
            - reasons
          type: object
        edit_privacy:
          description: >-
            An object that represents the reason why privacy editing is disabled
            for the video.
          properties:
            enable_link:
              description: The relative link to upgrade to privacy editing.
              example: /store/pro
              type: string
            key_path:
              description: >-
                The path to the edit privacy interaction object in the video
                response.
              type: string
            min_tier_for_capability:
              description: |
                The capability required to activate privacy editing.

                Option descriptions:
                 * `basic` - The user must have at least a Vimeo Basic account.
                 * `business` - The user must have at least a Vimeo Business account.
                 * `enterprise` - The user must have at least a Vimeo Enterprise account.
                 * `live_business` - The user must have at least a Vimeo Business Live account.
                 * `live_premium` - The user must have at least a Vimeo Premium account.
                 * `live_pro` - The user must have at least a Vimeo Pro Live account.
                 * `plus` - The user must have at least a Vimeo Plus account.
                 * `pro` - The user must have at least a Vimeo Pro account.
                 * `pro_unlimited` - The user must have at least a Vimeo Pro Unlimited account.
                 * `producer` - The user must have at least a Vimeo Producer account.
              enum:
                - basic
                - business
                - enterprise
                - live_business
                - live_premium
                - live_pro
                - plus
                - pro
                - pro_unlimited
                - producer
              example: pro
              type: string
            reasons:
              description: The reasons why privacy editing is disabled for the video.
              items:
                type: object
                properties:
                  icon:
                    description: >
                      The icon that represents the reason why privacy editing is
                      disabled.


                      Option descriptions:
                       * `clock` - The reason is represented by a clock icon.
                       * `create` - The reason is represented by a create icon.
                       * `image` - The reason is represented by an image icon.
                       * `theme` - The reason is represented by a theme icon.
                    enum:
                      - clock
                      - create
                      - image
                      - theme
                    example: clock
                    type: string
                  message:
                    description: >-
                      A user-deliverable message of why the privacy editing is
                      disabled.
                    example: Pro template
                    type: string
                required:
                  - icon
                  - message
              type: array
          required:
            - enable_link
            - key_path
            - min_tier_for_capability
            - reasons
          type: object
        embed:
          description: >-
            An object that represents the reason why embed is disabled for the
            video.
          properties:
            enable_link:
              description: The relative link to upgrade embeds.
              example: /store/pro
              type: string
            key_path:
              description: The path to the embed object in the video response.
              type: string
            min_tier_for_capability:
              description: |
                The capability required to activate embeds.

                Option descriptions:
                 * `basic` - The user must have at least a Vimeo Basic account.
                 * `business` - The user must have at least a Vimeo Business account.
                 * `enterprise` - The user must have at least a Vimeo Enterprise account.
                 * `live_business` - The user must have at least a Vimeo Business Live account.
                 * `live_premium` - The user must have at least a Vimeo Premium account.
                 * `live_pro` - The user must have at least a Vimeo Pro Live account.
                 * `plus` - The user must have at least a Vimeo Plus account.
                 * `pro` - The user must have at least a Vimeo Pro account.
                 * `pro_unlimited` - The user must have at least a Vimeo Pro Unlimited account.
                 * `producer` - The user must have at least a Vimeo Producer account.
              enum:
                - basic
                - business
                - enterprise
                - live_business
                - live_premium
                - live_pro
                - plus
                - pro
                - pro_unlimited
                - producer
              example: pro
              type: string
            reasons:
              description: The reasons why embed is disabled for the video.
              items:
                type: object
                properties:
                  icon:
                    description: |
                      The icon that represents the reason why embed is disabled.

                      Option descriptions:
                       * `clock` - The reason is represented by a clock icon.
                       * `create` - The reason is represented by a create icon.
                       * `image` - The reason is represented by an image icon.
                       * `theme` - The reason is represented by a theme icon.
                    enum:
                      - clock
                      - create
                      - image
                      - theme
                    example: clock
                    type: string
                  message:
                    description: A user-deliverable message of why embed is disabled.
                    example: Pro template
                    type: string
                required:
                  - icon
                  - message
              type: array
          required:
            - enable_link
            - key_path
            - min_tier_for_capability
            - reasons
          type: object
        embed_presets:
          description: >-
            An object that represents the reason why embed presets are disabled
            for the video.
          properties:
            enable_link:
              description: The relative link to upgrade embed presets.
              example: /store/pro
              type: string
            key_path:
              description: The path to the embed presets object in the video response.
              type: string
            min_tier_for_capability:
              description: |
                The capability required to activate embed presets.

                Option descriptions:
                 * `basic` - The user must have at least a Vimeo Basic account.
                 * `business` - The user must have at least a Vimeo Business account.
                 * `enterprise` - The user must have at least a Vimeo Enterprise account.
                 * `live_business` - The user must have at least a Vimeo Business Live account.
                 * `live_premium` - The user must have at least a Vimeo Premium account.
                 * `live_pro` - The user must have at least a Vimeo Pro Live account.
                 * `plus` - The user must have at least a Vimeo Plus account.
                 * `pro` - The user must have at least a Vimeo Pro account.
                 * `pro_unlimited` - The user must have at least a Vimeo Pro Unlimited account.
                 * `producer` - The user must have at least a Vimeo Producer account.
              enum:
                - basic
                - business
                - enterprise
                - live_business
                - live_premium
                - live_pro
                - plus
                - pro
                - pro_unlimited
                - producer
              example: pro
              type: string
            reasons:
              description: The reasons why embed presets are disabled for the video.
              items:
                type: object
                properties:
                  icon:
                    description: >
                      The icon that represents the reason why embed presets are
                      disabled.


                      Option descriptions:
                       * `clock` - The reason is represented by a clock icon.
                       * `create` - The reason is represented by a create icon.
                       * `image` - The reason is represented by an image icon.
                       * `theme` - The reason is represented by a theme icon.
                    enum:
                      - clock
                      - create
                      - image
                      - theme
                    example: clock
                    type: string
                  message:
                    description: >-
                      A user-deliverable message of why embed presets are
                      disabled.
                    example: Pro template
                    type: string
                required:
                  - icon
                  - message
              type: array
          required:
            - enable_link
            - key_path
            - min_tier_for_capability
            - reasons
          type: object
      required:
        - add_to_collection
        - download
        - duplicate
        - edit_privacy
        - embed
        - embed_presets
      type: object
    domain:
      title: Domain
      properties:
        allow_hd:
          description: Whether to permit HD embeds on this domain.
          example: true
          type: boolean
        domain:
          description: The domain name.
          example: example.com
          type: string
        uri:
          description: The URI of the domain.
          example: /videos/258684937/privacy/domains/example.com
          type: string
      required:
        - allow_hd
        - domain
        - uri
      type: object
    editing-session:
      title: Editing Session
      properties:
        has_watermark:
          description: Whether the video has a watermark.
          type: boolean
        is_edited_by_tve:
          description: Whether the video has been edited by Transcript Video Editing.
          type: boolean
        is_max_resolution:
          description: >-
            Whether the current version of the video is at the maximum
            resolution.
          type: boolean
        is_music_licensed:
          description: Whether the video has licensed music.
          type: boolean
        is_rated:
          description: Whether the video has been rated.
          example: false
          type: boolean
        min_tier_for_movie:
          description: >-
            The minimum required Vimeo membership for the user to be able to
            share the video.
          type: string
        result_video_hash:
          description: The result video hash for the created video.
          type: string
        status:
          description: |
            The status of the video.

            Option descriptions:
             * `done` - The video is finished processing.
             * `processing` - The video is still being processed.
          enum:
            - done
            - processing
          example: done
          type: string
        version_uri:
          description: The version's canonical relative URI.
          example: /videos/258684937/versions/12345
          type: string
        vsid:
          description: The ID of the video's editing session.
          type: number
      required:
        - has_watermark
        - is_edited_by_tve
        - is_max_resolution
        - is_music_licensed
        - is_rated
        - min_tier_for_movie
        - result_video_hash
        - status
        - vsid
      type: object
    email-capture-form:
      title: Email Capture Form
      properties:
        clip_id:
          description: >-
            The ID of the video associated with the form. If there is no
            associated video, the value of this field is `-1`.
          example: 76979871
          type: number
        created_time:
          description: The time in ISO 8601 format when the form was created.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        custom_fields:
          description: The fields to show in the form.
          items:
            type: object
            properties:
              connected_fields:
                description: >-
                  The email provider fields associated with the field in the
                  form.
                items:
                  type: object
                  properties:
                    email_service_provider_field_id:
                      description: The ID of the provider field.
                      type: string
                    form_field_id:
                      description: >-
                        The ID of the field in the form associated with the
                        connected field.
                      type: number
                    provider_id:
                      description: |
                        A third-party email service provider.

                        Option descriptions:
                         * `1` - The provider is Mailchimp.
                         * `2` - The provider is Campaign Monitor.
                         * `3` - The provider is Constant Contact.
                         * `4` - The provider is Infusionsoft.
                         * `5` - The provider is HubSpot.
                         * `6` - The provider is Constant Contact V3.
                         * `7` - The provider is Marketo.
                      enum:
                        - 1
                        - 2
                        - 3
                        - 4
                        - 5
                        - 6
                        - 7
                      example: 1
                      type: string
                  required:
                    - email_service_provider_field_id
                    - form_field_id
                    - provider_id
                type: array
              field_metadata:
                description: >-
                  The metadata object that is associated with the field in the
                  form.
                properties:
                  options:
                    description: An array of options associated with the field.
                    items:
                      type: object
                      properties:
                        option_label:
                          description: The label for the field option.
                          type: string
                        option_position:
                          description: >-
                            The position of the option in the dropdown relative
                            to the others.
                          type: number
                      required:
                        - option_label
                        - option_position
                    type: array
                required:
                  - options
                type: object
              field_name:
                description: The name of a field in the form.
                type: string
              field_type:
                description: |
                  The type of custom field.

                  Option descriptions:
                   * `dropdown` - The custom field used for dropdown item selection.
                   * `text` - The custom field used for text input.
                enum:
                  - dropdown
                  - text
                example: dropdown
                type: string
              locked:
                description: >-
                  Whether the field's **required** property is editable but
                  **field_name** isn't. If the value is `true`, the field can't
                  be deleted.
                type: boolean
              required:
                description: Whether the field is required.
                type: boolean
              static_field:
                description: >-
                  Whether the field's **required** and **field_name** properties
                  are both uneditable. If the value is `true`, the field can't
                  be deleted.
                type: boolean
            required:
              - connected_fields
              - field_metadata
              - field_name
              - field_type
              - locked
              - required
              - static_field
          type: array
        custom_logo:
          description: The ID of the logo image to display on the form.
          example: 532603
          type: number
        custom_message:
          description: The message to display on the form.
          example: Sign up for our mailing list
          type: string
        email_lists:
          description: >-
            The mailing lists on a third-party email service provider that
            submissions should get synced to.
          items:
            type: object
            properties:
              form_id:
                description: The ID of the email capture form.
                type: number
              list_id:
                description: >-
                  The ID of the mailing list in the third-party email service
                  provider's system.
                type: string
              list_name:
                description: >-
                  The name of the mailing list in the third-party email service
                  provider's system.
                type: string
              provider_id:
                description: |
                  A third-party email service provider.

                  Option descriptions:
                   * `1` - The provider is Mailchimp.
                   * `2` - The provider is Campaign Monitor.
                   * `3` - The provider is Constant Contact.
                   * `4` - The provider is Infusionsoft.
                   * `5` - The provider is HubSpot.
                   * `6` - The provider is Constant Contact V3.
                   * `7` - The provider is Marketo.
                enum:
                  - 1
                  - 2
                  - 3
                  - 4
                  - 5
                  - 6
                  - 7
                example: 1
                type: string
            required:
              - form_id
              - list_id
              - provider_id
          type: array
        hidden_fields:
          description: >-
            The hidden fields to show only in the webinar management page. These
            fields are hidden in the player registration form.
          items:
            type: object
            properties:
              connected_fields:
                description: >-
                  The email provider fields associated with the field in the
                  form.
                items:
                  type: object
                  properties:
                    email_service_provider_field_id:
                      description: The ID of the provider field.
                      type: string
                    form_field_id:
                      description: >-
                        The ID of the field in the form associated with the
                        connected field.
                      type: number
                    provider_id:
                      description: |
                        A third-party email service provider.

                        Option descriptions:
                         * `1` - The provider is Mailchimp.
                         * `2` - The provider is Campaign Monitor.
                         * `3` - The provider is Constant Contact.
                         * `4` - The provider is Infusionsoft.
                         * `5` - The provider is HubSpot.
                         * `6` - The provider is Constant Contact V3.
                         * `7` - The provider is Marketo.
                      enum:
                        - 1
                        - 2
                        - 3
                        - 4
                        - 5
                        - 6
                        - 7
                      example: 1
                      type: string
                  required:
                    - email_service_provider_field_id
                    - form_field_id
                    - provider_id
                type: array
              field_metadata:
                description: >-
                  The metadata object that is associated with the field in the
                  form.
                properties:
                  options:
                    description: An array of options associated with the field.
                    items:
                      type: object
                      properties:
                        option_label:
                          description: The label for the field option.
                          type: string
                        option_position:
                          description: >-
                            The position of the option in the dropdown relative
                            to the others.
                          type: number
                      required:
                        - option_label
                        - option_position
                    type: array
                required:
                  - options
                type: object
              field_name:
                description: The name of a field in the form.
                type: string
              field_type:
                description: |
                  The type of custom field.

                  Option descriptions:
                   * `dropdown` - The custom field used for dropdown item selection.
                   * `text` - The custom field used for text input.
                enum:
                  - dropdown
                  - text
                example: dropdown
                type: string
              locked:
                description: >-
                  Whether the field's **required** property is editable but
                  **field_name** isn't. If the value is `true`, the field can't
                  be deleted.
                type: boolean
              required:
                description: Whether the field is required.
                type: boolean
              static_field:
                description: >-
                  Whether the field's **required** and **field_name** properties
                  are both uneditable. If the value is `true`, the field can't
                  be deleted.
                type: boolean
            required:
              - connected_fields
              - field_metadata
              - field_name
              - field_type
              - locked
              - required
              - static_field
          type: array
        id:
          description: The ID of the email capture form.
          example: 52845
          type: number
        position:
          description: |
            When the form appears relative to the video playback.

            Option descriptions:
             * `after-video` - The form appears immediately after the video ends.
             * `before-video` - The form appears before the video begins.
             * `during-video` - The form appears during the video at the time specified by the **timecode** field.
          enum:
            - after-video
            - before-video
            - during-video
          example: before-video
          type: string
        privacy_policy:
          description: The URL of the privacy policy related to the form.
          example: https://mywebsite.com/privacy-policy
          type: string
        skippable:
          description: Whether the user can skip the form.
          example: true
          type: boolean
        timecode:
          description: >-
            The timecode for when the form appears. This field is used when the
            value of **position** is `during-video`.
          example: '00:00'
          type: string
        uri:
          description: The canonical relative URI of the video's email capture form.
          example: /clip_email_capture_form/52845
          type: string
      required:
        - clip_id
        - created_time
        - custom_fields
        - custom_logo
        - custom_message
        - email_lists
        - hidden_fields
        - id
        - position
        - privacy_policy
        - skippable
        - timecode
        - uri
      type: object
    embed-settings:
      title: Embed Settings
      properties:
        title:
          description: A collection of information about the embeddable player's title bar.
          properties:
            name:
              description: |
                How the embeddable player handles the video title.

                Option descriptions:
                 * `hide` - The title is hidden.
                 * `show` - The title is shown.
                 * `user` - The title can be toggled to `show` or `hide` by the user.
              enum:
                - hide
                - show
                - user
              example: hide
              type: string
            owner:
              description: |
                How the embeddable player handles the video owner's information.

                Option descriptions:
                 * `hide` - The owner's information is hidden.
                 * `show` - The owner's information is shown.
                 * `user` - The owner's information can be toggled to `show` or `hide` by the user.
              enum:
                - hide
                - show
                - user
              example: hide
              type: string
            portrait:
              description: |
                How the embeddable player handles the video owner's portrait.

                Option descriptions:
                 * `hide` - The owner's portrait is hidden
                 * `show` - The owner's portrait is shown.
                 * `user` - The owner's portrait can be toggled to `show` or `hide` by the user.
              enum:
                - hide
                - show
                - user
              example: hide
              type: string
          required:
            - name
            - owner
            - portrait
          type: object
        airplay:
          description: Whether AirPlay is enabled in the embeddable player.
          example: true
          type: boolean
        audio_tracks:
          description: Whether multiple audio tracks can appear in the embeddable player.
          example: true
          type: boolean
        autopip:
          description: Whether automatic picture-in-picture is enabled.
          example: true
          type: boolean
        badges:
          description: A collection of the video's badges.
          properties:
            dolby_vision:
              description: Whether the video was filmed using Dolby Vision.
              type: boolean
            hdr:
              description: Whether the video has an HDR-compatible transcode.
              example: true
              type: boolean
            hdr_10:
              description: Whether the video was filmed using HDR10.
              type: boolean
            hdr_10_plus:
              description: Whether the video was filmed using HDR10 Plus.
              type: boolean
            live:
              properties:
                archived:
                  description: Whether the video was streamed live.
                  example: false
                  type: boolean
                streaming:
                  description: Whether the video is currently streaming live.
                  example: true
                  type: boolean
              required:
                - archived
                - streaming
              type: object
            staff_pick:
              properties:
                best_of_the_month:
                  description: Whether the video is a Vimeo Staff Pick Best of the Month.
                  example: false
                  type: boolean
                best_of_the_year:
                  description: Whether the video is a Vimeo Staff Pick Best of the Year.
                  example: false
                  type: boolean
                normal:
                  description: Whether the video is a Vimeo Staff Pick.
                  example: true
                  type: boolean
                premiere:
                  description: Whether the video is a Vimeo Staff Pick Premiere.
                  example: false
                  type: boolean
              required:
                - best_of_the_month
                - best_of_the_year
                - normal
                - premiere
              type: object
            vod:
              description: Whether the video is a Vimeo On Demand video.
              example: false
              type: boolean
            weekend_challenge:
              description: Whether the video is a Vimeo Weekend Challenge.
              example: false
              type: boolean
          required:
            - hdr
            - live
            - staff_pick
            - vod
            - weekend_challenge
          type: object
        buttons:
          description: >-
            A collection of information about the buttons that appear on the
            interface of the embeddable player.
          properties:
            embed:
              description: Whether the `embed` button appears in the embeddable player.
              example: true
              type: boolean
            fullscreen:
              description: >-
                Whether the `fullscreen` button appears in the embeddable
                player.
              example: true
              type: boolean
            hd:
              description: Whether the `HD` button appears in the embeddable player.
              example: true
              type: boolean
            like:
              description: Whether the `like` button appears in the embeddable player.
              example: true
              type: boolean
            reaction:
              description: Whether the reaction button appears in the embeddable player.
              example: true
              nullable: true
              type: boolean
            scaling:
              description: Whether the `scaling` button appears in the embeddable player.
              example: true
              type: boolean
            share:
              description: Whether the `share` button appears in the embeddable player.
              example: true
              type: boolean
            watchlater:
              description: >-
                Whether the `watch later` button appears in the embeddable
                player.
              example: true
              type: boolean
          required:
            - embed
            - fullscreen
            - hd
            - like
            - reaction
            - scaling
            - share
            - watchlater
          type: object
        cards:
          description: A collection of cards associated with the selected video.
          items:
            type: object
            properties:
              display_time:
                description: The number of seconds for which the card appears.
                type: number
              headline:
                description: The title of the card.
                type: string
              id:
                description: The UUID of the card.
                type: string
              image_url:
                description: The URL of the thumbnail for the card.
                type: string
              teaser:
                description: The description of the card.
                type: string
              timecode:
                description: >-
                  The playback timestamp, given in seconds, when the card
                  appears.
                type: number
              url:
                description: The URL of the card.
                type: string
            required:
              - display_time
              - headline
              - id
              - image_url
              - teaser
              - timecode
              - url
          type: array
        chapters:
          description: Whether chapters are enabled in the embeddable player.
          example: true
          type: boolean
        chromecast:
          description: Whether the Chromecast button appears in the embeddable player.
          example: true
          type: boolean
        closed_captions:
          description: Whether closed captions are enabled in the embeddable player.
          example: true
          type: boolean
        color:
          description: >-
            The first player color, which controls the color of the progress
            bar, buttons, and more.
          example: '#0a0808'
          type: string
        colors:
          description: A collection of information about player colors.
          properties:
            color_four:
              description: >-
                The fourth player color, which controls the player background
                color.
              example: '#aabbcc'
              type: string
            color_one:
              description: >-
                The first player color, which controls the color of the progress
                bar, buttons, and more.
              example: '#112233'
              type: string
            color_three:
              description: >-
                The third player color, which controls the color of text and
                icons.
              example: '#778899'
              type: string
            color_two:
              description: The second player color, which controls the player accent color.
              example: '#445566'
              type: string
          required:
            - color_four
            - color_one
            - color_three
            - color_two
          type: object
        email_capture_form:
          $ref: '#/components/schemas/email-capture-form'
        end_screen:
          description: >-
            A collection of information about the embeddable player's end
            screen.
          properties:
            type:
              description: |
                How the embeddable player handles the end screen.

                Option descriptions:
                 * `empty` - The end screen is empty.
                 * `loop` - The end screen loops the video playback.
                 * `share` - The end screen includes sharing options.
                 * `thumbnail` - The end screen includes the thumbnail of the video.
              enum:
                - empty
                - loop
                - share
                - thumbnail
              example: empty
              type: string
          required:
            - type
          type: object
        event_schedule:
          description: Whether the embedded player should display the event schedule.
          example: true
          type: boolean
        has_cards:
          description: Whether the video has cards.
          example: true
          type: boolean
        html:
          description: The HTML code for embedding the video on a web page.
          type: string
        interactive:
          description: Whether the video is an interactive video.
          example: true
          type: boolean
        logos:
          description: >-
            A collection of information about the logo in the corner of the
            embeddable player.
          properties:
            custom:
              description: >-
                A collection of information relating to custom logos in the
                embeddable player.
              properties:
                active:
                  description: Whether the custom logo appears in the embeddable player.
                  example: true
                  type: boolean
                link:
                  description: The URL that loads upon clicking the custom logo.
                  example: http://example.com
                  nullable: true
                  type: string
                sticky:
                  description: >-
                    Whether the custom logo appears even when the player
                    interface is hidden.
                  example: true
                  type: boolean
                url:
                  description: The URL of the selected custom logo.
                  example: http://example.com
                  nullable: true
                  type: string
                use_link:
                  description: Whether the custom logo should use the URL link.
                  example: true
                  type: boolean
              required:
                - active
                - link
                - sticky
                - url
                - use_link
              type: object
            vimeo:
              description: Whether the Vimeo logo appears in the embeddable player.
              example: true
              type: boolean
          required:
            - custom
            - vimeo
          type: object
        outro_type:
          description: |
            The type of the video outro.

            Option descriptions:
             * `beginning` - The outro is a thumbnail.
             * `custom` - The outro is custom.
             * `email` - The outro is an email form.
             * `image` - The outro is an image.
             * `link` - The outro is a link.
             * `loop` - The outro is a loop.
             * `nothing` - There is no outro.
             * `share` - The outro is a share button.
             * `text` - The outro is text.
             * `threevideos` - The outro is three video suggestions.
             * `videos` - The outro is video suggestions.
          enum:
            - beginning
            - custom
            - email
            - image
            - link
            - loop
            - nothing
            - share
            - text
            - threevideos
            - videos
          example: link
          type: string
        pip:
          description: >-
            Whether picture-in-picture is enabled and the button appears in the
            embeddable player.
          example: true
          type: boolean
        play_button:
          description: A representation of the play button's settings.
          properties:
            position:
              description: |
                The position of the play button within the embeddable player.

                Option descriptions:
                 * `auto` - Use Vimeo's default positioning for the play button.
                 * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.
                 * `center` - The play button is positioned in the center of the player.
              enum:
                - auto
                - bottom
                - center
              example: auto
              type: string
          required:
            - position
          type: object
        playbar:
          description: Whether the playbar appears in the embeddable player.
          example: true
          type: boolean
        quality_selector:
          description: Whether the quality selector appears in the embeddable player.
          example: true
          type: boolean
        show_timezone:
          description: Whether the embedded player should display the schedule timezone.
          example: false
          type: boolean
        speed:
          description: Whether the speed controls appear in the embeddable player.
          example: true
          type: boolean
        transcript:
          description: Whether the transcript controls appear in the embeddable player.
          example: true
          type: boolean
        uri:
          description: The URI of the embed preset.
          example: /videos/258684937/presets/12345
          type: string
        volume:
          description: Whether the volume controls appear in the embeddable player.
          example: true
          type: boolean
      required:
        - airplay
        - audio_tracks
        - autopip
        - badges
        - buttons
        - cards
        - chapters
        - chromecast
        - closed_captions
        - color
        - colors
        - email_capture_form
        - end_screen
        - event_schedule
        - has_cards
        - interactive
        - logos
        - outro_type
        - pip
        - play_button
        - playbar
        - quality_selector
        - show_timezone
        - speed
        - title
        - transcript
        - volume
      type: object
      x-konfig-properties:
        email_capture_form:
          description: The email capture form settings associated with the video.
    endpoint:
      title: Endpoint
      properties:
        methods:
          description: All HTTP methods permitted on this endpoint.
          items:
            type: string
          type: array
        path:
          description: >-
            The path section of the URL, which, when appended to the API host
            `https:///api.vimeo.com`, builds a full API endpoint.
          example: /me
          type: string
      required:
        - methods
        - path
      type: object
    error:
      title: Error
      properties:
        developer_message:
          description: The error message that technical users receive.
          example: The specified resource does not exist.
          type: string
        error:
          description: The error message that general users receive.
          example: Something strange occurred. Please try again.
          type: string
        error_code:
          description: The error code.
          example: 5000
          type: number
        link:
          description: A link to more information about the error.
          type: string
      required:
        - developer_message
        - error
        - error_code
        - link
      type: object
    fragments:
      title: Fragments
      properties:
        created_on:
          description: The time in ISO 8601 format when the fragment was created.
          example: '2022-05-23T15:24:31+00:00'
          type: string
        metadata:
          description: Metadata about the fragments.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                clip:
                  description: Information about the videos that belong to this channel.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/710320868
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - clip
              type: object
          required:
            - connections
          type: object
        modified_on:
          description: The time in ISO 8601 format when the fragment was last updated.
          example: '2022-05-23T15:24:31+00:00'
          type: string
        timecode:
          description: >-
            The time in milliseconds of the fragment's _inpoint_, or the time
            from the start of the video that marks the beginning of the
            fragment.
          example: 11145
          type: number
        uri:
          description: The URI of the video fragment.
          example: /videos/!clip_id/fragments
          type: string
      required:
        - created_on
        - metadata
        - modified_on
        - timecode
        - uri
      type: object
    group:
      title: Group
      properties:
        description:
          description: The group's description.
          example: >-
            Want to participate in our weekly challenges? Join the group to
            receive messages and new challenges!
          nullable: true
          type: string
        created_time:
          description: The time in ISO 8601 format when the group was created.
          example: '2008-07-05T14:52:43+00:00'
          type: string
        link:
          description: The link to the group.
          example: https://vimeo.com/groups/weekendchallenge
          type: string
        metadata:
          description: Metadata about the group.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                users:
                  description: Information about the members or moderators of the group.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of users on this connection.
                      example: 25798
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /groups/1108/users
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                videos:
                  description: Information about the videos contained within the group.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 7252
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /groups/1108/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - users
                - videos
              type: object
            interactions:
              description: >-
                User actions that have involved the group. This data requires a
                bearer token with the `private` scope.
              properties:
                join:
                  description: >-
                    An action indicating that someone has joined the group. This
                    data requires a bearer token with the `private` scope.
                  properties:
                    title:
                      description: >-
                        The user's title. If this field isn't applicable, it
                        takes the null value. This data requires a bearer token
                        with the `private` scope.
                      example: Vimeo Staff
                      nullable: true
                      type: string
                    added:
                      description: >-
                        Whether the user has followed the group. This data
                        requires a bearer token with the `private` scope.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the user joined the
                        group. This data requires a bearer token with the
                        `private` scope.
                      nullable: true
                      type: string
                    type:
                      description: >
                        Whether the user is a moderator or subscriber. This data
                        requires a bearer token with the `private` scope.


                        Option descriptions:
                         * `member` - The user is a member.
                         * `moderator` - The user is a moderator.
                      enum:
                        - member
                        - moderator
                      example: member
                      nullable: true
                      type: string
                    uri:
                      description: >-
                        The URI for following the group. PUT to this URI to
                        follow the group, or DELETE to this URI to unfollow the
                        group. This data requires a bearer token with the
                        `private` scope.
                      example: /users/152184/groups/1108
                      type: string
                  required:
                    - added
                    - added_time
                    - title
                    - type
                    - uri
                  type: object
              required:
                - join
              type: object
          required:
            - connections
            - interactions
          type: object
        modified_time:
          description: The time in ISO 8601 format when the group was last modified.
          example: '2018-09-16T15:41:45+00:00'
          type: string
        name:
          description: The group's display name.
          example: Vimeo Weekend Challenge
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        privacy:
          description: The group's privacy settings.
          properties:
            comment:
              description: |
                Who can comment on the group.

                Option descriptions:
                 * `all` - Anyone can comment on the group.
                 * `members` - Only group members can comment on the group.
              enum:
                - all
                - members
              example: all
              type: string
            invite:
              description: |
                Who can invite new members to the group.

                Option descriptions:
                 * `all` - Anyone can invite new members to the group.
                 * `members` - Only group members can invite new members to the group.
              enum:
                - all
                - members
              example: all
              type: string
            join:
              description: |
                Who can join the group.

                Option descriptions:
                 * `anybody` - Anyone can join the group.
                 * `members` - Only people with a Vimeo account can join the group.
              enum:
                - anybody
                - members
              example: anybody
              type: string
            videos:
              description: |
                Who can add videos to the group.

                Option descriptions:
                 * `all` - Anyone can add videos to the group.
                 * `members` - Only group members can add videos to the group.
              enum:
                - all
                - members
              example: all
              type: string
            view:
              description: |
                Who can access the group.

                Option descriptions:
                 * `anybody` - Anyone can access the group. This privacy setting appears as `Public` on the Vimeo front end.
                 * `members` - Only group members can access the group.
              enum:
                - anybody
                - members
              example: anybody
              type: string
          required:
            - comment
            - invite
            - join
            - videos
            - view
          type: object
        resource_key:
          description: The resource key of the group.
          example: dc724af18fbdd4e59189f5fe768a5f8311527050
          type: string
        uri:
          description: The canonical relative URI of the group.
          example: /groups/1108
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - created_time
        - description
        - link
        - metadata
        - modified_time
        - name
        - pictures
        - privacy
        - resource_key
        - uri
      type: object
      x-konfig-properties:
        pictures:
          description: The active picture for the group.
        user:
          description: The owner of the group.
          nullable: true
    hls-dash-video-file:
      title: HLS/DASH Video File
      properties:
        link:
          description: The direct link to the video file.
          example: https://player.vimeo.com/play/965853365?s=258684937_1537
          nullable: true
          type: string
        link_expiration_time:
          description: The time in ISO 8601 format when the link to the video file expires.
          example: '2017-05-16T17:21:51+00:00'
          type: string
        log:
          description: The URL for logging events.
          example: https:/api.vimeo.com/videos/258684937/log/12337123/76af42bfd
          nullable: true
          type: string
      required:
        - link
        - link_expiration_time
      type: object
    language:
      title: Language
      properties:
        code:
          description: The standard ISO 639-1 code for the language.
          example: en-US
          type: string
        name:
          description: The name of the language.
          example: English (United States)
          type: string
      required:
        - code
        - name
      type: object
    legacy-error:
      title: Legacy Error
      properties:
        error:
          description: The error message.
          example: Something strange occurred. Please try again.
          type: string
      required:
        - error
      type: object
    live-event:
      title: Live Event
      properties:
        title:
          description: >-
            The title of the event. This field is also optionally used as the
            base title for videos created by streaming to the event.
          example: Live Content
          type: string
        album:
          description: Information about the associated showcase.
          items:
            type: string
          nullable: true
          type: array
        allow_share_link:
          description: >-
            Whether the share link for the videos generated by streaming to the
            event is usable.
          example: true
          type: boolean
        allowed_privacies:
          description: >-
            An array of privacy settings supported for this event and the
            requesting user.
          items:
            type: string
          type: array
        auto_cc_enabled:
          description: Whether the automated closed captions feature is enabled.
          nullable: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          nullable: true
          type: string
        auto_cc_language:
          description: |
            The language of the automated closed captions.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          nullable: true
          type: string
        auto_cc_remaining:
          description: >-
            The amount of time remaining to the user to access the automated
            closed captions feature.
          nullable: true
          type: number
        automatically_title_stream:
          description: >-
            When the value of this field is `true`, the title for the next video
            in the event is generated based on the time of the stream and the
            **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display live chat on the event page on Vimeo.
          example: true
          type: boolean
        completed_on:
          description: The time in ISO 8601 format when the event was completed.
          example: '2021-11-11T11:24:56+00:00'
          type: string
        content_rating:
          description: |
            The event's granular content ratings.

            Option descriptions:
             * `advertisement` - The event contains advertisements.
             * `drugs` - The event contains drug or alcohol use.
             * `language` - The event contains profanity or sexually suggestive content.
             * `nudity` - The event contains nudity.
             * `safe` - The event is safe for all audiences.
             * `unrated` - The event hasn't been rated.
             * `violence` - The event contains violence.
          enum:
            - advertisement
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          items:
            type: string
            example: advertisement
          type: array
        created_time:
          description: The time in ISO 8601 format when the event was created.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        email_quota:
          description: Information about the event owner's email quota.
          properties:
            capping:
              description: The maximum number of entity emails that the user can send.
              example: 400
              type: number
            total:
              description: The current number of entity emails that the user has sent.
              example: 300
              type: number
          required:
            - capping
            - total
          type: object
        embed:
          description: The event's embed data.
          properties:
            title:
              description: Whether the embedded RLE player should display the video title.
              example: true
              type: boolean
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            autoplay:
              description: Whether the embedded RLE player should autoplay the RLE content.
              example: true
              type: boolean
            available_player_logos:
              description: >-
                The list of user-uploaded logos for configuration of the embed
                player.
              items:
                type: string
              type: array
            byline:
              description: >-
                Whether the embedded RLE player should display the author's
                name.
              example: true
              type: boolean
            chat_embed_source:
              description: The chat's iFrame source URL.
              nullable: true
              type: string
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: >-
                The first player color, which controls the color of the progress
                bar, buttons, and more.
              example: '#0a0808'
              type: string
            colors:
              description: A collection of information about player colors.
              properties:
                color_four:
                  description: >-
                    The fourth player color, which controls the player
                    background color.
                  example: '#aabbcc'
                  type: string
                color_one:
                  description: >-
                    The first player color, which controls the color of the
                    progress bar, buttons, and more.
                  example: '#112233'
                  type: string
                color_three:
                  description: >-
                    The third player color, which controls the color of text and
                    icons.
                  example: '#778899'
                  type: string
                color_two:
                  description: >-
                    The second player color, which controls the player accent
                    color.
                  example: '#445566'
                  type: string
              required:
                - color_four
                - color_one
                - color_three
                - color_two
              type: object
            embed_chat:
              description: The embed code for RLE chat.
              nullable: true
              type: string
            embed_properties:
              description: >-
                The height, width, and source URL properties used to generate
                the fixed HTML embed code.
              nullable: true
              properties:
                height:
                  description: The height used to generate the fixed HTML embed code.
                  type: string
                source_url:
                  description: The source URL used to generate the fixed HTML embed code.
                  type: string
                width:
                  description: The width used to generate the fixed HTML embed code.
                  type: string
              required:
                - height
                - source_url
                - width
              type: object
            event_schedule:
              description: >-
                Whether the embedded RLE player should display the event
                schedule.
              example: true
              type: boolean
            fullscreen_button:
              description: >-
                Whether the embedded RLE player should include the fullscreen
                controls.
              example: true
              type: boolean
            hide_live_label:
              description: Whether the Live label should be visible over the player.
              example: false
              type: boolean
            hide_viewer_count:
              description: Whether the embedded RLE player should hide the viewer counter.
              example: true
              type: boolean
            html:
              description: The fixed HTML code to embed the event's playlist on a website.
              nullable: true
              type: string
            like_button:
              description: >-
                Whether the embedded RLE player should include the `like`
                button.
              example: true
              type: boolean
            logos:
              description: >-
                A collection of information about the logo in the corner of the
                embeddable player.
              properties:
                custom:
                  description: >-
                    A collection of information relating to custom logos in the
                    embeddable player.
                  properties:
                    active:
                      description: >-
                        Whether the custom logo appears in the embeddable
                        player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads upon clicking the custom logo.
                      example: http://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo appears even when the player
                        interface is hidden.
                      example: true
                      type: boolean
                    url:
                      description: The URL source of the custom player logo.
                      example: http://example.com
                      type: string
                    use_link:
                      description: Whether the custom logo should use the URL link.
                      example: true
                      type: boolean
                  required:
                    - active
                    - link
                    - sticky
                    - url
                    - use_link
                  type: object
                vimeo:
                  description: >-
                    Whether the Vimeo logo appears in the embeddable player for
                    the video.
                  example: true
                  type: boolean
              required:
                - custom
                - vimeo
              type: object
            loop:
              description: >-
                Whether the embedded RLE player should loop back to the first
                video once content is exhausted.
              example: true
              type: boolean
            pip:
              description: >-
                Whether picture-in-picture is enabled and the button appears in
                the embeddable player.
              example: true
              type: boolean
            play_button_position:
              description: |
                The position of the player's play button.

                Option descriptions:
                 * `0` - The play button has the default position.
                 * `1` - The play button appears at the bottom of the interface.
                 * `2` - The play button appears in the center of the interface.
              enum:
                - 0
                - 1
                - 2
              type: string
            playbar:
              description: Whether the embedded RLE player should include the playbar.
              example: true
              type: boolean
            playlist:
              description: >-
                Whether the playlist component appears in the embeddable player
                for this RLE.
              example: true
              type: boolean
            portrait:
              description: >-
                Whether the embedded RLE player should display the author's
                portrait.
              example: true
              type: boolean
            responsive_html:
              description: >-
                The responsive HTML code to embed the event's playlist on a
                website.
              nullable: true
              type: string
            schedule:
              description: >-
                Whether the schedule component appears in the embeddable player
                for this RLE.
              example: true
              type: boolean
            show_latest_archived_clip:
              description: >-
                Whether the embedded RLE player should display the latest video
                placeholder.
              example: true
              type: boolean
            show_timezone:
              description: >-
                Whether the embedded RLE player should display the schedule
                timezone.
              example: false
              type: boolean
            use_color:
              description: >-
                Whether the embedded RLE player should use a custom color or the
                default Vimeo blue.
              example: 'true'
              type: string
            volume:
              description: >-
                Whether the embedded RLE player should include the volume
                controls.
              example: true
              type: boolean
          required:
            - airplay
            - autoplay
            - available_player_logos
            - byline
            - chat_embed_source
            - chromecast
            - closed_captions
            - color
            - colors
            - embed_chat
            - embed_properties
            - event_schedule
            - fullscreen_button
            - hide_live_label
            - hide_viewer_count
            - html
            - like_button
            - logos
            - loop
            - pip
            - play_button_position
            - playbar
            - playlist
            - portrait
            - responsive_html
            - schedule
            - show_latest_archived_clip
            - show_timezone
            - title
            - use_color
            - volume
          type: object
        from_showcase:
          description: Whether the event was created from a showcase.
          type: boolean
        from_webinar:
          description: Whether the event was created from a webinar.
          type: boolean
        head_clip:
          description: The first video to be played in the playlist.
          nullable: true
          type: object
        interaction_tools_settings:
          description: The settings for the interaction tools.
          items:
            type: object
            properties:
              is_anonymous_questions_disabled:
                description: >-
                  Whether anonymous questions are disabled for the interaction
                  tools settings.
                type: boolean
              is_qna_moderated:
                description: >-
                  Whether the Q&A is moderated for the interaction tools
                  settings.
                type: boolean
            required:
              - is_anonymous_questions_disabled
              - is_qna_moderated
          nullable: true
          type: array
        latency:
          description: |
            The type of latency.

            Option descriptions:
             * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.
             * `low` - The latency is low, with a delay of 5-7 seconds.
             * `standard` - The latency is standard, with a delay of 15-20 seconds.
          enum:
            - fail-safe
            - low
            - standard
          example: standard
          type: string
        lead_uuid:
          description: The unique ID for the registered viewer.
          type: string
        link:
          description: The URI to access the event on Vimeo.
          example: /events/12345
          type: string
        live_clips:
          description: >-
            A list of videos belonging to the event, including their video IDs
            and dates streamed.
          items:
            type: string
          type: array
        live_destinations:
          description: >-
            _This field is deprecated in favor of the following method:_ [Get
            all the destinations of a one-time live
            event](https://developer.vimeo.com/api/reference/live#get_one_time_event_destinations).
          items:
            type: string
          nullable: true
          type: array
        low_latency:
          description: Whether the low-latency feature is enabled.
          example: false
          type: boolean
        metadata:
          description: Metadata about the event.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                live_video:
                  description: Information about the event's live video, where applicable.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    status:
                      description: |
                        The status of the live video's RTMP link.

                        Option descriptions:
                         * `streaming` - The stream is open and receiving content.
                      enum:
                        - streaming
                      example: streaming
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos/12345
                      type: string
                  required:
                    - options
                    - status
                    - uri
                  type: object
                pictures:
                  description: Information about the event's thumbnails.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/pictures
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                pre_live_video:
                  description: >-
                    Information about the event's pre-live video, where
                    applicable. A pre-live video is either activated or in the
                    process of being activated.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    status:
                      description: |
                        The status of the pre-live video's RTMP link.

                        Option descriptions:
                         * `pending` - Vimeo is working on setting up the connection.
                         * `ready` - Resources have been provisioned for the event.
                         * `streaming` - Live video is currently streaming to the RTMP link.
                         * `unavailable` - The connection is ready, but streaming to the RTMP link has not yet begun.
                      enum:
                        - pending
                        - ready
                        - streaming
                        - unavailable
                      example: pending
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos/12345
                      type: string
                  required:
                    - options
                    - status
                    - uri
                  type: object
                team_member:
                  description: Information about the team member who owns the event.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/123456789/team_users/123456
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                videos:
                  description: Information about the videos that belong to the event.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 6
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - live_video
                - pictures
                - pre_live_video
                - team_member
                - videos
              type: object
            interactions:
              description: A list of resource URIs related to the event.
              properties:
                activate:
                  description: Information about where and how to activate the event.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                delete:
                  description: Information about where and how to delete an item.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                edit:
                  description: Information about where and how to edit an item.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - activate
                - delete
                - edit
              type: object
          required:
            - connections
            - interactions
          type: object
        next_occurrence_time:
          description: >-
            The date in ISO 8601 format on which the next occurrence of the
            event is expected to be live.
          example: '2018-07-30T14:00:00+00:00'
          nullable: true
          type: string
        parent_folder:
          $ref: '#/components/schemas/project'
        pictures:
          $ref: '#/components/schemas/picture'
        playlist_sort:
          description: >
            The order in which the videos inside the event appear in the
            playlist.


            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the event.
             * `comments` - The videos appear according to their number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order, with the newest first.
             * `oldest` - The videos appear in chronological order, with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        preferred_stream_method:
          description: |
            The preferred streaming method.

            Option descriptions:
             * `browser` - Stream in the browser.
             * `encoder` - Stream by the encoder.
          enum:
            - browser
            - encoder
          example: encoder
          type: string
        rtmp_link:
          description: >-
            The upstream RTMP link. Send your live content to this link to
            create a live video on the event.
          example: rtmp://rtmp.cloud.vimeo.com/live
          nullable: true
          type: string
        rtmp_preview:
          description: Whether to preview the RTMP stream before the event goes live.
          example: true
          type: boolean
        rtmps_link:
          description: >-
            The upstream RTMPS link. Send your live content to this link to
            create a live video on the event.
          example: rtmps://rtmp.cloud.vimeo.com/live
          nullable: true
          type: string
        schedule:
          $ref: '#/components/schemas/live-event-schedule'
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        status:
          description: |
            The status of the event.

            Option descriptions:
             * `ended` - The user ended the event.
             * `started` - The user started the event.
          enum:
            - ended
            - started
          example: started
          nullable: true
          type: string
        stream_description:
          description: The description of the next video streamed to the event.
          example: In this episode, we interview a surprise guest
          nullable: true
          type: string
        stream_key:
          description: The stream key used in conjunction with the RTMP and RTMPS links.
          example: ab9c8def-7a65-4321-b098-c7dd65e43f21
          nullable: true
          type: string
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
        stream_password:
          description: >-
            The password that anyone can use to access the videos generated by
            streaming to the event.
          example: hunter1
          nullable: true
          type: string
        stream_privacy:
          description: >-
            The initial privacy settings of videos generated by streaming to the
            event as well as the embed privacy of the entire collection.
          properties:
            embed:
              description: |
                The event's embed permission setting.

                Option descriptions:
                 * `private` - The event can't be embedded on any domain.
                 * `public` - The event can be embedded on any domain.
                 * `whitelist` - The event can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
            unlisted_hash:
              description: The hash for unlisted events.
              example: 1a2b3c4d5e
              nullable: true
              type: string
            view:
              description: >
                The general privacy setting for generated videos and the embed
                privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The videos don't appear on Vimeo, but they can be embedded elsewhere.
                 * `nobody` - Only the event owner can access the videos. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the videos.
                 * `unlisted` - Only those with the private link can access the videos.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          required:
            - embed
            - unlisted_hash
            - view
          type: object
        stream_title:
          description: >-
            The title of the next video streamed to the event. This field
            applies only when **automatically_title_stream** is `false`.
          example: Special Feature
          type: string
        streamable_clip:
          description: >-
            The event's video. An event always has a video, which is either in a
            pre-live state (ready to be streamed to) or in a live state (which
            is currently being streamed to).
          nullable: true
          type: object
        time_zone:
          description: >-
            The time zone used in resolving the timestamps included in
            auto-generated video titles.
          example: America/New_York
          type: string
        unlimited_auto_cc:
          description: >-
            Whether to ignore the time limit of the automated closed captions
            feature.
          nullable: true
          type: boolean
        unlimited_duration:
          description: Whether 24/7 streaming is enabled for the event.
          example: true
          type: boolean
        uri:
          description: The event's canonical relative URI.
          example: /live_events/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
        view_link:
          description: >-
            The URI to access the event on Vimeo with or without an unlisted
            hash.
          example: /events/12345
          type: string
        webinar:
          description: Information about the associated webinar.
          items:
            type: string
          nullable: true
          type: array
      required:
        - album
        - allow_share_link
        - allowed_privacies
        - auto_cc_enabled
        - auto_cc_keywords
        - auto_cc_language
        - auto_cc_remaining
        - automatically_title_stream
        - chat_enabled
        - completed_on
        - content_rating
        - created_time
        - dvr
        - email_quota
        - embed
        - from_showcase
        - head_clip
        - interaction_tools_settings
        - latency
        - lead_uuid
        - link
        - live_clips
        - live_destinations
        - low_latency
        - metadata
        - next_occurrence_time
        - parent_folder
        - pictures
        - playlist_sort
        - preferred_stream_method
        - rtmp_link
        - rtmp_preview
        - rtmps_link
        - schedule
        - scheduled_playback
        - status
        - stream_description
        - stream_key
        - stream_mode
        - stream_password
        - stream_privacy
        - stream_title
        - streamable_clip
        - time_zone
        - title
        - unlimited_auto_cc
        - unlimited_duration
        - uri
        - user
        - view_link
        - webinar
      type: object
      x-konfig-properties:
        parent_folder:
          description: Information about the folder that contains the event.
          nullable: true
        pictures:
          description: The active thumbnail image of the event.
        schedule:
          description: >-
            The description of the time or times that the event is expected to
            be live.
        user:
          description: The owner of the event.
    live-event-automated-closed-captions:
      title: Live Event Automated Closed Captions
      properties:
        auto_cc_can_be_enabled:
          description: Whether automated closed captions can be enabled.
          example: false
          type: boolean
        auto_cc_enabled:
          description: Whether the option for automated closed captions is enabled.
          example: true
          type: boolean
        auto_cc_is_unlimited:
          description: Whether automated closed captions are unlimited for the user.
          example: false
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          example: sun,water,wind
          type: string
        auto_cc_language:
          description: The language of the automated closed captions.
          example: en
          nullable: true
          type: string
        auto_cc_remaining:
          description: >-
            The number of minutes remaining for automated closed captions in the
            user's current period.
          example: 300
          type: number
        event_id:
          description: The ID of the event.
          example: 1111
          type: number
      required:
        - auto_cc_can_be_enabled
        - auto_cc_enabled
        - auto_cc_is_unlimited
        - auto_cc_keywords
        - auto_cc_language
        - auto_cc_remaining
        - event_id
      type: object
    live-event-destination:
      title: Live Event Destination
      properties:
        display_name:
          description: >-
            The name of the destination target, whether a page, profile name, or
            the like.
          example: Test page
          type: string
        id:
          description: The ID of the destination.
          example: 1234
          type: number
        is_enabled:
          description: Whether the destination is enabled.
          example: true
          type: boolean
        live_clip_id:
          description: The ID of the live video.
          example: 123456
          type: number
        privacy:
          description: |
            The privacy setting of the destination.

            Option descriptions:
             * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.
             * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.
             * `all_friends` - The privacy setting is `all_friends` for Facebook.
             * `everyone` - The privacy setting is `everyone` for Facebook.
             * `private` - The privacy setting is `private` for YouTube.
             * `public` - The privacy setting is `public` for YouTube.
             * `self` - The privacy setting is `self` for Facebook.
             * `unlisted` - The privacy setting is `unlisted` for YouTube.
          enum:
            - CONNECTIONS
            - PUBLIC
            - all_friends
            - everyone
            - private
            - public
            - self
            - unlisted
          example: public
          nullable: true
          type: string
        provider_broadcast_id:
          description: The destination ID of the destination service.
          example: 9fe254b7d55e7542da9fbd46a5deb947
          nullable: true
          type: string
        provider_destination_id:
          description: The broadcast ID of the destination service.
          example: fm4m34gm5oirbkjfkfnkkdhgfi45v3df34oz
          nullable: true
          type: string
        provider_user_id:
          description: The user ID of the destination service.
          example: a6378de4995a
          nullable: true
          type: string
        provider_video_id:
          description: The ID of the scheduled live video.
          example: '6817807391346708000'
          nullable: true
          type: string
        scheduled_at:
          description: >-
            The time in Unix timestamp format when live streaming is scheduled
            to start.
          example: 1625754461
          nullable: true
          type: number
        service_name:
          description: |
            The name of the destination service.

            Option descriptions:
             * `custom_rtmp` - The destination service is custom RTMP.
             * `facebook` - The destination service is Facebook Live.
             * `linkedin` - The destination service is LinkedIn Live.
             * `youtube` - The destination service is YouTube Live.
          enum:
            - custom_rtmp
            - facebook
            - linkedin
            - youtube
          example: facebook
          type: string
        state:
          description: |
            The status of the destination.

            Option descriptions:
             * `0` - The status is OK.
             * `1` - An error occurred. Check the `state_message` field for details.
          enum:
            - 0
            - 1
          type: string
        state_message:
          description: The message that describes the state of the destination.
          example: '"Couldn''t connect to rtmp://1.2.3.4/live"'
          nullable: true
          type: string
        stream_key:
          description: The stream key for the simulcast destination.
          example: b624fa1e-23d8-4d27-90f9-fe7d0ad700ed
          nullable: true
          type: string
        stream_url:
          description: The RTMP URL to stream to.
          example: rtmp://cooldomain.com/live
          nullable: true
          type: string
        type:
          description: |
            The type of the simulcast destination.

            Option descriptions:
             * `channel` - The destination is a YouTube channel.
             * `custom` - The destination is custom.
             * `organization` - The destination is a LinkedIn organization.
             * `page` - The destination is a Facebook page.
             * `profile` - The destination is a Facebook or LinkedIn profile.
          enum:
            - channel
            - custom
            - organization
            - page
            - profile
          example: channel
          type: string
        user_id:
          description: The ID of the destination's owner.
          example: 123456
          type: number
      required:
        - display_name
        - id
        - is_enabled
        - live_clip_id
        - privacy
        - provider_broadcast_id
        - provider_destination_id
        - provider_user_id
        - provider_video_id
        - scheduled_at
        - service_name
        - state
        - state_message
        - stream_key
        - stream_url
        - type
        - user_id
      type: object
    live-event-recurring:
      title: Live Event Recurring
      properties:
        title:
          description: >-
            The title of the event. This field is also optionally used as the
            base title for videos created by streaming to the event.
          example: Live Content
          type: string
        album:
          description: Information about the associated showcase.
          items:
            type: string
          nullable: true
          type: array
        allow_share_link:
          description: >-
            Whether the share link for the videos generated by streaming to the
            event is usable.
          example: true
          type: boolean
        allowed_privacies:
          description: >-
            An array of privacy settings supported for this event and the
            requesting user.
          items:
            type: string
          type: array
        auto_cc_enabled:
          description: Whether the automated closed captions feature is enabled.
          nullable: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          nullable: true
          type: string
        auto_cc_language:
          description: |
            The language of the automated closed captions.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          nullable: true
          type: string
        auto_cc_remaining:
          description: >-
            The amount of time remaining to the user to access the automated
            closed captions feature.
          nullable: true
          type: number
        automatically_title_stream:
          description: >-
            When the value of this field is `true`, the title for the next video
            in the event is generated based on the time of the stream and the
            **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display live chat on the event page on Vimeo.
          example: true
          type: boolean
        completed_on:
          description: The time in ISO 8601 format when the event was completed.
          example: '2021-11-11T11:24:56+00:00'
          type: string
        content_rating:
          description: |
            The event's granular content ratings.

            Option descriptions:
             * `advertisement` - The event contains advertisements.
             * `drugs` - The event contains drug or alcohol use.
             * `language` - The event contains profanity or sexually suggestive content.
             * `nudity` - The event contains nudity.
             * `safe` - The event is safe for all audiences.
             * `unrated` - The event hasn't been rated.
             * `violence` - The event contains violence.
          enum:
            - advertisement
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          items:
            type: string
            example: advertisement
          type: array
        created_time:
          description: The time in ISO 8601 format when the event was created.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        email_quota:
          description: Information about the event owner's email quota.
          properties:
            capping:
              description: The maximum number of entity emails that the user can send.
              example: 400
              type: number
            total:
              description: The current number of entity emails that the user has sent.
              example: 300
              type: number
          required:
            - capping
            - total
          type: object
        embed:
          description: The event's embed data.
          properties:
            title:
              description: Whether the embedded RLE player should display the video title.
              example: true
              type: boolean
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            autoplay:
              description: Whether the embedded RLE player should autoplay the RLE content.
              example: true
              type: boolean
            available_player_logos:
              description: >-
                The list of user-uploaded logos for configuration of the embed
                player.
              items:
                type: string
              type: array
            byline:
              description: >-
                Whether the embedded RLE player should display the author's
                name.
              example: true
              type: boolean
            chat_embed_source:
              description: The chat's iFrame source URL.
              nullable: true
              type: string
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: >-
                The first player color, which controls the color of the progress
                bar, buttons, and more.
              example: '#0a0808'
              type: string
            colors:
              description: A collection of information about player colors.
              properties:
                color_four:
                  description: >-
                    The fourth player color, which controls the player
                    background color.
                  example: '#aabbcc'
                  type: string
                color_one:
                  description: >-
                    The first player color, which controls the color of the
                    progress bar, buttons, and more.
                  example: '#112233'
                  type: string
                color_three:
                  description: >-
                    The third player color, which controls the color of text and
                    icons.
                  example: '#778899'
                  type: string
                color_two:
                  description: >-
                    The second player color, which controls the player accent
                    color.
                  example: '#445566'
                  type: string
              required:
                - color_four
                - color_one
                - color_three
                - color_two
              type: object
            embed_chat:
              description: The embed code for RLE chat.
              nullable: true
              type: string
            embed_properties:
              description: >-
                The height, width, and source URL properties used to generate
                the fixed HTML embed code.
              nullable: true
              properties:
                height:
                  description: The height used to generate the fixed HTML embed code.
                  type: string
                source_url:
                  description: The source URL used to generate the fixed HTML embed code.
                  type: string
                width:
                  description: The width used to generate the fixed HTML embed code.
                  type: string
              required:
                - height
                - source_url
                - width
              type: object
            event_schedule:
              description: >-
                Whether the embedded RLE player should display the event
                schedule.
              example: true
              type: boolean
            fullscreen_button:
              description: >-
                Whether the embedded RLE player should include the fullscreen
                controls.
              example: true
              type: boolean
            hide_live_label:
              description: Whether the Live label should be visible over the player.
              example: false
              type: boolean
            hide_viewer_count:
              description: Whether the embedded RLE player should hide the viewer counter.
              example: true
              type: boolean
            html:
              description: The fixed HTML code to embed the event's playlist on a website.
              nullable: true
              type: string
            like_button:
              description: >-
                Whether the embedded RLE player should include the `like`
                button.
              example: true
              type: boolean
            logos:
              description: >-
                A collection of information about the logo in the corner of the
                embeddable player.
              properties:
                custom:
                  description: >-
                    A collection of information relating to custom logos in the
                    embeddable player.
                  properties:
                    active:
                      description: >-
                        Whether the custom logo appears in the embeddable
                        player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads upon clicking the custom logo.
                      example: http://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo appears even when the player
                        interface is hidden.
                      example: true
                      type: boolean
                    url:
                      description: The URL source of the custom player logo.
                      example: http://example.com
                      type: string
                    use_link:
                      description: Whether the custom logo should use the URL link.
                      example: true
                      type: boolean
                  required:
                    - active
                    - link
                    - sticky
                    - url
                    - use_link
                  type: object
                vimeo:
                  description: >-
                    Whether the Vimeo logo appears in the embeddable player for
                    the video.
                  example: true
                  type: boolean
              required:
                - custom
                - vimeo
              type: object
            loop:
              description: >-
                Whether the embedded RLE player should loop back to the first
                video once content is exhausted.
              example: true
              type: boolean
            pip:
              description: >-
                Whether picture-in-picture is enabled and the button appears in
                the embeddable player.
              example: true
              type: boolean
            play_button_position:
              description: |
                The position of the player's play button.

                Option descriptions:
                 * `0` - The play button has the default position.
                 * `1` - The play button appears at the bottom of the interface.
                 * `2` - The play button appears in the center of the interface.
              enum:
                - 0
                - 1
                - 2
              type: string
            playbar:
              description: Whether the embedded RLE player should include the playbar.
              example: true
              type: boolean
            playlist:
              description: >-
                Whether the playlist component appears in the embeddable player
                for this RLE.
              example: true
              type: boolean
            portrait:
              description: >-
                Whether the embedded RLE player should display the author's
                portrait.
              example: true
              type: boolean
            responsive_html:
              description: >-
                The responsive HTML code to embed the event's playlist on a
                website.
              nullable: true
              type: string
            schedule:
              description: >-
                Whether the schedule component appears in the embeddable player
                for this RLE.
              example: true
              type: boolean
            show_latest_archived_clip:
              description: >-
                Whether the embedded RLE player should display the latest video
                placeholder.
              example: true
              type: boolean
            show_timezone:
              description: >-
                Whether the embedded RLE player should display the schedule
                timezone.
              example: false
              type: boolean
            use_color:
              description: >-
                Whether the embedded RLE player should use a custom color or the
                default Vimeo blue.
              example: 'true'
              type: string
            volume:
              description: >-
                Whether the embedded RLE player should include the volume
                controls.
              example: true
              type: boolean
          required:
            - airplay
            - autoplay
            - available_player_logos
            - byline
            - chat_embed_source
            - chromecast
            - closed_captions
            - color
            - colors
            - embed_chat
            - embed_properties
            - event_schedule
            - fullscreen_button
            - hide_live_label
            - hide_viewer_count
            - html
            - like_button
            - logos
            - loop
            - pip
            - play_button_position
            - playbar
            - playlist
            - portrait
            - responsive_html
            - schedule
            - show_latest_archived_clip
            - show_timezone
            - title
            - use_color
            - volume
          type: object
        from_showcase:
          description: Whether the event was created from a showcase.
          type: boolean
        from_webinar:
          description: Whether the event was created from a webinar.
          type: boolean
        head_clip:
          description: The first video to be played in the playlist.
          nullable: true
          type: object
        interaction_tools_settings:
          description: The settings for the interaction tools.
          items:
            type: object
            properties:
              is_anonymous_questions_disabled:
                description: >-
                  Whether anonymous questions are disabled for the interaction
                  tools settings.
                type: boolean
              is_qna_moderated:
                description: >-
                  Whether the Q&A is moderated for the interaction tools
                  settings.
                type: boolean
            required:
              - is_anonymous_questions_disabled
              - is_qna_moderated
          nullable: true
          type: array
        latency:
          description: |
            The type of latency.

            Option descriptions:
             * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.
             * `low` - The latency is low, with a delay of 5-7 seconds.
             * `standard` - The latency is standard, with a delay of 15-20 seconds.
          enum:
            - fail-safe
            - low
            - standard
          example: standard
          type: string
        lead_uuid:
          description: The unique ID for the registered viewer.
          type: string
        link:
          description: The URI to access the event on Vimeo.
          example: /events/12345
          type: string
        live_clips:
          description: >-
            A list of videos belonging to the event, including their video IDs
            and dates streamed.
          items:
            type: string
          type: array
        live_destinations:
          description: >-
            _This field is deprecated in favor of the following method:_ [Get
            all the destinations of a one-time live
            event](https://developer.vimeo.com/api/reference/live#get_one_time_event_destinations).
          items:
            type: string
          nullable: true
          type: array
        low_latency:
          description: Whether the low-latency feature is enabled.
          example: false
          type: boolean
        metadata:
          description: Metadata about the event.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                live_video:
                  description: Information about the event's live video, where applicable.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    status:
                      description: |
                        The status of the live video's RTMP link.

                        Option descriptions:
                         * `streaming` - The stream is open and receiving content.
                      enum:
                        - streaming
                      example: streaming
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos/12345
                      type: string
                  required:
                    - options
                    - status
                    - uri
                  type: object
                pictures:
                  description: Information about the event's thumbnails.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/pictures
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                pre_live_video:
                  description: >-
                    Information about the event's pre-live video, where
                    applicable. A pre-live video is either activated or in the
                    process of being activated.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    status:
                      description: |
                        The status of the pre-live video's RTMP link.

                        Option descriptions:
                         * `pending` - Vimeo is working on setting up the connection.
                         * `ready` - Resources have been provisioned for the event.
                         * `streaming` - Live video is currently streaming to the RTMP link.
                         * `unavailable` - The connection is ready, but streaming to the RTMP link has not yet begun.
                      enum:
                        - pending
                        - ready
                        - streaming
                        - unavailable
                      example: pending
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos/12345
                      type: string
                  required:
                    - options
                    - status
                    - uri
                  type: object
                team_member:
                  description: Information about the team member who owns the event.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/123456789/team_users/123456
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                videos:
                  description: Information about the videos that belong to the event.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 6
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - live_video
                - pictures
                - pre_live_video
                - team_member
                - videos
              type: object
            interactions:
              description: A list of resource URIs related to the event.
              properties:
                activate:
                  description: Information about where and how to activate the event.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                delete:
                  description: Information about where and how to delete an item.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                edit:
                  description: Information about where and how to edit an item.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - activate
                - delete
                - edit
              type: object
          required:
            - connections
            - interactions
          type: object
        next_occurrence_time:
          description: >-
            The date in ISO 8601 format on which the next occurrence of the
            event is expected to be live.
          example: '2018-07-30T14:00:00+00:00'
          nullable: true
          type: string
        parent_folder:
          $ref: '#/components/schemas/project'
        pictures:
          $ref: '#/components/schemas/picture'
        playlist_sort:
          description: >
            The order in which the videos inside the event appear in the
            playlist.


            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the event.
             * `comments` - The videos appear according to their number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order, with the newest first.
             * `oldest` - The videos appear in chronological order, with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        preferred_stream_method:
          description: |
            The preferred streaming method.

            Option descriptions:
             * `browser` - Stream in the browser.
             * `encoder` - Stream by the encoder.
          enum:
            - browser
            - encoder
          example: encoder
          type: string
        rtmp_link:
          description: >-
            The upstream RTMP link. Send your live content to this link to
            create a live video on the event.
          example: rtmp://rtmp.cloud.vimeo.com/live
          nullable: true
          type: string
        rtmp_preview:
          description: Whether to preview the RTMP stream before the event goes live.
          example: true
          type: boolean
        rtmps_link:
          description: >-
            The upstream RTMPS link. Send your live content to this link to
            create a live video on the event.
          example: rtmps://rtmp.cloud.vimeo.com/live
          nullable: true
          type: string
        schedule:
          $ref: '#/components/schemas/live-event-schedule'
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        status:
          description: |
            The status of the event.

            Option descriptions:
             * `ended` - The user ended the event.
             * `started` - The user started the event.
          enum:
            - ended
            - started
          example: started
          nullable: true
          type: string
        stream_description:
          description: The description of the next video streamed to the event.
          example: In this episode, we interview a surprise guest
          nullable: true
          type: string
        stream_key:
          description: The stream key used in conjunction with the RTMP and RTMPS links.
          example: ab9c8def-7a65-4321-b098-c7dd65e43f21
          nullable: true
          type: string
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
        stream_password:
          description: >-
            The password that anyone can use to access the videos generated by
            streaming to the event.
          example: hunter1
          nullable: true
          type: string
        stream_privacy:
          description: >-
            The initial privacy settings of videos generated by streaming to the
            event as well as the embed privacy of the entire collection.
          properties:
            embed:
              description: |
                The event's embed permission setting.

                Option descriptions:
                 * `private` - The event can't be embedded on any domain.
                 * `public` - The event can be embedded on any domain.
                 * `whitelist` - The event can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
            unlisted_hash:
              description: The hash for unlisted events.
              example: 1a2b3c4d5e
              nullable: true
              type: string
            view:
              description: >
                The general privacy setting for generated videos and the embed
                privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The videos don't appear on Vimeo, but they can be embedded elsewhere.
                 * `nobody` - Only the event owner can access the videos. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the videos.
                 * `unlisted` - Only those with the private link can access the videos.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          required:
            - embed
            - unlisted_hash
            - view
          type: object
        stream_title:
          description: >-
            The title of the next video streamed to the event. This field
            applies only when **automatically_title_stream** is `false`.
          example: Special Feature
          type: string
        streamable_clip:
          description: >-
            The event's video. An event always has a video, which is either in a
            pre-live state (ready to be streamed to) or in a live state (which
            is currently being streamed to).
          nullable: true
          type: object
        time_zone:
          description: >-
            The time zone used in resolving the timestamps included in
            auto-generated video titles.
          example: America/New_York
          type: string
        unlimited_auto_cc:
          description: >-
            Whether to ignore the time limit of the automated closed captions
            feature.
          nullable: true
          type: boolean
        unlimited_duration:
          description: Whether 24/7 streaming is enabled for the event.
          example: true
          type: boolean
        uri:
          description: The event's canonical relative URI.
          example: /live_events/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
        view_link:
          description: >-
            The URI to access the event on Vimeo with or without an unlisted
            hash.
          example: /events/12345
          type: string
        webinar:
          description: Information about the associated webinar.
          items:
            type: string
          nullable: true
          type: array
      required:
        - album
        - allow_share_link
        - allowed_privacies
        - auto_cc_enabled
        - auto_cc_keywords
        - auto_cc_language
        - auto_cc_remaining
        - automatically_title_stream
        - chat_enabled
        - completed_on
        - content_rating
        - created_time
        - dvr
        - email_quota
        - embed
        - from_showcase
        - head_clip
        - interaction_tools_settings
        - latency
        - lead_uuid
        - link
        - live_clips
        - live_destinations
        - low_latency
        - metadata
        - next_occurrence_time
        - parent_folder
        - pictures
        - playlist_sort
        - preferred_stream_method
        - rtmp_link
        - rtmp_preview
        - rtmps_link
        - schedule
        - scheduled_playback
        - status
        - stream_description
        - stream_key
        - stream_mode
        - stream_password
        - stream_privacy
        - stream_title
        - streamable_clip
        - time_zone
        - title
        - unlimited_auto_cc
        - unlimited_duration
        - uri
        - user
        - view_link
        - webinar
      type: object
      x-konfig-properties:
        parent_folder:
          description: Information about the folder that contains the event.
          nullable: true
        pictures:
          description: The active thumbnail image of the event.
        schedule:
          description: >-
            The description of the time or times that the event is expected to
            be live.
        user:
          description: The owner of the event.
    live-event-schedule:
      title: Live Event Schedule
      properties:
        daily_time:
          description: >-
            When **schedule.type** is `weekly`, the time in ISO 8601 format when
            the event is expected to be live.
          example: 14:00:00Z
          type: string
        end_time:
          description: The time in ISO 8601 format when the live event is expected to end.
          example: '2018-06-21T14:00:00+00:00'
          type: string
        rrule:
          description: >-
            The recurrence rule for the event's schedule according to [RFC
            5545](https://datatracker.ietf.org/doc/html/rfc5545).
          type: string
        scheduled_time:
          description: >-
            When **schedule.type** is `weekly`, the time in ISO 8601 format when
            the first occurrence of the event is expected to be live.
          example: '2018-06-21T14:00:00+00:00'
          type: string
        start_time:
          description: >-
            The time in ISO 8601 format when the live event is expected to be
            live.
          example: '2018-06-21T14:00:00+00:00'
          type: string
        time_zone:
          description: The time zone of the live event.
          type: string
        type:
          description: |
            The schedule of the live event.

            Option descriptions:
             * `single` - The event is live only once.
             * `weekly` - The event is live on a recurring weekly basis.
          enum:
            - single
            - weekly
          example: weekly
          type: string
        weekdays:
          description: >-
            When **schedule.type** is `weekly`, the weekdays in UTC when the
            event is expected to be live. The value of this field ranges from
            `1` to `7`, where `1` is Monday and `7` is Sunday.
          items:
            type: string
          type: array
      required:
        - type
      type: object
    live-event-session-status:
      title: Live Event Session Status
      properties:
        archive:
          description: Information about the archive data.
          properties:
            clip_id:
              description: The ID of the archived video.
              example: 1111
              type: number
            status:
              description: The status of the archive data.
              example: 0
              nullable: true
              type: number
          required:
            - clip_id
            - status
          type: object
        can_manage:
          description: Whether the current user can manage the event.
          example: true
          type: boolean
        id:
          description: The ID of the live video.
          example: 1111
          type: number
        ingest:
          description: The ingest of the video.
          properties:
            encoder_type:
              description: |
                The protocol used for this session.

                Option descriptions:
                 * `dash` - The protocol is DASH.
                 * `rtmp` - The protocol is RTMP.
                 * `simple_live` - The protocol is Simplelive.
                 * `studio_cloud` - The protocol is StudioCloud.
                 * `unknown` - The protocol is unknown or not set.
                 * `webrtc` - The protocol is WebRTC.
              enum:
                - dash
                - rtmp
                - simple_live
                - studio_cloud
                - unknown
                - webrtc
              example: rtmp
              type: string
            end_time:
              description: The timestamp in UTC format when the live stream ended.
              example: 1612451704
              nullable: true
              type: number
            height:
              description: The height of the live video in pixels.
              example: 100
              nullable: true
              type: number
            is_rtmp_session:
              description: Whether the session is using RTMP.
              example: true
              type: boolean
            is_scheduled_playback:
              description: Whether the stream is scheduled media playback.
              example: true
              nullable: true
              type: boolean
            rtmp_expires_at:
              description: The time in ISO 8601 format when the RTMP expires.
              example: '2018-07-30T14:00:00+00:00'
              nullable: true
              type: string
            rtmp_link:
              description: >-
                The upstream RTMP link. Send your live content to this link to
                create a live video on the event.
              example: rtmp://rtmp.cloud.vimeo.com/live
              nullable: true
              type: string
            rtmps_link:
              description: >-
                The upstream RTMPS link. Send your live content to this secure
                link to create a live video on the event.
              example: rtmps://rtmp.cloud.vimeo.com/live
              nullable: true
              type: string
            scheduled_start_time:
              description: The scheduled start time of the live video in ISO 8601 format.
              example: '2018-07-30T14:00:00+00:00'
              nullable: true
              type: string
            session_id:
              description: The session ID.
              nullable: true
              type: string
            start_time:
              description: The timestamp in UTC format when the live video started.
              example: 1612451704
              nullable: true
              type: number
            status:
              description: |
                The ingest status of the live video.

                Option descriptions:
                 * `0` - There’s a live video, but no RMTP URL or key.
                 * `1` - There’s an RMTP URL and key, but the machine is provisioning.
                 * `2` - There’s an RMTP URL and key, and the machine is provisioned, but the stream hasn’t started yet.
                 * `3` - There’s an RMTP URL and key, and the machine is provisioned, but the stream didn’t start before the machine timed out.
                 * `4` - The stream has started and is currently underway.
                 * `5` - The stream has ended.
              enum:
                - 0
                - 1
                - 2
                - 3
                - 4
                - 5
              example: '1'
              nullable: true
              type: string
            stream_ended_reason:
              description: >-
                The reason why the stream ended. If the stream hasn't ended,
                this field is empty.
              nullable: true
              type: number
            stream_key:
              description: >-
                The stream key used in conjunction with the RTMP and RTMPS
                links.
              example: ab9c8def-7a65-4321-b098-c7dd65e43f21
              nullable: true
              type: string
            width:
              description: The width of the live video in pixels.
              example: 100
              nullable: true
              type: number
          required:
            - encoder_type
            - end_time
            - height
            - is_rtmp_session
            - is_scheduled_playback
            - rtmp_expires_at
            - rtmp_link
            - rtmps_link
            - scheduled_start_time
            - session_id
            - start_time
            - status
            - stream_ended_reason
            - stream_key
            - width
          type: object
        metering:
          description: The metering status of the live video.
          properties:
            seconds_max:
              description: The maximum number of seconds.
              example: 0
              type: number
            seconds_remaining:
              description: The number of seconds remaining.
              example: 0
              type: number
          required:
            - seconds_max
            - seconds_remaining
          type: object
        status:
          description: |
            The status of the live event.

            Option descriptions:
             * `ended` - The live event has ended.
             * `started` - The live event has started.
          enum:
            - ended
            - started
          example: started
          nullable: true
          type: string
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
      required:
        - archive
        - can_manage
        - id
        - ingest
        - metering
        - status
        - stream_mode
      type: object
    location:
      title: Location
      properties:
        city:
          description: The authenticated user's city.
          example: New York City
          nullable: true
          type: string
        country:
          description: The authenticated user's country.
          example: United States
          nullable: true
          type: string
        country_iso_code:
          description: The ISO code of the authenticated user's country.
          example: US
          type: string
        formatted_address:
          description: The authenticated user's formatted address string.
          example: 123 Street, NY
          type: string
        latitude:
          description: The authenticated user's latitude.
          example: 20.2960586
          type: number
        longitude:
          description: The authenticated user's longitude.
          example: 185.8245392
          type: number
        neighborhood:
          description: The authenticated user's neighborhood.
          example: Brooklyn
          nullable: true
          type: string
        state:
          description: The authenticated user's state.
          example: New York
          nullable: true
          type: string
        state_iso_code:
          description: The ISO code of the authenticated user's state.
          example: NY
          nullable: true
          type: string
        sub_locality:
          description: The authenticated user's sub-locality.
          example: Brooklyn
          nullable: true
          type: string
      required:
        - city
        - country
        - country_iso_code
        - formatted_address
        - latitude
        - longitude
        - neighborhood
        - state
        - state_iso_code
        - sub_locality
      type: object
    on-demand-genre:
      title: On Demand Genre
      properties:
        canonical:
          description: The canonical name or URL slug of the genre.
          example: horror
          type: string
        interactions:
          properties:
            page:
              description: Interactions for On Demand pages that belong to the genre.
              properties:
                added:
                  description: Whether the On Demand genre was added.
                  example: true
                  type: boolean
                options:
                  description: An array of HTTP methods permitted on this URI.
                  items:
                    type: string
                  type: array
                uri:
                  description: The URI to access the On Demand page.
                  example: /ondemand/genres/horror/pages/12345
                  type: string
              required:
                - added
                - options
                - uri
              type: object
          required:
            - page
          type: object
        link:
          description: The Vimeo URL for the genre.
          example: http://vimeo.com/ondemand/browse/horror
          type: string
        metadata:
          properties:
            connections:
              description: A collection of information connected to this resource.
              properties:
                pages:
                  description: Information about the On Demand pages related to this group.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/genres/horror/pages
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - pages
              type: object
          required:
            - connections
          type: object
        name:
          description: The descriptive name of the genre.
          example: Horror
          type: string
        uri:
          description: The relative URI of the On Demand genre.
          example: /ondemand/genres/horror
          type: string
      required:
        - canonical
        - interactions
        - link
        - metadata
        - name
        - uri
      type: object
    on-demand-page:
      title: On Demand Page
      properties:
        description:
          description: The description of the On Demand page.
          example: >-
            DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins
            & Notions"
          nullable: true
          type: string
        background:
          $ref: '#/components/schemas/picture'
        colors:
          description: The first and second colors of the On Demand page.
          properties:
            primary:
              description: The hexadecimal color code for the On Demand page's first color.
              example: '#0a0808'
              type: string
            secondary:
              description: >-
                The hexadecimal color code for the On Demand page's second
                color.
              example: '#ba4a17'
              type: string
          required:
            - primary
            - secondary
          type: object
        content_rating:
          description: An array of the On Demand page's content ratings.
          items:
            type: string
          type: array
        created_time:
          description: The time in ISO 8601 format when the On Demand page was created.
          example: '2017-05-15T13:42:25+00:00'
          type: string
        domain_link:
          description: The link to the On Demand page on its own domain.
          example: https://example.com
          nullable: true
          type: string
        episodes:
          description: >-
            Information about the On Demand page's episodes, if the page is for
            a series.
          properties:
            buy:
              properties:
                active:
                  description: >-
                    Whether all the videos on the On Demand page can be
                    purchased as a whole.
                  example: true
                  type: boolean
                price:
                  description: The default price to buy an episode.
                  example: 9.99
                  nullable: true
                  type: number
              required:
                - active
                - price
              type: object
            rent:
              properties:
                active:
                  description: >-
                    Whether all the videos on the On Demand page can be rented
                    as a whole.
                  example: true
                  type: boolean
                period:
                  description: |
                    The rental period for the video.

                    Option descriptions:
                     * `1 day` - The rental period is one day.
                     * `1 month` - The rental period is one month.
                     * `1 week` - The rental period is one week.
                     * `1 year` - The rental period is one year.
                     * `2 day` - The rental period is two days.
                     * `24 hour` - The rental period is 24 hours.
                     * `3 day` - The rental period is three days.
                     * `3 month` - The rental period is three months.
                     * `30 day` - The rental period is 30 days.
                     * `48 hour` - The rental period is 48 hours.
                     * `6 month` - The rental period is six months.
                     * `60 day` - The rental period is 60 days.
                     * `7 day` - The rental period is 7 days.
                     * `72 hour` - The rental period is 72 hours.
                  enum:
                    - 1 day
                    - 1 month
                    - 1 week
                    - 1 year
                    - 2 day
                    - 24 hour
                    - 3 day
                    - 3 month
                    - 30 day
                    - 48 hour
                    - 6 month
                    - 60 day
                    - 7 day
                    - 72 hour
                  example: 1 day
                  nullable: true
                  type: string
                price:
                  description: The default price to rent an episode.
                  example: 2.99
                  nullable: true
                  type: number
              required:
                - active
                - period
                - price
              type: object
          required:
            - buy
            - rent
          type: object
        film:
          $ref: '#/components/schemas/video'
        genres:
          description: An array of the genres assigned to the On Demand page.
          items:
            $ref: '#/components/schemas/on-demand-genre'
          type: array
        link:
          description: The link to the On Demand page.
          example: https://vimeo.com/ondemand/darbyforever
          type: string
        metadata:
          description: Metadata about the On Demand page.
          properties:
            connections:
              description: >-
                A collection of information that is connected to this resource,
                including videos, genres, and pictures connections.
              properties:
                metadata:
                  properties:
                    connections:
                      properties:
                        comments:
                          description: >-
                            Information about the comments associated with the
                            On Demand page.
                          properties:
                            options:
                              description: An array of HTTP methods permitted on this URI.
                              items:
                                type: string
                              type: array
                            total:
                              description: The total number of comments on this connection.
                              example: 4
                              type: number
                            uri:
                              description: >-
                                The API URI that resolves to the connection
                                data.
                              example: /ondemand/pages/61326/comments
                              type: string
                          required:
                            - options
                            - total
                            - uri
                          type: object
                        genres:
                          description: >-
                            Information about the genres associated with the On
                            Demand page.
                          properties:
                            options:
                              description: An array of HTTP methods permitted on this URI.
                              items:
                                type: string
                              type: array
                            total:
                              description: The total number of genres on this connection.
                              example: 9
                              type: number
                            uri:
                              description: >-
                                The API URI that resolves to the connection
                                data.
                              example: /ondemand/pages/61326/genres
                              type: string
                          required:
                            - options
                            - total
                            - uri
                          type: object
                        likes:
                          description: >-
                            Information about the likes associated with the On
                            Demand page.
                          properties:
                            options:
                              description: An array of HTTP methods permitted on this URI.
                              items:
                                type: string
                              type: array
                            total:
                              description: The total number of likes on this connection.
                              example: 15
                              type: number
                            uri:
                              description: >-
                                The API URI that resolves to the connection
                                data.
                              example: /ondemand/pages/61326/likes
                              type: string
                          required:
                            - options
                            - total
                            - uri
                          type: object
                        pictures:
                          description: >-
                            Information about the pictures associated with the
                            On Demand page.
                          properties:
                            options:
                              description: An array of HTTP methods permitted on this URI.
                              items:
                                type: string
                              type: array
                            total:
                              description: The total number of pictures on this connection.
                              example: 3
                              type: number
                            uri:
                              description: >-
                                The API URI that resolves to the connection
                                data.
                              example: /ondemand/pages/61326/pictures
                              type: string
                          required:
                            - options
                            - total
                            - uri
                          type: object
                        seasons:
                          description: >-
                            Information about the seasons associated with the On
                            Demand page.
                          properties:
                            options:
                              description: An array of HTTP methods permitted on this URI.
                              items:
                                type: string
                              type: array
                            total:
                              description: The total number of seasons on this connection.
                              example: 3
                              type: number
                            uri:
                              description: >-
                                The API URI that resolves to the connection
                                data.
                              example: /ondemand/pages/61326/seasons
                              type: string
                          required:
                            - options
                            - total
                            - uri
                          type: object
                        videos:
                          description: >-
                            Information about the videos associated with the On
                            Demand page.
                          properties:
                            extra_total:
                              description: >-
                                The total number of extra videos on the On
                                Demand page.
                              example: 14
                              type: number
                            main_total:
                              description: >-
                                The total number of main videos on the On Demand
                                page.
                              example: 36
                              type: number
                            options:
                              description: An array of HTTP methods permitted on this URI.
                              items:
                                type: string
                              type: array
                            total:
                              description: The total number of videos on this connection.
                              example: 50
                              type: number
                            uri:
                              description: >-
                                The API URI that resolves to the connection
                                data.
                              example: /ondemand/pages/61326/videos
                              type: string
                            viewable_total:
                              description: >-
                                The total number of viewable videos on the On
                                Demand page.
                              example: 50
                              type: number
                          required:
                            - extra_total
                            - main_total
                            - options
                            - total
                            - uri
                            - viewable_total
                          type: object
                      required:
                        - comments
                        - genres
                        - likes
                        - pictures
                        - seasons
                        - videos
                      type: object
                  required:
                    - connections
                  type: object
              required:
                - metadata
              type: object
            interactions:
              $ref: '#/components/schemas/purchase-interaction'
          required:
            - connections
            - interactions
          type: object
          x-konfig-properties:
            interactions:
              description: The user's available purchase interactions.
        modified_time:
          description: >-
            The time in ISO 8601 format when the On Demand page was last
            modified.
          example: '2017-05-15T13:42:25+00:00'
          type: string
        name:
          description: The descriptive title of the On Demand page.
          example: Darby Forever
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        preorder:
          properties:
            active:
              description: Whether the On Demand page is available for preorder.
              example: true
              type: boolean
            cancel_time:
              description: The time in ISO 8601 format when the preorder was cancelled.
              example: '2017-05-16T13:13:46+00:00'
              type: string
            publish_time:
              description: >-
                The time in ISO 8601 format when the preorder was released to
                the public.
              example: '2017-05-15T13:12:52+00:00'
              type: string
            time:
              description: The time in ISO 8601 format when the preorder started.
              example: '2017-05-15T13:13:31+00:00'
              type: string
          required:
            - active
            - cancel_time
            - publish_time
            - time
          type: object
        published:
          properties:
            enabled:
              description: Whether the On Demand page has been published.
              example: true
              type: boolean
            time:
              description: The time in ISO 8601 format when this page was published.
              example: '2017-05-15T13:12:52+00:00'
              type: string
          required:
            - enabled
            - time
          type: object
        rating:
          description: The rating of the On Demand page.
          example: 7
          nullable: true
          type: number
        resource_key:
          description: The On Demand resource key.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        sku:
          description: The creator-designated SKU for the On Demand page.
          example: VIME0001
          nullable: true
          type: string
        subscription:
          description: >-
            Information about subscribing to the On Demand page, if subscription
            is enabled.
          nullable: true
          properties:
            active:
              description: Whether the On Demand product is active.
              example: true
              type: boolean
            link:
              description: The link to the On Demand product.
              example: https://vimeo.com/ondemand/darbyforever
              nullable: true
              type: string
            period:
              description: The On Demand product's rental period.
              type: string
            price:
              description: >-
                The accepted currencies and respective pricing for the On Demand
                product.
              type: object
          required:
            - active
            - link
            - price
          type: object
        theme:
          description: The graphical theme for the On Demand page.
          example: vader
          type: string
        thumbnail:
          $ref: '#/components/schemas/picture'
        trailer:
          $ref: '#/components/schemas/video'
        type:
          description: |
            Whether the On Demand page is for a film or a series.

            Option descriptions:
             * `film` - The On Demand page is for a film.
             * `series` - The On Demand page is for a series.
          enum:
            - film
            - series
          example: film
          type: string
        uri:
          description: The relative URI of the On Demand page.
          example: /ondemand/pages/61326
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - background
        - colors
        - content_rating
        - description
        - domain_link
        - episodes
        - genres
        - link
        - metadata
        - name
        - pictures
        - preorder
        - published
        - rating
        - resource_key
        - subscription
        - theme
        - thumbnail
        - trailer
        - type
        - uri
        - user
      type: object
      x-konfig-properties:
        background:
          description: The background image for the On Demand page.
          nullable: true
        film:
          description: The On Demand page's film, if the page is for a film.
        pictures:
          description: The active poster for the On Demand page.
          nullable: true
        thumbnail:
          description: The thumbnail image for the On Demand page.
          nullable: true
        trailer:
          description: The trailer for the On Demand page.
          nullable: true
        user:
          description: The user who created the On Demand page.
          nullable: true
    on-demand-promotion:
      title: On Demand Promotion
      properties:
        access_type:
          description: |
            The type of access that the promotion grants.

            Option descriptions:
             * `default` - The promotion grants discounts on existing product offerings.
             * `vip` - The promotion grants free access to On Demand content before it's released, or to access types that aren't part of the existing product offerings.
          enum:
            - default
            - vip
          example: default
          type: string
        discount_type:
          description: |
            The type of discount that the promotion provides.

            Option descriptions:
             * `dollars` - The promotion discounts a fixed amount from the full purchase price.
             * `free` - The promotion discounts the full purchase price. When **access_type** is `vip`, **discount_type** is always `free`.
             * `percent` - The promotion discounts a percentage of the full purchase price.
          enum:
            - dollars
            - free
            - percent
          example: free
          type: string
        download:
          description: Whether the promotion grants download access to On Demand content.
          example: true
          type: boolean
        label:
          description: >-
            The prefix string for batch codes, or the null value for single
            codes.
          example: 8jgaieumbzstujhn8k304iwwezawkvwm
          nullable: true
          type: string
        metadata:
          description: The video's metadata.
          properties:
            connections:
              description: A list of resource URIs related to the promotion.
              properties:
                codes:
                  description: Information about the codes associated with the promotion.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of uses on this connection.
                      example: 1
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/pages/61326/promotion/12345/codes
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - codes
              type: object
          required:
            - connections
          type: object
        percent_off:
          description: >-
            When **discount_type** is `percent`, the percentage amount that is
            deducted from the product price.
          example: 100
          type: number
        product_type:
          description: >
            The type of product to which the promotion can be applied. Only the
            `buy` and `rent` options are available when **access_type** is
            `vip`.


            Option descriptions:
             * `any` - The promotion can be applied to any product.
             * `buy` - The promotion can be applied to a buyable single video.
             * `buy_episode` - The promotion can be applied to a buyable single episode.
             * `rent` - The promotion can be applied to a rentable single video.
             * `rent_episode` - The promotion can be applied to a rentable single episode.
             * `subscribe` - The promotion can be applied to a subscription.
          enum:
            - any
            - buy
            - buy_episode
            - rent
            - rent_episode
            - subscribe
          example: any
          type: string
        stream_period:
          description: >
            The amount of time that the user has access to the On Demand content
            after redeeming a promo code.


            Option descriptions:
             * `1_week` - Access lasts for one week.
             * `1_year` - Access lasts for one year.
             * `24_hour` - Access lasts for 24 hours.
             * `30_days` - Access lasts for 30 days.
             * `3_month` - Access lasts for three months.
             * `48_hour` - Access lasts for 48 hours.
             * `6_month` - Access lasts for six months.
             * `72_hour` - Access lasts for 72 hours.
          enum:
            - 1_week
            - 1_year
            - 24_hour
            - 30_days
            - 3_month
            - 48_hour
            - 6_month
            - 72_hour
          example: 1_week
          nullable: true
          type: string
        total:
          description: >-
            When **type** is `single`, the total number of times that the
            promotion can be used. When **type** is `batch` or `batch_prefix`,
            the total number of promo codes that have been generated.
          example: 1
          type: number
        type:
          description: |
            The way in which the promotion generates promo codes.

            Option descriptions:
             * `batch` - The promotion provides a unique promo code for each user.
             * `batch_prefix` - Like `batch`, except that all codes have a similar prefix string. _This option is deprecated, yet it may still appear for some users._
             * `single` - The promotion provides a single promo code for all users.
          enum:
            - batch
            - batch_prefix
            - single
          example: batch
          type: string
        uri:
          description: The promotion's canonical relative URI.
          example: /ondemand/pages/61326/promotions/12345
          type: string
      required:
        - access_type
        - discount_type
        - download
        - label
        - metadata
        - percent_off
        - product_type
        - stream_period
        - total
        - type
        - uri
      type: object
    on-demand-promotion-code:
      title: On Demand Promotion Code
      properties:
        code:
          description: The Vimeo promotion code.
          example: 8jgaieumbzstujhn8k304iwwezawkvwm
          type: string
        link:
          description: The link to redeem the promotion code.
          example: https://vimeo.com/r/0trBLg/OGpnYWlldW
          type: string
        max_uses:
          description: The total number of times that this code can be used.
          example: 1
          type: number
        uses:
          description: The current number of times that this code has been used.
          example: 0
          type: number
      required:
        - code
        - link
        - max_uses
        - uses
      type: object
    on-demand-region:
      title: On Demand Region
      properties:
        country_code:
          description: The ISO 3166-1 alpha-2 code for this country.
          example: US
          type: string
        country_name:
          description: The descriptive name of this country.
          example: United States
          type: string
        uri:
          description: The region container's relative URI.
          example: /ondemand/pages/61326/regions/US
          type: string
      required:
        - country_code
        - country_name
        - uri
      type: object
    on-demand-season:
      title: On Demand Season
      properties:
        description:
          description: The description of the season.
          example: Season 1
          type: string
        metadata:
          properties:
            connections:
              properties:
                videos:
                  description: The connection to the associated videos.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 13
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/pages/61326/season/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - videos
              type: object
          required:
            - connections
          type: object
        name:
          description: The name of the season.
          example: Season 1
          type: string
        position:
          description: The position of the season relative to other seasons in the series.
          example: 1
          type: number
        resource_key:
          description: The unique identifier of the On Demand season.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        type:
          description: The type of the season.
          example: main
          type: string
        uri:
          description: The season container's relative URI.
          example: /ondemand/pages/61326/seasons/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - description
        - metadata
        - name
        - position
        - resource_key
        - type
        - uri
        - user
      type: object
      x-konfig-properties:
        user:
          description: The creator of the season's On Demand page.
          nullable: true
    on-demand-video:
      title: On Demand Video
      properties:
        description:
          description: The description of the video.
          example: >-
            This video provides in-depth instruction in the use of the Vimeo
            API.
          type: string
        buy:
          description: Information about purchasing the video.
          nullable: true
          properties:
            active:
              description: Whether the video can be purchased.
              example: true
              type: boolean
            price:
              description: A map of currency type to price.
              type: object
            purchased:
              description: Whether the video has been purchased.
              example: true
              type: boolean
          required:
            - active
            - price
          type: object
        duration:
          description: The duration of the video.
          example: '1197'
          type: string
        episode:
          description: The episode number of the video.
          example: 1
          type: number
        interactions:
          description: >-
            An object containing information about how the authenticated user
            can interact with the video's On Demand page.
          properties:
            page:
              description: >-
                Information about how the authenticated user can interact with
                the connection to the video's On Demand page.
              properties:
                added:
                  description: Whether the On Demand page was added.
                  example: true
                  type: boolean
                options:
                  description: An array of HTTP methods permitted on this URI.
                  items:
                    type: string
                  type: array
                uri:
                  description: The URI to access the On Demand page.
                  example: /ondemand/pages/61326
                  type: string
              required:
                - added
                - options
                - uri
              type: object
          required:
            - page
          type: object
        link:
          description: The link to the video on Vimeo.
          example: https://vimeo.com/ondemand/darbyforever/12345
          type: string
        metadata:
          description: Metadata information about the video.
          properties:
            connections:
              properties:
                season:
                  description: Information about the video's season.
                  properties:
                    name:
                      description: The name of the season on this connection.
                      example: Season 1
                      type: string
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/pages/61326/seasons/12345
                      type: string
                  required:
                    - name
                    - options
                    - uri
                  type: object
              required:
                - season
              type: object
            interactions:
              properties:
                likes:
                  description: >-
                    Information about the authenticated user's interaction to
                    like the video.
                  properties:
                    added:
                      description: Whether the authenticated user has liked the video.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the authenticated user
                        liked the video.
                      example: '2017-05-12T21:42:42+00:00'
                      type: string
                    uri:
                      description: The URI for the authenticated user to like the video.
                      example: /users/152184/likes/12345
                      type: string
                  required:
                    - added
                    - added_time
                    - uri
                  type: object
                watchlater:
                  description: >-
                    Information about the authenticated user's interaction to
                    watch the video later.
                  properties:
                    added:
                      description: >-
                        Whether the authenticated user has added the video to
                        their Watch Later queue.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the authenticated user
                        added the video to their Watch Later queue.
                      example: '2017-05-12T21:42:42+00:00'
                      type: string
                    uri:
                      description: >-
                        The URI for the authenticated user to add the video to
                        their Watch Later queue.
                      example: /users/152184/watchlater/12345
                      type: string
                  required:
                    - added
                    - added_time
                    - uri
                  type: object
              required:
                - likes
                - watchlater
              type: object
          required:
            - connections
            - interactions
          type: object
        name:
          description: The title of the video.
          example: Darby Forever
          type: string
        options:
          description: An array of HTTP methods permitted on this URI.
          items:
            type: string
          type: array
        pictures:
          $ref: '#/components/schemas/picture'
        play_progress:
          description: >-
            The authenticated user's most recent play position in the video, in
            seconds.
          example: 30
          type: number
        position:
          description: >-
            The position of the video relative to the other videos on the On
            Demand page.
          example: 1
          type: number
        release_date:
          description: The time in ISO 8601 format when the video was created or published.
          example: '2017-05-12T21:06:42+00:00'
          type: string
        release_year:
          description: The year that the video was released.
          example: 2016
          nullable: true
          type: number
        rent:
          description: Information about renting the video.
          nullable: true
          properties:
            active:
              description: Whether the video can be rented.
              example: true
              type: boolean
            price:
              description: A map of currency type to price.
              type: object
            purchased:
              description: Whether the video has been rented.
              example: true
              type: boolean
          required:
            - active
            - price
          type: object
        type:
          description: |
            The type of video.

            Option descriptions:
             * `extra` - The video is an extra feature.
             * `main` - The video is a main feature.
             * `trailer` - The video is a trailer.
          enum:
            - extra
            - main
            - trailer
          example: main
          type: string
        uri:
          description: The video container's relative URI.
          example: /ondemand/pages/61326/videos/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - buy
        - interactions
        - link
        - metadata
        - play_progress
        - release_year
        - rent
        - type
        - uri
      type: object
      x-konfig-properties:
        pictures:
          description: The active picture of the video.
        user:
          description: The owner of the video.
    ott-destination:
      title: OTT Destination
      properties:
        id:
          description: The OTT destination's canonical relative URI.
          example: /ott/destination/1111
          type: string
        ott_channel_id:
          description: The ID of the OTT channel.
          example: 1111
          type: number
        ott_channel_name:
          description: The name of the OTT channel.
          example: Channel One
          type: string
        ott_channel_subdomain:
          description: The subdomain of the OTT channel.
          example: subdomain
          type: string
        ott_event_id:
          description: The ID of the OTT event.
          example: 1111
          type: number
        recurring_live_event_id:
          description: The ID of the current recurring live event.
          example: 1111
          type: number
      required:
        - id
        - ott_channel_id
        - ott_channel_name
        - ott_channel_subdomain
        - ott_event_id
        - recurring_live_event_id
      type: object
    payment-method:
      title: Payment Method
      properties:
        account_id:
          description: The ID of the account.
          example: abc12345
          type: string
        card:
          description: Information about the card used to make the payment.
          properties:
            billing_address:
              description: The billing address of the card.
              properties:
                address:
                  description: The street address of the billing address.
                  example: 123 Main St.
                  type: string
                city:
                  description: The city of the billing address.
                  example: New York
                  type: string
                country:
                  description: The country of the billing address.
                  example: US
                  type: string
                postal_code:
                  description: The postal code of the billing address.
                  example: '10001'
                  type: string
                state:
                  description: The state of the billing address.
                  example: NY
                  type: string
              type: object
            bin:
              description: The bank identification number of the card.
              example: '123456'
              type: string
            brand:
              description: The brand of the card.
              example: Visa
              type: string
            cardholder_name:
              description: The name of the cardholder.
              example: John Doe
              type: string
            expiration_month:
              description: The expiration month of the card.
              example: 1
              type: number
            expiration_year:
              description: The expiration year of the card.
              example: 2020
              type: number
            last_four_digits:
              description: The last four digits of the card.
              example: '1234'
              type: string
          type: object
        created_at:
          description: The time when the payment method was created.
          example: '2019-01-01T00:00:00+00:00'
          type: string
        disabled_at:
          description: The time when the payment method was disabled.
          example: '2019-01-01T00:00:00+00:00'
          type: string
        id:
          description: The ID of the payment method.
          example: abc12345
          type: string
        is_default:
          description: >-
            Whether the payment method is the default payment method for the
            account.
          example: true
          type: boolean
        type:
          description: |
            The type of payment method.

            Option descriptions:
             * `0` - The payment method type is unspecified.
             * `1` - The payment method is a card.
             * `2` - The payment method is a PayPal account.
             * `3` - The payment method is a bank account.
             * `4` - The payment method is Apple Pay.
             * `5` - The payment method is Google Pay.
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
          example: '1'
          type: string
        updated_at:
          description: The time when the payment method was last updated.
          example: '2019-01-01T00:00:00+00:00'
          type: string
      required:
        - account_id
        - created_at
        - disabled_at
        - id
        - is_default
        - type
        - updated_at
      type: object
    permission-policy:
      title: Permission Policy
      properties:
        created_on:
          description: The time at which the permission policy was created.
          type: string
        display_description:
          description: >-
            The display description of the permission policy, translated where
            applicable.
          type: string
        display_name:
          description: >-
            The display name of the permission policy, translated where
            applicable.
          type: string
        modified_on:
          description: The time at which the permission policy was last modified.
          nullable: true
          type: string
        name:
          description: The name of the permission policy.
          type: string
        permission_actions:
          description: The permission actions associated with the policy.
          type: object
        uri:
          description: The URI of the permission policy.
          example: /users/12345/permission_policies/56789
          type: string
      required:
        - created_on
        - display_description
        - display_name
        - modified_on
        - name
        - permission_actions
        - uri
      type: object
    picture:
      title: Picture
      properties:
        active:
          description: Whether the picture is currently active.
          example: true
          type: boolean
        base_link:
          description: The base link to the image file, without any parameters.
          example: >-
            https://i.vimeocdn.com/video/1130929417-276se668248611ce41e6f7d438196e3412863bad9a5c3bcaf1a14453454cc5-d
          type: string
        default_picture:
          description: Whether the picture is Vimeo's default.
          example: false
          type: boolean
        link:
          description: >-
            The upload URL of the picture. This field appears upon the initial
            creation of a picture resource.
          type: string
        resource_key:
          description: The resource key string of the picture.
          example: dc724af18fbdd4e59189f5fe768a5f8311527050
          type: string
        sizes:
          description: >-
            An array containing reference information about all available image
            files.
          items:
            type: object
            properties:
              height:
                description: The height of the picture.
                example: 720
                nullable: true
                type: number
              link:
                description: >-
                  The direct link to the image file. For information about the
                  format of the image file, see our [Working with Thumbnail
                  Uploads](https://developer.vimeo.com/api/upload/thumbnails#returning-the-link-to-a-thumbnail)
                  guide.
                example: >-
                  https://i.vimeocdn.com/video/581495283_1280x720?r=pad&subrect=0,12,21,22&r=cover
                type: string
              link_with_play_button:
                description: >-
                  The direct link to the image file with a play button overlay.
                  For information about the format of the image file, see our
                  [Working with Thumbnail
                  Uploads](https://developer.vimeo.com/api/upload/thumbnails#returning-the-link-to-a-thumbnail)
                  guide.
                example: >-
                  https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F581495283_1280x720&src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png
                type: string
              width:
                description: The width of the picture.
                example: 1280
                type: number
            required:
              - height
              - link
              - width
          type: array
        type:
          description: |
            The type of picture.

            Option descriptions:
             * `caution` - The picture isn't appropriate for all ages.
             * `custom` - The picture is a custom video image.
             * `default` - The picture is the default video image.
          enum:
            - caution
            - custom
            - default
          example: caution
          type: string
        uri:
          description: The URI of the picture.
          example: /users/152184/pictures/12345
          type: string
      required:
        - active
        - base_link
        - default_picture
        - resource_key
        - sizes
        - type
        - uri
      type: object
    play:
      title: Play
      properties:
        dash:
          $ref: '#/components/schemas/hls-dash-video-file'
        hls:
          $ref: '#/components/schemas/hls-dash-video-file'
        progressive:
          description: The progressive video files.
          items:
            type: object
            properties:
              codec:
                description: |
                  The codec of the video file.

                  Option descriptions:
                   * `AV1` - The codec is AV1.
                   * `H264` - The codec is H264.
                   * `HEVC` - The codec is HEVC.
                enum:
                  - AV1
                  - H264
                  - HEVC
                example: AV1
                nullable: true
                type: string
              created_time:
                description: The time in ISO 8601 format when the video file was created.
                example: '2017-05-16T17:21:51+00:00'
                type: string
              fps:
                description: The frames per second of the video.
                example: 30
                type: number
              height:
                description: The height of the video in pixels.
                example: 720
                nullable: true
                type: number
              link:
                description: The direct link to the video file.
                type: string
              link_expiration_time:
                description: >-
                  The time in ISO 8601 format when the link to the video file
                  expires.
                example: '2017-05-16T17:21:51+00:00'
                type: string
              log:
                description: The URLs for logging events.
                type: object
              md5:
                description: The MD5 hash of the video file.
                example: 1bc29b36f623ba82aaf6724fd3b16718
                type: string
              rendition:
                description: |
                  The video rendition.

                  Option descriptions:
                   * `1080p` - The video has 1080p resolution.
                   * `240p` - The video has 240p resolution.
                   * `2k` - The video has 2K resolution.
                   * `360p` - The video has 360p resolution.
                   * `480p` - The video has 480p resolution.
                   * `4k` - The video has 4K resolution.
                   * `540p` - The video has 540p resolution.
                   * `5k` - The video has 5K resolution.
                   * `6k` - The video has 6K resolution.
                   * `720p` - The video has 720p resolution.
                   * `7k` - The video has 7K resolution.
                   * `8k` - The video has 8K resolution.
                enum:
                  - 1080p
                  - 240p
                  - 2k
                  - 360p
                  - 480p
                  - 4k
                  - 540p
                  - 5k
                  - 6k
                  - 720p
                  - 7k
                  - 8k
                example: 1080p
                type: string
              size:
                description: The size in bytes of the video file.
                example: 5000000
                nullable: true
                type: number
              type:
                description: |
                  The type of video file.

                  Option descriptions:
                   * `source` - The video file is a source file.
                   * `video/mp4` - The video file is in MP4 format.
                   * `video/webm` - The video file is in WebM format.
                   * `vp6/x-video` - The video file is in VP6 format.
                enum:
                  - source
                  - video/mp4
                  - video/webm
                  - vp6/x-video
                example: source
                nullable: true
                type: string
              width:
                description: The width of the video in pixels.
                example: 1280
                nullable: true
                type: number
            required:
              - codec
              - created_time
              - fps
              - height
              - link
              - link_expiration_time
              - md5
              - rendition
              - size
              - type
              - width
          type: array
        status:
          description: |
            The play status of the video.

            Option descriptions:
             * `playable` - The video is playable.
             * `purchase_required` - The video must be purchased.
             * `restricted` - Playback for the video is restricted.
             * `unavailable` - The video is unavailable.
          enum:
            - playable
            - purchase_required
            - restricted
            - unavailable
          example: playable
          type: string
      required:
        - status
      type: object
      x-konfig-properties:
        dash:
          description: The DASH video file.
        hls:
          description: The HLS video file.
    portfolio:
      title: Portfolio
      properties:
        description:
          description: The description of the portfolio.
          example: The Vimeo Staff original productions.
          nullable: true
          type: string
        created_time:
          description: The time in ISO 8601 format when the portfolio was created.
          example: '2017-05-16T19:56:07+00:00'
          type: string
        link:
          description: The link to the portfolio.
          example: https://vimeopro.com/staff/originals
          type: string
        metadata:
          description: Metadata about the portfolio.
          properties:
            connections:
              description: A list of resource URIs related to the portfolio.
              properties:
                videos:
                  description: Information about the videos contained within the portfolio.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 18
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/portfolios/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - videos
              type: object
          required:
            - connections
          type: object
        modified_time:
          description: >-
            The time in ISO 8601 format when the portfolio's data was last
            modified.
          example: '2017-05-17T19:56:07+00:00'
          type: string
        name:
          description: The display name of the portfolio.
          example: Vimeo Originals!
          type: string
        sort:
          description: |
            The default video sort order of the portfolio.

            Option descriptions:
             * `alphabetical` - The default sort order is alphabetical by name.
             * `clips` - The default sort order is video creation date.
             * `modified` - The default sort order is the order in which the videos were modified.
             * `recent` - The default sort order is the order in which the videos were added.
          enum:
            - alphabetical
            - clips
            - modified
            - recent
          example: alphabetical
          type: string
        uri:
          description: The canonical relative URI of the portfolio.
          example: /users/152184/portfolios/12345
          type: string
      required:
        - created_time
        - description
        - link
        - metadata
        - modified_time
        - name
        - sort
        - uri
      type: object
    preset:
      title: Preset
      properties:
        metadata:
          description: Metadata about the preset.
          properties:
            connections:
              description: A list of resource URIs related to the preset.
              properties:
                videos:
                  description: Information about the videos in the preset.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 13
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/presets/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - videos
              type: object
          required:
            - connections
          type: object
        name:
          description: The display name of the preset group.
          example: Minimalism
          type: string
        settings:
          description: The contents of the preset group.
          properties:
            title:
              description: |
                How the embeddable player handles the video title.

                Option descriptions:
                 * `hide` - The title is hidden.
                 * `show` - The title is shown.
                 * `user` - The title can be toggled to `show` or `hide` by the user.
              enum:
                - hide
                - show
                - user
              example: hide
              type: string
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            audio_tracks:
              description: >-
                Whether multiple audio tracks can appear in the embeddable
                player.
              example: true
              type: boolean
            buttons:
              properties:
                embed:
                  description: Whether the preset includes `Embed` button settings.
                  example: true
                  type: boolean
                fullscreen:
                  description: Whether the preset includes `Fullscreen` button settings.
                  example: true
                  type: boolean
                hd:
                  description: Whether the preset includes `HD` button settings.
                  example: true
                  type: boolean
                like:
                  description: Whether the preset includes `Like` button settings.
                  example: true
                  type: boolean
                reaction:
                  description: Whether the preset includes `Reaction` button settings.
                  example: true
                  nullable: true
                  type: boolean
                share:
                  description: Whether the present includes `Share` button settings.
                  example: true
                  type: boolean
                vote:
                  description: Whether the preset includes `Vote` button settings.
                  example: true
                  type: boolean
                watchlater:
                  description: Whether the preset includes `Watch Later` button settings.
                  example: true
                  type: boolean
              required:
                - embed
                - fullscreen
                - hd
                - like
                - reaction
                - share
                - vote
                - watchlater
              type: object
            byline:
              description: |
                How the embeddable player handles the video owner's information.

                Option descriptions:
                 * `hide` - The owner's information is hidden.
                 * `show` - The owner's information is shown.
                 * `user` - The owner's information can be toggled to `show` or `hide` by the user.
              enum:
                - hide
                - show
                - user
              example: hide
              type: string
            chapters:
              description: Whether chapters are enabled in the embeddable player.
              example: true
              type: boolean
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: >-
                The first player color, which controls the color of the progress
                bar, buttons, and more.
              example: '#0a0808'
              type: string
            colors:
              properties:
                color_four:
                  description: >-
                    The fourth player color, which controls the player
                    background color.
                  example: '#aabbcc'
                  type: string
                color_one:
                  description: >-
                    The first player color, which controls the color of the
                    progress bar, buttons, and more.
                  example: '#112233'
                  type: string
                color_three:
                  description: >-
                    The third player color, which controls the color of text and
                    icons.
                  example: '#778899'
                  type: string
                color_two:
                  description: >-
                    The second player color, which controls the player accent
                    color.
                  example: '#445566'
                  type: string
              required:
                - color_four
                - color_one
                - color_three
                - color_two
              type: object
            logos:
              properties:
                custom:
                  description: Whether the preset includes custom logo settings.
                  example: true
                  type: boolean
                sticky_custom:
                  description: Whether the present includes sticky custom logo settings.
                  example: true
                  type: boolean
                vimeo:
                  description: Whether the preset includes Vimeo logo settings.
                  example: true
                  type: boolean
              required:
                - custom
                - sticky_custom
                - vimeo
              type: object
            outro:
              properties:
                clips:
                  description: >-
                    A comma-separated list of video URIs. This field appears
                    only when **type** is `uploaded_clips`.
                  example: /videos/258684937,/videos/273576296
                  nullable: true
                  type: string
                link:
                  description: >-
                    The outro link settings. These fields appear only when
                    **type** is `link`.
                  nullable: true
                  properties:
                    name:
                      description: The name of the outro link.
                      example: Example Outro
                      type: string
                    url:
                      description: The URL of the outro link.
                      example: https://example.com
                      type: string
                  type: object
                text:
                  description: The outro text. This appears only when **type** is `text`.
                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                  nullable: true
                  type: string
                type:
                  description: |
                    The preset outro type.

                    Option descriptions:
                     * `link` - The outro includes a link.
                     * `no idea` - The outro type is `no idea`. The outro includes uploaded videos.
                     * `text` - The outro includes text.
                     * `uploaded_clips` - The outro includes uploaded videos.
                     * `uploaded_videos` - The outro includes uploaded videos.
                  enum:
                    - link
                    - no idea
                    - text
                    - uploaded_clips
                    - uploaded_videos
                  example: link
                  type: string
                videos:
                  description: >-
                    A comma-separated list of video URIs. This field appears
                    only when **type** is `no idea`.
                  example: /videos/258684937,/videos/273576296
                  nullable: true
                  type: string
              required:
                - type
              type: object
            pip:
              description: >-
                Whether picture-in-picture is enabled and the button appears in
                the embeddable player.
              example: true
              type: boolean
            play_button:
              description: A representation of the play button's settings.
              properties:
                position:
                  description: >
                    The position of the play button within the embeddable
                    player.


                    Option descriptions:
                     * `auto` - Use Vimeo's default positioning for the play button.
                     * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.
                     * `center` - The play button is positioned in the center of the player.
                  enum:
                    - auto
                    - bottom
                    - center
                  example: auto
                  type: string
              required:
                - position
              type: object
            playbar:
              description: Whether the playbar appears in the embeddable player.
              example: true
              type: boolean
            portrait:
              description: |
                How the embeddable player handles the video owner's portrait.

                Option descriptions:
                 * `hide` - The owner's portrait is hidden.
                 * `show` - The owner's portrait is shown.
                 * `user` - The owner's portrait can be toggled to `show` or `hide` by the user.
              enum:
                - hide
                - show
                - user
              example: hide
              type: string
            quality_selector:
              description: Whether to show the quality selector in the embeddable player.
              example: true
              type: boolean
            speed:
              description: Whether the speed controls appear in the embeddable player.
              example: true
              type: boolean
            transcript:
              description: Whether the transcript controls appear in the embeddable player.
              example: true
              type: boolean
            volume:
              description: Whether the volume controls appear in the embeddable player.
              example: true
              type: boolean
          required:
            - airplay
            - audio_tracks
            - buttons
            - byline
            - chapters
            - chromecast
            - closed_captions
            - color
            - colors
            - logos
            - outro
            - pip
            - play_button
            - playbar
            - portrait
            - quality_selector
            - speed
            - title
            - transcript
            - volume
          type: object
        uri:
          description: The canonical relative URI of the preset object.
          example: /users/152184/presets/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - metadata
        - name
        - settings
        - uri
        - user
      type: object
      x-konfig-properties:
        user:
          description: The owner of the preset.
          nullable: true
    project:
      title: Project
      properties:
        access_grant:
          description: >-
            The access grant response that applies to the team member. _This
            field is deprecated because grants are no longer exposed via API
            responses._
          type: object
        created_time:
          description: The time in ISO 8601 format when the folder was created.
          example: '2017-05-23T14:36:22+00:00'
          type: string
        creator_uri:
          description: The URI for the user who created the folder.
          example: /users/112233
          type: string
        has_subfolder:
          description: Whether this folder has at least one subfolder.
          example: true
          type: boolean
        is_pinned:
          description: Whether the folder is pinned.
          example: true
          type: boolean
        is_private_to_user:
          description: Whether the folder is a private-to-me folder for the user.
          example: true
          type: boolean
        last_user_action_event_date:
          description: >-
            The time in ISO 8601 format when a user last performed an action on
            the folder.
          example: '2018-03-21T23:08:22+00:00'
          nullable: true
          type: string
        link:
          description: The link to the folder on Vimeo.
          example: https://vimeo.com/user/112233/folders/12345
          type: string
        manage_link:
          description: The link to the folder management page.
          example: https://vimeo.com/user/112233/folder/12345
          type: string
        metadata:
          description: Information about the folders's metadata.
          properties:
            connections:
              description: A list of resource URIs related to the folder.
              properties:
                ancestor_path:
                  description: >-
                    Information about the folder's ancestry ordered from the
                    direct parent to higher-level ancestors.
                  items:
                    type: object
                    properties:
                      can_upload:
                        description: Whether the user can upload to this ancestor folder.
                        type: boolean
                      name:
                        description: The name of the folder.
                        type: string
                      uri:
                        description: The URI of the ancestor folder.
                        example: /users/112233/projects/12345
                        type: string
                    required:
                      - can_upload
                      - name
                      - uri
                  type: array
                data_retention:
                  properties:
                    policy:
                      description: >-
                        Information about the folder's data retention policy.
                        This data requires a bearer token with the `private`
                        scope.
                      properties:
                        title:
                          description: >-
                            The title of the data retention policy. This data
                            requires a bearer token with the `private` scope.
                          example: Policy title
                          type: string
                        options:
                          description: >-
                            An array of HTTP methods permitted on this URI. This
                            data requires a bearer token with the `private`
                            scope.
                          items:
                            type: string
                          type: array
                        uri:
                          description: >-
                            The URI of the data retention policy. This data
                            requires a bearer token with the `private` scope.
                          example: /teams/112233/data_retention/policies/12345
                          type: string
                      required:
                        - options
                        - title
                        - uri
                      type: object
                  required:
                    - policy
                  type: object
                folders:
                  description: >-
                    A standard connection object indicating how to return all
                    the subfolders in the folder.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of subfolders on this connection.
                      example: 12
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/12345/items
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                group_folder_grants:
                  description: Information about the folder's group access grants.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of group access grants on this
                        connection.
                      example: 5
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/folders/98765/group_folder_grants
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                items:
                  description: >-
                    A standard connection object indicating how to return all
                    the items in the folder.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of items on this connection.
                      example: 12
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/12345/items
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                parent_folder:
                  description: >-
                    A standard connection object indicating how to return the
                    folder's parent folder.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/12345/items
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                personal_team_folder_owner:
                  description: Information about the owner of the personal team folder.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI of the owner of the personal team folder.
                      example: /users/112233
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                resource_creator_team_user:
                  description: >-
                    Information about the team user who created the folder. This
                    data requires a bearer token with the `private` scope.
                  properties:
                    uri:
                      description: >-
                        The URI for the team user who created the folder. This
                        data requires a bearer token with the `private` scope.
                      type: string
                  required:
                    - uri
                  type: object
                team_permissions:
                  description: >-
                    Information about the folder's team permissions list. This
                    data requires a bearer token with the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                  required:
                    - options
                  type: object
                user_folder_access_grants:
                  description: Information about the folder's user folder access grants.
                  properties:
                    folder_permission_policies:
                      description: >-
                        Information about the owner's folder permission
                        policies.
                      items:
                        type: object
                        properties:
                          name:
                            description: The permission policy's name.
                            example: Folder Viewer
                            type: string
                          uri:
                            description: The permission policy's API URI.
                            example: /users/152184/permission_policies/12345
                            type: string
                        required:
                          - name
                          - uri
                      type: array
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of user folder access grants on this
                        connection.
                      example: 5
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/folders/98765/user_folder_access_grants
                      type: string
                  required:
                    - folder_permission_policies
                    - options
                    - total
                    - uri
                  type: object
                videos:
                  description: >-
                    A standard connection object indicating how to return all
                    the videos in the folder.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 12
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - ancestor_path
                - data_retention
                - folders
                - group_folder_grants
                - items
                - parent_folder
                - personal_team_folder_owner
                - resource_creator_team_user
                - team_permissions
                - user_folder_access_grants
                - videos
              type: object
            interactions:
              description: A list of permitted interactions related to the folder.
              properties:
                add_subfolder:
                  description: Information about adding a subfolder to the current folder.
                  properties:
                    can_add_subfolders:
                      description: Whether the folder can contain a subfolder.
                      type: boolean
                    content_type:
                      description: The subfolder content type.
                      type: string
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    properties:
                      description: Properties that can be added to the request body.
                      items:
                        type: string
                      type: array
                    subfolder_depth_limit_reached:
                      description: >-
                        Whether the user has reached the maximum subfolder
                        depth.
                      type: boolean
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - can_add_subfolders
                    - subfolder_depth_limit_reached
                  type: object
                delete:
                  description: The user's delete permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/46345352
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                delete_video:
                  description: The user's delete permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                edit:
                  description: The user's edit permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                edit_settings:
                  description: >-
                    The user's edit settings permissions information for this
                    project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/46345352
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                invite:
                  description: The user's invite permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                move_video:
                  description: The user's move permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                upload_video:
                  description: The user's upload permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                view:
                  description: The user's view permissions information for this project.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/projects/
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - add_subfolder
                - delete
                - delete_video
                - edit
                - edit_settings
                - invite
                - move_video
                - upload_video
                - view
              type: object
          required:
            - connections
            - interactions
          type: object
        modified_time:
          description: The time in ISO 8601 format when the folder was last modified.
          example: '2017-05-23T14:36:22+00:00'
          type: string
        name:
          description: The name of the folder.
          example: Rough cuts
          type: string
        pinned_on:
          description: The time in ISO 8601 format when the folder was pinned.
          example: '2017-05-23T14:36:22+00:00'
          nullable: true
          type: string
        privacy:
          description: The privacy settings of the folder.
          properties:
            view:
              description: |
                The privacy setting for accessing the folder.

                Option descriptions:
                 * `anybody` - Anyone with the link can access the contents of the folder. This privacy setting appears as `Public` on the Vimeo front end.
                 * `nobody` - Only the owner and those team members that the owner has explicitly invited can access the contents of the folder. This privacy setting appears as `Private` on the Vimeo front end.
                 * `team` - Only those team members with the link can access the contents of the folder.
              enum:
                - anybody
                - nobody
                - team
              example: anybody
              type: string
          required:
            - view
          type: object
        resource_key:
          description: The resource key string of the folder.
          example: dc724af18fbdd4e59189f5fe768a5f8311527050
          type: string
        settings:
          description: The settings of the folder.
          properties:
            color:
              description: The hexadecimal code of the folder color.
              example: '#c0c0c0'
              type: string
            folder_uri:
              description: The URI of the folder.
              example: /users/112233/projects/12345
              nullable: true
              type: string
          required:
            - color
            - folder_uri
          type: object
        uri:
          description: The URI of the folder.
          example: /users/112233/projects/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - access_grant
        - created_time
        - creator_uri
        - has_subfolder
        - is_pinned
        - is_private_to_user
        - last_user_action_event_date
        - link
        - manage_link
        - metadata
        - modified_time
        - name
        - pinned_on
        - privacy
        - resource_key
        - settings
        - uri
        - user
      type: object
      x-konfig-properties:
        user:
          description: The owner of the folder.
    project-item:
      title: Project Item
      properties:
        folder:
          $ref: '#/components/schemas/project'
        live_event:
          $ref: '#/components/schemas/live-event-recurring'
        type:
          description: |
            The project item type.

            Option descriptions:
             * `folder` - The project item is a folder.
             * `live_event` - The project item is a live event.
             * `video` - The project item is a video.
          enum:
            - folder
            - live_event
            - video
          example: folder
          type: string
        video:
          $ref: '#/components/schemas/video'
      required:
        - type
      type: object
      x-konfig-properties:
        folder:
          description: The project item folder.
        live_event:
          description: The project item live event.
        video:
          description: The project item video.
    purchase-interaction:
      title: Purchase Interaction
      properties:
        buy:
          description: Information on purchasing the On Demand video.
          nullable: true
          type: object
        rent:
          description: Information on renting the On Demand video.
          nullable: true
          type: object
        subscribe:
          description: Information on subscribing to the On Demand video.
          nullable: true
          properties:
            drm:
              description: Whether the On Demand subscription has DRM.
              example: true
              type: boolean
            expires_time:
              description: The time in ISO 8601 format when the On Demand video expires.
              example: '2018-03-05T21:04:47+00:00'
              nullable: true
              type: string
            link:
              description: The URL to purchase the On Demand subscription on Vimeo.
              example: https://vimeo.com/ondemand/darbyforever
              nullable: true
              type: string
            purchase_time:
              description: >-
                The time in ISO 8601 format when the On Demand video was
                purchased.
              example: '2018-03-05T21:04:47+00:00'
              nullable: true
              type: string
            stream:
              description: |
                The user's streaming access to the On Demand subscription.

                Option descriptions:
                 * `available` - The On Demand subscription is available for streaming.
                 * `purchased` - The On Demand subscription has been purchased.
                 * `restricted` - Streaming for the On Demand subscription is restricted.
                 * `unavailable` - The On Demand subscription is unavailable.
              enum:
                - available
                - purchased
                - restricted
                - unavailable
              example: available
              type: string
            uri:
              description: The On Demand subscription's product URI.
              example: /ondemand/pages/61326/products/12345
              nullable: true
              type: string
          type: object
      type: object
    recurring-live-event-low-latency:
      title: Recurring Live Event Low Latency
      properties:
        lowLatency:
          description: Whether the low-latency option is enabled.
          example: false
          type: boolean
      required:
        - lowLatency
      type: object
    reply:
      title: Reply
      properties:
        created_on:
          description: The time in ISO 8601 format when the reply was posted.
          example: '2018-03-05T21:04:47+00:00'
          type: string
        link:
          description: The permalink to the reply.
          example: https://vimeo.com/258684937#comment_12345
          type: string
        metadata:
          properties:
            connections:
              properties:
                user:
                  description: Information about the user who posted the reply.
                  properties:
                    link:
                      description: >-
                        The absolute URL of the authenticated users's profile
                        page.
                      type: string
                    name:
                      description: The display name of the user who posted the reply.
                      type: string
                    pictures:
                      $ref: '#/components/schemas/picture'
                    uri:
                      description: The unique identifier to access the user resource.
                      type: string
                  required:
                    - link
                    - name
                    - pictures
                    - uri
                  type: object
                  x-konfig-properties:
                    pictures:
                      description: Information about the user's portraits.
              required:
                - user
              type: object
          required:
            - connections
          type: object
        resource_key:
          description: The comment's resource key string.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        text:
          description: The content of the reply.
          example: I love this!
          type: string
        type:
          description: |
            The Vimeo content to which the reply relates.

            Option descriptions:
             * `video` - The comment is about a video.
          enum:
            - video
          example: video
          type: string
        uri:
          description: The unique identifier to access the reply resource.
          example: /videos/258684937/comments/12345/replies/7890
          type: string
      required:
        - created_on
        - link
        - metadata
        - resource_key
        - text
        - type
        - uri
      type: object
    segment:
      title: Segment
      properties:
        autogenerated:
          description: Whether the segment is autogenerated.
          example: true
          type: boolean
        cue_end:
          description: The cue end timestamp in milliseconds from the start of the video.
          example: 103200
          type: number
        cue_start:
          description: The cue start timestamp in milliseconds from the start of the video.
          example: 101800
          type: number
        enabled:
          description: Whether the segment is enabled.
          example: false
          type: boolean
        id:
          description: The segment identifier.
          example: 9854acd6-9c48-4244-9851-162dd52e9d74#25409003#101800
          type: string
        kind:
          description: |
            The type of caption that the segment originates from.

            Option descriptions:
             * `captions` - The segment originates from a captions file.
             * `subtitles` - The segment originates from a captions and subtitles file.
          enum:
            - captions
            - subtitles
          example: captions
          type: string
        language:
          description: The language of the segment.
          example: en-x-autogenerated
          type: string
        lines:
          description: The line data for the segment.
          items:
            $ref: '#/components/schemas/segment-line'
          type: array
        speaker:
          description: The speaker identifier.
          example: '1'
          type: string
        text_track_uri:
          description: The relative URI of the text track that the segment comes from.
          example: /videos/668723010/texttracks/12345
          type: string
        video_uri:
          description: The canonical relative URI of the segment's video.
          example: /videos/668723010
          type: string
        words:
          description: The word data for the segment.
          items:
            $ref: '#/components/schemas/segment-words'
          type: array
      required:
        - autogenerated
        - cue_end
        - cue_start
        - enabled
        - id
        - kind
        - language
        - lines
        - speaker
        - text_track_uri
        - words
      type: object
    segment-line:
      title: Segment Line
      properties:
        text:
          description: The text from the segment line.
          example: Hello World!
          type: string
        voice:
          description: The speaker of the segment line.
          nullable: true
          type: string
      required:
        - text
        - voice
      type: object
    segment-words:
      title: Segment Words
      properties:
        end_time:
          description: The end time of the word in milliseconds.
          nullable: true
          type: number
        start_time:
          description: The start time of the word in milliseconds.
          nullable: true
          type: number
        word:
          description: The word text.
          type: string
      required:
        - end_time
        - start_time
        - word
      type: object
    skill:
      title: Skill
      properties:
        name:
          description: The skill's display name.
          example: Director
          type: string
        uri:
          description: The skill's canonical relative URI.
          example: /marketplace/skills/152184
          type: string
      required:
        - name
        - uri
      type: object
    subscription-plans:
      title: Subscription Plans
      properties:
        currency:
          description: >-
            Information about the currency in which the price of the plan is
            expressed.
          properties:
            currency_code:
              description: The ISO code of the associated currency.
              example: USD
              type: string
            symbol:
              description: The symbol of the associated currency.
              example: $
              type: string
          required:
            - currency_code
            - symbol
          type: object
        discount:
          description: Information about the plan discount.
          properties:
            annual:
              description: The annual discount.
              type: number
          required:
            - annual
          type: object
        id:
          description: The SKU of the plan.
          example: 12341
          type: number
        metadata:
          description: The URLs and entitlements of the associated products in the store.
          properties:
            entitlements:
              description: >-
                A list that contains all entitlement data corresponding to the
                tier.
              properties:
                params:
                  description: >-
                    The list of entitlement parameters corresponding to the
                    tier.
                  properties:
                    team_seats:
                      description: The number of team seats included with the tier.
                      nullable: true
                      type: string
                    video_storage_periodic_quota:
                      description: >-
                        The amount of video storage for the user's periodic
                        quota.
                      nullable: true
                      type: string
                    video_storage_quota_cap:
                      description: The video storage total lifetime cap.
                      nullable: true
                      type: string
                    video_storage_quota_period:
                      description: |
                        The video storage quota period.

                        Option descriptions:
                         * `lifetime` - The product has a lifetime video storage quota period.
                         * `month` - The product has a monthly video storage quota period.
                         * `week` - The product has a weekly video storage quota period.
                         * `year` - The product has a yearly video storage quota period.
                      enum:
                        - lifetime
                        - month
                        - week
                        - year
                      example: lifetime
                      type: string
                    video_storage_quota_unit:
                      description: >
                        The unit of the video storage for the user's periodic
                        quota.


                        Option descriptions:
                         * `video_count` - The product has video storage based on video count.
                         * `video_size` - The product has video storage based on video size.
                      enum:
                        - video_count
                        - video_size
                      example: video_count
                      type: string
                  required:
                    - team_seats
                    - video_storage_periodic_quota
                    - video_storage_quota_cap
                    - video_storage_quota_period
                    - video_storage_quota_unit
                  type: object
              required:
                - params
              type: object
            interactions:
              properties:
                purchase:
                  properties:
                    status:
                      description: |
                        The purchase status of the product.

                        Option descriptions:
                         * `available` - The product is available for purchase.
                         * `purchased` - The product is already purchased.
                         * `unavailable` - The product isn't available for purchase.
                      enum:
                        - available
                        - purchased
                        - unavailable
                      example: available
                      type: string
                    uri:
                      description: The redirect URIs associated with the plan.
                      properties:
                        annual:
                          description: >-
                            The redirect URI for the annual plan in the user's
                            cart.
                          nullable: true
                          type: string
                        free_trial:
                          description: >-
                            The redirect URI for the free trial in the user's
                            cart.
                          nullable: true
                          type: string
                        monthly:
                          description: >-
                            The redirect URI for the monthly plan in the user's
                            cart.
                          nullable: true
                          type: string
                      required:
                        - annual
                        - free_trial
                        - monthly
                      type: object
                  required:
                    - status
                    - uri
                  type: object
              required:
                - purchase
              type: object
            purchased_product:
              description: Information about the purchased product.
              properties:
                display_price:
                  description: The display price of the purchased product.
                  type: number
                is_monthly:
                  description: >-
                    Whether the purchased product is billed as a monthly
                    subscription.
                  type: boolean
              required:
                - display_price
                - is_monthly
              type: object
            video_quota:
              description: The video upload quotas associated with the product.
              properties:
                lifetime:
                  description: The total video upload quota associated with the product.
                  nullable: true
                  type: number
                monthly:
                  description: The monthly video upload quota associated with the product.
                  type: number
                yearly:
                  description: The yearly video upload quota associated with the product.
                  type: number
              required:
                - lifetime
                - monthly
                - yearly
              type: object
          required:
            - entitlements
            - interactions
            - purchased_product
            - video_quota
          type: object
        name:
          description: The name of the plan.
          example: Pro
          type: string
        price:
          description: Information about the prices associated with the plan.
          properties:
            annual:
              description: The annual price, charged annually.
              type: number
            annual_monthly:
              description: The monthly price, charged annually.
              type: number
            monthly:
              description: The monthly price, charged monthly.
              type: number
          required:
            - annual
            - annual_monthly
          type: object
        promotion:
          description: Information about the plan's promotion.
          properties:
            code:
              description: The promotion code.
              type: string
            discount:
              description: The promotion discount percentage.
              type: number
            price:
              description: The price map of the promotion.
              properties:
                annual:
                  description: The promotional annual price, charged annually.
                  type: number
                annual_monthly:
                  description: The promotional monthly price, charged annually.
                  type: number
                monthly:
                  description: The promotional monthly price, charged monthly.
                  type: number
              type: object
            uri:
              description: Information about the URIs associated with the promotion.
              properties:
                annual:
                  description: The URI of the annual promotion.
                  type: string
                monthly:
                  description: The URI of the monthly promotion.
                  type: string
              type: object
          required:
            - code
            - discount
            - price
            - uri
          type: object
        tier:
          description: |
            The plan type.

            Option descriptions:
             * `advanced` - The plan type is Vimeo Advanced.
             * `basic` - The plan type is Vimeo Basic.
             * `business` - The plan type is Vimeo Business.
             * `enterprise` - The plan type is Vimeo Enterprise.
             * `free` - The plan type is Vimeo Free.
             * `livePremium` - The plan type is Vimeo Premium.
             * `ott` - The plan type is Vimeo OTT.
             * `plus` - The plan type is Vimeo Plus.
             * `pro` - The plan type is Vimeo Pro.
             * `proUnlimited` - The plan type is Vimeo Pro Unlimited.
             * `standard` - The plan type is Vimeo Standard.
             * `starter` - The plan type is Vimeo Starter.
          enum:
            - advanced
            - basic
            - business
            - enterprise
            - free
            - livePremium
            - ott
            - plus
            - pro
            - proUnlimited
            - standard
            - starter
          example: pro
          type: string
        uri:
          description: The URI of the plan.
          example: /plans/pro
          type: string
      required:
        - currency
        - discount
        - id
        - metadata
        - name
        - price
        - promotion
        - tier
        - uri
      type: object
    tag:
      title: Tag
      properties:
        canonical:
          description: The normalized canonical tag name.
          example: awesome
          type: string
        metadata:
          description: Metadata about the tag.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                videos:
                  description: Information about the videos related to this tag.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 34371
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /tags/awesome/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - videos
              type: object
          required:
            - connections
          type: object
        name:
          description: The tag value.
          example: awesome
          type: string
        resource_key:
          description: The tag's resource key string.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        uri:
          description: The canonical relative URI of the tag.
          example: /videos/258684937/tags/awesome
          type: string
      required:
        - canonical
        - metadata
        - name
        - resource_key
        - uri
      type: object
    team-membership:
      title: Team Membership
      properties:
        access_grant:
          description: >-
            Information about an access grant that applies to the team member on
            the folder. _This field is deprecated because grants are no longer
            exposed via API responses._
          nullable: true
          type: object
        active:
          description: Whether the team membership is currently active.
          example: true
          type: boolean
        applicable_permission_policies:
          description: >-
            Information about permission policies that can apply to the team
            member.
          properties:
            folder:
              description: >-
                An array of folder permission policies that can apply to the
                team member.
              items:
                $ref: '#/components/schemas/permission-policy'
              type: array
            regional_delivery:
              description: >-
                An array of regional delivery permission policies that can apply
                to the team member.
              items:
                $ref: '#/components/schemas/permission-policy'
              type: array
            video:
              description: >-
                An array of video permission policies that can apply to the team
                member.
              items:
                $ref: '#/components/schemas/permission-policy'
              type: array
          required:
            - folder
            - regional_delivery
            - video
          type: object
        applicable_roles:
          description: An array of the team roles this team member can have.
          items:
            $ref: '#/components/schemas/team-role'
          type: array
        created_time:
          description: The time in ISO 8601 format when the invite was sent.
          example: '2017-05-15T17:42:07+00:00'
          type: string
        email:
          description: The team member's email.
          example: user@example.com
          type: string
        has_folder_access:
          description: Whether the team member has folder access.
          example: true
          type: boolean
        invite_url:
          description: >-
            The URL for the invited user to join the team. The value of this
            field is null if the invited user has already joined.
          example: https://vimeo.com/user/seat?code=e7c71ae7f4dc5d71a3bceb4d1d9e
          nullable: true
          type: string
        joined_time:
          description: The time in ISO 8601 format when the invite was accepted.
          example: '2017-05-15T17:42:07+00:00'
          type: string
        metadata:
          description: The metadata of the team membership.
          properties:
            connections:
              description: A list of resource URIs related to the user.
              properties:
                owner:
                  description: >-
                    A standard connection object indicating how to get the owner
                    of this user.
                  properties:
                    display_name:
                      description: The display name of the team owner.
                      example: Example Team Name
                      type: string
                    email:
                      description: The team owner's email address.
                      example: user@example.com
                      type: string
                    invites_remaining:
                      description: The total number of remaining team member invites.
                      example: 5
                      type: number
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of owners on this connection.
                      example: 1
                      type: number
                    total_members:
                      description: >-
                        The total number of team members for the specified team
                        owner.
                      example: 3
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184
                      type: string
                  required:
                    - display_name
                    - email
                    - invites_remaining
                    - options
                    - total
                    - total_members
                    - uri
                  type: object
                personal_team_folder:
                  description: >-
                    A standard connection object indicating how to return
                    personal team folders.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of personal team folders on this
                        connection.
                      example: 12
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/178786123/projects/1129133
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - owner
                - personal_team_folder
              type: object
          required:
            - connections
          type: object
        modified_time:
          description: >-
            The time in ISO 8601 format when the team membership was last
            modified.
          example: '2017-05-15T17:42:07+00:00'
          type: string
        permission_level:
          description: |
            The team member's permission level.

            Option descriptions:
             * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.
             * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can't perform team administration tasks.
             * `Contributor Plus` - The team member has contributor plus permissions. They can upload and edit videos for the entire team, and have additional sets of permissions, but can't perform team administration tasks.
             * `Owner` - The team member has owner permissions.
             * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can't edit videos.
             * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can't upload or edit videos.
          enum:
            - Admin
            - Contributor
            - Contributor Plus
            - Owner
            - Uploader
            - Viewer
          example: Admin
          type: string
        recently_reminded:
          description: Whether the team member has been reminded about the invite.
          example: true
          type: boolean
        resource_key:
          description: The resource key of the team membership.
          example: dc724af18fbdd4e59189f5fe768a5f8311527050
          type: string
        role:
          description: The team member's role, translated.
          type: string
        status:
          description: |
            The status of the team membership invite.

            Option descriptions:
             * `accepted` - Team membership has been accepted.
             * `pending` - Team membership has been offered but not yet accepted.
          enum:
            - accepted
            - pending
          example: accepted
          type: string
        uri:
          description: The unique identifier to access the team membership resource.
          example: /users/152184/team_users/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - access_grant
        - active
        - applicable_permission_policies
        - applicable_roles
        - created_time
        - email
        - invite_url
        - joined_time
        - metadata
        - modified_time
        - permission_level
        - resource_key
        - role
        - status
        - uri
        - user
      type: object
      x-konfig-properties:
        user:
          description: >-
            The team member. The value of this field is null if the user hasn't
            joined the team yet.
          nullable: true
    team-role:
      title: Team Role
      properties:
        applicable_permission_policies:
          description: The applicable permission policies for the role.
          properties:
            folder:
              description: The applicable folder-related permission policies for the role.
              items:
                type: string
              type: array
            regional_delivery:
              description: >-
                The applicable permission policies related to regional delivery
                for the role.
              items:
                type: object
                properties:
                  display_description:
                    description: >-
                      The translated display description of the regional
                      delivery permission policy.
                    example: >-
                      This policy allows the user to restrict the delivery of
                      videos to specific regions.
                    type: string
                  display_name:
                    description: >-
                      The translated display name of the regional delivery
                      permission policy.
                    example: Regional delivery
                    type: string
                  name:
                    description: The name of the regional delivery permission policy.
                    example: regional_delivery
                    type: string
                required:
                  - display_description
                  - display_name
                  - name
              type: array
            video:
              description: The applicable video-related permission policies for the role.
              items:
                type: string
              type: array
          type: object
        count:
          description: The total number of team members with this role.
          example: 3
          type: number
        display_description:
          description: The translated display description of the role.
          example: >-
            Can view and manage all videos, folders, people, and analytics on
            the account.
          type: string
        display_name:
          description: The translated display name of the role.
          example: Admin
          type: string
        permission_level:
          description: |
            The untranslated role of the user who made the request.

            Option descriptions:
             * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.
             * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can’t perform team administration tasks.
             * `Contributor Plus` - The team member has contributor-plus permissions. They can upload and edit videos for the entire team and have additional sets of permissions but can't perform team administration tasks.
             * `Owner` - The team member has owner permissions.
             * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can't edit videos.
             * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can't upload or edit videos.
          enum:
            - Admin
            - Contributor
            - Contributor Plus
            - Owner
            - Uploader
            - Viewer
          example: Admin
          nullable: true
          type: string
        role:
          description: |
            The untranslated role of the user who made the request.

            Option descriptions:
             * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.
             * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can’t perform team administration tasks.
             * `Contributor Plus` - The team member has contributor-plus permissions. They can upload and edit videos for the entire team and have additional sets of permissions but can't perform team administration tasks.
             * `Owner` - The team member has owner permissions.
             * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can’t edit videos.
             * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can’t upload or edit videos.
          enum:
            - Admin
            - Contributor
            - Contributor Plus
            - Owner
            - Uploader
            - Viewer
          example: Admin
          nullable: true
          type: string
        uri:
          description: The unique identifier to access the team role.
          example: /users/152184/team/role
          type: string
      required:
        - permission_level
        - role
        - uri
      type: object
    text-track:
      title: Text Track
      properties:
        active:
          description: Whether the text track is active.
          example: true
          type: boolean
        display_language:
          description: The name of the language.
          example: English (United States)
          type: string
        hls_link:
          description: >-
            The read-only URL of the text track file, intended for use with HLS
            playback.
          type: string
        hls_link_expires_time:
          description: >-
            The time in ISO 8601 format when the read-only HLS playback text
            track file expires.
          example: '1494888499'
          type: string
        id:
          description: The text track identifier.
          example: 12345
          type: number
        language:
          description: >-
            The language code for the text track. To see a full list, request
            `/languages?filter=texttrack`.
          example: en-US
          nullable: true
          type: string
        link:
          description: >-
            The read-only URL of the text track file. You can upload to this
            link when you create it for the first time.
          type: string
        link_expires_time:
          description: The time in ISO 8601 format when the text track link expires.
          example: '1494888499'
          type: string
        name:
          description: The descriptive name of the text track.
          example: English Subtitles
          nullable: true
          type: string
        type:
          description: |
            The type of text track.

            Option descriptions:
             * `captions` - The text track is for captions.
             * `subtitles` - The text track is for subtitles.
          enum:
            - captions
            - subtitles
          example: captions
          nullable: true
          type: string
        uri:
          description: The relative URI of the text track.
          example: /videos/258684937/texttracks/12345
          type: string
      required:
        - active
        - display_language
        - hls_link
        - hls_link_expires_time
        - id
        - language
        - link
        - link_expires_time
        - name
        - type
        - uri
      type: object
    trimmed-video:
      title: Trimmed Video
      properties:
        clip_id:
          description: The ID of the video. _This field is deprecated._
          example: 258684937
          type: number
        created_on:
          description: The time in ISO 8601 format when the trim was created.
          type: string
        created_version_id:
          description: >-
            The most recent version of the trimmed video. _This field is
            deprecated._
          example: '12354'
          type: string
        end:
          description: The end of the trim from the last trim, in seconds.
          example: '5.0'
          type: string
        is_clip_finished_transcoding:
          description: >-
            Whether the transcoding jobs for the video file have finished. _This
            field is deprecated._
          example: true
          type: boolean
        metadata:
          properties:
            connections:
              properties:
                created_version:
                  description: >-
                    Information about the video version that is created from the
                    trim operation.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/1234/versions/2345
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                root_version:
                  description: >-
                    Information about the video version that is the source of
                    the trimmed video.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/1234/versions/2345
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                video:
                  description: Information about the video associated with the trim.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/3706071
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - created_version
                - root_version
                - video
              type: object
          required:
            - connections
          type: object
        modified_on:
          description: The time in ISO 8601 format when the trim policy was last modified.
          nullable: true
          type: string
        root_version_id:
          description: >-
            The video version that is the source of the trimmed video. _This
            field is deprecated._
          example: '12354'
          type: string
        start:
          description: The start of the trim from the last trim, in seconds.
          example: '1.0'
          type: string
        uri:
          description: >-
            The URI of the player or the trim service. _This field is
            deprecated._
          example: https://player.vimeo.com/video/1234
          type: string
        version_quality:
          description: The quality of the root version video file.
          example: '5'
          type: string
      required:
        - clip_id
        - created_on
        - created_version_id
        - end
        - is_clip_finished_transcoding
        - metadata
        - modified_on
        - root_version_id
        - start
        - uri
        - version_quality
      type: object
    tutorial:
      title: Tutorial
      properties:
        message:
          description: The success message.
          example: Success!
          type: string
        next_steps_link:
          description: The link to the next tutorial.
          example: https://developer.vimeo.com/api/guides/videos/upload
          type: string
        token_is_authenticated:
          description: Whether the current access token is authenticated.
          example: true
          type: boolean
      required:
        - message
        - next_steps_link
        - token_is_authenticated
      type: object
    upload-attempt:
      title: Upload Attempt
      properties:
        clip:
          $ref: '#/components/schemas/video'
        form:
          description: The HTML upload form.
          type: string
        ticket_id:
          description: The ticket identifier string for the upload.
          example: 3da5dac09
          type: string
        upload_link:
          description: The upload URL.
          example: https://123456.cloud.vimeo.com/upload?ticket_id=1234asdf
          type: string
        uri:
          description: The upload URI.
          example: /users/152184/uploads/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - ticket_id
        - upload_link
        - uri
        - user
      type: object
      x-konfig-properties:
        clip:
          description: The video to upload.
        user:
          description: The owner of the uploaded video.
    user:
      title: User
      properties:
        account:
          description: |
            The authenticated user's account type.

            Option descriptions:
             * `advanced` - The user has a Vimeo Advanced subscription.
             * `basic` - The user has a Vimeo Basic subscription.
             * `business` - The user has a Vimeo Business subscription.
             * `enterprise` - The user has a Vimeo Enterprise subscription.
             * `free` - The user has a Vimeo Free subscription.
             * `live_business` - The user has a Vimeo Business Live subscription.
             * `live_premium` - The user has a Vimeo Premium subscription.
             * `live_pro` - The user has a Vimeo PRO Live subscription.
             * `plus` - The user has a Vimeo Plus subscription.
             * `pro` - The user has a Vimeo Pro subscription.
             * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
             * `producer` - The user has a Vimeo Producer subscription.
             * `standard` - The user has a Vimeo Standard subscription.
             * `starter` - The user has a Vimeo Starter subscription.
          enum:
            - advanced
            - basic
            - business
            - enterprise
            - free
            - live_business
            - live_premium
            - live_pro
            - plus
            - pro
            - pro_unlimited
            - producer
            - standard
            - starter
          example: advanced
          type: string
        available_for_hire:
          description: Whether the authenticated user is available for hire.
          example: false
          type: boolean
        bio:
          description: The authenticated user's long bio text.
          example: This is where you will find videos and news updates from the staff.
          nullable: true
          type: string
        can_work_remotely:
          description: Whether the authenticated user can work remotely.
          example: false
          type: boolean
        capabilities:
          description: The users's capabilities list.
          type: object
        clients:
          description: The comma-separated list of clients.
          example: vimeo
          type: string
        content_filter:
          description: |
            The authenticated user's content filters.

            Option descriptions:
             * `drugs` - The content contains drug or alcohol use.
             * `language` - The content contains profanity or sexually suggestive language.
             * `nudity` - The content contains nudity.
             * `safe` - The content is suitable for all audiences.
             * `unrated` - The content hasn't been rated.
             * `violence` - The content contains violence or is graphic.
          enum:
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          items:
            type: string
            example: drugs
          type: array
        created_time:
          description: The time in ISO 8601 format when the user account was created.
          example: '2007-01-18T16:40:11+00:00'
          type: string
        gender:
          description: The authenticated user's gender.
          example: m
          nullable: true
          type: string
        has_invalid_email:
          description: Whether the user's email is invalid.
          type: boolean
        is_expert:
          description: >-
            Whether the creator enrolled in and successfully completed the Vimeo
            Experts program.
          example: false
          type: boolean
        link:
          description: The absolute URL of the authenticated users's profile page.
          example: https://vimeo.com/staff
          type: string
        location:
          description: The authenticated user's location.
          example: New York City
          nullable: true
          type: string
        location_details:
          $ref: '#/components/schemas/location'
        metadata:
          description: The authenticated user's metadata.
          properties:
            connections:
              description: The list of resource URIs related to the authenticated user.
              properties:
                albums:
                  description: >-
                    Information about the showcases created by the authenticated
                    user.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of showcases on this connection.
                      example: 3
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/albums
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                appearances:
                  description: >-
                    Information about the appearances of the authenticated user
                    in other videos.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of appearances on this connection.
                      example: 6
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/appearances
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                block:
                  description: >-
                    Information about the users that the authenticated user has
                    blocked. This data requires a bearer token with the
                    `private` scope. This data requires a bearer token with the
                    `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of blocked users on this connection.
                        This data requires a bearer token with the `private`
                        scope.
                      example: 73
                      type: number
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /me/block
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                categories:
                  description: >-
                    Information about the categories that the authenticated user
                    is following.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of categories on this connection.
                      example: 5
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/categories
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                channels:
                  description: >-
                    Information about the channels to which the authenticated
                    user subscribes.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of channels on this connection.
                      example: 4
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/channels
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                connected_apps:
                  description: Information about the authenticated user's connected apps.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of connected apps on this connection.
                      example: 4
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /me/connected_apps
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                feed:
                  description: Information about the authenticated user's feed.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/feed
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                folders:
                  description: Information about the authenticated user's folders.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of folders on this connection.
                      example: 9
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/folders
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                folders_root:
                  description: >-
                    Information about the authenticated user's root level
                    folders and videos.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/123456789/folders/root
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                followers:
                  description: Information about the authenticated user's followers.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of followers on this connection.
                      example: 12
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/followers
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                following:
                  description: >-
                    Information about the users that the authenticated user is
                    following.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of users on this connection.
                      example: 47
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/following
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                groups:
                  description: >-
                    Information about the groups created by the authenticated
                    user.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of groups on this connection.
                      example: 2
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/groups
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                likes:
                  description: >-
                    Information about the videos that the authenticated user has
                    liked.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of likes on this connection.
                      example: 300
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/likes
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                moderated_channels:
                  description: >-
                    Information about the channels that the authenticated user
                    moderates.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of channels on this connection.
                      example: 1
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/channels?filter=moderated
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                pictures:
                  description: Information about the authenticated user's portraits.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of pictures on this connection.
                      example: 3
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/pictures
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                portfolios:
                  description: Information about the authenticated user's portfolios.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of portfolios on this connection.
                      example: 5
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/portfolios
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                recommended_channels:
                  description: >-
                    A collection of recommended channels for the authenticated
                    user to follow. This data requires a bearer token with the
                    `private` scope. This data requires a bearer token with the
                    `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of channels on this connection. This
                        data requires a bearer token with the `private` scope.
                      example: 4
                      type: number
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /me/recommendations/channels
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                recommended_users:
                  description: >-
                    A collection of recommended users for the authenticated user
                    to follow. This data requires a bearer token with the
                    `private` scope. This data requires a bearer token with the
                    `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of users on this connection. This data
                        requires a bearer token with the `private` scope.
                      example: 6
                      type: number
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /me/recommendations/users
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                shared:
                  description: >-
                    Information about the videos that have been shared with the
                    authenticated user.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 15
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/shared/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                videos:
                  description: >-
                    Information about the videos that the authenticated user has
                    uploaded.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 36
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                watched_videos:
                  description: >-
                    Information about the videos that the authenticated user has
                    watched.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 322
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /me/watched/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                watchlater:
                  description: >-
                    Information about the videos that the authenticated user has
                    marked to watch later.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 14
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/watchlater
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - albums
                - appearances
                - block
                - categories
                - channels
                - connected_apps
                - feed
                - folders
                - folders_root
                - followers
                - following
                - groups
                - likes
                - moderated_channels
                - pictures
                - portfolios
                - recommended_channels
                - recommended_users
                - shared
                - videos
                - watched_videos
                - watchlater
              type: object
            interactions:
              properties:
                add_privacy_user:
                  properties:
                    options:
                      description: >-
                        An array of the HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /channels/152184/privacy/users
                      type: string
                  type: object
                block:
                  description: >-
                    Information about the block status of the authenticated
                    user.
                  properties:
                    added:
                      description: >-
                        Whether the authenticated user is blocking the requested
                        user.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the block occurred, or
                        the null value if no block exists.
                      example: '2017-05-16T15:05:43+00:00'
                      nullable: true
                      type: string
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI to block or unblock the requested user.
                      example: /me/block/3766357
                      type: string
                  required:
                    - added
                    - added_time
                    - options
                    - uri
                  type: object
                connected_apps:
                  properties:
                    all_scopes:
                      description: >-
                        The list of all the scopes on the connected app that are
                        needed for a particular Vimeo feature.
                      type: object
                    is_connected:
                      description: >-
                        Whether the authenticated user is connected to the
                        connected app.
                      example: true
                      type: boolean
                    needed_scopes:
                      description: >-
                        The list of the remaining scopes on the connected app
                        that the authenticated user needs for a particular Vimeo
                        feature.
                      type: object
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI of the connected app.
                      example: /me/connected_apps/facebook
                      type: string
                  required:
                    - all_scopes
                    - is_connected
                    - needed_scopes
                    - options
                    - uri
                  type: object
                follow:
                  description: >-
                    Information about the followed status of the authenticated
                    user.
                  properties:
                    added:
                      description: >-
                        Whether the authenticated user is following the
                        requested user.
                      example: true
                      type: boolean
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI to follow the requested user.
                      example: /users/152184/following/3766357
                      type: string
                  required:
                    - added
                    - options
                    - uri
                  type: object
                report:
                  description: >-
                    Information about where and how to report the requested
                    user.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    reason:
                      description: A list of valid reasons for reporting a video.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/152184/report
                      type: string
                  required:
                    - options
                    - reason
                    - uri
                  type: object
              required:
                - block
                - connected_apps
                - follow
                - report
              type: object
            public_videos:
              properties:
                total:
                  description: >-
                    The total number of public videos that the authenticated
                    user has uploaded.
                  example: 100
                  type: number
              required:
                - total
              type: object
          required:
            - connections
            - interactions
            - public_videos
          type: object
        name:
          description: The authenticated user's display name.
          example: Vimeo Staff
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        preferences:
          properties:
            videos:
              properties:
                password:
                  description: The password for viewing the authenticated user's videos.
                  example: hunter1
                  type: string
                privacy:
                  properties:
                    add:
                      description: >-
                        Whether other users can add the authenticated user's
                        videos.
                      example: true
                      type: boolean
                    comments:
                      description: >
                        The authenticated user's privacy preference for
                        comments.


                        Option descriptions:
                         * `anybody` - Anyone can comment on the user's videos.
                         * `contacts` - Only contacts can comment on the user's videos.
                         * `nobody` - No one can comment on the user's videos.
                      enum:
                        - anybody
                        - contacts
                        - nobody
                      example: anybody
                      type: string
                    download:
                      description: >-
                        Whether other users can download the authenticated
                        user's videos.
                      example: true
                      type: boolean
                    embed:
                      description: |
                        The authenticated user's privacy preference for embeds.

                        Option descriptions:
                         * `private` - Only the user can embed their own videos.
                         * `public` - Anyone can embed the user's videos.
                         * `whitelist` - Only those on the whitelist can embed the user's videos.
                      enum:
                        - private
                        - public
                        - whitelist
                      example: private
                      type: string
                    password:
                      description: The default password for the video.
                      example: videopassword
                      type: string
                    view:
                      description: |
                        The authenticated user's privacy preference for views.

                        Option descriptions:
                         * `anybody` - Anyone can view the user's videos. This privacy setting appears as `Public` on the Vimeo front end.
                         * `contacts` - Only contacts can view the user's videos. _This field is deprecated._
                         * `disable` - Views are disabled for the user's videos. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.
                         * `nobody` - No one except the user can view the user's videos. This privacy setting appears as `Private` on the Vimeo front end.
                         * `password` - Only those with the password can view the user's videos.
                         * `unlisted` - Anybody can view the user's videos if they have a link.
                         * `users` - Only other Vimeo members can view the user's videos. _This field is deprecated._
                      enum:
                        - anybody
                        - contacts
                        - disable
                        - nobody
                        - password
                        - unlisted
                        - users
                      example: anybody
                      type: string
                  type: object
                rating:
                  description: |
                    An array of the authorized user's default content ratings.

                    Option descriptions:
                     * `drugs` - The video contains drug or alcohol use.
                     * `language` - The video contains profanity or sexually suggestive content.
                     * `nudity` - The video contains nudity.
                     * `safe` - The video is suitable for all audiences.
                     * `unrated` - The video hasn't been rated.
                     * `violence` - The video contains violent or graphic content.
                  enum:
                    - drugs
                    - language
                    - nudity
                    - safe
                    - unrated
                    - violence
                  items:
                    type: string
                    example: drugs
                  type: array
              required:
                - rating
              type: object
          required:
            - videos
          type: object
        resource_key:
          description: The authenticated user's resource key string.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        short_bio:
          description: The authenticated user's short bio text.
          example: This is a short biography about me!
          nullable: true
          type: string
        skills:
          description: A list of the authenticated user's skills.
          items:
            $ref: '#/components/schemas/skill'
          nullable: true
          type: array
        upload_quota:
          description: >-
            The upload quota. This information appears only when the
            authenticated user has upload access and is looking at their own
            user record.
          properties:
            lifetime:
              description: >-
                Information about the authenticated user's lifetime upload
                usage.
              properties:
                free:
                  description: >-
                    The number of bytes or videos remaining in the authenticated
                    user's lifetime maximum.
                  example: 5000000
                  nullable: true
                  type: number
                max:
                  description: >-
                    The total number of bytes or videos that the authenticated
                    user can upload across the lifetime of their account.
                  example: 5368709120
                  nullable: true
                  type: number
                unit:
                  description: |
                    The unit that's used to compute quota.

                    Option descriptions:
                     * `video_count` - The quota is calculated using the count of the videos.
                     * `video_size` - The quota is calculated using the byte size of the videos.
                  enum:
                    - video_count
                    - video_size
                  example: video_count
                  nullable: true
                  type: string
                used:
                  description: >-
                    The number of bytes or videos that the authenticated user
                    has already uploaded against their lifetime limit.
                  example: 5368704120
                  nullable: true
                  type: number
              required:
                - free
                - max
                - unit
                - used
              type: object
            periodic:
              description: >-
                Information about the authenticated user's usage for the current
                period.
              properties:
                free:
                  description: >-
                    The number of bytes or video count remaining in the
                    authenticated user's upload quota for the current period.
                  example: 5000000
                  nullable: true
                  type: number
                max:
                  description: >-
                    The total number of bytes or videos that the authenticated
                    user can upload per period.
                  example: 5368709120
                  nullable: true
                  type: number
                period:
                  description: |
                    The renewal frequency of the quota.

                    Option descriptions:
                     * `lifetime` - The user doesn't have a periodic quota.
                     * `month` - The quota renews monthly.
                     * `week` - The quota renews weekly.
                     * `year` - The quota renews yearly.
                  enum:
                    - lifetime
                    - month
                    - week
                    - year
                  example: lifetime
                  nullable: true
                  type: string
                reset_date:
                  description: >-
                    The time in ISO 8601 format when the authenticated user's
                    upload quota resets.
                  example: '2029-03-13T02:35:13-04:00'
                  nullable: true
                  type: string
                unit:
                  description: |
                    The unit that's used to compute quota.

                    Option descriptions:
                     * `video_count` - The quota is calculated using the count of the videos.
                     * `video_size` - The quota is calculated using the byte size of the videos.
                  enum:
                    - video_count
                    - video_size
                  example: video_count
                  nullable: true
                  type: string
                used:
                  description: >-
                    The number of bytes or video count that the authenticated
                    user has already uploaded against their quota in the current
                    period.
                  example: 5368704120
                  nullable: true
                  type: number
              required:
                - free
                - max
                - period
                - reset_date
                - unit
                - used
              type: object
            space:
              description: >-
                Information about the authenticated user's upload space
                remaining for the current period.
              properties:
                free:
                  description: >-
                    The number of bytes or videos remaining in the authenticated
                    user's upload quota.
                  example: 5000000
                  type: number
                max:
                  description: >-
                    The maximum number of bytes or videos allotted to the
                    authenticated user's upload quota.
                  example: 5368709120
                  nullable: true
                  type: number
                showing:
                  description: >
                    The type of quota for the values of the
                    **upload_quota.space** field.


                    Option descriptions:
                     * `lifetime` - The quota type is lifetime.
                     * `periodic` - The quota type is periodic.
                  enum:
                    - lifetime
                    - periodic
                  example: lifetime
                  type: string
                unit:
                  description: |
                    The unit that's used to compute quota.

                    Option descriptions:
                     * `video_count` - The quota is calculated using the count of the videos.
                     * `video_size` - The quota is calculated using the byte size of the videos.
                  enum:
                    - video_count
                    - video_size
                  example: video_count
                  nullable: true
                  type: string
                used:
                  description: >-
                    The number of bytes or videos that the authenticated user
                    has already uploaded against their quota.
                  example: 5368704120
                  type: number
              required:
                - free
                - max
                - showing
                - unit
                - used
              type: object
          required:
            - lifetime
            - periodic
            - space
          type: object
        uri:
          description: The authenticated user's canonical relative URI.
          example: /users/152184
          type: string
        websites:
          description: The authenticated user's websites.
          items:
            type: object
            properties:
              description:
                description: The website's description.
                example: Follow us on Twitter!
                nullable: true
                type: string
              link:
                description: The URL of the website.
                example: https://twitter.com/vimeo
                type: string
              name:
                description: The name of the website.
                example: Twitter
                nullable: true
                type: string
              type:
                description: The URL type of the website.
                example: facebook
                type: string
              uri:
                description: >-
                  The URI of the custom website or social media page belonging
                  to the user.
                example: /users/1234/links/1
                type: string
            required:
              - description
              - link
              - name
              - type
              - uri
          type: array
      required:
        - account
        - available_for_hire
        - bio
        - can_work_remotely
        - capabilities
        - clients
        - created_time
        - gender
        - has_invalid_email
        - is_expert
        - link
        - location
        - location_details
        - metadata
        - name
        - pictures
        - preferences
        - resource_key
        - short_bio
        - skills
        - upload_quota
        - uri
        - websites
      type: object
      x-konfig-properties:
        location_details:
          description: The authenticated user's location details.
          nullable: true
        pictures:
          description: The active portrait of the authenticated user.
    version-transcode-status:
      title: Version Transcode Status
      properties:
        is_complete:
          description: Whether the video has finished transcoding.
          type: boolean
        is_fully_playable:
          description: >-
            Whether the video is playable in all resolutions, up to either the
            source quality or 4K, whichever is lower, at standard definition.
          type: boolean
        is_playable:
          description: Whether the video is playable.
          type: boolean
      required:
        - is_complete
        - is_fully_playable
        - is_playable
      type: object
    video:
      title: Video
      properties:
        tags:
          description: An array of all tags assigned to the video.
          items:
            $ref: '#/components/schemas/tag'
          type: array
        description:
          description: A brief explanation of the video's content.
          example: A celebration of 10 years of Staff Picks.
          nullable: true
          type: string
        allowed_privacies:
          description: >-
            An array of privacy settings supported for this video and the
            requesting user.
          items:
            type: string
          type: array
        app:
          $ref: '#/components/schemas/api-app'
        can_move_to_project:
          description: >-
            Whether the video can be moved to a folder. This data requires a
            bearer token with the `private` scope.
          nullable: true
          type: boolean
        categories:
          description: The categories that the video belongs to.
          items:
            $ref: '#/components/schemas/category'
          type: array
        content_rating:
          description: |
            The video's granular content rating.

            Option descriptions:
             * `advertisement` - The video contains advertisements.
             * `drugs` - The video contains drug or alcohol use.
             * `language` - The video contains profanity or sexually suggestive content.
             * `nudity` - The video contains nudity.
             * `safe` - The video is safe for all audiences.
             * `unrated` - The video hasn't been rated.
             * `violence` - The video contains violence.
          enum:
            - advertisement
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          items:
            type: string
            example: advertisement
          type: array
        content_rating_class:
          description: |
            The video's high-level content rating class.

            Option descriptions:
             * `explicit` - The video contains one or more explicit content rating types.
             * `safe` - The video contains no explicit content rating types.
             * `unrated` - The video doesn't belong to a content rating class.
          enum:
            - explicit
            - safe
            - unrated
          example: explicit
          type: string
        context:
          description: >-
            The context of the video's subscription, if the video is part of a
            subscription.
          properties:
            action:
              description: |
                The relevant contextual action.

                Option descriptions:
                 * `Added to` - An Added To action.
                 * `Appearance by` - An Appearance By action.
                 * `Liked by` - A Liked By action.
                 * `Uploaded by` - An Uploaded By action.
              enum:
                - Added to
                - Appearance by
                - Liked by
                - Uploaded by
              example: Added to
              type: string
            resource:
              description: >-
                The contextual resource: a user, group, or channel
                representation, or an object of a tag.
              nullable: true
              type: object
            resource_type:
              description: The contextual resource type.
              example: clip
              type: string
          required:
            - action
            - resource
            - resource_type
          type: object
        created_time:
          description: The time in ISO 8601 format when the video was created.
          example: '2018-03-05T21:04:47+00:00'
          type: string
        custom_url:
          description: The custom URL of the video.
          nullable: true
          type: string
        description_html:
          description: >-
            A brief explanation of the video's content, formatted with HTML
            entities.
          example: <p>A celebration of <b>10 years</b> of Staff Picks.</p>
          nullable: true
          type: string
        description_rich:
          description: A JSON representation of the description.
          example: '{"ops":[{"insert": "Text"}]}'
          type: string
        disabled_properties:
          $ref: '#/components/schemas/disabled-video-properties'
        download:
          description: >-
            The list of downloadable files for the video. This data requires a
            bearer token with the `private` scope.
          items:
            $ref: '#/components/schemas/video-file'
          type: array
        duration:
          description: >-
            The video's duration in seconds. A value of `0` indicates the
            duration hasn't been calculated yet.
          example: 81
          type: number
        edit_session:
          $ref: '#/components/schemas/editing-session'
        embed:
          $ref: '#/components/schemas/embed-settings'
        files:
          description: >-
            The list of files for the video. This data requires a bearer token
            with the `private` scope.
          items:
            $ref: '#/components/schemas/video-file'
          type: array
        has_audio:
          description: Whether the video has audio.
          type: boolean
        has_audio_tracks:
          description: Whether the video has alternate audio tracks.
          type: boolean
        has_chapters:
          description: Whether the video has chapters.
          type: boolean
        has_interactive:
          description: Whether the video has interactive capability.
          example: false
          type: boolean
        has_text_tracks:
          description: Whether the video has text tracks.
          type: boolean
        height:
          description: The video's height in pixels.
          example: 1080
          type: number
        is_copyright_restricted:
          description: >-
            Whether the video is privacy restricted due to a copyright
            infringement. This data requires a bearer token with the `private`
            scope.
          type: boolean
        is_free:
          description: Whether the video is a free Vimeo Stock video.
          example: true
          type: boolean
        is_playable:
          description: Whether the video is playable.
          type: boolean
        language:
          description: The video's primary language.
          example: en-US
          nullable: true
          type: string
        last_user_action_event_date:
          description: The time in ISO 8601 format when the user last modified the video.
          example: '2018-03-21T23:08:22+00:00'
          nullable: true
          type: string
        license:
          description: >
            The [Creative Commons](http://creativecommons.org/licenses/) license
            that the video is given under.


            Option descriptions:
             * `by` - The video is given under the Attribution license.
             * `by-nc` - The video is given under the Attribution Non-Commercial license.
             * `by-nc-nd` - The video is given under the Attribution Non-Commercial No Derivatives license.
             * `by-nc-sa` - The video is given under the Attribution Non-Commercial Share Alike license.
             * `by-nd` - The video is given under the Attribution No Derivatives license.
             * `by-sa` - The video is given under the Attribution Share Alike license.
             * `cc0` - The video is given under the Public Domain Dedication license.
          enum:
            - by
            - by-nc
            - by-nc-nd
            - by-nc-sa
            - by-nd
            - by-sa
            - cc0
          example: by
          type: string
        link:
          description: The link to the video.
          example: https://vimeo.com/258684937
          type: string
        manage_link:
          description: >-
            The link to the video management page. This data requires a bearer
            token with the `private` scope.
          example: /manage/videos/258684937
          type: string
        metadata:
          description: The video's metadata.
          properties:
            can_be_replaced:
              description: Whether the video can be replaced.
              example: true
              type: boolean
            connections:
              description: A list of resource URIs related to the video.
              properties:
                ancestor_path:
                  description: >-
                    Information about the video's ancestry, ordered from the
                    direct parent folder to higher-level ancestors.
                  items:
                    $ref: '#/components/schemas/ancestor-path'
                  type: array
                available_channels:
                  description: >-
                    Information about the channels to which the video can be
                    added. This data requires a bearer token with the `private`
                    scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                    total:
                      description: >-
                        The total number of channels on this connection. This
                        data requires a bearer token with the `private` scope.
                      example: 14
                      type: number
                    uri:
                      description: >-
                        The API URI that resolves to the connection data. This
                        data requires a bearer token with the `private` scope.
                      example: /videos/258684937/videos/available_channels
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                comments:
                  description: Information about the comments on the video.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of comments on this connection.
                      example: 14
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/comments
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                credits:
                  description: Information about the users credited in the video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of users on this connection.
                      example: 4
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/credits
                      type: string
                  type: object
                likes:
                  description: Information about the users who have liked the video.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of likes on this connection.
                      example: 230
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/likes
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                ondemand:
                  description: Information about the video's On Demand data.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    resource_key:
                      description: The On Demand connection resource key.
                      example: bac1033deba2310ebba2caec33c23e4beea67aba
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/pages/61326
                      type: string
                  required:
                    - options
                    - resource_key
                    - uri
                  type: object
                pictures:
                  description: Information about the video's thumbnails.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: Total number of thumbnails on this connection.
                      example: 1
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/pictures
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                recommendations:
                  description: Information about the recommendations for the video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/recommendations
                      type: string
                  type: object
                related:
                  description: Information about the video's related content.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937?offset=10
                      type: string
                  type: object
                resource_creator_team_user:
                  description: >-
                    Information about the team user who uploaded the video. This
                    data requires a bearer token with the `private` scope.
                  properties:
                    uri:
                      description: >-
                        The URI for the team user who uploaded the video. This
                        data requires a bearer token with the `private` scope.
                      type: string
                  required:
                    - uri
                  type: object
                season:
                  description: Information about the video's season.
                  properties:
                    name:
                      description: The name of the season.
                      example: Season 1
                      type: string
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/pages/61326/season/12345
                      type: string
                  required:
                    - name
                    - options
                    - uri
                  type: object
                team_permissions:
                  description: >-
                    Information about the video's team permissions list. This
                    data requires a bearer token with the `private` scope.
                  properties:
                    options:
                      description: >-
                        An array of HTTP methods permitted on this URI. This
                        data requires a bearer token with the `private` scope.
                      items:
                        type: string
                      type: array
                  required:
                    - options
                  type: object
                texttracks:
                  description: Information about the video's text tracks.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of text tracks on this connection.
                      example: 2
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/texttracks
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                trailer:
                  description: Information about the video's Vimeo On Demand trailer.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    resource_key:
                      description: The trailer connection resource key.
                      example: bac1033deba2310ebba2caec33c23e4beea67aba
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /ondemand/pages/61326/videos/12345
                      type: string
                  required:
                    - options
                    - resource_key
                    - uri
                  type: object
                users_with_access:
                  description: >-
                    Information about the user privacy of the video, if the
                    video privacy setting is `users`.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of users on this connection.
                      example: 8
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/privacy/users
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
                versions:
                  description: Information about the video's versions.
                  properties:
                    current_uri:
                      description: The URI of the current version of the video.
                      example: /videos/258684937/versions/12345
                      type: string
                    has_interactive:
                      description: Whether the video has interactive capability.
                      example: false
                      type: boolean
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    origin_variable_frame_resolution:
                      description: >-
                        Whether the video has unified resolution. If the value
                        of this field is `false`, the video requires
                        transcoding.
                      example: false
                      type: boolean
                    resource_key:
                      description: >-
                        The resource key string of the current version of the
                        video.
                      example: bac1033deba2310ebba2caec33c23e4beea67aba
                      type: string
                    total:
                      description: The total number of versions on this connection.
                      example: 3
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937/versions
                      type: string
                  required:
                    - has_interactive
                    - options
                    - origin_variable_frame_resolution
                    - total
                    - uri
                  type: object
              required:
                - ancestor_path
                - available_channels
                - comments
                - credits
                - likes
                - ondemand
                - pictures
                - recommendations
                - related
                - resource_creator_team_user
                - season
                - team_permissions
                - texttracks
                - trailer
                - users_with_access
                - versions
              type: object
            has_chapter_suggestions:
              description: Whether the video has chapter suggestions.
              example: true
              type: boolean
            has_email_capture:
              description: Whether the video has the email capture feature.
              example: true
              type: boolean
            interactions:
              description: A list of resource URIs related to the video.
              properties:
                summary:
                  description: >-
                    Information about whether the current user can create or get
                    a summary for the video.
                  nullable: true
                  properties:
                    disabled:
                      description: Whether the summary method is disabled.
                      type: boolean
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    reason:
                      description: |
                        The reason why the summary method is disabled.

                        Option descriptions:
                         * `transcript_ready_but_not_english` - The transcript is ready, but isn't in English.
                         * `transcript_status_does_not_exist` - The transcript doesn't exist.
                         * `transcript_status_exceeds_maximum_duration` - The transcript duration is too long.
                         * `transcript_status_failed` - The transcript job failed.
                         * `transcript_status_in_progress` - The transcript job is in progress.
                         * `transcript_status_language_not_supported` - The transcript's language isn't supported.
                         * `transcript_status_no_speech` - There's no speech detected for the transcript.
                         * `transcript_status_not_started` - The transcript job hasn't started.
                         * `transcript_status_unknown` - The transcript job status is unknown.
                         * `video_not_ready` - The video isn't ready.
                         * `video_too_short` - The video is too short.
                      enum:
                        - transcript_ready_but_not_english
                        - transcript_status_does_not_exist
                        - transcript_status_exceeds_maximum_duration
                        - transcript_status_failed
                        - transcript_status_in_progress
                        - transcript_status_language_not_supported
                        - transcript_status_no_speech
                        - transcript_status_not_started
                        - transcript_status_unknown
                        - video_not_ready
                        - video_too_short
                      example: transcript_ready_but_not_english
                      nullable: true
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - disabled
                    - options
                    - reason
                    - uri
                  type: object
                album:
                  description: >-
                    Information about adding or removing a video from the
                    showcase. This information is included only when the video
                    is referenced by the URI of a showcase that's moderated by
                    the user.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                ask_ai:
                  description: >-
                    Information about where and how to submit questions to the
                    AI service for this video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                ask_ai_viewer:
                  description: >-
                    Information about where and how to submit questions by
                    viewers to the AI service for this video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                buy:
                  description: The Buy interaction for the On Demand video.
                  nullable: true
                  properties:
                    currency:
                      description: The currency code for the user's region.
                      example: USD
                      nullable: true
                      type: string
                    display_price:
                      description: >-
                        The formatted display price for buying the On Demand
                        video.
                      example: '5.99'
                      nullable: true
                      type: string
                    download:
                      description: |
                        The user's download access to the On Demand video.

                        Option descriptions:
                         * `available` - The video is available for download.
                         * `purchased` - The user has purchased the video.
                         * `restricted` - The user isn't permitted to download the video.
                         * `unavailable` - The video isn't available for download.
                      enum:
                        - available
                        - purchased
                        - restricted
                        - unavailable
                      example: available
                      type: string
                    drm:
                      description: Whether the On Demand video has DRM.
                      example: true
                      type: boolean
                    link:
                      description: The URL to buy the On Demand video on Vimeo.
                      example: https://vimeo.com/ondemand/darbyforever
                      nullable: true
                      type: string
                    price:
                      description: The price to buy the On Demand video.
                      example: 5.99
                      nullable: true
                      type: number
                    purchase_time:
                      description: >-
                        The time in ISO 8601 format when the On Demand video was
                        purchased.
                      example: '2018-03-05T21:04:47+00:00'
                      nullable: true
                      type: string
                    stream:
                      description: |
                        The user's streaming access to the On Demand video.

                        Option descriptions:
                         * `available` - The video is available for streaming.
                         * `purchased` - The user has purchased the video.
                         * `restricted` - The user isn't permitted to stream the video.
                         * `unavailable` - The video isn't available for streaming
                      enum:
                        - available
                        - purchased
                        - restricted
                        - unavailable
                      example: available
                      type: string
                    uri:
                      description: The product URI to purchase the On Demand video.
                      example: /ondemand/pages/61326/products/12345
                      nullable: true
                      type: string
                  required:
                    - currency
                    - display_price
                    - download
                    - drm
                    - link
                    - price
                    - purchase_time
                    - stream
                    - uri
                  type: object
                can_request_team_role_upgrade:
                  description: >-
                    Information about whether the user can request a team
                    upgrade from the Viewer role.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    properties:
                      description: >-
                        An object of suggested fields to be used for this
                        interaction.
                      properties:
                        folder_uri:
                          description: >-
                            An object containing data on the value of
                            **folder_uri** and whether it's required for the
                            interaction.
                          properties:
                            required:
                              description: >-
                                Whether the URI of the folder must be sent to
                                achieve the desired action.
                              type: boolean
                            value:
                              description: >-
                                The URI of the folder to which the team member
                                should have access.
                              type: string
                          required:
                            - required
                            - value
                          type: object
                        status:
                          description: >-
                            An object containing data on the value of **status**
                            and whether it's required for the interaction.
                          properties:
                            required:
                              description: >-
                                Whether the status of the role upgrade request
                                must be sent to achieve the desired action.
                              type: boolean
                            value:
                              description: >-
                                The status of the role upgrade request to which
                                the team member should have access.
                              type: string
                          required:
                            - required
                            - value
                          type: object
                        upgrade_to_role:
                          description: >-
                            An object containing data on the value of
                            **upgrade_to_role** and whether it's required for
                            the interaction.
                          properties:
                            required:
                              description: >-
                                Whether the upgrade role must be sent to achieve
                                the desired action.
                              type: boolean
                            value:
                              description: >-
                                The value of the team role to which the user
                                should be upgraded.
                              type: number
                          required:
                            - required
                            - value
                          type: object
                      required:
                        - folder_uri
                        - status
                        - upgrade_to_role
                      type: object
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - properties
                    - uri
                  type: object
                can_update_privacy_to_public:
                  description: Whether a user can update the video privacy to public.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                channel:
                  description: >-
                    Information about removing a video from the channel. This
                    information is included only when the video is referenced by
                    the URI of a channel that's moderated by the user.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                create_editor:
                  description: >-
                    Information about where and how to edit a video using the
                    Vimeo Create editor.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                delete:
                  description: Information about where and how to delete a video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                edit:
                  description: Information about where and how to edit a video.
                  nullable: true
                  properties:
                    blocked_fields:
                      description: >-
                        An array of video fields that a user can't interact
                        with.
                      items:
                        type: string
                      type: array
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - blocked_fields
                    - options
                    - uri
                  type: object
                edit_privacy:
                  description: Information about editing the privacy of the video.
                  nullable: true
                  properties:
                    content_rating:
                      description: A list of valid content rating flags for the video.
                      items:
                        type: string
                      type: array
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    properties:
                      description: >-
                        An array of suggested fields to be used for this
                        interaction.
                      items:
                        type: object
                        properties:
                          name:
                            description: The name of the property to be sent.
                            type: string
                          options:
                            description: An array of the field's selectable options.
                            items:
                              type: string
                            type: array
                          required:
                            description: >-
                              Whether the field must be sent to achieve the
                              desired action.
                            type: boolean
                        required:
                          - name
                          - options
                          - required
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - content_rating
                    - options
                    - properties
                    - uri
                  type: object
                has_restricted_privacy_options:
                  description: >-
                    Information about whether the video has restricted privacy
                    options.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                highlights:
                  description: >-
                    Information about where and how to create a highlight for
                    the video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                invite:
                  description: >-
                    Information about where and how to get a list of team
                    members

                    or groups who were explicitly invited to a video, and where
                    and how to invite a team member to a video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                legal_hold:
                  description: The associated legal hold object.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                like:
                  description: Information about whether the user has liked this video.
                  properties:
                    added:
                      description: Whether the user has liked the video.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the user liked the
                        video.
                      type: string
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    show_count:
                      description: Whether the user can access the video's number of likes.
                      type: boolean
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - added
                    - added_time
                    - options
                    - show_count
                    - uri
                  type: object
                rent:
                  description: The Rent interaction for the On Demand video.
                  nullable: true
                  properties:
                    currency:
                      description: The currency code for the user's region.
                      example: USD
                      nullable: true
                      type: string
                    display_price:
                      description: >-
                        The formatted display price for renting the On Demand
                        video.
                      example: '5.99'
                      nullable: true
                      type: string
                    drm:
                      description: Whether the On Demand video has DRM.
                      example: true
                      type: boolean
                    expires_time:
                      description: >-
                        The time in ISO 8601 format when the rental period for
                        the On Demand video expires.
                      example: '2018-03-05T21:04:47+00:00'
                      nullable: true
                      type: string
                    link:
                      description: The URL to rent the On Demand video on Vimeo.
                      example: https://vimeo.com/ondemand/darbyforever
                      nullable: true
                      type: string
                    price:
                      description: The price to buy the On Demand video.
                      example: 5.99
                      nullable: true
                      type: number
                    purchase_time:
                      description: >-
                        The time in ISO 8601 format when the On Demand video was
                        rented.
                      example: '2018-09-16T09:02:40+00:00'
                      nullable: true
                      type: string
                    stream:
                      description: |
                        The user's streaming access to the On Demand video.

                        Option descriptions:
                         * `available` - The video is available for streaming.
                         * `purchased` - The user has purchased the video.
                         * `restricted` - The user isn't permitted to stream the video.
                         * `unavailable` - The video isn't available for streaming.
                      enum:
                        - available
                        - purchased
                        - restricted
                        - unavailable
                      example: available
                      type: string
                    uri:
                      description: The product URI to rent the On Demand video.
                      example: /ondemand/pages/61326/products/12345
                      nullable: true
                      type: string
                  required:
                    - currency
                    - display_price
                    - drm
                    - expires_time
                    - link
                    - price
                    - purchase_time
                    - stream
                    - uri
                  type: object
                report:
                  description: Information about where and how to report a video.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    reason:
                      description: A list of valid reasons for reporting a video.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - reason
                    - uri
                  type: object
                set_content_rating:
                  description: Information about setting a content rating for the video.
                  nullable: true
                  properties:
                    content_rating:
                      description: A list of valid content rating flags for the video.
                      items:
                        type: string
                      type: array
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - content_rating
                    - options
                    - uri
                  type: object
                subscribe:
                  description: Subscription information for an On Demand video.
                  nullable: true
                  properties:
                    drm:
                      description: Whether the On Demand video has DRM.
                      example: true
                      type: boolean
                    expires_time:
                      description: >-
                        The time in ISO 8601 format when the subscription
                        expires.
                      example: '2018-03-05T21:04:47+00:00'
                      type: string
                    purchase_time:
                      description: >-
                        The time in ISO 8601 format when the subscription was
                        purchased.
                      example: '2018-03-02T21:04:47+00:00'
                      type: string
                    stream:
                      description: The stream type.
                      example: purchased
                      type: string
                  type: object
                team_mentions:
                  description: >-
                    Information about whether a user can mention the team
                    members and commented users associated with a video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                transcript_video_editor:
                  description: >-
                    Information about where and how to edit a video using the
                    Transcription-based Video Editor editor.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                trim:
                  description: Information about where and how to trim the video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                validate:
                  description: Information about where and how to validate a video field.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                view_privacy:
                  description: >-
                    Information about whether a user has permissions to view the
                    privacy of the video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                view_team_members:
                  description: >-
                    Information about whether a user can view the team members
                    associated with a video.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                watched:
                  description: >-
                    Information about removing this video from the user's list
                    of watched videos.
                  properties:
                    added:
                      description: Whether the user has watched the video.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the user watched the
                        video.
                      type: string
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - added
                    - added_time
                    - options
                    - uri
                  type: object
                watchlater:
                  description: >-
                    Information about whether this video appears on the user's
                    Watch Later list.
                  properties:
                    added:
                      description: >-
                        Whether the user has added the video to their Watch
                        Later list.
                      example: true
                      type: boolean
                    added_time:
                      description: >-
                        The time in ISO 8601 format when the user added the
                        video to their Watch Later list.
                      type: string
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - added
                    - added_time
                    - options
                    - uri
                  type: object
              required:
                - album
                - ask_ai
                - ask_ai_viewer
                - buy
                - can_request_team_role_upgrade
                - can_update_privacy_to_public
                - channel
                - create_editor
                - delete
                - edit
                - edit_privacy
                - has_restricted_privacy_options
                - highlights
                - invite
                - legal_hold
                - like
                - rent
                - report
                - set_content_rating
                - summary
                - team_mentions
                - transcript_video_editor
                - trim
                - validate
                - view_privacy
                - view_team_members
                - watched
                - watchlater
              type: object
            is_screen_record:
              description: Whether the video is a screen recording.
              example: true
              type: boolean
            is_vimeo_create:
              description: Whether the video is a Vimeo Create video.
              example: true
              type: boolean
            is_webinar:
              description: Whether the video is a webinar.
              example: true
              type: boolean
            is_zoom_upload:
              description: Whether the video is a Zoom upload.
              example: true
              type: boolean
          required:
            - connections
            - has_chapter_suggestions
            - interactions
            - is_screen_record
            - is_vimeo_create
            - is_webinar
            - is_zoom_upload
          type: object
        modified_time:
          description: >-
            The time in ISO 8601 format when the video metadata was last
            modified.
          example: '2018-09-16T09:02:40+00:00'
          type: string
        name:
          description: The video's title.
          example: Celebrating 10 Years of Staff Picks
          type: string
        origin_variable_frame_resolution:
          description: >-
            Whether the video has unified resolution. If the value of this field
            is `false`, the video requires transcoding.
          example: false
          type: boolean
        parent_folder:
          $ref: '#/components/schemas/project'
        password:
          description: >-
            The privacy-enabled password to watch the video. Only the video's
            owner and team members with permission can access the video's
            password. This data requires a bearer token with the `private`
            scope.
          example: hunter1
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        play:
          $ref: '#/components/schemas/play'
        player_embed_url:
          description: The video's player embed URL.
          example: https://player.vimeo.com/video/258684937?h=c893f64dd6
          type: string
        privacy:
          description: The video's privacy setting.
          properties:
            add:
              description: Whether the video can be added to collections.
              example: true
              type: boolean
            allow_share_link:
              description: Whether the share link is usable.
              type: boolean
            comments:
              description: |
                The video's comment permission setting.

                Option descriptions:
                 * `anybody` - Anyone can comment on the video.
                 * `contacts` - Only contacts can comment on the video.
                 * `nobody` - No one can comment on the video.
              enum:
                - anybody
                - contacts
                - nobody
              example: anybody
              type: string
            download:
              description: Whether the video can be downloaded.
              example: true
              type: boolean
            embed:
              description: |
                The video's embed permission setting.

                Option descriptions:
                 * `private` - The video is private.
                 * `public` - Anyone can embed the video.
                 * `whitelist` - The video can be embedded on specific domains.
              enum:
                - private
                - public
                - whitelist
              example: private
              type: string
            view:
              description: |
                The general privacy setting of the video.

                Option descriptions:
                 * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.
                 * `contacts` - Only contacts can access the video. _This field is deprecated._
                 * `disable` - The video is hidden from Vimeo. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.
                 * `nobody` - No one besides the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Anyone with the video's password can access the video.
                 * `ptv` - The Vimeo On Demand video is accessible and searchable from Vimeo. _This field is deprecated._
                 * `ptvhide` - The Vimeo On Demand video is hidden from Vimeo. _This field is deprecated._
                 * `stock` - The stock footage is accessible and searchable from Vimeo. _This field is deprecated._
                 * `stock_purchased` - The purchased stock footage is accessible and searchable from Vimeo. _This field is deprecated._
                 * `unlisted` - The video is accessible but not searchable from Vimeo.
                 * `users` - Only Vimeo members can access the video. _This field is deprecated._
              enum:
                - anybody
                - contacts
                - disable
                - nobody
                - password
                - ptv
                - ptvhide
                - stock
                - stock_purchased
                - unlisted
                - users
              example: anybody
              type: string
          required:
            - add
            - allow_share_link
            - comments
            - download
            - embed
            - view
          type: object
        rating_mod_locked:
          description: Whether the video's content rating is locked by a mod.
          type: boolean
        release_time:
          description: The time in ISO 8601 format when the video was released.
          example: '2018-03-05T21:04:47+00:00'
          type: string
        resource_key:
          description: The resource key string of the video.
          example: bac1033deba2310ebba2caec33c23e4beea67aba
          type: string
        show_review_page:
          description: >-
            Whether to show the `Review` button on single video view recipient
            pages. This data requires a bearer token with the `private` scope.
          nullable: true
          type: boolean
        show_svv_footer_banner:
          description: >-
            Whether to show the single video view footer banner on recipient
            pages. This data requires a bearer token with the `private` scope.
          nullable: true
          type: boolean
        show_svv_timecoded_comments:
          description: >-
            Whether to enable timecoded comments on the single video view
            recipient page. This data requires a bearer token with the `private`
            scope.
          nullable: true
          type: boolean
        spatial:
          description: The video's 360 spatial data.
          properties:
            director_timeline:
              description: The video's 360 director timeline.
              items:
                type: object
                properties:
                  pitch:
                    description: >-
                      The timeline pitch value, ranging from a minimum of `-90`
                      to a maximum of `90`.
                    example: 70
                    type: number
                  roll:
                    description: The timeline roll value.
                    example: 0
                    type: number
                  time_code:
                    description: The timeline time code.
                    example: 300
                    type: number
                  yaw:
                    description: >-
                      The timeline yaw value, ranging from a minimum of `0` to a
                      maximum of `360`.
                    example: 125
                    type: number
              type: array
            field_of_view:
              description: >-
                The video's 360 field of view value, ranging from a mininum of
                `30` to a maximum of `90`. The default value is `50`.
              example: 50
              nullable: true
              type: number
            projection:
              description: |
                The video's 360 spatial projection.

                Option descriptions:
                 * `cubical` - The spatial projection is cubical.
                 * `cylindrical` - The spatial projection is cylindrical.
                 * `dome` - The spatial projection is dome-shaped.
                 * `equirectangular` - The spatial projection is equirectangular.
                 * `pyramid` - The spatial projection is pyramid-shaped.
              enum:
                - cubical
                - cylindrical
                - dome
                - equirectangular
                - pyramid
              example: cubical
              nullable: true
              type: string
            stereo_format:
              description: |
                The video's 360 stereo format.

                Option descriptions:
                 * `left-right` - The stereo format is left-right.
                 * `mono` - The audio is monaural.
                 * `top-bottom` - The stereo format is top-bottom.
              enum:
                - left-right
                - mono
                - top-bottom
              example: left-right
              nullable: true
              type: string
          required:
            - director_timeline
            - field_of_view
            - projection
            - stereo_format
          type: object
        stats:
          description: A collection of analytics associated with the video.
          properties:
            plays:
              description: >-
                The current total number of times that the video has been
                played.
              example: 20
              nullable: true
              type: number
          required:
            - plays
          type: object
        status:
          description: |
            The status code for the availability of the video.

            Option descriptions:
             * `available` - The video is available.
             * `quota_exceeded` - The user's weekly upload quota is exceeded with this video.
             * `total_cap_exceeded` - The user's total storage limit is exceeded with this video.
             * `transcode_starting` - Transcoding is starting for the video.
             * `transcoding` - Transcoding has started and is currently underway for the video.
             * `transcoding_error` - There was an error in transcoding the video.
             * `unavailable` - The video is unavailable.
             * `uploading` - The video is being uploaded.
             * `uploading_error` - There was an error in uploading the video.
          enum:
            - available
            - quota_exceeded
            - total_cap_exceeded
            - transcode_starting
            - transcoding
            - transcoding_error
            - unavailable
            - uploading
            - uploading_error
          example: available
          nullable: true
          type: string
        transcode:
          description: The transcode information of the video upload.
          nullable: true
          properties:
            status:
              description: |
                The video's availability status.

                Option descriptions:
                 * `complete` - Transcoding is complete. The video is available.
                 * `error` - There was a transcoding error. The video isn't available.
                 * `in_progress` - Transcoding is currently underway. The video isn't available yet.
              enum:
                - complete
                - error
                - in_progress
              example: complete
              type: string
          type: object
        transcript:
          description: >-
            The transcript information of the video. This data requires a bearer
            token with the `private` scope.
          nullable: true
          properties:
            language:
              description: >-
                The video transcript's language. This data requires a bearer
                token with the `private` scope.
              example: en
              nullable: true
              type: string
            status:
              description: >
                The video transcript's availability status. This data requires a
                bearer token with the `private` scope.


                Option descriptions:
                 * `completed` - Transcription is completed. The transcript is available.
                 * `failed` - There was a transcription error. The transcript isn't available.
                 * `in_progress` - Transcription is currently underway. The transcript isn't available yet.
                 * `language_not_supported` - We currently don't support transcribing audio for this video's language.
                 * `no_speech` - Transcription was completed, but there were no words in the audio to transcribe.
                 * `not_started` - The transcript job hasn't started.
                 * `unknown` - There isn't a record of this video's transcription job.
              enum:
                - completed
                - failed
                - in_progress
                - language_not_supported
                - no_speech
                - not_started
                - unknown
              example: completed
              type: string
          required:
            - language
          type: object
        type:
          description: |
            The type of the video.

            Option descriptions:
             * `live` - The video is or was an event.
             * `stock` - The video is a Vimeo Stock video.
             * `video` - The video is a standard Vimeo video.
          enum:
            - live
            - stock
            - video
          example: video
          type: string
        upload:
          description: The video's upload information.
          nullable: true
          properties:
            approach:
              description: |
                The approach for uploading the video.

                Option descriptions:
                 * `post` - The video upload uses the POST approach.
                 * `pull` - The video upload uses the pull approach.
                 * `tus` - The video upload uses the tus approach.
              enum:
                - post
                - pull
                - tus
              example: post
              type: string
            form:
              description: The HTML form for uploading a video through the POST approach.
              type: string
            gcs_uid:
              description: The ID of the Google Cloud Storage upload.
              type: string
            link:
              description: The link of the video to capture through the pull approach.
              type: string
            redirect_url:
              description: The redirect URL for the upload app.
              type: string
            size:
              description: The file size in bytes of the uploaded video.
              example: 60000
              type: number
            status:
              description: |
                The status code for the availability of the uploaded video.

                Option descriptions:
                 * `complete` - The upload is complete.
                 * `error` - The upload ended with an error.
                 * `in_progress` - The upload is underway.
              enum:
                - complete
                - error
                - in_progress
              example: complete
              type: string
            upload_link:
              description: The link for sending video file data.
              type: string
          required:
            - status
          type: object
        uploader:
          description: The video's uploader.
          properties:
            link:
              description: The profile link of the user who uploaded the video.
              type: string
            name:
              description: The display name of the user who uploaded the video.
              type: string
            pictures:
              $ref: '#/components/schemas/picture'
          required:
            - link
            - name
            - pictures
          type: object
          x-konfig-properties:
            pictures:
              description: The active portrait of the user who uploaded the video.
        uri:
          description: The video's canonical relative URI.
          example: /videos/258684937
          type: string
        user:
          $ref: '#/components/schemas/user'
        version_transcode_status:
          $ref: '#/components/schemas/version-transcode-status'
        vod:
          description: The video's Vimeo On Demand information.
          nullable: true
          properties:
            id:
              description: The video's Vimeo On Demand ID.
              nullable: true
              type: number
          required:
            - id
          type: object
        width:
          description: The video's width in pixels.
          example: 1920
          type: number
      required:
        - allowed_privacies
        - app
        - can_move_to_project
        - categories
        - content_rating
        - content_rating_class
        - context
        - created_time
        - custom_url
        - description
        - description_html
        - download
        - duration
        - embed
        - files
        - has_audio
        - has_audio_tracks
        - has_chapters
        - has_interactive
        - has_text_tracks
        - height
        - is_copyright_restricted
        - is_playable
        - language
        - license
        - link
        - metadata
        - modified_time
        - name
        - origin_variable_frame_resolution
        - pictures
        - player_embed_url
        - privacy
        - rating_mod_locked
        - release_time
        - resource_key
        - show_review_page
        - show_svv_footer_banner
        - show_svv_timecoded_comments
        - spatial
        - stats
        - status
        - tags
        - transcode
        - transcript
        - type
        - upload
        - uploader
        - uri
        - user
        - version_transcode_status
        - vod
        - width
      type: object
      x-konfig-properties:
        app:
          description: The API application associated with the video owner's token.
        disabled_properties:
          description: Information about what features may be disabled on the video.
        edit_session:
          description: >-
            Information about the video's Vimeo Create editing session. This
            data requires a bearer token with the `private` scope.
        embed:
          description: Information about embedding the video.
        parent_folder:
          description: Information about the folder that contains the video.
          nullable: true
        pictures:
          description: The video's active picture.
        play:
          description: The `Play` representation.
        user:
          description: The video's owner.
          nullable: true
        version_transcode_status:
          description: >-
            Detailed transcode status information for the current version of the
            video upload.
    video-file:
      title: Video File
      properties:
        codec:
          description: |
            The codec of the video file.

            Option descriptions:
             * `AV1` - The codec is AV1.
             * `H264` - The codec is H264.
             * `HEVC` - The codec is HEVC.
          enum:
            - AV1
            - H264
            - HEVC
          example: AV1
          nullable: true
          type: string
        created_time:
          description: The time in ISO 8601 format when the video file was created.
          example: '2017-05-16T15:41:36+00:00'
          type: string
        expires:
          description: The time in ISO 8601 format when the video file expires.
          example: '2017-05-17T15:41:00+00:00'
          type: string
        fps:
          description: The frames per second of the video.
          example: 30
          type: number
        height:
          description: The height of the video in pixels.
          example: 1080
          nullable: true
          type: number
        link:
          description: The direct link to the video file.
          example: >-
            https://player.vimeo.com/play/965853365?s=258684937_1537148280_a749040a9205
          type: string
        log:
          properties:
            play:
              description: The URL to record a Play logging event.
              example: >-
                https://api.vimeo.com/videos/258684937/stats/play/ts/1537137531:d8a2bbf8617cf/887133875
              type: string
          type: object
        md5:
          description: The MD5 hash of the video file.
          example: 1bc29b36f623ba82aaf6724fd3b16718
          type: string
        public_name:
          description: The public name of the video file.
          example: HD 720p
          type: string
        quality:
          description: |
            The video quality as determined by height and width.

            Option descriptions:
             * `hd` - The video is in high definition.
             * `hls` - The video is suitable for HTTP live streaming.
             * `mobile` - The video is mobile quality.
             * `sd` - The video is in standard definition.
             * `source` - The video's source file.
             * `uhd` - The video resolution is 2K or higher.
          enum:
            - hd
            - hls
            - mobile
            - sd
            - source
            - uhd
          example: hd
          type: string
        rendition:
          description: |
            The video rendition.

            Option descriptions:
             * `1080p` - The video has 1080p resolution.
             * `240p` - The video has 240p resolution.
             * `2k` - The video has 2K resolution.
             * `360p` - The video has 360p resolution.
             * `480p` - The video has 480p resolution.
             * `4k` - The video has 4K resolution.
             * `540p` - The video has 540p resolution.
             * `5k` - The video has 5K resolution.
             * `6k` - The video has 6K resolution.
             * `720p` - The video has 720p resolution.
             * `7k` - The video has 7K resolution.
             * `8k` - The video has 8K resolution.
             * `adaptive` - The video rendition is adaptive (for example, HLS or DASH).
             * `source` - The video is the source file.
          enum:
            - 1080p
            - 240p
            - 2k
            - 360p
            - 480p
            - 4k
            - 540p
            - 5k
            - 6k
            - 720p
            - 7k
            - 8k
            - adaptive
            - source
          example: 1080p
          type: string
        size:
          description: The approximate size in bytes of the video file.
          example: 9932503
          nullable: true
          type: number
        size_short:
          description: The converted size of the video file rounded to two decimal places.
          example: 17.89MB
          type: string
        source_link:
          description: The source link of the video file.
          example: https://player.vimeo.com/source/965853365?s=258684937
          nullable: true
          type: string
        type:
          description: |
            The type of video file.

            Option descriptions:
             * `source` - The video file is a source file.
             * `video/mp4` - The video file is in MP4 format.
             * `video/webm` - The video file is in WebM format.
             * `vp6/x-video` - The video file is in VP6 format.
          enum:
            - source
            - video/mp4
            - video/webm
            - vp6/x-video
          example: source
          nullable: true
          type: string
        video_file_id:
          description: The ID of the video file.
          example: b9ec9728-aa28-4fcd-9cc8-02944798c712
          type: string
        width:
          description: The width of the video in pixels.
          example: 1920
          nullable: true
          type: number
      required:
        - codec
        - created_time
        - fps
        - height
        - link
        - md5
        - public_name
        - quality
        - rendition
        - size
        - size_short
        - type
        - width
      type: object
    video-version:
      title: Video Version
      properties:
        description:
          description: >-
            A description of the video version. This description can make use of
            the full unicode character set. This field appears in the response
            only when a corresponding value is present.
          example: description with emoji
          type: string
        active:
          description: Whether the video version is currently active.
          example: true
          type: boolean
        app:
          $ref: '#/components/schemas/api-app'
        can_restore_create:
          description: Whether the version can be restored.
          example: false
          type: boolean
        create_storyboard_id:
          description: The storyboard ID of the video version.
          example: storyboard_123456_1000
          type: string
        created_time:
          description: The time in ISO 8601 format when the video version was created.
          example: '2018-03-05T21:04:47+00:00'
          type: string
        download_config:
          description: The download config associated with the version.
          type: object
        duration:
          description: The duration in seconds of the video version.
          example: 81
          nullable: true
          type: number
        filename:
          description: The file name of the video version.
          example: rev2.mp4
          type: string
        filesize:
          description: The size in byes of the video version file.
          example: 4025322521
          nullable: true
          type: number
        has_interactive:
          description: Whether the video has interactive capability.
          example: false
          type: boolean
        metadata:
          description: The video version's metadata.
          properties:
            connections:
              properties:
                video:
                  description: Data from the video associated with the version.
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 5
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /videos/258684937
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - video
              type: object
          required:
            - connections
          type: object
        modified_time:
          description: >-
            The time in ISO 8601 format when the video version was last
            modified.
          example: '2018-09-16T09:02:40+00:00'
          type: string
        origin_variable_frame_resolution:
          description: >-
            Whether the video has unified resolution. If the value of this field
            is `false`, the video requires transcoding.
          example: false
          type: boolean
        play:
          $ref: '#/components/schemas/play'
        transcode:
          description: The version's transcode information.
          nullable: true
          properties:
            status:
              description: |
                The status code for the availability of the video version.

                Option descriptions:
                 * `complete` - Transcoding is complete. The video version is available.
                 * `error` - There was a transcoding error. The video version isn't available.
                 * `in_progress` - Transcoding is in progress. The video version isn't available yet.
              enum:
                - complete
                - error
                - in_progress
              example: complete
              type: string
          type: object
        upload:
          description: The version's upload information.
          nullable: true
          properties:
            approach:
              description: |
                The approach for uploading the video.

                Option descriptions:
                 * `post` - The video upload uses the POST approach.
                 * `pull` - The video upload uses the pull approach.
                 * `tus` - The video upload uses the tus approach.
              enum:
                - post
                - pull
                - tus
              example: post
              type: string
            form:
              description: The HTML form for uploading a video through the POST approach.
              type: string
            gcs_uid:
              description: The ID of the Google Cloud Storage upload.
              type: string
            link:
              description: The link of the video to capture through the pull approach.
              type: string
            redirect_url:
              description: The redirect URL for the upload app.
              type: string
            size:
              description: The file size in bytes of the uploaded video.
              example: 60000
              type: number
            status:
              description: |
                The status code for the availability of the uploaded video.

                Option descriptions:
                 * `complete` - The upload is complete.
                 * `error` - The upload ended with an error.
                 * `in_progress` - The upload is underway.
              enum:
                - complete
                - error
                - in_progress
              example: complete
              type: string
            upload_link:
              description: The link for sending video file data.
              type: string
          required:
            - status
          type: object
        upload_date:
          description: The time in ISO 8601 format when the video version was uploaded.
          example: '2018-09-16T09:02:40+00:00'
          nullable: true
          type: string
        uri:
          description: The version's canonical relative URI.
          example: /videos/258684937/versions/12345
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - active
        - app
        - can_restore_create
        - create_storyboard_id
        - created_time
        - download_config
        - duration
        - filename
        - filesize
        - has_interactive
        - metadata
        - modified_time
        - origin_variable_frame_resolution
        - transcode
        - upload
        - upload_date
        - uri
        - user
      type: object
      x-konfig-properties:
        app:
          description: The API app associated with the video version.
        play:
          description: The `Play` representation.
        user:
          description: The owner of the video version.
          nullable: true
    webinar:
      title: Webinar
      properties:
        title:
          description: The title of the webinar.
          example: Live Content
          nullable: true
          type: string
        description:
          description: The description of the webinar.
          example: In this episode, we interview a surprise guest
          nullable: true
          type: string
        completed_on:
          description: The time in ISO 8601 format when the webinar was completed.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        created_time:
          description: The time in ISO 8601 format when the webinar was created.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        edit:
          description: Information about where and how to edit an item.
          nullable: true
          properties:
            options:
              description: An array of HTTP methods permitted on this URI.
              items:
                type: string
              type: array
            uri:
              description: The API URI that resolves to the connection data.
              type: string
          required:
            - options
            - uri
          type: object
        email_provider_list:
          description: >-
            Information about the email provider list that is selected to import
            registrants.
          items:
            type: object
            properties:
              is_active:
                description: Whether the connection is active.
                example: false
                type: boolean
              last_import_time:
                description: The most recent sync date of the provider list.
                example: '2018-07-30T14:00:00+00:00'
                nullable: true
                type: string
              list:
                description: Information about the connected list.
                nullable: true
                properties:
                  id:
                    description: The ID of the connected list.
                    example: 1234abcd
                    type: string
                  name:
                    description: The name of the connected list.
                    example: My List
                    type: string
                required:
                  - id
                  - name
                type: object
              provider:
                description: Information about the connected provider.
                properties:
                  dark_icon:
                    description: The dark icon of the connected provider.
                    example: http:://xyz.dark_icon
                    type: string
                  icon:
                    description: The standard icon of the connected provider.
                    example: http:://xyz.icon
                    type: string
                  id:
                    description: The ID of the connected provider.
                    example: marketo
                    type: string
                  name:
                    description: The name of the connected provider.
                    example: Marketo
                    type: string
                required:
                  - dark_icon
                  - icon
                  - id
                  - name
                type: object
            required:
              - is_active
              - last_import_time
              - list
              - provider
          type: array
        email_quota:
          description: Information about the webinar owner's email quota.
          properties:
            capping:
              description: The maximum number of webinar emails that the user can send.
              example: 400
              type: number
            total:
              description: The current number of webinar emails that the user has sent.
              example: 300
              type: number
          required:
            - capping
            - total
          type: object
        email_settings:
          $ref: '#/components/schemas/webinar-email-settings'
        events:
          description: The details of the webinar events associated with the webinar.
          nullable: true
          properties:
            data:
              description: >-
                The details of the first page of webinar events associated with
                the webinar.
              items:
                $ref: '#/components/schemas/webinar-event'
              type: array
            total:
              description: The total number of webinar events associated with the webinar.
              example: 4
              type: number
          required:
            - data
            - total
          type: object
        has_polls:
          description: Whether polls are associated with the webinar.
          example: false
          type: boolean
        metadata:
          description: Metadata about the webinar event.
          properties:
            connections:
              description: A list of resource URIs related to the webinar.
              type: object
            interactions:
              description: A list of resource URIs related to the event.
              type: object
          required:
            - connections
            - interactions
          type: object
        modified_on:
          description: The time in ISO 8601 format when the webinar was modified.
          example: '2023-11-03T09:24:56+00:00'
          type: string
        next_occurrence_time:
          description: >-
            The date in ISO 8601 format on which the next occurrence of the
            webinar is expected to be live.
          example: '2018-07-30T14:00:00+00:00'
          nullable: true
          type: string
        password:
          description: >-
            The password used to access the videos generated by streaming to the
            webinar event.
          example: gogo
          nullable: true
          type: string
        privacy:
          description: The initial privacy settings of the webinar.
          properties:
            embed:
              description: |
                The webinar's embed permission setting.

                Option descriptions:
                 * `private` - The webinar can't be embedded on any domain.
                 * `public` - The webinar can be embedded on any domain.
                 * `whitelist` - The webinar can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: private
              type: string
            view:
              description: |
                The general privacy setting for the webinar.

                Option descriptions:
                 * `anybody` - Anyone can access the webinar. This privacy setting appears as `Public` on the Vimeo front end.
                 * `nobody` - Only the event owner can access the webinar. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the live event.
                 * `team` - Only members of the authenticated user's team can access the webinar.
              enum:
                - anybody
                - nobody
                - password
                - team
              example: anybody
              type: string
          required:
            - embed
            - view
          type: object
        registration_data:
          description: Registration data about the webinar owner.
          properties:
            capping:
              description: >-
                The maximum number of registrants permitted to attend the
                webinar.
              example: 400
              type: number
            is_unlimited:
              description: Whether the number of registrants is unlimited.
              example: true
              type: boolean
            lower_limit:
              description: >-
                The minimum number of registrants to trigger the 80% capping
                email.
              example: 160
              type: number
            total:
              description: The number of registrants who have signed up for the webinar.
              example: 103
              type: number
            upper_limit:
              description: >-
                The maximum number of registrants to trigger the 100% capping
                email.
              example: 200
              type: number
          required:
            - capping
            - is_unlimited
            - lower_limit
            - total
            - upper_limit
          type: object
        registration_form:
          $ref: '#/components/schemas/email-capture-form'
        schedule:
          description: >-
            The description of the time or times that the webinar is expected to
            be live.
          nullable: true
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format at which the webinar is expected to
                be live when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            end_time:
              description: >-
                The date in ISO 8601 format on which the webinar is expected to
                end. This field applies when **schedule.type** is `single`.
              example: '2019-06-21T14:00:00+00:00'
              type: string
            scheduled_time:
              description: >-
                The date in ISO 8601 format on which the first occurrence of the
                webinar is expected to be live when **schedule.type** is
                `weekly`.
              example: '2018-06-21T14:00:00+00:00'
              nullable: true
              type: string
            start_time:
              description: >-
                The date in ISO 8601 format on which the webinar is expected to
                be live when **schedule.type** is `single`.
              example: '2018-06-21T14:00:00+00:00'
              type: string
            type:
              description: |
                The schedule of the webinar.

                Option descriptions:
                 * `single` - The webinar is live only once.
                 * `weekly` - The webinar is live on a recurring weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                The weekdays in UTC on which the webinar is expected to be live
                when **schedule.time** is `weekly`. The value of this field
                ranges from `1` to `7`, where `1` is Monday and `7` is Sunday.
              items:
                type: string
              type: array
          required:
            - daily_time
            - end_time
            - scheduled_time
            - start_time
            - type
            - weekdays
          type: object
        status:
          description: |
            The status of the webinar.

            Option descriptions:
             * `ended` - The webinar has ended.
             * `started` - The webinar has started.
          enum:
            - ended
            - started
          example: started
          nullable: true
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            the automatically generated video titles for the webinar.
          example: America/New_York
          type: string
        uri:
          description: The webinar's canonical relative URI.
          example: /webinars/f19bfa08-b266-4f20-bfce-db1d0719b52f
          type: string
        user:
          $ref: '#/components/schemas/user'
      required:
        - completed_on
        - created_time
        - description
        - edit
        - email_provider_list
        - email_quota
        - email_settings
        - events
        - has_polls
        - metadata
        - modified_on
        - next_occurrence_time
        - password
        - privacy
        - registration_data
        - registration_form
        - schedule
        - status
        - time_zone
        - title
        - uri
        - user
      type: object
      x-konfig-properties:
        email_settings:
          description: The settings for emails that are sent about the webinar.
        registration_form:
          description: The registration form settings associated with the webinar.
        user:
          description: The owner of the webinar.
    webinar-email-content:
      title: Webinar Email Content
      properties:
        body:
          description: The HTML body of the email.
          example: >-
            <p style="text-align:left;"> This email is all about the
            webinar.</p>
          type: string
        button_link:
          description: The target link for the call-to-action button in the email.
          example: https://vimeo.com
          type: string
        button_text:
          description: The text for the call-to-action button in the email.
          example: Join now
          type: string
        header:
          description: The HTML header section of the email.
          example: <h3> Welcome to the webinar </h3>
          type: string
        modified_time:
          description: >-
            The time in ISO 8601 format when the webinar email content was
            updated.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        subject:
          description: The HTML subject of the email.
          example: ABC is Hiring
          type: string
        type:
          description: |
            The email type for which the content was customized.

            Option descriptions:
             * `email_event_reminder_24_hrs` - The webinar reminder email, which goes out 24 hours before the event.
             * `email_post_event_thank_you` - The webinar post-event thank-you email.
             * `email_registration_confirmation` - The webinar registration confirmation email.
          enum:
            - email_event_reminder_24_hrs
            - email_post_event_thank_you
            - email_registration_confirmation
          example: email_registration_confirmation
          type: string
        use_calender:
          description: Whether to show the calendar in the email.
          example: true
          type: boolean
        use_custom_link:
          description: >-
            Whether to include a custom link in emails that are sent about the
            webinar.
          example: true
          type: boolean
      required:
        - body
        - button_link
        - button_text
        - header
        - modified_time
        - subject
        - type
        - use_calender
        - use_custom_link
      type: object
    webinar-email-settings:
      title: Webinar Email Settings
      properties:
        accent_color:
          description: The accent color scheme for emails that are sent about the webinar.
          example: '#00000f'
          type: string
        custom_link:
          description: The custom link for emails that are sent about the webinar.
          example: https://vimeo.com
          nullable: true
          type: string
        email_event_reminder_24_hrs:
          description: >-
            The email customization details for the webinar reminder email,
            which goes out 24 hours before the event.
          properties:
            custom:
              $ref: '#/components/schemas/webinar-email-content'
            default:
              $ref: '#/components/schemas/webinar-email-content'
          required:
            - custom
            - default
          type: object
          x-konfig-properties:
            custom:
              description: >-
                The email custom details for the webinar reminder email, which
                goes out 24 hours before the event.
              nullable: true
            default:
              description: >-
                The email default details for the webinar reminder email, which
                goes out 24 hours before the event.
        email_post_event_thank_you:
          description: >-
            The email customization details for the webinar post-event thank-you
            email.
          properties:
            custom:
              $ref: '#/components/schemas/webinar-email-content'
            default:
              $ref: '#/components/schemas/webinar-email-content'
          required:
            - custom
            - default
          type: object
          x-konfig-properties:
            custom:
              description: >-
                The email custom details for the webinar post-event thank-you
                email.
              nullable: true
            default:
              description: >-
                The email default details for the webinar post-event thank-you
                email.
        email_preferences:
          description: >-
            A list of preferences for the emails to send during the webinar
            event.
          items:
            type: string
          type: array
        email_registration_confirmation:
          description: >-
            The email customization details for the webinar registration
            confirmation email.
          properties:
            custom:
              $ref: '#/components/schemas/webinar-email-content'
            default:
              $ref: '#/components/schemas/webinar-email-content'
          required:
            - custom
            - default
          type: object
          x-konfig-properties:
            custom:
              description: >-
                The email custom details for the webinar registration
                confirmation email.
              nullable: true
            default:
              description: >-
                The email default details for the webinar registration
                confirmation email.
        follow_up_send_on:
          description: The time in ISO 8601 format when the follow-up email was sent.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        follow_up_sender:
          $ref: '#/components/schemas/user'
        from:
          description: The name of the sender for emails that are sent about the webinar.
          example: Vimeo
          type: string
        logo_uri:
          description: >-
            The URI of the logo image to include in emails that are sent about
            the webinar.
          example: /users/1234/team_logos/234
          nullable: true
          type: string
        pictures:
          $ref: '#/components/schemas/picture'
        reply_email:
          description: The sender's reply email address.
          example: test@vimeo.com
          nullable: true
          type: string
        sender_address:
          description: The sender's physical address.
          example: Bangalore, India
          nullable: true
          type: string
        sender_policy_url:
          description: The URL of the sender's privacy policy.
          example: https://vimeo.com/policy
          nullable: true
          type: string
        use_custom_link:
          description: >-
            Whether to include a custom link in emails that are sent about the
            webinar.
          example: true
          type: boolean
        use_reply_email:
          description: >-
            Whether to include a reply link in the footer of emails that are
            sent about the webinar.
          example: false
          type: boolean
        use_sender_address:
          description: >-
            Whether to include the sender's physical address in the footer of
            emails that are sent about the webinar.
          example: false
          type: boolean
        use_sender_policy_url:
          description: >-
            Whether to include the URL of the sender's privacy policy in the
            footer of emails that are sent about the webinar.
          example: false
          type: boolean
      required:
        - accent_color
        - custom_link
        - email_event_reminder_24_hrs
        - email_post_event_thank_you
        - email_preferences
        - email_registration_confirmation
        - follow_up_send_on
        - follow_up_sender
        - from
        - logo_uri
        - pictures
        - reply_email
        - sender_address
        - sender_policy_url
        - use_custom_link
        - use_reply_email
        - use_sender_address
        - use_sender_policy_url
      type: object
      x-konfig-properties:
        follow_up_sender:
          description: The user who manually triggered the follow-up email.
          nullable: true
        pictures:
          description: The logo to include in emails that are sent about the webinar.
          nullable: true
    webinar-event:
      title: Webinar Event
      properties:
        title:
          description: >-
            The title of the event. This field is also optionally used as the
            base title for videos created by streaming to the event.
          example: Live Content
          type: string
        album:
          description: Information about the associated showcase.
          items:
            type: string
          nullable: true
          type: array
        allow_share_link:
          description: >-
            Whether the share link for the videos generated by streaming to the
            event is usable.
          example: true
          type: boolean
        allowed_privacies:
          description: >-
            An array of privacy settings supported for this event and the
            requesting user.
          items:
            type: string
          type: array
        auto_cc_enabled:
          description: Whether the automated closed captions feature is enabled.
          nullable: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          nullable: true
          type: string
        auto_cc_language:
          description: |
            The language of the automated closed captions.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          nullable: true
          type: string
        auto_cc_remaining:
          description: >-
            The amount of time remaining to the user to access the automated
            closed captions feature.
          nullable: true
          type: number
        automatically_title_stream:
          description: >-
            When the value of this field is `true`, the title for the next video
            in the event is generated based on the time of the stream and the
            **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display live chat on the event page on Vimeo.
          example: true
          type: boolean
        completed_on:
          description: The time in ISO 8601 format when the event was completed.
          example: '2021-11-11T11:24:56+00:00'
          type: string
        content_rating:
          description: |
            The event's granular content ratings.

            Option descriptions:
             * `advertisement` - The event contains advertisements.
             * `drugs` - The event contains drug or alcohol use.
             * `language` - The event contains profanity or sexually suggestive content.
             * `nudity` - The event contains nudity.
             * `safe` - The event is safe for all audiences.
             * `unrated` - The event hasn't been rated.
             * `violence` - The event contains violence.
          enum:
            - advertisement
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          items:
            type: string
            example: advertisement
          type: array
        created_time:
          description: The time in ISO 8601 format when the event was created.
          example: '2016-11-03T09:24:56+00:00'
          type: string
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        email_quota:
          description: Information about the event owner's email quota.
          properties:
            capping:
              description: The maximum number of entity emails that the user can send.
              example: 400
              type: number
            total:
              description: The current number of entity emails that the user has sent.
              example: 300
              type: number
          required:
            - capping
            - total
          type: object
        embed:
          description: The event's embed data.
          properties:
            title:
              description: Whether the embedded RLE player should display the video title.
              example: true
              type: boolean
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            autoplay:
              description: Whether the embedded RLE player should autoplay the RLE content.
              example: true
              type: boolean
            available_player_logos:
              description: >-
                The list of user-uploaded logos for configuration of the embed
                player.
              items:
                type: string
              type: array
            byline:
              description: >-
                Whether the embedded RLE player should display the author's
                name.
              example: true
              type: boolean
            chat_embed_source:
              description: The chat's iFrame source URL.
              nullable: true
              type: string
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: >-
                The first player color, which controls the color of the progress
                bar, buttons, and more.
              example: '#0a0808'
              type: string
            colors:
              description: A collection of information about player colors.
              properties:
                color_four:
                  description: >-
                    The fourth player color, which controls the player
                    background color.
                  example: '#aabbcc'
                  type: string
                color_one:
                  description: >-
                    The first player color, which controls the color of the
                    progress bar, buttons, and more.
                  example: '#112233'
                  type: string
                color_three:
                  description: >-
                    The third player color, which controls the color of text and
                    icons.
                  example: '#778899'
                  type: string
                color_two:
                  description: >-
                    The second player color, which controls the player accent
                    color.
                  example: '#445566'
                  type: string
              required:
                - color_four
                - color_one
                - color_three
                - color_two
              type: object
            embed_chat:
              description: The embed code for RLE chat.
              nullable: true
              type: string
            embed_properties:
              description: >-
                The height, width, and source URL properties used to generate
                the fixed HTML embed code.
              nullable: true
              properties:
                height:
                  description: The height used to generate the fixed HTML embed code.
                  type: string
                source_url:
                  description: The source URL used to generate the fixed HTML embed code.
                  type: string
                width:
                  description: The width used to generate the fixed HTML embed code.
                  type: string
              required:
                - height
                - source_url
                - width
              type: object
            event_schedule:
              description: >-
                Whether the embedded RLE player should display the event
                schedule.
              example: true
              type: boolean
            fullscreen_button:
              description: >-
                Whether the embedded RLE player should include the fullscreen
                controls.
              example: true
              type: boolean
            hide_live_label:
              description: Whether the Live label should be visible over the player.
              example: false
              type: boolean
            hide_viewer_count:
              description: Whether the embedded RLE player should hide the viewer counter.
              example: true
              type: boolean
            html:
              description: The fixed HTML code to embed the event's playlist on a website.
              nullable: true
              type: string
            like_button:
              description: >-
                Whether the embedded RLE player should include the `like`
                button.
              example: true
              type: boolean
            logos:
              description: >-
                A collection of information about the logo in the corner of the
                embeddable player.
              properties:
                custom:
                  description: >-
                    A collection of information relating to custom logos in the
                    embeddable player.
                  properties:
                    active:
                      description: >-
                        Whether the custom logo appears in the embeddable
                        player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads upon clicking the custom logo.
                      example: http://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo appears even when the player
                        interface is hidden.
                      example: true
                      type: boolean
                    url:
                      description: The URL source of the custom player logo.
                      example: http://example.com
                      type: string
                    use_link:
                      description: Whether the custom logo should use the URL link.
                      example: true
                      type: boolean
                  required:
                    - active
                    - link
                    - sticky
                    - url
                    - use_link
                  type: object
                vimeo:
                  description: >-
                    Whether the Vimeo logo appears in the embeddable player for
                    the video.
                  example: true
                  type: boolean
              required:
                - custom
                - vimeo
              type: object
            loop:
              description: >-
                Whether the embedded RLE player should loop back to the first
                video once content is exhausted.
              example: true
              type: boolean
            pip:
              description: >-
                Whether picture-in-picture is enabled and the button appears in
                the embeddable player.
              example: true
              type: boolean
            play_button_position:
              description: |
                The position of the player's play button.

                Option descriptions:
                 * `0` - The play button has the default position.
                 * `1` - The play button appears at the bottom of the interface.
                 * `2` - The play button appears in the center of the interface.
              enum:
                - 0
                - 1
                - 2
              type: string
            playbar:
              description: Whether the embedded RLE player should include the playbar.
              example: true
              type: boolean
            playlist:
              description: >-
                Whether the playlist component appears in the embeddable player
                for this RLE.
              example: true
              type: boolean
            portrait:
              description: >-
                Whether the embedded RLE player should display the author's
                portrait.
              example: true
              type: boolean
            responsive_html:
              description: >-
                The responsive HTML code to embed the event's playlist on a
                website.
              nullable: true
              type: string
            schedule:
              description: >-
                Whether the schedule component appears in the embeddable player
                for this RLE.
              example: true
              type: boolean
            show_latest_archived_clip:
              description: >-
                Whether the embedded RLE player should display the latest video
                placeholder.
              example: true
              type: boolean
            show_timezone:
              description: >-
                Whether the embedded RLE player should display the schedule
                timezone.
              example: false
              type: boolean
            use_color:
              description: >-
                Whether the embedded RLE player should use a custom color or the
                default Vimeo blue.
              example: 'true'
              type: string
            volume:
              description: >-
                Whether the embedded RLE player should include the volume
                controls.
              example: true
              type: boolean
          required:
            - airplay
            - autoplay
            - available_player_logos
            - byline
            - chat_embed_source
            - chromecast
            - closed_captions
            - color
            - colors
            - embed_chat
            - embed_properties
            - event_schedule
            - fullscreen_button
            - hide_live_label
            - hide_viewer_count
            - html
            - like_button
            - logos
            - loop
            - pip
            - play_button_position
            - playbar
            - playlist
            - portrait
            - responsive_html
            - schedule
            - show_latest_archived_clip
            - show_timezone
            - title
            - use_color
            - volume
          type: object
        from_showcase:
          description: Whether the event was created from a showcase.
          type: boolean
        from_webinar:
          description: Whether the event was created from a webinar.
          type: boolean
        head_clip:
          description: The first video to be played in the playlist.
          nullable: true
          type: object
        interaction_tools_settings:
          description: The settings for the interaction tools.
          items:
            type: object
            properties:
              is_anonymous_questions_disabled:
                description: >-
                  Whether anonymous questions are disabled for the interaction
                  tools settings.
                type: boolean
              is_qna_moderated:
                description: >-
                  Whether the Q&A is moderated for the interaction tools
                  settings.
                type: boolean
            required:
              - is_anonymous_questions_disabled
              - is_qna_moderated
          nullable: true
          type: array
        latency:
          description: |
            The type of latency.

            Option descriptions:
             * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.
             * `low` - The latency is low, with a delay of 5-7 seconds.
             * `standard` - The latency is standard, with a delay of 15-20 seconds.
          enum:
            - fail-safe
            - low
            - standard
          example: standard
          type: string
        lead_uuid:
          description: The unique ID for the registered viewer.
          type: string
        link:
          description: The URI to access the event on Vimeo.
          example: /events/12345
          type: string
        live_clips:
          description: >-
            A list of videos belonging to the event, including their video IDs
            and dates streamed.
          items:
            type: string
          type: array
        live_destinations:
          description: >-
            _This field is deprecated in favor of the following method:_ [Get
            all the destinations of a one-time live
            event](https://developer.vimeo.com/api/reference/live#get_one_time_event_destinations).
          items:
            type: string
          nullable: true
          type: array
        low_latency:
          description: Whether the low-latency feature is enabled.
          example: false
          type: boolean
        metadata:
          description: Metadata about the event.
          properties:
            connections:
              description: A collection of information that is connected to this resource.
              properties:
                live_video:
                  description: Information about the event's live video, where applicable.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    status:
                      description: |
                        The status of the live video's RTMP link.

                        Option descriptions:
                         * `streaming` - The stream is open and receiving content.
                      enum:
                        - streaming
                      example: streaming
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos/12345
                      type: string
                  required:
                    - options
                    - status
                    - uri
                  type: object
                pictures:
                  description: Information about the event's thumbnails.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/pictures
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                pre_live_video:
                  description: >-
                    Information about the event's pre-live video, where
                    applicable. A pre-live video is either activated or in the
                    process of being activated.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    status:
                      description: |
                        The status of the pre-live video's RTMP link.

                        Option descriptions:
                         * `pending` - Vimeo is working on setting up the connection.
                         * `ready` - Resources have been provisioned for the event.
                         * `streaming` - Live video is currently streaming to the RTMP link.
                         * `unavailable` - The connection is ready, but streaming to the RTMP link has not yet begun.
                      enum:
                        - pending
                        - ready
                        - streaming
                        - unavailable
                      example: pending
                      type: string
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos/12345
                      type: string
                  required:
                    - options
                    - status
                    - uri
                  type: object
                team_member:
                  description: Information about the team member who owns the event.
                  nullable: true
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /users/123456789/team_users/123456
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                videos:
                  description: Information about the videos that belong to the event.
                  properties:
                    options:
                      description: An array of the HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    total:
                      description: The total number of videos on this connection.
                      example: 6
                      type: number
                    uri:
                      description: The API URI that resolves to the connection data.
                      example: /live_events/12345/videos
                      type: string
                  required:
                    - options
                    - total
                    - uri
                  type: object
              required:
                - live_video
                - pictures
                - pre_live_video
                - team_member
                - videos
              type: object
            interactions:
              description: A list of resource URIs related to the event.
              properties:
                activate:
                  description: Information about where and how to activate the event.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                delete:
                  description: Information about where and how to delete an item.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
                edit:
                  description: Information about where and how to edit an item.
                  nullable: true
                  properties:
                    options:
                      description: An array of HTTP methods permitted on this URI.
                      items:
                        type: string
                      type: array
                    uri:
                      description: The API URI that resolves to the connection data.
                      type: string
                  required:
                    - options
                    - uri
                  type: object
              required:
                - activate
                - delete
                - edit
              type: object
          required:
            - connections
            - interactions
          type: object
        next_occurrence_time:
          description: >-
            The date in ISO 8601 format on which the next occurrence of the
            event is expected to be live.
          example: '2018-07-30T14:00:00+00:00'
          nullable: true
          type: string
        parent_folder:
          $ref: '#/components/schemas/project'
        pictures:
          $ref: '#/components/schemas/picture'
        playlist_sort:
          description: >
            The order in which the videos inside the event appear in the
            playlist.


            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the event.
             * `comments` - The videos appear according to their number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order, with the newest first.
             * `oldest` - The videos appear in chronological order, with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        preferred_stream_method:
          description: |
            The preferred streaming method.

            Option descriptions:
             * `browser` - Stream in the browser.
             * `encoder` - Stream by the encoder.
          enum:
            - browser
            - encoder
          example: encoder
          type: string
        rtmp_link:
          description: >-
            The upstream RTMP link. Send your live content to this link to
            create a live video on the event.
          example: rtmp://rtmp.cloud.vimeo.com/live
          nullable: true
          type: string
        rtmp_preview:
          description: Whether to preview the RTMP stream before the event goes live.
          example: true
          type: boolean
        rtmps_link:
          description: >-
            The upstream RTMPS link. Send your live content to this link to
            create a live video on the event.
          example: rtmps://rtmp.cloud.vimeo.com/live
          nullable: true
          type: string
        schedule:
          $ref: '#/components/schemas/live-event-schedule'
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        status:
          description: |
            The status of the event.

            Option descriptions:
             * `ended` - The user ended the event.
             * `started` - The user started the event.
          enum:
            - ended
            - started
          example: started
          nullable: true
          type: string
        stream_description:
          description: The description of the next video streamed to the event.
          example: In this episode, we interview a surprise guest
          nullable: true
          type: string
        stream_key:
          description: The stream key used in conjunction with the RTMP and RTMPS links.
          example: ab9c8def-7a65-4321-b098-c7dd65e43f21
          nullable: true
          type: string
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
        stream_password:
          description: >-
            The password that anyone can use to access the videos generated by
            streaming to the event.
          example: hunter1
          nullable: true
          type: string
        stream_privacy:
          description: >-
            The initial privacy settings of videos generated by streaming to the
            event as well as the embed privacy of the entire collection.
          properties:
            embed:
              description: |
                The event's embed permission setting.

                Option descriptions:
                 * `private` - The event can't be embedded on any domain.
                 * `public` - The event can be embedded on any domain.
                 * `whitelist` - The event can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
            unlisted_hash:
              description: The hash for unlisted events.
              example: 1a2b3c4d5e
              nullable: true
              type: string
            view:
              description: >
                The general privacy setting for generated videos and the embed
                privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The videos don't appear on Vimeo, but they can be embedded elsewhere.
                 * `nobody` - Only the event owner can access the videos. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the videos.
                 * `unlisted` - Only those with the private link can access the videos.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          required:
            - embed
            - unlisted_hash
            - view
          type: object
        stream_title:
          description: >-
            The title of the next video streamed to the event. This field
            applies only when **automatically_title_stream** is `false`.
          example: Special Feature
          type: string
        streamable_clip:
          description: >-
            The event's video. An event always has a video, which is either in a
            pre-live state (ready to be streamed to) or in a live state (which
            is currently being streamed to).
          nullable: true
          type: object
        time_zone:
          description: >-
            The time zone used in resolving the timestamps included in
            auto-generated video titles.
          example: America/New_York
          type: string
        unlimited_auto_cc:
          description: >-
            Whether to ignore the time limit of the automated closed captions
            feature.
          nullable: true
          type: boolean
        unlimited_duration:
          description: Whether 24/7 streaming is enabled for the event.
          example: true
          type: boolean
        uri:
          description: The webinar event's canonical relative URI.
          example: /webinars/events/h17vfa38-b561-4fc0-bgce-eb4d076gb52f
          type: string
        user:
          $ref: '#/components/schemas/user'
        view_link:
          description: >-
            The URI to access the event on Vimeo with or without an unlisted
            hash.
          example: /events/12345
          type: string
        webinar:
          description: Information about the associated webinar.
          items:
            type: string
          nullable: true
          type: array
      required:
        - album
        - allow_share_link
        - allowed_privacies
        - auto_cc_enabled
        - auto_cc_keywords
        - auto_cc_language
        - auto_cc_remaining
        - automatically_title_stream
        - chat_enabled
        - completed_on
        - content_rating
        - created_time
        - dvr
        - email_quota
        - embed
        - from_showcase
        - head_clip
        - interaction_tools_settings
        - latency
        - lead_uuid
        - link
        - live_clips
        - live_destinations
        - low_latency
        - metadata
        - next_occurrence_time
        - parent_folder
        - pictures
        - playlist_sort
        - preferred_stream_method
        - rtmp_link
        - rtmp_preview
        - rtmps_link
        - schedule
        - scheduled_playback
        - status
        - stream_description
        - stream_key
        - stream_mode
        - stream_password
        - stream_privacy
        - stream_title
        - streamable_clip
        - time_zone
        - title
        - unlimited_auto_cc
        - unlimited_duration
        - uri
        - user
        - view_link
        - webinar
      type: object
      x-konfig-properties:
        parent_folder:
          description: Information about the folder that contains the event.
          nullable: true
        pictures:
          description: The active thumbnail image of the event.
        schedule:
          description: >-
            The description of the time or times that the event is expected to
            be live.
        user:
          description: The owner of the event.
    webinar-registrant:
      title: Webinar Registrant
      properties:
        analytics:
          description: The analytics data container for the webinar registrant.
          properties:
            view_percentage:
              description: >-
                The percentage of the total webinar that the webinar registrant
                has attended.
              type: number
          required:
            - view_percentage
          type: object
        created_on:
          description: The date in Unix time when the registrant's account was created.
          example: 1620053300000
          type: number
        data:
          description: >-
            The values of all other fields as submitted on the webinar
            registration form.
          example: '{''Company'':''Vimeo''}'
          nullable: true
          type: object
        email:
          description: >-
            The registrant's email address as submitted on the webinar
            registration form.
          example: jane.doe@vimeo.com
          type: string
        first_name:
          description: >-
            The registrant's first name as submitted on the webinar registration
            form.
          example: Jane
          nullable: true
          type: string
        has_attended:
          description: |
            The registrant's attended status for the webinar.

            Option descriptions:
             * `B` - The registrant has been blocked from attending the webinar.
             * `N` - The registrant has not attended the webinar.
             * `Y` - The registrant has attended the webinar.
          enum:
            - B
            - 'N'
            - 'Y'
          example: B
          type: string
        is_blocked:
          description: Whether the registrant's viewing status for the webinar is blocked.
          example: false
          type: boolean
        last_name:
          description: >-
            The registrant's last name as submitted on the webinar registration
            form.
          example: Doe
          nullable: true
          type: string
        referrer:
          description: The web address where the registration form was submitted.
          example: http://example.com
          nullable: true
          type: string
        source_details:
          description: >-
            Details about the source from which the registrant's account was
            created.
          nullable: true
          type: object
        source_type:
          description: The source from which the registrant's account was created.
          example: CSV
          nullable: true
          type: string
        uri:
          description: The API URL to return the webinar registrant's account.
          example: >-
            /webinars/db1d0719b52f-bfce-4f20-b266-f19bfa08/registrants/f19bfa08-b266-4f20-bfce-db1d0719b52f
          type: string
      required:
        - analytics
        - created_on
        - data
        - email
        - first_name
        - has_attended
        - is_blocked
        - last_name
        - referrer
        - source_details
        - source_type
        - uri
      type: object
    CreateChannelRequest:
      type: object
      properties:
        description:
          description: The description of the channel.
          example: >-
            We really love videos, and these are the videos we really, really
            love.
          type: string
        link:
          description: >-
            The link to access the channel. You can use a custom name in the URL
            in place of a numeric channel ID, as in `/channels/{url_custom}`.
          example: staffpicks
          type: string
        name:
          description: The name of the channel.
          example: Vimeo Staff Picks
          type: string
        privacy:
          description: |
            The privacy level of the channel.

            Option descriptions:
             * `anybody` - Anyone can access the channel.
             * `moderators` - Only moderators can access the channel.
             * `user` - Only moderators and designated users can access the channel.
          enum:
            - anybody
            - moderators
            - user
          type: string
      required:
        - name
        - privacy
    EditChannelRequest:
      type: object
      properties:
        description:
          description: The description of the channel.
          example: >-
            We really love videos, and these are the videos we really, really
            love.
          type: string
        link:
          description: >-
            The link to access the channel. You can use a custom name in the URL
            in place of a numeric channel ID, as in `/channels/{url_custom}`.
            Submitting `""` for this field removes the link alias.
          example: staffpicks
          type: string
        name:
          description: The name of the channel.
          example: Vimeo Staff Picks
          type: string
        privacy:
          description: |
            The privacy level of the channel.

            Option descriptions:
             * `anybody` - Anyone can access the channel.
             * `moderators` - Only moderators can access the channel.
             * `users` - Only moderators and designated users can access the channel.
          enum:
            - anybody
            - moderators
            - users
          type: string
    ChannelsCategoriesAddChannelToMultipleCategoriesRequest:
      type: object
      properties:
        channels:
          description: The array of category URIs to add.
          items:
            type: string
          type: array
      required:
        - channels
    ChannelsModeratorsRemoveMultipleFromChannelRequest:
      type: object
      properties:
        user_uri:
          description: The URI of a user to remove as a moderator.
          example: /users/152184
          type: string
      required:
        - user_uri
    ChannelsModeratorsReplaceModeratorsRequest:
      type: object
      properties:
        user_uri:
          description: The URI of the user to add as a moderator.
          example: /users/152184
          type: string
      required:
        - user_uri
    ChannelsPrivateChannelMembersPermitUserAccessRequest:
      type: object
      properties:
        users:
          description: >-
            The array of either the user URIs or the user IDs to permit to
            access the private channel.
          items:
            type: string
          type: array
      required:
        - users
    ChannelsTagsAddMultipleTagsToChannelRequest:
      type: object
      properties:
        tag:
          description: An array of tags to assign.
          items:
            type: string
          type: array
      required:
        - tag
    ChannelsVideosRemoveMultipleFromChannelRequest:
      type: object
      properties:
        video_uri:
          description: The URI of a video to remove.
          example: /videos/258684937
          type: string
      required:
        - video_uri
    ChannelsVideosAddMultipleToChannelRequest:
      type: object
      properties:
        video_uri:
          description: >-
            A member of an array representing the URIs of the videos to add. For
            each member in the array, use the format `{"video_uri":"x"}` where
            **x** is a video URI. For more information on batch requests like
            this, see [Using Common Formats and
            Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).
          example: /videos/258684937
          type: string
      required:
        - video_uri
    VideosVideoCommentsAddNewCommentRequest:
      type: object
      properties:
        text:
          description: The text of the comment.
          example: I love this!
          type: string
      required:
        - text
    VideosCreditsAddUserCreditInVideoRequest:
      type: object
      properties:
        email:
          description: The email address of the credited person.
          example: user@example.com
          type: string
        name:
          description: The name of the credited person.
          example: Sam Doe
          type: string
        role:
          description: The role of the credited person.
          example: Producer
          type: string
        user_uri:
          description: The Vimeo URI of the credited person.
          example: /users/152184
          type: string
      required:
        - email
        - name
        - role
        - user_uri
    VideosThumbnailsAddThumbnailToVideoRequest:
      type: object
      properties:
        active:
          description: >-
            Whether the image created by the **time** field should be the
            default thumbnail for the video.
          example: true
          type: boolean
        time:
          description: The time offset in seconds from which to create the thumbnail.
          example: 300
          type: number
    VideosTextTracksAddTextTrackToVideoRequest:
      type: object
      properties:
        active:
          description: >-
            Whether the current text track is the *active text track,* or the
            one that appears in the player. Only one text track per language and
            type can be active.
          example: true
          type: boolean
        is_auto_generated:
          description: >-
            Whether the text track was uploaded automatically by the Seshat
            audio annotation management platform.
          type: boolean
        is_edited:
          description: >-
            Whether the text track was uploaded by the Seshat audio annotation
            management platform after the user edited their transcript.
          type: boolean
        language:
          description: >-
            The language of the text track. For a full list of supported
            languages, use the
            [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages)
            endpoint.
          example: en-US
          type: string
        name:
          description: The name of the text track.
          example: Commentary
          type: string
        type:
          description: |
            The type of text track.

            Option descriptions:
             * `captions` - The text track is the captions type.
             * `chapters` - The text track is the chapters type.
             * `descriptions` - The text track is the descriptions type.
             * `metadata` - The text track is the metadata type.
             * `subtitles` - The text track is the subtitles type.
          enum:
            - captions
            - chapters
            - descriptions
            - metadata
            - subtitles
          type: string
      required:
        - language
        - name
        - type
    LiveEventDestinationsUpdateDestinationRequest:
      type: object
      properties:
        display_name:
          description: The title to display for the simulcast.
          example: My channel
          type: string
        is_enabled:
          description: Whether the destination is enabled for simulcasting.
          example: true
          type: boolean
        privacy:
          description: >
            The privacy setting of the destination. Be sure to choose a value
            that corresponds to your service.


            Option descriptions:
             * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.
             * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.
             * `all_friends` - The privacy setting is `all_friends` for Facebook.
             * `everyone` - The privacy setting is `everyone` for Facebook.
             * `private` - The privacy setting is `private` for YouTube.
             * `public` - The privacy setting is `public` for YouTube.
             * `self` - The privacy setting is `self` for Facebook.
             * `unlisted` - The privacy setting is `unlisted` for YouTube.
          enum:
            - CONNECTIONS
            - PUBLIC
            - all_friends
            - everyone
            - private
            - public
            - self
            - unlisted
          example: public
          type: string
        provider_destination_id:
          description: >-
            The ID of the destination on the specified service, such as the
            YouTube channel ID or the Facebook page ID.
          example: bda55c6b3ba4
          type: string
        service_name:
          description: |
            The service to simulcast to.

            Option descriptions:
             * `custom_rtmp` - Simulcast to a custom service.
             * `facebook` - Simulcast to Facebook Live.
             * `linkedin` - Simulcast to LinkedIn Live.
             * `youtube` - Simulcast to YouTube Live.
          enum:
            - custom_rtmp
            - facebook
            - linkedin
            - youtube
          example: youtube
          type: string
        stream_key:
          description: The RTMP stream key.
          example: da056692-ba63-4749-a6eb-a476a22b3acd
          type: string
        stream_url:
          description: The RTMP URL for receiving the video stream.
          example: rtmp://mycooldomain.com/live
          type: string
        type:
          description: |
            The type of the simulcast destination.

            Option descriptions:
             * `channel` - The destination is a YouTube channel.
             * `custom` - The destination is custom.
             * `organization` - The destination is a LinkedIn organization.
             * `page` - The destination is a Facebook page.
             * `profile` - The destination is a Facebook or LinkedIn profile.
          enum:
            - channel
            - custom
            - organization
            - page
            - profile
          example: channel
          type: string
    CreateGroupRequest:
      type: object
      properties:
        description:
          description: The description of the group.
          example: >-
            Want to participate in our weekly challenges? Join the group to
            receive messages and new challenges!
          type: string
        name:
          description: The name of the group.
          example: Vimeo Weekend Challenge
          type: string
      required:
        - name
    LiveEssentialsDeleteMultipleEventsRequest:
      type: object
      properties:
        password:
          description: The user’s password.
          example: hunter1
          type: string
      required:
        - password
    LiveEssentialsCreateEventRequest:
      type: object
      properties:
        title:
          description: >-
            The title of the event. If **automatically_title_stream** is `true`,
            this value is the base title for videos created by streaming to this
            event.
          example: Live Content
          type: string
        allow_share_link:
          description: Whether the share link is usable.
          type: boolean
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords that improve the quality of the
            automated closed captions.
          example: commonly-used words,phrases,technical terms
          type: string
        auto_cc_lang:
          description: |
            The language in which the automated closed captions appear.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
        automatically_title_stream:
          description: >-
            Whether the title for the next video in the event is generated based
            on the time of the stream and the **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display the live chat client on the Vimeo event page.
          example: true
          type: boolean
        content_rating:
          description: >-
            A list of values describing the content in this event. To return the
            list of all possible content rating values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        embed:
          description: >-
            The embed settings of the event and the videos generated by
            streaming to this event.
          properties:
            autoplay:
              description: Whether playback starts automatically on load.
              example: true
              type: boolean
            color:
              description: >-
                The hexadecimal color code for the main color of the embed
                player.
              example: '#00adef'
              type: string
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: Whether to show the custom logo on the embed player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether to show the custom logo persistently (`true`) or
                        hide it with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embed player.
                  example: true
                  type: boolean
              type: object
            loop:
              description: >-
                Whether the playlist should start from the beginning again after
                reaching the end of the last video.
              example: true
              type: boolean
            playlist:
              description: Whether to show the playlist controls on the embed player.
              example: true
              type: boolean
            schedule:
              description: Whether to show the event schedule on the embed player.
              example: true
              type: boolean
            show_latest_archived_clip:
              description: >-
                Whether to show the latest archived video in the embed player
                when off-air.
              example: true
              type: boolean
            use_color:
              description: >-
                Whether the embed player should use (`true`) or ignore (`false`)
                the **embed.color** value.
              example: true
              type: boolean
          type: object
        folder_uri:
          description: The URI of the event's folder.
          example: /users/67890/folder/12345
          type: string
        interaction_tools_settings:
          description: The settings for the interaction tools.
          properties:
            is_anonymous_questions_disabled:
              description: >-
                Whether anonymous questions are disabled for the interaction
                tools settings.
              example: true
              type: boolean
            is_qna_moderated:
              description: Whether the Q&A is moderated for the interaction tools settings.
              example: true
              type: boolean
          type: object
        low_latency:
          description: Whether the event has low-latency streaming enabled.
          type: boolean
        playlist_sort:
          description: >
            The order in which the videos of the event appear within the event's
            playlist.


            Option descriptions:
             * `added_first` - The most recently added videos appear first.
             * `added_last` - The most recently added videos appear last.
             * `alphabetical` - The videos appear in alphabetical order.
             * `arranged` - The videos appear in the order in which the user has arranged them.
             * `comments` - The videos appear in order of number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear in order of number of likes.
             * `newest` - The newest videos appear first.
             * `oldest` - The oldest videos appear first.
             * `plays` - The videos appear in order of number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        rtmp_preview:
          description: Whether the event has RTMP preview enabled.
          type: boolean
        schedule:
          description: >-
            Information about the time or times that the event is expected to be
            live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the event is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            type:
              description: |
                How often the event is expected to be live.

                Option descriptions:
                 * `single` - The event is live one time only.
                 * `weekly` - The event is live on a weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the event is expected to
                be live. Weekdays can range from 1 to 7, where 1 is Monday and 7
                is Sunday. This parameter is required when **schedule.type** is
                `weekly`.
              items:
                type: string
              type: array
          type: object
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        stream_description:
          description: The description of the next video to be streamed to the event.
          example: In this episode, we interview a surprise guest
          type: string
        stream_embed:
          properties:
            embed:
              description: |
                The embed permission level for the event.

                Option descriptions:
                 * `private` - Only the user can embed the event.
                 * `public` - Anyone can embed the event.
                 * `whitelist` - Only those on the whitelist can embed the event.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
          type: object
        stream_password:
          description: >-
            The password when **stream_privacy.view** is `password`. Anyone with
            the password can view the videos generated by streaming to the
            event.
          example: hunter1
          type: string
        stream_privacy:
          description: The privacy settings of the event.
          properties:
            view:
              description: >
                The initial privacy of the videos generated by streaming to the
                event as well as the embed privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.
                 * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `unlisted` - Only those with the private link can access the event.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          type: object
        stream_title:
          description: >-
            The title of the next video to be streamed to the event. This
            parameter is required when **automatically_title_stream** is
            `false`.
          example: Special Feature
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            automatically generated video titles.
          example: America/New_York
          type: string
      required:
        - title
    LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest:
      type: object
      properties:
        title:
          description: >-
            The title of the event. If **automatically_title_stream** is `true`,
            this value is the base title for videos created by streaming to this
            event.
          example: Live Content
          type: string
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: false
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          type: string
        auto_cc_language:
          description: |
            The language of the automated closed captions.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
        automatically_title_stream:
          description: >-
            Whether the title for the next video in the event is generated based
            on the time of the stream and the **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display the live chat client on the Vimeo event page.
          example: true
          type: boolean
        content_rating:
          description: >-
            A list of values describing the content in this event. To return the
            list of all possible content rating values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        embed:
          description: >-
            The embed settings of the event and the videos generated by
            streaming to this event.
          properties:
            autoplay:
              description: Whether playback starts automatically on load.
              example: true
              type: boolean
            color:
              description: >-
                The hexadecimal color code for the main color of the embed
                player.
              example: '#00adef'
              type: string
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: Whether to show the custom logo on the embed player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether to show the custom logo persistently (`true`) or
                        hide it with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embed player.
                  example: true
                  type: boolean
              type: object
            loop:
              description: >-
                Whether the playlist should start from the beginning again after
                reaching the end of the last video.
              example: true
              type: boolean
            playlist:
              description: Whether to show the playlist controls on the embed player.
              example: true
              type: boolean
            schedule:
              description: Whether to show the event schedule on the embed player.
              example: true
              type: boolean
            use_color:
              description: >-
                Whether the embed player should use (`true`) or ignore (`false`)
                the **embed.color** value.
              example: true
              type: boolean
          type: object
        interaction_tools_settings:
          description: The settings for the interaction tools.
          properties:
            is_anonymous_questions_disabled:
              description: >-
                Whether anonymous questions are disabled for the interaction
                tools settings.
              example: true
              type: boolean
            is_qna_moderated:
              description: Whether the Q&A is moderated for the interaction tools settings.
              example: true
              type: boolean
          type: object
        playlist_sort:
          description: >
            The order in which the videos of the event appear within the event's
            playlist.


            Option descriptions:
             * `added_first` - The most recently added videos appear first.
             * `added_last` - The most recently added videos appear last.
             * `alphabetical` - The videos appear in alphabetical order.
             * `arranged` - The videos appear in the order in which the user has arranged them.
             * `comments` - The videos appear in order of number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear in order of number of likes.
             * `newest` - The newest videos appear first.
             * `oldest` - The oldest videos appear first.
             * `plays` - The videos appear in order of number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        schedule:
          description: >-
            Information about the time or times that the event is expected to be
            live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the event is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            type:
              description: |
                How often the event is expected to be live.

                Option descriptions:
                 * `single` - The event is live one time only.
                 * `weekly` - The event is live on a weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the event is expected to
                be live. Weekdays can range from 1 to 7, where 1 is Monday and 7
                is Sunday. This parameter is required when **schedule.type** is
                `weekly`.
              items:
                type: string
              type: array
          type: object
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        stream_description:
          description: The description of the next video to be streamed to the event.
          example: In this episode, we interview a surprise guest
          type: string
        stream_embed:
          properties:
            embed:
              description: |
                The embed permission level for the event.

                Option descriptions:
                 * `private` - Only the user can embed the event.
                 * `public` - Anyone can embed the event.
                 * `whitelist` - Only those on the whitelist can embed the event.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
          type: object
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
        stream_password:
          description: >-
            The password when **stream_privacy.view** is `password`. Anyone with
            the password can view the videos generated by streaming to the
            event.
          example: hunter1
          type: string
        stream_privacy:
          description: The privacy settings of the event.
          properties:
            view:
              description: >
                The initial privacy of the videos generated by streaming to the
                event as well as the embed privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.
                 * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `unlisted` - Only those with the private link can access the event.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          type: object
        stream_title:
          description: >-
            The title of the next video to be streamed to the event. This
            parameter is required when **automatically_title_stream** is
            `false`.
          example: Special Feature
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            automatically generated video titles.
          example: America/New_York
          type: string
    LiveEventActivationCreateRtmpLinksRequest:
      type: object
      properties:
        cloud_composing_streaming:
          description: >-
            Whether the stream activates from the cloud composer. _This field is
            deprecated._
          example: true
          type: boolean
        streaming_start_requested:
          description: Whether the stream activates from the cloud composer.
          example: true
          type: boolean
    LiveEventAutomatedClosedCaptionsEditPreferenceRequest:
      type: object
      properties:
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords that improve the quality of the
            automated closed captions.
          example: commonly-used words,phrases,technical terms
          type: string
        auto_cc_lang:
          description: |
            The language in which the automated closed captions appear.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
      required:
        - auto_cc_enabled
    LiveEventLowLatencyToggleOptionRequest:
      type: object
      properties:
        low_latency:
          description: Whether the event is low latency.
          type: boolean
    LiveEventThumbnailsCreateThumbnailForEventRequest:
      type: object
      properties:
        active:
          description: Whether the thumbnail is the event's active thumbnail.
          example: true
          type: boolean
    LiveEventThumbnailsEditLiveEventThumbnailRequest:
      type: object
      properties:
        active:
          description: Whether the thumbnail is the event's active thumbnail.
          example: true
          type: boolean
    LiveEmbedPrivacyEmbedEventOnDomainsRequest:
      type: object
      properties:
        allowed_domains:
          description: An array of the domains on which the embedded event can appear.
          items:
            type: string
          type: array
    LiveEventVideosRemoveMultipleVideosRequest:
      type: object
      properties:
        videos:
          description: An array of video objects.
          items:
            type: object
            properties:
              video:
                properties:
                  uri:
                    description: The URI of a video to remove.
                    example: /videos/258684937
                    type: string
                type: object
          type: array
    LiveEventVideosAddMultipleRequest:
      type: object
      properties:
        videos:
          description: An array of video objects.
          items:
            type: object
            properties:
              video:
                properties:
                  uri:
                    description: The URI of a video to add.
                    example: /videos/258684937
                    type: string
                type: object
          type: array
    UsersEssentialsEditVimeoAccountRequest:
      type: object
      properties:
        bio:
          description: The user's bio.
          example: This is where you will find videos and news updates from the staff
          type: string
        content_filter:
          description: >-
            A list of values describing the content in the user's videos. Find
            the full list in the
            [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint. You must provide a comma-separated list if you're using a
            query string or an array if you're using JSON.
          items:
            type: string
          type: array
        gender:
          description: |
            The authenticated user's gender.

            Option descriptions:
             * `f` - The user's preferred pronouns are she and her.
             * `m` - The user's preferred pronouns are he and him.
             * `n` - The user would rather not give preferred pronouns.
             * `o` - The user's preferred pronouns are they and them.
          enum:
            - f
            - m
            - 'n'
            - o
          type: string
        link:
          description: The user's custom Vimeo URL.
          example: staff
          type: string
        location:
          description: The user's location.
          example: New York City
          type: string
        name:
          description: The user's display name.
          example: Vimeo Staff
          type: string
        password:
          description: >-
            The default password for all future videos that this user uploads.
            To use this field, the **videos.privacy.view** field must be
            `password`.
          example: hunter1
          type: string
        videos:
          properties:
            privacy:
              properties:
                add:
                  description: >-
                    Whether the user can add videos to showcases, channels, or
                    groups by default.
                  example: true
                  type: boolean
                comments:
                  description: |
                    Who can comment on the user's video uploads by default.

                    Option descriptions:
                     * `anybody` - Anyone can comment.
                     * `contacts` - Only the user's contacts can comment.
                     * `nobody` - No one can comment.
                  enum:
                    - anybody
                    - contacts
                    - nobody
                  type: string
                download:
                  description: >-
                    Whether the user can download videos. This value becomes the
                    default download setting for all future videos that the user
                    uploads.
                  example: true
                  type: boolean
                embed:
                  description: >
                    The privacy for the user's embedded videos. The whitelist
                    value enables you to define all valid embeddable domains.
                    See our [Interacting with
                    Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy)
                    guide for details on adding and removing domains.


                    Option descriptions:
                     * `private` - The videos can't be embedded on any domain.
                     * `public` - The videos can be embedded on any domain.
                     * `whitelist` - The videos can be embedded on the specified domains only.
                  enum:
                    - private
                    - public
                    - whitelist
                  type: string
                view:
                  description: |
                    Who can access the user's videos by default.

                    Option descriptions:
                     * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.
                     * `contacts` - Only the user's contacts can access the videos. _This field is deprecated._
                     * `disable` - The videos are disabled. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.
                     * `nobody` - No one can access the videos. This privacy setting appears as `Private` on the Vimeo front end.
                     * `password` - Only those with the password can access the videos.
                     * `unlisted` - The videos are unlisted.
                     * `users` - Only other Vimeo members can access the videos. _This field is deprecated._
                  enum:
                    - anybody
                    - contacts
                    - disable
                    - nobody
                    - password
                    - unlisted
                    - users
                  type: string
              type: object
          type: object
    ShowcasesEssentialsCreateUserShowcaseRequest:
      type: object
      properties:
        description:
          description: The description of the showcase.
          example: Vimeo holiday videos!
          type: string
        brand_color:
          description: >-
            The hexadecimal code for the color of the player buttons and
            showcase controls.
          example: ff66ee
          type: string
        hide_from_vimeo:
          description: Whether the showcase should be hidden from Vimeo when unlisted.
          example: false
          type: boolean
        hide_nav:
          description: Whether to hide Vimeo navigation when displaying the showcase.
          example: true
          type: boolean
        hide_upcoming:
          description: Whether to include the upcoming event in the showcase.
          example: false
          type: boolean
        layout:
          description: |
            The type of layout for presenting the showcase.

            Option descriptions:
             * `grid` - The videos appear in a grid.
             * `player` - The videos appear in the player.
          enum:
            - grid
            - player
          type: string
        name:
          description: The name of the showcase.
          example: Vimeo Holiday Videos!
          type: string
        password:
          description: >-
            The showcase's password. This field is required only when
            **privacy** is `password`.
          example: hunter1
          type: string
        privacy:
          description: |
            The privacy level of the showcase.

            Option descriptions:
             * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.
             * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.
             * `nobody` - No one can access the showcase, including the authenticated user.
             * `password` - Only those with the password can access the showcase.
             * `team` - Only members of the authenticated user's team can access the showcase.
             * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.
          enum:
            - anybody
            - embed_only
            - nobody
            - password
            - team
            - unlisted
          type: string
        review_mode:
          description: Whether showcase videos use the review mode URL.
          example: true
          type: boolean
        sort:
          description: |
            The default sort order of the videos as they appear in the showcase.

            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the showcase.
             * `comments` - The videos appear according to their number of comments.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order with the newest first.
             * `oldest` - The videos appear in chronological order with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - likes
            - newest
            - oldest
            - plays
          type: string
        theme:
          description: |
            The color theme of the showcase.

            Option descriptions:
             * `dark` - The showcase uses the dark theme.
             * `standard` - The showcase uses the standard theme.
          enum:
            - dark
            - standard
          type: string
      required:
        - name
    ShowcasesEssentialsEditShowcaseRequest:
      type: object
      properties:
        description:
          description: The description of the showcase.
          example: Vimeo holiday videos!
          type: string
        brand_color:
          description: >-
            The hexadecimal code for the color of the player buttons and
            showcase controls.
          example: ff66ee
          type: string
        domain:
          description: The custom domain of the showcase.
          example: mycustomdomain.com
          nullable: true
          type: string
        hide_nav:
          description: Whether to hide Vimeo navigation when displaying the showcase.
          example: true
          type: boolean
        hide_upcoming:
          description: Whether to include the upcoming event in the showcase.
          example: false
          type: boolean
        layout:
          description: |
            The type of layout for presenting the showcase.

            Option descriptions:
             * `grid` - The videos appear in a grid.
             * `player` - The videos appear in the player.
          enum:
            - grid
            - player
          type: string
        name:
          description: The name of the showcase.
          example: Vimeo Holiday Videos!
          type: string
        password:
          description: >-
            The showcase's password. This field is required only when
            **privacy** is `password`.
          example: hunter1
          type: string
        privacy:
          description: |
            The privacy level of the showcase.

            Option descriptions:
             * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.
             * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.
             * `nobody` - No one can access the showcase, including the authenticated user.
             * `password` - Only people with the password can access the showcase.
             * `team` - Only members of the authenticated user's team can access the showcase.
             * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.
          enum:
            - anybody
            - embed_only
            - nobody
            - password
            - team
            - unlisted
          type: string
        review_mode:
          description: Whether showcase videos use the review mode URL.
          example: true
          type: boolean
        sort:
          description: |
            The default sort order of the videos as they appear in the showcase.

            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the showcase.
             * `comments` - The videos appear according to their number of comments.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order with the newest first.
             * `oldest` - The videos appear in chronological order with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - likes
            - newest
            - oldest
            - plays
          type: string
        theme:
          description: |
            The color theme of the showcase.

            Option descriptions:
             * `dark` - The showcase uses the dark theme.
             * `standard` - The showcase uses the standard theme.
          enum:
            - dark
            - standard
          type: string
        url:
          description: The custom Vimeo URL of the showcase.
          example: my-custom-url
          nullable: true
          type: string
        use_custom_domain:
          description: Whether the user has opted for a custom domain for their showcase.
          example: true
          type: boolean
    ShowcasesShowcaseVideosReplaceVideosRequest:
      type: object
      properties:
        videos:
          description: >-
            A comma-separated list of video URIs corresponding to the videos to
            add.
          example: /videos/258684937,/videos/273576296
          type: string
      required:
        - videos
    ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest:
      type: object
      properties:
        time_code:
          description: >-
            The time in seconds of the video frame to use as the thumbnail
            image.
          example: 300
          type: number
    UsersFollowersFollowMultipleUsersRequest:
      type: object
      properties:
        users:
          description: An array of user IDs for the authenticated user to follow.
          items:
            type: string
          type: array
      required:
        - users
    LiveEssentialsDeleteMultipleEventsRequest1:
      type: object
      properties:
        password:
          description: The user’s password.
          example: hunter1
          type: string
      required:
        - password
    LiveEssentialsCreateLiveEventRequest:
      type: object
      properties:
        title:
          description: >-
            The title of the event. If **automatically_title_stream** is `true`,
            this value is the base title for videos created by streaming to this
            event.
          example: Live Content
          type: string
        allow_share_link:
          description: Whether the share link is usable.
          type: boolean
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords that improve the quality of the
            automated closed captions.
          example: commonly-used words,phrases,technical terms
          type: string
        auto_cc_lang:
          description: |
            The language in which the automated closed captions appear.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
        automatically_title_stream:
          description: >-
            Whether the title for the next video in the event is generated based
            on the time of the stream and the **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display the live chat client on the Vimeo event page.
          example: true
          type: boolean
        content_rating:
          description: >-
            A list of values describing the content in this event. To return the
            list of all possible content rating values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        embed:
          description: >-
            The embed settings of the event and the videos generated by
            streaming to this event.
          properties:
            autoplay:
              description: Whether playback starts automatically on load.
              example: true
              type: boolean
            color:
              description: >-
                The hexadecimal color code for the main color of the embed
                player.
              example: '#00adef'
              type: string
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: Whether to show the custom logo on the embed player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether to show the custom logo persistently (`true`) or
                        hide it with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embed player.
                  example: true
                  type: boolean
              type: object
            loop:
              description: >-
                Whether the playlist should start from the beginning again after
                reaching the end of the last video.
              example: true
              type: boolean
            playlist:
              description: Whether to show the playlist controls on the embed player.
              example: true
              type: boolean
            schedule:
              description: Whether to show the event schedule on the embed player.
              example: true
              type: boolean
            show_latest_archived_clip:
              description: >-
                Whether to show the latest archived video in the embed player
                when off-air.
              example: true
              type: boolean
            use_color:
              description: >-
                Whether the embed player should use (`true`) or ignore (`false`)
                the **embed.color** value.
              example: true
              type: boolean
          type: object
        folder_uri:
          description: The URI of the event's folder.
          example: /users/67890/folder/12345
          type: string
        interaction_tools_settings:
          description: The settings for the interaction tools.
          properties:
            is_anonymous_questions_disabled:
              description: >-
                Whether anonymous questions are disabled for the interaction
                tools settings.
              example: true
              type: boolean
            is_qna_moderated:
              description: Whether the Q&A is moderated for the interaction tools settings.
              example: true
              type: boolean
          type: object
        low_latency:
          description: Whether the event has low-latency streaming enabled.
          type: boolean
        playlist_sort:
          description: >
            The order in which the videos of the event appear within the event's
            playlist.


            Option descriptions:
             * `added_first` - The most recently added videos appear first.
             * `added_last` - The most recently added videos appear last.
             * `alphabetical` - The videos appear in alphabetical order.
             * `arranged` - The videos appear in the order in which the user has arranged them.
             * `comments` - The videos appear in order of number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear in order of number of likes.
             * `newest` - The newest videos appear first.
             * `oldest` - The oldest videos appear first.
             * `plays` - The videos appear in order of number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        rtmp_preview:
          description: Whether the event has RTMP preview enabled.
          type: boolean
        schedule:
          description: >-
            Information about the time or times that the event is expected to be
            live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the event is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            type:
              description: |
                How often the event is expected to be live.

                Option descriptions:
                 * `single` - The event is live one time only.
                 * `weekly` - The event is live on a weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the event is expected to
                be live. Weekdays can range from 1 to 7, where 1 is Monday and 7
                is Sunday. This parameter is required when **schedule.type** is
                `weekly`.
              items:
                type: string
              type: array
          type: object
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        stream_description:
          description: The description of the next video to be streamed to the event.
          example: In this episode, we interview a surprise guest
          type: string
        stream_embed:
          properties:
            embed:
              description: |
                The embed permission level for the event.

                Option descriptions:
                 * `private` - Only the user can embed the event.
                 * `public` - Anyone can embed the event.
                 * `whitelist` - Only those on the whitelist can embed the event.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
          type: object
        stream_password:
          description: >-
            The password when **stream_privacy.view** is `password`. Anyone with
            the password can view the videos generated by streaming to the
            event.
          example: hunter1
          type: string
        stream_privacy:
          description: The privacy settings of the event.
          properties:
            view:
              description: >
                The initial privacy of the videos generated by streaming to the
                event as well as the embed privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.
                 * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `unlisted` - Only those with the private link can access the event.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          type: object
        stream_title:
          description: >-
            The title of the next video to be streamed to the event. This
            parameter is required when **automatically_title_stream** is
            `false`.
          example: Special Feature
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            automatically generated video titles.
          example: America/New_York
          type: string
      required:
        - title
    LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest1:
      type: object
      properties:
        title:
          description: >-
            The title of the event. If **automatically_title_stream** is `true`,
            this value is the base title for videos created by streaming to this
            event.
          example: Live Content
          type: string
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: false
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          type: string
        auto_cc_language:
          description: |
            The language of the automated closed captions.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
        automatically_title_stream:
          description: >-
            Whether the title for the next video in the event is generated based
            on the time of the stream and the **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display the live chat client on the Vimeo event page.
          example: true
          type: boolean
        content_rating:
          description: >-
            A list of values describing the content in this event. To return the
            list of all possible content rating values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        embed:
          description: >-
            The embed settings of the event and the videos generated by
            streaming to this event.
          properties:
            autoplay:
              description: Whether playback starts automatically on load.
              example: true
              type: boolean
            color:
              description: >-
                The hexadecimal color code for the main color of the embed
                player.
              example: '#00adef'
              type: string
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: Whether to show the custom logo on the embed player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether to show the custom logo persistently (`true`) or
                        hide it with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embed player.
                  example: true
                  type: boolean
              type: object
            loop:
              description: >-
                Whether the playlist should start from the beginning again after
                reaching the end of the last video.
              example: true
              type: boolean
            playlist:
              description: Whether to show the playlist controls on the embed player.
              example: true
              type: boolean
            schedule:
              description: Whether to show the event schedule on the embed player.
              example: true
              type: boolean
            use_color:
              description: >-
                Whether the embed player should use (`true`) or ignore (`false`)
                the **embed.color** value.
              example: true
              type: boolean
          type: object
        interaction_tools_settings:
          description: The settings for the interaction tools.
          properties:
            is_anonymous_questions_disabled:
              description: >-
                Whether anonymous questions are disabled for the interaction
                tools settings.
              example: true
              type: boolean
            is_qna_moderated:
              description: Whether the Q&A is moderated for the interaction tools settings.
              example: true
              type: boolean
          type: object
        playlist_sort:
          description: >
            The order in which the videos of the event appear within the event's
            playlist.


            Option descriptions:
             * `added_first` - The most recently added videos appear first.
             * `added_last` - The most recently added videos appear last.
             * `alphabetical` - The videos appear in alphabetical order.
             * `arranged` - The videos appear in the order in which the user has arranged them.
             * `comments` - The videos appear in order of number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear in order of number of likes.
             * `newest` - The newest videos appear first.
             * `oldest` - The oldest videos appear first.
             * `plays` - The videos appear in order of number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        schedule:
          description: >-
            Information about the time or times that the event is expected to be
            live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the event is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            type:
              description: |
                How often the event is expected to be live.

                Option descriptions:
                 * `single` - The event is live one time only.
                 * `weekly` - The event is live on a weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the event is expected to
                be live. Weekdays can range from 1 to 7, where 1 is Monday and 7
                is Sunday. This parameter is required when **schedule.type** is
                `weekly`.
              items:
                type: string
              type: array
          type: object
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        stream_description:
          description: The description of the next video to be streamed to the event.
          example: In this episode, we interview a surprise guest
          type: string
        stream_embed:
          properties:
            embed:
              description: |
                The embed permission level for the event.

                Option descriptions:
                 * `private` - Only the user can embed the event.
                 * `public` - Anyone can embed the event.
                 * `whitelist` - Only those on the whitelist can embed the event.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
          type: object
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
        stream_password:
          description: >-
            The password when **stream_privacy.view** is `password`. Anyone with
            the password can view the videos generated by streaming to the
            event.
          example: hunter1
          type: string
        stream_privacy:
          description: The privacy settings of the event.
          properties:
            view:
              description: >
                The initial privacy of the videos generated by streaming to the
                event as well as the embed privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.
                 * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `unlisted` - Only those with the private link can access the event.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          type: object
        stream_title:
          description: >-
            The title of the next video to be streamed to the event. This
            parameter is required when **automatically_title_stream** is
            `false`.
          example: Special Feature
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            automatically generated video titles.
          example: America/New_York
          type: string
    LiveEventActivationCreateRtmpLinksRequest1:
      type: object
      properties:
        cloud_composing_streaming:
          description: >-
            Whether the stream activates from the cloud composer. _This field is
            deprecated._
          example: true
          type: boolean
        streaming_start_requested:
          description: Whether the stream activates from the cloud composer.
          example: true
          type: boolean
    LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest:
      type: object
      properties:
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords that improve the quality of the
            automated closed captions.
          example: commonly-used words,phrases,technical terms
          type: string
        auto_cc_lang:
          description: |
            The language in which the automated closed captions appear.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
      required:
        - auto_cc_enabled
    LiveEventDestinationsCreateDestinationRequest:
      type: object
      properties:
        display_name:
          description: The title to display for the simulcast.
          example: My channel
          type: string
        is_enabled:
          description: Whether the destination is enabled for simulcasting.
          example: true
          type: boolean
        privacy:
          description: >
            The privacy setting of the destination. Be sure to choose a value
            that corresponds to your service.


            Option descriptions:
             * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.
             * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.
             * `all_friends` - The privacy setting is `all_friends` for Facebook.
             * `everyone` - The privacy setting is `everyone` for Facebook.
             * `private` - The privacy setting is `private` for YouTube.
             * `public` - The privacy setting is `public` for YouTube.
             * `self` - The privacy setting is `self` for Facebook.
             * `unlisted` - The privacy setting is `unlisted` for YouTube.
          enum:
            - CONNECTIONS
            - PUBLIC
            - all_friends
            - everyone
            - private
            - public
            - self
            - unlisted
          example: public
          type: string
        provider_destination_id:
          description: >-
            The ID of the destination on the specified service, such as the
            YouTube channel ID or the Facebook page ID.
          example: bda55c6b3ba4
          type: string
        provider_video_id:
          description: The ID of the scheduled video.
          example: '6817807391346708000'
          nullable: true
          type: string
        scheduled_at:
          description: >-
            The time in Unix timestamp format when live streaming is scheduled
            to start.
          example: 1625754461
          type: number
        service_name:
          description: |
            The service to simulcast to.

            Option descriptions:
             * `custom_rtmp` - Simulcast to a custom service.
             * `facebook` - Simulcast to Facebook Live.
             * `linkedin` - Simulcast to LinkedIn Live.
             * `youtube` - Simulcast to YouTube Live.
          enum:
            - custom_rtmp
            - facebook
            - linkedin
            - youtube
          example: youtube
          type: string
        stream_key:
          description: The RTMP stream key.
          example: da056692-ba63-4749-a6eb-a476a22b3acd
          type: string
        stream_url:
          description: The RTMP URL for receiving the video stream.
          example: rtmp://mycooldomain.com/live
          type: string
        type:
          description: |
            The type of the simulcast destination.

            Option descriptions:
             * `channel` - The destination is a YouTube channel.
             * `custom` - The destination is custom.
             * `organization` - The destination is a LinkedIn organization.
             * `page` - The destination is a Facebook page.
             * `profile` - The destination is a Facebook or LinkedIn profile.
          enum:
            - channel
            - custom
            - organization
            - page
            - profile
          example: channel
          type: string
      required:
        - display_name
        - service_name
        - type
    LiveEventLowLatencyToggleOptionRequest1:
      type: object
      properties:
        low_latency:
          description: Whether the event is low latency.
          type: boolean
    LiveEventThumbnailsAddThumbnailRequest:
      type: object
      properties:
        active:
          description: Whether the thumbnail is the event's active thumbnail.
          example: true
          type: boolean
    LiveEventThumbnailsUpdateEventThumbnailRequest:
      type: object
      properties:
        active:
          description: Whether the thumbnail is the event's active thumbnail.
          example: true
          type: boolean
    LiveEmbedPrivacyEmbedEventOnDomainsRequest1:
      type: object
      properties:
        allowed_domains:
          description: An array of the domains on which the embedded event can appear.
          items:
            type: string
          type: array
    LiveEventVideosRemoveMultipleRequest:
      type: object
      properties:
        videos:
          description: An array of video objects.
          items:
            type: object
            properties:
              video:
                properties:
                  uri:
                    description: The URI of a video to remove.
                    example: /videos/258684937
                    type: string
                type: object
          type: array
    LiveEventVideosUploadMultipleRequest:
      type: object
      properties:
        videos:
          description: An array of video objects.
          items:
            type: object
            properties:
              video:
                properties:
                  uri:
                    description: The URI of a video to add.
                    example: /videos/258684937
                    type: string
                type: object
          type: array
    OnDemandEssentialsCreatePageRequest:
      type: object
      properties:
        description:
          description: The description of the On Demand page.
          example: >-
            DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins
            & Notions".
          type: string
        accepted_currencies:
          description: |
            An array of accepted currencies.

            Option descriptions:
             * `AUD` - The currency is in Australian dollars.
             * `CAD` - The currency is in Canadian dollars.
             * `CHF` - The currency is in Swiss francs.
             * `DKK` - The currency is in Danish krone.
             * `EUR` - The currency is in euros.
             * `GBP` - The currency is in British pounds.
             * `JPY` - The currency is in Japanese yen.
             * `KRW` - The currency is in South Korean won.
             * `NOK` - The currency is in Norwegian krone.
             * `PLN` - The currency is in Polish zloty.
             * `SEK` - The currency is in Swedish krona.
             * `USD` - The currency is in United States dollars.
          enum:
            - AUD
            - CAD
            - CHF
            - DKK
            - EUR
            - GBP
            - JPY
            - KRW
            - NOK
            - PLN
            - SEK
            - USD
          type: string
        buy:
          properties:
            active:
              description: >-
                Whether the video can be purchased. This parameter is required
                when **rent.active** is `false`.
              example: true
              type: boolean
            download:
              description: >-
                Whether people who buy the video can download it. To use this
                parameter, **type** must be `film`.
              example: true
              type: boolean
            price:
              properties:
                AUD:
                  description: The purchase price of the video in Australian dollars.
                  example: 2.99
                  type: number
                CAD:
                  description: The purchase price of the video in Canadian dollars.
                  example: 2.99
                  type: number
                CHF:
                  description: The purchase price of the video in Swiss francs.
                  example: 2.99
                  type: number
                DKK:
                  description: The purchase price of the video in Danish krone.
                  example: 2.99
                  type: number
                EUR:
                  description: The purchase price of the video in euros.
                  example: 2.99
                  type: number
                GBP:
                  description: The purchase price of the video in British pounds.
                  example: 2.99
                  type: number
                JPY:
                  description: The purchase price of the video in Japanese yen.
                  example: 2.99
                  type: number
                KRW:
                  description: The purchase price of the video in South Korean won.
                  example: 2.99
                  type: number
                NOK:
                  description: The purchase price of the video in Norwegian krone.
                  example: 2.99
                  type: number
                PLN:
                  description: The purchase price of the video in Polish zloty.
                  example: 2.99
                  type: number
                SEK:
                  description: The purchase price of the video in Swedish krona.
                  example: 2.99
                  type: number
                USD:
                  description: >-
                    When **type** is `film`, the purchase price of the video in
                    United States dollars. When **type** is `series`, the
                    purchase price of the entire collection in United States
                    dollars.
                  example: 2.99
                  type: number
              type: object
          type: object
        content_rating:
          description: >
            The content rating of the video, given either as a comma-separated
            list or as a JSON array, depending on the request format.


            Option descriptions:
             * `drugs` - The video contains drug or alcohol use.
             * `language` - The video contains profanity or sexually suggestive content.
             * `nudity` - The video contains nudity.
             * `safe` - The video is suitable for all audiences.
             * `unrated` - The video hasn't been rated.
             * `violence` - The video contains violent or graphic content.
          enum:
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          type: string
        domain_link:
          description: The custom domain of the On Demand page.
          example: https://example.com
          type: string
        episodes:
          properties:
            buy:
              properties:
                active:
                  description: Whether episodes can be purchased.
                  example: true
                  type: boolean
                download:
                  description: >-
                    Whether people who buy episodes can download them. To use
                    this parameter, **type** must be `series`.
                  example: true
                  type: boolean
                price:
                  properties:
                    USD:
                      description: >-
                        The purchase price per episode in United States dollars.
                        This parameter is required when **episodes.buy.active**
                        is `true`.
                      example: 1.99
                      type: number
                  type: object
              type: object
            rent:
              properties:
                active:
                  description: Whether episodes can be rented.
                  example: true
                  type: boolean
                period:
                  description: |
                    The rental period of the episode.

                    Option descriptions:
                     * `1 week` - The episode can be rented for a maximum of 1 week.
                     * `1 year` - The episode can be rented for a maximum of 1 year.
                     * `24 hour` - The episode can be rented for a maximum of 24 hours.
                     * `3 month` - The episode can be rented for a maximum of 3 months.
                     * `30 day` - The episode can be rented for a maximum of 30 days.
                     * `48 hour` - The episode can be rented for a maximum of 48 hours.
                     * `6 month` - The episode can be rented for a maximum of 6 months.
                     * `72 hour` - The episode can be rented for a maximum of 72 hours.
                  enum:
                    - 1 week
                    - 1 year
                    - 24 hour
                    - 3 month
                    - 30 day
                    - 48 hour
                    - 6 month
                    - 72 hour
                  type: string
                price:
                  properties:
                    USD:
                      description: >-
                        The rental price per episode in United States dollars.
                        This parameter is applicable only when **type** is
                        `series`, and it's required when **episode.rent.active**
                        is `true`.
                      example: 0.99
                      type: number
                  type: object
              type: object
          type: object
        link:
          description: The custom string to use in the Vimeo URL of the On Demand page.
          example: darbyforever
          type: string
        name:
          description: The name of the On Demand page.
          example: Darby Forever
          type: string
        rent:
          properties:
            active:
              description: >-
                Whether the video can be rented. This parameter is required when
                **episodes.rent.active** is `true`.
              example: true
              type: boolean
            period:
              description: |
                The rental period of the video.

                Option descriptions:
                 * `1 week` - The video can be rented for a maximum of 1 week.
                 * `1 year` - The video can be rented for a maximum of 1 year.
                 * `24 hour` - The video can be rented for a maximum of 24 hours.
                 * `3 month` - The video can be rented for a maximum of 3 months.
                 * `30 day` - The video can be rented for a maximum of 30 days.
                 * `48 hour` - The video can be rented for a maximum of 48 hours.
                 * `6 month` - The video can be rented for a maximum of 6 months.
                 * `72 hour` - The video can be rented for a maximum of 72 hours.
              enum:
                - 1 week
                - 1 year
                - 24 hour
                - 3 month
                - 30 day
                - 48 hour
                - 6 month
                - 72 hour
              type: string
            price:
              properties:
                AUD:
                  description: The rental price of the video in Australian dollars.
                  example: 0.99
                  type: number
                CAD:
                  description: The rental price of the video in Canadian dollars.
                  example: 0.99
                  type: number
                CHF:
                  description: The rental price of the video in Swiss francs.
                  example: 0.99
                  type: number
                DKK:
                  description: The rental price of the video in Danish krone.
                  example: 0.99
                  type: number
                EUR:
                  description: The rental price of the video in euros.
                  example: 0.99
                  type: number
                GBP:
                  description: The rental price of the video in British pounds.
                  example: 0.99
                  type: number
                JPY:
                  description: The rental price of the video in Japanese yen.
                  example: 0.99
                  type: number
                KRW:
                  description: The rental price of the video in South Korean won.
                  example: 0.99
                  type: number
                NOK:
                  description: The rental price of the video in Norwegian krone.
                  example: 0.99
                  type: number
                PLN:
                  description: The rental price of the video in Polish zloty.
                  example: 0.99
                  type: number
                SEK:
                  description: The rental price of the video in Swedish krona.
                  example: 0.99
                  type: number
                USD:
                  description: >-
                    When **type** is `film`, the rental price of the video in
                    United States dollars. When **type** is `series`, the rental
                    price of the entire collection in United States dollars.
                  example: 0.99
                  type: number
              type: object
          type: object
        subscription:
          properties:
            monthly:
              properties:
                active:
                  description: >-
                    Whether a monthly subscription is active. This parameter is
                    required when **rent.active** and **buy.active** are
                    `false`.
                  example: true
                  type: boolean
                price:
                  properties:
                    USD:
                      description: >-
                        The monthly subscription price in United States dollars.
                        This parameter is required when **rent.active** and
                        **buy.active** are `false`.
                      example: 9.99
                      type: number
                  type: object
              type: object
          type: object
        type:
          description: |
            The type of the On Demand page.

            Option descriptions:
             * `film` - The On Demand page is a film.
             * `series` - The On Demand page is a series.
          enum:
            - film
            - series
          type: string
      required:
        - content_rating
        - description
        - name
        - type
    PaymentsEssentialsListPaymentMethodsRequest:
      type: object
      properties:
        type:
          description: |
            The type of payment method.

            Option descriptions:
             * `applepay` - The payment method is Apple Pay.
             * `bank_account` - The payment method is a bank account.
             * `card` - The payment method is a credit or debit card.
             * `googlepay` - The payment method is Google Pay.
             * `paypal` - The payment method is a PayPal account.
          enum:
            - applepay
            - bank_account
            - card
            - googlepay
            - paypal
          type: string
    UsersPicturesEditPortraitImageRequest:
      type: object
      properties:
        active:
          description: Whether the picture is the authenticated user's active portrait.
          example: true
          type: boolean
    EmbedPresetsEssentialsCreatePresetRequest:
      type: object
      properties:
        embed:
          properties:
            title:
              properties:
                name:
                  description: >
                    How to handle the video title in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the video title.
                     * `show` - Show the video title.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                owner:
                  description: >
                    How to handle the owner information in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the owner info.
                     * `show` - Show the owner info.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                portrait:
                  description: >
                    How to handle the owner portrait in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the portrait.
                     * `show` - Show the portrait.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
              type: object
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            audio_tracks:
              description: >-
                Whether multiple audio tracks can appear in the embeddable
                player.
              example: true
              type: boolean
            buttons:
              properties:
                embed:
                  description: Whether to show the `embed` button on the embeddable player.
                  example: true
                  type: boolean
                fullscreen:
                  description: >-
                    Whether to show the `fullscreen` button on the embeddable
                    player.
                  example: true
                  type: boolean
                hd:
                  description: Whether to show the `HD` button on the embeddable player.
                  example: true
                  type: boolean
                like:
                  description: Whether to show the `like` button on the embeddable player.
                  example: true
                  type: boolean
                scaling:
                  description: >-
                    Whether to show the `scaling` button on the embeddable
                    player in fullscreen mode.
                  example: true
                  type: boolean
                share:
                  description: Whether to show the `share` button on the embeddable player.
                  example: true
                  type: boolean
                watchlater:
                  description: >-
                    Whether to show the `watch later` button on the embeddable
                    player.
                  example: true
                  type: boolean
              type: object
            chapters:
              description: Whether chapters are enabled in the embeddable player.
              example: true
              type: boolean
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: The main color of the embeddable player.
              example: '#1ab7ea'
              type: string
            colors:
              properties:
                color_four:
                  description: >-
                    The hexadecimal color code of the fourth player color, which
                    controls the player background color.
                  example: '#aabbcc'
                  type: string
                color_one:
                  description: >-
                    The hexadecimal color code of the first player color, which
                    controls the color of the progress bar, buttons, and more.
                  example: '#112233'
                  type: string
                color_three:
                  description: >-
                    The hexadecimal color code of the third player color, which
                    controls the color of text and icons.
                  example: '#778899'
                  type: string
                color_two:
                  description: >-
                    The hexadecimal color code of the second player color, which
                    controls the player accent color.
                  example: '#445566'
                  type: string
              type: object
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: >-
                        Whether to show the active custom logo on the embeddable
                        player.
                      example: true
                      type: boolean
                    id:
                      description: >-
                        The ID of the custom logo that appears on the embeddable
                        player.
                      example: 462119
                      nullable: true
                      type: number
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      nullable: true
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo is always visible on the
                        embeddable player (`true`) or whether the logo appears
                        and disappears with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embeddable player.
                  example: true
                  type: boolean
              type: object
            play_button:
              description: An object representing the play button's settings.
              properties:
                position:
                  description: >
                    The position of the play button within the embeddable
                    player.


                    Option descriptions:
                     * `auto` - Use Vimeo's default positioning for the play button.
                     * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.
                     * `center` - The play button is positioned in the center of the player.
                  enum:
                    - auto
                    - bottom
                    - center
                  type: string
              type: object
            playbar:
              description: Whether to show the playbar on the embeddable player.
              example: true
              type: boolean
            quality_selector:
              description: Whether to show the quality selector in the embeddable player.
              example: true
              type: boolean
            transcript:
              description: Whether the transcript controls appear in the embeddable player.
              example: true
              type: boolean
            volume:
              description: Whether to show the volume selector on the embeddable player.
              example: true
              type: boolean
          type: object
        name:
          description: The name of the embed preset.
          example: New preset
          type: string
    EmbedPresetsEssentialsEditPresetRequest:
      type: object
      properties:
        outro:
          description: |
            What to do with the outro.

            Option descriptions:
             * `nothing` - Disable the outro.
          enum:
            - nothing
          type: string
    FoldersEssentialsCreateFolderRequest:
      type: object
      properties:
        name:
          description: The name of the folder.
          example: Rough cuts
          type: string
        parent_folder_uri:
          description: The URI of the parent folder.
          example: /users/12345/projects/6789
          type: string
      required:
        - name
    FoldersEssentialsEditFolderRequest:
      type: object
      properties:
        name:
          description: The name of the folder.
          example: Rough cuts
          type: string
      required:
        - name
    VideosUploadsBeginVideoUploadProcessRequest:
      type: object
      properties:
        description:
          description: The description of the video.
          example: A celebration of 10 years of Staff Picks.
          type: string
        content_rating:
          description: >-
            A list of values describing the content in this video. For a full
            list of values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        embed:
          properties:
            title:
              properties:
                name:
                  description: >
                    How to handle the video title in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the video title.
                     * `show` - Show the video title.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                owner:
                  description: >
                    How to handle the owner information in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the owner info.
                     * `show` - Show the owner info.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                portrait:
                  description: >
                    How to handle the owner portrait in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the portrait.
                     * `show` - Show the portrait.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
              type: object
            buttons:
              properties:
                embed:
                  description: Whether to show the `embed` button on the embeddable player.
                  example: true
                  type: boolean
                fullscreen:
                  description: >-
                    Whether to show the `fullscreen` button on the embeddable
                    player.
                  example: true
                  type: boolean
                hd:
                  description: Whether to show the `HD` button on the embeddable player.
                  example: true
                  type: boolean
                like:
                  description: Whether to show the `like` button on the embeddable player.
                  example: true
                  type: boolean
                scaling:
                  description: >-
                    Whether to show the `scaling` button on the embeddable
                    player in fullscreen mode.
                  example: true
                  type: boolean
                share:
                  description: Whether to show the `share` button on the embeddable player.
                  example: true
                  type: boolean
                watchlater:
                  description: >-
                    Whether to show the `watch later` button on the embeddable
                    player.
                  example: true
                  type: boolean
              type: object
            color:
              description: The main color of the embeddable player.
              example: '#1ab7ea'
              type: string
            end_screen:
              properties:
                type:
                  description: |
                    The end screen type.

                    Option descriptions:
                     * `empty` - The end screen is empty.
                     * `loop` - The end screen loops the video playback.
                     * `share` - The end screen includes sharing options.
                     * `thumbnail` - The end screen includes the thumbnail of the video.
                  enum:
                    - empty
                    - loop
                    - share
                    - thumbnail
                  type: string
              type: object
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: >-
                        Whether to show the active custom logo on the embeddable
                        player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo is always visible on the
                        embeddable player (`true`) or whether the logo appears
                        and disappears with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embeddable player.
                  example: true
                  type: boolean
              type: object
            playbar:
              description: Whether to show the playbar on the embeddable player.
              example: true
              type: boolean
            volume:
              description: Whether to show the volume selector on the embeddable player.
              example: true
              type: boolean
          type: object
        embed_domains:
          description: >-
            The complete list of domains the video can be embedded on. This
            field requires that **privacy_embed** have the value `whitelist`.
          items:
            type: string
          type: array
        folder_uri:
          description: The URI of the folder to which the video is uploaded.
          example: /users/12345/folders/6789
          type: string
        hide_from_vimeo:
          description: >-
            Whether to hide the video from everyone except the video's owner.
            When the value is `true`, unlisted video links work only for the
            video's owner.
          example: false
          type: boolean
        license:
          description: |
            The Creative Commons license under which the video is offered.

            Option descriptions:
             * `by` - The video is offered under CC BY, or the attibution-only license.
             * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.
             * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.
             * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.
             * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.
             * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.
             * `cc0` - The video is offered under CC0, or the public domain license.
          enum:
            - by
            - by-nc
            - by-nc-nd
            - by-nc-sa
            - by-nd
            - by-sa
            - cc0
          type: string
        locale:
          description: >-
            The video's default language. For a full list of supported
            languages, use the
            [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages)
            endpoint.
          example: en_US
          type: string
        name:
          description: The title of the video.
          example: Celebrating 10 Years of Staff Picks
          type: string
        password:
          description: >-
            The password. This field is required when **privacy.view** is
            `password`.
          example: hunter1
          type: string
        privacy:
          properties:
            add:
              description: >-
                Whether a user can add the video to a showcase, channel, or
                group.
              example: true
              type: boolean
            comments:
              description: |
                The privacy level required to comment on the video.

                Option descriptions:
                 * `anybody` - Anyone can comment on the video.
                 * `contacts` - Only the video owner's contacts can comment on the video.
                 * `nobody` - No one can comment on the video.
              enum:
                - anybody
                - contacts
                - nobody
              type: string
            download:
              description: >-
                Whether a user can download the video. This field isn't
                available to Vimeo Free members.
              example: true
              type: boolean
            embed:
              description: >
                The video's embed setting. Specify the `whitelist` value to
                restrict embedding to a specific set of domains. For more
                information, see our [Interacting with
                Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy)
                guide.


                Option descriptions:
                 * `private` - The video can't be embedded.
                 * `public` - The video can be embedded.
                 * `whitelist` - The video can be embedded on the specified domains only.
              enum:
                - private
                - public
                - whitelist
              type: string
            view:
              description: >
                The video's privacy setting. When this value is `users`,
                `application/json` is the only valid content type. Also, some
                privacy settings are unavailable to Vimeo Free members; for more
                information, see our [Help
                Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).


                Option descriptions:
                 * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.
                 * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._
                 * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end. _This field is deprecated._
                 * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the video.
                 * `unlisted` - Only those with the private link can access the video.
                 * `users` - Only Vimeo members can access the video. _This field is deprecated._
              enum:
                - anybody
                - contacts
                - disable
                - nobody
                - password
                - unlisted
                - users
              type: string
          type: object
        review_page:
          properties:
            active:
              description: Whether to enable video review.
              example: true
              type: boolean
          type: object
        spatial:
          properties:
            director_timeline:
              description: An array representing the 360 director timeline.
              items:
                type: object
                properties:
                  pitch:
                    description: >-
                      The 360 director timeline pitch. This value must be
                      between `−90` and `90`, and it's required only when
                      **spatial.director_timeline** is defined.
                    example: 70
                    type: number
                  roll:
                    description: The 360 director timeline roll.
                    type: number
                  time_code:
                    description: >-
                      The 360 director timeline time code. This field is
                      required only when **spatial.director_timeline** is
                      defined.
                    example: 5
                    type: number
                  yaw:
                    description: >-
                      The 360 director timeline yaw. This value must be between
                      `0` and `360`, and it's required only when
                      **spatial.director_timeline** is defined.
                    example: 125
                    type: number
                required:
                  - pitch
                  - time_code
                  - yaw
              type: array
            field_of_view:
              description: >-
                The 360 field of view. This value must be between `30` and `90`;
                the default value is `50`.
              example: 50
              type: number
            projection:
              description: |
                The 360 spatial projection.

                Option descriptions:
                 * `cubical` - Use cubical projection.
                 * `cylindrical` - Use cylindrical projection.
                 * `dome` - Use dome projection.
                 * `equirectangular` - Use equirectangular projection.
                 * `pyramid` - Use pyramid projection.
              enum:
                - cubical
                - cylindrical
                - dome
                - equirectangular
                - pyramid
              type: string
            stereo_format:
              description: |
                The 360 spatial stereo format.

                Option descriptions:
                 * `left-right` - Use left-right stereo.
                 * `mono` - Use monaural audio.
                 * `top-bottom` - Use top-bottom stereo.
              enum:
                - left-right
                - mono
                - top-bottom
              type: string
          type: object
        upload:
          properties:
            approach:
              description: |
                The upload approach.

                Option descriptions:
                 * `post` - Use the `post` approach.
                 * `pull` - Use the `pull` approach.
                 * `tus` - Use the `tus` approach.
              enum:
                - post
                - pull
                - tus
              type: string
            link:
              description: >-
                The public URL at which the video is hosted. The URL must be
                valid for at least 24 hours. Use this parameter when
                **approach** is `pull`.
              example: https://example.com/video.mp4
              type: string
            redirect_url:
              description: >-
                The app's redirect URL. Use this parameter when **approach** is
                `post`.
              example: https://example.com
              type: string
            size:
              description: >-
                The size in bytes of the video to upload. The maximum value of
                this field is `268435456000`, which corresponds to 250 GB.
              example: '13623861'
              type: string
          required:
            - approach
          type: object
      required:
        - upload
    LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest:
      type: object
      properties:
        display_name:
          description: The title to display for the simulcast.
          example: My channel
          type: string
        is_enabled:
          description: Whether the destination is enabled for simulcasting.
          example: true
          type: boolean
        privacy:
          description: >
            The privacy setting of the destination. Be sure to choose a value
            that corresponds to your service.


            Option descriptions:
             * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.
             * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.
             * `all_friends` - The privacy setting is `all_friends` for Facebook.
             * `everyone` - The privacy setting is `everyone` for Facebook.
             * `private` - The privacy setting is `private` for YouTube.
             * `public` - The privacy setting is `public` for YouTube.
             * `self` - The privacy setting is `self` for Facebook.
             * `unlisted` - The privacy setting is `unlisted` for YouTube.
          enum:
            - CONNECTIONS
            - PUBLIC
            - all_friends
            - everyone
            - private
            - public
            - self
            - unlisted
          example: public
          type: string
        provider_destination_id:
          description: >-
            The ID of the destination on the specified service, such as the
            YouTube channel ID or the Facebook page ID.
          example: bda55c6b3ba4
          type: string
        provider_video_id:
          description: The ID of the scheduled video.
          example: '6817807391346708000'
          nullable: true
          type: string
        scheduled_at:
          description: >-
            The time in Unix timestamp format when live streaming is scheduled
            to start.
          example: 1625754461
          type: number
        service_name:
          description: |
            The service to simulcast to.

            Option descriptions:
             * `custom_rtmp` - Simulcast to a custom service.
             * `facebook` - Simulcast to Facebook Live.
             * `linkedin` - Simulcast to LinkedIn Live.
             * `youtube` - Simulcast to YouTube Live.
          enum:
            - custom_rtmp
            - facebook
            - linkedin
            - youtube
          example: youtube
          type: string
        stream_key:
          description: The RTMP stream key.
          example: da056692-ba63-4749-a6eb-a476a22b3acd
          type: string
        stream_url:
          description: The RTMP URL for receiving the video stream.
          example: rtmp://mycooldomain.com/live
          type: string
        type:
          description: |
            The type of the simulcast destination.

            Option descriptions:
             * `channel` - The destination is a YouTube channel.
             * `custom` - The destination is custom.
             * `organization` - The destination is a LinkedIn organization.
             * `page` - The destination is a Facebook page.
             * `profile` - The destination is a Facebook or LinkedIn profile.
          enum:
            - channel
            - custom
            - organization
            - page
            - profile
          example: channel
          type: string
      required:
        - display_name
        - service_name
        - type
    WebinarEssentialsCreateWebinarRequest:
      type: object
      properties:
        title:
          description: The title of the webinar.
          example: Interviews Daily
          type: string
        description:
          description: The description of the webinar.
          example: In this episode, we interview a surprise guest
          type: string
        email_settings:
          description: >-
            The settings for emails that are sent about the webinar. _This field
            is deprecated._
          properties:
            accent_color:
              description: >-
                The accent color scheme for emails that are sent about the
                webinar. _This field is deprecated._
              example: '#000fff'
              type: string
            custom_link:
              description: >-
                The custom link for emails that are sent about the webinar.
                _This field is deprecated._
              example: https://xyz.com
              type: string
            email_preferences:
              description: >-
                The preferences for emails that are sent about the webinar.
                _This field is deprecated._
              properties:
                email_event_reminder_15_min:
                  description: >-
                    Whether to send a reminder email 15 minutes before the
                    webinar starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_1_hrs:
                  description: >-
                    Whether to send a reminder email 1 hour before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_24_hrs:
                  description: >-
                    Whether to send a reminder email 24 hours before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_post_event_no_show_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails to no-shows.
                    _This field is deprecated._
                  type: boolean
                email_post_event_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails. _This field is
                    deprecated._
                  type: boolean
                email_registration_confirmation:
                  description: >-
                    Whether to send a registration confirmation email after
                    webinar registration. _This field is deprecated._
                  type: boolean
              type: object
            from:
              description: >-
                The name of the sender for emails that are sent about the
                webinar. _This field is deprecated._
              example: Vimeo
              type: string
            logo_uri:
              description: >-
                The URI of the logo image to include in emails that are sent
                about the webinar. _This field is deprecated._
              example: /users/123/team_logos_2343
              type: string
            reply_email:
              description: The sender's reply email address. _This field is deprecated._
              example: test@vimeo.com
              type: string
            sender_address:
              description: The sender's physical address. _This field is deprecated._
              example: Bangalore, India
              type: string
            sender_policy_url:
              description: >-
                The URL of the sender's privacy policy. _This field is
                deprecated._
              example: vimeo.com/policy
              type: string
            use_custom_link:
              description: >-
                Whether to include a custom link in emails that are sent about
                the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_reply_email:
              description: >-
                Whether to include a reply link in the footer of emails that are
                sent about the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_sender_address:
              description: >-
                Whether to include the sender's physical address in the footer
                of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
            use_sender_policy_url:
              description: >-
                Whether to include the URL of the sender's privacy policy in the
                footer of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
          type: object
        folder_uri:
          description: The URI of the webinar's folder.
          example: 0
          type: number
        password:
          description: >-
            The password when **privacy.view** is `password`. Anyone with the
            password can view the videos generated by streaming to the webinar
            event.
          example: gogo
          type: string
        privacy:
          description: The privacy settings of the webinar.
          properties:
            embed:
              description: |
                The initial embed privacy of the webinar.

                Option descriptions:
                 * `private` - The webinar can't be embedded on any domain.
                 * `public` - The webinar can be embedded on any domain.
                 * `whitelist` - The webinar can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: private
              type: string
            view:
              description: |
                The initial privacy of the webinar.

                Option descriptions:
                 * `anybody` - Anyone can access the webinar. This privacy setting appears as `Public` on the Vimeo front end.
                 * `nobody` - No one except the owner can access the webinar. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `team` - Only members of the authenticated user's team can access the webinar.
              enum:
                - anybody
                - nobody
                - password
                - team
              example: anybody
              type: string
          type: object
        schedule:
          description: >-
            Information about the time or times that the webinar is expected to
            be live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`. _This field is deprecated._
              example: 14:00:00Z
              type: string
            end_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to end,
                with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2019-06-21T14:00:00+00:00'
              type: string
            start_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2018-06-21T14:00:00+00:00'
              type: string
            type:
              description: |
                How often the webinar is expected to be live.

                Option descriptions:
                 * `single` - The webinar is live one time only.
                 * `weekly` - The webinar is live on a weekly basis. _This field is deprecated._
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the webinar is expected
                to be live. Weekdays can range from 1 to 7, where 1 is Monday
                and 7 is Sunday. This parameter is required when
                **schedule.type** is `weekly`. _This field is deprecated._
              items:
                type: string
              type: array
          type: object
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            the automatically generated video titles for the webinar.
          example: America/New_York
          type: string
      required:
        - title
    WebinarEssentialsUpdateWebinarBelongingToAuthenticatedUserRequest:
      type: object
      properties:
        title:
          description: The title of the webinar.
          example: Interviews Daily
          type: string
        description:
          description: The description of the webinar.
          example: In this episode, we interview a surprise guest
          type: string
        email_settings:
          description: >-
            The settings for emails that are sent about the webinar. _This field
            is deprecated._
          properties:
            accent_color:
              description: >-
                The accent color scheme for emails that are sent about the
                webinar. _This field is deprecated._
              example: '#000fff'
              type: string
            custom_link:
              description: >-
                The custom link for emails that are sent about the webinar.
                _This field is deprecated._
              example: https://xyz.com
              type: string
            email_preferences:
              description: >-
                The preferences for emails that are sent about the webinar.
                _This field is deprecated._
              properties:
                email_event_reminder_15_min:
                  description: >-
                    Whether to send a reminder email 15 minutes before the
                    webinar starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_1_hrs:
                  description: >-
                    Whether to send a reminder email 1 hour before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_24_hrs:
                  description: >-
                    Whether to send a reminder email 24 hours before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_post_event_no_show_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails to no-shows.
                    _This field is deprecated._
                  type: boolean
                email_post_event_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails. _This field is
                    deprecated._
                  type: boolean
                email_registration_confirmation:
                  description: >-
                    Whether to send a registration confirmation email after
                    webinar registration. _This field is deprecated._
                  type: boolean
              type: object
            from:
              description: >-
                The name of the sender for emails that are sent about the
                webinar. _This field is deprecated._
              example: Vimeo
              type: string
            logo_uri:
              description: >-
                The URI of the logo image to include in emails that are sent
                about the webinar. _This field is deprecated._
              example: /users/123/team_logos/2343
              type: string
            reply_email:
              description: The sender's reply email address. _This field is deprecated._
              example: test@vimeo.com
              type: string
            sender_address:
              description: The sender's physical address. _This field is deprecated._
              example: Bangalore, India
              type: string
            sender_policy_url:
              description: >-
                The URL of the sender's privacy policy. _This field is
                deprecated._
              example: vimeo.com/policy
              type: string
            use_custom_link:
              description: >-
                Whether to include a custom link in emails that are sent about
                the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_reply_email:
              description: >-
                Whether to include a reply link in the footer of emails that are
                sent about the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_sender_address:
              description: >-
                Whether to include the sender's physical address in the footer
                of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
            use_sender_policy_url:
              description: >-
                Whether to include the URL of the sender's privacy policy in the
                footer of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
          type: object
        password:
          description: >-
            The password when **privacy.view** is `password`. Anyone with the
            password can view the videos generated by streaming to the webinar
            event.
          example: gogo
          type: string
        privacy:
          description: The privacy settings of the webinar.
          properties:
            embed:
              description: |
                The initial embed privacy of the webinar.

                Option descriptions:
                 * `private` - The webinar can't be embedded on any domain.
                 * `public` - The webinar can be embedded on any domain.
                 * `whitelist` - The webinar can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: private
              type: string
            view:
              description: >
                The initial privacy of the webinar. This can't be updated once
                the webinar is in session.


                Option descriptions:
                 * `anybody` - Anyone can access the webinar. This privacy setting appears as `Public` on the Vimeo front end.
                 * `nobody` - No one except the owner can access the webinar. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the live event.
                 * `team` - Only members of the authenticated user's team can access the webinar.
              enum:
                - anybody
                - nobody
                - password
                - team
              example: anybody
              type: string
          type: object
        schedule:
          description: >-
            Information about the time or times that the webinar is expected to
            be live. Please note that you can't update this setting once the
            webinar has started.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`. _This field is deprecated._
              example: 14:00:00Z
              type: string
            end_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to end,
                with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2019-06-21T14:00:00+00:00'
              type: string
            start_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2018-06-21T14:00:00+00:00'
              type: string
            type:
              description: |
                How often the webinar is expected to be live.

                Option descriptions:
                 * `single` - The webinar is live one time only.
                 * `weekly` - The webinar is live on a weekly basis. _This field is deprecated._
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the webinar is expected
                to be live. Weekdays can range from 1 to 7, where 1 is Monday
                and 7 is Sunday. This parameter is required when
                **schedule.type** is `weekly`. _This field is deprecated._
              items:
                type: string
              type: array
          type: object
        status:
          description: |
            The status of the webinar.

            Option descriptions:
             * `ended` - The webinar has ended.
             * `started` - The webinar has started.
          enum:
            - ended
            - started
          example: started
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            the automatically generated video titles for the webinar.
          example: America/New_York
          type: string
    WebinarEmailsCustomizePreferencesRequest:
      type: object
      properties:
        accent_color:
          description: The accent color scheme for emails that are sent about the webinar.
          example: '#000fff'
          type: string
        custom_link:
          description: The custom link for emails that are sent about the webinar.
          example: https://xyz.com
          type: string
        email_event_reminder_24_hrs:
          description: >-
            The email customization details for the webinar reminder email,
            which goes out 24 hours before the event.
          type: object
        email_post_event_thank_you:
          description: >-
            The email customization details for the webinar post-event thank-you
            email.
          type: object
        email_preferences:
          description: The preferences for emails that are sent about the webinar.
          properties:
            email_event_reminder_15_min:
              description: >-
                Whether to send a reminder email 15 minutes before the webinar
                starts.
              type: boolean
            email_event_reminder_1_hrs:
              description: >-
                Whether to send a reminder email 1 hour before the webinar
                starts.
              type: boolean
            email_event_reminder_24_hrs:
              description: >-
                Whether to send a reminder email 24 hours before the webinar
                starts.
              type: boolean
            email_post_event_no_show_thank_you:
              description: Whether to send post-event thank-you emails to no-shows.
              type: boolean
            email_post_event_thank_you:
              description: Whether to send post-event thank-you emails.
              type: boolean
            email_registration_confirmation:
              description: >-
                Whether to send a registration confirmation email after webinar
                registration.
              type: boolean
          type: object
        email_registration_confirmation:
          description: >-
            The email customization details for the webinar registration
            confirmation email.
          type: object
        from:
          description: The name of the sender for emails that are sent about the webinar.
          example: Vimeo
          type: string
        logo_uri:
          description: >-
            The URI of the logo image to include in emails that are sent about
            the webinar.
          example: /users/123/team_logos_2343
          type: string
        reply_email:
          description: The sender's reply email address.
          example: test@vimeo.com
          type: string
        sender_address:
          description: The sender's physical address.
          example: Bangalore, India
          type: string
        sender_policy_url:
          description: The URL of the sender's privacy policy.
          example: vimeo.com/policy
          type: string
        use_custom_link:
          description: >-
            Whether to include a custom link in emails that are sent about the
            webinar.
          example: false
          type: boolean
        use_reply_email:
          description: >-
            Whether to include a reply link in the footer of emails that are
            sent about the webinar.
          example: false
          type: boolean
        use_sender_address:
          description: >-
            Whether to include the sender's physical address in the footer of
            emails that are sent about the webinar.
          example: false
          type: boolean
        use_sender_policy_url:
          description: >-
            Whether to include the URL of the sender's privacy policy in the
            footer of emails that are sent about the webinar.
          example: false
          type: boolean
    WebinarRegistrationsCaptureUserRegistrationListRequest:
      type: object
      properties:
        registrants:
          description: An array of registration data for the webinar.
          items:
            type: object
            properties:
              data:
                description: The registrant's other submitted fields.
                type: object
              email:
                description: The registrant's email address.
                example: jane.doe@vimeo.com
                type: string
              first_name:
                description: The registrant's first name.
                example: Jane
                type: string
              last_name:
                description: The registrant's last name.
                example: Doe
                type: string
          type: array
    WebinarRegistrationsUpdateUserRegistrationDataRequest:
      type: object
      properties:
        is_blocked:
          description: Whether to block the webinar registrant.
          example: true
          type: boolean
    AuthenticationExtrasExchangeOAuthCodeExchangeRequest:
      type: object
      properties:
        code:
          description: The authorization code received from the authorization server.
          example: 1234abcd
          type: string
        grant_type:
          description: >-
            The grant type. The value of this field must be
            `authorization_code`.
          enum:
            - authorization_code
          type: string
        redirect_uri:
          description: >-
            The redirect URI. The value of this field must match the URI from
            `/oauth/authorize`.
          example: https://example.com
          type: string
      required:
        - code
        - grant_type
        - redirect_uri
    ClientAuthRequest:
      type: object
      properties:
        grant_type:
          description: >-
            The grant type. The value of this field must be
            `client_credentials`.
          enum:
            - client_credentials
          type: string
        scope:
          description: >-
            A space-separated list of the authentication scopes to access. The
            default is `public`.
          example: public
          type: string
      required:
        - grant_type
        - scope
    AuthenticationExtrasConvertOAuth1ToOAuth2Request:
      type: object
      properties:
        grant_type:
          description: The grant type. The value of this field must be `vimeo_oauth1`.
          enum:
            - vimeo_oauth1
          type: string
        token:
          description: The OAuth 1 token.
          example: 58037c0078d5f54e15e638cc0dd882a570b13c50
          type: string
        token_secret:
          description: The OAuth 1 token secret.
          example: NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA==
          type: string
      required:
        - grant_type
        - token
        - token_secret
    EditVodRequest:
      type: object
      properties:
        link:
          description: The custom string to use in the Vimeo URL of the On Demand page.
          example: darbyforever
          type: string
        preorder:
          properties:
            active:
              description: Whether to enable preorders on the On Demand page.
              example: true
              type: boolean
            publish_time:
              description: >-
                The time in ISO 8601 format when the On Demand page will be
                published. This parameter is required when **preorder.active**
                is `true`.
              example: '2017-05-16T15:05:43+00:00'
              type: string
          type: object
        publish:
          properties:
            active:
              description: Whether to publish the On Demand page.
              example: true
              type: boolean
          type: object
        publish_when_ready:
          description: >-
            Whether to publish the On Demand page automatically after all videos
            have finished transcoding.
          example: true
          type: boolean
    OnDemandBackgroundsEditBackgroundOnPageRequest:
      type: object
      properties:
        active:
          description: >-
            Whether this background image is the one that appears on the On
            Demand page.
          example: true
          type: boolean
    OnDemandPostersUpdatePosterRequest:
      type: object
      properties:
        active:
          description: Whether this poster is the one that appears on the On Demand page.
          example: true
          type: boolean
    OnDemandPromotionsAddPromotionToPageRequest:
      type: object
      properties:
        access_type:
          description: >
            The promotion access type, which is a purchase option that isn't
            available in the On Demand container. Use the **download** and
            **stream_period** parameters to define additional characteristics
            for the `vip` type.


            Option descriptions:
             * `default` - The promotion grants a discount on the existing purchase options for an On Demand container.
             * `vip` - The promotion grants free access to On Demand content before it's released.
          enum:
            - default
            - vip
          type: string
        code:
          description: >-
            The promotion code. This parameter is ignored when the promotion
            type is `batch`.
          example: sxsw2018
          type: string
        discount_type:
          description: >
            The type of discount offered by the promotion code. When
            **access_type** is `vip`, the value of this parameter must be
            `free`.


            Option descriptions:
             * `free` - The discount reduces the price to zero.
             * `percent` - The discount reduces the price by the percentage defined in the **percent_off** parameter.
          enum:
            - free
            - percent
          type: string
        download:
          description: >-
            Whether the promotion grants download access to On Demand content.
            This field is required only when the download access hasn't been
            defined in the On Demand container, or when **access_type** is `vip`
            or **product_type** is `buy`.
          example: true
          type: boolean
        end_time:
          description: >-
            The time at which the promotion period ends. If this parameter has
            no value, the promotion never expires.
          example: '1526089920'
          type: string
        label:
          description: >-
            The description of the promotion when the promotion type is `batch`.
            This parameter is ignored when the promotion type is `single`.
          example: sxsw
          type: string
        percent_off:
          description: >-
            The percentage of the discount. This parameter is applicable only
            when **discount_type** is `percent`.
          example: 50
          type: number
        product_type:
          description: >
            The type of transaction to which the promotion applies. When
            **access_type** is `default`, the default value is `any`. When
            **access_type** is `vip`, the default value is `rent` and the only
            valid product types are `buy` and `rent`.


            Option descriptions:
             * `any` - The promotion applies to any transaction.
             * `buy` - The promotion applies only to purchased products.
             * `buy_episode` - The promotion applies only to purchased episodes.
             * `rent` - The promotion applies only to rented products.
             * `rent_episode` - The promotion applies only to rented episodes.
             * `subscribe` - The promotion applies only to subscriptions.
          enum:
            - any
            - buy
            - buy_episode
            - rent
            - rent_episode
            - subscribe
          type: string
        start_time:
          description: >-
            The time at which the promotion period starts. If this parameter has
            no value, the start time defaults to the time at which the promotion
            was created.
          example: '1526089920'
          type: string
        stream_period:
          description: >
            The amount of time for which the user can access On Demand content
            upon redeeming a promotion code. This parameter is required only
            when the streaming period isn't defined in the On Demand container,
            or when creating promotions where **access_type** is `vip` or
            **product_type** is `rent`.


            Option descriptions:
             * `1_week` - The user can access On Demand content for a maximum of 1 week after redeeming a promotion code.
             * `1_year` - The user can access On Demand content for a maximum of 1 year after redeeming a promotion code.
             * `24_hour` - The user can access On Demand content for a maximum of 24 hours after redeeming a promotion code.
             * `30_day` - The user can access On Demand content for a maximum of 30 days after redeeming a promotion code.
             * `3_month` - The user can access On Demand content for a maximum of 3 months after redeeming a promotion code.
             * `48_hour` - The user can access On Demand content for a maximum of 48 hours after redeeming a promotion code.
             * `6_month` - The user can access On Demand content for a maximum of 6 months after redeeming a promotion code.
             * `72_hour` - The user can access On Demand content for a maximum of 72 hours after redeeming a promotion code.
          enum:
            - 1_week
            - 1_year
            - 24_hour
            - 30_day
            - 3_month
            - 48_hour
            - 6_month
            - 72_hour
          type: string
        total:
          description: >-
            When **type** is `batch`, the total number of promotions to
            generate. When **type** is `single`, the total number of uses of the
            promotion.
          example: 9
          type: number
        type:
          description: >
            The type of the promotion. When **access_type** is `vip`, the value
            for this parameter must be `batch`.


            Option descriptions:
             * `batch` - The promotion type that generates many random codes to use one time each.
             * `single` - The promotion type that generates one code to use many times.
          enum:
            - batch
            - single
          type: string
      required:
        - download
        - stream_period
        - total
        - type
    OnDemandRegionsRemoveMultipleRequest:
      type: object
      properties:
        countries:
          description: An array of country codes for the regions to remove.
          items:
            type: string
          type: array
    OnDemandRegionsAddMultipleRequest:
      type: object
      properties:
        countries:
          description: An array of country codes for the regions to add.
          items:
            type: string
          type: array
      required:
        - countries
    OnDemandVideosAddVideoToPageRequest:
      type: object
      properties:
        buy:
          properties:
            price:
              properties:
                AUD:
                  description: The purchase price of the video in Australian dollars.
                  example: 1.99
                  type: number
                CAD:
                  description: The purchase price of the video in Canadian dollars.
                  example: 1.99
                  type: number
                CHF:
                  description: The purchase price of the video in Swiss francs.
                  example: 1.99
                  type: number
                DKK:
                  description: The purchase price of the video in Danish krone.
                  example: 1.99
                  type: number
                EUR:
                  description: The purchase price of the video in euros.
                  example: 1.99
                  type: number
                GBP:
                  description: The purchase price of the video in British pounds.
                  example: 1.99
                  type: number
                JPY:
                  description: The purchase price of the video in Japanese yen.
                  example: 1.99
                  type: number
                KRW:
                  description: The purchase price of the video in South Korean won.
                  example: 1.99
                  type: number
                NOK:
                  description: The purchase price of the video in Norwegian krone.
                  example: 1.99
                  type: number
                PLN:
                  description: The purchase price of the video in Polish zloty.
                  example: 1.99
                  type: number
                SEK:
                  description: The purchase price of the video in Swedish krona.
                  example: 1.99
                  type: number
                USD:
                  description: >-
                    The purchase price of the video in United States dollars.
                    This parameter is required when **buy.active** is `true`.
                  example: 1.99
                  type: number
              type: object
          type: object
        position:
          description: The position of the video in the On Demand collection.
          example: 10
          type: number
        release_year:
          description: The release year of the video.
          example: 2018
          type: number
        rent:
          properties:
            price:
              properties:
                AUD:
                  description: The rental price of the video in Australian dollars.
                  example: 0.99
                  type: number
                CAD:
                  description: The rental price of the video in Canadian dollars.
                  example: 0.99
                  type: number
                CHF:
                  description: The rental price of the video in Swiss francs.
                  example: 0.99
                  type: number
                DKK:
                  description: The rental price of the video in Danish krone.
                  example: 0.99
                  type: number
                EUR:
                  description: The rental price of the video in euros.
                  example: 0.99
                  type: number
                GBP:
                  description: The rental price of the video in British pounds.
                  example: 0.99
                  type: number
                JPY:
                  description: The rental price of the video in Japanese yen.
                  example: 0.99
                  type: number
                KRW:
                  description: The rental price of the video in South Korean won.
                  example: 0.99
                  type: number
                NOK:
                  description: The rental price of the video in Norwegian krone.
                  example: 0.99
                  type: number
                PLN:
                  description: The rental price of the video in Polish zloty.
                  example: 0.99
                  type: number
                SEK:
                  description: The rental price of the video in Swedish krona.
                  example: 0.99
                  type: number
                USD:
                  description: >-
                    The rental price of the video in United States dollars. This
                    parameter is required when **rent.active** is `true`.
                  example: 0.99
                  type: number
              type: object
          type: object
        type:
          description: |
            The type of the video.

            Option descriptions:
             * `extra` - The video type is extra footage.
             * `main` - The video type is the main video.
             * `trailer` - The video type is a trailer.
          enum:
            - extra
            - main
            - trailer
          type: string
      required:
        - type
    EditUserRequest:
      type: object
      properties:
        bio:
          description: The user's bio.
          example: This is where you will find videos and news updates from the staff
          type: string
        content_filter:
          description: >-
            A list of values describing the content in the user's videos. Find
            the full list in the
            [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint. You must provide a comma-separated list if you're using a
            query string or an array if you're using JSON.
          items:
            type: string
          type: array
        gender:
          description: |
            The authenticated user's gender.

            Option descriptions:
             * `f` - The user's preferred pronouns are she and her.
             * `m` - The user's preferred pronouns are he and him.
             * `n` - The user would rather not give preferred pronouns.
             * `o` - The user's preferred pronouns are they and them.
          enum:
            - f
            - m
            - 'n'
            - o
          type: string
        link:
          description: The user's custom Vimeo URL.
          example: staff
          type: string
        location:
          description: The user's location.
          example: New York City
          type: string
        name:
          description: The user's display name.
          example: Vimeo Staff
          type: string
        password:
          description: >-
            The default password for all future videos that this user uploads.
            To use this field, the **videos.privacy.view** field must be
            `password`.
          example: hunter1
          type: string
        videos:
          properties:
            privacy:
              properties:
                add:
                  description: >-
                    Whether the user can add videos to showcases, channels, or
                    groups by default.
                  example: true
                  type: boolean
                comments:
                  description: |
                    Who can comment on the user's video uploads by default.

                    Option descriptions:
                     * `anybody` - Anyone can comment.
                     * `contacts` - Only the user's contacts can comment.
                     * `nobody` - No one can comment.
                  enum:
                    - anybody
                    - contacts
                    - nobody
                  type: string
                download:
                  description: >-
                    Whether the user can download videos. This value becomes the
                    default download setting for all future videos that the user
                    uploads.
                  example: true
                  type: boolean
                embed:
                  description: >
                    The privacy for the user's embedded videos. The whitelist
                    value enables you to define all valid embeddable domains.
                    See our [Interacting with
                    Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy)
                    guide for details on adding and removing domains.


                    Option descriptions:
                     * `private` - The videos can't be embedded on any domain.
                     * `public` - The videos can be embedded on any domain.
                     * `whitelist` - The videos can be embedded on the specified domains only.
                  enum:
                    - private
                    - public
                    - whitelist
                  type: string
                view:
                  description: |
                    Who can access the user's videos by default.

                    Option descriptions:
                     * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.
                     * `contacts` - Only the user's contacts can access the videos. _This field is deprecated._
                     * `disable` - The videos are disabled. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.
                     * `nobody` - No one can access the videos. This privacy setting appears as `Private` on the Vimeo front end.
                     * `password` - Only those with the password can access the videos.
                     * `unlisted` - The videos are unlisted.
                     * `users` - Only other Vimeo members can access the videos. _This field is deprecated._
                  enum:
                    - anybody
                    - contacts
                    - disable
                    - nobody
                    - password
                    - unlisted
                    - users
                  type: string
              type: object
          type: object
    CreateShowcaseRequest:
      type: object
      properties:
        description:
          description: The description of the showcase.
          example: Vimeo holiday videos!
          type: string
        brand_color:
          description: >-
            The hexadecimal code for the color of the player buttons and
            showcase controls.
          example: ff66ee
          type: string
        hide_from_vimeo:
          description: Whether the showcase should be hidden from Vimeo when unlisted.
          example: false
          type: boolean
        hide_nav:
          description: Whether to hide Vimeo navigation when displaying the showcase.
          example: true
          type: boolean
        hide_upcoming:
          description: Whether to include the upcoming event in the showcase.
          example: false
          type: boolean
        layout:
          description: |
            The type of layout for presenting the showcase.

            Option descriptions:
             * `grid` - The videos appear in a grid.
             * `player` - The videos appear in the player.
          enum:
            - grid
            - player
          type: string
        name:
          description: The name of the showcase.
          example: Vimeo Holiday Videos!
          type: string
        password:
          description: >-
            The showcase's password. This field is required only when
            **privacy** is `password`.
          example: hunter1
          type: string
        privacy:
          description: |
            The privacy level of the showcase.

            Option descriptions:
             * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.
             * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.
             * `nobody` - No one can access the showcase, including the authenticated user.
             * `password` - Only those with the password can access the showcase.
             * `team` - Only members of the authenticated user's team can access the showcase.
             * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.
          enum:
            - anybody
            - embed_only
            - nobody
            - password
            - team
            - unlisted
          type: string
        review_mode:
          description: Whether showcase videos use the review mode URL.
          example: true
          type: boolean
        sort:
          description: |
            The default sort order of the videos as they appear in the showcase.

            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the showcase.
             * `comments` - The videos appear according to their number of comments.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order with the newest first.
             * `oldest` - The videos appear in chronological order with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - likes
            - newest
            - oldest
            - plays
          type: string
        theme:
          description: |
            The color theme of the showcase.

            Option descriptions:
             * `dark` - The showcase uses the dark theme.
             * `standard` - The showcase uses the standard theme.
          enum:
            - dark
            - standard
          type: string
      required:
        - name
    EditShowcaseRequest:
      type: object
      properties:
        description:
          description: The description of the showcase.
          example: Vimeo holiday videos!
          type: string
        brand_color:
          description: >-
            The hexadecimal code for the color of the player buttons and
            showcase controls.
          example: ff66ee
          type: string
        domain:
          description: The custom domain of the showcase.
          example: mycustomdomain.com
          nullable: true
          type: string
        hide_nav:
          description: Whether to hide Vimeo navigation when displaying the showcase.
          example: true
          type: boolean
        hide_upcoming:
          description: Whether to include the upcoming event in the showcase.
          example: false
          type: boolean
        layout:
          description: |
            The type of layout for presenting the showcase.

            Option descriptions:
             * `grid` - The videos appear in a grid.
             * `player` - The videos appear in the player.
          enum:
            - grid
            - player
          type: string
        name:
          description: The name of the showcase.
          example: Vimeo Holiday Videos!
          type: string
        password:
          description: >-
            The showcase's password. This field is required only when
            **privacy** is `password`.
          example: hunter1
          type: string
        privacy:
          description: |
            The privacy level of the showcase.

            Option descriptions:
             * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.
             * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.
             * `nobody` - No one can access the showcase, including the authenticated user.
             * `password` - Only people with the password can access the showcase.
             * `team` - Only members of the authenticated user's team can access the showcase.
             * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.
          enum:
            - anybody
            - embed_only
            - nobody
            - password
            - team
            - unlisted
          type: string
        review_mode:
          description: Whether showcase videos use the review mode URL.
          example: true
          type: boolean
        sort:
          description: |
            The default sort order of the videos as they appear in the showcase.

            Option descriptions:
             * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.
             * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.
             * `alphabetical` - The videos appear alphabetically by their title.
             * `arranged` - The videos appear as arranged by the owner of the showcase.
             * `comments` - The videos appear according to their number of comments.
             * `likes` - The videos appear according to their number of likes.
             * `newest` - The videos appear in chronological order with the newest first.
             * `oldest` - The videos appear in chronological order with the oldest first.
             * `plays` - The videos appear according to their number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - likes
            - newest
            - oldest
            - plays
          type: string
        theme:
          description: |
            The color theme of the showcase.

            Option descriptions:
             * `dark` - The showcase uses the dark theme.
             * `standard` - The showcase uses the standard theme.
          enum:
            - dark
            - standard
          type: string
        url:
          description: The custom Vimeo URL of the showcase.
          example: my-custom-url
          nullable: true
          type: string
        use_custom_domain:
          description: Whether the user has opted for a custom domain for their showcase.
          example: true
          type: boolean
    ShowcasesCustomShowcaseThumbnailsReplaceCustomThumbnailRequest:
      type: object
      properties:
        active:
          description: Whether to make this image the active custom showcase thumbnail.
          example: true
          type: boolean
    ShowcasesCustomShowcaseLogosReplaceLogoRequest:
      type: object
      properties:
        active:
          description: Whether to make this image the active showcase logo.
          example: true
          type: boolean
    ShowcasesShowcaseVideosReplaceShowcaseVideosRequest:
      type: object
      properties:
        videos:
          description: >-
            A comma-separated list of video URIs corresponding to the videos to
            add.
          example: /videos/258684937,/videos/273576296
          type: string
      required:
        - videos
    ShowcasesShowcaseVideosCreateShowcaseThumbnailRequest1:
      type: object
      properties:
        time_code:
          description: >-
            The time in seconds of the video frame to use as the thumbnail
            image.
          example: 300
          type: number
    FollowUsersRequest:
      type: object
      properties:
        users:
          description: An array of user IDs for the authenticated user to follow.
          items:
            type: string
          type: array
      required:
        - users
    LiveEssentialsDeleteMultipleEventsRequest2:
      type: object
      properties:
        password:
          description: The user’s password.
          example: hunter1
          type: string
      required:
        - password
    LiveEssentialsCreateEventForUserRequest:
      type: object
      properties:
        title:
          description: >-
            The title of the event. If **automatically_title_stream** is `true`,
            this value is the base title for videos created by streaming to this
            event.
          example: Live Content
          type: string
        allow_share_link:
          description: Whether the share link is usable.
          type: boolean
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords that improve the quality of the
            automated closed captions.
          example: commonly-used words,phrases,technical terms
          type: string
        auto_cc_lang:
          description: |
            The language in which the automated closed captions appear.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
        automatically_title_stream:
          description: >-
            Whether the title for the next video in the event is generated based
            on the time of the stream and the **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display the live chat client on the Vimeo event page.
          example: true
          type: boolean
        content_rating:
          description: >-
            A list of values describing the content in this event. To return the
            list of all possible content rating values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        embed:
          description: >-
            The embed settings of the event and the videos generated by
            streaming to this event.
          properties:
            autoplay:
              description: Whether playback starts automatically on load.
              example: true
              type: boolean
            color:
              description: >-
                The hexadecimal color code for the main color of the embed
                player.
              example: '#00adef'
              type: string
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: Whether to show the custom logo on the embed player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether to show the custom logo persistently (`true`) or
                        hide it with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embed player.
                  example: true
                  type: boolean
              type: object
            loop:
              description: >-
                Whether the playlist should start from the beginning again after
                reaching the end of the last video.
              example: true
              type: boolean
            playlist:
              description: Whether to show the playlist controls on the embed player.
              example: true
              type: boolean
            schedule:
              description: Whether to show the event schedule on the embed player.
              example: true
              type: boolean
            show_latest_archived_clip:
              description: >-
                Whether to show the latest archived video in the embed player
                when off-air.
              example: true
              type: boolean
            use_color:
              description: >-
                Whether the embed player should use (`true`) or ignore (`false`)
                the **embed.color** value.
              example: true
              type: boolean
          type: object
        folder_uri:
          description: The URI of the event's folder.
          example: /users/67890/folder/12345
          type: string
        interaction_tools_settings:
          description: The settings for the interaction tools.
          properties:
            is_anonymous_questions_disabled:
              description: >-
                Whether anonymous questions are disabled for the interaction
                tools settings.
              example: true
              type: boolean
            is_qna_moderated:
              description: Whether the Q&A is moderated for the interaction tools settings.
              example: true
              type: boolean
          type: object
        low_latency:
          description: Whether the event has low-latency streaming enabled.
          type: boolean
        playlist_sort:
          description: >
            The order in which the videos of the event appear within the event's
            playlist.


            Option descriptions:
             * `added_first` - The most recently added videos appear first.
             * `added_last` - The most recently added videos appear last.
             * `alphabetical` - The videos appear in alphabetical order.
             * `arranged` - The videos appear in the order in which the user has arranged them.
             * `comments` - The videos appear in order of number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear in order of number of likes.
             * `newest` - The newest videos appear first.
             * `oldest` - The oldest videos appear first.
             * `plays` - The videos appear in order of number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        rtmp_preview:
          description: Whether the event has RTMP preview enabled.
          type: boolean
        schedule:
          description: >-
            Information about the time or times that the event is expected to be
            live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the event is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            type:
              description: |
                How often the event is expected to be live.

                Option descriptions:
                 * `single` - The event is live one time only.
                 * `weekly` - The event is live on a weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the event is expected to
                be live. Weekdays can range from 1 to 7, where 1 is Monday and 7
                is Sunday. This parameter is required when **schedule.type** is
                `weekly`.
              items:
                type: string
              type: array
          type: object
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        stream_description:
          description: The description of the next video to be streamed to the event.
          example: In this episode, we interview a surprise guest
          type: string
        stream_embed:
          properties:
            embed:
              description: |
                The embed permission level for the event.

                Option descriptions:
                 * `private` - Only the user can embed the event.
                 * `public` - Anyone can embed the event.
                 * `whitelist` - Only those on the whitelist can embed the event.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
          type: object
        stream_password:
          description: >-
            The password when **stream_privacy.view** is `password`. Anyone with
            the password can view the videos generated by streaming to the
            event.
          example: hunter1
          type: string
        stream_privacy:
          description: The privacy settings of the event.
          properties:
            view:
              description: >
                The initial privacy of the videos generated by streaming to the
                event as well as the embed privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.
                 * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `unlisted` - Only those with the private link can access the event.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          type: object
        stream_title:
          description: >-
            The title of the next video to be streamed to the event. This
            parameter is required when **automatically_title_stream** is
            `false`.
          example: Special Feature
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            automatically generated video titles.
          example: America/New_York
          type: string
      required:
        - title
    LiveEssentialsUpdateEventBelongingToAuthenticatedUserRequest2:
      type: object
      properties:
        title:
          description: >-
            The title of the event. If **automatically_title_stream** is `true`,
            this value is the base title for videos created by streaming to this
            event.
          example: Live Content
          type: string
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: false
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords for enhancing the speech
            detection of automated closed captions.
          type: string
        auto_cc_language:
          description: |
            The language of the automated closed captions.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
        automatically_title_stream:
          description: >-
            Whether the title for the next video in the event is generated based
            on the time of the stream and the **title** field of the event.
          example: true
          type: boolean
        chat_enabled:
          description: Whether to display the live chat client on the Vimeo event page.
          example: true
          type: boolean
        content_rating:
          description: >-
            A list of values describing the content in this event. To return the
            list of all possible content rating values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        dvr:
          description: Whether the DVR feature is enabled.
          example: true
          type: boolean
        embed:
          description: >-
            The embed settings of the event and the videos generated by
            streaming to this event.
          properties:
            autoplay:
              description: Whether playback starts automatically on load.
              example: true
              type: boolean
            color:
              description: >-
                The hexadecimal color code for the main color of the embed
                player.
              example: '#00adef'
              type: string
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: Whether to show the custom logo on the embed player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether to show the custom logo persistently (`true`) or
                        hide it with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embed player.
                  example: true
                  type: boolean
              type: object
            loop:
              description: >-
                Whether the playlist should start from the beginning again after
                reaching the end of the last video.
              example: true
              type: boolean
            playlist:
              description: Whether to show the playlist controls on the embed player.
              example: true
              type: boolean
            schedule:
              description: Whether to show the event schedule on the embed player.
              example: true
              type: boolean
            use_color:
              description: >-
                Whether the embed player should use (`true`) or ignore (`false`)
                the **embed.color** value.
              example: true
              type: boolean
          type: object
        interaction_tools_settings:
          description: The settings for the interaction tools.
          properties:
            is_anonymous_questions_disabled:
              description: >-
                Whether anonymous questions are disabled for the interaction
                tools settings.
              example: true
              type: boolean
            is_qna_moderated:
              description: Whether the Q&A is moderated for the interaction tools settings.
              example: true
              type: boolean
          type: object
        playlist_sort:
          description: >
            The order in which the videos of the event appear within the event's
            playlist.


            Option descriptions:
             * `added_first` - The most recently added videos appear first.
             * `added_last` - The most recently added videos appear last.
             * `alphabetical` - The videos appear in alphabetical order.
             * `arranged` - The videos appear in the order in which the user has arranged them.
             * `comments` - The videos appear in order of number of comments.
             * `duration` - The videos appear in order of duration.
             * `likes` - The videos appear in order of number of likes.
             * `newest` - The newest videos appear first.
             * `oldest` - The oldest videos appear first.
             * `plays` - The videos appear in order of number of plays.
          enum:
            - added_first
            - added_last
            - alphabetical
            - arranged
            - comments
            - duration
            - likes
            - newest
            - oldest
            - plays
          example: added_first
          type: string
        schedule:
          description: >-
            Information about the time or times that the event is expected to be
            live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the event is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`.
              example: 14:00:00Z
              type: string
            type:
              description: |
                How often the event is expected to be live.

                Option descriptions:
                 * `single` - The event is live one time only.
                 * `weekly` - The event is live on a weekly basis.
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the event is expected to
                be live. Weekdays can range from 1 to 7, where 1 is Monday and 7
                is Sunday. This parameter is required when **schedule.type** is
                `weekly`.
              items:
                type: string
              type: array
          type: object
        scheduled_playback:
          description: Whether the scheduled playback feature is enabled.
          example: false
          type: boolean
        stream_description:
          description: The description of the next video to be streamed to the event.
          example: In this episode, we interview a surprise guest
          type: string
        stream_embed:
          properties:
            embed:
              description: |
                The embed permission level for the event.

                Option descriptions:
                 * `private` - Only the user can embed the event.
                 * `public` - Anyone can embed the event.
                 * `whitelist` - Only those on the whitelist can embed the event.
              enum:
                - private
                - public
                - whitelist
              example: public
              type: string
          type: object
        stream_mode:
          description: |
            The stream mode of the event.

            Option descriptions:
             * `live` - The stream is live playback.
             * `record` - The stream is in record mode.
             * `simulive` - The stream is scheduled media playback.
          enum:
            - live
            - record
            - simulive
          example: live
          type: string
        stream_password:
          description: >-
            The password when **stream_privacy.view** is `password`. Anyone with
            the password can view the videos generated by streaming to the
            event.
          example: hunter1
          type: string
        stream_privacy:
          description: The privacy settings of the event.
          properties:
            view:
              description: >
                The initial privacy of the videos generated by streaming to the
                event as well as the embed privacy of the entire collection.


                Option descriptions:
                 * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.
                 * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.
                 * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `unlisted` - Only those with the private link can access the event.
              enum:
                - anybody
                - embed_only
                - nobody
                - password
                - unlisted
              example: anybody
              type: string
          type: object
        stream_title:
          description: >-
            The title of the next video to be streamed to the event. This
            parameter is required when **automatically_title_stream** is
            `false`.
          example: Special Feature
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            automatically generated video titles.
          example: America/New_York
          type: string
    LiveEventActivationCreateRtmpLinksRequest2:
      type: object
      properties:
        cloud_composing_streaming:
          description: >-
            Whether the stream activates from the cloud composer. _This field is
            deprecated._
          example: true
          type: boolean
        streaming_start_requested:
          description: Whether the stream activates from the cloud composer.
          example: true
          type: boolean
    LiveEventAutomatedClosedCaptionsEditPreferenceForEventRequest1:
      type: object
      properties:
        auto_cc_enabled:
          description: Whether automated closed captions are enabled for the event.
          example: true
          type: boolean
        auto_cc_keywords:
          description: >-
            A comma-separated list of keywords that improve the quality of the
            automated closed captions.
          example: commonly-used words,phrases,technical terms
          type: string
        auto_cc_lang:
          description: |
            The language in which the automated closed captions appear.

            Option descriptions:
             * `de-DE` - The language is German.
             * `en-US` - The language is English.
             * `es-ES` - The language is Spanish.
             * `fr-FR` - The language is French.
             * `pt-BR` - The language is Portuguese.
          enum:
            - de-DE
            - en-US
            - es-ES
            - fr-FR
            - pt-BR
          example: en-US
          type: string
      required:
        - auto_cc_enabled
    LiveEventDestinationsCreateEventDestinationRequest:
      type: object
      properties:
        display_name:
          description: The title to display for the simulcast.
          example: My channel
          type: string
        is_enabled:
          description: Whether the destination is enabled for simulcasting.
          example: true
          type: boolean
        privacy:
          description: >
            The privacy setting of the destination. Be sure to choose a value
            that corresponds to your service.


            Option descriptions:
             * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.
             * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.
             * `all_friends` - The privacy setting is `all_friends` for Facebook.
             * `everyone` - The privacy setting is `everyone` for Facebook.
             * `private` - The privacy setting is `private` for YouTube.
             * `public` - The privacy setting is `public` for YouTube.
             * `self` - The privacy setting is `self` for Facebook.
             * `unlisted` - The privacy setting is `unlisted` for YouTube.
          enum:
            - CONNECTIONS
            - PUBLIC
            - all_friends
            - everyone
            - private
            - public
            - self
            - unlisted
          example: public
          type: string
        provider_destination_id:
          description: >-
            The ID of the destination on the specified service, such as the
            YouTube channel ID or the Facebook page ID.
          example: bda55c6b3ba4
          type: string
        provider_video_id:
          description: The ID of the scheduled video.
          example: '6817807391346708000'
          nullable: true
          type: string
        scheduled_at:
          description: >-
            The time in Unix timestamp format when live streaming is scheduled
            to start.
          example: 1625754461
          type: number
        service_name:
          description: |
            The service to simulcast to.

            Option descriptions:
             * `custom_rtmp` - Simulcast to a custom service.
             * `facebook` - Simulcast to Facebook Live.
             * `linkedin` - Simulcast to LinkedIn Live.
             * `youtube` - Simulcast to YouTube Live.
          enum:
            - custom_rtmp
            - facebook
            - linkedin
            - youtube
          example: youtube
          type: string
        stream_key:
          description: The RTMP stream key.
          example: da056692-ba63-4749-a6eb-a476a22b3acd
          type: string
        stream_url:
          description: The RTMP URL for receiving the video stream.
          example: rtmp://mycooldomain.com/live
          type: string
        type:
          description: |
            The type of the simulcast destination.

            Option descriptions:
             * `channel` - The destination is a YouTube channel.
             * `custom` - The destination is custom.
             * `organization` - The destination is a LinkedIn organization.
             * `page` - The destination is a Facebook page.
             * `profile` - The destination is a Facebook or LinkedIn profile.
          enum:
            - channel
            - custom
            - organization
            - page
            - profile
          example: channel
          type: string
      required:
        - display_name
        - service_name
        - type
    LiveEventLowLatencyToggleOptionRequest2:
      type: object
      properties:
        low_latency:
          description: Whether the event is low latency.
          type: boolean
    LiveEventThumbnailsCreateThumbnailForEventRequest1:
      type: object
      properties:
        active:
          description: Whether the thumbnail is the event's active thumbnail.
          example: true
          type: boolean
    LiveEventThumbnailsEditEventThumbnailRequest:
      type: object
      properties:
        active:
          description: Whether the thumbnail is the event's active thumbnail.
          example: true
          type: boolean
    LiveEmbedPrivacyEmbedEventOnDomainsRequest2:
      type: object
      properties:
        allowed_domains:
          description: An array of the domains on which the embedded event can appear.
          items:
            type: string
          type: array
    LiveEventVideosRemoveMultipleRequest1:
      type: object
      properties:
        videos:
          description: An array of video objects.
          items:
            type: object
            properties:
              video:
                properties:
                  uri:
                    description: The URI of a video to remove.
                    example: /videos/258684937
                    type: string
                type: object
          type: array
    LiveEventVideosAddMultipleVideosRequest:
      type: object
      properties:
        videos:
          description: An array of video objects.
          items:
            type: object
            properties:
              video:
                properties:
                  uri:
                    description: The URI of a video to add.
                    example: /videos/258684937
                    type: string
                type: object
          type: array
    CreateVodRequest:
      type: object
      properties:
        description:
          description: The description of the On Demand page.
          example: >-
            DARBY FOREVER follows the fantasies of Darby, a shopgirl at "Bobbins
            & Notions".
          type: string
        accepted_currencies:
          description: |
            An array of accepted currencies.

            Option descriptions:
             * `AUD` - The currency is in Australian dollars.
             * `CAD` - The currency is in Canadian dollars.
             * `CHF` - The currency is in Swiss francs.
             * `DKK` - The currency is in Danish krone.
             * `EUR` - The currency is in euros.
             * `GBP` - The currency is in British pounds.
             * `JPY` - The currency is in Japanese yen.
             * `KRW` - The currency is in South Korean won.
             * `NOK` - The currency is in Norwegian krone.
             * `PLN` - The currency is in Polish zloty.
             * `SEK` - The currency is in Swedish krona.
             * `USD` - The currency is in United States dollars.
          enum:
            - AUD
            - CAD
            - CHF
            - DKK
            - EUR
            - GBP
            - JPY
            - KRW
            - NOK
            - PLN
            - SEK
            - USD
          type: string
        buy:
          properties:
            active:
              description: >-
                Whether the video can be purchased. This parameter is required
                when **rent.active** is `false`.
              example: true
              type: boolean
            download:
              description: >-
                Whether people who buy the video can download it. To use this
                parameter, **type** must be `film`.
              example: true
              type: boolean
            price:
              properties:
                AUD:
                  description: The purchase price of the video in Australian dollars.
                  example: 2.99
                  type: number
                CAD:
                  description: The purchase price of the video in Canadian dollars.
                  example: 2.99
                  type: number
                CHF:
                  description: The purchase price of the video in Swiss francs.
                  example: 2.99
                  type: number
                DKK:
                  description: The purchase price of the video in Danish krone.
                  example: 2.99
                  type: number
                EUR:
                  description: The purchase price of the video in euros.
                  example: 2.99
                  type: number
                GBP:
                  description: The purchase price of the video in British pounds.
                  example: 2.99
                  type: number
                JPY:
                  description: The purchase price of the video in Japanese yen.
                  example: 2.99
                  type: number
                KRW:
                  description: The purchase price of the video in South Korean won.
                  example: 2.99
                  type: number
                NOK:
                  description: The purchase price of the video in Norwegian krone.
                  example: 2.99
                  type: number
                PLN:
                  description: The purchase price of the video in Polish zloty.
                  example: 2.99
                  type: number
                SEK:
                  description: The purchase price of the video in Swedish krona.
                  example: 2.99
                  type: number
                USD:
                  description: >-
                    When **type** is `film`, the purchase price of the video in
                    United States dollars. When **type** is `series`, the
                    purchase price of the entire collection in United States
                    dollars.
                  example: 2.99
                  type: number
              type: object
          type: object
        content_rating:
          description: >
            The content rating of the video, given either as a comma-separated
            list or as a JSON array, depending on the request format.


            Option descriptions:
             * `drugs` - The video contains drug or alcohol use.
             * `language` - The video contains profanity or sexually suggestive content.
             * `nudity` - The video contains nudity.
             * `safe` - The video is suitable for all audiences.
             * `unrated` - The video hasn't been rated.
             * `violence` - The video contains violent or graphic content.
          enum:
            - drugs
            - language
            - nudity
            - safe
            - unrated
            - violence
          type: string
        domain_link:
          description: The custom domain of the On Demand page.
          example: https://example.com
          type: string
        episodes:
          properties:
            buy:
              properties:
                active:
                  description: Whether episodes can be purchased.
                  example: true
                  type: boolean
                download:
                  description: >-
                    Whether people who buy episodes can download them. To use
                    this parameter, **type** must be `series`.
                  example: true
                  type: boolean
                price:
                  properties:
                    USD:
                      description: >-
                        The purchase price per episode in United States dollars.
                        This parameter is required when **episodes.buy.active**
                        is `true`.
                      example: 1.99
                      type: number
                  type: object
              type: object
            rent:
              properties:
                active:
                  description: Whether episodes can be rented.
                  example: true
                  type: boolean
                period:
                  description: |
                    The rental period of the episode.

                    Option descriptions:
                     * `1 week` - The episode can be rented for a maximum of 1 week.
                     * `1 year` - The episode can be rented for a maximum of 1 year.
                     * `24 hour` - The episode can be rented for a maximum of 24 hours.
                     * `3 month` - The episode can be rented for a maximum of 3 months.
                     * `30 day` - The episode can be rented for a maximum of 30 days.
                     * `48 hour` - The episode can be rented for a maximum of 48 hours.
                     * `6 month` - The episode can be rented for a maximum of 6 months.
                     * `72 hour` - The episode can be rented for a maximum of 72 hours.
                  enum:
                    - 1 week
                    - 1 year
                    - 24 hour
                    - 3 month
                    - 30 day
                    - 48 hour
                    - 6 month
                    - 72 hour
                  type: string
                price:
                  properties:
                    USD:
                      description: >-
                        The rental price per episode in United States dollars.
                        This parameter is applicable only when **type** is
                        `series`, and it's required when **episode.rent.active**
                        is `true`.
                      example: 0.99
                      type: number
                  type: object
              type: object
          type: object
        link:
          description: The custom string to use in the Vimeo URL of the On Demand page.
          example: darbyforever
          type: string
        name:
          description: The name of the On Demand page.
          example: Darby Forever
          type: string
        rent:
          properties:
            active:
              description: >-
                Whether the video can be rented. This parameter is required when
                **episodes.rent.active** is `true`.
              example: true
              type: boolean
            period:
              description: |
                The rental period of the video.

                Option descriptions:
                 * `1 week` - The video can be rented for a maximum of 1 week.
                 * `1 year` - The video can be rented for a maximum of 1 year.
                 * `24 hour` - The video can be rented for a maximum of 24 hours.
                 * `3 month` - The video can be rented for a maximum of 3 months.
                 * `30 day` - The video can be rented for a maximum of 30 days.
                 * `48 hour` - The video can be rented for a maximum of 48 hours.
                 * `6 month` - The video can be rented for a maximum of 6 months.
                 * `72 hour` - The video can be rented for a maximum of 72 hours.
              enum:
                - 1 week
                - 1 year
                - 24 hour
                - 3 month
                - 30 day
                - 48 hour
                - 6 month
                - 72 hour
              type: string
            price:
              properties:
                AUD:
                  description: The rental price of the video in Australian dollars.
                  example: 0.99
                  type: number
                CAD:
                  description: The rental price of the video in Canadian dollars.
                  example: 0.99
                  type: number
                CHF:
                  description: The rental price of the video in Swiss francs.
                  example: 0.99
                  type: number
                DKK:
                  description: The rental price of the video in Danish krone.
                  example: 0.99
                  type: number
                EUR:
                  description: The rental price of the video in euros.
                  example: 0.99
                  type: number
                GBP:
                  description: The rental price of the video in British pounds.
                  example: 0.99
                  type: number
                JPY:
                  description: The rental price of the video in Japanese yen.
                  example: 0.99
                  type: number
                KRW:
                  description: The rental price of the video in South Korean won.
                  example: 0.99
                  type: number
                NOK:
                  description: The rental price of the video in Norwegian krone.
                  example: 0.99
                  type: number
                PLN:
                  description: The rental price of the video in Polish zloty.
                  example: 0.99
                  type: number
                SEK:
                  description: The rental price of the video in Swedish krona.
                  example: 0.99
                  type: number
                USD:
                  description: >-
                    When **type** is `film`, the rental price of the video in
                    United States dollars. When **type** is `series`, the rental
                    price of the entire collection in United States dollars.
                  example: 0.99
                  type: number
              type: object
          type: object
        subscription:
          properties:
            monthly:
              properties:
                active:
                  description: >-
                    Whether a monthly subscription is active. This parameter is
                    required when **rent.active** and **buy.active** are
                    `false`.
                  example: true
                  type: boolean
                price:
                  properties:
                    USD:
                      description: >-
                        The monthly subscription price in United States dollars.
                        This parameter is required when **rent.active** and
                        **buy.active** are `false`.
                      example: 9.99
                      type: number
                  type: object
              type: object
          type: object
        type:
          description: |
            The type of the On Demand page.

            Option descriptions:
             * `film` - The On Demand page is a film.
             * `series` - The On Demand page is a series.
          enum:
            - film
            - series
          type: string
      required:
        - content_rating
        - description
        - name
        - type
    EditPictureRequest:
      type: object
      properties:
        active:
          description: Whether the picture is the authenticated user's active portrait.
          example: true
          type: boolean
    EmbedPresetsEssentialsCreateEmbedPresetRequest:
      type: object
      properties:
        embed:
          properties:
            title:
              properties:
                name:
                  description: >
                    How to handle the video title in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the video title.
                     * `show` - Show the video title.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                owner:
                  description: >
                    How to handle the owner information in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the owner info.
                     * `show` - Show the owner info.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                portrait:
                  description: >
                    How to handle the owner portrait in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the portrait.
                     * `show` - Show the portrait.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
              type: object
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            audio_tracks:
              description: >-
                Whether multiple audio tracks can appear in the embeddable
                player.
              example: true
              type: boolean
            buttons:
              properties:
                embed:
                  description: Whether to show the `embed` button on the embeddable player.
                  example: true
                  type: boolean
                fullscreen:
                  description: >-
                    Whether to show the `fullscreen` button on the embeddable
                    player.
                  example: true
                  type: boolean
                hd:
                  description: Whether to show the `HD` button on the embeddable player.
                  example: true
                  type: boolean
                like:
                  description: Whether to show the `like` button on the embeddable player.
                  example: true
                  type: boolean
                scaling:
                  description: >-
                    Whether to show the `scaling` button on the embeddable
                    player in fullscreen mode.
                  example: true
                  type: boolean
                share:
                  description: Whether to show the `share` button on the embeddable player.
                  example: true
                  type: boolean
                watchlater:
                  description: >-
                    Whether to show the `watch later` button on the embeddable
                    player.
                  example: true
                  type: boolean
              type: object
            chapters:
              description: Whether chapters are enabled in the embeddable player.
              example: true
              type: boolean
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: The main color of the embeddable player.
              example: '#1ab7ea'
              type: string
            colors:
              properties:
                color_four:
                  description: >-
                    The hexadecimal color code of the fourth player color, which
                    controls the player background color.
                  example: '#aabbcc'
                  type: string
                color_one:
                  description: >-
                    The hexadecimal color code of the first player color, which
                    controls the color of the progress bar, buttons, and more.
                  example: '#112233'
                  type: string
                color_three:
                  description: >-
                    The hexadecimal color code of the third player color, which
                    controls the color of text and icons.
                  example: '#778899'
                  type: string
                color_two:
                  description: >-
                    The hexadecimal color code of the second player color, which
                    controls the player accent color.
                  example: '#445566'
                  type: string
              type: object
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: >-
                        Whether to show the active custom logo on the embeddable
                        player.
                      example: true
                      type: boolean
                    id:
                      description: >-
                        The ID of the custom logo that appears on the embeddable
                        player.
                      example: 462119
                      nullable: true
                      type: number
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      nullable: true
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo is always visible on the
                        embeddable player (`true`) or whether the logo appears
                        and disappears with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embeddable player.
                  example: true
                  type: boolean
              type: object
            play_button:
              description: An object representing the play button's settings.
              properties:
                position:
                  description: >
                    The position of the play button within the embeddable
                    player.


                    Option descriptions:
                     * `auto` - Use Vimeo's default positioning for the play button.
                     * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.
                     * `center` - The play button is positioned in the center of the player.
                  enum:
                    - auto
                    - bottom
                    - center
                  type: string
              type: object
            playbar:
              description: Whether to show the playbar on the embeddable player.
              example: true
              type: boolean
            quality_selector:
              description: Whether to show the quality selector in the embeddable player.
              example: true
              type: boolean
            transcript:
              description: Whether the transcript controls appear in the embeddable player.
              example: true
              type: boolean
            volume:
              description: Whether to show the volume selector on the embeddable player.
              example: true
              type: boolean
          type: object
        name:
          description: The name of the embed preset.
          example: New preset
          type: string
    EmbedPresetsEssentialsEditPresetRequest1:
      type: object
      properties:
        outro:
          description: |
            What to do with the outro.

            Option descriptions:
             * `nothing` - Disable the outro.
          enum:
            - nothing
          type: string
    CreateProjectRequest:
      type: object
      properties:
        name:
          description: The name of the folder.
          example: Rough cuts
          type: string
        parent_folder_uri:
          description: The URI of the parent folder.
          example: /users/12345/projects/6789
          type: string
      required:
        - name
    EditProjectRequest:
      type: object
      properties:
        name:
          description: The name of the folder.
          example: Rough cuts
          type: string
      required:
        - name
    UploadVideoRequest:
      type: object
      properties:
        description:
          description: The description of the video.
          example: A celebration of 10 years of Staff Picks.
          type: string
        content_rating:
          description: >-
            A list of values describing the content in this video. For a full
            list of values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        embed:
          properties:
            title:
              properties:
                name:
                  description: >
                    How to handle the video title in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the video title.
                     * `show` - Show the video title.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                owner:
                  description: >
                    How to handle the owner information in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the owner info.
                     * `show` - Show the owner info.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                portrait:
                  description: >
                    How to handle the owner portrait in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the portrait.
                     * `show` - Show the portrait.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
              type: object
            buttons:
              properties:
                embed:
                  description: Whether to show the `embed` button on the embeddable player.
                  example: true
                  type: boolean
                fullscreen:
                  description: >-
                    Whether to show the `fullscreen` button on the embeddable
                    player.
                  example: true
                  type: boolean
                hd:
                  description: Whether to show the `HD` button on the embeddable player.
                  example: true
                  type: boolean
                like:
                  description: Whether to show the `like` button on the embeddable player.
                  example: true
                  type: boolean
                scaling:
                  description: >-
                    Whether to show the `scaling` button on the embeddable
                    player in fullscreen mode.
                  example: true
                  type: boolean
                share:
                  description: Whether to show the `share` button on the embeddable player.
                  example: true
                  type: boolean
                watchlater:
                  description: >-
                    Whether to show the `watch later` button on the embeddable
                    player.
                  example: true
                  type: boolean
              type: object
            color:
              description: The main color of the embeddable player.
              example: '#1ab7ea'
              type: string
            end_screen:
              properties:
                type:
                  description: |
                    The end screen type.

                    Option descriptions:
                     * `empty` - The end screen is empty.
                     * `loop` - The end screen loops the video playback.
                     * `share` - The end screen includes sharing options.
                     * `thumbnail` - The end screen includes the thumbnail of the video.
                  enum:
                    - empty
                    - loop
                    - share
                    - thumbnail
                  type: string
              type: object
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: >-
                        Whether to show the active custom logo on the embeddable
                        player.
                      example: true
                      type: boolean
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo is always visible on the
                        embeddable player (`true`) or whether the logo appears
                        and disappears with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embeddable player.
                  example: true
                  type: boolean
              type: object
            playbar:
              description: Whether to show the playbar on the embeddable player.
              example: true
              type: boolean
            volume:
              description: Whether to show the volume selector on the embeddable player.
              example: true
              type: boolean
          type: object
        embed_domains:
          description: >-
            The complete list of domains the video can be embedded on. This
            field requires that **privacy_embed** have the value `whitelist`.
          items:
            type: string
          type: array
        folder_uri:
          description: The URI of the folder to which the video is uploaded.
          example: /users/12345/folders/6789
          type: string
        hide_from_vimeo:
          description: >-
            Whether to hide the video from everyone except the video's owner.
            When the value is `true`, unlisted video links work only for the
            video's owner.
          example: false
          type: boolean
        license:
          description: |
            The Creative Commons license under which the video is offered.

            Option descriptions:
             * `by` - The video is offered under CC BY, or the attibution-only license.
             * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.
             * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.
             * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.
             * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.
             * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.
             * `cc0` - The video is offered under CC0, or the public domain license.
          enum:
            - by
            - by-nc
            - by-nc-nd
            - by-nc-sa
            - by-nd
            - by-sa
            - cc0
          type: string
        locale:
          description: >-
            The video's default language. For a full list of supported
            languages, use the
            [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages)
            endpoint.
          example: en_US
          type: string
        name:
          description: The title of the video.
          example: Celebrating 10 Years of Staff Picks
          type: string
        password:
          description: >-
            The password. This field is required when **privacy.view** is
            `password`.
          example: hunter1
          type: string
        privacy:
          properties:
            add:
              description: >-
                Whether a user can add the video to a showcase, channel, or
                group.
              example: true
              type: boolean
            comments:
              description: |
                The privacy level required to comment on the video.

                Option descriptions:
                 * `anybody` - Anyone can comment on the video.
                 * `contacts` - Only the video owner's contacts can comment on the video.
                 * `nobody` - No one can comment on the video.
              enum:
                - anybody
                - contacts
                - nobody
              type: string
            download:
              description: >-
                Whether a user can download the video. This field isn't
                available to Vimeo Free members.
              example: true
              type: boolean
            embed:
              description: >
                The video's embed setting. Specify the `whitelist` value to
                restrict embedding to a specific set of domains. For more
                information, see our [Interacting with
                Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy)
                guide.


                Option descriptions:
                 * `private` - The video can't be embedded.
                 * `public` - The video can be embedded.
                 * `whitelist` - The video can be embedded on the specified domains only.
              enum:
                - private
                - public
                - whitelist
              type: string
            view:
              description: >
                The video's privacy setting. When this value is `users`,
                `application/json` is the only valid content type. Also, some
                privacy settings are unavailable to Vimeo Free members; for more
                information, see our [Help
                Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).


                Option descriptions:
                 * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.
                 * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._
                 * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end. _This field is deprecated._
                 * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the video.
                 * `unlisted` - Only those with the private link can access the video.
                 * `users` - Only Vimeo members can access the video. _This field is deprecated._
              enum:
                - anybody
                - contacts
                - disable
                - nobody
                - password
                - unlisted
                - users
              type: string
          type: object
        review_page:
          properties:
            active:
              description: Whether to enable video review.
              example: true
              type: boolean
          type: object
        spatial:
          properties:
            director_timeline:
              description: An array representing the 360 director timeline.
              items:
                type: object
                properties:
                  pitch:
                    description: >-
                      The 360 director timeline pitch. This value must be
                      between `−90` and `90`, and it's required only when
                      **spatial.director_timeline** is defined.
                    example: 70
                    type: number
                  roll:
                    description: The 360 director timeline roll.
                    type: number
                  time_code:
                    description: >-
                      The 360 director timeline time code. This field is
                      required only when **spatial.director_timeline** is
                      defined.
                    example: 5
                    type: number
                  yaw:
                    description: >-
                      The 360 director timeline yaw. This value must be between
                      `0` and `360`, and it's required only when
                      **spatial.director_timeline** is defined.
                    example: 125
                    type: number
                required:
                  - pitch
                  - time_code
                  - yaw
              type: array
            field_of_view:
              description: >-
                The 360 field of view. This value must be between `30` and `90`;
                the default value is `50`.
              example: 50
              type: number
            projection:
              description: |
                The 360 spatial projection.

                Option descriptions:
                 * `cubical` - Use cubical projection.
                 * `cylindrical` - Use cylindrical projection.
                 * `dome` - Use dome projection.
                 * `equirectangular` - Use equirectangular projection.
                 * `pyramid` - Use pyramid projection.
              enum:
                - cubical
                - cylindrical
                - dome
                - equirectangular
                - pyramid
              type: string
            stereo_format:
              description: |
                The 360 spatial stereo format.

                Option descriptions:
                 * `left-right` - Use left-right stereo.
                 * `mono` - Use monaural audio.
                 * `top-bottom` - Use top-bottom stereo.
              enum:
                - left-right
                - mono
                - top-bottom
              type: string
          type: object
        upload:
          properties:
            approach:
              description: |
                The upload approach.

                Option descriptions:
                 * `post` - Use the `post` approach.
                 * `pull` - Use the `pull` approach.
                 * `tus` - Use the `tus` approach.
              enum:
                - post
                - pull
                - tus
              type: string
            link:
              description: >-
                The public URL at which the video is hosted. The URL must be
                valid for at least 24 hours. Use this parameter when
                **approach** is `pull`.
              example: https://example.com/video.mp4
              type: string
            redirect_url:
              description: >-
                The app's redirect URL. Use this parameter when **approach** is
                `post`.
              example: https://example.com
              type: string
            size:
              description: >-
                The size in bytes of the video to upload. The maximum value of
                this field is `268435456000`, which corresponds to 250 GB.
              example: '13623861'
              type: string
          required:
            - approach
          type: object
      required:
        - upload
    LiveEventDestinationsCreateOneTimeLiveEventDestinationRequest1:
      type: object
      properties:
        display_name:
          description: The title to display for the simulcast.
          example: My channel
          type: string
        is_enabled:
          description: Whether the destination is enabled for simulcasting.
          example: true
          type: boolean
        privacy:
          description: >
            The privacy setting of the destination. Be sure to choose a value
            that corresponds to your service.


            Option descriptions:
             * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.
             * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.
             * `all_friends` - The privacy setting is `all_friends` for Facebook.
             * `everyone` - The privacy setting is `everyone` for Facebook.
             * `private` - The privacy setting is `private` for YouTube.
             * `public` - The privacy setting is `public` for YouTube.
             * `self` - The privacy setting is `self` for Facebook.
             * `unlisted` - The privacy setting is `unlisted` for YouTube.
          enum:
            - CONNECTIONS
            - PUBLIC
            - all_friends
            - everyone
            - private
            - public
            - self
            - unlisted
          example: public
          type: string
        provider_destination_id:
          description: >-
            The ID of the destination on the specified service, such as the
            YouTube channel ID or the Facebook page ID.
          example: bda55c6b3ba4
          type: string
        provider_video_id:
          description: The ID of the scheduled video.
          example: '6817807391346708000'
          nullable: true
          type: string
        scheduled_at:
          description: >-
            The time in Unix timestamp format when live streaming is scheduled
            to start.
          example: 1625754461
          type: number
        service_name:
          description: |
            The service to simulcast to.

            Option descriptions:
             * `custom_rtmp` - Simulcast to a custom service.
             * `facebook` - Simulcast to Facebook Live.
             * `linkedin` - Simulcast to LinkedIn Live.
             * `youtube` - Simulcast to YouTube Live.
          enum:
            - custom_rtmp
            - facebook
            - linkedin
            - youtube
          example: youtube
          type: string
        stream_key:
          description: The RTMP stream key.
          example: da056692-ba63-4749-a6eb-a476a22b3acd
          type: string
        stream_url:
          description: The RTMP URL for receiving the video stream.
          example: rtmp://mycooldomain.com/live
          type: string
        type:
          description: |
            The type of the simulcast destination.

            Option descriptions:
             * `channel` - The destination is a YouTube channel.
             * `custom` - The destination is custom.
             * `organization` - The destination is a LinkedIn organization.
             * `page` - The destination is a Facebook page.
             * `profile` - The destination is a Facebook or LinkedIn profile.
          enum:
            - channel
            - custom
            - organization
            - page
            - profile
          example: channel
          type: string
      required:
        - display_name
        - service_name
        - type
    CreateWebinarRequest:
      type: object
      properties:
        title:
          description: The title of the webinar.
          example: Interviews Daily
          type: string
        description:
          description: The description of the webinar.
          example: In this episode, we interview a surprise guest
          type: string
        email_settings:
          description: >-
            The settings for emails that are sent about the webinar. _This field
            is deprecated._
          properties:
            accent_color:
              description: >-
                The accent color scheme for emails that are sent about the
                webinar. _This field is deprecated._
              example: '#000fff'
              type: string
            custom_link:
              description: >-
                The custom link for emails that are sent about the webinar.
                _This field is deprecated._
              example: https://xyz.com
              type: string
            email_preferences:
              description: >-
                The preferences for emails that are sent about the webinar.
                _This field is deprecated._
              properties:
                email_event_reminder_15_min:
                  description: >-
                    Whether to send a reminder email 15 minutes before the
                    webinar starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_1_hrs:
                  description: >-
                    Whether to send a reminder email 1 hour before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_24_hrs:
                  description: >-
                    Whether to send a reminder email 24 hours before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_post_event_no_show_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails to no-shows.
                    _This field is deprecated._
                  type: boolean
                email_post_event_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails. _This field is
                    deprecated._
                  type: boolean
                email_registration_confirmation:
                  description: >-
                    Whether to send a registration confirmation email after
                    webinar registration. _This field is deprecated._
                  type: boolean
              type: object
            from:
              description: >-
                The name of the sender for emails that are sent about the
                webinar. _This field is deprecated._
              example: Vimeo
              type: string
            logo_uri:
              description: >-
                The URI of the logo image to include in emails that are sent
                about the webinar. _This field is deprecated._
              example: /users/123/team_logos_2343
              type: string
            reply_email:
              description: The sender's reply email address. _This field is deprecated._
              example: test@vimeo.com
              type: string
            sender_address:
              description: The sender's physical address. _This field is deprecated._
              example: Bangalore, India
              type: string
            sender_policy_url:
              description: >-
                The URL of the sender's privacy policy. _This field is
                deprecated._
              example: vimeo.com/policy
              type: string
            use_custom_link:
              description: >-
                Whether to include a custom link in emails that are sent about
                the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_reply_email:
              description: >-
                Whether to include a reply link in the footer of emails that are
                sent about the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_sender_address:
              description: >-
                Whether to include the sender's physical address in the footer
                of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
            use_sender_policy_url:
              description: >-
                Whether to include the URL of the sender's privacy policy in the
                footer of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
          type: object
        folder_uri:
          description: The URI of the webinar's folder.
          example: 0
          type: number
        password:
          description: >-
            The password when **privacy.view** is `password`. Anyone with the
            password can view the videos generated by streaming to the webinar
            event.
          example: gogo
          type: string
        privacy:
          description: The privacy settings of the webinar.
          properties:
            embed:
              description: |
                The initial embed privacy of the webinar.

                Option descriptions:
                 * `private` - The webinar can't be embedded on any domain.
                 * `public` - The webinar can be embedded on any domain.
                 * `whitelist` - The webinar can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: private
              type: string
            view:
              description: |
                The initial privacy of the webinar.

                Option descriptions:
                 * `anybody` - Anyone can access the webinar. This privacy setting appears as `Public` on the Vimeo front end.
                 * `nobody` - No one except the owner can access the webinar. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the event.
                 * `team` - Only members of the authenticated user's team can access the webinar.
              enum:
                - anybody
                - nobody
                - password
                - team
              example: anybody
              type: string
          type: object
        schedule:
          description: >-
            Information about the time or times that the webinar is expected to
            be live.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`. _This field is deprecated._
              example: 14:00:00Z
              type: string
            end_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to end,
                with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2019-06-21T14:00:00+00:00'
              type: string
            start_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2018-06-21T14:00:00+00:00'
              type: string
            type:
              description: |
                How often the webinar is expected to be live.

                Option descriptions:
                 * `single` - The webinar is live one time only.
                 * `weekly` - The webinar is live on a weekly basis. _This field is deprecated._
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the webinar is expected
                to be live. Weekdays can range from 1 to 7, where 1 is Monday
                and 7 is Sunday. This parameter is required when
                **schedule.type** is `weekly`. _This field is deprecated._
              items:
                type: string
              type: array
          type: object
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            the automatically generated video titles for the webinar.
          example: America/New_York
          type: string
      required:
        - title
    UpdateWebinarRequest:
      type: object
      properties:
        title:
          description: The title of the webinar.
          example: Interviews Daily
          type: string
        description:
          description: The description of the webinar.
          example: In this episode, we interview a surprise guest
          type: string
        email_settings:
          description: >-
            The settings for emails that are sent about the webinar. _This field
            is deprecated._
          properties:
            accent_color:
              description: >-
                The accent color scheme for emails that are sent about the
                webinar. _This field is deprecated._
              example: '#000fff'
              type: string
            custom_link:
              description: >-
                The custom link for emails that are sent about the webinar.
                _This field is deprecated._
              example: https://xyz.com
              type: string
            email_preferences:
              description: >-
                The preferences for emails that are sent about the webinar.
                _This field is deprecated._
              properties:
                email_event_reminder_15_min:
                  description: >-
                    Whether to send a reminder email 15 minutes before the
                    webinar starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_1_hrs:
                  description: >-
                    Whether to send a reminder email 1 hour before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_event_reminder_24_hrs:
                  description: >-
                    Whether to send a reminder email 24 hours before the webinar
                    starts. _This field is deprecated._
                  type: boolean
                email_post_event_no_show_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails to no-shows.
                    _This field is deprecated._
                  type: boolean
                email_post_event_thank_you:
                  description: >-
                    Whether to send post-event thank-you emails. _This field is
                    deprecated._
                  type: boolean
                email_registration_confirmation:
                  description: >-
                    Whether to send a registration confirmation email after
                    webinar registration. _This field is deprecated._
                  type: boolean
              type: object
            from:
              description: >-
                The name of the sender for emails that are sent about the
                webinar. _This field is deprecated._
              example: Vimeo
              type: string
            logo_uri:
              description: >-
                The URI of the logo image to include in emails that are sent
                about the webinar. _This field is deprecated._
              example: /users/123/team_logos/2343
              type: string
            reply_email:
              description: The sender's reply email address. _This field is deprecated._
              example: test@vimeo.com
              type: string
            sender_address:
              description: The sender's physical address. _This field is deprecated._
              example: Bangalore, India
              type: string
            sender_policy_url:
              description: >-
                The URL of the sender's privacy policy. _This field is
                deprecated._
              example: vimeo.com/policy
              type: string
            use_custom_link:
              description: >-
                Whether to include a custom link in emails that are sent about
                the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_reply_email:
              description: >-
                Whether to include a reply link in the footer of emails that are
                sent about the webinar. _This field is deprecated._
              example: false
              type: boolean
            use_sender_address:
              description: >-
                Whether to include the sender's physical address in the footer
                of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
            use_sender_policy_url:
              description: >-
                Whether to include the URL of the sender's privacy policy in the
                footer of emails that are sent about the webinar. _This field is
                deprecated._
              example: false
              type: boolean
          type: object
        password:
          description: >-
            The password when **privacy.view** is `password`. Anyone with the
            password can view the videos generated by streaming to the webinar
            event.
          example: gogo
          type: string
        privacy:
          description: The privacy settings of the webinar.
          properties:
            embed:
              description: |
                The initial embed privacy of the webinar.

                Option descriptions:
                 * `private` - The webinar can't be embedded on any domain.
                 * `public` - The webinar can be embedded on any domain.
                 * `whitelist` - The webinar can be embedded on whitelisted domains only.
              enum:
                - private
                - public
                - whitelist
              example: private
              type: string
            view:
              description: >
                The initial privacy of the webinar. This can't be updated once
                the webinar is in session.


                Option descriptions:
                 * `anybody` - Anyone can access the webinar. This privacy setting appears as `Public` on the Vimeo front end.
                 * `nobody` - No one except the owner can access the webinar. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the live event.
                 * `team` - Only members of the authenticated user's team can access the webinar.
              enum:
                - anybody
                - nobody
                - password
                - team
              example: anybody
              type: string
          type: object
        schedule:
          description: >-
            Information about the time or times that the webinar is expected to
            be live. Please note that you can't update this setting once the
            webinar has started.
          properties:
            daily_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with the zero UTC offset `Z`. This parameter is required
                when **schedule.type** is `weekly`. _This field is deprecated._
              example: 14:00:00Z
              type: string
            end_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to end,
                with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2019-06-21T14:00:00+00:00'
              type: string
            start_time:
              description: >-
                The time in ISO 8601 format when the webinar is expected to be
                live, with support for different time offsets. This parameter is
                required when **schedule.type** is `single`.
              example: '2018-06-21T14:00:00+00:00'
              type: string
            type:
              description: |
                How often the webinar is expected to be live.

                Option descriptions:
                 * `single` - The webinar is live one time only.
                 * `weekly` - The webinar is live on a weekly basis. _This field is deprecated._
              enum:
                - single
                - weekly
              example: weekly
              type: string
            weekdays:
              description: >-
                A non-empty array of weekdays on which the webinar is expected
                to be live. Weekdays can range from 1 to 7, where 1 is Monday
                and 7 is Sunday. This parameter is required when
                **schedule.type** is `weekly`. _This field is deprecated._
              items:
                type: string
              type: array
          type: object
        status:
          description: |
            The status of the webinar.

            Option descriptions:
             * `ended` - The webinar has ended.
             * `started` - The webinar has started.
          enum:
            - ended
            - started
          example: started
          type: string
        time_zone:
          description: >-
            The time zone used in resolving the timestamps that are included in
            the automatically generated video titles for the webinar.
          example: America/New_York
          type: string
    WebinarEmailsCustomizePreferencesRequest1:
      type: object
      properties:
        accent_color:
          description: The accent color scheme for emails that are sent about the webinar.
          example: '#000fff'
          type: string
        custom_link:
          description: The custom link for emails that are sent about the webinar.
          example: https://xyz.com
          type: string
        email_event_reminder_24_hrs:
          description: >-
            The email customization details for the webinar reminder email,
            which goes out 24 hours before the event.
          type: object
        email_post_event_thank_you:
          description: >-
            The email customization details for the webinar post-event thank-you
            email.
          type: object
        email_preferences:
          description: The preferences for emails that are sent about the webinar.
          properties:
            email_event_reminder_15_min:
              description: >-
                Whether to send a reminder email 15 minutes before the webinar
                starts.
              type: boolean
            email_event_reminder_1_hrs:
              description: >-
                Whether to send a reminder email 1 hour before the webinar
                starts.
              type: boolean
            email_event_reminder_24_hrs:
              description: >-
                Whether to send a reminder email 24 hours before the webinar
                starts.
              type: boolean
            email_post_event_no_show_thank_you:
              description: Whether to send post-event thank-you emails to no-shows.
              type: boolean
            email_post_event_thank_you:
              description: Whether to send post-event thank-you emails.
              type: boolean
            email_registration_confirmation:
              description: >-
                Whether to send a registration confirmation email after webinar
                registration.
              type: boolean
          type: object
        email_registration_confirmation:
          description: >-
            The email customization details for the webinar registration
            confirmation email.
          type: object
        from:
          description: The name of the sender for emails that are sent about the webinar.
          example: Vimeo
          type: string
        logo_uri:
          description: >-
            The URI of the logo image to include in emails that are sent about
            the webinar.
          example: /users/123/team_logos_2343
          type: string
        reply_email:
          description: The sender's reply email address.
          example: test@vimeo.com
          type: string
        sender_address:
          description: The sender's physical address.
          example: Bangalore, India
          type: string
        sender_policy_url:
          description: The URL of the sender's privacy policy.
          example: vimeo.com/policy
          type: string
        use_custom_link:
          description: >-
            Whether to include a custom link in emails that are sent about the
            webinar.
          example: false
          type: boolean
        use_reply_email:
          description: >-
            Whether to include a reply link in the footer of emails that are
            sent about the webinar.
          example: false
          type: boolean
        use_sender_address:
          description: >-
            Whether to include the sender's physical address in the footer of
            emails that are sent about the webinar.
          example: false
          type: boolean
        use_sender_policy_url:
          description: >-
            Whether to include the URL of the sender's privacy policy in the
            footer of emails that are sent about the webinar.
          example: false
          type: boolean
    WebinarRegistrationsCaptureUserRegistrationListRequest1:
      type: object
      properties:
        registrants:
          description: An array of registration data for the webinar.
          items:
            type: object
            properties:
              data:
                description: The registrant's other submitted fields.
                type: object
              email:
                description: The registrant's email address.
                example: jane.doe@vimeo.com
                type: string
              first_name:
                description: The registrant's first name.
                example: Jane
                type: string
              last_name:
                description: The registrant's last name.
                example: Doe
                type: string
          type: array
    WebinarRegistrationsUpdateUserRegistrationDataRequest1:
      type: object
      properties:
        is_blocked:
          description: Whether to block the webinar registrant.
          example: true
          type: boolean
    EditVideoRequest:
      type: object
      properties:
        description:
          description: >-
            The description of the video. This field can hold a maximum of 5000
            characters.
          example: A celebration of 10 years of Staff Picks.
          type: string
        content_rating:
          description: >-
            A list of values describing the content in this video. For a full
            list of values, use the
            [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings)
            endpoint.
          items:
            type: string
          type: array
        custom_url:
          description: >-
            The custom link of the video. This link doesn't include the base URL
            and the username or user ID of the video's owner.
          example: puppies
          type: string
        embed:
          properties:
            title:
              properties:
                name:
                  description: >
                    How to handle the video title in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the video title.
                     * `show` - Show the video title.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                owner:
                  description: >
                    How to handle the owner information in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the owner info.
                     * `show` - Show the owner info.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
                portrait:
                  description: >
                    How to handle the owner portrait in the title bar of the
                    embeddable player.


                    Option descriptions:
                     * `hide` - Hide the portrait.
                     * `show` - Show the portrait.
                     * `user` - Enable the user to decide.
                  enum:
                    - hide
                    - show
                    - user
                  type: string
              type: object
            airplay:
              description: Whether AirPlay is enabled in the embeddable player.
              example: true
              type: boolean
            audio_tracks:
              description: >-
                Whether multiple audio tracks can appear in the embeddable
                player.
              example: true
              type: boolean
            buttons:
              properties:
                embed:
                  description: Whether to show the `embed` button on the embeddable player.
                  example: true
                  type: boolean
                fullscreen:
                  description: >-
                    Whether to show the `fullscreen` button on the embeddable
                    player.
                  example: true
                  type: boolean
                hd:
                  description: Whether to show the `HD` button on the embeddable player.
                  example: true
                  type: boolean
                like:
                  description: Whether to show the `like` button on the embeddable player.
                  example: true
                  type: boolean
                scaling:
                  description: >-
                    Whether to show the `scaling` button on the embeddable
                    player in fullscreen mode.
                  example: true
                  type: boolean
                share:
                  description: Whether to show the `share` button on the embeddable player.
                  example: true
                  type: boolean
                watchlater:
                  description: >-
                    Whether to show the `watch later` button on the embeddable
                    player.
                  example: true
                  type: boolean
              type: object
            cards:
              description: A collection of cards associated with the selected video.
              items:
                type: object
                properties:
                  display_time:
                    description: The number of seconds for which the card appears.
                    type: number
                  headline:
                    description: The title of the card.
                    type: string
                  id:
                    description: The UUID of the card.
                    type: string
                  image_url:
                    description: The URL of the thumbnail for the card.
                    type: string
                  teaser:
                    description: The description of the card.
                    type: string
                  timecode:
                    description: >-
                      The playback timestamp, given in seconds, when the card
                      appears.
                    type: number
                  url:
                    description: The URL of the card.
                    type: string
              type: array
            chapters:
              description: Whether chapters are enabled in the embeddable player.
              example: true
              type: boolean
            chromecast:
              description: Whether the Chromecast button appears in the embeddable player.
              example: true
              type: boolean
            closed_captions:
              description: Whether closed captions are enabled in the embeddable player.
              example: true
              type: boolean
            color:
              description: The main color of the embeddable player.
              example: '#1ab7ea'
              type: string
            end_screen:
              properties:
                type:
                  description: |
                    The end screen type.

                    Option descriptions:
                     * `empty` - The end screen is empty.
                     * `loop` - The end screen loops the video playback.
                     * `share` - The end screen includes sharing options.
                     * `thumbnail` - The end screen includes the thumbnail of the video.
                  enum:
                    - empty
                    - loop
                    - share
                    - thumbnail
                  type: string
              type: object
            logos:
              properties:
                custom:
                  properties:
                    active:
                      description: >-
                        Whether to show the active custom logo on the embeddable
                        player.
                      example: true
                      type: boolean
                    id:
                      description: >-
                        The ID of the custom logo that will show on the
                        emeddable player.
                      example: 462119
                      nullable: true
                      type: number
                    link:
                      description: The URL that loads when the user clicks the custom logo.
                      example: https://example.com
                      nullable: true
                      type: string
                    sticky:
                      description: >-
                        Whether the custom logo is always visible on the
                        embeddable player (`true`) or whether the logo appears
                        and disappears with the rest of the UI (`false`).
                      example: true
                      type: boolean
                  type: object
                vimeo:
                  description: Whether to show the Vimeo logo on the embeddable player.
                  example: true
                  type: boolean
              type: object
            play_button:
              description: An object representing the play button's settings.
              properties:
                position:
                  description: >
                    The position of the play button within the embeddable
                    player.


                    Option descriptions:
                     * `auto` - Use Vimeo's default positioning for the play button.
                     * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.
                     * `center` - The play button is positioned in the center of the player.
                  enum:
                    - auto
                    - bottom
                    - center
                  type: string
              type: object
            playbar:
              description: Whether to show the playbar on the embeddable player.
              example: true
              type: boolean
            quality_selector:
              description: Whether to show the quality selector in the embeddable player.
              example: true
              type: boolean
            transcript:
              description: Whether the transcript controls appear in the embeddable player.
              example: true
              type: boolean
            volume:
              description: Whether to show the volume selector on the embeddable player.
              example: true
              type: boolean
          type: object
        embed_domains:
          description: >-
            The complete list of domains the video can be embedded on. This
            field overwrites existing domains and requires that
            **privacy_embed** have the value `whitelist`.
          items:
            type: string
          type: array
        embed_domains_add:
          description: >-
            A list of domains intended to be added to an existing set of
            domains. This field requires that **privacy_embed** have the value
            `whitelist`.
          items:
            type: string
          type: array
        embed_domains_delete:
          description: >-
            A list of domains intended to be removed from an existing set of
            domains. This field requires that **privacy_embed** have the value
            `whitelist`.
          items:
            type: string
          type: array
        hide_from_vimeo:
          description: >-
            Whether to hide the video from everyone except the video's owner.
            When the value is `true`, unlisted video links work only for the
            video's owner.
          example: false
          type: boolean
        license:
          description: |
            The Creative Commons license under which the video is offered.

            Option descriptions:
             * `by` - The video is offered under CC BY, or the attibution-only license.
             * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.
             * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.
             * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.
             * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.
             * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.
             * `cc0` - The video is offered under CC0, or public domain, videos.
          enum:
            - by
            - by-nc
            - by-nc-nd
            - by-nc-sa
            - by-nd
            - by-sa
            - cc0
          type: string
        locale:
          description: >-
            The video's default language. For a full list of supported
            languages, use the
            [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages)
            endpoint.
          example: en-US
          type: string
        name:
          description: >-
            The title of the video. This field can hold a maximum of 128
            characters.
          example: Celebrating 10 Years of Staff Picks
          type: string
        password:
          description: >-
            The password. When you set **privacy.view** to `password`, you must
            provide the password as an additional parameter. This field can hold
            a maximum of 32 characters.
          example: hunter1
          type: string
        privacy:
          properties:
            add:
              description: >-
                Whether a user can add the video to a showcase, channel, or
                group.
              example: true
              type: boolean
            comments:
              description: |
                The privacy level required to comment on the video.

                Option descriptions:
                 * `anybody` - Anyone can comment on the video.
                 * `contacts` - Only the owner's contacts can comment on the video.
                 * `nobody` - No one can comment on the video.
              enum:
                - anybody
                - contacts
                - nobody
              type: string
            download:
              description: >-
                Whether a user can download the video. This field isn't
                available to Vimeo Free members.
              example: true
              type: boolean
            embed:
              description: >
                The video's embed setting. Specify the `whitelist` value to
                restrict embedding to a specific set of domains. For more
                information, see our [Interacting with
                Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy)
                guide.


                Option descriptions:
                 * `private` - The video can't be embedded.
                 * `public` - The video can be embedded.
                 * `whitelist` - The video can be embedded on the specified domains only.
              enum:
                - private
                - public
                - whitelist
              type: string
            view:
              description: >
                The video's privacy setting. When this value is `users`,
                `application/json` is the only valid content type. Also, some
                privacy settings are unavailable to Vimeo Free members; for more
                information, see our [Help
                Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).


                Option descriptions:
                 * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.
                 * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._
                 * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end. _This field is deprecated._
                 * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.
                 * `password` - Only those with the password can access the video.
                 * `unlisted` - Only those with the private link can access the video.
                 * `users` - Only Vimeo members can access the video. _This field is deprecated._
              enum:
                - anybody
                - contacts
                - disable
                - nobody
                - password
                - unlisted
                - users
              type: string
          type: object
        review_page:
          properties:
            active:
              description: Whether to enable video review.
              example: true
              type: boolean
          type: object
        spatial:
          properties:
            director_timeline:
              description: An array representing the 360 director timeline.
              items:
                type: object
                properties:
                  pitch:
                    description: >-
                      The 360 director timeline pitch. This value must be
                      between −90 and 90, and you must specify it only when
                      **spatial.director_timeline** is defined.
                    example: 70
                    type: number
                  roll:
                    description: The 360 director timeline roll.
                    type: number
                  time_code:
                    description: >-
                      The 360 director timeline time code. This paramater is
                      required only when **spatial.director_timeline** is
                      defined.
                    example: 5
                    type: number
                  yaw:
                    description: >-
                      The 360 director timeline yaw. This value must be between
                      0 and 360, and you must specify it only when
                      **spatial.director_timeline** is defined.
                    example: 125
                    type: number
                required:
                  - pitch
                  - time_code
                  - yaw
              type: array
            field_of_view:
              description: >-
                The 360 field of view. This value must be between 30 and 90. The
                default is 50.
              example: 50
              type: number
            projection:
              description: |
                The 360 spatial projection.

                Option descriptions:
                 * `cubical` - Use cubical projection.
                 * `cylindrical` - Use cylindrical projection.
                 * `dome` - Use dome projection.
                 * `equirectangular` - Use equirectangular projection.
                 * `pyramid` - Use pyramid projection.
              enum:
                - cubical
                - cylindrical
                - dome
                - equirectangular
                - pyramid
              type: string
            stereo_format:
              description: |
                The 360 spatial stereo format.

                Option descriptions:
                 * `left-right` - Use left-right stereo.
                 * `mono` - Use monaural audio.
                 * `top-bottom` - Use top-bottom stereo.
              enum:
                - left-right
                - mono
                - top-bottom
              type: string
          type: object
    VideosShowcasesAddToMultipleShowcasesRequest:
      type: object
      properties:
        add:
          description: >-
            The array of showcases to add the video to. Specify these with a
            batch request; see our [Using Common Formats and
            Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests)
            guide for more information.
          items:
            type: object
            properties:
              uri:
                description: The showcase URI to add the video to.
                type: string
          type: array
        remove:
          description: >-
            The array of showcases to remove the video from. Specify these with
            a batch request; see our [Using Common Formats and
            Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests)
            guide for more information.
          items:
            type: object
            properties:
              uri:
                description: The showcase URI to remove the video from.
                type: string
          type: array
    VideosAnimatedThumbnailsCreateSetRequest:
      type: object
      properties:
        duration:
          description: The duration of the animation in seconds. The maximum value is 6.
          example: 5
          type: number
        start_time:
          description: >-
            The time in seconds corresponding to the start of the animation in
            the video. The default value is 0.
          example: 2
          type: number
      required:
        - duration
    CategoriesVideosSetVideoCategoriesRequest:
      type: object
      properties:
        category:
          description: An array of the names of the desired categories.
          items:
            type: string
          type: array
      required:
        - category
    CreateChapterRequest:
      type: object
      properties:
        title:
          description: The title of the chapter.
          example: Chapter 1
          nullable: true
          type: string
        active_thumbnail_uri:
          description: The URI of the chapter's active thumbnail.
          example: >-
            /videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg
          type: string
        thumbnail_uris:
          description: >-
            An array of URIs of the thumbnails associated with the video
            chapter.
          items:
            type: string
          type: array
        timecode:
          description: The timecode of the chapter in seconds from the start of the video.
          example: 140
          nullable: true
          type: number
    VideosChaptersGenerateChapterThumbnailRequest:
      type: object
      properties:
        timecode:
          description: >-
            The timecode, given in seconds from the start of the video,
            indicating when the thumbnail should be generated from the video.
          example: 140
          type: number
    EditChapterRequest:
      type: object
      properties:
        title:
          description: The title of the chapter.
          example: Chapter 1
          nullable: true
          type: string
        active_thumbnail_uri:
          description: The URI of the chapter's active thumbnail.
          example: >-
            /videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg
          type: string
        timecode:
          description: The timecode of the chapter in seconds from the start of the video.
          example: 140
          nullable: true
          type: number
    VideosChaptersGenerateChapterThumbnailOrUploadLinkRequest:
      type: object
      properties:
        timecode:
          description: >-
            The timecode, given in seconds from the start of the video,
            indicating when the thumbnail should be generated from the video.
          example: 140
          type: number
    VideosChaptersSetChapterThumbnailActiveRequest:
      type: object
      properties:
        active:
          description: Whether to set the chapter thumbnail as active.
          example: true
          type: boolean
    CreateCommentRequest:
      type: object
      properties:
        text:
          description: The text of the comment.
          example: I love this!
          type: string
      required:
        - text
    EditCommentRequest:
      type: object
      properties:
        text:
          description: The new comment text.
          example: I love this!
          type: string
      required:
        - text
    VideosVideoCommentsCreateReplyRequest:
      type: object
      properties:
        text:
          description: The reply to the comment.
          example: I love this!
          type: string
      required:
        - text
    VideosCreditsAddUserCreditRequest:
      type: object
      properties:
        email:
          description: The email address of the credited person.
          example: user@example.com
          type: string
        name:
          description: The name of the credited person.
          example: Sam Doe
          type: string
        role:
          description: The role of the credited person.
          example: Producer
          type: string
        user_uri:
          description: The Vimeo URI of the credited person.
          example: /users/152184
          type: string
      required:
        - email
        - name
        - role
        - user_uri
    VideosCreditsEditUserCreditInVideoRequest:
      type: object
      properties:
        name:
          description: The name of the credited person.
          example: Sam Doe
          type: string
        role:
          description: The role of the credited person.
          example: Producer
          type: string
    VideosThumbnailsAddThumbnailToVideoRequest1:
      type: object
      properties:
        active:
          description: >-
            Whether the image created by the **time** field should be the
            default thumbnail for the video.
          example: true
          type: boolean
        time:
          description: The time offset in seconds from which to create the thumbnail.
          example: 300
          type: number
    VideosThumbnailsEditThumbnailImageRequest:
      type: object
      properties:
        active:
          description: Whether this thumbnail is the default.
          example: true
          type: boolean
    VideosTextTracksAddTextTrackRequest:
      type: object
      properties:
        active:
          description: >-
            Whether the current text track is the *active text track,* or the
            one that appears in the player. Only one text track per language and
            type can be active.
          example: true
          type: boolean
        is_auto_generated:
          description: >-
            Whether the text track was uploaded automatically by the Seshat
            audio annotation management platform.
          type: boolean
        is_edited:
          description: >-
            Whether the text track was uploaded by the Seshat audio annotation
            management platform after the user edited their transcript.
          type: boolean
        language:
          description: >-
            The language of the text track. For a full list of supported
            languages, use the
            [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages)
            endpoint.
          example: en-US
          type: string
        name:
          description: The name of the text track.
          example: Commentary
          type: string
        type:
          description: |
            The type of text track.

            Option descriptions:
             * `captions` - The text track is the captions type.
             * `chapters` - The text track is the chapters type.
             * `descriptions` - The text track is the descriptions type.
             * `metadata` - The text track is the metadata type.
             * `subtitles` - The text track is the subtitles type.
          enum:
            - captions
            - chapters
            - descriptions
            - metadata
            - subtitles
          type: string
      required:
        - language
        - name
        - type
    VideosTextTracksEditTextTrackRequest:
      type: object
      properties:
        active:
          description: >-
            Whether the current text track is the *active text track,* or the
            one that appears in the player. Only one text track per language and
            per type can be active.
          example: true
          type: boolean
        language:
          description: >-
            The language of the text track. For a full list of supported
            languages, use the
            [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages)
            endpoint.
          example: en-US
          type: string
        name:
          description: The name of the text track.
          example: Commentary
          type: string
        type:
          description: |
            The type of text track.

            Option descriptions:
             * `captions` - The text track is the captions type.
             * `chapters` - The text track is the chapters type.
             * `descriptions` - The text track is the descriptions type.
             * `metadata` - The text track is the metadata type.
             * `subtitles` - The text track is the subtitles type.
          enum:
            - captions
            - chapters
            - descriptions
            - metadata
            - subtitles
          type: string
    ClipTrimRequest:
      type: object
      properties:
        trim_end:
          description: The end position in seconds of the trim in the video.
          example: '2.0'
          type: string
        trim_start:
          description: The start position in seconds of the trim in the video.
          example: '1.0'
          type: string
    VideosVersionsAddVideoVersionRequest:
      type: object
      properties:
        file_name:
          description: The name of the version.
          example: untitled.mp4
          type: string
        upload:
          properties:
            approach:
              description: |
                The approach by which to upload the version.

                Option descriptions:
                 * `post` - Use the `post` method.
                 * `pull` - Use the `pull` method.
                 * `tus` - Use the `tus` method.
              enum:
                - post
                - pull
                - tus
              type: string
            link:
              description: >-
                The public URL from which to download the version when
                **upload.approach** is `pull`. This URL must be valid for at
                least 24 hours.
              example: https://example.com
              type: string
            redirect_url:
              description: The app's redirect URL when **upload.approach** is `post`.
              example: https://example.com
              type: string
            size:
              description: The upload size of the version.
              example: '13623861'
              type: string
          required:
            - approach
          type: object
      required:
        - file_name
        - upload
    VideosVersionsEditVideoVersionRequest:
      type: object
      properties:
        description:
          description: >-
            A description of the video version. This description can make use of
            the full unicode character set.
          example: description with emoji
          type: string
        is_current:
          description: Whether the video version is active.
          example: true
          type: boolean
    ShowcasesShowcaseVideosListInShowcaseResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    GetCategoriesResponse:
      type: array
      items:
        $ref: '#/components/schemas/category'
    CategoriesChannelsListInCategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/channel'
    CategoriesGroupsGetAllGroupsResponse:
      type: array
      items:
        $ref: '#/components/schemas/group'
    CategoriesVideosListVideosInCategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    GetChannelsResponse:
      type: array
      items:
        $ref: '#/components/schemas/channel'
    ChannelsCategoriesGetBelongingCategoriesResponse:
      type: array
      items:
        $ref: '#/components/schemas/category'
    ChannelsModeratorsListByChannelResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    ChannelsModeratorsReplaceModeratorsResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    ChannelsPrivateChannelMembersGetAccessibleUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    ChannelsPrivateChannelMembersPermitUserAccessResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    ChannelsTagsGetAllChannelTagsResponse:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    ChannelsTagsAddMultipleTagsToChannelResponse:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    ChannelsSubscriptionsAndSubscribersListChannelFollowersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    ChannelsVideosListInChannelResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    VideosVideoCommentsGetAllRepliesResponse:
      type: array
      items:
        $ref: '#/components/schemas/comment'
    VideosCreditsGetAllCreditedUsersInVideoResponse:
      type: array
      items:
        $ref: '#/components/schemas/credit'
    LikesEssentialsGetUsersWhoLikedVideoResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    VideosThumbnailsGetAllByVideoIdResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    VideosUnlistedVideosListAccessibleUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    VideosUnlistedVideosGrantAccessToUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    VideosTextTracksGetAllTracksResponse:
      type: array
      items:
        $ref: '#/components/schemas/text-track'
    VideosVersionsGetAllVideoVersionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/video-version'
    VideosContentRatingsGetAllContentRatingsResponse:
      type: array
      items:
        $ref: '#/components/schemas/content-rating'
    VideosCreativeCommonsGetAllCcLicensesResponse:
      type: array
      items:
        $ref: '#/components/schemas/creative-commons'
    GetGroupsResponse:
      type: array
      items:
        $ref: '#/components/schemas/group'
    GroupsUsersGetGroupUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    GroupsVideosGetAllGroupVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    GetLanguagesResponse:
      type: array
      items:
        $ref: '#/components/schemas/language'
    LiveEssentialsGetUserLiveEventsResponse:
      type: array
      items:
        $ref: '#/components/schemas/live-event'
    LiveEventThumbnailsGetAllThumbnailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    LiveEmbedPrivacyGetWhitelistDomainsResponse:
      type: array
      items:
        $ref: '#/components/schemas/domain'
    LiveEventVideosListLiveEventVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    ShowcasesEssentialsGetAllUserShowcasesResponse:
      type: array
      items:
        $ref: '#/components/schemas/album'
    ShowcasesShowcaseVideosListInShowcase200Response:
      type: array
      items:
        $ref: '#/components/schemas/video'
    UsersAnalyticsGetUserMetricsResponse:
      type: array
      items:
        $ref: '#/components/schemas/analytics'
    VideosEssentialsGetUserAppearancesResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    CategoriesUsersListFollowedCategoriesResponse:
      type: array
      items:
        $ref: '#/components/schemas/category'
    ChannelsEssentialsGetUserSubscriptionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/channel'
    EmbedPresetsCustomLogosListResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    UsersFeedsGetUserFeedVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/activity-3-1'
    UsersFollowersListAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    UsersFollowersListOfFollowingUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    GroupsUsersGetUserGroupsResponse:
      type: array
      items:
        $ref: '#/components/schemas/group'
    LikesEssentialsGetUserLikedVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    LiveEssentialsGetAllUserLiveEventsResponse:
      type: array
      items:
        $ref: '#/components/schemas/live-event'
    LiveEventDestinationsListAllAvailableDestinationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/live-event-destination'
    LiveEventThumbnailsGetAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    LiveEmbedPrivacyGetWhitelistDomains200Response:
      type: array
      items:
        $ref: '#/components/schemas/domain'
    LiveEventVideosGetAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    OnDemandEssentialsGetAllUserPagesResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-page'
    OnDemandPurchasesAndRentalsGetAllUserPurchasesAndRentalsResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-page'
    PaymentsEssentialsListPaymentMethodsResponse:
      type: array
      items:
        $ref: '#/components/schemas/payment-method'
    UsersPicturesListResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    PortfoliosEssentialsGetAllUserPortfoliosResponse:
      type: array
      items:
        $ref: '#/components/schemas/portfolio'
    PortfoliosVideosGetAllPortfolioVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    EmbedPresetsEssentialsGetAllUserCreatedEmbedPresetsResponse:
      type: array
      items:
        $ref: '#/components/schemas/preset'
    EmbedPresetsVideosGetSpecificPresetVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    FoldersEssentialsGetAllUserFoldersResponse:
      type: array
      items:
        $ref: '#/components/schemas/project'
    FoldersVideosGetVideosInFolderResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    VideosEssentialsGetAllUserVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    LiveEventDestinationsGetAllDestinationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/live-event-destination'
    UsersWatchHistoryGetWatchedVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    WatchLaterQueueEssentialsGetVideosInQueueResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    OnDemandGenresGetAllGenresResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-genre'
    OnDemandGenresGetAllPagesInGenreResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-page'
    OnDemandBackgroundsGetAllBackgroundsOnPageResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    OnDemandGenresGetGenresResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-genre'
    LikesEssentialsGetAllUserLikesResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    OnDemandPostersGetOnDemandPagePostersResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    OnDemandRegionsRemoveMultipleResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-region'
    OnDemandRegionsGetAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-region'
    OnDemandSeasonsListAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-season'
    OnDemandSeasonsGetAllVideosInSeasonResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    OnDemandVideosGetAllVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-video'
    GetRegionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-region'
    VideosTagsGetAllByTagResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    SearchUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    GetShowcasesResponse:
      type: array
      items:
        $ref: '#/components/schemas/album'
    ShowcasesCustomShowcaseThumbnailsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    ShowcasesCustomShowcaseLogosListAllCustomLogosResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    ShowcasesShowcaseVideosGetShowcaseVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    UsersAnalyticsGetMetricsResponse:
      type: array
      items:
        $ref: '#/components/schemas/analytics'
    GetAppearancesResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    CategoriesUsersListFollowedCategories200Response:
      type: array
      items:
        $ref: '#/components/schemas/category'
    ChannelsEssentialsGetUserSubscriptions200Response:
      type: array
      items:
        $ref: '#/components/schemas/channel'
    EmbedPresetsCustomLogosListUserLogosResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    GetFeedResponse:
      type: array
      items:
        $ref: '#/components/schemas/activity-3-1'
    GetFollowersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    UsersFollowersListOfFollowedUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    GroupsUsersGetUserGroupsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/group'
    GetLikesResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    LiveEssentialsGetUserLiveEvents200Response:
      type: array
      items:
        $ref: '#/components/schemas/live-event'
    LiveEventDestinationsGetAllAvailableDestinationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/live-event-destination'
    LiveEventDestinationsGetAllOttDestinationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/ott-destination'
    LiveEventThumbnailsGetAllThumbsResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    LiveEventVideosListAllVideosInEventResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    OnDemandEssentialsGetAllUserPages200Response:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-page'
    OnDemandPurchasesAndRentalsListUserPurchasesAndRentalsResponse:
      type: array
      items:
        $ref: '#/components/schemas/on-demand-page'
    GetPicturesResponse:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    GetPortfoliosResponse:
      type: array
      items:
        $ref: '#/components/schemas/portfolio'
    PortfoliosVideosGetAllPortfolioVideos200Response:
      type: array
      items:
        $ref: '#/components/schemas/video'
    EmbedPresetsEssentialsGetUserEmbedPresetsResponse:
      type: array
      items:
        $ref: '#/components/schemas/preset'
    EmbedPresetsVideosGetPresetVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    GetProjectsResponse:
      type: array
      items:
        $ref: '#/components/schemas/project'
    FoldersVideosGetAllFolderVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    GetVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    LiveEventDestinationsGetAllAvailableDestinations200Response:
      type: array
      items:
        $ref: '#/components/schemas/live-event-destination'
    WatchLaterQueueEssentialsListUserQueueVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    SearchVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
    VideosShowcasesGetAllContShowcasesResponse:
      type: array
      items:
        $ref: '#/components/schemas/album'
    VideosShowcasesAddToMultipleShowcasesResponse:
      type: array
      items:
        $ref: '#/components/schemas/album'
    VideosAnimatedThumbnailsGetAllSetsResponse:
      type: array
      items:
        $ref: '#/components/schemas/animated-thumbset'
    ShowcasesShowcaseVideosListAvailableShowcasesResponse:
      type: array
      items:
        $ref: '#/components/schemas/album'
    ChannelsVideosGetAccessibleChannelsResponse:
      type: array
      items:
        $ref: '#/components/schemas/channel'
    CategoriesVideosGetAllVideoCategoriesResponse:
      type: array
      items:
        $ref: '#/components/schemas/category'
    GetChaptersResponse:
      type: array
      items:
        $ref: '#/components/schemas/chapter'
    GetCommentsResponse:
      type: array
      items:
        $ref: '#/components/schemas/comment'
    VideosVideoCommentsGetAllReplies200Response:
      type: array
      items:
        $ref: '#/components/schemas/comment'
    VideosCreditsGetAllCreditedUsersInVideo200Response:
      type: array
      items:
        $ref: '#/components/schemas/credit'
    AvailableUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    LikesEssentialsGetUserLikesResponse:
      type: array
      items:
        $ref: '#/components/schemas/user'
    VideosThumbnailsGetAllByVideoId200Response:
      type: array
      items:
        $ref: '#/components/schemas/picture'
    VideosEmbedPrivacyListWhitelistDomainsResponse:
      type: array
      items:
        $ref: '#/components/schemas/domain'
    VideosUnlistedVideosListAccessibleUsers200Response:
      type: array
      items:
        $ref: '#/components/schemas/user'
    VideosUnlistedVideosGrantAccessToUsers200Response:
      type: array
      items:
        $ref: '#/components/schemas/user'
    VideosTagsGetVideoTagsResponse:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    VideosTagsAddMultipleResponse:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    VideosTextTracksGetAllVideoTracksResponse:
      type: array
      items:
        $ref: '#/components/schemas/text-track'
    GetTranscriptResponse:
      type: array
      items:
        $ref: '#/components/schemas/segment'
    VideosVersionsGetAllVideoVersions200Response:
      type: array
      items:
        $ref: '#/components/schemas/video-version'
    VideosRecommendationsGetRelatedVideosResponse:
      type: array
      items:
        $ref: '#/components/schemas/video'
security:
  - oauth2:
      - create
      - delete
      - edit
      - email
      - interact
      - private
      - promo_codes
      - public
      - purchase
      - purchased
      - scim
      - stats
      - upload
      - video_files
