openapi: 3.0.3
info:
  title: Ashby API
  description: The public API for accessing resources in your Ashby instance.
  version: 1.0.0
  contact:
    name: Ashby Support
    url: https://app.ashbyhq.com/support
    email: support@ashbyhq.com
  x-konfig-ignore:
    object-with-no-properties: true
servers:
  - url: https://api.ashbyhq.com
tags:
  - name: Candidate
  - name: Openings
  - name: Job
  - name: Application
  - name: Assessment
  - name: Interview Schedule
  - name: Offer
  - name: Custom Field
  - name: Job Posting
  - name: Location
  - name: User
  - name: Webhook
  - name: Application Feedback
  - name: Candidate Tag
  - name: Department
  - name: Feedback Form Definition
  - name: Interview
  - name: Interview Stage
  - name: Survey Form Definition
  - name: API Key
  - name: Application Form
  - name: Approval Definition
  - name: Archive Reason
  - name: Department & Team
  - name: File
  - name: Hiring Team
  - name: Hiring Team Role
  - name: Interview Event
  - name: Interview Plan
  - name: Job Interview Plan
  - name: Offer Process
  - name: Referral
  - name: Referral Form
  - name: Source
  - name: Survey Request
  - name: Survey Submission
  - description: The Ashby API
    name: ashby
paths:
  /apiKey.info:
    post:
      tags:
        - API Key
      summary: apiKey.info
      operationId: ApiKey_getInfo
      description: >
        Retrieve information about the API key being used to make the request.


        **Requires the [`apiKeysRead`](authentication#permissions-apikeyinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyGetInfoRequest'
      responses:
        '200':
          description: Responses for the apiKey.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyGetInfoResponse'
  /application.change_source:
    post:
      tags:
        - Application
      summary: application.changeSource
      operationId: Application_changeSource
      description: >
        Change the source of an application.


        **Requires the
        [`candidatesWrite`](authentication#permissions-applicationchangesource)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationChangeSourceRequest'
      responses:
        '200':
          description: Responses from the application.changeSource endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationChangeSourceResponse'
  /application.change_stage:
    post:
      tags:
        - Application
      summary: application.changeStage
      operationId: Application_changeStage
      description: >
        Change the stage of an application


        **Requires the
        [`candidatesWrite`](authentication#permissions-applicationchangestage)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationChangeStageRequest'
      responses:
        '200':
          description: Responses from the application.changeStage endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationChangeStageResponse'
  /application.create:
    post:
      tags:
        - Application
      summary: application.create
      operationId: Application_considerCandidate
      description: >
        Consider a candidate for a job


        **Requires the
        [`candidatesWrite`](authentication#permissions-applicationcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationConsiderCandidateRequest'
      responses:
        '200':
          description: Responses from the application.change_stage endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationConsiderCandidateResponse'
  /application.info:
    post:
      tags:
        - Application
      summary: application.info
      operationId: Application_getDetails
      description: >
        Fetch application details by application id or by submitted form
        instance id (which is return by the `applicationForm.submit` endpoint).
        If both applicationId and submittedFormInstanceId are provided, we will
        lookup by applicationId.


        **Requires the
        [`candidatesRead`](authentication#permissions-applicationinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationGetDetailsRequest'
      responses:
        '200':
          description: Responses from the application.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGetDetailsResponse'
  /application.list:
    post:
      tags:
        - Application
      summary: application.list
      operationId: Application_getAllSchedules
      description: >
        Gets all applications schedules in the organization.


        **Requires the
        [`candidatesRead`](authentication#permissions-applicationlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationGetAllSchedulesRequest'
      responses:
        '200':
          description: Responses from the application.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGetAllSchedulesResponse'
  /applicationFeedback.list:
    post:
      tags:
        - Application Feedback
      summary: applicationFeedback.list
      operationId: ApplicationFeedback_listAll
      description: >
        List all feedback associated with an application.


        **Requires the
        [`candidatesRead`](authentication#permissions-applicationfeedbacklist)
        permission.**


        The `submittedValues` field in the response contains the submitted
        feedback in an object where the key is the path of the field and the
        value is the value submitted for that field.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationFeedbackListAllRequest'
      responses:
        '200':
          description: Responses from the applicationFeedback.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFeedbackListAllResponse'
  /applicationFeedback.submit:
    post:
      tags:
        - Application Feedback
      summary: applicationFeedback.submit
      operationId: ApplicationFeedback_submitFeedback
      description: >
        Application feedback forms support a variety of field types. 


        **Requires the
        [`candidatesWrite`](authentication#permissions-applicationfeedbacksubmit)
        permission.**


        The values accepted for each field depend on the type of field that's
        being filled
        out:                                                                                                                                                                                                                
        |

        - `Boolean` - A boolean value

        - `Date` - A date string in the format YYYY-MM-DD

        - `Email` - A valid email address

        - `Number` - An integer

        - `RichText` - We do not support submitting rich text documents via the
        API but we do support submitting plain text values for these fields.
        Plain text values must be submitted in the format `{ type: "PlainText",
        value: "A plain text string" }`

        - `Score` - An integer between 1 and 4 submitted in the format `{ score:
        4 }`

        - `Phone`, `String` A string

        - `ValueSelect` - A string that matches the value of one of the
        ValueSelect field's selectable options

        - `MultiValueSelect` - An array of strings that exist in the
        MultiValueSelect field's selectable options


        The `submittedValues` field in the response contains the submitted
        feedback in an object where the key is the path of the field and the
        value is the value submitted for that field.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationFeedbackSubmitFeedbackRequest'
      responses:
        '200':
          description: Responses from the applicationFeedback.submit endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFeedbackSubmitFeedbackResponse'
  /applicationForm.submit:
    post:
      tags:
        - Application Form
      summary: applicationForm.submit
      operationId: ApplicationForm_submitForm
      description: >
        Submit an application for a job posting.


        **Requires the
        [`candidatesWrite`](authentication#permissions-applicationformsubmit)
        permission.**


        The Content-Type of this request must be `multipart/form-data`.


        **Note: The requests generated from this documentation will not work for
        this endpoint.**
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApplicationFormSubmitFormRequest'
      responses:
        '200':
          description: Responses from the applicationFeedback.submit endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFormSubmitFormResponse'
  /approvalDefinition.update:
    post:
      tags:
        - Approval Definition
      summary: approvalDefinition.update
      operationId: ApprovalDefinition_updateEntityScope
      description: >
        Create or update an approval definition for a specific entity that
        requires approval. The entity requiring approval must be within scope of
        an approval in Ashby that is marked as being managed by the API.


        **Requires the
        [`approvalsWrite`](authentication#permissions-approvaldefinitionupdate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalDefinitionUpdateEntityScopeRequest'
      responses:
        '200':
          description: Responses from the approvalDefinition.update endpoint
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/ApprovalDefinitionUpdateEntityScopeResponse
  /archiveReason.list:
    post:
      tags:
        - Archive Reason
      summary: archiveReason.list
      operationId: ArchiveReason_list
      description: >
        Lists archive reasons


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-archivereasonlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveReasonListRequest'
      responses:
        '200':
          description: Responses for the archiveReason.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveReasonListResponse'
  /assessment.addCompletedToCandidate:
    post:
      tags:
        - Assessment
      summary: assessment.addCompletedToCandidate
      operationId: Assessment_addCompletedToCandidate
      description: >
        Add a completed assessment to a candidate


        **Requires the
        [`candidatesWrite`](authentication#permissions-assessmentaddcompletedtocandidate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentAddCompletedToCandidateRequest'
      responses:
        '200':
          description: Responses for the assessment.addCompletedToCandidate endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentAddCompletedToCandidateResponse'
  /assessment.start:
    post:
      tags:
        - Assessment
      summary: assessment.start (Implemented by Partner)
      operationId: Assessment_partnerStart
      description: >
        The API for starting an assessment—implemented by the partner, but
        called by Ashby
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentPartnerStartRequest'
      responses:
        '200':
          description: Responses for the assessment.start endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentPartnerStartResponse'
        '409':
          description: Responses for the assessment.start endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentPartnerStart409Response'
  /assessment.list:
    post:
      tags:
        - Assessment
      summary: assessment.list (Implemented by Partner)
      operationId: Assessment_listPartnerSupport
      description: >
        The API for listing assessments that the partner supports — implemented
        by the partner, but called by Ashby
      responses:
        '200':
          description: Responses for the assessment.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentListPartnerSupportResponse'
  /assessment.update:
    post:
      tags:
        - Assessment
      summary: assessment.update
      operationId: Assessment_updateStatus
      description: >
        Update Ashby about the status of a started assessment


        **Requires the
        [`candidatesWrite`](authentication#permissions-assessmentupdate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentUpdateStatusRequest'
      responses:
        '200':
          description: Responses for the assessment.update endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentUpdateStatusResponse'
  /assessment.cancel:
    post:
      tags:
        - Assessment
      summary: assessment.cancel (Implemented by Partner)
      operationId: Assessment_cancelPartnerAssessment
      description: >
        (Optional) Cancels an assessment— implemented by the partner, but called
        by Ashby
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentCancelPartnerAssessmentRequest'
      responses:
        '200':
          description: Responses for the assessment.cancel endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentCancelPartnerAssessmentResponse'
  /candidate.addTag:
    post:
      tags:
        - Candidate
      summary: candidate.addTag
      operationId: Candidate_addTag
      description: >
        Adds a tag to a candidate


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidateaddtag)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateAddTagRequest'
      responses:
        '200':
          description: Responses for the candidate.addTag endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAddTagResponse'
  /canidate.anonymize:
    post:
      tags:
        - Candidate
      summary: candidate.anonymize
      operationId: Candidate_anonymizeCandidate
      description: >
        Anonymizes a candidate.


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidateanonymize)
        permission.**


        **Note**: this action cannot be reversed and requires all of a
        candidate's applications to be in the archived or hired state.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateAnonymizeCandidateRequest'
      responses:
        '200':
          description: Responses for the candidate.anonymize endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAnonymizeCandidateResponse'
  /candidate.create:
    post:
      tags:
        - Candidate
      summary: candidate.create
      operationId: Candidate_createNewCandidate
      description: >
        Creates a new candidate


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidatecreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateNewCandidateRequest'
      responses:
        '200':
          description: Responses for the candidate.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateCreateNewCandidateResponse'
  /candidate.createNote:
    post:
      tags:
        - Candidate
      summary: candidate.createNote
      operationId: Candidate_createNote
      description: >
        Creates a note on a candidate.


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidatecreatenote)
        permission.**


        For notes submitted with a type of `text/html`, we support the elements
        listed below. Any unsupported elements will be stripped out of the
        note's content before posting.
          - Bold `<b>`
          - Italic `<i>`
          - Underline `<u>`
          - Links `<a>`
          - Bulleted Lists - `<ul>`, `<li>`
          - Ordered Lists - `<ol>`, `<li>`
          - Code - `<code>`
          - Code Block - `<pre>`
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateCreateNoteRequest'
      responses:
        '200':
          description: Responses for the candidate.createNote endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateCreateNoteResponse'
  /candidate.info:
    post:
      tags:
        - Candidate
      summary: candidate.info
      operationId: Candidate_getById
      description: >
        Gets a single candidate by id.


        **Requires the
        [`candidatesRead`](authentication#permissions-candidateinfo)
        permission.**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateGetByIdRequest'
      responses:
        '200':
          description: Responses from the candidate.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateGetByIdResponse'
  /candidate.list:
    post:
      tags:
        - Candidate
      summary: candidate.list
      operationId: Candidate_listAll
      description: >
        Lists all candidates in an organization


        **Requires the
        [`candidatesRead`](authentication#permissions-candidatelist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateListAllRequest'
      responses:
        '200':
          description: Responses for the candidate.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateListAllResponse'
  /candidate.listNotes:
    post:
      tags:
        - Candidate
      summary: candidate.listNotes
      operationId: Candidate_getAllNotes
      description: >
        Lists all notes on a candidate


        **Requires the
        [`candidatesRead`](authentication#permissions-candidatelistnotes)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateGetAllNotesRequest'
      responses:
        '200':
          description: Responses for the candidate.listNotes endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateGetAllNotesResponse'
  /candidate.search:
    post:
      tags:
        - Candidate
      summary: candidate.search
      operationId: Candidate_searchByEmailAndName
      description: >
        Search for candidates by email and / or name. 


        **Requires the
        [`candidatesRead`](authentication#permissions-candidatesearch)
        permission.**


        Responses are limited to 100 results. Consider refining your search or
        using /candidate.list to paginate through all candidates, if you
        approach this limit. This API is for use cases where you intend operate
        on a final small set of candidates, like building a candidate
        autocomplete.


        Note: When multiple search parameters are provided, the parameters are
        combined with the `AND` operator.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateSearchByEmailAndNameRequest'
      responses:
        '200':
          description: Responses for the candidate.search endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateSearchByEmailAndNameResponse'
  /candidate.update:
    post:
      tags:
        - Candidate
      summary: candidate.update
      operationId: Candidate_updateExistingCandidate
      description: >
        Updates an existing candidate


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidateupdate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateUpdateExistingCandidateRequest'
      responses:
        '200':
          description: Responses for the candidate.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateUpdateExistingCandidateResponse'
  /candidate.uploadFile:
    post:
      tags:
        - Candidate
      summary: candidate.uploadFile
      operationId: Candidate_attachFile
      description: >
        Uploads a file to attach to the candidate's profile. 


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidateuploadfile)
        permission.**


        The `Content-Type` of this request must be `multipart/form-data`.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidateAttachFileRequest'
      responses:
        '200':
          description: Responses from the candidate.uploadFile endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateAttachFileResponse'
  /candidate.uploadResume:
    post:
      tags:
        - Candidate
      summary: candidate.uploadResume
      operationId: Candidate_uploadResumeData
      description: >
        Uploads a candidate's resume, parses it, and updates their information.


        **Requires the
        [`candidatesWrite`](authentication#permissions-candidateuploadresume)
        permission.**


        The `Content-Type` of this request must be `multipart/form-data`.


        Note: Existing candidate data always takes precedence over data found by
        parsing the resume. Resume data only populates candidate data, if it's
        data that was missing in the candidate model.    
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CandidateUploadResumeDataRequest'
      responses:
        '200':
          description: Responses from the candidate.uploadResume endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateUploadResumeDataResponse'
  /candidateTag.create:
    post:
      tags:
        - Candidate Tag
      summary: candidateTag.create
      operationId: CandidateTag_createNewTag
      description: >
        Creates a candidate tag.


        **Requires the
        [`hiringProcessMetadataWrite`](authentication#permissions-candidatetagcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTagCreateNewTagRequest'
      responses:
        '200':
          description: Responses for the location.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateTagCreateNewTagResponse'
  /candidateTag.list:
    post:
      tags:
        - Candidate Tag
      summary: candidateTag.list
      operationId: CandidateTag_listAll
      description: >
        Lists all candidate tags


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-candidatetaglist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateTagListAllRequest'
      responses:
        '200':
          description: Responses for the candidateTag.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateTagListAllResponse'
  /customField.create:
    post:
      tags:
        - Custom Field
      summary: customField.create
      operationId: CustomField_createNewField
      description: >
        Create a new custom field


        **Requires the
        [`hiringProcessMetadataWrite`](authentication#permissions-customfieldcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldCreateNewFieldRequest'
      responses:
        '200':
          description: Responses for the customField.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldCreateNewFieldResponse'
  /customField.list:
    post:
      tags:
        - Custom Field
      summary: customField.list
      operationId: CustomField_getAll
      description: >
        Lists all custom fields


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-customfieldlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
      responses:
        '200':
          description: Responses for the customField.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldGetAllResponse'
  /customField.setValue:
    post:
      tags:
        - Custom Field
      summary: customField.setValue
      operationId: CustomField_setValue
      description: >
        Set the value of a custom field


        **Requires the
        [`candidatesWrite`](authentication#permissions-customfieldsetvalue)
        permission.**


        The values accepted in the `fieldValue` param depend on the type of
        field that's being updated. See below for more details:
          - Boolean - A boolean value
          - Date - An ISO Date string
          - Email, LongText, Phone, String - String
          - ValueSelect - A string that matches the value of one of the ValueSelect field's options
          - MultiValueSelect - An array of strings that exist in the MultiValueSelect field's options
          - Number - A number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSetValueRequest'
      responses:
        '200':
          description: Responses for the customField.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldSetValueResponse'
  /department.create:
    post:
      tags:
        - Department & Team
      summary: department.create
      operationId: DepartmentTeam_createNewDepartment
      description: >
        Creates a department


        **Requires the
        [`organizationWrite`](authentication#permissions-departmentcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentTeamCreateNewDepartmentRequest'
      responses:
        '200':
          description: Responses for the department.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentTeamCreateNewDepartmentResponse'
  /department.info:
    post:
      tags:
        - Department
      summary: department.info
      operationId: Department_getById
      description: >
        Fetch department details by id


        **Requires the
        [`organizationRead`](authentication#permissions-departmentinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentGetByIdRequest'
      responses:
        '200':
          description: Responses from the department.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentGetByIdResponse'
  /department.list:
    post:
      tags:
        - Department
      summary: department.list
      operationId: Department_getAllDepartments
      description: >
        Lists all departments


        **Requires the
        [`organizationRead`](authentication#permissions-departmentlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentGetAllDepartmentsRequest'
      responses:
        '200':
          description: Responses for the department.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentGetAllDepartmentsResponse'
  /file.info:
    post:
      tags:
        - File
      summary: file.info
      operationId: File_getUrlCandidate
      description: >
        Retrieve the url of a file associated with a candidate


        **Requires the [`candidatesRead`](authentication#permissions-fileinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileGetUrlCandidateRequest'
      responses:
        '200':
          description: Responses for the file.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileGetUrlCandidateResponse'
  /feedbackFormDefinition.info:
    post:
      tags:
        - Feedback Form Definition
      summary: feedbackFormDefinition.info
      operationId: FeedbackFormDefinition_getById
      description: >
        Returns a single feedback form by id


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-feedbackformdefinitioninfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackFormDefinitionGetByIdRequest'
      responses:
        '200':
          description: Responses for the feedbackFormDefinition.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackFormDefinitionGetByIdResponse'
  /feedbackFormDefinition.list:
    post:
      tags:
        - Feedback Form Definition
      summary: feedbackFormDefinition.list
      operationId: FeedbackFormDefinition_listAll
      description: >
        Lists all feedback forms


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-feedbackformdefinitionlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackFormDefinitionListAllRequest'
      responses:
        '200':
          description: Responses for the feedbackFormDefinition.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackFormDefinitionListAllResponse'
  /hiringTeam.addMember:
    post:
      tags:
        - Hiring Team
      summary: hiringTeam.addMember
      operationId: HiringTeam_addMember
      description: >
        Adds an Ashby user to the hiring team at the application or job-level. 


        **Requires the
        [`organizationWrite`](authentication#permissions-hiringteamaddmember)
        permission.**


        Hiring team members can be added to a hiring team at the application
        level or at the job level. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HiringTeamAddMemberRequest'
      responses:
        '200':
          description: Responses for the hiringTeam.addMember endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HiringTeamAddMemberResponse'
  /hiringTeamRole.list:
    post:
      tags:
        - Hiring Team Role
      summary: hiringTeamRole.list
      operationId: HiringTeamRole_listRoles
      description: >
        Lists the possible hiring team roles in an organization


        **Requires the
        [`organizationRead`](authentication#permissions-hiringteamrolelist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HiringTeamRoleListRolesRequest'
      responses:
        '200':
          description: Responses for the hiringTeamRole.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HiringTeamRoleListRolesResponse'
  /interview.info:
    post:
      tags:
        - Interview
      summary: interview.info
      operationId: Interview_getById
      description: >
        Fetch interview details by id


        **Requires the
        [`interviewsRead`](authentication#permissions-interviewinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewGetByIdRequest'
      responses:
        '200':
          description: Responses from the interview.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewGetByIdResponse'
  /interview.list:
    post:
      tags:
        - Interview
      summary: interview.list
      operationId: Interview_getAll
      description: >
        List all interviews


        **Requires the
        [`interviewsRead`](authentication#permissions-interviewlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewGetAllRequest'
      responses:
        '200':
          description: Responses from the interview.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewGetAllResponse'
  /interviewEvent.list:
    post:
      tags:
        - Interview Event
      summary: interviewEvent.list
      operationId: InterviewEvent_listAssociatedEvents
      description: >
        Lists interview events associated with an interview schedule


        **Requires the
        [`interviewsRead`](authentication#permissions-intervieweventlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewEventListAssociatedEventsRequest'
      responses:
        '200':
          description: Responses from the interviewEvent.list endpoint
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/InterviewEventListAssociatedEventsResponse
  /interviewPlan.list:
    post:
      tags:
        - Interview Plan
      summary: interviewPlan.list
      operationId: InterviewPlan_getAll
      description: >
        List all interview plans.


        **Requires the
        [`interviewsRead`](authentication#permissions-interviewplanlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewPlanGetAllRequest'
      responses:
        '200':
          description: Responses from the interviewPlan.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewPlanGetAllResponse'
  /interviewSchedule.cancel:
    post:
      tags:
        - Interview Schedule
      summary: interviewSchedule.cancel
      operationId: InterviewSchedule_cancelById
      description: >
        Cancel an interview schedule by id


        **Requires the
        [`interviewsWrite`](authentication#permissions-interviewschedulecancel)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewScheduleCancelByIdRequest'
      responses:
        '200':
          description: Responses from the interviewSchedule.cancel endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewScheduleCancelByIdResponse'
  /interviewSchedule.create:
    post:
      tags:
        - Interview Schedule
      summary: interviewSchedule.create
      operationId: InterviewSchedule_createScheduledInterview
      description: >
        Create a scheduled interview in Ashby


        **Requires the
        [`interviewsWrite`](authentication#permissions-interviewschedulecreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/InterviewScheduleCreateScheduledInterviewRequest
      responses:
        '200':
          description: Responses from the interviewSchedule.create endpoint
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/InterviewScheduleCreateScheduledInterviewResponse
  /interviewSchedule.list:
    post:
      tags:
        - Interview Schedule
      summary: interviewSchedule.list
      operationId: InterviewSchedule_getAllSchedules
      description: >
        Gets all interview schedules in the organization.


        **Requires the
        [`interviewsRead`](authentication#permissions-interviewschedulelist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewScheduleGetAllSchedulesRequest'
      responses:
        '200':
          description: Responses from the interviewSchedule.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewScheduleGetAllSchedulesResponse'
  /interviewSchedule.update:
    post:
      tags:
        - Interview Schedule
      summary: interviewSchedule.update
      operationId: InterviewSchedule_updateEvent
      description: >
        Update an interview schedule. This endpoint allows you to add, cancel,
        or update interview events associated with an interview schedule.


        **Requires the
        [`interviewsWrite`](authentication#permissions-interviewscheduleupdate)
        permission.**


        In order to update an interview event on a schedule, the event's
        `interviewEventId` must be included when sending your request. 

        `interviewEventId`s are included in the response of the
        `interviewSchedule.create` endpoint.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewScheduleUpdateEventRequest'
      responses:
        '200':
          description: Responses from the interviewSchedule.update endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewScheduleUpdateEventResponse'
  /interviewStage.list:
    post:
      tags:
        - Interview Stage
      summary: interviewStage.list
      operationId: InterviewStage_listAllInOrder
      description: >
        List all interview stages for an interview plan in order.


        **Requires the
        [`interviewsRead`](authentication#permissions-interviewstagelist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewStageListAllInOrderRequest'
      responses:
        '200':
          description: Responses for the interviewStage.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewStageListAllInOrderResponse'
  /interviewStage.info:
    post:
      tags:
        - Interview Stage
      summary: interviewStage.info
      operationId: InterviewStage_getById
      description: >
        Fetch interview stage details by id


        **Requires the
        [`interviewsRead`](authentication#permissions-interviewstageinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewStageGetByIdRequest'
      responses:
        '200':
          description: Responses from the interviewStage.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewStageGetByIdResponse'
  /job.create:
    post:
      tags:
        - Job
      summary: job.create
      operationId: Job_newCreate
      description: >
        Creates a new job


        **Requires the [`jobsWrite`](authentication#permissions-jobcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobNewCreateRequest'
      responses:
        '200':
          description: Responses for the job.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNewCreateResponse'
  /job.info:
    post:
      tags:
        - Job
      summary: job.info
      operationId: Job_getById
      description: >
        Returns details about a single job by id


        **Requires the [`jobsRead`](authentication#permissions-jobinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobGetByIdRequest'
      responses:
        '200':
          description: Responses for the job.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobGetByIdResponse'
  /job.list:
    post:
      tags:
        - Job
      summary: job.list
      operationId: Job_getList
      description: >
        List all open, closed, and archived jobs.


        **Requires the [`jobsRead`](authentication#permissions-joblist)
        permission.**


        To include draft jobs, `Draft` must be specified in the `status` param.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobGetListRequest'
      responses:
        '200':
          description: Responses for the jobPosting.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobGetListResponse'
  /job.setStatus:
    post:
      tags:
        - Job
      summary: job.setStatus
      operationId: Job_setStatusById
      description: >
        Sets the status on a job by id.


        **Requires the [`jobsWrite`](authentication#permissions-jobsetstatus)
        permission.**


        All jobs are drafts when they're first created. There are a few
        validations around the stages a job can be transitioned to:

        - Drafts can be changed to Open or Archived

        - Open jobs can be changed to Closed

        - Closed jobs can be changed to Draft or Archived

        - Archived jobs can be changed to a Draft 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobSetStatusByIdRequest'
      responses:
        '200':
          description: Responses for the job.setStatus endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSetStatusByIdResponse'
  /job.update:
    post:
      tags:
        - Job
      summary: job.update
      operationId: Job_updateExisting
      description: >
        Updates an existing job


        **Requires the [`jobsWrite`](authentication#permissions-jobupdate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpdateExistingRequest'
      responses:
        '200':
          description: Responses for the job.update endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobUpdateExistingResponse'
  /job.search:
    post:
      tags:
        - Job
      summary: job.search
      operationId: Job_searchByTitle
      description: >
        Searches for jobs by title


        **Requires the [`jobsRead`](authentication#permissions-jobsearch)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobSearchByTitleRequest'
      responses:
        '200':
          description: Responses for the job.search endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSearchByTitleResponse'
  /jobInterviewPlan.info:
    post:
      tags:
        - Job Interview Plan
      summary: jobInterviewPlan.info
      operationId: JobInterviewPlan_getInfo
      description: >
        Returns a job's interview plan, including activities and interviews that
        need to be scheduled at each stage


        **Requires the
        [`jobsRead`](authentication#permissions-jobinterviewplaninfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobInterviewPlanGetInfoRequest'
      responses:
        '200':
          description: Responses for the jobInterviewPlan.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInterviewPlanGetInfoResponse'
  /jobPosting.info:
    post:
      tags:
        - Job Posting
      summary: jobPosting.info
      operationId: JobPosting_getIndividual
      description: "Retrieve an individual job posting\n\n**Requires the [`jobsRead`](authentication#permissions-jobpostinginfo) permission.**\n\nResult fields:\n- `linkedData` - Object that can be used to populate \"rich results\" in search engines. [See more info here](https://developers.google.com/search/docs/data-types/job-posting).\n- `applicationFormDefinition` -\tSee the guide on [Creating a custom careers page](https://developers.ashbyhq.com/docs/creating-a-custom-careers-page).\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingGetIndividualRequest'
      responses:
        '200':
          description: Responses for the jobPosting.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPostingGetIndividualResponse'
  /jobPosting.list:
    post:
      tags:
        - Job Posting
      summary: jobPosting.list
      operationId: JobPosting_getAllPublished
      description: >
        Lists all published job postings


        **Requires the [`jobsRead`](authentication#permissions-jobpostinglist)
        permission.**


        **Important**: By default, this endpoint includes all listed and
        unlisted job postings. Unlisted job postings should not be displayed
        publicly. 

        If you are using the API to publicly expose job postings, set the
        `listedOnly` parameter to `true` when calling this API so that you only
        fetch listed job postings that can be displayed publicly.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingGetAllPublishedRequest'
      responses:
        '200':
          description: Responses for the jobPosting.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPostingGetAllPublishedResponse'
  /jobPosting.update:
    post:
      tags:
        - Job Posting
      summary: jobPosting.update
      operationId: JobPosting_updateExisting
      description: >
        Updates an existing job posting.


        **Requires the
        [`jobsWrite`](authentication#permissions-jobpostingupdate) permission.**


        **Note on updating the description**: The `descriptionHtml` field
        returned in `jobPosting.info` may contain content that is not modifiable
        through the API. Only the content of the
        `descriptionParts.descriptionBody` field of the `jobPosting.info`
        endpoint is modifiable through this call.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostingUpdateExistingRequest'
      responses:
        '200':
          description: Responses for the jobPosting.update endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPostingUpdateExistingResponse'
  /location.create:
    post:
      tags:
        - Location
      summary: location.create
      operationId: Location_createHierarchy
      description: >
        Creates a location or location hierarchy.


        **Requires the
        [`organizationWrite`](authentication#permissions-locationcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCreateHierarchyRequest'
      responses:
        '200':
          description: Responses for the location.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationCreateHierarchyResponse'
  /location.info:
    post:
      tags:
        - Location
      summary: location.info
      operationId: Location_detailsById
      description: >
        Gets details for a single location by id.


        **Requires the
        [`organizationRead`](authentication#permissions-locationinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDetailsByIdRequest'
      responses:
        '200':
          description: Responses for the location.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDetailsByIdResponse'
  /location.list:
    post:
      tags:
        - Location
      summary: location.list
      operationId: Location_getList
      description: >
        List all locations. Regions are not returned.


        **Requires the
        [`organizationRead`](authentication#permissions-locationlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationGetListRequest'
      responses:
        '200':
          description: Responses for the location.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationGetListResponse'
  /offer.create:
    post:
      tags:
        - Offer
      summary: offer.create
      operationId: Offer_createNew
      description: >
        Creates a new Offer


        **Requires the [`offersWrite`](authentication#permissions-offercreate)
        permission.**


        Offer forms support a variety of field types. The values accepted for
        each field depend on the type of field that's being filled out:

        - `Boolean` - A boolean value.

        - `Currency` - An object in the format `{ currencyCode: "USD", value:
        100000 }` where currencyCode is a valid ISO 4217 currency code and value
        is an integer.

        - `Date` - A valid ISO Date string.

        - `Number` - An integer.

        - `String` - A string.

        - `ValueSelect` - A string that matches the value of one of the
        ValueSelect field's selectable options.

        - `MultiValueSelect` - An array of strings that exist in the
        MultiValueSelect field's selectable options.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferCreateNewRequest'
      responses:
        '200':
          description: Responses for the offer.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferCreateNewResponse'
  /offer.info:
    post:
      tags:
        - Offer
      summary: offer.info
      operationId: Offer_getDetailsById
      description: >
        Returns details about a single offer by id


        **Requires the [`offersRead`](authentication#permissions-offerinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferGetDetailsByIdRequest'
      responses:
        '200':
          description: Responses for the offer.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferGetDetailsByIdResponse'
  /offer.list:
    post:
      tags:
        - Offer
      summary: offer.list
      operationId: Offer_getList
      description: >
        Get a list of all offers with their latest version


        **Requires the [`offersRead`](authentication#permissions-offerlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferGetListRequest'
      responses:
        '200':
          description: Responses for the offer.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferGetListResponse'
  /offer.start:
    post:
      tags:
        - Offer
      summary: offer.start
      operationId: Offer_startCreationInstance
      description: >
        The offer.start endpoint creates and returns an offer version instance
        that can be filled out and submitted

        using the `offer.create` endpoint. 


        **Requires the [`offersWrite`](authentication#permissions-offerstart)
        permission.**


        In order to create a new offer version for a candidate with an
        in-progress 

        offer process, you can call the `offer.start` endpoint and then call the
        `offer.create` endpoint to fill out the

        newly created offer version form.  
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferStartCreationInstanceRequest'
      responses:
        '200':
          description: Responses for the offer.start endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferStartCreationInstanceResponse'
  /offerProcess.start:
    post:
      tags:
        - Offer Process
      summary: offerProcess.start
      operationId: OfferProcess_startProcessForCandidate
      description: >
        Starts an offer process for a candidate.


        **Requires the
        [`offersWrite`](authentication#permissions-offerprocessstart)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferProcessStartProcessForCandidateRequest'
      responses:
        '200':
          description: Responses for the offerProcess.start endpoint
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OfferProcessStartProcessForCandidateResponse
  /opening.info:
    post:
      tags:
        - Openings
      summary: opening.info
      operationId: Openings_getByUuid
      description: >-
        Retrieves an opening by its UUID.
              
        **Requires the [`jobsRead`](authentication#permissions-openinginfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsGetByUuidRequest'
      responses:
        '200':
          description: Responses for the opening.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsGetByUuidResponse'
  /opening.list:
    post:
      tags:
        - Openings
      summary: opening.list
      operationId: Openings_getList
      description: >-
        Lists openings.
              
        **Requires the [`jobsRead`](authentication#permissions-openinglist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsGetListRequest'
      responses:
        '200':
          description: Responses for the opening.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsGetListResponse'
  /opening.search:
    post:
      tags:
        - Openings
      summary: opening.search
      operationId: Openings_searchByIdentifier
      description: >-
        Searches for openings by identifier.
              
        **Requires the [`jobsRead`](authentication#permissions-openingsearch)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsSearchByIdentifierRequest'
      responses:
        '200':
          description: Responses for the opening.search endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsSearchByIdentifierResponse'
  /opening.create:
    post:
      tags:
        - Openings
      summary: opening.create
      operationId: Openings_createInstance
      description: >-
        Creates an opening.
              
        **Requires the [`jobsWrite`](authentication#permissions-openingcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsCreateInstanceRequest'
      responses:
        '200':
          description: Responses for the opening.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsCreateInstanceResponse'
  /opening.addJob:
    post:
      tags:
        - Openings
      summary: opening.addJob
      operationId: Openings_addJobAction
      description: >-
        Adds a job to an opening.
              
        **Requires the [`jobsWrite`](authentication#permissions-openingaddjob)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsAddJobActionRequest'
      responses:
        '200':
          description: Responses for the opening.addJob endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsAddJobActionResponse'
  /opening.removeJob:
    post:
      tags:
        - Openings
      summary: opening.removeJob
      operationId: Openings_removeJob
      description: >-
        Removes a job from an opening.
              
        **Requires the
        [`jobsWrite`](authentication#permissions-openingremovejob) permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsRemoveJobRequest'
      responses:
        '200':
          description: Responses for the opening.removeJob endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsRemoveJobResponse'
  /opening.setOpeningState:
    post:
      tags:
        - Openings
      summary: opening.setOpeningState
      operationId: Openings_setState
      description: >-
        Sets the state of an opening.
              
        **Requires the
        [`jobsWrite`](authentication#permissions-openingsetopeningstate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsSetStateRequest'
      responses:
        '200':
          description: Responses for the opening.setOpeningState endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsSetStateResponse'
  /opening.setArchived:
    post:
      tags:
        - Openings
      summary: opening.setArchived
      operationId: Openings_setArchived
      description: >-
        Sets the archived state of an opening.
              
        **Requires the
        [`jobsWrite`](authentication#permissions-openingsetarchived)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsSetArchivedRequest'
      responses:
        '200':
          description: Responses for the opening.setArchived endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsSetArchivedResponse'
  /opening.update:
    post:
      tags:
        - Openings
      summary: opening.update
      operationId: Openings_updateOpening
      description: >-
        Updates an opening.
              
        **Requires the [`jobsWrite`](authentication#permissions-openingupdate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningsUpdateOpeningRequest'
      responses:
        '200':
          description: Responses for the opening.update endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningsUpdateOpeningResponse'
  /referral.create:
    post:
      tags:
        - Referral
      summary: referral.create
      operationId: Referral_createNew
      description: >
        Creates a referral


        **Requires the
        [`candidatesWrite`](authentication#permissions-referralcreate)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferralCreateNewRequest'
      responses:
        '200':
          description: Responses for the referral.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferralCreateNewResponse'
  /referralForm.info:
    post:
      tags:
        - Referral Form
      summary: referralForm.info
      operationId: ReferralForm_getDefaultForm
      description: >
        Fetches the default referral form or creates a default referral form if
        none exists.


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-referralforminfo)
        permission.**
      responses:
        '200':
          description: Responses for the referral.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferralFormGetDefaultFormResponse'
  /source.list:
    post:
      tags:
        - Source
      summary: source.list
      operationId: Source_getAll
      description: >
        List all sources


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-sourcelist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceGetAllRequest'
      responses:
        '200':
          description: Responses for the source.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceGetAllResponse'
  /surveyFormDefinition.info:
    post:
      tags:
        - Survey Form Definition
      summary: surveyFormDefinition.info
      operationId: SurveyFormDefinition_getDetailsById
      description: >
        Returns details about a single survey form definition by id


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-surveyformdefinitioninfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyFormDefinitionGetDetailsByIdRequest'
      responses:
        '200':
          description: Responses for the surveyFormDefinition.info endpoint
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/SurveyFormDefinitionGetDetailsByIdResponse
  /surveyFormDefinition.list:
    post:
      tags:
        - Survey Form Definition
      summary: surveyFormDefinition.list
      operationId: SurveyFormDefinition_getAll
      description: >
        Lists all survey form definitions.


        **Requires the
        [`hiringProcessMetadataRead`](authentication#permissions-surveyformdefinitionlist)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
      responses:
        '200':
          description: Responses for the surveyFormDefinition.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyFormDefinitionGetAllResponse'
  /surveyRequest.create:
    post:
      tags:
        - Survey Request
      summary: surveyRequest.create
      operationId: SurveyRequest_generateUrl
      description: >
        This endpoint generates a survey request and returns a survey URL. You
        can send this URL to a candidate to allow them to complete a survey. 


        **Requires the
        [`candidatesWrite`](authentication#permissions-surveyrequestcreate)
        permission.**


        **Note that calling this endpoint will not automatically email the
        survey to the candidate.** It simply creates the request and gives you a
        URL to share with a candidate.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyRequestGenerateUrlRequest'
      responses:
        '200':
          description: Responses for the surveyRequest.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyRequestGenerateUrlResponse'
  /surveySubmission.list:
    post:
      tags:
        - Survey Submission
      summary: surveySubmission.list
      operationId: SurveySubmission_listBySurveyType
      description: >
        Lists all survey submissions of a given `surveyType`.


        **Requires the
        [`candidatesRead`](authentication#permissions-surveySubmissionList)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveySubmissionListBySurveyTypeRequest'
      responses:
        '200':
          description: Responses for the surveySubmission.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySubmissionListBySurveyTypeResponse'
  /user.info:
    post:
      tags:
        - User
      summary: user.info
      operationId: User_getById
      description: >
        Get an Ashby user by id


        **Requires the [`organizationRead`](authentication#permissions-userinfo)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGetByIdRequest'
      responses:
        '200':
          description: Responses for the user.info endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetByIdResponse'
  /user.list:
    post:
      tags:
        - User
      summary: user.list
      operationId: User_getAshbyUsers
      description: >
        Get a list of all Ashby users


        **Requires the [`organizationRead`](authentication#permissions-userlist)
        permission.**


        The `globalRole` property in the response specifies the user's access
        level in Ashby.

        For more details on the permissions granted with each role, see our
        [documentation
        here](https://ashbyhq.notion.site/Ashby-Permissions-a48eda7c07ad46f0bcd2b3f39301a9de#c64a4db5e7f4432bbe6691b91d3f0c62).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGetAshbyUsersRequest'
      responses:
        '200':
          description: Responses for the user.list endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetAshbyUsersResponse'
  /user.search:
    post:
      tags:
        - User
      summary: user.search
      operationId: User_searchByEmail
      description: >
        Search for an Ashby user by email address


        **Requires the
        [`organizationRead`](authentication#permissions-usersearch)
        permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchByEmailRequest'
      responses:
        '200':
          description: Responses for the user.search endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchByEmailResponse'
  /webhook.create:
    post:
      tags:
        - Webhook
      summary: webhook.create
      operationId: Webhook_createSetting
      description: >
        Creates a webhook setting.


        **Requires the
        [`apiKeysWrite`](authentication#permissions-webhookcreate) scope.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreateSettingRequest'
      responses:
        '200':
          description: Responses from the webhook.create endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookCreateSettingResponse'
  /webhook.update:
    post:
      tags:
        - Webhook
      summary: webhook.update
      operationId: Webhook_updateSetting
      description: >
        Updates a webhook setting. One of `enabled`, `requestUrl`, or
        `secretToken` must be provided.


        **Requires the
        [`apiKeysWrite`](authentication#permissions-webhookcreate) permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookUpdateSettingRequest'
      responses:
        '200':
          description: Responses from the webhook.update endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookUpdateSettingResponse'
  /webhook.delete:
    post:
      tags:
        - Webhook
      summary: webhook.delete
      operationId: Webhook_removeSetting
      description: >
        Deletes a webhook setting.


        **Requires the
        [`apiKeysWrite`](authentication#permissions-webhookcreate) permission.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRemoveSettingRequest'
      responses:
        '200':
          description: Responses from the webhook.delete endpoint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookRemoveSettingResponse'
components:
  securitySchemes:
    BasicAuth:
      description: >
        Use HTTP Basic Auth to authenticate with our API. You must send your API
        key with every request. 

        Put your API key as the basic auth username and leave the password
        blank.
      type: http
      scheme: basic
    WebhookSignature:
      description: >
        [Optional] If you provide a secret token when configuring your webhook,
        this will be used to create a digest of the JSON payload sent with each
        webhook request.

        The digest will be included in the request under the `Ashby-Signature`
        http header.


        It will look like this:

        `Ashby-Signature:
        sha256=f3124911d2956f10aa3a49c43a88bdf13bba846e94f0ae2bd7c034f90239bd04`


        The part before the = indicates the algorithm that was used to compute
        the hash digest.
      type: apiKey
      in: header
      name: Ashby-Signature
  schemas:
    ApiKeyGetInfoRequest:
      type: object
    ApplicationChangeSourceRequest:
      properties:
        applicationId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the application to update the source of
        sourceId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: >-
                The source to set on the application. Pass null to unset an
                application's source.
      required:
        - applicationId
        - sourceId
      example:
        applicationId: 3ae2b801-19f6-41ef-ad28-214bd731948f
        sourceId: 2c6991c5-c9e2-4af8-879e-29c5a9d26509
    ApplicationChangeStageRequest:
      properties:
        applicationId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the application to update the stage of
        interviewStageId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The interview stage to move the application to.
        archiveReasonId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: >
                Archive Reason to set when moving to an Interview Stage with
                type: `Archived`. 

                Note: You must pass this parameter when moving to an Interview
                Stage with type: `Archived`
      required:
        - applicationId
        - interviewStageId
      example:
        applicationId: 3ae2b801-19f6-41ef-ad28-214bd731948f
        interviewStageId: 2c6991c5-c9e2-4af8-879e-29c5a9d26509
    ApplicationConsiderCandidateRequest:
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the candidate to consider for a job
        jobId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the job to consider the candidate for
        interviewPlanId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: >
                The id of the interview plan to place the application in. If
                none is provided, the default interview plan is used.
        interviewStageId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: >
                The interview stage of the interview plan (either default or
                provided) to place the application in. 

                If none is provided, the application is placed in the first
                "Lead" stage. 

                You can also supply the special string
                "FirstPreInterviewScreen", which will choose the first
                pre-interview-screen stage on the specified job's interview
                plan.
        sourceId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The source to set on the application being created.
        creditedToUserId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the user the application will be credited to.
      required:
        - candidateId
        - jobId
      example:
        candidateId: 3ae2b801-19f6-41ef-ad28-214bd731948f
        jobId: 2c6991c5-c9e2-4af8-879e-29c5a9d26509
    ApplicationGetDetailsRequest:
      oneOf:
        - type: object
          properties:
            applicationId:
              allOf:
                - description: The id of the application to fetch.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            expand:
              description: >
                Choose to expand the result and include additional data for
                related objects. 
              type: array
              items:
                type: string
                enum:
                  - openings
                  - applicationFormSubmissions
          required:
            - applicationId
        - type: object
          properties:
            submittedFormInstanceId:
              allOf:
                - description: >-
                    The id of the application's submitted form instance to
                    fetch.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            expand:
              description: >
                Choose to expand the result and include additional data for
                related objects. 
              type: array
              items:
                type: string
                enum:
                  - openings
                  - applicationFormSubmissions
          required:
            - submittedFormInstanceId
    ApplicationGetAllSchedulesRequest:
      allOf:
        - type: object
          properties:
            createdAfter:
              description: >-
                The API will return data after this date, which is the time
                since the unix epoch in milliseconds
              type: integer
              format: int64
            cursor:
              $ref: >-
                #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/cursor
            syncToken:
              $ref: >-
                #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/syncToken
            limit:
              $ref: >-
                #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/limit
          example:
            createdAfter: 1659979196538
            cursor: qA
            syncToken: 6W05prn4d
            limit: 25
        - properties:
            expand:
              description: >
                Choose to expand the result and include additional data for
                related objects. 
              type: array
              items:
                type: string
                enum:
                  - openings
            status:
              type: string
              enum:
                - Hired
                - Archived
                - Active
                - Lead
            jobId:
              $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
    ApplicationFeedbackListAllRequest:
      allOf:
        - $ref: >-
            #/paths/~1application.list/post/requestBody/content/application~1json/schema/allOf/0
        - type: object
          properties:
            applicationId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: The id of the application you'd like to fetch feedback for
    ApplicationFeedbackSubmitFeedbackRequest:
      oneOf:
        - type: object
          required:
            - feedbackForm
            - formDefinitionId
            - applicationId
          properties:
            feedbackForm:
              $ref: >-
                #/paths/~1offer.create/post/requestBody/content/application~1json/schema/properties/offerForm
            formDefinitionId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >-
                    The id of the feedback form definition associated with the
                    form submission
            applicationId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: The id of the application you're submitting feedback for
            userId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >
                    The id of the user the feedback will be credited to.

                    If a userId is not provided, the feedback will be credited
                    to the API key user.
        - type: object
          required:
            - feedbackForm
            - formDefinitionId
            - applicationId
            - userId
            - interviewEventId
          properties:
            feedbackForm:
              $ref: >-
                #/paths/~1offer.create/post/requestBody/content/application~1json/schema/properties/offerForm
            formDefinitionId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >-
                    The id of the feedback form definition associated with the
                    form submission
            applicationId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: The id of the application you're submitting feedback for
            userId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >
                    The id of the user the feedback will be credited to. 

                    The user must be an interviewer on the interview event that
                    feedback is being submitted for.
            interviewEventId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >
                    The id of the interview event you're submitting feedback
                    for.
    ApplicationFormSubmitFormRequest:
      type: object
      required:
        - jobPostingId
        - applicationForm
      properties:
        jobPostingId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the job posting to submit an application for
        applicationForm:
          $ref: >-
            #/paths/~1offer.create/post/requestBody/content/application~1json/schema/properties/offerForm
        utmData:
          type: object
          properties:
            utm_source:
              type: string
            utm_campaign:
              type: string
            utm_medium:
              type: string
            utm_term:
              type: string
            utm_content:
              type: string
        <file  key>:
          description: >-
            Any file referenced  in the `applicationForm`.   The name of this
            field must exactly match the `value` on the `fieldSubmission` that
            references this file.
          type: string
          format: binary
    ApprovalDefinitionUpdateEntityScopeRequest:
      type: object
      properties:
        entityType:
          type: string
          enum:
            - offer
        entityId:
          allOf:
            - description: >-
                The id of the approval entity being updated (e.g. the id of the
                offer version).
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        approvalStepDefinitions:
          description: >-
            An ordered list of approval steps that describes the number of
            required approvers at each step, as well as who is an approver at
            each step.
          type: array
          items:
            type: object
            properties:
              approvalsRequired:
                description: >-
                  The number of approvers required to approve this step, before
                  the approval moves on to the next step. The number of
                  approvers must be non-zero and no more than the number of
                  approvers in this step.
                type: integer
              approvers:
                description: An unordered list of who can approve this step.
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        - description: The id of a user who is an approver for this step.
                    type:
                      type: string
                      enum:
                        - user
                  required:
                    - userId
                    - type
            required:
              - approvalsRequired
              - approvers
      required:
        - entityType
        - entityId
        - approvalStepDefinitions
    ArchiveReasonListRequest:
      type: object
      properties:
        includeArchived:
          description: When true, includes archived interview plans
          type: boolean
          default: false
    AssessmentAddCompletedToCandidateRequest:
      type: object
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the candidate, to whom to add the completed assessment
        partnerId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the partner adding the assessment
        assessment:
          description: The completed assessment
          type: object
          required:
            - assessmentTypeId
            - assessmentId
            - assessmentName
            - result
            - metadata
          properties:
            assessmentTypeId:
              allOf:
                - description: An identifier that uniquely identifies the assessment type
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            assessmentId:
              allOf:
                - description: >-
                    An identifier that uniquely identifies the completed
                    assessment
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            assessmentName:
              description: >-
                The name of the assessment that was taken that will be displayed
                in the UI
              type: string
              example: Node Assessment
            result:
              allOf:
                - description: The assessment's result
                - $ref: >-
                    #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/metadata/items
            metadata:
              description: An array of metadata associated with this completed assessment
              type: array
              items:
                $ref: >-
                  #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/metadata/items
        timestamp:
          allOf:
            - description: >-
                The timestamp in milliseconds since the unix epoch, when the
                assessment was completed
            - $ref: >-
                #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/timestamp
      required:
        - candidateId
        - partnerId
        - assessment
        - timestamp
    AssessmentPartnerStartRequest:
      type: object
      required:
        - assessment_type_id
        - candidate
        - application
        - job
      properties:
        assessment_type_id:
          allOf:
            - description: >-
                The id of the type of assessment to start (retrieved from
                calling /assessment.list)
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        candidate:
          allOf:
            - description: Identifier of the assessment being started
            - description: A description of the candidate
              type: object
              required:
                - ashby_id
                - first_name
                - last_name
                - email
                - ashby_profile_url
              properties:
                ashby_id:
                  allOf:
                    - type: string
                    - description: The identifier of the candidate in Ashby
                first_name:
                  allOf:
                    - type: string
                    - description: The first name of the candidate being assessed
                last_name:
                  allOf:
                    - type: string
                    - description: The last name of the candidate being assessed
                email:
                  allOf:
                    - type: string
                    - description: The email of the candidate being assessed
                ashby_profile_url:
                  allOf:
                    - type: string
                    - description: The url back into Ashby of the candidate being assessed
        application:
          allOf:
            - description: The application for which the candidate is being assessed
            - description: The application for which the candidate is being assessed
              type: object
              required:
                - ashby_id
                - status
              properties:
                ashby_id:
                  allOf:
                    - type: string
                    - description: The id of the application in Ashby
                status:
                  allOf:
                    - $ref: >-
                        #/paths/~1application.list/post/requestBody/content/application~1json/schema/allOf/1/properties/status
                    - description: The status of the application in Ashby
        job:
          allOf:
            - description: The job for which the candidate is being assessed
            - description: The job for which the candidate is being assessed
              type: object
              required:
                - ashby_id
                - name
                - ashby_job_url
              properties:
                ashby_id:
                  allOf:
                    - type: string
                    - description: The id of the job in Ashby
                name:
                  allOf:
                    - type: string
                    - description: The name of the job in Ashby
                req_id:
                  allOf:
                    - type: string
                    - description: The customer-defined requisition id for the job
                ashby_job_url:
                  allOf:
                    - type: string
                    - description: The url of the job, internal to Ashby
                hiringTeam:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1hiringTeam.addMember/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
    AssessmentUpdateStatusRequest:
      type: object
      required:
        - assessment_id
        - assessment_status
        - timestamp
      properties:
        assessment_id:
          allOf:
            - description: Identifier of the assessment being updated
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        assessment_status:
          allOf:
            - description: >-
                The current status of the assessment. Setting this with a value
                of "Started" will signal Ashby to store the timestamp the
                assessment started.
            - $ref: >-
                #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/metadata/items
        assessment_profile_url:
          allOf:
            - description: >-
                The url back to the assessment/candidate on the partner's
                website. This value should always be of type url. (required when
                assessment_result is set)
            - $ref: >-
                #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/metadata/items
        metadata:
          description: >-
            Any other metadata about the assessment (e.g. ETA until complete).
            All assessment data should have unique identifiers.
          type: array
          items:
            type: object
            properties:
              description:
                description: >-
                  Description of the assessment metadata, which may be displayed
                  in the UI
                type: string
                example: The maximum possible score for the assessment
              identifier:
                description: Uniquely identifies this field, for this partner
                type: string
                example: result-max
              label:
                description: Label for the assessment metadata to be displayed in the UI
                type: string
                example: Max Score
              type:
                description: >-
                  The type of the value. Please reach out if you'd like us to
                  support a new type!
                type: string
                enum:
                  - numeric_score
                  - numeric_duration_minutes
                  - url
                  - string
                  - boolean_success
              value:
                allOf:
                  - description: |
                      The raw value — one of string, number, or boolean
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                  - example: 10
            required:
              - identifier
              - label
              - type
              - value
        timestamp:
          description: >-
            The timestamp in milliseconds since the unix epoch, when the update
            occurred
          type: integer
          format: int64
          example: 1665680638489
    AssessmentCancelPartnerAssessmentRequest:
      type: object
      required:
        - assessment_id
      properties:
        assessment_id:
          allOf:
            - description: The id of the started assessment to cancel
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
    CandidateAddTagRequest:
      type: object
      required:
        - candidateId
        - tagId
      properties:
        candidateId:
          description: The unique id of the candidate to add the tag to.
          type: string
          example: 5b591aed-88e3-4395-b9c6-7d529f93354a
        tagId:
          description: The unique id of the tag to add to the candidate.
          type: string
          example: 38430ede-5bd2-41fc-b474-87591cb98cbc
    CandidateAnonymizeCandidateRequest:
      type: object
      required:
        - candidateId
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the candidate to anonymize.
    CandidateCreateNewCandidateRequest:
      type: object
      properties:
        name:
          description: The first and last name of the candidate to be created.
          type: string
          example: Adam Hart
        email:
          allOf:
            - type: string
              example: test@ashbyhq.com
            - description: Primary, personal email of the candidate to be created.
        phoneNumber:
          allOf:
            - type: string
              example: 555-555-5555
            - description: Primary, personal phone number of the candidate to be created.
        linkedInUrl:
          description: Url to the candidate's LinkedIn profile. Must be a valid Url.
          type: string
          example: https://linkedin.com/in/user
        githubUrl:
          description: Url to the candidate's Github profile. Must be a valid Url.
          type: string
          example: https://github.com/user
        website:
          description: Url of the candidate's website. Must be a valid Url.
          type: string
          example: https://twitter.com/user
        alternateEmailAddresses:
          description: Array of alternate email address to add to the candidate's profile.
          type: array
          items:
            type: string
          example:
            - test.email@ashbyhq.com
        sourceId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The source to set on the candidate being created.
        creditedToUserId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the user the candidate will be credited to.
      required:
        - name
    CandidateCreateNoteRequest:
      type: object
      properties:
        candidateId:
          type: string
          format: uuid
          example: e9ed20fd-d45f-4aad-8a00-a19bfba0083e
        note:
          oneOf:
            - description: The note to add to the candidate
              type: string
              example: Strong candidate, very interested in the company
            - description: Note content
              type: object
              properties:
                type:
                  description: >
                    The content type of the note. For notes submitted with a
                    type of text/html we support the elements listed below. Any
                    unsupported elements will be stripped out of the note's
                    content before posting.

                    - Bold `<b>`

                    - Italic `<i>`

                    - Underline `<u>`

                    - Links `<a>`

                    - Bulleted Lists - `<ul>`, `<li>`

                    - Ordered Lists - `<ol>`, `<li>`

                    - Code - `<code>`

                    - Code Block - `<pre>`
                  type: string
                  enum:
                    - text/plain
                    - text/html
                value:
                  type: string
              required:
                - type
                - value
        sendNotifications:
          description: >-
            Whether or not users who are subscribed to the candidate should be
            notified that the note was posted.
          type: boolean
          default: false
      required:
        - candidateId
        - note
    CandidateGetByIdRequest:
      oneOf:
        - type: object
          properties:
            id:
              description: The id of the candidate to fetch
              type: string
              format: uuid
          required:
            - id
          example:
            id: f9e52a51-a075-4116-a7b8-484deba69004
        - type: object
          properties:
            externalMappingId:
              description: >
                An id assigned to a candidate outside of Ashby. 

                Used to associate Ashby candidates with their profiles in
                external systems (BambooHR, Rippling, Gusto, etc.)
              type: string
          required:
            - externalMappingId
          example:
            externalMappingId: f9e52a51-a075-4116-a7b8-484deba69004
    CandidateListAllRequest:
      type: object
      properties:
        cursor:
          description: Opaque cursor indicating which page of results to fetch
          type: string
          example: G8
        syncToken:
          description: >
            An opaque token representing the last time the data was successfully
            synced from the API. A new, updated one is returned after
            successfully fetching the last page of data.
          type: string
          example: jYnEBmjzR
        limit:
          description: >-
            The maximum number of items to return. The maximum and default value
            is 100.
          type: number
          example: 25
      example:
        syncToken: 6W05prn4d
        cursor: qA
        limit: 25
    CandidateGetAllNotesRequest:
      allOf:
        - type: object
          properties:
            candidateId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: The id of the candidate to fetch notes for
        - $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
      required:
        - candidateId
      example:
        candidateId: f9e52a51-a075-4116-a7b8-484deba69004
    CandidateSearchByEmailAndNameRequest:
      type: object
      properties:
        email:
          description: The candidate's email
          type: string
        name:
          description: The candidate's name
          type: string
      example:
        email: test@ashbyhq.com
        name: Adam Hart
    CandidateUpdateExistingCandidateRequest:
      type: object
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The unique id of the candidate to update.
        name:
          description: The first and last name of the candidate to update.
          type: string
          example: Adam Hart
        email:
          allOf:
            - $ref: >-
                #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/email/allOf/0
            - description: Primary, personal email of the candidate to update.
        phoneNumber:
          allOf:
            - $ref: >-
                #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/phoneNumber/allOf/0
            - description: Primary, personal phone number of the candidate to update.
        linkedInUrl:
          $ref: >-
            #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/linkedInUrl
        githubUrl:
          $ref: >-
            #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/githubUrl
        websiteUrl:
          $ref: >-
            #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/website
        alternateEmail:
          description: An alternate email address to add to the candidate's profile.
          type: string
          example: test.email@ashbyhq.com
        socialLinks:
          description: >
            An array of social links to set on the candidate. This value
            replaces existing socialLinks that have been set on the candidate. 

            If this value is submitted along with linkedInUrl, gitHubUrl or
            websiteUrl fields, those values will be ignored.
          type: array
          items:
            type: object
            properties:
              type:
                enum:
                  - LinkedIn
                  - GitHub
                  - Twitter
                  - Medium
                  - StackOverflow
                  - Website
                type: string
              url:
                type: string
            required:
              - type
              - url
            example:
              url: https://linkedin.com/in/user
              type: LinkedIn
        sourceId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of source for this candidate.
        creditedToUserId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the user the candidate will be credited to.
      required:
        - candidateId
    CandidateAttachFileRequest:
      type: object
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the candidate
        file:
          description: The file to upload to the candidate's profile
          type: string
          format: binary
      required:
        - candidateId
        - file
      example:
        id: f9e52a51-a075-4116-a7b8-484deba69004X
    CandidateUploadResumeDataRequest:
      type: object
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the candidate
        resume:
          description: The resume to upload to the candidate's profile
          type: string
          format: binary
      required:
        - candidateId
        - resume
      example:
        id: f9e52a51-a075-4116-a7b8-484deba69004X
    CandidateTagCreateNewTagRequest:
      type: object
      required:
        - title
      properties:
        title:
          description: >-
            The tag's title. If a tag already exists with that title, the
            existing tag will be returned.
          type: string
          example: Strong candidate
    CandidateTagListAllRequest:
      allOf:
        - type: object
          properties:
            includeArchived:
              description: >-
                Whether archived candidate tags should be included in the
                response
              type: boolean
              default: false
    CustomFieldCreateNewFieldRequest:
      type: object
      required:
        - fieldType
        - objectType
        - title
      properties:
        title:
          description: The name of the field
          type: string
        description:
          description: A description for the field
          type: string
        fieldType:
          description: The type of field being created. This value is case-sensitive.
          type: string
          enum:
            - Boolean
            - Date
            - MultiValueSelect
            - Number
            - String
            - ValueSelect
        objectType:
          description: The type of object the field can be associated with.
          type: string
          enum:
            - Application
            - Candidate
            - Job
            - Employee
            - Talent_Project
            - Opening_Version
            - Offer_Version
        selectableValues:
          description: >-
            Required when the field type is ValueSelect or MultiValueSelect. An
            array of selectable values for the field.
          type: array
          items:
            properties:
              label:
                type: string
              value:
                type: string
            required:
              - label
              - value
            type: object
        isDateOnlyField:
          description: >-
            Only applies to fields with an objectType of Date. Whether or not
            the field includes content other than a date
          type: boolean
        isExposableToCandidate:
          description: >-
            Determines whether the field can be exposed to a candidate in
            certain contexts. In order for a custom field to be available in an
            email template this value must be true.
          type: boolean
          default: false
    CustomFieldSetValueRequest:
      type: object
      required:
        - objectId
        - objectType
        - fieldId
        - fieldValue
      properties:
        objectId:
          allOf:
            - description: The id of the object the field value is being set on.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        objectType:
          description: The type of object the field is associated with.
          type: string
          enum:
            - Application
            - Candidate
            - Job
        fieldId:
          allOf:
            - description: The unique id of the Custom Field definition for the field
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        fieldValue:
          description: The value to store in the field
          oneOf:
            - title: Boolean
              description: A boolean value
              type: boolean
            - title: Date
              description: An ISO Date string
              type: string
              format: date-time
            - title: String, Email, LongText, Phone
              description: A string
              type: string
            - title: MultiValueSelect
              type: array
              items:
                description: >-
                  An array of strings that exist in the MultiValueSelect field's
                  options
                type: string
            - title: Number
              description: A number
              type: number
            - title: ValueSelect
              description: >-
                A string that matches the value of one of the ValueSelect
                field's options
              type: string
    DepartmentTeamCreateNewDepartmentRequest:
      type: object
      required:
        - name
      properties:
        name:
          description: The name of the department
          type: string
          example: Engineering
        parentId:
          description: The id of the department's parent department
          type: string
          format: uuid
          example: 1be42b8e-cafd-4beb-8121-f4981eb20f42
    DepartmentGetByIdRequest:
      properties:
        departmentId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The unique id of the department whose details will be fetched
      required:
        - departmentId
      example:
        departmentId: 3ae2b801-19f6-41ef-ad28-214bd731948f
    DepartmentGetAllDepartmentsRequest:
      allOf:
        - type: object
          properties:
            includeArchived:
              description: Whether archived departments should be included in the response
              type: boolean
              default: false
    FileGetUrlCandidateRequest:
      type: object
      properties:
        fileHandle:
          description: A file handle retrieved from the public API
          type: string
          example: >
            eyJoYW5kbGUiOnsidHlwZSI6IkNhbmRpZGF0ZUZpbGUiLCJmaWxlSWQiOiIxNTk1ZTRmYy04MTQwLTQ1NGUtYTI1ZC04NTNiOTQ3ZWNmYzgiLCJvd25lcklkIjoiYmY5NGZlNmMtMjU3MS00NzQ1LWE1OWEtNTA5MjE3ODI3MDVlIn0sInNpZ25hdHVyZSI6IkFqclpjT0VlTXUwdWxLZlRCS05iMWRkbDdHcjVIWFVmZzNrS0NPL1dWWjg9IiwidmVyc2lvbiI6IjEilQ
      required:
        - fileHandle
    FeedbackFormDefinitionGetByIdRequest:
      type: object
      required:
        - feedbackFormDefinitionId
      properties:
        feedbackFormDefinitionId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The unique id of the feedback form you'd like to fetch.
            - example: 9b17887e-5add-49e8-9a03-ffffa669aa2f
    FeedbackFormDefinitionListAllRequest:
      type: object
      properties:
        includeArchived:
          $ref: >-
            #/paths/~1source.list/post/requestBody/content/application~1json/schema/properties/includeArchived
        cursor:
          $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/cursor
        syncToken:
          $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/syncToken
        limit:
          $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/limit
      example:
        includeArchived: false
        cursor: qA
        syncToken: 6W05prn4d
        limit: 25
    HiringTeamAddMemberRequest:
      oneOf:
        - title: Application-level
          type: object
          required:
            - applicationId
            - teamMemberId
            - roleId
          properties:
            applicationId:
              allOf:
                - description: The application to assign the user a role on.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            teamMemberId:
              allOf:
                - description: The id of the user to assign the role to.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            roleId:
              allOf:
                - description: The id of the hiring team role to assign.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        - title: Job-level
          type: object
          required:
            - jobId
            - teamMemberId
            - roleId
          properties:
            jobId:
              allOf:
                - description: The job to assign the user a role on.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            teamMemberId:
              allOf:
                - description: The id of the user to assign the role to.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            roleId:
              allOf:
                - description: The id of the hiring team role to assign.
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
    HiringTeamRoleListRolesRequest:
      type: object
      properties:
        namesOnly:
          description: >-
            When set to true (the default), an array of role titles is returned.
            When set to false, an array of objects that include the id and title
            of the role is returned.
          type: boolean
          default: true
    InterviewGetByIdRequest:
      properties:
        id:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The unique id of the interview whose details will be fetched
      required:
        - id
      example:
        id: 3ae2b801-19f6-41ef-ad28-214bd731948f
    InterviewGetAllRequest:
      allOf:
        - $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
        - type: object
          properties:
            includeArchived:
              $ref: >-
                #/paths/~1source.list/post/requestBody/content/application~1json/schema/properties/includeArchived
            includeNonSharedInterviews:
              description: >
                If true, interviews that are associated with specific jobs will
                be included in the response. 

                Shared interviews that are not associated with a specific job
                can be scheduled for applications to any job.

                Interviews that are not shared can only be scheduled for
                applications to the job they are associated with. 
              type: boolean
              default: false
    InterviewEventListAssociatedEventsRequest:
      properties:
        interviewScheduleId:
          allOf:
            - description: >-
                The unique ID of the interview schedule, for which to list
                interview events
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - interviewScheduleId
    InterviewPlanGetAllRequest:
      properties:
        includeArchived:
          $ref: >-
            #/paths/~1source.list/post/requestBody/content/application~1json/schema/properties/includeArchived
    InterviewScheduleCancelByIdRequest:
      properties:
        id:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the interview schedule to cancel
        allowReschedule:
          description: Whether or not this interview schedule can be rescheduled.
          type: boolean
          default: false
      required:
        - id
      example:
        id: 3ae2b801-19f6-41ef-ad28-214bd731948fX
    InterviewScheduleCreateScheduledInterviewRequest:
      properties:
        applicationId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the application for this interview schedule
        interviewEvents:
          description: The list of events that make up this interview schedule
          type: array
          items:
            type: object
            required:
              - startTime
              - endTime
              - interviewers
            properties:
              startTime:
                description: The start time of this event
                type: string
                example: '2023-01-30T15:00:00.000Z'
              endTime:
                description: The end time of this event
                type: string
                example: '2023-01-30T16:00:00.000Z'
              interviewers:
                description: The interviewers for this event
                type: array
                items:
                  type: object
                  required:
                    - email
                  properties:
                    email:
                      description: The email address of the user in Ashby
                      type: string
                      example: test@ashbyhq.com
                    feedbackRequired:
                      description: Whether this interviewer is required to provide feedback
                      type: boolean
              interviewId:
                allOf:
                  - $ref: >-
                      #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                  - description: >-
                      The id of the interview used in this event. If no value is
                      provided, the organization's default interview will be
                      used.
                  - example: 46648e83-f28f-43c4-a2a0-58e0599cff41
      required:
        - applicationId
        - interviewEvents
    InterviewScheduleGetAllSchedulesRequest:
      allOf:
        - $ref: >-
            #/paths/~1application.list/post/requestBody/content/application~1json/schema/allOf/0
        - type: object
          properties:
            applicationId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >-
                    The id of the application, for which to fetch interview
                    schedules
            interviewStageId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >-
                    The id of the interview stage, for which to fetch interview
                    schedules
    InterviewScheduleUpdateEventRequest:
      oneOf:
        - type: object
          properties:
            interviewScheduleId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >
                    The id of the interview schedule to update. 

                    Only interview schedules created using the API key making
                    the request can be updated.
            interviewEvent:
              allOf:
                - description: >
                    An event on the interview schedule to create or update.

                    To update an event, the event's `interviewEventId` must be
                    included in the request.
                - $ref: >-
                    #/paths/~1interviewSchedule.create/post/requestBody/content/application~1json/schema/properties/interviewEvents/items
                - type: object
                  properties:
                    interviewEventId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        - description: |
                            The id of an interview event to update. 
          required:
            - interviewScheduleId
            - interviewEvent
        - type: object
          properties:
            interviewScheduleId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >
                    The id of the interview schedule to update. 

                    Only interview schedules created using the API key making
                    the request can be updated.
            interviewEventIdToCancel:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: |
                    The id of an interview event to cancel.
            allowFeedbackDeletion:
              description: >-
                By default, we do not allow interview events with submitted
                feedback to be canceled because canceling an event causes its
                associated feedback to be deleted. If you want to allow events
                with submitted feedback to be canceled, this flag can be passed
                in and set to `true`. In this case, events with feedback will be
                canceled, and any associated feedback will be deleted.
              type: boolean
              default: false
          required:
            - interviewScheduleId
            - interviewEventIdToCancel
    InterviewStageListAllInOrderRequest:
      type: object
      properties:
        interviewPlanId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the interview plan to list stages for
      required:
        - interviewPlanId
    InterviewStageGetByIdRequest:
      properties:
        interviewStageId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: >-
                The unique id of the interview stage whose details will be
                fetched
      required:
        - interviewStageId
      example:
        interviewStageId: 3ae2b801-19f6-41ef-ad28-214bd731948f
    JobNewCreateRequest:
      type: object
      properties:
        title:
          description: The title of the job.
          type: string
          example: Software Engineer
        teamId:
          allOf:
            - description: The id of the department or team associated with the job
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        locationId:
          allOf:
            - description: The id of the location of the job
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        defaultInterviewPlanId:
          allOf:
            - description: |
                The id of the default interview plan for this job posting. 
                A job cannot be opened without a default interview plan.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - title
        - teamId
        - locationId
    JobGetByIdRequest:
      type: object
      properties:
        id:
          allOf:
            - description: The id of the job to fetch
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        expand:
          description: >
            Choose to expand the result and include additional data for related
            objects. 
          type: array
          items:
            type: string
            enum:
              - location
              - openings
      required:
        - id
    JobGetListRequest:
      allOf:
        - $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
        - type: object
          properties:
            status:
              description: >-
                When supplied, only jobs with the provided status(es) will be
                returned.
              type: array
              items:
                $ref: >-
                  #/paths/~1job.setStatus/post/requestBody/content/application~1json/schema/properties/status/allOf/1
            openedAfter:
              description: >-
                Return jobs opened after this date, which is the time since the
                unix epoch in milliseconds
              type: integer
              format: int64
            openedBefore:
              description: >-
                Return jobs opened before this date, which is the time since the
                unix epoch in milliseconds
              type: integer
              format: int64
            closedAfter:
              description: >-
                Return jobs closed after this date, which is the time since the
                unix epoch in milliseconds
              type: integer
              format: int64
            closedBefore:
              description: >-
                Return jobs closed before this date, which is the time since the
                unix epoch in milliseconds
              type: integer
              format: int64
            expand:
              $ref: >-
                #/paths/~1job.info/post/requestBody/content/application~1json/schema/properties/expand
    JobSetStatusByIdRequest:
      type: object
      properties:
        jobId:
          allOf:
            - description: The unique id of the job to set the status of.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        status:
          allOf:
            - description: The status to apply to the job.
            - type: string
              enum:
                - Draft
                - Open
                - Closed
                - Archived
      required:
        - jobId
        - status
    JobUpdateExistingRequest:
      type: object
      properties:
        title:
          description: A new title for the job.
          type: string
          example: Software Engineer
        jobId:
          allOf:
            - description: The unique id of the job to update.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        teamId:
          allOf:
            - description: The new team to associate with the job.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        locationId:
          allOf:
            - description: The new location to associate with the job.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        defaultInterviewPlanId:
          allOf:
            - description: The new default interview plan to associate with the job.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        customRequisitionId:
          allOf:
            - description: The new default custom requisition id for the job.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - jobId
    JobSearchByTitleRequest:
      type: object
      properties:
        title:
          description: The title of the job to search for
          type: string
          example: Software Engineer
      required:
        - title
    JobInterviewPlanGetInfoRequest:
      type: object
      properties:
        jobId:
          allOf:
            - description: The id of the job to fetch an interview plan for
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - jobId
    JobPostingGetIndividualRequest:
      type: object
      properties:
        jobPostingId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the job posting to return
      required:
        - jobPostingId
    JobPostingGetAllPublishedRequest:
      type: object
      properties:
        location:
          description: filter by location name (case sensitive)
          type: string
        department:
          description: filter by department name (case sensitive)
          type: string
        listedOnly:
          description: If true, filter out unlisted job postings.
          type: boolean
          default: false
    JobPostingUpdateExistingRequest:
      type: object
      properties:
        title:
          description: A new title for the job posting.
          type: string
          example: Software Engineer
        description:
          description: >
            An HTML block of the job posting description. Please see below for
            supported tags.


            **Note**: The `descriptionHtml` field returned in `jobPosting.info`
            may contain content that is not modifiable through the API. Only the
            content of the `descriptionParts.descriptionBody` field of the
            `jobPosting.info` endpoint is modifiable through this call.
          type: object
          properties:
            type:
              type: string
              enum:
                - text/html
            content:
              description: >
                The HTML content of the Job Posting. The following tags will
                accept updates. Updates to any other tags will be stripped out
                or not applied. 

                - Headings - `<h[1-6]>`

                - Bold - `<b>`

                - Italic - `<i>`

                - Underline - `<u>`

                - Links - `<a>`

                - Bulleted Lists - `<ul>`, `<li>`

                - Ordered Lists - `<ol>`, `<li>`

                - Code - `<code>`

                - Code blocks - `<pre>`
              type: string
          required:
            - type
            - content
        jobPostingId:
          allOf:
            - description: The unique id of the job posting to update.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - jobPostingId
    LocationCreateHierarchyRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          description: The name of the location
          type: string
        type:
          description: >-
            A Location represents an actual location that jobs and employees can
            be associated with. A Location Hierarchy is a grouping of locations
            or other location hierarchies.
          type: string
          enum:
            - Location
            - LocationHierarchy
        address:
          description: The address of the location
          type: object
          properties:
            postalAddress:
              type: object
              properties:
                addressCountry:
                  description: >-
                    The country the location is in. Must be a valid country name
                    or two-letter country code.
                  type: string
                addressRegion:
                  description: >-
                    The region the location is in (for instance, a state or
                    province)
                  type: string
                addressLocality:
                  description: The city or town of the location
                  type: string
        parentLocationId:
          description: The id of the location's parent
          type: string
        isRemote:
          description: >-
            Whether the location should be labeled as remote.
            LocationHierarchies cannot be labeled as remote.
          type: boolean
          default: false
    LocationDetailsByIdRequest:
      type: object
      properties:
        locationId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the location to fetch
      required:
        - locationId
    LocationGetListRequest:
      type: object
      properties:
        includeArchived:
          $ref: >-
            #/paths/~1source.list/post/requestBody/content/application~1json/schema/properties/includeArchived
    OfferCreateNewRequest:
      type: object
      properties:
        offerProcessId:
          allOf:
            - description: >
                The id of the offer process associated with the offer you're
                creating. 

                This value is the id included in the response of the
                `offerProcess.start` API.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        offerFormId:
          allOf:
            - description: >
                The id of the form associated with the offer.

                This value is the id included in the response of the
                `offer.start` API.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        offerForm:
          type: object
          properties:
            fieldSubmissions:
              type: array
              items:
                properties:
                  path:
                    description: The form field's "path" value
                    type: string
                  value:
                    description: >-
                      This is often a primitive but the value depends on the
                      type of field being submitted. See the description above
                      for details on the values accepted in this field.
                    type: string
                required:
                  - path
                  - value
          required:
            - fieldSubmissions
      required:
        - offerProcessId
        - offerFormId
        - offerForm
    OfferGetDetailsByIdRequest:
      type: object
      properties:
        offerId:
          allOf:
            - description: The id of the offer to fetch
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - offerId
    OfferGetListRequest:
      allOf:
        - $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
        - type: object
          properties:
            applicationId:
              allOf:
                - $ref: >-
                    #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                - description: >-
                    If provided, only returns the offers for the application
                    with the supplied id
    OfferStartCreationInstanceRequest:
      type: object
      properties:
        offerProcessId:
          allOf:
            - description: >-
                The ID of the offer process to start. This value is the id
                included in the response of the `offerProcess.start` API.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - offerProcessId
    OfferProcessStartProcessForCandidateRequest:
      type: object
      properties:
        applicationId:
          allOf:
            - description: The id of the application to start an offer process for
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - applicationId
    OpeningsGetByUuidRequest:
      type: object
      required:
        - openingId
      properties:
        openingId:
          description: The id of the opening
          type: string
    OpeningsGetListRequest:
      type: object
      properties:
        cursor:
          description: Opaque cursor indicating which page of results to fetch
          type: string
        syncToken:
          description: >-
            Opaque token representing the last time a full set of results was
            fetched.
          type: string
    OpeningsSearchByIdentifierRequest:
      type: object
      required:
        - identifier
      properties:
        identifier:
          description: The identifier of the opening you want to search for
          type: string
    OpeningsCreateInstanceRequest:
      type: object
      properties:
        description:
          type: string
        identifier:
          description: >-
            jobIds,     targetHireDate,     targetStartDate,     isBackfill,    
            employmentType,
          type: string
        teamId:
          description: The id of the department or team associated with the opening.
          type: string
        locationIds:
          description: The ids of the locations associated with the opening.
          type: array
          items:
            type: string
        jobIds:
          description: The ids of the jobs associated with the opening
          type: array
          items:
            type: string
        targetHireDate:
          description: >-
            The date (in YYYY-MM-DD format) by which you intend to hire against
            this opening.
          type: string
        targetStartDate:
          description: >-
            The date (in YYYY-MM-DD format) by which you intend someone hired
            against this opening will start employment.
          type: string
        isBackfill:
          description: Whether this opening is intended to backfill a previous employee
          type: boolean
          default: false
        employmentType:
          description: The employment type for this opening
          type: string
          default: FullTime
          enum:
            - FullTime
            - PartTime
            - Intern
            - Contract
            - Temporary
            - ''
        openingState:
          description: The state the opening should be created in.
          type: string
          enum:
            - Draft
            - Approved
            - Open
            - Closed
    OpeningsAddJobActionRequest:
      type: object
      required:
        - openingId
        - jobId
      properties:
        openingId:
          description: The id of the opening
          type: string
        jobId:
          description: The id of the job to add
          type: string
    OpeningsRemoveJobRequest:
      type: object
      required:
        - openingId
        - jobId
      properties:
        openingId:
          description: The id of the opening
          type: string
        jobId:
          description: The id of the job to remove from the opening.
          type: string
    OpeningsSetStateRequest:
      type: object
      properties:
        openingId:
          description: The id of the opening you want to update
          type: string
        openingState:
          description: The new state you want to update the opening to
          type: string
          enum:
            - Draft
            - Approved
            - Open
            - Closed
        closeReasonId:
          description: The id of the close reason if you are setting the state to closed
          type: string
    OpeningsSetArchivedRequest:
      type: object
      properties:
        openingId:
          description: The id of the opening you want to archive
          type: string
        archive:
          description: The new archived state you want to update the opening to
          type: boolean
    OpeningsUpdateOpeningRequest:
      type: object
      properties:
        description:
          type: string
        openingId:
          description: The openingId of the opening you want to update.
          type: string
        identifier:
          description: >-
            jobIds,     targetHireDate,     targetStartDate,     isBackfill,    
            employmentType,
          type: string
        teamId:
          description: The id of the department or team associated with the opening.
          type: string
        targetHireDate:
          description: >-
            The date (in YYYY-MM-DD format) by which you intend to hire against
            this opening.
          type: string
        targetStartDate:
          description: >-
            The date (in YYYY-MM-DD format) by which you intend someone hired
            against this opening will start employment.
          type: string
        isBackfill:
          description: Whether this opening is intended to backfill a previous employee
          type: boolean
          default: false
        employmentType:
          description: The employment type for this opening
          type: string
          default: FullTime
          enum:
            - FullTime
            - PartTime
            - Intern
            - Contract
            - Temporary
            - ''
    ReferralCreateNewRequest:
      type: object
      properties:
        id:
          allOf:
            - description: The id of the referral form, from /referralForm.info
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        creditedToUserId:
          allOf:
            - description: The id of the user submitting the referral
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        fieldSubmissions:
          type: array
          items:
            properties:
              path:
                description: The form field's "path" value
                type: string
              value:
                description: >
                  This is often a primitive but for a referral job, it should be
                  { title: job.title, value: job.id }
                type: string
            required:
              - path
              - value
        createdAt:
          allOf:
            - description: >
                An ISO date string to set the referral's createdAt timestamp to.
                When this value isn't provided, the createdAt timestamp defaults
                to the time the referral was created.
            - type: string
              example: '2022-08-12T20:29:56.964Z'
              format: date
      required:
        - id
        - creditedToUserId
        - fieldSubmissions
    SourceGetAllRequest:
      type: object
      properties:
        includeArchived:
          description: When true, includes archived items
          type: boolean
          default: false
    SurveyFormDefinitionGetDetailsByIdRequest:
      type: object
      properties:
        surveyFormDefinitionId:
          allOf:
            - description: The id of the survey form to fetch
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - surveyFormDefinitionId
    SurveyRequestGenerateUrlRequest:
      type: object
      required:
        - candidateId
        - applicationId
        - surveyFormDefinitionId
      properties:
        candidateId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the candidate to create a survey request for.
        applicationId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id of the application to associate with the survey request.
        surveyFormDefinitionId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: >
                The ID of the survey form that the candidate will see when they
                visit the URL returned in the `surveyURL` property of the API
                response. 

                Survey forms IDs can be obtained using the
                `surveyFormDefinition.list` endpoint. 
    SurveySubmissionListBySurveyTypeRequest:
      allOf:
        - description: |
            The type of survey submissions to fetch. 
          type: object
          properties:
            surveyType:
              type: string
              enum:
                - CandidateDataConsent
                - CandidateExperience
                - Diversity
                - EEOC
                - Questionnaire
          required:
            - surveyType
        - $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
    UserGetByIdRequest:
      type: object
      properties:
        userId:
          allOf:
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - description: The id to lookup the user
      required:
        - userId
    UserGetAshbyUsersRequest:
      allOf:
        - $ref: >-
            #/paths/~1candidate.list/post/requestBody/content/application~1json/schema
        - type: object
          properties:
            includeDeactivated:
              description: |
                If set to true, deactivated users are included in the response. 
                By default, deactivated users are not included.
              type: boolean
              default: false
    UserSearchByEmailRequest:
      type: object
      properties:
        email:
          description: The email to use to search for the user
          type: string
          example: test@ashbyhq.com
      required:
        - email
    WebhookCreateSettingRequest:
      properties:
        webhookType:
          type: string
          enum:
            - applicationSubmit
            - applicationUpdate
            - candidateHire
            - candidateStageChange
            - candidateDelete
            - candidateMerge
            - interviewPlanTransition
            - interviewScheduleCreate
            - interviewScheduleUpdate
            - jobPostingUpdate
            - jobPostingPublish
            - jobPostingUnpublish
            - offerCreate
            - offerUpdate
            - offerDelete
            - pushToHRIS
            - surveySubmit
        requestUrl:
          description: The URL the webhook will send requests to.
          type: string
        secretToken:
          description: >
            The secret token used to sign the webhook request. See our
            documentation
            [here](https://developers.ashbyhq.com/docs/authenticating-webhooks)
            for more information.
          type: string
      required:
        - webhookType
        - requestUrl
        - secretToken
    WebhookUpdateSettingRequest:
      properties:
        webhookId:
          allOf:
            - description: The id of the webhook setting to update.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        enabled:
          description: Whether or not the webhook is enabled.
          type: boolean
        requestUrl:
          description: The URL the webhook will send requests to.
          type: string
        secretToken:
          description: >
            The secret token used to sign the webhook request. See our
            documentation
            [here](https://developers.ashbyhq.com/docs/authenticating-webhooks)
            for more information.
          type: string
      required:
        - webhookId
    WebhookRemoveSettingRequest:
      properties:
        webhookId:
          allOf:
            - description: The id of the webhook setting to delete.
            - $ref: >-
                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      required:
        - webhookId
    ApiKeyGetInfoResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    title:
                      description: The name of the API key.
                      type: string
                      example: Custom Job Board API key
                    createdAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationChangeSourceResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationChangeStageResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationConsiderCandidateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationGetDetailsResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  allOf:
                    - $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
                    - type: object
                      properties:
                        openings:
                          description: >-
                            The openings array will only be included if the
                            `openings` expand parameter is included when the
                            request is made.
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                    - type: object
                      properties:
                        archivedAt:
                          allOf:
                            - $ref: >-
                                #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                            - description: The timestamp an application was archived
                        applicationHistory:
                          type: array
                          items:
                            type: object
                            properties:
                              title:
                                title: Offer
                                type: string
                              id:
                                $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                              stageId:
                                $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                              enteredStageAt:
                                $ref: >-
                                  #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                              leftStageAt:
                                $ref: >-
                                  #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                            required:
                              - id
                              - stageId
                              - title
                              - enteredStageAt
                        applicationFormSubmissions:
                          description: >-
                            Application form submissions. These match the
                            response from the `applicationForm.submit` endpoint.
                            Use of the expand parameter is required to fetch.
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1applicationForm.submit/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/submittedFormInstance
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationGetAllSchedulesResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    allOf:
                      - $ref: >-
                          #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
                      - $ref: >-
                          #/paths/~1application.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/allOf/1
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationFeedbackListAllResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    allOf:
                      - type: object
                        allOf:
                          - $ref: >-
                              #/paths/~1applicationForm.submit/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/submittedFormInstance
                          - type: object
                            properties:
                              submittedByUser:
                                $ref: >-
                                  #/paths/~1user.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
                              interviewId:
                                $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                              applicationHistoryId:
                                $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                              submittedAt:
                                $ref: >-
                                  #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        required:
                          - submittedByUser
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationFeedbackSubmitFeedbackResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    submittedFormInstance:
                      $ref: >-
                        #/paths/~1applicationForm.submit/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/submittedFormInstance
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApplicationFormSubmitFormResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    submittedFormInstance:
                      type: object
                      properties:
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        formDefinition:
                          $ref: >-
                            #/paths/~1offer.start/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/properties/formDefinition
                        submittedValues:
                          type: object
                          example:
                            _systemfield_name: Joe Smith
                      required:
                        - id
                        - formDefinition
                        - submittedValues
                    formMessages:
                      type: object
                      properties:
                        blockMessageForCandidateHtml:
                          description: >-
                            A message to display to the candidate if they been
                            blocked from applying due to application limits
                          type: string
                          example: >
                            <div><p>In order to give as many candidates as
                            possible an opportunity to apply we have limiting
                            the number of applications a single candidate may
                            submit. Unfortunately we cannot, accept your
                            application at this time.</p></div>
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ApprovalDefinitionUpdateEntityScopeResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      allOf:
                        - description: The id of the approval definition.
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    entityType:
                      type: string
                      enum:
                        - Offer
                    entityId:
                      allOf:
                        - description: >-
                            The id of the approval entity (e.g. the id of the
                            offer version).
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    approvalStepDefinitions:
                      $ref: >-
                        #/paths/~1approvalDefinition.update/post/requestBody/content/application~1json/schema/properties/approvalStepDefinitions
                  required:
                    - entityType
                    - entityId
                    - approvalStepDefinitions
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ArchiveReasonListResponse:
      oneOf:
        - title: Success Response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        $ref: >-
                          #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                      text:
                        type: string
                        example: Too inexperienced
                      reasonType:
                        enum:
                          - RejectedByCandidate
                          - RejectedByOrg
                          - Other
                        example: RejectedByOrg
                        type: string
                      isArchived:
                        $ref: >-
                          #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                    required:
                      - id
                      - text
                      - reasonType
                      - isArchived
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    AssessmentAddCompletedToCandidateResponse:
      oneOf:
        - title: Success Response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: object
                  required:
                    - assessmentTypeId
                    - assessmentId
                    - assessmentName
                    - candidateId
                    - metadata
                  properties:
                    applicationId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    assessmentId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    assessmentName:
                      type: string
                      example: test-assessment-name
                    assessmentTypeId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    candidateId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    metadata:
                      type: array
                      items:
                        $ref: >-
                          #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/metadata/items
                    result:
                      $ref: >-
                        #/paths/~1assessment.update/post/requestBody/content/application~1json/schema/properties/metadata/items
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    AssessmentPartnerStartResponse:
      oneOf:
        - title: Success Response
          type: object
        - type: object
          required:
            - success
            - results
          properties:
            success:
              type: boolean
            results:
              required:
                - assessment_id
                - _comment
                - update_request
                - metadata
              properties:
                assessment_id:
                  type: string
                _comment:
                  type: string
                update_request:
                  required:
                    - timestamp
                    - assessment_id
                    - assessment_profile_url
                    - assessment_status
                  properties:
                    timestamp:
                      type: number
                    assessment_id:
                      type: string
                    assessment_profile_url:
                      required:
                        - identifier
                        - type
                        - label
                        - value
                      properties:
                        identifier:
                          type: string
                        type:
                          type: string
                        label:
                          type: string
                        value:
                          type: string
                      type: object
                    assessment_status:
                      required:
                        - identifier
                        - type
                        - label
                        - value
                      properties:
                        identifier:
                          type: string
                        type:
                          type: string
                        label:
                          type: string
                        value:
                          type: string
                      type: object
                  type: object
                metadata:
                  type: array
                  items:
                    type: object
                    properties:
                      identifier:
                        type: string
                      type:
                        type: string
                      label:
                        type: string
                      value:
                        type: string
    AssessmentPartnerStart409Response:
      oneOf:
        - title: Error Response
          type: object
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    AssessmentListPartnerSupportResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    allOf:
                      - description: List of available assessments
                        type: object
                        properties:
                          description:
                            type: string
                          assessment_type_id:
                            allOf:
                              - $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          name:
                            type: string
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    AssessmentUpdateStatusResponse:
      oneOf:
        - title: Success Response
          type: object
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    AssessmentCancelPartnerAssessmentResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    properties:
                      assessment_id:
                        allOf:
                          - description: The id of the started assessment to cancel
                          - $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateAddTagResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateAnonymizeCandidateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - description: The anonymized candidate
            - properties:
                results:
                  $ref: >-
                    #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateCreateNewCandidateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateCreateNoteResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    createdAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                    content:
                      type: string
                      example: >-
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit,
                        sed do eiusmod tempor incididunt ut labore et dolore
                        magna aliqua.
                    author:
                      type: object
                      properties:
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        firstName:
                          type: string
                          example: Joey
                        lastName:
                          type: string
                          example: Joe
                        email:
                          $ref: >-
                            #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/email/allOf/0
                      required:
                        - id
                        - firstName
                        - lastName
                  required:
                    - id
                    - createdAt
                    - author
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateGetByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    tags:
                      type: array
                      items:
                        $ref: >-
                          #/paths/~1candidateTag.create/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                    id:
                      description: The unique id of the candidate
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    createdAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                    name:
                      description: The candidate's name
                      type: string
                      example: Adam Hart
                    primaryEmailAddress:
                      $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application/properties/candidate/properties/primaryEmailAddress
                    emailAddresses:
                      type: array
                      items:
                        $ref: >-
                          #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application/properties/candidate/properties/primaryEmailAddress
                    primaryPhoneNumber:
                      $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application/properties/candidate/properties/primaryEmailAddress
                    phoneNumbers:
                      type: array
                      items:
                        $ref: >-
                          #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application/properties/candidate/properties/primaryEmailAddress
                    socialLinks:
                      type: array
                      items:
                        $ref: >-
                          #/paths/~1candidate.update/post/requestBody/content/application~1json/schema/properties/socialLinks/items
                    position:
                      type: string
                      example: Software Engineer
                    company:
                      type: string
                      example: Auction.com
                    school:
                      type: string
                      example: Princeton University
                    applicationIds:
                      description: >-
                        The unique ids of all applications associated with the
                        candidate
                      type: array
                      items:
                        $ref: >-
                          #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    resumeFileHandle:
                      description: The id, name and handle for the candidate's resume
                      $ref: >-
                        #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/fileHandles/items
                    fileHandles:
                      description: >-
                        The id, name and handle for each file associated with
                        the candidate
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          handle:
                            description: >-
                              You can use the file handle to retrieve the file's
                              URL by using the file.info endpoint.
                            type: string
                        required:
                          - id
                          - name
                          - handle
                        example:
                          id: 15d2624d-0a81-4f94-a2ed-94980f430b3f
                          name: resume.pdf
                          handle: eyJoYW5kbGUiOnsidHlwZSI6IkNhbmRpZGF0ZUZpbGUiLCJm
                    customFields:
                      description: All custom field values associated with the candidate
                      type: array
                      items:
                        $ref: >-
                          #/paths/~1customField.setValue/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                    profileUrl:
                      description: The url of the candidate's profile in Ashby
                      type: string
                    source:
                      description: The source that created this candidate
                      $ref: >-
                        #/paths/~1source.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items
                    creditedToUser:
                      description: The user who receives credit for this user
                      $ref: >-
                        #/paths/~1user.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
                    timezone:
                      description: The timezone of the candidate
                      type: string
                  required:
                    - id
                    - name
                    - emailAddresses
                    - phoneNumbers
                    - socialLinks
                    - tags
                    - applicationIds
                    - fileHandles
                    - profileUrl
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateListAllResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateGetAllNotesResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1candidate.createNote/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateSearchByEmailAndNameResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateUpdateExistingCandidateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateAttachFileResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateUploadResumeDataResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateTagCreateNewTagResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  description: A tag applied to a candidate
                  type: object
                  properties:
                    title:
                      type: string
                      example: Senior Candidate
                    id:
                      description: The tag's unique id
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    isArchived:
                      $ref: >-
                        #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                  required:
                    - id
                    - title
                    - isArchived
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CandidateTagListAllResponse:
      oneOf:
        - title: Success Response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1candidateTag.create/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CustomFieldCreateNewFieldResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    title:
                      type: string
                      example: Preferred Teams
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    objectType:
                      description: >-
                        The type of object in Ashby the custom field is
                        associated with
                      type: string
                      enum:
                        - Application
                        - Offer
                        - Candidate
                        - Job
                    isArchived:
                      $ref: >-
                        #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                    fieldType:
                      description: The type of data stored in the custom field
                      type: string
                      enum:
                        - MultiValueSelect
                        - NumberRange
                        - String
                        - Date
                        - ValueSelect
                        - Number
                        - Currency
                        - Boolean
                    selectableValues:
                      description: >
                        An array of values that can be selected for custom
                        fields with a fieldType of MultiValueSelect.

                        If the fieldType is not MultiValueSelect,
                        `selectableValues` will not be present in the response
                      type: array
                      items:
                        type: object
                        properties:
                          label:
                            type: string
                            example: Backend Engineering
                          value:
                            type: string
                            example: Backend Engineering
                          isArchived:
                            $ref: >-
                              #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                  required:
                    - id
                    - title
                    - objectType
                    - isArchived
                    - fieldType
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CustomFieldGetAllResponse:
      oneOf:
        - title: Success Response
          allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1customField.create/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    CustomFieldSetValueResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    title:
                      type: string
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    value:
                      oneOf:
                        - title: Boolean
                          type: boolean
                        - title: Currency
                          type: object
                          properties:
                            value:
                              type: number
                              example: 1000000
                              format: currency
                            currencyCode:
                              type: string
                              example: USD
                        - title: Date
                          type: string
                          format: date-time
                        - title: String
                          type: string
                        - title: MultiValueSelect
                          type: array
                          items:
                            type: string
                        - title: Number
                          type: number
                        - title: NumberRange
                          type: object
                          properties:
                            type:
                              type: string
                              example: number-range
                            minValue:
                              type: number
                              example: 10000
                            maxValue:
                              type: number
                              example: 100000
                        - title: ValueSelect
                          type: string
                  required:
                    - id
                    - title
                    - value
                  example:
                    title: Expected start date
                    id: 650e5f74-32db-4a0a-b61b-b9afece05023
                    value: '2022-11-10T19:47:56.795Z'
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    DepartmentTeamCreateNewDepartmentResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1department.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    DepartmentGetByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    name:
                      type: string
                      example: Engineering
                    isArchived:
                      $ref: >-
                        #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                    parentId:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                  required:
                    - id
                    - name
                    - isArchived
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    DepartmentGetAllDepartmentsResponse:
      oneOf:
        - title: Success Response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1department.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    FileGetUrlCandidateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    url:
                      description: The url of the file
                      type: string
                      example: https://s3.amazonaws.com/...
                  required:
                    - url
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    FeedbackFormDefinitionGetByIdResponse:
      oneOf:
        - title: Success Response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  allOf:
                    - $ref: >-
                        #/paths/~1referralForm.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/allOf/0
                    - type: object
                      properties:
                        organizationId:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        isDefaultForm:
                          type: boolean
                          example: true
                        interviewId:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: >-
                                The id of the interview associated with the
                                feedback form.
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    FeedbackFormDefinitionListAllResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1feedbackFormDefinition.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    HiringTeamAddMemberResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    email:
                      $ref: >-
                        #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/email/allOf/0
                    firstName:
                      type: string
                      example: Joey
                    lastName:
                      type: string
                      example: Joe
                    role:
                      type: string
                      example: Hiring Manager
                    userId:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                  required:
                    - userId
                    - firstName
                    - lastName
                    - email
                    - role
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    HiringTeamRoleListRolesResponse:
      oneOf:
        - title: 'namesOnly: true'
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    type: string
                  example:
                    - Recruiter
              required:
                - results
        - title: 'namesOnly: false'
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Recruiter
                      id:
                        $ref: >-
                          #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
    InterviewGetByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    title:
                      description: The interview's title
                      type: string
                      example: Technical Phone Interview
                    id:
                      allOf:
                        - description: The interview's id
                        - example: 3ae2b801-19f6-41ef-ad28-214bd731948f
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    isArchived:
                      allOf:
                        - $ref: >-
                            #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                        - description: Whether or not the interview is archived
                    instructionsHtml:
                      description: An HTML version of the interview's description
                      type: string
                      example: >
                        <p>The technical phone interview consists of a 60-minute
                        series of techincal questions</p>
                    instructionsPlain:
                      description: A plaintext version of the interview's description
                      type: string
                      example: >-
                        The technical phone interview consists of a 60-minute
                        series of techincal questions
                    jobId:
                      allOf:
                        - description: >
                            The id of the job the interview is associated with.
                            If null, the interview is not associated with a
                            specific job

                            and is a shared interview. Interviews that are
                            associated with particular jobs can only be
                            scheduled for applications

                            to those jobs.
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    feedbackFormDefinitionId:
                      allOf:
                        - description: >
                            The id of the feedback form definition associated
                            with the interview. 
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                  required:
                    - id
                    - title
                    - isArchived
                    - feedbackFormDefinitionId
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewGetAllResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1interview.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewEventListAssociatedEventsResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        allOf:
                          - $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          - description: The interview event's id
                          - example: 3ae2b801-19f6-41ef-ad28-214bd731948f
                      interviewId:
                        allOf:
                          - $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          - description: The interview's id
                          - example: ff6c7d9d-71e3-4c9c-88b1-28824980c276
                      interviewScheduleId:
                        allOf:
                          - $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          - description: The interview schedule's id
                          - example: 9d34f544-c150-4d70-91c4-e8b0b4a72846
                      interviewerUserIds:
                        type: array
                        items:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: An array of the ids of all interviewers
                            - example: caea4d97-331d-46b1-a8e3-6b821c2214ef
                      createdAt:
                        allOf:
                          - description: The time the interview event was created
                          - $ref: >-
                              #/paths/~1interviewEvent.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/endTime/allOf/1
                        type: string
                      startTime:
                        allOf:
                          - description: The time the interview event is scheduled to start
                          - $ref: >-
                              #/paths/~1interviewEvent.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/endTime/allOf/1
                        type: string
                      endTime:
                        allOf:
                          - description: The time the interview event is scheduled to end
                          - type: string
                            format: date-time
                            example: '2022-07-21T17:32:28Z'
                        type: string
                      feedbackLink:
                        description: The link to submit feedback for the interview event
                        type: string
                        format: uri
                        example: >-
                          https://app.ashbyhq.com/interview-briefings/4736b6d2-5c97-43a6-a7c6-0228bf079411/feedback
                      location:
                        description: The location of the interview
                        type: string
                        example: Google Meet
                      meetingLink:
                        description: >-
                          A link to the virtual meeting (if the interview is
                          being hosted virtually)
                        type: string
                        format: uri
                    required:
                      - id
                      - interviewId
                      - interviewScheduleId
                      - interviewerUserIds
                      - createdAt
                      - startTime
                      - endTime
                      - feedbackLink
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewPlanGetAllResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                moreDataAvailable:
                  $ref: >-
                    #/paths/~1source.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/moreDataAvailable
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Engineering Interview Plan
                      id:
                        $ref: >-
                          #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                      isArchived:
                        type: boolean
                        example: false
                    required:
                      - id
                      - title
                      - isArchived
            - required:
                - results
                - moreDataAvailable
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewScheduleCancelByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/interviewScheduleCreate/post/requestBody/content/application~1json/schema/properties/data/properties/interviewSchedule
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewScheduleCreateScheduledInterviewResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/interviewScheduleCreate/post/requestBody/content/application~1json/schema/properties/data/properties/interviewSchedule
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewScheduleGetAllSchedulesResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/webhooks/interviewScheduleCreate/post/requestBody/content/application~1json/schema/properties/data/properties/interviewSchedule
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewScheduleUpdateEventResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/interviewScheduleCreate/post/requestBody/content/application~1json/schema/properties/data/properties/interviewSchedule
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewStageListAllInOrderResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1interviewStage.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                moreDataAvailable:
                  $ref: >-
                    #/paths/~1source.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/moreDataAvailable
            - required:
                - results
                - moreDataAvailable
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    InterviewStageGetByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  allOf:
                    - type: object
                      properties:
                        title:
                          type: string
                          example: Offer
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        type:
                          type: string
                          example: Offer
                        orderInInterviewPlan:
                          type: integer
                          example: 1006
                          default: 0
                      required:
                        - id
                        - title
                        - type
                        - orderInInterviewPlan
                    - type: object
                      properties:
                        interviewPlanId:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                      required:
                        - interviewPlanId
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobNewCreateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobGetByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - type: object
              required:
                - success
              properties:
                success:
                  description: Whether the response is considered successful.
                  type: boolean
            - type: object
              properties:
                results:
                  allOf:
                    - $ref: >-
                        #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
                    - type: object
                      properties:
                        location:
                          allOf:
                            - $ref: >-
                                #/paths/~1location.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                            - description: >-
                                The location will only be included if the
                                `location` expand parameter is included when the
                                request is made.
                        openings:
                          description: >-
                            The openings array will only be included if the
                            `openings` expand parameter is included when the
                            request is made.
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
              required:
                - results
        - allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - title: Error response
            - type: object
              required:
                - errors
              properties:
                errors:
                  description: A list of error message strings.
                  type: array
                  items:
                    type: string
          example:
            success: false
            errors:
              - invalid_input
    JobGetListResponse:
      oneOf:
        - title: Success response
          allOf:
            - allOf:
                - $ref: >-
                    #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
                - title: Success response
                - type: object
                  properties:
                    moreDataAvailable:
                      description: >-
                        Whether the cursor can be used to fetch a subsequent
                        page of data.
                      type: boolean
                    nextCursor:
                      $ref: >-
                        #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/cursor
                    syncToken:
                      $ref: >-
                        #/paths/~1candidate.list/post/requestBody/content/application~1json/schema/properties/syncToken
            - type: object
              properties:
                results:
                  type: array
                  items:
                    allOf:
                      - $ref: >-
                          #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
                      - $ref: >-
                          #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/allOf/1
              required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobSetStatusByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobUpdateExistingResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobSearchByTitleResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobInterviewPlanGetInfoResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  description: A plan for conducting job interviews.
                  type: object
                  properties:
                    jobId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    interviewPlanId:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    stages:
                      type: array
                      items:
                        allOf:
                          - $ref: >-
                              #/paths/~1interviewStage.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/allOf/0
                          - type: object
                            properties:
                              activities:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    title:
                                      type: string
                                      example: Onsite Schedule
                                    id:
                                      $ref: >-
                                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                                    interviews:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          title:
                                            type: string
                                            example: System Architecture
                                          id:
                                            allOf:
                                              - $ref: >-
                                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                                          interviewId:
                                            allOf:
                                              - description: The id of the interview to be scheduled
                                              - $ref: >-
                                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                                          interviewDurationMinutes:
                                            type: number
                                            example: 30
                                          isSchedulable:
                                            type: boolean
                                            example: true
                                  required:
                                    - id
                                    - interviews
                            required:
                              - activities
                  required:
                    - jobId
                    - interviewPlanId
                    - stages
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobPostingGetIndividualResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  properties:
                    title:
                      description: The job posting's title
                      type: string
                      example: Posting Title
                    id:
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        - description: The job posting's id
                    descriptionPlain:
                      description: A plaintext version of the job posting's description
                      type: string
                      example: >+
                        This example role will be part of an example team and
                        will report to the example manager. The new hire plays a
                        critical role in various example workflows.




                        REQUIREMENTS

                         - Experience writing good example job descriptions

                         - Other exemplary skills

                         - 3-5 years prior experience in this role

                         - Motivation

                         - Great english language skills
                           


                        ABOUT THE TEAM



                        Example org is a leading software company. Example org
                        allows real-time collaboration on important example
                        workflows. Founded in 2012 we have over 10,000 customers
                        worldwide and are backed by fantastic investors such as
                        Sequoia Capital.

                    descriptionHtml:
                      description: An HTML version of the job posting's description
                      type: string
                      example: >-
                        <p style="min-height:1.5em">This example role will be
                        part of an example team and will report to the example
                        manager. The new hire plays a critical role in various
                        example workflows.</p><h1><br />Requirements</h1><ul
                        style="min-height:1.5em"><li><p
                        style="min-height:1.5em">Experience writing good example
                        job descriptions</p></li><li><p
                        style="min-height:1.5em">Other exemplary
                        skills</p></li><li><p style="min-height:1.5em">3-5 years
                        prior experience in this role</p></li><li><p
                        style="min-height:1.5em">Motivation</p></li><li><p
                        style="min-height:1.5em">Great english language
                        skills<br /></p></li></ul><h1>About the Team</h1><p
                        style="min-height:1.5em"><br />Example org is a leading
                        software company. Example org allows real-time
                        collaboration on important example workflows. Founded in
                        2012 we have over 10,000 customers worldwide and are
                        backed by fantastic investors such as Sequoia
                        Capital.</p><p style="min-height:1.5em"></p>
                    descriptionSocial:
                      description: >-
                        A shortened job posting description displayed when
                        shared on social media, limited to 200 characters.
                      type: string
                      example: >-
                        Example org allows real-time collaboration on important
                        example workflows. When you join as an example role,
                        part of the example team, you will perform a critical
                        role in various example workflows.
                    descriptionParts:
                      description: >-
                        The above description broken down into the actual
                        description on the job, and the Job Post Description
                        Opening and Closing that is set by the admin in Ashby's
                        Job Boards → Theme → Messaging settings.
                      type: object
                      properties:
                        descriptionOpening:
                          allOf:
                            - $ref: >-
                                #/paths/~1jobPosting.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/descriptionParts/properties/descriptionBody/allOf/0
                            - description: >-
                                The content set in the Job Post Description
                                Opening theme settings
                            - properties:
                                html:
                                  description: >-
                                    An HTML version of the Job Post Description
                                    Opening theme settings
                                  example: null
                                plain:
                                  description: >-
                                    A plaintext version of the Job Post
                                    Description Opening theme settings
                                  example: null
                        descriptionBody:
                          allOf:
                            - type: object
                              properties:
                                html:
                                  type: string
                                plain:
                                  type: string
                              required:
                                - html
                                - plain
                            - description: The description set on the job posting
                            - properties:
                                html:
                                  description: >-
                                    An HTML version of the description set on
                                    the job posting
                                  example: >-
                                    <p style="min-height:1.5em">This example
                                    role will be part of an example team and
                                    will report to the example manager. The new
                                    hire plays a critical role in various
                                    example workflows.</p><h1><br
                                    />Requirements</h1><ul
                                    style="min-height:1.5em"><li><p
                                    style="min-height:1.5em">Experience writing
                                    good example job descriptions</p></li><li><p
                                    style="min-height:1.5em">Other exemplary
                                    skills</p></li><li><p
                                    style="min-height:1.5em">3-5 years prior
                                    experience in this role</p></li><li><p
                                    style="min-height:1.5em">Motivation</p></li><li><p
                                    style="min-height:1.5em">Great english
                                    language skills<br /></p></li></ul></p>
                                plain:
                                  description: >-
                                    An plaintext version of the description set
                                    on the job posting
                                  example: >-
                                    This example role will be part of an example
                                    team and will report to the example manager.
                                    The new hire plays a critical role in
                                    various example
                                    workflows.\n\n\n\nREQUIREMENTS\n\n -
                                    Experience writing good example job
                                    descriptions\n\n - Other exemplary
                                    skills\n\n - 3-5 years prior experience in
                                    this role\n\n - Motivation\n\n - Great
                                    english language skills\n
                        descriptionClosing:
                          allOf:
                            - $ref: >-
                                #/paths/~1jobPosting.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/descriptionParts/properties/descriptionBody/allOf/0
                            - description: >-
                                The content set in the Job Post Description
                                Closing theme settings
                            - properties:
                                html:
                                  description: >-
                                    An HTML version of the Job Post Description
                                    Closing theme settings
                                  example: >-
                                    <h1>About the Team</h1><p
                                    style="min-height:1.5em"><br />Example org
                                    is a leading software company. Example org
                                    allows real-time collaboration on important
                                    example workflows. Founded in 2012 we have
                                    over 10,000 customers worldwide and are
                                    backed by fantastic investors such as
                                    Sequoia Capital.</p>
                                plain:
                                  description: >-
                                    A plaintext version of the Job Post
                                    Description Closing theme settings
                                  example: >-
                                    ABOUT THE TEAM\n\n\nExample org is a leading
                                    software company. Example org allows
                                    real-time collaboration on important example
                                    workflows. Founded in 2012 we have over
                                    10,000 customers worldwide and are backed by
                                    fantastic investors such as Sequoia
                                    Capital.\n\n
                      required:
                        - description
                    departmentName:
                      description: >-
                        The name of the department associated with the job
                        posting
                      type: string
                      example: Test Team
                    teamName:
                      description: The name of the team associated with the job posting
                      type: string
                      example: Test Team
                    jobId:
                      allOf:
                        - description: The id of the job associated with the job posting
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    locationName:
                      description: >-
                        The name of the primary location associated with the job
                        posting
                      type: string
                      example: Springfield
                    locationIds:
                      $ref: >-
                        #/webhooks/jobPostingUpdate/post/requestBody/content/application~1json/schema/properties/data/properties/jobPosting/properties/locationIds
                    linkedData:
                      description: >-
                        An object that can be used to populate "rich results" in
                        search engines.
                        (https://developers.google.com/search/docs/data-types/job-posting)
                      type: object
                      properties:
                        title:
                          type: string
                          example: Posting Title
                        description:
                          type: string
                          example: >-
                            <p style="min-height:1.5em">This example role will
                            be part of an example team and will report to the
                            example manager. The new hire plays a critical role
                            in various example workflows.</p><h1><br
                            />Requirements</h1><ul
                            style="min-height:1.5em"><li><p
                            style="min-height:1.5em">Experience writing good
                            example job descriptions</p></li><li><p
                            style="min-height:1.5em">Other exemplary
                            skills</p></li><li><p style="min-height:1.5em">3-5
                            years prior experience in this role</p></li><li><p
                            style="min-height:1.5em">Motivation</p></li><li><p
                            style="min-height:1.5em">Great english language
                            skills<br /></p></li></ul><h1>About the Team</h1><p
                            style="min-height:1.5em"><br />Example org is a
                            leading software company. Example org allows
                            real-time collaboration on important example
                            workflows. Founded in 2012 we have over 10,000
                            customers worldwide and are backed by fantastic
                            investors such as Sequoia Capital.</p><p
                            style="min-height:1.5em"></p>
                        '@context':
                          type: string
                          example: https://schema.org/
                        '@type':
                          type: string
                          example: JobPosting
                        identifier:
                          type: object
                          properties:
                            '@type':
                              type: string
                              example: PropertyValue
                            name:
                              type: string
                              example: Posting Title
                            value:
                              type: string
                              example: 4be0e8c0-9323-43a0-ab48-506789ab9c16
                        datePosted:
                          type: string
                          example: '2022-07-22'
                        hiringOrganization:
                          type: object
                          properties:
                            '@type':
                              type: string
                              example: Organization
                            name:
                              type: string
                              example: Example org
                            sameAs:
                              type: string
                              example: 34d7c77d-e9b2-5a09-a882-cb23a225f2ec.com
                        jobLocation:
                          type: object
                          properties:
                            '@type':
                              type: string
                              example: Place
                            address:
                              type: object
                              properties:
                                '@type':
                                  type: string
                                  example: PostalAddress
                        employmentType:
                          type: string
                          example: FULL_TIME
                    publishedDate:
                      description: The date the job posting was published
                      type: string
                      example: '2022-07-22'
                    applicationDeadline:
                      description: >-
                        The date and time when applications will no longer be
                        accepted
                      type: string
                      example: '2024-08-12T20:00:00.000Z'
                      format: date
                    address:
                      allOf:
                        - description: The address of the job posting
                        - $ref: >-
                            #/paths/~1location.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/address
                    isRemote:
                      type: boolean
                    employmentType:
                      $ref: >-
                        #/webhooks/jobPostingUpdate/post/requestBody/content/application~1json/schema/properties/data/properties/jobPosting/properties/employmentType
                    applicationFormDefinition:
                      allOf:
                        - $ref: >-
                            #/paths/~1offer.start/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/properties/formDefinition
                        - description: >-
                            See the guide on Creating a custom careers page
                            (https://developers.ashbyhq.com/docs/creating-a-custom-careers-page)
                    isListed:
                      description: Whether or not the job posting is listed
                      type: boolean
                      example: true
                    externalLink:
                      description: The external link to the job posting
                      type: string
                      example: >-
                        https://jobs.ashbyhq.com/70b51cc4-7f34-5567-92bd-96f354f7439a/4be0e8c0-9323-43a0-ab48-506789ab9c16
                    compensation:
                      description: >-
                        Compensation ranges associated with the job posting and
                        related settings
                      type: object
                      required:
                        - compensationTiers
                        - shouldDisplayCompensationOnJobBoard
                      properties:
                        compensationTierSummary:
                          description: >
                            A summary of *all* the job posting's valid
                            `compensationTiers` in the same format shown on

                            Ashby-hosted Job Boards
                          type: string
                          example: >-
                            $72K – $270K • 1% – 2.25% • Offers Bonus • Multiple
                            Ranges
                        summaryComponents:
                          description: >
                            The maximum and minimum compensation ranges across
                            *all* the posting's `compensationTiers`

                            that make up `compensationTierSummary`
                          type: array
                          items:
                            description: >
                              A part of a compensation tier that represents one
                              specific type of compensation, e.g. the "Salary"

                              or the "Bonus."
                            type: object
                            properties:
                              summary:
                                description: >-
                                  The summary of this component in the same
                                  format shown on Ashby-hosted Job Boards
                                type: string
                                example: €72K – €100K
                              compensationType:
                                description: >
                                  The type of compensation this component
                                  represents
                                type: string
                                enum:
                                  - Salary
                                  - EquityPercentage
                                  - EquityCashValue
                                  - Commission
                                  - Bonus
                                example: Salary
                              interval:
                                description: >-
                                  The frequency at which this compensation is
                                  given
                                type: string
                                enum:
                                  - NONE
                                  - 1 TIME
                                  - 1 HOUR
                                  - 1 DAY
                                  - 1 WEEK
                                  - 2 WEEK
                                  - 1 MONTH
                                  - 1 YEAR
                                  - 6 MONTH
                                  - 0.5 MONTH
                                  - 3 MONTH
                                example: 1 YEAR
                              currencyCode:
                                description: >
                                  For non `EquityPercentage` components, the
                                  [ISO
                                  4217](https://en.wikipedia.org/wiki/ISO_4217)

                                  currency code of the compensation range
                                type: string
                                example: EUR
                              label:
                                description: >-
                                  An optional label that describes this
                                  compensation range to applicants
                                type: string
                                example: Estimated Salary
                              minValue:
                                description: The lower end of the compensation range
                                type: number
                                example: 72000.1
                              maxValue:
                                description: The higher end of the compensation range
                                type: number
                                example: 100000
                            required:
                              - compensationType
                              - interval
                              - summary
                          example:
                            - summary: €72K – €270K
                              componentType: Salary
                              interval: 1 YEAR
                              currencyCode: EUR
                              minValue: 72023.45
                              maxValue: 270450
                            - summary: 1% – 2.25%
                              componentType: EquityPercentage
                              interval: NONE
                              minValue: 1
                              maxValue: 2.25
                            - summary: Offers Bonus
                              componentType: Bonus
                              interval: 1 YEAR
                              minValue: null
                              maxValue: null
                        compensationTiers:
                          description: >-
                            The compensation ranges that can be offered to
                            applicants for this posting
                          type: array
                          items:
                            description: >-
                              A compensation range that can be offered to
                              candidates
                            type: object
                            properties:
                              components:
                                description: >-
                                  The individual components that make up this
                                  compensation range
                                type: array
                                items:
                                  description: >
                                    A part of a compensation tier that
                                    represents one specific type of
                                    compensation, e.g. the "Salary"

                                    or the "Bonus."
                                  type: object
                                  properties:
                                    id:
                                      allOf:
                                        - $ref: >-
                                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                                        - description: The component's unique id
                                  allOf:
                                    - $ref: >-
                                        #/paths/~1jobPosting.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/compensation/properties/summaryComponents/items
                                  required:
                                    - id
                                example:
                                  - summary: €72K – €100K
                                    id: fb8efeaa-bea1-4713-9012-cbd25fc3dc89
                                    componentType: Salary
                                    interval: 1 YEAR
                                    currencyCode: EUR
                                    minValue: 72023.45
                                    maxValue: 100000
                                  - summary: 1% – 2.511%
                                    id: 93c62578-ed5d-42dd-8186-64ad5ba5603d
                                    componentType: EquityPercentage
                                    interval: NONE
                                    minValue: 1
                                    maxValue: 2.511
                                  - summary: Offers Bonus
                                    id: null
                                    componentType: Bonus
                                    interval: 1 YEAR
                                    minValue: null
                                    maxValue: null
                              title:
                                description: >-
                                  A label that describes the entire range to
                                  applicants
                                type: string
                                example: Zone A
                              id:
                                allOf:
                                  - $ref: >-
                                      #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                                  - description: The compensation tier's unique id
                              additionalInformation:
                                description: >-
                                  Supplementary information about the
                                  compensation
                                type: string
                                example: Signing bonus available
                              tierSummary:
                                description: >
                                  A summary of the tiers's components in the
                                  same format shown on Ashby-hosted Job Boards
                                type: string
                                example: €72K – €100K • 1% – 2.511% • Offers Bonus
                            required:
                              - id
                              - components
                              - tierSummary
                          example:
                            - components:
                                - summary: €72K – €100K
                                  id: fb8efeaa-bea1-4713-9012-cbd25fc3dc89X
                                  componentType: Salary
                                  interval: 1 YEAR
                                  currencyCode: EUR
                                  minValue: 72023.45
                                  maxValue: 100000
                                - summary: 1% – 1.4%
                                  id: 93c62578-ed5d-42dd-8186-64ad5ba5603dX
                                  componentType: EquityPercentage
                                  interval: NONE
                                  minValue: 1
                                  maxValue: 1.4
                              title: Zone A
                              id: da53719f-a115-400b-9d30-9b875428f1e7
                              additionalInformation: null
                              tierSummary: €72K – €100K • 1% – 1.4%
                            - components:
                                - summary: €72K – €100K
                                  id: fb8efeaa-bea1-4713-9012-cbd25fc3dc89X
                                  componentType: Salary
                                  interval: 1 YEAR
                                  currencyCode: EUR
                                  minValue: 95010.12
                                  maxValue: 270450
                                - summary: 1.8% – 2.511%
                                  id: 93c62578-ed5d-42dd-8186-64ad5ba5603dX
                                  componentType: EquityPercentage
                                  interval: NONE
                                  minValue: 1.8
                                  maxValue: 2.511
                                - summary: Offers Bonus
                                  id: null
                                  componentType: Bonus
                                  interval: 1 YEAR
                                  minValue: null
                                  maxValue: null
                              title: Zone B
                              id: 81362ab1-739e-44f5-88d9-dbc5c731624c
                              additionalInformation: Commuter Benefits
                              tierSummary: >-
                                €95K – €270K • 1.8% – 2.511% • Offers Bonus •
                                Commuter Benefits
                        shouldDisplayCompensationOnJobBoard:
                          description: >
                            Whether the job posting's settings specify that
                            compensation should be shown to applicants
                          type: boolean
                          example: true
                    updatedAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                    applicationLimitCalloutHtml:
                      description: >-
                        An HTML version of any communication you would like to
                        show to applicants about the application limit for this
                        job posting
                      type: string
                      example: |
                        <div>
                          <p>Please Note: we have set up limits for applications for this role. It is in the <strong>Product Limit </strong> group. The following limits apply to applications for all jobs within this group:</p>
                          <ul>
                            <li>
                              <p>Candidates may not apply more than 1 time in any 60 day span for any job in the <strong>Product Limit </strong> Group.</p>
                            </li>
                          </ul>
                        </div>
                  required:
                    - id
                    - title
                    - descriptionPlain
                    - descriptionHtml
                    - descriptionParts
                    - departmentName
                    - teamName
                    - jobId
                    - locationName
                    - locationIds
                    - linkedData
                    - publishedDate
                    - employmentType
                    - applicationFormDefiniton
                    - isListed
                    - externalLink
                    - compensation
                    - updatedAt
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobPostingGetAllPublishedResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/webhooks/jobPostingUpdate/post/requestBody/content/application~1json/schema/properties/data/properties/jobPosting
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    JobPostingUpdateExistingResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1jobPosting.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    LocationCreateHierarchyResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1location.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    LocationDetailsByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    name:
                      type: string
                      example: Bay Area Office
                    isArchived:
                      $ref: >-
                        #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                    address:
                      type: object
                      properties:
                        postalAddress:
                          type: object
                          properties:
                            addressCountry:
                              type: string
                              example: United States
                            addressRegion:
                              type: string
                              example: California
                            addressLocality:
                              type: string
                              example: San Francisco
                    isRemote:
                      type: boolean
                      example: false
                  required:
                    - id
                    - name
                    - isArchived
                    - isRemote
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    LocationGetListResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1location.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                moreDataAvailable:
                  $ref: >-
                    #/paths/~1source.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/moreDataAvailable
            - required:
                - results
                - moreDataAvailable
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OfferCreateNewResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/webhooks/offerCreate/post/requestBody/content/application~1json/schema/properties/data/properties/offer
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OfferGetDetailsByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  $ref: >-
                    #/webhooks/offerCreate/post/requestBody/content/application~1json/schema/properties/data/properties/offer
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OfferGetListResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/webhooks/offerCreate/post/requestBody/content/application~1json/schema/properties/data/properties/offer
              required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OfferStartCreationInstanceResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    formDefinition:
                      type: object
                      properties:
                        sections:
                          type: array
                          items:
                            type: object
                            properties:
                              title:
                                type: string
                              descriptionHtml:
                                type: string
                              descriptionPlain:
                                type: string
                              fields:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    isRequired:
                                      type: boolean
                                      example: true
                                      default: true
                                    descriptionHtml:
                                      type: string
                                    descriptionPlain:
                                      type: string
                                    field:
                                      type: object
                                      properties:
                                        title:
                                          type: string
                                          example: Name
                                        id:
                                          $ref: >-
                                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                                        type:
                                          description: The type of the form definition field.
                                          type: string
                                          example: String
                                        path:
                                          type: string
                                          example: _systemfield_name
                                        humanReadablePath:
                                          type: string
                                          example: Name
                                        isNullable:
                                          type: boolean
                                          example: false
                                          default: true
                                        selectableValues:
                                          type: object
                                          properties:
                                            label:
                                              type: string
                                            value:
                                              type: string
                                          required:
                                            - label
                                            - value
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OfferProcessStartProcessForCandidateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  type: object
                  properties:
                    id:
                      allOf:
                        - description: The id of the started offer process
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    applicationId:
                      allOf:
                        - description: >-
                            The id of the application the offer process was
                            started for
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    status:
                      description: The status of the offer process
                      type: string
                      enum:
                        - WaitingOnOfferCreation
                        - WaitingOnApprovalStart
                        - WaitingOnOfferApproval
                        - WaitingOnCandidateResponse
                        - CandidateAccepted
                        - CandidateRejected
                        - OfferCancelled
                  required:
                    - id
                    - applicationId
                    - status
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsGetByUuidResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    openedAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                    closedAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                    isArchived:
                      $ref: >-
                        #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                    archivedAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                    openingState:
                      type: string
                      enum:
                        - Approved
                        - Closed
                        - Draft
                        - Filled
                        - Open
                    latestVersion:
                      type: object
                      properties:
                        description:
                          type: string
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        identifier:
                          type: string
                        authorId:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        createdAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        teamId:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        jobIds:
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        targetHireDate:
                          type: string
                        targetStartDate:
                          type: string
                        isBackfill:
                          type: boolean
                        employmentType:
                          $ref: >-
                            #/webhooks/jobPostingUpdate/post/requestBody/content/application~1json/schema/properties/data/properties/jobPosting/properties/employmentType
                        locationIds:
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        hiringTeam:
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1hiringTeam.addMember/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                      required:
                        - id
                        - identifier
                        - description
                        - authorId
                        - createdAt
                        - jobIds
                        - isBackfill
                        - employmentType
                        - locationIds
                        - hiringTeam
                  required:
                    - id
                    - isArchived
                    - openingState
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsGetListResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsSearchByIdentifierResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsCreateInstanceResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsAddJobActionResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsRemoveJobResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsSetStateResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsSetArchivedResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    OpeningsUpdateOpeningResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1opening.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ReferralCreateNewResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  $ref: >-
                    #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    ReferralFormGetDefaultFormResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  allOf:
                    - type: object
                      properties:
                        title:
                          description: The title of the form
                          type: string
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        isArchived:
                          $ref: >-
                            #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                        formDefinition:
                          $ref: >-
                            #/paths/~1offer.start/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/properties/formDefinition
                      required:
                        - id
                        - organizationId
                        - title
                        - isArchived
                        - isDefaultForm
                        - formDefinition
                    - type: object
                      properties:
                        organizationId:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        isDefaultForm:
                          type: boolean
                          example: true
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    SourceGetAllResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Applied
                      id:
                        $ref: >-
                          #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                      isArchived:
                        $ref: >-
                          #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                      sourceType:
                        type: object
                        properties:
                          title:
                            type: string
                            example: Inbound
                          id:
                            $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          isArchived:
                            $ref: >-
                              #/paths/~1interviewPlan.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items/properties/isArchived
                        required:
                          - id
                          - title
                          - isArchived
                    required:
                      - id
                      - title
                      - isArchived
                moreDataAvailable:
                  type: boolean
                  example: false
            - required:
                - results
                - moreDataAvailable
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    SurveyFormDefinitionGetDetailsByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  allOf:
                    - $ref: >-
                        #/paths/~1referralForm.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/allOf/0
                    - type: object
                      properties:
                        surveyType:
                          $ref: >-
                            #/paths/~1surveySubmission.list/post/requestBody/content/application~1json/schema/allOf/0/properties/surveyType
                  required:
                    - id
                    - title
                    - isArchived
                    - formDefinition
                    - surveyType
              required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    SurveyFormDefinitionGetAllResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1surveyFormDefinition.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    SurveyRequestGenerateUrlResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      allOf:
                        - description: |
                            The id of the survey request
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    candidateId:
                      allOf:
                        - description: |
                            The id of the candidate the survey request is for
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    applicationId:
                      allOf:
                        - description: >
                            The id of the application associated with the survey
                            request
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    surveyFormDefinitionId:
                      allOf:
                        - description: >
                            The id of the survey form the candidate will fill
                            out when they take the survey
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    surveyUrl:
                      description: |
                        The URL that the candidate can visit to take the survey.
                      type: string
                      example: >-
                        https://you.ashbyhq.com/ashby/survey/3f20b73e-abec-4d62-ba6f-04f2f985f7dd
                  required:
                    - id
                    - candidateId
                    - applicationId
                    - surveyFormDefinitionId
                    - surveyUrl
            - required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    SurveySubmissionListBySurveyTypeResponse:
      oneOf:
        - allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/webhooks/surveySubmit/post/requestBody/content/application~1json/schema/properties/data/properties/surveySubmission
          required:
            - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    UserGetByIdResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    firstName:
                      type: string
                      example: Test
                    lastName:
                      type: string
                      example: User
                    email:
                      $ref: >-
                        #/paths/~1candidate.create/post/requestBody/content/application~1json/schema/properties/email/allOf/0
                    globalRole:
                      type: string
                      enum:
                        - Organization Admin
                        - Elevated Access
                        - Limited Access
                        - External Recruiter
                    isEnabled:
                      type: boolean
                    updatedAt:
                      $ref: >-
                        #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                  required:
                    - id
                    - firstName
                    - lastName
                    - globalRole
                    - isEnabled
                    - updatedAt
              required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    UserGetAshbyUsersResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1user.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
              required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    UserSearchByEmailResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
              properties:
                results:
                  type: array
                  items:
                    $ref: >-
                      #/paths/~1user.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
              required:
                - results
        - title: Error response
          $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    WebhookCreateSettingResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    id:
                      $ref: >-
                        #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    enabled:
                      description: Whether or not the webhook setting is enabled.
                      type: boolean
                    requestUrl:
                      description: The URL the webhook will send requests to.
                      type: string
                      example: https://example.com/webhook
                    secretToken:
                      description: >
                        The secret token used to sign the webhook request. See
                        our documentation
                        [here](https://developers.ashbyhq.com/docs/authenticating-webhooks)
                        for more information.
                      type: string
                      example: 0c2f9463f87641919f8106a2c49d7a57
                    webhookType:
                      description: The type of webhook.
                      type: string
                      $ref: >-
                        #/paths/~1webhook.create/post/requestBody/content/application~1json/schema/properties/webhookType
                  required:
                    - id
                    - enabled
                    - requestUrl
                    - secretToken
                    - webhookType
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    WebhookUpdateSettingResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  $ref: >-
                    #/paths/~1webhook.create/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
    WebhookRemoveSettingResponse:
      oneOf:
        - title: Success response
          allOf:
            - $ref: >-
                #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/0
            - type: object
            - properties:
                results:
                  type: object
                  properties:
                    webhookId:
                      allOf:
                        - description: The id of the webhook setting that was deleted.
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
            - required:
                - results
        - $ref: >-
            #/paths/~1job.info/post/responses/200/content/application~1json/schema/oneOf/1
security:
  - BasicAuth: []
webhooks:
  applicationSubmit:
    post:
      tags:
        - Webhook Payloads
      summary: applicationSubmit
      operationId: applicationSubmitWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a candidate submits an application
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - applicationSubmit
                data:
                  type: object
                  properties:
                    application:
                      $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  applicationUpdate:
    post:
      tags:
        - Webhook Payloads
      summary: applicationUpdate
      operationId: applicationUpdateWebhook
      security:
        - WebhookSignature: []
      description: Triggered when there's an update to an application
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - applicationUpdate
                data:
                  type: object
                  properties:
                    application:
                      $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  candidateHire:
    post:
      tags:
        - Webhook Payloads
      summary: candidateHire
      operationId: candidateHireWebhook
      security:
        - WebhookSignature: []
      description: |
        Triggered when a candidate is hired. 
        Includes the application and most recent accepted offer (if one exists).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - candidateHire
                data:
                  type: object
                  properties:
                    application:
                      $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
                    offer:
                      $ref: >-
                        #/webhooks/offerCreate/post/requestBody/content/application~1json/schema/properties/data/properties/offer
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  candidateStageChange:
    post:
      tags:
        - Webhook Payloads
      summary: candidateStageChange
      operationId: candidateStageChangeWebhook
      security:
        - WebhookSignature: []
      description: Triggered when an a candidate change stages in an application
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - candidateStageChange
                data:
                  type: object
                  properties:
                    application:
                      $ref: >-
                        #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  candidateDelete:
    post:
      tags:
        - Webhook Payloads
      summary: candidateDelete
      operationId: candidateDeleteWebhook
      security:
        - WebhookSignature: []
      description: |
        Triggered when a candidate is deleted. 
        Includes the deleted candidate id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - candidateDelete
                data:
                  type: object
                  properties:
                    candidate:
                      type: object
                      properties:
                        id:
                          description: The unique id of the deleted candidate
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  candidateMerge:
    post:
      tags:
        - Webhook Payloads
      summary: candidateMerge
      operationId: candidateMergeWebhook
      security:
        - WebhookSignature: []
      description: |
        Triggered when a candidate is merged. 
        Includes the deleted candidate's id and merged candidate data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - candidateMerge
                data:
                  type: object
                  properties:
                    deletedCandidate:
                      type: object
                      properties:
                        id:
                          description: The unique id of the deleted candidate
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    mergedCandidate:
                      type: object
                      properties:
                        id:
                          description: The unique id of the final merged candidate
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  interviewPlanTransition:
    post:
      tags:
        - Webhook Payloads
      summary: interviewPlanTransition
      operationId: interviewPlanTransitionWebhook
      security:
        - WebhookSignature: []
      description: >-
        Triggered when a job's interview plan is switched to a different plan.
        Sends interview plan data and ids for the interview stage mappings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - interviewPlanTransition
                data:
                  type: object
                  properties:
                    jobId:
                      description: >-
                        The id of the job for which the interview plan has been
                        switched
                      allOf:
                        - $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                    fromInterviewPlan:
                      description: The interview plan the job was previously referencing
                      type: object
                      properties:
                        title:
                          type: string
                          example: Custom Interview Plan
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                      required:
                        - id
                        - title
                    toInterviewPlan:
                      description: The interview plan the job is now referencing
                      type: object
                      properties:
                        title:
                          type: string
                          example: Engineering Interview Plan
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                      required:
                        - id
                        - title
                    interviewStageMappings:
                      description: >-
                        The mapping of a stage from the previous interview plan
                        to a stage on the new interview plan
                      type: array
                      items:
                        type: object
                        properties:
                          fromInterviewStageId:
                            $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          toInterviewStageId:
                            $ref: >-
                              #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        required:
                          - id
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  interviewScheduleCreate:
    post:
      tags:
        - Webhook Payloads
      summary: interviewScheduleCreate
      operationId: interviewScheduleCreateWebhook
      security:
        - WebhookSignature: []
      description: The webhook is called when an interview schedule is created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - interviewScheduleCreate
                data:
                  type: object
                  properties:
                    interviewSchedule:
                      type: object
                      required:
                        - id
                        - status
                        - applicationId
                        - interviewStageId
                      properties:
                        id:
                          description: The id of the interview schedule
                          type: string
                        status:
                          description: The status of the interview schedule
                          type: string
                          enum:
                            - NeedsScheduling
                            - WaitingOnCandidateBooking
                            - WaitingOnCandidateAvailability
                            - CandidateAvailabilitySubmitted
                            - Scheduled
                            - WaitingOnFeedback
                            - Complete
                            - Cancelled
                        applicationId:
                          description: >-
                            The id of the application associated with the
                            interview schedule
                          type: string
                        interviewStageId:
                          description: >-
                            The id of the interview stage associated with the
                            interview schedule
                          type: string
                        interviewEvents:
                          description: >-
                            All scheduled interview events associated with the
                            interview schedule
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1interviewEvent.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  interviewScheduleUpdate:
    post:
      tags:
        - Webhook Payloads
      summary: interviewScheduleUpdate
      operationId: interviewScheduleUpdateWebhook
      security:
        - WebhookSignature: []
      description: >-
        The webhook is called when an interview schedule is updated, including
        when interviews that are part of the schedule are scheduled, updated, or
        cancelled.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - interviewScheduleUpdate
                data:
                  type: object
                  properties:
                    interviewSchedule:
                      $ref: >-
                        #/webhooks/interviewScheduleCreate/post/requestBody/content/application~1json/schema/properties/data/properties/interviewSchedule
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  jobCreate:
    post:
      tags:
        - Webhook Payloads
      summary: jobCreate
      operationId: jobCreateWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a job is created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - jobCreate
                data:
                  type: object
                  properties:
                    job:
                      type: object
                      properties:
                        title:
                          type: string
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        confidential:
                          type: boolean
                        status:
                          $ref: >-
                            #/paths/~1job.setStatus/post/requestBody/content/application~1json/schema/properties/status/allOf/1
                        employmentType:
                          type: string
                        locationId:
                          allOf:
                            - description: The id of the location of the job
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        departmentId:
                          allOf:
                            - description: >-
                                The id of the department or team associated with
                                the job
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        defaultInterviewPlanId:
                          allOf:
                            - description: >
                                The id of the default interview plan for this
                                job posting. 

                                A job cannot be opened without a default
                                interview plan.
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        interviewPlanIds:
                          type: array
                          items:
                            allOf:
                              - $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                              - description: >-
                                  The ids of all interview plans associated with
                                  a job
                        customFields:
                          description: An array of custom fields associated with the job
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1customField.setValue/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                        jobPostingIds:
                          type: array
                          items:
                            allOf:
                              - $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                              - description: >-
                                  The ids of all job postings associated with
                                  the job
                        customRequisitionId:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: The custom requisition id for a job
                        hiringTeam:
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1hiringTeam.addMember/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                        updatedAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        openedAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        closedAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                      required:
                        - id
                        - title
                        - confidential
                        - status
                        - employmentType
                        - updatedAt
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  jobUpdate:
    post:
      tags:
        - Webhook Payloads
      summary: jobUpdate
      operationId: jobUpdateWebhook
      security:
        - WebhookSignature: []
      description: >-
        Triggered when a job is updated. Also fires when a job's interview plan
        is changed.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - jobUpdate
                data:
                  type: object
                  properties:
                    job:
                      $ref: >-
                        #/webhooks/jobCreate/post/requestBody/content/application~1json/schema/properties/data/properties/job
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  jobPostingUpdate:
    post:
      tags:
        - Webhook Payloads
      summary: jobPostingUpdate
      operationId: jobPostingUpdateWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a job posting is updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - jobPostingUpdate
                data:
                  type: object
                  properties:
                    jobPosting:
                      type: object
                      properties:
                        title:
                          description: The job posting's title
                          type: string
                          example: Posting Title
                        id:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: The job posting's id
                        jobId:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: >-
                                The id of the job associated with the job
                                posting
                        departmentName:
                          description: >-
                            The name of the department associated with the job
                            posting
                          type: string
                          example: Engineering department
                        teamName:
                          description: >
                            The name of the team associated with the job
                            posting. `teamName` and `departmentName` will

                            be the same if the team does not have a parent team
                            specified.
                          type: string
                          example: Data engineering team
                        locationName:
                          description: >-
                            The name of the primary location associated with the
                            job posting
                          type: string
                          example: Springfield
                        locationIds:
                          description: >-
                            An object containing the ids of all locations
                            associated with the job posting
                          type: object
                          properties:
                            primaryLocationId:
                              $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            secondaryLocationIds:
                              type: array
                              items:
                                $ref: >-
                                  #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          required:
                            - primaryLocationId
                            - secondaryLocationId
                        employmentType:
                          type: string
                          enum:
                            - FullTime
                            - PartTime
                            - Intern
                            - Contract
                            - Temporary
                        isListed:
                          description: Whether or not the job posting is listed
                          type: boolean
                          example: true
                        publishedDate:
                          description: The date the job posting was published
                          type: string
                          example: '2021-11-19'
                        applicationDeadline:
                          description: >-
                            The date and time when applications will no longer
                            be accepted
                          type: string
                          example: '2024-08-12T20:00:00.000Z'
                          format: date
                        externalLink:
                          description: The external link to the job posting
                          type: string
                          example: >-
                            https://jobs.ashbyhq.com/6eec82ac-9713-512d-ac2e-405618935375/d5a6bc97-4259-4bc5-b3fe-6d3edfd538e3
                        compensationTierSummary:
                          description: >
                            A summary of *all* the job posting's valid
                            compensation tiers in the same format shown on

                            Ashby-hosted Job Boards
                          type: string
                          example: >-
                            $120K – $270K • 0% – 2.25% • Offers Bonus • Multiple
                            Ranges
                        shouldDisplayCompensationOnJobBoard:
                          description: >
                            Whether the job posting's settings specify that
                            compensation should be shown to applicants

                            when the posting is listed among other job postings
                          type: boolean
                          example: true
                        updatedAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                      required:
                        - id
                        - title
                        - jobId
                        - departmentName
                        - teamName
                        - locationName
                        - locationIds
                        - employmentType
                        - isListed
                        - publishedDate
                        - externalLink
                        - shouldDisplayCompensationOnJobBoard
                        - updatedAt
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  jobPostingPublish:
    post:
      tags:
        - Webhook Payloads
      summary: jobPostingPublish
      operationId: jobPostingPublishWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a job posting is published
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - jobPostingPublish
                data:
                  type: object
                  properties:
                    jobPosting:
                      $ref: >-
                        #/webhooks/jobPostingUpdate/post/requestBody/content/application~1json/schema/properties/data/properties/jobPosting
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  jobPostingUnpublish:
    post:
      tags:
        - Webhook Payloads
      summary: jobPostingUnpublish
      operationId: jobPostingUnpublishWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a job posting is unpublished
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - jobPostingUnpublish
                data:
                  type: object
                  properties:
                    jobPosting:
                      $ref: >-
                        #/webhooks/jobPostingUpdate/post/requestBody/content/application~1json/schema/properties/data/properties/jobPosting
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  offerCreate:
    post:
      tags:
        - Webhook Payloads
      summary: offerCreate
      operationId: offerCreateWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a new offer process is created for a candidate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - offerCreate
                data:
                  type: object
                  properties:
                    offer:
                      type: object
                      properties:
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        decidedAt:
                          type: string
                        applicationId:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: >-
                                The id of the application associated with the
                                offer
                        acceptanceStatus:
                          type: string
                          enum:
                            - Accepted
                            - Declined
                            - Pending
                            - Created
                            - Cancelled
                        latestVersion:
                          type: object
                          properties:
                            id:
                              $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            startDate:
                              allOf:
                                - $ref: >-
                                    #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                                - description: The start date of the offer
                            salary:
                              type: object
                              properties:
                                currencyCode:
                                  description: A valid ISO 4217 currency code
                                  type: string
                                value:
                                  description: >-
                                    An integer. The salary specified by the
                                    offer.
                                  type: number
                            createdAt:
                              allOf:
                                - $ref: >-
                                    #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                                - description: The time the offer was created
                            customFields:
                              type: array
                              items:
                                $ref: >-
                                  #/paths/~1customField.setValue/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                            fileHandles:
                              description: >-
                                An array of file handles associated with the
                                offer. If an offer letter has been generated,
                                this array includes the file handles for the
                                unsigned .pdf and .docx versions of the letter,
                                as well as for the signed .pdf if it exists.
                              type: array
                              items:
                                $ref: >-
                                  #/paths/~1candidate.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/properties/fileHandles/items
                          required:
                            - id
                            - createdAt
                        versions:
                          type: array
                          items:
                            $ref: >-
                              #/webhooks/offerCreate/post/requestBody/content/application~1json/schema/properties/data/properties/offer/properties/latestVersion
                      required:
                        - id
                        - applicationId
                        - acceptanceStatus
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  offerDelete:
    post:
      tags:
        - Webhook Payloads
      summary: offerDelete
      operationId: offerDeleteWebhook
      security:
        - WebhookSignature: []
      description: Triggered when an offer process is deleted
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - offerDelete
                data:
                  type: object
                  properties:
                    offer:
                      type: object
                      properties:
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        applicationId:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: >-
                                The id of the application the offer was
                                associated with.
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  offerUpdate:
    post:
      tags:
        - Webhook Payloads
      summary: offerUpdate
      operationId: offerUpdateWebhook
      security:
        - WebhookSignature: []
      description: Triggered when an offer is updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - offerUpdate
                data:
                  type: object
                  properties:
                    offer:
                      $ref: >-
                        #/webhooks/offerCreate/post/requestBody/content/application~1json/schema/properties/data/properties/offer
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  pushToHRIS:
    post:
      tags:
        - Webhook Payloads
      summary: pushToHRIS
      operationId: pushToHRISWebhook
      security:
        - WebhookSignature: []
      description: Triggered when a candidate is pushed to an HRIS system
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - pushToHRIS
                data:
                  type: object
                  properties:
                    application:
                      type: object
                      properties:
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        createdAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        updatedAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        status:
                          description: The status of the application
                          type: string
                          enum:
                            - Hired
                            - Archived
                            - Active
                            - Lead
                        customFields:
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1customField.setValue/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                        candidate:
                          description: The candidate associated with the application
                          type: object
                          properties:
                            id:
                              $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            name:
                              type: string
                              example: James
                            primaryEmailAddress:
                              type: object
                              properties:
                                value:
                                  description: >-
                                    The email address or phone number of the
                                    candidate
                                  type: string
                                type:
                                  description: The type of the contact info
                                  enum:
                                    - Personal
                                    - Work
                                    - Other
                                  type: string
                                isPrimary:
                                  description: >-
                                    Whether the contact info is the primary
                                    email or phone number
                                  type: boolean
                              required:
                                - value
                                - type
                                - isPrimary
                              example:
                                value: test@ashbyhq.com
                                type: Work
                                isPrimary: true
                            primaryPhoneNumber:
                              allOf:
                                - $ref: >-
                                    #/webhooks/pushToHRIS/post/requestBody/content/application~1json/schema/properties/data/properties/application/properties/candidate/properties/primaryEmailAddress
                                - example:
                                    value: 222-222-3344
                                    type: Work
                                    isPrimary: true
                          required:
                            - id
                            - name
                        currentInterviewStage:
                          $ref: >-
                            #/paths/~1interviewStage.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                        source:
                          $ref: >-
                            #/paths/~1source.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results/items
                        archiveReason:
                          $ref: >-
                            #/paths/~1archiveReason.list/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/items
                        job:
                          type: object
                          properties:
                            title:
                              type: string
                              example: First Designer
                            id:
                              type: string
                              example: 4071538b-3cac-4fbf-ac76-f78ed250ffdd
                            locationId:
                              $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            departmentId:
                              $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                          required:
                            - id
                            - title
                        creditedToUser:
                          $ref: >-
                            #/paths/~1user.info/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results
                        hiringTeam:
                          type: array
                          items:
                            $ref: >-
                              #/paths/~1hiringTeam.addMember/post/responses/200/content/application~1json/schema/oneOf/0/allOf/2/properties/results
                        appliedViaJobPostingId:
                          allOf:
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                            - description: >-
                                The id of the job posting the candidate applied
                                through
                      required:
                        - id
                        - createdAt
                        - updatedAt
                        - candidate
                        - status
                        - currentInterviewStage
                        - job
                        - hiringTeam
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  ping:
    post:
      tags:
        - Webhook Payloads
      summary: ping
      operationId: pingWebhook
      security:
        - WebhookSignature: []
      description: Called to check that the webhook URL is live
      requestBody:
        content:
          application/json:
            schema:
              properties:
                action:
                  type: string
                  enum:
                    - ping
                data:
                  type: object
                  properties:
                    webhookActionType:
                      description: >-
                        The type of action that triggered the webhook—in this
                        case, a ping
                      type: string
                      enum:
                        - ping
                  required:
                    - webhookActionType
              required:
                - action
                - data
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  surveySubmit:
    post:
      tags:
        - Webhook Payloads
      summary: surveySubmit
      operationId: surveySubmitWebhook
      security:
        - WebhookSignature: []
      description: >
        The webhook is triggered when a candidate submits a non-anonymous
        survey. It will not fire for anonymous survey submissions.


        Depending on the type of survey that was submitted, survey responses may
        be included in the webhook payload:
          - **Questionnaires**, **Candidate Data Consent** - Survey responses will be included in the payload.
          - **Candidate Experience** - If the submission is not anonymous, survey responses will be included in the payload. If the submission is anonymous, the webhook will not trigger.
          - **Diversity Surveys**, **EEOC Surveys** - Survey responses will never be included in the payload.

        If survey responses are included in the payload, the `submittedValues`
        field will contain the submitted answers in an object where each key is
        the path of the field and the value is the value submitted for that
        field.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - data
              properties:
                action:
                  type: string
                  enum:
                    - surveySubmit
                data:
                  type: object
                  properties:
                    surveySubmission:
                      type: object
                      properties:
                        id:
                          $ref: >-
                            #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        submittedAt:
                          $ref: >-
                            #/paths/~1referral.create/post/requestBody/content/application~1json/schema/properties/createdAt/allOf/1
                        candidateId:
                          allOf:
                            - description: The id of the candidate who submitted the survey
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        applicationId:
                          allOf:
                            - description: >-
                                The id of the application that the survey
                                submission is associated with
                            - $ref: >-
                                #/paths/~1candidate.createNote/post/requestBody/content/application~1json/schema/properties/candidateId
                        surveyType:
                          $ref: >-
                            #/paths/~1surveySubmission.list/post/requestBody/content/application~1json/schema/allOf/0/properties/surveyType
                        formDefinition:
                          $ref: >-
                            #/paths/~1offer.start/post/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/results/properties/formDefinition
                        submittedValues:
                          type: object
                          example:
                            _systemfield_name: Joe Smith
                      required:
                        - id
                        - submittedAt
                        - candidateId
                        - surveyType
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
x-readme:
  explorer-enabled: true
  proxy-enabled: true
_id: 65c4fae0fd3df5002cba9b10
