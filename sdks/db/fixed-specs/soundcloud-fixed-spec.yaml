openapi: 3.0.3
info:
  title: SoundCloud Public API Specification
  description: >-
    Discover and play over 320 million music tracks. Join the world’s largest
    online community of artists, bands, DJs, and audio creators.
  version: 1.0.0
  contact:
    name: API issue tracker
    url: https://github.com/soundcloud/api
  termsOfService: https://developers.soundcloud.com/docs/api/terms-of-use
servers:
  - url: https://api.soundcloud.com
tags:
  - description: Own User Endpoints.
    name: me
  - description: Tracks Endpoints.
    name: tracks
  - description: SoundCloud Users Endpoints.
    name: users
  - description: Playlists Endpoints.
    name: playlists
  - description: Liking Tracks & Playlists.
    name: likes
  - description: Reposting Tracks & Playlists.
    name: reposts
  - description: Search Endpoints.
    name: search
  - description: Authentication and Authorization Endpoints.
    name: oauth
  - description: Miscellaneous Endpoints.
    name: miscellaneous
paths:
  /connect:
    get:
      tags:
        - oauth
      summary: >-
        The OAuth2 authorization endpoint. Your app redirects a user to this
        endpoint, allowing them to delegate access to their account.
      operationId: Oauth_authorizeUser
      description: >
        <h3>Security Advice</h3>

        * [OAuth Authorization Code
        flow](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-16#section-2.1.1)
        (`response_type=code`) is the only allowed method of authorization.

        * Use the `state` parameter for [CSRF
        protection](https://tools.ietf.org/html/draft-ietf-oauth-security-topics-16#section-4.7).
        Pass a sufficient  random nonce here and verify this nonce again after
        retrieving the token.
      parameters:
        - $ref: '#/components/parameters/client_id'
        - $ref: '#/components/parameters/redirect_uri'
        - $ref: '#/components/parameters/response_type'
        - $ref: '#/components/parameters/state'
      responses:
        '200':
          description: OK
        '302':
          description: Redirect to connect portal
          headers:
            Location:
              description: >-
                Redirect to connect poral
                "https://secure.soundcloud.com/connect"
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  /oauth2/token:
    post:
      tags:
        - oauth
      summary: >-
        This endpoint accepts POST requests and is used to provision access
        tokens once a user has authorized your application.
      operationId: Oauth_provisionAccessToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OAuthToken'
      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              examples:
                ExpiringToken:
                  $ref: '#/components/examples/ExpiringToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthProvisionAccessTokenResponse'
              examples:
                ErrorInvalidGrant:
                  $ref: '#/components/examples/ErrorInvalidGrant'
                ErrorUnsupportedGrant:
                  $ref: '#/components/examples/ErrorUnsupportedGrant'
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthProvisionAccessToken401Response'
              examples:
                ErrorInvalidGrant:
                  value:
                    code: 401
                    message: invalid_grant
                    link: >-
                      https://developers.soundcloud.com/docs/api/guide#authentication
                ErrorInvalidScope:
                  $ref: '#/components/examples/ErrorInvalidScope'
                ErrorInvalidClient:
                  $ref: '#/components/examples/ErrorInvalidClient'
  /me:
    get:
      tags:
        - me
      summary: Returns the authenticated user’s information.
      operationId: Me_getUserInformation
      security:
        - AuthHeader: []
      responses:
        '200':
          $ref: '#/components/responses/Me'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/activities:
    get:
      tags:
        - me
      summary: Returns the authenticated user's activities.
      operationId: Me_getActivities
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Activities'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/activities/all/own:
    get:
      tags:
        - me
      summary: Recent the authenticated user's activities.
      operationId: Me_getRecentActivities
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Activities'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/activities/tracks:
    get:
      tags:
        - me
      summary: Returns the authenticated user's recent track related activities.
      operationId: Me_getRecentTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Activities'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/likes/tracks:
    get:
      tags:
        - me
      summary: Returns a list of favorited or liked tracks of the authenticated user.
      operationId: Me_listLikedTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/access_explicit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/likes/playlists:
    get:
      tags:
        - me
      summary: >-
        Returns a list of favorited or liked playlists of the authenticated
        user.
      operationId: Me_getLikedPlaylists
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Playlists'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/followings:
    get:
      tags:
        - me
      summary: Returns a list of users who are followed by the authenticated user.
      operationId: Me_getFollowedUsers
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/followings/tracks:
    get:
      tags:
        - me
      summary: >-
        Returns a list of recent tracks from users followed by the authenticated
        user.
      operationId: Me_listFollowedTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/TracksList'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/followings/{user_id}:
    get:
      tags:
        - me
      summary: >-
        Returns a user who is followed by the authenticated user. (use
        /users/{user_id} instead, to fetch the user details)
      operationId: Me_getFollowedUser
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      deprecated: true
    put:
      tags:
        - me
      summary: Follows a user.
      operationId: Me_followUser
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id_to_follow'
      responses:
        '200':
          $ref: '#/components/responses/Successful'
        '201':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - me
      summary: Deletes a user who is followed by the authenticated user.
      operationId: Me_deleteFollowedUser
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id_to_follow'
      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              examples:
                '200':
                  $ref: '#/components/examples/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /me/followers:
    get:
      tags:
        - me
      summary: Returns a list of users who are following the authenticated user.
      operationId: Me_getFollowersList
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /me/followers/{follower_id}:
    get:
      tags:
        - me
      summary: >-
        Returns a user who is following the authenticated user. (use
        /users/{user_id} instead, to fetch the user details)
      operationId: Me_getFollowerById
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/follower_id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
      deprecated: true
  /me/playlists:
    get:
      tags:
        - me
      summary: Returns user’s playlists (sets).
      operationId: Me_listPlaylistsInfoTracksOwner
      security:
        - AuthHeader: []
      description: Returns playlist info, playlist tracks and tracks owner info.
      parameters:
        - $ref: '#/components/parameters/show_tracks'
        - $ref: '#/components/parameters/linked_partitioning'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Playlists'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /me/tracks:
    get:
      tags:
        - me
      summary: Returns a list of user's tracks.
      operationId: Me_listUserTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /tracks:
    get:
      tags:
        - search
      summary: Performs a track search based on a query
      operationId: Search_byQuery
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/ids'
        - $ref: '#/components/parameters/genres'
        - $ref: '#/components/parameters/tags'
        - $ref: '#/components/parameters/bpm'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
    post:
      tags:
        - tracks
      summary: Uploads a new track.
      operationId: Tracks_uploadNewTrack
      security:
        - AuthHeader: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TracksUploadNewTrackRequest'
            examples:
              default:
                $ref: '#/components/examples/TrackDataRequest'
          multipart/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TracksUploadNewTrackRequest1'
      responses:
        '201':
          $ref: '#/components/responses/Track'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /playlists:
    get:
      tags:
        - search
      summary: Performs a playlist search based on a query
      operationId: Search_byQuery
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/show_tracks'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Playlists'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - playlists
      summary: Creates a playlist.
      operationId: Playlists_createNewPlaylist
      security:
        - AuthHeader: []
      requestBody:
        description: Create Playlist request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdatePlaylistRequest'
            examples:
              default:
                $ref: '#/components/examples/CreateUpdatePlaylistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PlaylistsCreateNewPlaylistRequest'
            examples:
              default:
                $ref: '#/components/examples/CreateUpdatePlaylistFormRequest'
      responses:
        '201':
          $ref: '#/components/responses/Playlist'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /users:
    get:
      tags:
        - search
      summary: Performs a user search based on a query
      operationId: Search_userQuery
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/ids'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /playlists/{playlist_id}:
    get:
      tags:
        - playlists
      summary: Returns a playlist.
      operationId: Playlists_getPlaylistById
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/playlist_id'
        - $ref: '#/components/parameters/secret_token'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/show_tracks'
      responses:
        '200':
          $ref: '#/components/responses/Playlist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - playlists
      summary: Updates a playlist.
      operationId: Playlists_updatePlaylistById
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/fake_playlist_id'
      requestBody:
        description: Playlist payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdatePlaylistRequest'
            examples:
              default:
                $ref: '#/components/examples/CreateUpdatePlaylistRequest'
      responses:
        '200':
          $ref: '#/components/responses/Playlist'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - playlists
      summary: Deletes a playlist.
      operationId: Playlists_deletePlaylist
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/fake_playlist_id'
      responses:
        '200':
          description: Success
        '404':
          $ref: '#/components/responses/NotFound'
  /playlists/{playlist_id}/tracks:
    get:
      tags:
        - playlists
      summary: Returns tracks under a playlist.
      operationId: Playlists_getTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/playlist_id'
        - $ref: '#/components/parameters/secret_token'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /playlists/{playlist_id}/reposters:
    get:
      tags:
        - playlists
      summary: Returns a collection of playlist's reposters.
      operationId: Playlists_listReposters
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/playlist_id'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /tracks/{track_id}:
    get:
      tags:
        - tracks
      summary: Returns a track.
      operationId: Tracks_getById
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
        - $ref: '#/components/parameters/secret_token'
      responses:
        '200':
          $ref: '#/components/responses/Track'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - tracks
      summary: Updates a track's information.
      operationId: Tracks_updateTrackInformation
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
      requestBody:
        description: Track payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackMetadataRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TrackDataRequest'
          multipart/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TrackDataRequest'
      responses:
        '200':
          $ref: '#/components/responses/Track'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - tracks
      summary: Deletes a track.
      operationId: Tracks_deleteTrack
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
      responses:
        '200':
          description: Success
        '404':
          $ref: '#/components/responses/NotFound'
  /tracks/{track_id}/streams:
    get:
      tags:
        - tracks
      summary: Returns a track's streamable URLs
      operationId: Tracks_getStreamableUrls
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
        - $ref: '#/components/parameters/secret_token'
      responses:
        '200':
          $ref: '#/components/responses/Streams'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /tracks/{track_id}/comments:
    get:
      tags:
        - tracks
      summary: Returns the comments posted on the track(track_id).
      operationId: Tracks_getComments
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Comments'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - tracks
      summary: Returns the newly created comment on success
      operationId: Tracks_createComment
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
      requestBody:
        description: |
          Body of a comment
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/TracksCreateCommentRequest'
      responses:
        '201':
          $ref: '#/components/responses/Comment'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /tracks/{track_id}/favoriters:
    get:
      tags:
        - tracks
      summary: Returns a list of users who have favorited or liked the track.
      operationId: Tracks_getFavoriters
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /tracks/{track_id}/reposters:
    get:
      tags:
        - tracks
      summary: Returns a collection of track's reposters.
      operationId: Tracks_listReposters
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /tracks/{track_id}/related:
    get:
      tags:
        - tracks
      summary: Returns all related tracks of track on SoundCloud.
      operationId: Tracks_getRelatedTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/track_id'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /resolve:
    get:
      tags:
        - miscellaneous
      summary: >-
        Resolves soundcloud.com and on.soundcloud.com URLs to Resource URLs to
        use with the API.
      operationId: Miscellaneous_resolveSoundcloudUrls
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/url'
      responses:
        '200':
          description: OK
        '302':
          $ref: '#/components/responses/Found'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Returns a user.
      operationId: Users_getUser
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{user_id}/favorites:
    get:
      tags:
        - users
      summary: >-
        Returns a list of user's favorited or liked tracks. (use
        /users/:userId/likes/tracks instead, to fetch a user's likes)
      operationId: Users_listFavorites
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '401':
          $ref: '#/components/responses/Unauthorized'
      deprecated: true
  /users/{user_id}/followers:
    get:
      tags:
        - users
      summary: Returns a list of user’s followers.
      operationId: Users_getFollowers
      security:
        - AuthHeader: []
      description: Returns a list of users that follows (user_id).
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/{user_id}/followings:
    get:
      tags:
        - users
      summary: Returns a list of user’s followings.
      operationId: Users_getUserFollowings
      security:
        - AuthHeader: []
      description: Returns list of users that (user_id) follows.
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/{user_id}/followings/{following_id}:
    get:
      tags:
        - users
      summary: >-
        Returns a user's following. (use /users/{user_id} instead, to fetch the
        user details)
      operationId: Users_getFollowingById
      security:
        - AuthHeader: []
      description: Returns (following_id) that is followed by (user_id).
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/following_id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      deprecated: true
  /users/{user_id}/playlists:
    get:
      tags:
        - users
      summary: Returns a list of user's playlists.
      operationId: Users_getUserPlaylists
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/show_tracks'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Playlists'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/{user_id}/tracks:
    get:
      tags:
        - users
      summary: Returns a list of user's tracks.
      operationId: Users_getUserTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/{user_id}/web-profiles:
    get:
      tags:
        - users
      summary: >-
        Returns list of user's links added to their profile (website, facebook,
        instagram).
      operationId: Users_getUserWebProfiles
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/WebProfiles'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/{user_id}/likes/tracks:
    get:
      tags:
        - users
      summary: Returns a list of user's liked tracks.
      operationId: Users_listLikedTracks
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/access'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Tracks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{user_id}/likes/playlists:
    get:
      tags:
        - users
      summary: Returns a list of user's liked playlists.
      operationId: Users_listLikedPlaylists
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/linked_partitioning'
      responses:
        '200':
          $ref: '#/components/responses/Playlists'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /likes/tracks/{track_id}:
    post:
      tags:
        - likes
      summary: Likes a track.
      operationId: Likes_trackAction
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/test_track_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      tags:
        - likes
      summary: Unlikes a track.
      operationId: Likes_unlikeTrack
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/test_track_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /likes/playlists/{playlist_id}:
    post:
      tags:
        - likes
      summary: Likes a playlist.
      operationId: Likes_playlist
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/playlist_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      tags:
        - likes
      summary: Unlikes a playlist.
      operationId: Likes_unlikePlaylist
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/playlist_id'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /reposts/tracks/{track_id}:
    post:
      tags:
        - reposts
      summary: Reposts a track as the authenticated user
      operationId: Reposts_trackAsAuthenticatedUser
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/test_track_id'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - reposts
      summary: Removes a repost on a track as the authenticated user
      operationId: Reposts_removeRepost
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/test_track_id'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /reposts/playlists/{playlist_id}:
    post:
      tags:
        - reposts
      summary: Reposts a playlist as the authenticated user
      operationId: Reposts_playlistAsAuthenticatedUser
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/repost_playlist_id'
      responses:
        '201':
          description: Created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - reposts
      summary: Removes a repost on a playlist as the authenticated user
      operationId: Reposts_removeRepostOnPlaylist
      security:
        - AuthHeader: []
      parameters:
        - $ref: '#/components/parameters/repost_playlist_id'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  parameters:
    tags:
      description: A comma separated list of tags
      in: query
      name: tags
      required: false
      schema:
        type: string
      example: test
    bpm:
      description: Return tracks with a specified bpm[from], bpm[to]
      in: query
      name: bpm
      required: false
      style: deepObject
      schema:
        type: object
        properties:
          from:
            description: Return tracks with at least this bpm value
            type: integer
            example: 123
          to:
            description: Return tracks with at most this bpm value
            type: integer
            example: 456
    client_id:
      description: The client id belonging to your application
      in: query
      name: client_id
      required: true
      schema:
        type: string
      example: some client
    created_at:
      description: (yyyy-mm-dd hh:mm:ss) return tracks created within the specified dates
      in: query
      name: created_at
      required: false
      style: deepObject
      schema:
        type: object
        properties:
          from:
            description: (yyyy-mm-dd hh:mm:ss) return tracks created at this date or later
            type: string
            example: '2020-12-24 00:00:00'
          to:
            description: >-
              (yyyy-mm-dd hh:mm:ss) return tracks created at this date or
              earlier
            type: string
            example: '2020-12-26 00:00:00'
    duration:
      description: Return tracks within a specified duration range
      in: query
      name: duration
      required: false
      style: deepObject
      schema:
        type: object
        properties:
          from:
            description: Return tracks with at least this duration value
            type: integer
            example: 123456
          to:
            description: Return tracks with at most this duration value
            type: integer
            example: 456789
    genres:
      description: A comma separated list of genres
      in: query
      name: genres
      required: false
      schema:
        type: string
      example: Pop,House
    ids:
      description: A comma separated list of track ids to filter on
      in: query
      name: ids
      required: false
      schema:
        type: string
      example: 1,2,3
    limit:
      description: Number of results to return in the collection.
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 50
      example: 2
    offset:
      description: Offset of first result. Deprecated, use `linked_partitioning` instead.
      deprecated: true
      in: query
      name: offset
      required: false
      schema:
        type: integer
        default: 0
      example: 0
    q:
      description: search
      in: query
      name: q
      required: false
      schema:
        type: string
      example: hello
    redirect_uri:
      description: The redirect uri you have configured for your application
      in: query
      name: redirect_uri
      required: true
      schema:
        type: string
      example: https://soundcloud.com
    response_type:
      description: Support only the Authorization Code Flow
      in: query
      name: response_type
      required: true
      schema:
        type: string
        enum:
          - code
      example: code
    scope:
      description: Scope. Leave blank by default
      in: query
      name: scope
      required: true
      schema:
        type: string
      example: default
    state:
      description: >-
        Any value included here will be appended to the redirect URI. Use this
        for CSRF protection.
      in: query
      name: state
      required: false
      schema:
        type: string
      example: encrypted_session_info
    url:
      description: SoundCloud URL
      in: query
      name: url
      required: true
      schema:
        type: string
      example: https://soundcloud.com/user-434241656
    linked_partitioning:
      description: >-
        Returns paginated collection of items (recommended, returning a list
        without pagination is deprecated and should not be used)
      in: query
      name: linked_partitioning
      required: false
      schema:
        type: boolean
      example: true
    secret_token:
      description: A secret token to fetch private playlists/tracks
      in: query
      name: secret_token
      required: false
      schema:
        type: string
    access:
      description: >
        Filters content by level of access the user (logged in or anonymous) has
        to the track. The result list will include only tracks with the
        specified access. Include all options if you'd like to see all possible
        tracks. See `Track#access` schema for more details.
      in: query
      name: access
      schema:
        type: array
        items:
          type: string
          enum:
            - playable
            - preview
            - blocked
        default: playable,preview
      style: form
      explode: false
    access_explicit:
      description: >
        Filters content by level of access the user (logged in or anonymous) has
        to the track. The result list will include only tracks with the
        specified access. Include all options if you'd like to see all possible
        tracks. See `Track#access` schema for more details.
      in: query
      name: access
      schema:
        type: array
        items:
          type: string
          enum:
            - playable
            - preview
            - blocked
        default: playable,preview,blocked
      style: form
      explode: false
    show_tracks:
      description: >-
        A boolean flag to request a playlist with or without tracks. Default is
        `true`.
      in: query
      name: show_tracks
      required: false
      schema:
        type: boolean
      example: true
    comment_id:
      description: SoundCloud comment id
      in: path
      name: comment_id
      required: true
      schema:
        type: integer
      example: 123456
    follower_id:
      description: SoundCloud User id to denote a Follower
      in: path
      name: follower_id
      required: true
      schema:
        type: integer
      example: 743372812
    following_id:
      description: SoundCloud User id to denote a Following of a user
      in: path
      name: following_id
      required: true
      schema:
        type: integer
      example: 25219981
    playlist_id:
      description: SoundCloud playlist id
      in: path
      name: playlist_id
      required: true
      schema:
        type: integer
      example: 1212781357
    fake_playlist_id:
      description: SoundCloud playlist id
      in: path
      name: playlist_id
      required: true
      schema:
        type: integer
      example: 10
    repost_playlist_id:
      description: SoundCloud playlist id
      in: path
      name: playlist_id
      required: true
      schema:
        type: integer
      example: 1205584273
    tag:
      description: tag
      in: path
      name: tag
      required: true
      schema:
        type: string
      example: some tag
    track_id:
      description: SoundCloud Track id
      in: path
      name: track_id
      required: true
      schema:
        type: integer
      example: 308946187
    test_track_id:
      description: SoundCloud Track id
      in: path
      name: track_id
      required: true
      schema:
        type: integer
      example: 1015448728
    user_id:
      description: SoundCloud User id
      in: path
      name: user_id
      required: true
      schema:
        type: integer
      example: 948745750
    user_id_to_follow:
      description: SoundCloud User id
      in: path
      name: user_id
      required: true
      schema:
        type: integer
      example: 743372812
  responses:
    Success:
      description: Success
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/components/examples/Success'
    Successful:
      description: Success
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/components/examples/Successful'
    Accepted:
      description: Accepted
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/components/examples/Accepted'
    Found:
      description: Found
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Found'
    FoundHtml:
      description: Found
      content:
        application/json; charset=utf-8:
          schema:
            type: string
    Created:
      description: Created
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/components/examples/Created'
    BadRequest:
      description: Bad Request
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/components/examples/BadRequest'
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json; charset=utf-8:
          examples:
            default:
              $ref: '#/components/examples/Unauthorized'
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          examples:
            default:
              $ref: '#/components/examples/Forbidden'
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          examples:
            default:
              $ref: '#/components/examples/NotFound'
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          examples:
            default:
              $ref: '#/components/examples/UnprocessableEntity'
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          examples:
            default:
              $ref: '#/components/examples/TooManyRequests'
          schema:
            $ref: '#/components/schemas/TooManyRequests'
    User:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            default:
              $ref: '#/components/examples/User'
    Me:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Me'
    Users:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Users'
          examples:
            default:
              $ref: '#/components/examples/Users'
    Track:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Track'
          examples:
            default:
              $ref: '#/components/examples/Track'
    Tracks:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/MeListLikedTracksResponse'
          examples:
            default:
              $ref: '#/components/examples/Tracks'
            tracksList:
              $ref: '#/components/examples/TracksList'
    TracksList:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/TracksList'
          examples:
            default:
              $ref: '#/components/examples/TracksList'
    Playlist:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Playlist'
          examples:
            default:
              $ref: '#/components/examples/Playlist'
    Playlists:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/MeGetLikedPlaylistsResponse'
          examples:
            default:
              $ref: '#/components/examples/Playlists'
            playlistsArray:
              $ref: '#/components/examples/PlaylistsArray'
    Activities:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Activities'
          examples:
            default:
              $ref: '#/components/examples/Activities'
    WebProfiles:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/WebProfiles'
          examples:
            default:
              $ref: '#/components/examples/WebProfiles'
    Comment:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Comment'
          examples:
            default:
              $ref: '#/components/examples/Comment'
    Comments:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Comments'
          examples:
            default:
              $ref: '#/components/examples/Comments'
    Streams:
      description: Success
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Streams'
          examples:
            default:
              $ref: '#/components/examples/Streams'
  securitySchemes:
    AuthHeader:
      description: 'The string "OAuth" followed by the user’s token: OAuth ACCESS_TOKEN'
      in: header
      type: apiKey
      name: Authorization
  schemas:
    OAuthToken:
      type: object
      properties:
        grant_type:
          description: One of `authorization_code`, `client_credentials`, `refresh_token`
          type: string
          example: authorization_code
          enum:
            - authorization_code
            - refresh_token
            - client_credentials
        client_id:
          description: Client ID
          type: string
          example: CLIENT_ID
        client_secret:
          description: Client secret
          type: string
          example: CLIENT_SECRET
        code:
          description: Authorization code. Required on `grant_type = authorization_code`.
          type: string
          example: 1-123456-12345678-FAbcfbe9ir2wdj0
        redirect_uri:
          description: >-
            Redirect URI. Required on `grant_type =
            (authorization_code|refresh_token)`.
          type: string
          example: https://mywebsite/auth/soundcloud
        refresh_token:
          description: Refresh token. Required on `grant_type = refresh_token`.
          type: string
          example: 1234c331329477150e7b6056ff212345
      required:
        - grant_type
        - client_id
        - client_secret
    TrackMetadataRequest:
      type: object
      properties:
        track:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            permalink:
              type: string
            sharing:
              type: string
              enum:
                - public
                - private
              default: public
            embeddable_by:
              description: who can embed this track "all", "me", or "none"
              type: string
              enum:
                - all
                - me
                - none
            purchase_url:
              type: string
            genre:
              type: string
            tag_list:
              description: >-
                The tag_list property contains a list of tags separated by
                spaces. Multiword tags are quoted in double quotes. We also
                support machine tags that follow the pattern
                NAMESPACE:KEY=VALUE. For example: geo:lat=43.555
                camel:size=medium “machine:tag=with space” Machine tags are not
                revealed to the user on the track pages.
              type: string
            label_name:
              type: string
            release:
              type: string
            release_date:
              title: write only!
              description: string, formatted as yyyy-mm-dd, representing release date
              type: string
            streamable:
              type: boolean
              default: true
            downloadable:
              type: boolean
              default: true
            license:
              description: >-
                Possible values: no-rights-reserved, all-rights-reserved, cc-by,
                cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
              type: string
              enum:
                - no-rights-reserved
                - all-rights-reserved
                - cc-by
                - cc-by-nc
                - cc-by-nd
                - cc-by-sa
                - cc-by-nc-nd
                - cc-by-nc-sa
            commentable:
              type: boolean
              default: true
            isrc:
              type: string
    CreateUpdatePlaylistRequest:
      type: object
      properties:
        playlist:
          type: object
          properties:
            title:
              description: Title of the playlist
              type: string
            description:
              description: Description of the playlist
              type: string
            sharing:
              description: public or private
              type: string
              enum:
                - public
                - private
            tracks:
              description: List of tracks to add to playlist
              type: array
              items:
                type: object
                required:
                  - id
                properties:
                  id:
                    description: SoundCloud track id
                    type: string
            artwork_data:
              title: Only for POST
              type: string
              format: binary
            ean:
              description: The European Article Number
              type: string
            genre:
              description: Playlist's genre
              type: string
            label_name:
              description: Label name
              type: string
            license:
              description: License number
              type: string
            permalink:
              description: Playlist's permalink
              type: string
            permalink_url:
              description: Full permalink URL
              type: string
            purchase_title:
              description: Purchase title
              type: string
            purchase_url:
              description: Purchase URL
              type: string
            release:
              description: Playlist's release
              type: string
            release_date:
              description: Release date
              type: string
            set_type:
              description: Playlist or album type
              type: string
              enum:
                - album
                - playlist
            tag_list:
              description: A comma-separated list of tags
              type: string
    CreateUpdatePlaylistFormRequest:
      type: object
      properties:
        playlist[title]:
          type: string
        playlist[sharing]:
          type: string
          enum:
            - public
            - private
          default: public
        playlist[description]:
          type: string
        playlist[tracks][][id]:
          description: >-
            To pass multiple tracks, pass multiple comma-separated values, e.g.
            -F "playlist[tracks][][id]=111,222"
          type: string
        playlist[artwork_data]:
          title: >-
            The playlist artwork in binary format. Supported formats are gif,
            jpeg and png
          type: string
          format: binary
        playlist[ean]:
          type: string
        playlist[genre]:
          type: string
        playlist[label_name]:
          type: string
        playlist[license]:
          type: string
        playlist[permalink]:
          type: string
        playlist[permalink_url]:
          type: string
        playlist[purchase_title]:
          type: string
        playlist[purchase_url]:
          type: string
        playlist[release]:
          type: string
        playlist[release_date]:
          type: string
        playlist[set_type]:
          type: string
          enum:
            - album
            - playlist
        playlist[tag_list]:
          type: string
    TrackDataRequest:
      type: object
      properties:
        track[title]:
          type: string
        track[asset_data]:
          title: Only for uploading
          type: string
          format: binary
        track[permalink]:
          type: string
        track[sharing]:
          type: string
          enum:
            - public
            - private
          default: public
        track[embeddable_by]:
          description: who can embed this track "all", "me", or "none"
          type: string
          enum:
            - all
            - me
            - none
        track[purchase_url]:
          type: string
        track[description]:
          type: string
        track[genre]:
          type: string
        track[tag_list]:
          description: >-
            The tag_list property contains a list of tags separated by spaces.
            Multiword tags are quoted in double quotes. We also support machine
            tags that follow the pattern NAMESPACE:KEY=VALUE. For example:
            geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine
            tags are not revealed to the user on the track pages.
          type: string
        track[label_name]:
          type: string
        track[release]:
          type: string
        track[release_date]:
          title: write only!
          description: string, formatted as yyyy-mm-dd, representing release date
          type: string
        track[streamable]:
          type: boolean
          default: true
        track[downloadable]:
          type: boolean
          default: true
        track[license]:
          description: >-
            Possible values: no-rights-reserved, all-rights-reserved, cc-by,
            cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
          type: string
          enum:
            - no-rights-reserved
            - all-rights-reserved
            - cc-by
            - cc-by-nc
            - cc-by-nd
            - cc-by-sa
            - cc-by-nc-nd
            - cc-by-nc-sa
        track[commentable]:
          type: boolean
          default: true
        track[isrc]:
          type: string
        track[artwork_data]:
          title: Only for uploading, for PRO users
          type: string
          format: binary
    Found:
      type: object
      properties:
        status:
          description: Status code.
          type: string
        location:
          description: Location URL of the resource.
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        link:
          type: string
        error:
          type: string
          deprecated: true
          nullable: true
        errors:
          type: array
          deprecated: true
          items:
            type: string
        status:
          type: string
          deprecated: true
    TooManyRequests:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            spam_warning_urn:
              type: string
    User:
      description: SoundCloud User object
      type: object
      nullable: true
      properties:
        description:
          description: description
          type: string
        avatar_url:
          description: URL to a JPEG image
          type: string
        city:
          description: city
          type: string
        country:
          description: country
          type: string
        discogs_name:
          description: discogs name
          type: string
        first_name:
          description: first name
          type: string
        followers_count:
          description: number of followers
          type: integer
        followings_count:
          description: number of followed users
          type: integer
        full_name:
          description: first and last name
          type: string
        id:
          description: unique identifier
          type: integer
        kind:
          description: kind of resource
          type: string
        created_at:
          description: profile creation datetime
          format: date-time
          type: string
        last_modified:
          description: last modified datetime
          format: date-time
          type: string
        last_name:
          description: last name
          type: string
        myspace_name:
          description: myspace name
          type: string
          deprecated: true
        permalink:
          description: permalink of the resource
          type: string
        permalink_url:
          description: URL to the SoundCloud.com page
          type: string
        plan:
          description: subscription plan of the user
          type: string
        playlist_count:
          description: number of public playlists
          type: integer
        public_favorites_count:
          description: number of favorited public tracks
          type: integer
        reposts_count:
          description: number of reposts from user
          type: integer
        track_count:
          description: number of public tracks
          type: integer
        uri:
          description: API resource URL
          type: string
        username:
          description: username
          type: string
        website:
          description: a URL to the website
          type: string
        website_title:
          description: a custom title for the website
          type: string
        subscriptions:
          description: a list subscriptions associated with the user
          deprecated: true
          items:
            type: array
            anyOf:
              - description: subscription
                properties:
                  product:
                    description: product
                    properties:
                      id:
                        description: subscription id instance.
                        type: string
                      name:
                        description: subscription name instance.
                        type: string
                    type: object
                  recurring:
                    description: if the subscription is recurring or not
                    type: boolean
                type: object
            items:
              description: >-
                WARNING: Missing items property in array schema. Missing items
                property has been filled with this AnyType schema.
    Me:
      description: SoundCloud Me object
      type: object
      properties:
        description:
          description: description.
          type: string
        avatar_url:
          description: URL to a JPEG image.
          type: string
        city:
          description: city.
          type: string
        comments_count:
          description: comments count. From now on, the field always has a `0` value.
          type: integer
          deprecated: true
        country:
          description: country.
          type: string
        created_at:
          description: created at date
          type: string
        discogs_name:
          description: discogs name.
          type: string
        first_name:
          description: first name.
          type: string
        followers_count:
          description: number of followers.
          type: integer
        followings_count:
          description: number of followed users.
          type: integer
        full_name:
          description: first and last name.
          type: string
        id:
          description: unique identifier
          type: integer
        kind:
          description: kind of resource.
          type: string
        last_modified:
          description: last modified timestamp.
          type: string
        last_name:
          description: last name.
          type: string
        likes_count:
          description: likes count.
          type: integer
        locale:
          description: locale.
          type: string
          nullable: true
        online:
          description: online.
          type: boolean
        myspace_name:
          description: myspace name
          type: string
          deprecated: true
        permalink:
          description: permalink of the resource.
          type: string
        permalink_url:
          description: URL to the SoundCloud.com page.
          type: string
        plan:
          description: subscription plan of the user.
          type: string
        playlist_count:
          description: number of public playlists.
          type: integer
        primary_email_confirmed:
          description: boolean if email is confirmed.
          type: boolean
        private_playlists_count:
          description: number of private playlists.
          type: integer
        private_tracks_count:
          description: number of private tracks.
          type: integer
        public_favorites_count:
          description: number of favorited public tracks
          type: integer
        quota:
          description: user's upload quota
          properties:
            unlimited_upload_quota:
              description: unlimited upload quota.
              type: boolean
            upload_seconds_used:
              description: upload seconds used.
              type: integer
            upload_seconds_left:
              description: upload seconds left.
              type: integer
              nullable: true
          type: object
        reposts_count:
          description: number of reposts from user
          type: integer
        subscriptions:
          description: a list subscriptions associated with the user
          items:
            type: array
            anyOf:
              - description: subscription
                properties:
                  product:
                    description: product
                    properties:
                      id:
                        description: subscription id instance.
                        type: string
                      name:
                        description: subscription name instance.
                        type: string
                    type: object
                  recurring:
                    description: if the subscription is recurring or not
                    type: boolean
                type: object
            items:
              description: >-
                WARNING: Missing items property in array schema. Missing items
                property has been filled with this AnyType schema.
        track_count:
          description: number of public tracks.
          type: integer
        upload_seconds_left:
          description: upload seconds left.
          type: integer
          nullable: true
        uri:
          description: API resource URL.
          type: string
        username:
          description: username
          type: string
        website:
          description: a URL to the website.
          type: string
        website_title:
          description: a custom title for the website.
          type: string
    Users:
      type: object
      properties:
        collection:
          type: array
          items:
            $ref: '#/components/schemas/User'
        next_href:
          type: string
    Track:
      description: Soundcloud Track object.
      type: object
      properties:
        title:
          description: Track title.
          type: string
        description:
          description: Track description.
          type: string
        artwork_url:
          description: URL to a JPEG image.
          type: string
        bpm:
          description: Tempo.
          type: integer
        comment_count:
          description: Number of comments.
          type: integer
        commentable:
          description: Is commentable.
          type: boolean
        created_at:
          description: Created timestamp.
          type: string
        download_count:
          description: NUmber of downloads.
          type: integer
        downloadable:
          description: Is downloadable.
          type: string
        duration:
          description: Track duration.
          type: integer
        embeddable_by:
          description: Embeddable by.
          deprecated: true
          type: string
        favoritings_count:
          description: Number of favoritings.
          type: integer
        genre:
          description: Genre
          type: string
        id:
          description: Track identifier.
          type: integer
        isrc:
          description: ISRC code.
          type: string
        key_signature:
          description: Key signature.
          type: string
        kind:
          description: Type of object (track).
          type: string
        label_name:
          description: Label user name.
          type: string
        license:
          description: License
          type: string
        permalink_url:
          description: Permalink URL.
          type: string
        playback_count:
          description: Number of plays.
          type: integer
        purchase_title:
          description: Purchase title.
          type: string
        purchase_url:
          description: Purchase URL.
          type: string
        release:
          description: Release.
          type: string
        release_day:
          description: Day of release.
          type: integer
        release_month:
          description: Month of release.
          type: integer
        release_year:
          description: Year of release.
          type: integer
        sharing:
          description: Type of sharing (public/private).
          type: string
        stream_url:
          description: URL to stream.
          type: string
        streamable:
          description: Is streamable.
          type: boolean
        tag_list:
          description: Tags.
          type: string
        uri:
          description: Track URI.
          type: string
        user:
          allOf:
            - $ref: '#/components/schemas/User'
            - description: User who uploaded a track
        user_favorite:
          description: Is user's favourite.
          type: boolean
        user_playback_count:
          description: Number of plays by a user.
          type: integer
        waveform_url:
          description: Waveform URL.
          type: string
        available_country_codes:
          description: List of countries where track is available.
          type: string
        access:
          description: |
            Level of access the user (logged in or anonymous) has to the track.
              * `playable` - user is allowed to listen to a full track.
              * `preview` - user is allowed to preview a track, meaning a snippet is available
              * `blocked` - user can only see the metadata of a track, no streaming is possible
          type: string
          nullable: true
          enum:
            - playable
            - preview
            - blocked
        download_url:
          description: URL to download a track.
          type: string
        reposts_count:
          description: Number of reposts.
          type: integer
        secret_uri:
          description: Secret URL.
          type: string
    Tracks:
      type: object
      properties:
        collection:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        next_href:
          type: string
    TracksList:
      deprecated: true
      type: array
      items:
        $ref: '#/components/schemas/Track'
    Playlist:
      description: Soundcloud Playlist Object
      type: object
      properties:
        tags:
          description: Tags.
          type: string
          nullable: true
        title:
          description: Playlist title.
          type: string
        description:
          description: Playlist description.
          type: string
        id:
          description: Playlist identifier.
          type: integer
        kind:
          description: Type of Soundcloud object (playlist).
          type: string
        artwork_url:
          description: URL to a JPEG image.
          type: string
        created_at:
          description: Created timestamp.
          type: string
        downloadable:
          description: is downloadable.
          type: boolean
        duration:
          description: Playlist duration.
          type: integer
        ean:
          description: European Article Number.
          type: string
        embeddable_by:
          description: Embeddable by.
          type: string
        genre:
          description: Playlist genre.
          type: string
        label_id:
          description: Label user identifier.
          type: integer
        label_name:
          description: Label name.
          type: string
        last_modified:
          description: Last modified timestamp.
          type: string
        license:
          description: License.
          type: string
        permalink:
          description: Playlist permalink.
          type: string
        permalink_url:
          description: Playlist permalink URL.
          type: string
        playlist_type:
          description: Type of playlist.
          type: string
        purchase_title:
          description: Purchase title.
          type: string
        purchase_url:
          description: Purchase URL.
          type: string
        release:
          description: Release.
          type: string
        release_day:
          description: Day of release.
          type: integer
        release_month:
          description: Month of release.
          type: integer
        release_year:
          description: Year of release.
          type: integer
        sharing:
          description: Type of sharing (private/public).
          type: string
        streamable:
          description: Is streamable.
          type: boolean
        tag_list:
          description: Tags.
          type: string
        track_count:
          description: Count of tracks.
          type: integer
        tracks:
          description: List of tracks.
          type: array
          items:
            $ref: '#/components/schemas/Track'
        type:
          description: Playlist type.
          type: string
        uri:
          description: Playlist URI.
          type: string
        user:
          $ref: '#/components/schemas/User'
        user_id:
          description: User identifier.
          type: integer
        likes_count:
          description: Count of playlist likes.
          type: integer
        label:
          allOf:
            - type: object
              nullable: true
            - $ref: '#/components/schemas/User'
        tracks_uri:
          description: tracks URI.
          type: string
          nullable: true
    Playlists:
      type: object
      properties:
        collection:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
        next_href:
          type: string
    PlaylistsArray:
      deprecated: true
      type: array
      items:
        $ref: '#/components/schemas/Playlist'
    Activities:
      description: User's activities.
      type: object
      properties:
        collection:
          type: array
          items:
            type: object
            properties:
              type:
                description: Type of activity (track).
                type: string
              created_at:
                description: Created timestamp.
                type: string
              origin:
                description: Origin.
                type: object
                anyOf:
                  - $ref: '#/components/schemas/Track'
                  - $ref: '#/components/schemas/Playlist'
        next_href:
          type: string
        future_href:
          type: string
    WebProfiles:
      description: User's links added to their profile
      type: array
      items:
        type: object
        properties:
          title:
            description: Link's title
            type: string
          created_at:
            description: Timestamp of when the link was added to the profile.
            type: string
          id:
            description: Id
            type: integer
          kind:
            description: Kind
            type: string
          service:
            description: Service or platform
            type: string
          url:
            description: URL of the external link
            type: string
          username:
            description: Username extracted from the external link
            type: string
    Comment:
      description: User's Comment
      type: object
      properties:
        body:
          description: Comment body.
          type: string
        created_at:
          description: Created timestamp.
          type: string
        id:
          description: Identifier.
          type: integer
        kind:
          description: Kind (comment).
          type: string
        user_id:
          description: User's identifier.
          type: integer
        timestamp:
          description: Timestamp.
          type: string
        track_id:
          description: Track's identifier.
          type: integer
        uri:
          description: Comment's URL.
          type: string
        user:
          description: SoundCloud User object
          type: object
          properties:
            id:
              description: unique identifier
              type: integer
            kind:
              description: kind of resource.
              type: string
            permalink:
              description: permalink of the resource.
              type: string
            username:
              description: username
              type: string
            last_modified:
              description: last modified timestamp.
              type: string
            uri:
              description: API resource URL.
              type: string
            permalink_url:
              description: URL to the SoundCloud.com page.
              type: string
            avatar_url:
              description: URL to a JPEG image.
              type: string
            followers_count:
              description: number of followers.
              type: integer
            followings_count:
              description: number of followed users.
              type: integer
            reposts_count:
              description: number of reposts from user
              type: integer
    Comments:
      type: object
      properties:
        collection:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        next_href:
          type: string
          nullable: true
    Streams:
      type: object
      properties:
        http_mp3_128_url:
          type: string
        hls_mp3_128_url:
          type: string
        hls_opus_64_url:
          type: string
        preview_mp3_128_url:
          type: string
    TracksUploadNewTrackRequest:
      allOf:
        - $ref: '#/components/schemas/TrackDataRequest'
        - required:
            - track[title]
            - track[asset_data]
    TracksUploadNewTrackRequest1:
      allOf:
        - $ref: '#/components/schemas/TrackDataRequest'
        - required:
            - track[title]
            - track[asset_data]
    PlaylistsCreateNewPlaylistRequest:
      allOf:
        - $ref: '#/components/schemas/CreateUpdatePlaylistFormRequest'
        - required:
            - playlist[title]
    TracksCreateCommentRequest:
      type: object
      properties:
        comment:
          type: object
          properties:
            body:
              description: Comment's content
              type: string
              example: test comment
            timestamp:
              description: >-
                Timestamp of a comment. String or float representation is
                supported
              oneOf:
                - type: string
                - type: number
          required:
            - body
    OauthProvisionAccessTokenResponse:
      oneOf:
        - $ref: '#/components/schemas/Error'
    OauthProvisionAccessToken401Response:
      oneOf:
        - $ref: '#/components/schemas/Error'
    MeListLikedTracksResponse:
      oneOf:
        - $ref: '#/components/schemas/Tracks'
        - $ref: '#/components/schemas/TracksList'
    MeGetLikedPlaylistsResponse:
      oneOf:
        - $ref: '#/components/schemas/Playlists'
        - $ref: '#/components/schemas/PlaylistsArray'
  examples:
    Activities:
      value:
        collection:
          - type: track:repost
            created_at: 2020/10/12 12:02:44 +0000
            origin:
              $ref: '#/components/examples/Track/value'
          - type: playlist
            created_at: 2020/10/12 12:02:44 +0000
            origin:
              $ref: '#/components/examples/Playlist/value'
        next_href: https://api.soundcloud.com/me/activities?limit=10&cursor=00000
        future_href: https://api.soundcloud.com/me/activities?limit=10&cursor=000001
    ExpiringToken:
      value:
        access_token: some string
        expires_in: 3599
        scope: ''
        refresh_token: some string
        token_type: bearer
    CreateUpdatePlaylistRequest:
      value:
        playlist:
          title: Test Auto-created Playlist
          description: Playlist for test purposes
          sharing: private
          tracks:
            - id: 219787221
            - id: 783019264
            - id: 870073492
    CreateUpdatePlaylistFormRequest:
      value:
        playlist[title]: Test drum sample
        playlist[sharing]: private
        playlist[description]: Public-api test sample upload
    TrackDataRequest:
      value:
        track[title]: Test drum sample
        track[asset_data]: <binary string>
        track[permalink]: test-drum-sample
        track[sharing]: private
        track[embeddable_by]: me
        track[purchase_url]: null
        track[description]: Public-api test sample upload
        track[genre]: Pop
        track[tag_list]: null
        track[label_name]: null
        track[release]: null
        track[release_date]: '2021-02-18T00:00:00.000Z'
        track[streamable]: true
        track[downloadable]: false
        track[license]: no-rights-reserved
        track[commentable]: true
        track[isrc]: null
        track[artwork_data]: null
    Comment:
      value:
        body: comment body
        created_at: 2007/09/11 15:40:24 +0000
        id: 1234
        kind: comment
        timestamp: 4960
        track_id: 123456
        uri: https://api.soundcloud.com/comments/1234
        user:
          id: 12345
          kind: user
          permalink: permalink
          username: user name
          last_modified: 2017/04/10 14:48:03 +0000
          uri: https://api.soundcloud.com/users/12345
          permalink_url: https://soundcloud.com/permalink
          avatar_url: https://i1.sndcdn.com/avatars-large.jpg
          followers_count: 138
          followings_count: 172
          public_favorites_count: 5
          reposts_count: 0
        user_id: 12345
    Comments:
      value:
        collection:
          $ref: '#/components/examples/Comment/value'
        next_href: https://api.soundcloud.com/collection?page_size=10&cursor=1234567
    Playlist:
      value:
        tags: ''
        title: permalink
        description: null
        artwork_url: ''
        created_at: 2020/07/16 16:09:54 +0000
        downloadable: true
        duration: 11000
        ean: null
        embeddable_by: all
        genre: ''
        id: 12345
        kind: playlist
        label: null
        label_id: null
        label_name: null
        last_modified: 2020/09/08 09:13:00 +0000
        license: all-rights-reserved
        likes_count: 0
        permalink: permalink
        permalink_url: https://soundcloud.com/userPermalink/sets/permalink
        playlist_type: ''
        purchase_title: null
        purchase_url: null
        release: null
        release_day: null
        release_month: null
        release_year: null
        sharing: public
        streamable: true
        tag_list: ''
        track_count: 2
        tracks:
          $ref: '#/components/examples/Track/value'
        tracks_uri: https://api.soundcloud.com/playlists/12345/tracks
        type: ''
        uri: https://api.soundcloud.com/playlists/12345
        user:
          $ref: '#/components/examples/User/value'
        user_id: 1234
    Playlists:
      value:
        collection:
          $ref: '#/components/examples/Playlist/value'
        next_href: https://api.soundcloud.com/collection?page_size=10&cursor=1234567
    PlaylistsArray:
      description: Deprecated, use Playlists instead.
      value:
        $ref: '#/components/examples/Playlist/value'
    Streams:
      value:
        http_mp3_128_url: https://cf-media.sndcdn.com/
        hls_mp3_128_url: https://cf-media.sndcdn.com/
        hls_opus_64_url: https://cf-media.sndcdn.com/
        preview_mp3_128_url: https://cf-media.sndcdn.com/
    Track:
      value:
        title: Some title
        description: null
        artwork_url: https://i1.sndcdn.com/artworks-large.jpg
        available_country_codes: null
        bpm: null
        comment_count: 4
        commentable: true
        created_at: 2019/01/15 15:40:49 +0000
        download_count: 0
        download_url: https://api.soundcloud.com/tracks/1234/download
        downloadable: false
        duration: 40000
        embeddable_by: all
        favoritings_count: 271
        genre: Rock
        id: 1234
        isrc: null
        key_signature: null
        kind: track
        label_name: some label
        license: all-rights-reserved
        permalink_url: https://soundcloud.com/userPermalink/trackPermalink
        playback_count: 8027
        purchase_title: null
        purchase_url: null
        release: null
        release_day: 22
        release_month: 8
        release_year: 2019
        reposts_count: 18
        secret_uri: null
        sharing: public
        stream_url: https://api.soundcloud.com/tracks/1234/stream
        streamable: true
        tag_list: ''
        uri: https://api.soundcloud.com/tracks/1234
        user:
          $ref: '#/components/examples/User/value'
        user_favorite: true
        user_playback_count: 1
        waveform_url: https://wave.sndcdn.com/someString.png
        access: playable
    Tracks:
      value:
        collection:
          $ref: '#/components/examples/Track/value'
        next_href: https://api.soundcloud.com/collection?page_size=10&cursor=1234567
    TracksList:
      description: Deprecated, use Tracks instead.
      value:
        $ref: '#/components/examples/Track/value'
    User:
      value:
        description: null
        avatar_url: https://i1.sndcdn.com/avatars.jpg
        city: City
        country: Country
        created_at: 2018/01/01 12:08:25 +0000
        discogs_name: null
        first_name: First_name
        followers_count: 0
        followings_count: 0
        full_name: Full Name
        id: 12345
        kind: user
        last_modified: 2020/01/03 12:08:25 +0000
        last_name: Last_name
        myspace_name: null
        permalink: permalink
        permalink_url: https://soundcloud.com/permalink
        plan: Free
        playlist_count: 3
        public_favorites_count: 20
        reposts_count: 0
        subscriptions:
          - product:
              id: some-id
              name: some.name
        track_count: 0
        upload_seconds_left: 10800
        uri: https://api.soundcloud.com/users/1234
        username: some.user
        website: null
        website_title: null
    Users:
      value:
        collection:
          $ref: '#/components/examples/User/value'
        next_href: https://api.soundcloud.com/collection?page_size=10&cursor=1234567
    WebProfiles:
      value:
        - title: my facebook
          created_at: 1995/10/20 12:10:39 +0000
          id: 1234
          kind: web-profile
          service: facebook
          url: http://facebook.com
          username: username
    Success:
      value:
        status: 200 - OK
    Successful:
      value:
        status: 200 - Successful
    Accepted:
      value:
        status: 202 - Accepted
    Created:
      value:
        status: 201 - Created
    ErrorUnsupportedGrant:
      value:
        code: 400
        message: unsupported_grant
        link: https://developers.soundcloud.com/docs/api/guide#authentication
    BadRequest:
      value:
        code: 400
        message: Detailed message of errors, when available
        link: https://developers.soundcloud.com/docs/api/explorer/open-api
    ErrorInvalidGrant:
      value:
        code: 400
        message: invalid_grant
        link: https://developers.soundcloud.com/docs/api/guide#authentication
    Unauthorized:
      value:
        code: 401
        message: Detailed message of errors, when available
        link: https://developers.soundcloud.com/docs/api/explorer/open-api
    ErrorInvalidScope:
      value:
        code: 401
        message: invalid_scope
        link: https://developers.soundcloud.com/docs/api/guide#authentication
    ErrorInvalidClient:
      value:
        code: 401
        message: invalid_client
        link: https://developers.soundcloud.com/docs/api/guide#authentication
    Forbidden:
      value:
        code: 403
        message: Detailed message of errors, when available
        link: https://developers.soundcloud.com/docs/api/explorer/open-api
    NotFound:
      value:
        code: 404
        message: Detailed message of errors, when available
        link: https://developers.soundcloud.com/docs/api/explorer/open-api
    UnprocessableEntity:
      value:
        code: 422
        message: Detailed message of errors, when available
        link: https://developers.soundcloud.com/docs/api/explorer/open-api
    TooManyRequests:
      value:
        code: 429
        message: Detailed message of errors, when available
        spam_warning_urn: soundcloud:spam-warnings:1
        link: https://developers.soundcloud.com/docs/api/rate-limits#errors
    OK:
      value:
        status: Status(200) - OK
    TrackMetadataRequest:
      value:
        track[title]: Updated Test Track
