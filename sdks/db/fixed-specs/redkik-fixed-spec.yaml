openapi: 3.0.3
info:
  title: userservice
  description: "Redkik is a global InsurTech company with the mission to transform and improve the insurance industry for all parties within logistics and transportation. Redkik's innovative software eliminates the need for annual and complex insurance policies. Through Redkik's embedded integration with licensed insurance providers, existing platforms and online systems can offer their customers tailored and transactional insurance at the time of sale.\n\nStarting as a cargo insurance solution, the market's immediate response has since molded the flexible software to be used to solve additional inefficiencies for warehouse, gap, spike and cyber insurance while multiple other applications are currently being developed.\n\nThe team of Redkik\_has a big passion for innovation and technology,\_ together with great experience and deep knowledge from logistics and transportation, risk management, cargo insurance, machine learning, and software development.\n\nJoin Redkik's rapidly growing network of global partners and exceed your business goals by offering transactional insurance through Redkik's seamless API integration."
  version: 2.0.0
  x-konfig-ignore:
    object-with-no-properties: true
servers:
  - url: https://sales.app.redkik.com/api/v2
tags:
  - name: OrganizationController
  - name: UserController
  - name: Authentications
  - name: RoleController
  - name: ApiTokenController
  - name: AuditController
  - name: OrganizationPolicyController
  - name: StatusController
paths:
  /api/v2/user/api-tokens:
    post:
      tags:
        - ApiTokenController
      operationId: ApiTokenController_createUserApiToken
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiTokenCreation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/api-tokens/{id}:
    delete:
      tags:
        - ApiTokenController
      operationId: ApiTokenController_deleteById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiTokenControllerDeleteByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/audits:
    get:
      tags:
        - AuditController
      operationId: AuditController_getAudits
      security:
        - bearerAuth: []
      description: >-
        Fetches audits in batches set by perPage (default 20). Should be used
        mainly from UI.
      parameters:
        - description: Index of page
          in: query
          required: false
          name: page
          schema:
            type: number
        - description: Page size
          in: query
          required: false
          name: perPage
          schema:
            type: number
        - description: Global filter of filterable fields
          in: query
          required: false
          name: globalFilter
          schema:
            type: string
        - description: Stringified TypeOrm order
          in: query
          required: false
          name: order
          schema:
            type: object
            example:
              name: ASC
              age: DESC
        - description: Stringified TypeOrm where query
          in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
            example:
              name: John Smith
              age: 24
        - description: Stringified TypeOrm select query
          in: query
          required: false
          name: select
          schema:
            type: object
            example:
              name: true
              age: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditControllerGetAuditsResponse'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditControllerGetAudits206Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      tags:
        - AuditController
      operationId: AuditController_createUserAudits
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditCreation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audit'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/oauth/authorize:
    get:
      tags:
        - Authentications
      operationId: Authentications_authorizeOauthUser
      parameters:
        - in: query
          required: true
          name: response_type
          schema:
            type: string
            format: isNotBlank
            minLength: 1
        - in: query
          required: true
          name: client_id
          schema:
            type: string
            format: isNotBlank
            minLength: 1
        - in: query
          required: false
          name: redirect_uri
          schema:
            type: string
        - in: query
          required: false
          name: scope
          schema:
            type: string
        - in: query
          required: false
          name: state
          schema:
            type: string
        - in: query
          required: false
          name: code_challenge
          schema:
            type: string
        - in: query
          required: false
          name: code_challenge_method
          schema:
            type: string
        - in: query
          required: false
          name: error_code
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderDataResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationsAuthorizeOauthUserResponse'
          headers:
            Cache-Control:
              example: no-store
              schema:
                type: string
            Pragma:
              example: no-cache
              schema:
                type: string
  /api/v2/user/oauth/forgotten:
    get:
      tags:
        - Authentications
      operationId: Authentications_getForgottenOauth
      parameters:
        - in: query
          name: code
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderDataResponse'
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationsGetForgottenOauthResponse'
          headers:
            Cache-Control:
              example: no-store
              schema:
                type: string
            Pragma:
              example: no-cache
              schema:
                type: string
  /api/v2/user/oauth/auth/login:
    post:
      tags:
        - Authentications
      operationId: Authentications_postOauthLogin
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationsPostOauthLoginRequest'
      responses:
        '200':
          description: Success
  /api/v2/user/oauth/auth/reset:
    post:
      tags:
        - Authentications
      operationId: Authentications_resetOauthToken
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationsResetOauthTokenRequest'
      responses:
        '200':
          description: Success
  /api/v2/user/oauth/token:
    post:
      tags:
        - Authentications
      operationId: Authentications_createUserOauthToken
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
          headers:
            Cache-Control:
              example: no-store
              schema:
                type: string
            Pragma:
              example: no-cache
              schema:
                type: string
  /api/v2/user/oauth/exchange:
    get:
      tags:
        - Authentications
      operationId: Authentications_exchangeOauthToken
      security:
        - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
  /api/v2/user/oauth/logout:
    post:
      tags:
        - Authentications
      operationId: Authentications_performLogout
      security:
        - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Success
  /api/v2/user/oauth/mfa:
    get:
      tags:
        - Authentications
      operationId: Authentications_getMfaDetails
      parameters:
        - in: query
          name: code
          required: false
          schema:
            type: string
        - in: query
          name: csrf_token
          required: false
          schema:
            type: string
        - in: query
          name: state
          required: false
          schema:
            type: string
        - in: query
          name: error
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
  /api/v2/user/oauth/check-mfa-code:
    post:
      tags:
        - Authentications
      operationId: Authentications_checkMfaCode
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaRequest'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationsCheckMfaCodeResponse'
  /api/v2/user/organizations:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getOrganizations
      security:
        - bearerAuth: []
      description: >-
        Fetches organizations in batches set by perPage (default 20). Should be
        used mainly from UI.
      parameters:
        - description: Index of page
          in: query
          required: false
          name: page
          schema:
            type: number
        - description: Page size
          in: query
          required: false
          name: perPage
          schema:
            type: number
        - description: Global filter of filterable fields
          in: query
          required: false
          name: globalFilter
          schema:
            type: string
        - description: Stringified TypeOrm order
          in: query
          required: false
          name: order
          schema:
            type: object
            example:
              name: ASC
              age: DESC
        - description: Stringified TypeOrm where query
          in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
            example:
              name: John Smith
              age: 24
        - description: Stringified TypeOrm select query
          in: query
          required: false
          name: select
          schema:
            type: object
            example:
              name: true
              age: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetOrganizationsResponse
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetOrganizations206Response
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      tags:
        - OrganizationController
      operationId: OrganizationController_createUserOrganization
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationFormDtoCreation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFormDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/chart:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getOrganizationChart
      security:
        - bearerAuth: []
      description: Fetches organization hierarchy chart
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationChartDto'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationChartDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/find:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_findUserOrganizations
      security:
        - bearerAuth: []
      parameters:
        - in: query
          required: false
          name: skip
          schema:
            type: number
        - in: query
          required: false
          name: take
          schema:
            type: number
        - in: query
          required: false
          name: relations
          schema:
            type: array
            items:
              type: string
        - in: query
          required: false
          name: order
          schema:
            type: object
        - in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
        - in: query
          required: false
          name: select
          schema:
            type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerFindUserOrganizationsResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/find/ids:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_findUserOrganizationIds
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: ids
          required: false
          schema:
            type: array
            items:
              type: string
        - required: false
          in: query
          name: select
          schema:
            type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerFindUserOrganizationIdsResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/list:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_listUserOrganizations
      security:
        - bearerAuth: []
      parameters:
        - in: query
          required: false
          name: skip
          schema:
            type: number
        - in: query
          required: false
          name: take
          schema:
            type: number
        - in: query
          required: false
          name: relations
          schema:
            type: array
            items:
              type: string
        - in: query
          required: false
          name: order
          schema:
            type: object
        - in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
        - in: query
          required: false
          name: select
          schema:
            type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerListUserOrganizationsResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/endorsements:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getUserEndorsements
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - description: Index of page
          in: query
          required: false
          name: page
          schema:
            type: number
        - description: Page size
          in: query
          required: false
          name: perPage
          schema:
            type: number
        - description: Global filter of filterable fields
          in: query
          required: false
          name: globalFilter
          schema:
            type: string
        - description: Stringified TypeOrm order
          in: query
          required: false
          name: order
          schema:
            type: object
            example:
              name: ASC
              age: DESC
        - description: Stringified TypeOrm where query
          in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
            example:
              name: John Smith
              age: 24
        - description: Stringified TypeOrm select query
          in: query
          required: false
          name: select
          schema:
            type: object
            example:
              name: true
              age: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetUserEndorsementsResponse
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetUserEndorsements206Response
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    patch:
      tags:
        - OrganizationController
      operationId: OrganizationController_updateOrganizationById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationFormDtoUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFormDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    delete:
      tags:
        - OrganizationController
      operationId: OrganizationController_deleteOrganizationById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerDeleteOrganizationByIdResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/stripe-account:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getStripeAccount
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/closure-values:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getClosureValues
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/OrganizationControllerGetClosureValuesRequest
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/policies:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getPolicies
      security: []
      description: Returns the assigned policies of a requested organization
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationControllerGetPoliciesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/details:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getOrganizationDetails
      security:
        - bearerAuth: []
      description: Returns detailed information for an organization
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationFormDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/api-tokens:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getUserApiTokens
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - description: Index of page
          in: query
          required: false
          name: page
          schema:
            type: number
        - description: Page size
          in: query
          required: false
          name: perPage
          schema:
            type: number
        - description: Global filter of filterable fields
          in: query
          required: false
          name: globalFilter
          schema:
            type: string
        - description: Stringified TypeOrm order
          in: query
          required: false
          name: order
          schema:
            type: object
            example:
              name: ASC
              age: DESC
        - description: Stringified TypeOrm where query
          in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
            example:
              name: John Smith
              age: 24
        - description: Stringified TypeOrm select query
          in: query
          required: false
          name: select
          schema:
            type: object
            example:
              name: true
              age: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetUserApiTokensResponse
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetUserApiTokens206Response
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/setup:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getUserOrganizationSetup
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicSetupResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/descendantIds:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getDescendantIds
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetDescendantIdsResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/name:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getOrganizationNameById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationNameDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/insured-ids:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getInsuredIds
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetInsuredIdsResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/insurers:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_listInsurerAssignedForOrganization
      security:
        - bearerAuth: []
      description: Returns list of insurers assigned for requested organization
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerListInsurerAssignedForOrganizationResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      tags:
        - OrganizationController
      operationId: OrganizationController_updateInsurersList
      security:
        - bearerAuth: []
      description: Update list of insurers assigned for organization
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/OrganizationControllerUpdateInsurersListRequest
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInsurersDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/{id}/assigned-policies:
    get:
      tags:
        - OrganizationController
      operationId: OrganizationController_getAssignedPolicies
      security:
        - bearerAuth: []
      description: Returns the assigned policies of a requested organization
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerGetAssignedPoliciesResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      tags:
        - OrganizationController
      operationId: OrganizationController_assignPolicies
      security:
        - bearerAuth: []
      description: Assign policies for requested organization
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationControllerAssignPoliciesRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/OrganizationControllerAssignPoliciesResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/organization-policies/{id}:
    get:
      tags:
        - OrganizationPolicyController
      operationId: OrganizationPolicyController_getById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPolicy'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/organizations/organization-policies/{policyId}:
    delete:
      tags:
        - OrganizationPolicyController
      operationId: OrganizationPolicyController_deletePolicyById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: policyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: >-
                  #/components/schemas/OrganizationPolicyControllerDeletePolicyByIdResponse
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/roles:
    get:
      tags:
        - RoleController
      operationId: RoleController_getUserRoles
      security:
        - bearerAuth: []
      description: >-
        Fetches roles in batches set by perPage (default 20). Should be used
        mainly from UI.
      parameters:
        - description: Index of page
          in: query
          required: false
          name: page
          schema:
            type: number
        - description: Page size
          in: query
          required: false
          name: perPage
          schema:
            type: number
        - description: Global filter of filterable fields
          in: query
          required: false
          name: globalFilter
          schema:
            type: string
        - description: Stringified TypeOrm order
          in: query
          required: false
          name: order
          schema:
            type: object
            example:
              name: ASC
              age: DESC
        - description: Stringified TypeOrm where query
          in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
            example:
              name: John Smith
              age: 24
        - description: Stringified TypeOrm select query
          in: query
          required: false
          name: select
          schema:
            type: object
            example:
              name: true
              age: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleControllerGetUserRolesResponse'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleControllerGetUserRoles206Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      tags:
        - RoleController
      operationId: RoleController_createRole
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/roles/{id}:
    get:
      tags:
        - RoleController
      operationId: RoleController_getUserRolesById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    delete:
      tags:
        - RoleController
      operationId: RoleController_deleteUserRole
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedEntity'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    patch:
      tags:
        - RoleController
      operationId: RoleController_updateUserRole
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/status:
    get:
      tags:
        - StatusController
      operationId: StatusController_getUserStatus
      security: []
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users:
    get:
      tags:
        - UserController
      operationId: UserController_getUsersList
      security:
        - bearerAuth: []
      description: >-
        Fetches users in batches set by perPage (default 20). Should be used
        mainly from UI.
      parameters:
        - description: Index of page
          in: query
          required: false
          name: page
          schema:
            type: number
        - description: Page size
          in: query
          required: false
          name: perPage
          schema:
            type: number
        - description: Global filter of filterable fields
          in: query
          required: false
          name: globalFilter
          schema:
            type: string
        - description: Stringified TypeOrm order
          in: query
          required: false
          name: order
          schema:
            type: object
            example:
              name: ASC
              age: DESC
        - description: Stringified TypeOrm where query
          in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
            example:
              name: John Smith
              age: 24
        - description: Stringified TypeOrm select query
          in: query
          required: false
          name: select
          schema:
            type: object
            example:
              name: true
              age: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserControllerGetUsersListResponse'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserControllerGetUsersList206Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      tags:
        - UserController
      operationId: UserController_createUser
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationCreation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/find:
    get:
      tags:
        - UserController
      operationId: UserController_findUsers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          required: false
          name: skip
          schema:
            type: number
        - in: query
          required: false
          name: take
          schema:
            type: number
        - in: query
          required: false
          name: relations
          schema:
            type: array
            items:
              type: string
        - in: query
          required: false
          name: order
          schema:
            type: object
        - in: query
          required: false
          name: where
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WhereFilter'
        - in: query
          required: false
          name: select
          schema:
            type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserControllerFindUsersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/generate-otp-secret:
    get:
      tags:
        - UserController
      operationId: UserController_generateOtpSecret
      security:
        - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateSecretResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/{id}:
    get:
      tags:
        - UserController
      operationId: UserController_getById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFormDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    delete:
      tags:
        - UserController
      operationId: UserController_deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserControllerDeleteUserByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    patch:
      tags:
        - UserController
      operationId: UserController_updateUserById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/{id}/profile:
    get:
      tags:
        - UserController
      operationId: UserController_getUserProfile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    patch:
      tags:
        - UserController
      operationId: UserController_updateUserProfile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/setup-otp:
    post:
      tags:
        - UserController
      operationId: UserController_setupOtp
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserControllerSetupOtpRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileUpdate'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/{id}/roles:
    get:
      tags:
        - UserController
      operationId: UserController_getUserRolesById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserControllerGetUserRolesByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/password:
    post:
      tags:
        - UserController
      operationId: UserController_resetPassword
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserControllerResetPasswordRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/reset-password:
    post:
      tags:
        - UserController
      operationId: UserController_resetPassword
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserControllerResetPasswordResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/{id}/reset-password:
    post:
      tags:
        - UserController
      operationId: UserController_resetUserPassword
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserControllerResetUserPasswordResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/generate-mfa-code:
    post:
      tags:
        - UserController
      operationId: UserController_generateMfaCode
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserControllerGenerateMfaCodeRequest'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserControllerGenerateMfaCodeResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /api/v2/user/users/reset-mfa-type:
    post:
      tags:
        - UserController
      operationId: UserController_resetMfaType
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaVerificationRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiToken:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        organizationId:
          type: string
          format: isNotBlank
          minLength: 1
        roles:
          type: array
          items:
            format: isNotBlank
        secret:
          type: string
          nullable: true
      required:
        - id
        - name
        - organizationId
        - roles
    Unauthorized:
      type: object
      properties:
        name:
          description: The error name
          type: string
          minLength: 1
          example: UNAUTHORIZED
          default: UNAUTHORIZED
        message:
          description: An error message
          type: string
          minLength: 1
        status:
          description: The status code of the exception
          type: number
          example: 401
          default: 401
        errors:
          description: A list of related errors
          type: array
          items:
            $ref: '#/components/schemas/GenericError'
        stack:
          description: The stack trace (only in development mode)
          type: string
      required:
        - name
        - message
        - status
    GenericError:
      type: object
      properties:
        name:
          description: The error name
          type: string
          minLength: 1
        message:
          description: An error message
          type: string
          minLength: 1
      additionalProperties: true
      required:
        - name
        - message
    Forbidden:
      type: object
      properties:
        name:
          description: The error name
          type: string
          minLength: 1
          example: FORBIDDEN
          default: FORBIDDEN
        message:
          description: An error message
          type: string
          minLength: 1
        status:
          description: The status code of the exception
          type: number
          example: 403
          default: 403
        errors:
          description: A list of related errors
          type: array
          items:
            $ref: '#/components/schemas/GenericError'
        stack:
          description: The stack trace (only in development mode)
          type: string
      required:
        - name
        - message
        - status
    ApiTokenCreation:
      type: object
      properties:
        name:
          type: string
          format: isNotBlank
          minLength: 1
        organizationId:
          type: string
          format: isNotBlank
          minLength: 1
        roles:
          type: array
          items:
            format: isNotBlank
      required:
        - name
        - organizationId
        - roles
    Audit:
      type: object
      properties:
        id:
          type: number
        userId:
          type: string
          format: uuid
          nullable: true
        entityId:
          description: The ID of the entity this audit is attached to
          type: string
          format: isNotBlank
          minLength: 1
        entityType:
          description: The type of entity this audit is attached to
          type: string
          enum:
            - BOOKING
            - RISK
            - CLAUSE
            - REFERRAL
            - CUSTOMER
            - OFFER
            - POLICY
            - ENDORSEMENT
            - ORGANIZATION
            - USER
            - EMAIL_TEMPLATE
          format: isNotBlank
          minLength: 1
        secondaryEntityId:
          description: >-
            A secondary ID of the entity this audit is attached to, for example
            policy revision
          type: string
          format: uuid
          nullable: true
        message:
          type: string
          format: isNotBlank
          minLength: 1
        createdAt:
          type: string
      required:
        - entityId
        - entityType
        - message
    WhereFilter:
      type: object
    AuditCreation:
      type: object
      properties:
        id:
          type: number
        userId:
          type: string
          format: uuid
          nullable: true
        entityId:
          description: The ID of the entity this audit is attached to
          type: string
          format: isNotBlank
          minLength: 1
        entityType:
          description: The type of entity this audit is attached to
          type: string
          enum:
            - BOOKING
            - RISK
            - CLAUSE
            - REFERRAL
            - CUSTOMER
            - OFFER
            - POLICY
            - ENDORSEMENT
            - ORGANIZATION
            - USER
            - EMAIL_TEMPLATE
          format: isNotBlank
          minLength: 1
        secondaryEntityId:
          description: >-
            A secondary ID of the entity this audit is attached to, for example
            policy revision
          type: string
          format: uuid
          nullable: true
        message:
          type: string
          format: isNotBlank
          minLength: 1
        createdAt:
          type: string
      required:
        - entityId
        - entityType
        - message
    RenderDataResponse:
      type: object
      properties:
        title:
          type: string
          format: isNotBlank
          minLength: 1
        react:
          type: string
          format: isNotBlank
          minLength: 1
        style:
          type: string
          format: isNotBlank
          minLength: 1
      required:
        - react
        - title
        - style
    OAuthTokenResponse:
      type: object
      properties:
        token_type:
          type: string
          format: isNotBlank
          minLength: 1
        expires_in:
          type: number
        access_token:
          type: string
          format: isNotBlank
          minLength: 1
        refresh_token:
          type: string
        scope:
          type: string
      required:
        - token_type
        - access_token
    OAuthTokenRequest:
      type: object
      properties:
        grant_type:
          type: string
          format: isNotBlank
          minLength: 1
        client_id:
          type: string
        client_secret:
          type: string
        email:
          type: string
        password:
          type: string
        refresh_token:
          type: string
        code:
          type: string
        redirect_uri:
          type: string
        code_verifier:
          type: string
      required:
        - grant_type
    AccessToken:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        ttl:
          type: number
          format: isNotBlank
        created:
          type: string
          format: isNotBlank
          minLength: 1
        user:
          $ref: '#/components/schemas/UserTokenDto'
        organizationId:
          type: string
        organization:
          $ref: '#/components/schemas/OrganizationTokenDto'
        abac:
          type: array
          items:
            $ref: '#/components/schemas/ABAC'
        bearer:
          type: string
        scope:
          type: array
          items:
            $ref: '#/components/schemas/AccessScope'
        organizationDescendants:
          type: array
          items:
            format: isNotBlank
            type: string
        organizationAncestors:
          type: array
          items:
            format: isNotBlank
            type: string
        organizationInsured:
          type: array
          items:
            format: isNotBlank
            type: string
        roles:
          type: array
          items:
            format: isNotBlank
            type: string
      required:
        - id
        - ttl
        - created
        - abac
        - organizationDescendants
        - organizationAncestors
        - organizationInsured
        - roles
    UserTokenDto:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        email:
          type: string
          format: isNotBlank
          minLength: 1
        organizationId:
          type: string
        timezone:
          type: string
        locale:
          type: string
        dateFormat:
          type: string
      required:
        - id
        - name
        - email
    OrganizationTokenDto:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        allowConfirm:
          type: boolean
        allowUserClaim:
          type: boolean
        allowQuotation:
          type: boolean
        hideCosts:
          type: boolean
          format: isNotBlank
        costBreakdown:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        type:
          type: number
          format: isNotBlank
        hideZeroValues:
          type: boolean
          nullable: true
      required:
        - id
        - hideCosts
        - costBreakdown
        - name
        - type
    ABAC:
      type: object
      properties:
        accessScopes:
          type: array
          items:
            $ref: '#/components/schemas/AccessScope'
        where:
          type: object
        restrictions:
          type: object
      required:
        - accessScopes
    AccessScope:
      type: object
      properties:
        subject:
          type: array
          items:
            format: isNotBlank
            type: string
        action:
          type: array
          items:
            format: isNotBlank
            type: string
      required:
        - subject
        - action
    MfaRequest:
      type: object
      properties:
        mfaCode:
          type: string
          minLength: 1
        csrf_token:
          type: string
          minLength: 1
        code:
          type: string
          minLength: 1
        state:
          type: string
          minLength: 1
      required:
        - mfaCode
        - csrf_token
        - code
        - state
    OrganizationDto:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        allowQuotation:
          type: boolean
          format: isNotBlank
        allowUserClaim:
          type: boolean
        type:
          type: number
          format: isNotBlank
        taxRulesetId:
          type: string
        publicUrl:
          type: string
        address:
          type: string
        allowPayInvoice:
          type: boolean
        allowPayCard:
          type: boolean
        parent:
          type: object
      required:
        - id
        - name
        - allowQuotation
        - type
    OrganizationChartDto:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        children:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationChartDto'
      required:
        - id
        - name
        - children
    OrganizationDtoSystem:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        allowQuotation:
          type: boolean
          format: isNotBlank
        allowUserClaim:
          type: boolean
        type:
          type: number
          format: isNotBlank
        policies:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationPolicyDto'
        taxRulesetId:
          type: string
        publicUrl:
          type: string
        address:
          type: string
        allowPayInvoice:
          type: boolean
        allowPayCard:
          type: boolean
        parent:
          type: object
      required:
        - id
        - name
        - allowQuotation
        - type
    OrganizationPolicyDto:
      type: object
      properties:
        policyId:
          type: string
          minLength: 1
        alias:
          type: string
        id:
          type: string
      required:
        - policyId
    OrganizationNameDto:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
      required:
        - id
        - name
    EndorsementDto:
      type: object
      properties:
        id:
          type: string
        organizationId:
          type: string
        policyId:
          type: string
        reference:
          type: string
    OrganizationFormDto:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
        name:
          type: string
          format: isNotBlank
          minLength: 1
        allowQuotation:
          type: boolean
          format: isNotBlank
        allowPayCard:
          type: boolean
        allowPayInvoice:
          type: boolean
        allowConfirmationPayCard:
          type: boolean
        allowConfirmationPayInvoice:
          type: boolean
        allowedImmediatePaymentTypes:
          type: array
          items:
            type: string
        allowConsignee:
          type: boolean
        allowLetterOfCredit:
          type: boolean
        allowUserClaim:
          type: boolean
        allowPolicyModifyTechFee:
          type: boolean
        type:
          type: number
          format: isNotBlank
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        parentId:
          type: string
        stripeAccountId:
          type: string
        externalReference:
          type: string
        referencePrefix:
          type: string
        publicUrl:
          type: string
        publicDateFormat:
          type: string
        publicLocale:
          type: string
        allowReferrals:
          type: boolean
          format: isNotBlank
        allowReferAccepted:
          type: boolean
        allowConfirm:
          type: boolean
          format: isNotBlank
        allowModifyBookingFee:
          type: boolean
          format: isNotBlank
        allowBeneficiary:
          type: boolean
          format: isNotBlank
        allowMultiCommodity:
          type: boolean
          format: isNotBlank
        allowClaims:
          type: boolean
          format: isNotBlank
        claimTemplateId:
          type: string
        lastInvoicedAt:
          type: string
        invoiceCustomerId:
          type: string
        billingAddress:
          type: string
        billingEmail:
          type: string
        requireNotification:
          type: boolean
          format: isNotBlank
        notificationMethod:
          type: number
          format: isNotBlank
        contactEmail:
          type: string
        hideCosts:
          type: boolean
          format: isNotBlank
        costBreakdown:
          type: string
          enum:
            - NONE
            - FULL
            - COMBINED_FEES
          format: isNotBlank
          minLength: 1
        hideZeroValues:
          type: boolean
        requireConfirmation:
          type: boolean
          format: isNotBlank
        street:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        state:
          type: string
        postcode:
          type: string
          nullable: true
        country:
          type: string
        formatted:
          type: string
          format: isNotBlank
          nullable: true
          minLength: 1
        taxRulesetId:
          type: string
        descendants:
          type: array
          items:
            type: string
        allowedAddressTypes:
          type: array
          items:
            type: string
            enum:
              - ADDRESS
              - IATA
              - LOCODE
              - CITY
              - FREETEXT
        additionalFields:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AdditionalFieldString'
              - $ref: '#/components/schemas/AdditionalFieldEnum'
              - $ref: '#/components/schemas/AdditionalFieldJSON'
        enforceTrackingCode:
          type: boolean
      required:
        - name
        - allowQuotation
        - type
        - allowReferrals
        - allowConfirm
        - allowModifyBookingFee
        - allowBeneficiary
        - allowMultiCommodity
        - allowClaims
        - requireNotification
        - notificationMethod
        - hideCosts
        - costBreakdown
        - requireConfirmation
        - formatted
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          format: isNotBlank
          minLength: 1
        email:
          type: string
          format: isNotBlank
          minLength: 1
        phone:
          type: string
          nullable: true
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        organization:
          $ref: '#/components/schemas/Organization'
        organizationId:
          type: string
          format: isNotBlank
          minLength: 1
        profile:
          type: object
          nullable: true
        dateFormat:
          type: string
          format: isNotBlank
          minLength: 1
        timezone:
          type: string
          format: isNotBlank
          minLength: 1
        locale:
          type: string
          format: isNotBlank
          minLength: 1
        createdAt:
          type: string
        deletedAt:
          type: string
        mfaType:
          type: string
          enum:
            - OTP
            - EMAIL
            - SMS
      required:
        - name
        - email
        - roles
        - organizationId
        - dateFormat
        - timezone
        - locale
    RoleMapping:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        roleId:
          type: string
          format: isNotBlank
          minLength: 1
        role:
          $ref: '#/components/schemas/Role'
        user:
          type: object
      required:
        - roleId
    Role:
      type: object
      properties:
        description:
          type: string
          format: simple
          nullable: true
          minLength: 1
        id:
          type: string
          format: uuid
        name:
          type: string
          format: isNotBlank
          minLength: 1
        organizationId:
          type: string
          format: uuid
          nullable: true
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        clientMappings:
          type: array
          items:
            $ref: '#/components/schemas/ClientRoleMapping'
        abac:
          type: array
          items:
            $ref: '#/components/schemas/ABAC'
        data:
          type: object
          nullable: true
      required:
        - name
        - description
        - abac
    ClientRoleMapping:
      type: object
      properties:
        id:
          type: string
          format: uuid
        clientId:
          type: string
        roleId:
          type: string
          format: isNotBlank
          minLength: 1
        role:
          $ref: '#/components/schemas/Role'
        client:
          $ref: '#/components/schemas/OAuthClient'
      required:
        - roleId
    OAuthClient:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          format: isNotBlank
          minLength: 1
        redirectUris:
          type: object
          nullable: true
        allowedGrants:
          type: array
          items:
            format: isNotBlank
        organizationId:
          type: object
        roles:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/ClientRoleMapping'
      required:
        - name
        - redirectUris
        - allowedGrants
        - roles
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          format: isNotBlank
          minLength: 1
        allowedImmediatePaymentTypes:
          description: >-
            A list of payment types that allow immediate booking creation when
            usually they would be pending
          type: array
          items:
            type: string
        allowPayInvoice:
          description: Allow payment to be taken later by invoice
          type: boolean
        allowPayCard:
          description: Allow payment to be taken by credit card
          type: boolean
        allowConfirmationPayInvoice:
          description: Allow payment to be taken later by invoice on confirmation flow
          type: boolean
        allowConfirmationPayCard:
          description: Allow payment to be taken by credit card on confirmation flow
          type: boolean
        allowConsignee:
          description: Allow consignees to be added during quotation
          type: boolean
        allowUserClaim:
          description: Allow users to access claim form
          type: boolean
        allowLetterOfCredit:
          description: Allow letter of credit information to be added during quotation
          type: boolean
        allowPolicyModifyTechFee:
          description: Allow an organizations policy to alter the tech fee
          type: boolean
        parent:
          $ref: '#/components/schemas/Organization'
        addressId:
          type: string
        address:
          type: object
        policies:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationPolicy'
        externalReference:
          type: string
          format: isNotBlank
          minLength: 1
        referencePrefix:
          type: string
          deprecated: true
        stripeAccountId:
          type: string
        type:
          type: number
          format: isNotBlank
        createdAt:
          type: string
        deletedAt:
          type: string
        invoiceCustomerId:
          description: Invoice customer id
          type: string
        requireNotification:
          type: boolean
          format: isNotBlank
        notificationMethod:
          description: Notification method, 0 for nothing, 1 for email
          type: number
          maximum: 1
          minimum: 0
          format: isNotBlank
        notificationEmail:
          type: string
          deprecated: true
        billingAddress:
          type: string
        billingEmail:
          type: string
        allowConfirm:
          type: boolean
          format: isNotBlank
        allowReferrals:
          type: boolean
          format: isNotBlank
        allowReferAccepted:
          description: Allow referring of accepted offers
          type: boolean
        allowQuotation:
          type: boolean
          format: isNotBlank
        allowClaims:
          type: boolean
          format: isNotBlank
        claimTemplateId:
          description: UUID of email template used for sending claim by email
          type: string
        claimEmail:
          description: Email address of claim recipient, give in policy instead
          type: string
          deprecated: true
        allowModifyBookingFee:
          type: boolean
          format: isNotBlank
        allowBeneficiary:
          type: boolean
          format: isNotBlank
        allowMultiCommodity:
          type: boolean
          format: isNotBlank
        publicUrl:
          type: string
        publicDateFormat:
          type: string
        publicLocale:
          type: string
        taxRulesetId:
          description: The ruleset of taxes applied to this organization
          type: string
        hideCosts:
          type: boolean
          format: isNotBlank
        costBreakdown:
          description: Hide the cost breakdown in the customer & TI views
          type: string
          enum:
            - NONE
            - FULL
            - COMBINED_FEES
          format: isNotBlank
          minLength: 1
        hideZeroValues:
          description: Hides zero values
          type: boolean
        requireConfirmation:
          description: >-
            Dictates should the end customer be directed to the confirmation
            flow
          type: boolean
          format: isNotBlank
        allowedAddressTypes:
          description: A list of address types shown in client/public portal
          type: array
          items:
            type: string
            enum:
              - ADDRESS
              - IATA
              - LOCODE
              - CITY
              - FREETEXT
        contactEmail:
          type: string
        additionalFields:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AdditionalFieldString'
              - $ref: '#/components/schemas/AdditionalFieldEnum'
              - $ref: '#/components/schemas/AdditionalFieldJSON'
        enforceTrackingCode:
          type: boolean
      required:
        - name
        - policies
        - externalReference
        - type
        - requireNotification
        - notificationMethod
        - allowConfirm
        - allowReferrals
        - allowQuotation
        - allowClaims
        - allowModifyBookingFee
        - allowBeneficiary
        - allowMultiCommodity
        - hideCosts
        - costBreakdown
        - requireConfirmation
        - enforceTrackingCode
    OrganizationPolicy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organizationId:
          type: string
          format: isNotBlank
          minLength: 1
        policyId:
          type: string
          format: isNotBlank
          minLength: 1
        alias:
          type: string
          format: isNotBlank
          minLength: 1
        bookingFee:
          type: number
          minimum: 0
          format: isNotBlank
        bookingFeeType:
          description: Booking Fee type, PERCENT or FLAT_FEE
          type: string
          enum:
            - PERCENT
            - FLAT_FEE
          format: isNotBlank
          minLength: 1
        technologyFee:
          type: number
          minimum: 0
          format: isNotBlank
        technologyFeeType:
          description: Technology Fee type, PERCENT or FLAT_FEE
          type: string
          enum:
            - PERCENT
            - FLAT_FEE
          format: isNotBlank
          minLength: 1
      required:
        - organizationId
        - policyId
        - alias
        - bookingFee
        - bookingFeeType
        - technologyFee
        - technologyFeeType
    AdditionalFieldString:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        type:
          type: string
          enum:
            - string
          minLength: 1
        mandatory:
          type: boolean
      required:
        - id
        - type
        - mandatory
    AdditionalFieldEnum:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        type:
          type: string
          enum:
            - enum
          minLength: 1
        mandatory:
          type: boolean
        data:
          $ref: '#/components/schemas/EnumDataType'
      required:
        - id
        - type
        - mandatory
        - data
    EnumDataType:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
      required:
        - options
    AdditionalFieldJSON:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        type:
          type: string
          enum:
            - json
          minLength: 1
        mandatory:
          type: boolean
      required:
        - id
        - type
        - mandatory
    OrganizationFormDtoCreation:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
        name:
          type: string
          format: isNotBlank
          minLength: 1
        allowQuotation:
          type: boolean
          format: isNotBlank
        allowPayCard:
          type: boolean
        allowPayInvoice:
          type: boolean
        allowConfirmationPayCard:
          type: boolean
        allowConfirmationPayInvoice:
          type: boolean
        allowedImmediatePaymentTypes:
          type: array
          items:
            type: string
        allowConsignee:
          type: boolean
        allowLetterOfCredit:
          type: boolean
        allowUserClaim:
          type: boolean
        allowPolicyModifyTechFee:
          type: boolean
        type:
          type: number
          format: isNotBlank
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        parentId:
          type: string
        stripeAccountId:
          type: string
        externalReference:
          type: string
        referencePrefix:
          type: string
        publicUrl:
          type: string
        publicDateFormat:
          type: string
        publicLocale:
          type: string
        allowReferrals:
          type: boolean
          format: isNotBlank
        allowReferAccepted:
          type: boolean
        allowConfirm:
          type: boolean
          format: isNotBlank
        allowModifyBookingFee:
          type: boolean
          format: isNotBlank
        allowBeneficiary:
          type: boolean
          format: isNotBlank
        allowMultiCommodity:
          type: boolean
          format: isNotBlank
        allowClaims:
          type: boolean
          format: isNotBlank
        claimTemplateId:
          type: string
        lastInvoicedAt:
          type: string
        invoiceCustomerId:
          type: string
        billingAddress:
          type: string
        billingEmail:
          type: string
        requireNotification:
          type: boolean
          format: isNotBlank
        notificationMethod:
          type: number
          format: isNotBlank
        contactEmail:
          type: string
        hideCosts:
          type: boolean
          format: isNotBlank
        costBreakdown:
          type: string
          enum:
            - NONE
            - FULL
            - COMBINED_FEES
          format: isNotBlank
          minLength: 1
        hideZeroValues:
          type: boolean
        requireConfirmation:
          type: boolean
          format: isNotBlank
        street:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        state:
          type: string
        postcode:
          type: string
          nullable: true
        country:
          type: string
        formatted:
          type: string
          format: isNotBlank
          nullable: true
          minLength: 1
        taxRulesetId:
          type: string
        descendants:
          type: array
          items:
            type: string
        allowedAddressTypes:
          type: array
          items:
            type: string
            enum:
              - ADDRESS
              - IATA
              - LOCODE
              - CITY
              - FREETEXT
        additionalFields:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AdditionalFieldString'
              - $ref: '#/components/schemas/AdditionalFieldEnum'
              - $ref: '#/components/schemas/AdditionalFieldJSON'
        enforceTrackingCode:
          type: boolean
      required:
        - name
        - allowQuotation
        - type
        - allowReferrals
        - allowConfirm
        - allowModifyBookingFee
        - allowBeneficiary
        - allowMultiCommodity
        - allowClaims
        - requireNotification
        - notificationMethod
        - hideCosts
        - costBreakdown
        - requireConfirmation
        - formatted
    OrganizationFormDtoUpdate:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
        name:
          type: string
          format: isNotBlank
        allowQuotation:
          type: boolean
          format: isNotBlank
        allowPayCard:
          type: boolean
        allowPayInvoice:
          type: boolean
        allowConfirmationPayCard:
          type: boolean
        allowConfirmationPayInvoice:
          type: boolean
        allowedImmediatePaymentTypes:
          type: array
          items:
            type: string
        allowConsignee:
          type: boolean
        allowLetterOfCredit:
          type: boolean
        allowUserClaim:
          type: boolean
        allowPolicyModifyTechFee:
          type: boolean
        type:
          type: number
          format: isNotBlank
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        parentId:
          type: string
        stripeAccountId:
          type: string
        externalReference:
          type: string
        referencePrefix:
          type: string
        publicUrl:
          type: string
        publicDateFormat:
          type: string
        publicLocale:
          type: string
        allowReferrals:
          type: boolean
          format: isNotBlank
        allowReferAccepted:
          type: boolean
        allowConfirm:
          type: boolean
          format: isNotBlank
        allowModifyBookingFee:
          type: boolean
          format: isNotBlank
        allowBeneficiary:
          type: boolean
          format: isNotBlank
        allowMultiCommodity:
          type: boolean
          format: isNotBlank
        allowClaims:
          type: boolean
          format: isNotBlank
        claimTemplateId:
          type: string
        lastInvoicedAt:
          type: string
        invoiceCustomerId:
          type: string
        billingAddress:
          type: string
        billingEmail:
          type: string
        requireNotification:
          type: boolean
          format: isNotBlank
        notificationMethod:
          type: number
          format: isNotBlank
        contactEmail:
          type: string
        hideCosts:
          type: boolean
          format: isNotBlank
        costBreakdown:
          type: string
          enum:
            - NONE
            - FULL
            - COMBINED_FEES
          format: isNotBlank
        hideZeroValues:
          type: boolean
        requireConfirmation:
          type: boolean
          format: isNotBlank
        street:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        state:
          type: string
        postcode:
          type: string
          nullable: true
        country:
          type: string
        formatted:
          type: string
          format: isNotBlank
          nullable: true
        taxRulesetId:
          type: string
        descendants:
          type: array
          items:
            type: string
        allowedAddressTypes:
          type: array
          items:
            type: string
            enum:
              - ADDRESS
              - IATA
              - LOCODE
              - CITY
              - FREETEXT
        additionalFields:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AdditionalFieldString'
              - $ref: '#/components/schemas/AdditionalFieldEnum'
              - $ref: '#/components/schemas/AdditionalFieldJSON'
        enforceTrackingCode:
          type: boolean
    PublicSetupResponse:
      type: object
      properties:
        locale:
          type: string
          nullable: true
        dateFormat:
          type: string
          nullable: true
        allowQuotation:
          type: boolean
    OrganizationInsurersDto:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        insurers:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationNameDto'
      required:
        - id
        - name
        - insurers
    OrganizationPolicyFormDto:
      type: object
      properties:
        policyId:
          type: string
          minLength: 1
        alias:
          type: string
        id:
          type: string
        bookingFee:
          type: number
        bookingFeeType:
          type: string
          enum:
            - PERCENT
            - FLAT_FEE
        technologyFee:
          type: number
        technologyFeeType:
          type: string
          enum:
            - PERCENT
            - FLAT_FEE
      required:
        - policyId
    RoleCreation:
      type: object
      properties:
        description:
          type: string
          format: simple
          nullable: true
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        organizationId:
          type: string
          format: uuid
          nullable: true
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        clientMappings:
          type: array
          items:
            $ref: '#/components/schemas/ClientRoleMapping'
        abac:
          type: array
          items:
            $ref: '#/components/schemas/ABAC'
        data:
          type: object
          nullable: true
      required:
        - name
        - description
        - abac
    DeletedEntity:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
      required:
        - id
    RoleUpdate:
      type: object
      properties:
        description:
          type: string
          format: simple
          nullable: true
        id:
          type: string
          format: uuid
        name:
          type: string
          format: isNotBlank
        organizationId:
          type: string
          format: uuid
          nullable: true
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        clientMappings:
          type: array
          items:
            $ref: '#/components/schemas/ClientRoleMapping'
        abac:
          type: array
          items:
            $ref: '#/components/schemas/ABAC'
        data:
          type: object
          nullable: true
    Status:
      type: object
      properties:
        statusMsg:
          type: string
          minLength: 1
      required:
        - statusMsg
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        email:
          type: string
        organization:
          type: string
      required:
        - id
        - name
    UserCreationCreation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          format: isNotBlank
          minLength: 1
        email:
          type: string
          format: isNotBlank
          minLength: 1
        roles:
          type: array
          items:
            format: isNotBlank
        organization:
          $ref: '#/components/schemas/Organization'
        organizationId:
          type: string
        profile:
          type: object
          nullable: true
        dateFormat:
          type: string
          format: isNotBlank
          minLength: 1
        timezone:
          type: string
          format: isNotBlank
          minLength: 1
        locale:
          type: string
          format: isNotBlank
          minLength: 1
        createdAt:
          type: string
        deletedAt:
          type: string
      required:
        - name
        - email
        - roles
        - dateFormat
        - timezone
        - locale
    GenerateSecretResponse:
      type: object
      properties:
        secret:
          type: string
          format: isNotBlank
          minLength: 1
      required:
        - secret
    UserFormDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
        email:
          type: string
          format: isNotBlank
          minLength: 1
        organization:
          type: string
        organizationId:
          type: string
          format: isNotBlank
          minLength: 1
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
        dateFormat:
          type: string
          format: isNotBlank
          minLength: 1
        timezone:
          type: string
          format: isNotBlank
          minLength: 1
        locale:
          type: string
          format: isNotBlank
          minLength: 1
      required:
        - id
        - name
        - email
        - organizationId
        - roles
        - dateFormat
        - timezone
        - locale
    RoleResponse:
      type: object
      properties:
        id:
          type: string
          format: isNotBlank
          minLength: 1
        name:
          type: string
          format: isNotBlank
          minLength: 1
      required:
        - id
        - name
    UserProfileUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          format: isNotBlank
          minLength: 1
        email:
          type: string
          format: isNotBlank
          minLength: 1
        dateFormat:
          type: string
          format: isNotBlank
          minLength: 1
        timezone:
          type: string
          format: isNotBlank
          minLength: 1
        password:
          type: string
        oldPassword:
          type: string
        mfaType:
          type: string
          enum:
            - OTP
            - EMAIL
            - SMS
        phone:
          type: string
        mfaCode:
          type: string
      required:
        - name
        - email
        - dateFormat
        - timezone
    UserUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          format: isNotBlank
        email:
          type: string
          format: isNotBlank
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleMapping'
        organization:
          $ref: '#/components/schemas/Organization'
        organizationId:
          type: string
          format: isNotBlank
        profile:
          type: object
          nullable: true
        dateFormat:
          type: string
          format: isNotBlank
        timezone:
          type: string
          format: isNotBlank
        locale:
          type: string
          format: isNotBlank
        createdAt:
          type: string
        deletedAt:
          type: string
    ChangePassword:
      type: object
      properties:
        password:
          type: string
    MfaVerificationRequest:
      type: object
      properties:
        mfaCode:
          type: string
          minLength: 1
        userId:
          type: string
          minLength: 1
      required:
        - mfaCode
        - userId
    AuthenticationsPostOauthLoginRequest:
      type: object
    AuthenticationsResetOauthTokenRequest:
      type: object
    OrganizationControllerGetClosureValuesRequest:
      type: array
      items:
        nullable: true
        oneOf:
          - type: integer
          - type: number
          - type: string
          - type: boolean
          - type: array
            items:
              description: >-
                WARNING: Missing items property in array schema. Missing items
                property has been filled with this AnyType schema.
          - type: object
    OrganizationControllerUpdateInsurersListRequest:
      properties:
        insurerIds:
          type: array
          items:
            type: string
            format: uuid
      type: object
      required:
        - insurerIds
    OrganizationControllerAssignPoliciesRequest:
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationPolicyFormDto'
      type: object
      required:
        - policies
    UserControllerSetupOtpRequest:
      properties:
        mfaSecret:
          type: string
      type: object
    UserControllerResetPasswordRequest:
      properties:
        oldpassword:
          type: string
        newpassword:
          type: string
      type: object
    UserControllerGenerateMfaCodeRequest:
      properties:
        userId:
          type: string
      type: object
    ApiTokenControllerDeleteByIdResponse:
      type: boolean
    AuditControllerGetAuditsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    AuditControllerGetAudits206Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    AuthenticationsAuthorizeOauthUserResponse:
      type: object
    AuthenticationsGetForgottenOauthResponse:
      type: object
    AuthenticationsCheckMfaCodeResponse:
      type: object
    OrganizationControllerGetOrganizationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationDto'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    OrganizationControllerGetOrganizations206Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationDto'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    OrganizationControllerFindUserOrganizationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationDto'
    OrganizationControllerFindUserOrganizationIdsResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationDtoSystem'
    OrganizationControllerListUserOrganizationsResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationNameDto'
    OrganizationControllerGetUserEndorsementsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EndorsementDto'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    OrganizationControllerGetUserEndorsements206Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EndorsementDto'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    OrganizationControllerDeleteOrganizationByIdResponse:
      type: boolean
    OrganizationControllerGetPoliciesResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationPolicyDto'
    OrganizationControllerGetUserApiTokensResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApiToken'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    OrganizationControllerGetUserApiTokens206Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApiToken'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    OrganizationControllerGetDescendantIdsResponse:
      type: array
      items:
        type: string
    OrganizationControllerGetInsuredIdsResponse:
      type: array
      items:
        type: string
    OrganizationControllerListInsurerAssignedForOrganizationResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationNameDto'
    OrganizationControllerGetAssignedPoliciesResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationPolicyFormDto'
    OrganizationControllerAssignPoliciesResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationPolicyDto'
    OrganizationPolicyControllerDeletePolicyByIdResponse:
      type: boolean
    RoleControllerGetUserRolesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    RoleControllerGetUserRoles206Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    UserControllerGetUsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    UserControllerGetUsersList206Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        count:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        page:
          type: integer
          default: 0
          minLength: 0
          multipleOf: 1
        perPage:
          type: integer
          default: 20
          minLength: 1
          multipleOf: 1
      required:
        - data
    UserControllerFindUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserDto'
    UserControllerDeleteUserByIdResponse:
      type: boolean
    UserControllerGetUserRolesByIdResponse:
      type: array
      items:
        $ref: '#/components/schemas/RoleResponse'
    UserControllerResetPasswordResponse:
      type: boolean
    UserControllerResetUserPasswordResponse:
      type: boolean
    UserControllerGenerateMfaCodeResponse:
      type: boolean
