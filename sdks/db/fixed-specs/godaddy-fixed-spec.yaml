openapi: 3.0.0
info:
  title: ''
  description: >-
    All the help and tools you need to grow online: Websites, Domains, Digital
    and Social Marketing - plus GoDaddy Guides with you every step of the way.
  version: 1.0.0
  x-apisguru-categories:
    - hosting
  x-origin:
    - version: '2.0'
      format: swagger
      url: https://developer.godaddy.com/swagger/swagger_domains.json
  x-providerName: ote-godaddy.com
  x-serviceName: domains
servers:
  - url: //api.ote-godaddy.com
tags:
  - description: ''
    name: v1
  - description: ''
    name: Domains
  - description: ''
    name: Notifications
  - description: ''
    name: Actions
paths:
  /v1/domains:
    get:
      tags:
        - v1
      summary: Retrieve a list of Domains for the specified Shopper
      operationId: V1_getDomainsList
      parameters:
        - description: Shopper ID whose domains are to be retrieved
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Only include results with `status` value in the specified set
          explode: false
          in: query
          name: statuses
          required: false
          schema:
            items:
              enum:
                - ACTIVE
                - AWAITING_CLAIM_ACK
                - AWAITING_DOCUMENT_AFTER_TRANSFER
                - AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT
                - AWAITING_DOCUMENT_UPLOAD
                - AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY
                - AWAITING_PAYMENT
                - AWAITING_RENEWAL_TRANSFER_IN_COMPLETE
                - AWAITING_TRANSFER_IN_ACK
                - AWAITING_TRANSFER_IN_AUTH
                - AWAITING_TRANSFER_IN_AUTO
                - AWAITING_TRANSFER_IN_WHOIS
                - AWAITING_TRANSFER_IN_WHOIS_FIX
                - AWAITING_VERIFICATION_ICANN
                - AWAITING_VERIFICATION_ICANN_MANUAL
                - CANCELLED
                - CANCELLED_HELD
                - CANCELLED_REDEEMABLE
                - CANCELLED_TRANSFER
                - CONFISCATED
                - DISABLED_SPECIAL
                - EXCLUDED_INVALID_CLAIM_FIREHOSE
                - EXPIRED_REASSIGNED
                - FAILED_BACKORDER_CAPTURE
                - FAILED_DROP_IMMEDIATE_THEN_ADD
                - FAILED_PRE_REGISTRATION
                - FAILED_REDEMPTION
                - FAILED_REDEMPTION_REPORT
                - FAILED_REGISTRATION
                - FAILED_REGISTRATION_FIREHOSE
                - FAILED_RESTORATION_REDEMPTION_MOCK
                - FAILED_SETUP
                - FAILED_TRANSFER_IN
                - FAILED_TRANSFER_IN_BAD_STATUS
                - FAILED_TRANSFER_IN_REGISTRY
                - HELD_COURT_ORDERED
                - HELD_DISPUTED
                - HELD_EXPIRATION_PROTECTION
                - HELD_EXPIRED_REDEMPTION_MOCK
                - HELD_REGISTRAR_ADD
                - HELD_REGISTRAR_REMOVE
                - HELD_SHOPPER
                - HELD_TEMPORARY
                - LOCKED_ABUSE
                - LOCKED_COPYRIGHT
                - LOCKED_REGISTRY
                - LOCKED_SUPER
                - PARKED_AND_HELD
                - PARKED_EXPIRED
                - PARKED_VERIFICATION_ICANN
                - PENDING_ABORT_CANCEL_SETUP
                - PENDING_AGREEMENT_PRE_REGISTRATION
                - PENDING_APPLY_RENEWAL_CREDITS
                - PENDING_BACKORDER_CAPTURE
                - PENDING_BLOCKED_REGISTRY
                - PENDING_CANCEL_REGISTRANT_PROFILE
                - PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_COMPLETE_REGISTRANT_PROFILE
                - PENDING_COO
                - PENDING_COO_COMPLETE
                - PENDING_DNS
                - PENDING_DNS_ACTIVE
                - PENDING_DNS_INACTIVE
                - PENDING_DOCUMENT_VALIDATION
                - PENDING_DOCUMENT_VERIFICATION
                - PENDING_DROP_IMMEDIATE
                - PENDING_DROP_IMMEDIATE_THEN_ADD
                - PENDING_EPP_CREATE
                - PENDING_EPP_DELETE
                - PENDING_EPP_UPDATE
                - PENDING_ESCALATION_REGISTRY
                - PENDING_EXPIRATION
                - PENDING_EXPIRATION_RESPONSE
                - PENDING_EXPIRATION_SYNC
                - PENDING_EXPIRED_REASSIGNMENT
                - PENDING_EXPIRE_AUTO_ADD
                - PENDING_EXTEND_REGISTRANT_PROFILE
                - PENDING_FAILED_COO
                - PENDING_FAILED_EPP_CREATE
                - PENDING_FAILED_HELD
                - PENDING_FAILED_PURCHASE_PREMIUM
                - PENDING_FAILED_RECONCILE_FIREHOSE
                - PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_FAILED_RELEASE_PREMIUM
                - PENDING_FAILED_RENEW_EXPIRATION_PROTECTION
                - PENDING_FAILED_RESERVE_PREMIUM
                - PENDING_FAILED_SUBMIT_FIREHOSE
                - PENDING_FAILED_TRANSFER_ACK_PREMIUM
                - PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM
                - PENDING_FAILED_TRANSFER_IN_PREMIUM
                - PENDING_FAILED_TRANSFER_PREMIUM
                - PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM
                - PENDING_FAILED_UNLOCK_PREMIUM
                - PENDING_FAILED_UPDATE_API
                - PENDING_FRAUD_VERIFICATION
                - PENDING_FRAUD_VERIFIED
                - PENDING_GET_CONTACTS
                - PENDING_GET_HOSTS
                - PENDING_GET_NAME_SERVERS
                - PENDING_GET_STATUS
                - PENDING_HOLD_ESCROW
                - PENDING_HOLD_REDEMPTION
                - PENDING_LOCK_CLIENT_REMOVE
                - PENDING_LOCK_DATA_QUALITY
                - PENDING_LOCK_THEN_HOLD_REDEMPTION
                - PENDING_PARKING_DETERMINATION
                - PENDING_PARK_INVALID_WHOIS
                - PENDING_PARK_INVALID_WHOIS_REMOVAL
                - PENDING_PURCHASE_PREMIUM
                - PENDING_RECONCILE
                - PENDING_RECONCILE_FIREHOSE
                - PENDING_REDEMPTION
                - PENDING_REDEMPTION_REPORT
                - PENDING_REDEMPTION_REPORT_COMPLETE
                - PENDING_REDEMPTION_REPORT_SUBMITTED
                - PENDING_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK
                - PENDING_RELEASE_PREMIUM
                - PENDING_REMOVAL
                - PENDING_REMOVAL_HELD
                - PENDING_REMOVAL_PARKED
                - PENDING_REMOVAL_UNPARK
                - PENDING_RENEWAL
                - PENDING_RENEW_EXPIRATION_PROTECTION
                - PENDING_RENEW_INFINITE
                - PENDING_RENEW_LOCKED
                - PENDING_RENEW_WITHOUT_RECEIPT
                - PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT
                - PENDING_RESERVE_PREMIUM
                - PENDING_RESET_VERIFICATION_ICANN
                - PENDING_RESPONSE_FIREHOSE
                - PENDING_RESTORATION
                - PENDING_RESTORATION_INACTIVE
                - PENDING_RESTORATION_REDEMPTION_MOCK
                - PENDING_RETRY_EPP_CREATE
                - PENDING_RETRY_HELD
                - PENDING_SEND_AUTH_CODE
                - PENDING_SETUP
                - PENDING_SETUP_ABANDON
                - PENDING_SETUP_AGREEMENT_LANDRUSH
                - PENDING_SETUP_AGREEMENT_SUNRISE2_A
                - PENDING_SETUP_AGREEMENT_SUNRISE2_B
                - PENDING_SETUP_AGREEMENT_SUNRISE2_C
                - PENDING_SETUP_AUTH
                - PENDING_SETUP_DNS
                - PENDING_SETUP_FAILED
                - PENDING_SETUP_REVIEW
                - PENDING_SETUP_SUNRISE
                - PENDING_SETUP_SUNRISE_PRE
                - PENDING_SETUP_SUNRISE_RESPONSE
                - PENDING_SUBMIT_FAILURE
                - PENDING_SUBMIT_FIREHOSE
                - PENDING_SUBMIT_HOLD_FIREHOSE
                - PENDING_SUBMIT_HOLD_LANDRUSH
                - PENDING_SUBMIT_HOLD_SUNRISE
                - PENDING_SUBMIT_LANDRUSH
                - PENDING_SUBMIT_RESPONSE_FIREHOSE
                - PENDING_SUBMIT_RESPONSE_LANDRUSH
                - PENDING_SUBMIT_RESPONSE_SUNRISE
                - PENDING_SUBMIT_SUCCESS_FIREHOSE
                - PENDING_SUBMIT_SUCCESS_LANDRUSH
                - PENDING_SUBMIT_SUCCESS_SUNRISE
                - PENDING_SUBMIT_SUNRISE
                - PENDING_SUBMIT_WAITING_LANDRUSH
                - PENDING_SUCCESS_PRE_REGISTRATION
                - PENDING_SUSPENDED_DATA_QUALITY
                - PENDING_TRANSFER_ACK_PREMIUM
                - PENDING_TRANSFER_IN
                - PENDING_TRANSFER_IN_ACK
                - PENDING_TRANSFER_IN_ACK_PREMIUM
                - PENDING_TRANSFER_IN_BAD_REGISTRANT
                - PENDING_TRANSFER_IN_CANCEL
                - PENDING_TRANSFER_IN_CANCEL_REGISTRY
                - PENDING_TRANSFER_IN_COMPLETE_ACK
                - PENDING_TRANSFER_IN_DELETE
                - PENDING_TRANSFER_IN_LOCK
                - PENDING_TRANSFER_IN_NACK
                - PENDING_TRANSFER_IN_NOTIFICATION
                - PENDING_TRANSFER_IN_PREMIUM
                - PENDING_TRANSFER_IN_RELEASE
                - PENDING_TRANSFER_IN_RESPONSE
                - PENDING_TRANSFER_IN_UNDERAGE
                - PENDING_TRANSFER_OUT
                - PENDING_TRANSFER_OUT_ACK
                - PENDING_TRANSFER_OUT_NACK
                - PENDING_TRANSFER_OUT_PREMIUM
                - PENDING_TRANSFER_OUT_UNDERAGE
                - PENDING_TRANSFER_OUT_VALIDATION
                - PENDING_TRANSFER_PREMIUM
                - PENDING_TRANSFER_PREMUIM
                - PENDING_TRANSFER_SUBMIT_PREMIUM
                - PENDING_UNLOCK_DATA_QUALITY
                - PENDING_UNLOCK_PREMIUM
                - PENDING_UPDATE
                - PENDING_UPDATED_REGISTRANT_DATA_QUALITY
                - PENDING_UPDATE_ACCOUNT
                - PENDING_UPDATE_API
                - PENDING_UPDATE_API_RESPONSE
                - PENDING_UPDATE_AUTH
                - PENDING_UPDATE_CONTACTS
                - PENDING_UPDATE_CONTACTS_PRIVACY
                - PENDING_UPDATE_DNS
                - PENDING_UPDATE_DNS_SECURITY
                - PENDING_UPDATE_ELIGIBILITY
                - PENDING_UPDATE_EPP_CONTACTS
                - PENDING_UPDATE_MEMBERSHIP
                - PENDING_UPDATE_OWNERSHIP
                - PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION
                - PENDING_UPDATE_OWNERSHIP_HELD
                - PENDING_UPDATE_REGISTRANT
                - PENDING_UPDATE_REPO
                - PENDING_VALIDATION_DATA_QUALITY
                - PENDING_VERIFICATION_FRAUD
                - PENDING_VERIFICATION_STATUS
                - PENDING_VERIFY_REGISTRANT_DATA_QUALITY
                - RESERVED
                - RESERVED_PREMIUM
                - REVERTED
                - SUSPENDED_VERIFICATION_ICANN
                - TRANSFERRED_OUT
                - UNLOCKED_ABUSE
                - UNLOCKED_SUPER
                - UNPARKED_AND_UNHELD
                - UPDATED_OWNERSHIP
                - UPDATED_OWNERSHIP_HELD
              type: string
            type: array
          style: form
        - description: >-
            Only include results with `status` value in any of the specified
            groups
          explode: false
          in: query
          name: statusGroups
          required: false
          schema:
            items:
              enum:
                - INACTIVE
                - PRE_REGISTRATION
                - REDEMPTION
                - RENEWABLE
                - VERIFICATION_ICANN
                - VISIBLE
              type: string
            type: array
          style: form
        - description: Maximum number of domains to return
          in: query
          name: limit
          required: false
          schema:
            maximum: 1000
            minimum: 1
            type: integer
        - description: Marker Domain to use as the offset in results
          in: query
          name: marker
          required: false
          schema:
            type: string
        - description: Optional details to be included in the response
          explode: false
          in: query
          name: includes
          required: false
          schema:
            items:
              enum:
                - authCode
                - contacts
                - nameServers
              type: string
            type: array
          style: form
        - description: >-
            Only include results that have been modified since the specified
            date
          in: query
          name: modifiedDate
          required: false
          schema:
            format: iso-datetime
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetDomainsList200Response'
            application/javascript:
              schema:
                $ref: '#/components/schemas/V1GetDomainsListResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/V1GetDomainsList200Response1'
            text/javascript:
              schema:
                $ref: '#/components/schemas/V1GetDomainsList200Response2'
            text/xml:
              schema:
                $ref: '#/components/schemas/V1GetDomainsList200Response3'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Limit must have a value no greater than 1000
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/agreements:
    get:
      tags:
        - v1
      summary: >-
        Retrieve the legal agreement(s) required to purchase the specified TLD
        and add-ons
      operationId: V1_getLegalAgreements
      parameters:
        - description: >-
            Unique identifier of the Market used to retrieve/translate Legal
            Agreements
          in: header
          name: X-Market-Id
          required: false
          schema:
            default: en-US
            format: bcp-47
            type: string
        - description: list of TLDs whose legal agreements are to be retrieved
          explode: false
          in: query
          name: tlds
          required: true
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Whether or not privacy has been requested
          in: query
          name: privacy
          required: true
          schema:
            type: boolean
        - description: Whether or not domain tranfer has been requested
          in: query
          name: forTransfer
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetLegalAgreements200Response'
            application/javascript:
              schema:
                $ref: '#/components/schemas/V1GetLegalAgreementsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/V1GetLegalAgreements200Response1'
            text/javascript:
              schema:
                $ref: '#/components/schemas/V1GetLegalAgreements200Response2'
            text/xml:
              schema:
                $ref: '#/components/schemas/V1GetLegalAgreements200Response3'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/available:
    get:
      tags:
        - v1
      summary: Determine whether or not the specified domain is available for purchase
      operationId: V1_checkDomainAvailability
      parameters:
        - description: Domain name whose availability is to be checked
          in: query
          name: domain
          required: true
          schema:
            type: string
        - description: Optimize for time ('FAST') or accuracy ('FULL')
          in: query
          name: checkType
          required: false
          schema:
            default: FAST
            enum:
              - FAST
              - FULL
              - fast
              - full
            type: string
        - description: >-
            Whether or not to include domains available for transfer. If set to
            True, checkType is ignored
          in: query
          name: forTransfer
          required: false
          schema:
            default: false
            type: boolean
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAvailableResponse'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainAvailableResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainAvailableResponse'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainAvailableResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainAvailableResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Cannot convert domain label error<br>Domain is missing IDN
            script<br>Domain segment ends with dash<br>Domain starts with
            dashbr>Domain uses unsupported IDN script<br>FQDN fails generic
            validity regex<br>Invalid character(s) error<br>Invalid tld
            error<br>Non-IDN domain name must not have dashes at the third and
            fourth position<br>Reserved name error<br>domain must be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - v1
      summary: >-
        Determine whether or not the specified domains are available for
        purchase
      operationId: V1_checkDomainAvailabilityPost
      parameters:
        - description: Optimize for time ('FAST') or accuracy ('FULL')
          in: query
          name: checkType
          required: false
          schema:
            default: FAST
            enum:
              - FAST
              - FULL
              - fast
              - full
            type: string
      requestBody:
        description: Domain names for which to check availability
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1CheckDomainAvailabilityPostRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/V1CheckDomainAvailabilityPostRequest1'
          text/xml:
            schema:
              $ref: '#/components/schemas/V1CheckDomainAvailabilityPostRequest2'
        required: true
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulk'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulk'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulk'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulk'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulk'
        '203':
          description: Request was partially successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulkMixed'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulkMixed'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulkMixed'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulkMixed'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainAvailableBulkMixed'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Cannot convert domain label error<br>Domain is missing IDN
            script<br>Domain segment ends with dash<br>Domain starts with
            dash<br>Domain uses unsupported IDN script<br>FQDN fails generic
            validity regex<br>Invalid character(s) error<br>Invalid tld
            error<br>Non-IDN domain name must not have dashes at the third and
            fourth position<br>Reserved name error<br>Reserved name
            error<br>domain must be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/contacts/validate:
    post:
      tags:
        - v1
      summary: >-
        Validate the request body using the Domain Contact Validation Schema for
        specified domains.
      operationId: V1_validateDomainContacts
      description: >-
        All contacts specified in request will be validated against all domains
        specifed in "domains". As an alternative, you can also pass in tlds,
        with the exception of `uk`, which requires full domain names
      parameters:
        - description: PrivateLabelId to operate as, if different from JWT
          in: header
          name: X-Private-Label-Id
          required: false
          schema:
            default: 1
            type: integer
        - description: >-
            MarketId in which the request is being made, and for which responses
            should be localized
          in: query
          name: marketId
          required: false
          schema:
            default: en-US
            format: bcp-47
            type: string
      requestBody:
        description: An instance document expected for domains contacts validation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainsContactsBulk'
          application/xml:
            schema:
              $ref: '#/components/schemas/DomainsContactsBulk'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainsContactsBulk'
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Request body doesn't fulfill schema, see details in `fields`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDomainContactsValidate'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorDomainContactsValidate'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorDomainContactsValidate'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorDomainContactsValidate'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorDomainContactsValidate'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/purchase:
    post:
      tags:
        - v1
      summary: Purchase and register the specified Domain
      operationId: V1_createDomainPurchase
      parameters:
        - description: The Shopper for whom the domain should be purchased
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DomainPurchase'
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            domain must be specified<br>Based on restrictions declared in JSON
            schema returned by `./schema/{tld}`<br>Cannot convert domain label
            error<br>Domain is missing IDN script<br>Domain segment ends with
            dash<br>Domain starts with dash<br>Domain uses unsupported IDN
            script<br>FQDN fails generic validity regex<br>Invalid character(s)
            error<br>Invalid tld error<br>Non-IDN domain name must not have
            dashes at the third and fourth position<br>Reserved name
            error<br>`body` must be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/purchase/schema/{tld}:
    get:
      tags:
        - v1
      summary: >-
        Retrieve the schema to be submitted when registering a Domain for the
        specified TLD
      operationId: V1_getDomainSchema
      parameters:
        - description: The Top-Level Domain whose schema should be retrieved
          in: path
          name: tld
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
            application/javascript:
              schema:
                $ref: '#/components/schemas/JsonSchema'
            application/xml:
              schema:
                $ref: '#/components/schemas/JsonSchema'
            text/javascript:
              schema:
                $ref: '#/components/schemas/JsonSchema'
            text/xml:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`tld` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/purchase/validate:
    post:
      tags:
        - v1
      summary: >-
        Validate the request body using the Domain Purchase Schema for the
        specified TLD
      operationId: V1_validateDomainPurchase
      requestBody:
        $ref: '#/components/requestBodies/DomainPurchase'
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Based on restrictions declared in JSON schema returned by
            `./schema/{tld}`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/suggest:
    get:
      tags:
        - v1
      summary: >-
        Suggest alternate Domain names based on a seed Domain, a set of
        keywords, or the shopper's purchase history
      operationId: V1_suggestAlternateDomains
      parameters:
        - description: Shopper ID for which the suggestions are being generated
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: >-
            Domain name or set of keywords for which alternative domain names
            will be suggested
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: >-
            Two-letter ISO country code to be used as a hint for target
            region<br/><br/>

            NOTE: These are sample values, there are many

            <a href="http://www.iso.org/iso/country_codes.htm">more</a>
          in: query
          name: country
          required: false
          schema:
            enum:
              - AC
              - AD
              - AE
              - AF
              - AG
              - AI
              - AL
              - AM
              - AO
              - AQ
              - AR
              - AS
              - AT
              - AU
              - AW
              - AX
              - AZ
              - BA
              - BB
              - BD
              - BE
              - BF
              - BG
              - BH
              - BI
              - BJ
              - BM
              - BN
              - BO
              - BQ
              - BR
              - BS
              - BT
              - BV
              - BW
              - BY
              - BZ
              - CA
              - CC
              - CD
              - CF
              - CG
              - CH
              - CI
              - CK
              - CL
              - CM
              - CN
              - CO
              - CR
              - CV
              - CW
              - CX
              - CY
              - CZ
              - DE
              - DJ
              - DK
              - DM
              - DO
              - DZ
              - EC
              - EE
              - EG
              - EH
              - ER
              - ES
              - ET
              - FI
              - FJ
              - FK
              - FM
              - FO
              - FR
              - GA
              - GB
              - GD
              - GE
              - GF
              - GG
              - GH
              - GI
              - GL
              - GM
              - GN
              - GP
              - GQ
              - GR
              - GS
              - GT
              - GU
              - GW
              - GY
              - HK
              - HM
              - HN
              - HR
              - HT
              - HU
              - ID
              - IE
              - IL
              - IM
              - IN
              - IO
              - IQ
              - IS
              - IT
              - JE
              - JM
              - JO
              - JP
              - KE
              - KG
              - KH
              - KI
              - KM
              - KN
              - KR
              - KV
              - KW
              - KY
              - KZ
              - LA
              - LB
              - LC
              - LI
              - LK
              - LR
              - LS
              - LT
              - LU
              - LV
              - LY
              - MA
              - MC
              - MD
              - ME
              - MG
              - MH
              - MK
              - ML
              - MM
              - MN
              - MO
              - MP
              - MQ
              - MR
              - MS
              - MT
              - MU
              - MV
              - MW
              - MX
              - MY
              - MZ
              - NA
              - NC
              - NE
              - NF
              - NG
              - NI
              - NL
              - 'NO'
              - NP
              - NR
              - NU
              - NZ
              - OM
              - PA
              - PE
              - PF
              - PG
              - PH
              - PK
              - PL
              - PM
              - PN
              - PR
              - PS
              - PT
              - PW
              - PY
              - QA
              - RE
              - RO
              - RS
              - RU
              - RW
              - SA
              - SB
              - SC
              - SE
              - SG
              - SH
              - SI
              - SJ
              - SK
              - SL
              - SM
              - SN
              - SO
              - SR
              - ST
              - SV
              - SX
              - SZ
              - TC
              - TD
              - TF
              - TG
              - TH
              - TJ
              - TK
              - TL
              - TM
              - TN
              - TO
              - TP
              - TR
              - TT
              - TV
              - TW
              - TZ
              - UA
              - UG
              - UM
              - US
              - UY
              - UZ
              - VA
              - VC
              - VE
              - VG
              - VI
              - VN
              - VU
              - WF
              - WS
              - YE
              - YT
              - ZA
              - ZM
              - ZW
            format: iso-country-code
            type: string
        - description: Name of city to be used as a hint for target region
          in: query
          name: city
          required: false
          schema:
            format: city-name
            type: string
        - description: >-
            Sources to be queried<br/><br/><ul>

            <li><strong>CC_TLD</strong> - Varies the TLD using Country
            Codes</li>

            <li><strong>EXTENSION</strong> - Varies the TLD</li>

            <li><strong>KEYWORD_SPIN</strong> - Identifies keywords and then
            rotates each one</li>

            <li><strong>PREMIUM</strong> - Includes variations with premium
            prices</li></ul>
          explode: false
          in: query
          name: sources
          required: false
          schema:
            items:
              enum:
                - CC_TLD
                - EXTENSION
                - KEYWORD_SPIN
                - PREMIUM
                - cctld
                - extension
                - keywordspin
                - premium
              type: string
            type: array
          style: form
        - description: >-
            Top-level domains to be included in suggestions<br/><br/>

            NOTE: These are sample values, there are many

            <a
            href="http://www.godaddy.com/tlds/gtld.aspx#domain_search_form">more</a>
          explode: false
          in: query
          name: tlds
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Maximum length of second-level domain
          in: query
          name: lengthMax
          required: false
          schema:
            type: integer
        - description: Minimum length of second-level domain
          in: query
          name: lengthMin
          required: false
          schema:
            type: integer
        - description: Maximum number of suggestions to return
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: |-
            Maximum amount of time, in milliseconds, to wait for responses
            If elapses, return the results compiled up to that point
          in: query
          name: waitMs
          required: false
          schema:
            default: 1000
            format: integer-positive
            type: integer
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1SuggestAlternateDomains200Response'
            application/javascript:
              schema:
                $ref: '#/components/schemas/V1SuggestAlternateDomainsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/V1SuggestAlternateDomains200Response1'
            text/javascript:
              schema:
                $ref: '#/components/schemas/V1SuggestAlternateDomains200Response2'
            text/xml:
              schema:
                $ref: '#/components/schemas/V1SuggestAlternateDomains200Response3'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`query` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/tlds:
    get:
      tags:
        - v1
      summary: Retrieves a list of TLDs supported and enabled for sale
      operationId: V1_getTldsList
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetTldsList200Response'
            application/javascript:
              schema:
                $ref: '#/components/schemas/V1GetTldsListResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/V1GetTldsList200Response1'
            text/javascript:
              schema:
                $ref: '#/components/schemas/V1GetTldsList200Response2'
            text/xml:
              schema:
                $ref: '#/components/schemas/V1GetTldsList200Response3'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}:
    delete:
      tags:
        - v1
      summary: Cancel a purchased domain
      operationId: V1_cancelDomainPurchase
      parameters:
        - description: Domain to cancel
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Unknown domain error<br>At least two apex (aka @) `nameServers` must
            be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - v1
      summary: Retrieve details for the specified Domain
      operationId: V1_getDomainDetails
      parameters:
        - description: Shopper ID expected to own the specified domain
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain name whose details are to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainDetail'
        '203':
          description: >-
            Request was partially successful, see verifications.status for
            further detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainDetail'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainDetail'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`domain` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - v1
      summary: Update details for the specified Domain
      operationId: V1_updateDomainDetails
      parameters:
        - description: Domain whose details are to be updated
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: >-
            Shopper for whom Domain is to be updated. NOTE: This is only
            required if you are a Reseller managing a domain purchased outside
            the scope of your reseller account. For instance, if you're a
            Reseller, but purchased a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
      requestBody:
        description: Changes to apply to existing Domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainUpdate'
          application/xml:
            schema:
              $ref: '#/components/schemas/DomainUpdate'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainUpdate'
        required: true
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Specified Subaccount not owned by authenticated Shopper
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The given domain is not eligible to have its nameservers changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            At least two apex (aka @) `nameServers` must be specified<br>Failed
            to update nameservers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/contacts:
    patch:
      tags:
        - v1
      summary: Update domain
      operationId: V1_updateDomainContacts
      parameters:
        - description: >-
            Shopper for whom domain contacts are to be updated. NOTE: This is
            only required if you are a Reseller managing a domain purchased
            outside the scope of your reseller account. For instance, if you're
            a Reseller, but purchased a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose Contacts are to be updated.
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Changes to apply to existing Contacts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainContacts'
          application/xml:
            schema:
              $ref: '#/components/schemas/DomainContacts'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainContacts'
        required: true
      responses:
        '200':
          description: No response was specified
        '204':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Domain not found<br>Identity document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`domain` is not a valid Domain name'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/privacy:
    delete:
      tags:
        - v1
      summary: Submit a privacy cancellation request for the given domain
      operationId: V1_cancelPrivacyRequest
      parameters:
        - description: Shopper ID of the owner of the domain
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose privacy is to be cancelled
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Customer has purchased Domain Ownership Protection and the domain
            has expired<br>The domain status does not allow performing the
            operation<br>Unknown domain error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/privacy/purchase:
    post:
      tags:
        - v1
      summary: Purchase privacy for a specified domain
      operationId: V1_purchasePrivacyForDomain
      parameters:
        - description: Shopper ID of the owner of the domain
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain for which to purchase privacy
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Options for purchasing privacy
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivacyPurchase'
          application/xml:
            schema:
              $ref: '#/components/schemas/PrivacyPurchase'
          text/xml:
            schema:
              $ref: '#/components/schemas/PrivacyPurchase'
        required: true
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            End-user must read and consent to all of the following legal
            agreements<br>`domain` must match `sld.tld`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/records:
    patch:
      tags:
        - v1
      summary: Add the specified DNS Records to the specified Domain
      operationId: V1_addDnsRecordsToDomain
      parameters:
        - description: >-
            Shopper ID which owns the domain. NOTE: This is only required if you
            are a Reseller managing a domain purchased outside the scope of your
            reseller account. For instance, if you're a Reseller, but purchased
            a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be augmented
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: DNS Records to add to whatever currently exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrayOfDNSRecord'
          application/xml:
            schema:
              $ref: '#/components/schemas/ArrayOfDNSRecord'
          text/xml:
            schema:
              $ref: '#/components/schemas/ArrayOfDNSRecord'
        required: true
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`domain` is not a valid Domain name'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - v1
      summary: Replace all DNS Records for the specified Domain
      operationId: V1_replaceDnsRecords
      parameters:
        - description: >-
            Shopper ID which owns the domain. NOTE: This is only required if you
            are a Reseller managing a domain purchased outside the scope of your
            reseller account. For instance, if you're a Reseller, but purchased
            a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be replaced
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: DNS Records to replace whatever currently exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsRequest1'
          text/xml:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsRequest2'
        required: true
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            `domain` is not a valid Domain name<br>`record` does not fulfill the
            schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/records/{type}:
    put:
      tags:
        - v1
      summary: Replace all DNS Records for the specified Domain with the specified Type
      operationId: V1_replaceDnsRecordsType
      parameters:
        - description: >-
            Shopper ID which owns the domain. NOTE: This is only required if you
            are a Reseller managing a domain purchased outside the scope of your
            reseller account. For instance, if you're a Reseller, but purchased
            a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be replaced
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be replaced
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - NS
              - SOA
              - SRV
              - TXT
            type: string
      requestBody:
        description: DNS Records to replace whatever currently exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsTypeRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsTypeRequest1'
          text/xml:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsTypeRequest2'
        required: true
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`record` does not fulfill the schema'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/records/{type}/{name}:
    delete:
      tags:
        - v1
      summary: >-
        Delete all DNS Records for the specified Domain with the specified Type
        and Name
      operationId: V1_deleteAllDnsRecords
      parameters:
        - description: >-
            Shopper ID which owns the domain. NOTE: This is only required if you
            are a Reseller managing a domain purchased outside the scope of your
            reseller account. For instance, if you're a Reseller, but purchased
            a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be deleted
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be deleted
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - SRV
              - TXT
            type: string
        - description: DNS Record Name for which DNS Records are to be deleted
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The given domain is not eligible to have its records changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`domain` is not a valid Domain name'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - v1
      summary: >-
        Retrieve DNS Records for the specified Domain, optionally with the
        specified Type and/or Name
      operationId: V1_getDnsRecords
      parameters:
        - description: >-
            Shopper ID which owns the domain. NOTE: This is only required if you
            are a Reseller managing a domain purchased outside the scope of your
            reseller account. For instance, if you're a Reseller, but purchased
            a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be retrieved
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - NS
              - SOA
              - SRV
              - TXT
            type: string
        - description: DNS Record Name for which DNS Records are to be retrieved
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Number of results to skip for pagination
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Maximum number of items to return
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1GetDnsRecords200Response'
            application/javascript:
              schema:
                $ref: '#/components/schemas/V1GetDnsRecordsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/V1GetDnsRecords200Response1'
            text/javascript:
              schema:
                $ref: '#/components/schemas/V1GetDnsRecords200Response2'
            text/xml:
              schema:
                $ref: '#/components/schemas/V1GetDnsRecords200Response3'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            `record` does not fulfill the schema<br>`domain` is not a valid
            Domain name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - v1
      summary: >-
        Replace all DNS Records for the specified Domain with the specified Type
        and Name
      operationId: V1_replaceDnsRecordsType
      parameters:
        - description: >-
            Shopper ID which owns the domain. NOTE: This is only required if you
            are a Reseller managing a domain purchased outside the scope of your
            reseller account. For instance, if you're a Reseller, but purchased
            a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose DNS Records are to be replaced
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: DNS Record Type for which DNS Records are to be replaced
          in: path
          name: type
          required: true
          schema:
            enum:
              - A
              - AAAA
              - CNAME
              - MX
              - NS
              - SOA
              - SRV
              - TXT
            type: string
        - description: DNS Record Name for which DNS Records are to be replaced
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        description: DNS Records to replace whatever currently exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsTypeRequest3'
          application/xml:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsTypeRequest4'
          text/xml:
            schema:
              $ref: '#/components/schemas/V1ReplaceDnsRecordsTypeRequest5'
        required: true
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`record` does not fulfill the schema'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/renew:
    post:
      tags:
        - v1
      summary: Renew the specified Domain
      operationId: V1_renewDomain
      parameters:
        - description: >-
            Shopper for whom Domain is to be renewed. NOTE: This is only
            required if you are a Reseller managing a domain purchased outside
            the scope of your reseller account. For instance, if you're a
            Reseller, but purchased a Domain via http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain to renew
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Options for renewing existing Domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRenew'
          application/xml:
            schema:
              $ref: '#/components/schemas/DomainRenew'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainRenew'
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            End-user must read and consent to all of the following legal
            agreements<br>`domain` must match `sld.tld`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/transfer:
    post:
      tags:
        - v1
      summary: Purchase and start or restart transfer process
      operationId: V1_purchaseTransferProcess
      parameters:
        - description: The Shopper to whom the domain should be transfered
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain to transfer in
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Details for domain transfer purchase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainTransferIn'
          application/xml:
            schema:
              $ref: '#/components/schemas/DomainTransferIn'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainTransferIn'
        required: true
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/javascript:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainPurchaseResponse'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: '`domain` (domain) isn''t available for transfer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Based on restrictions declared in JSON schema returned by
            `./schema/{tld}`<br>Cannot convert domain label error<br>Domain is
            missing IDN script<br>Domain segment ends with dash<br>Domain starts
            with dash<br>Domain uses unsupported IDN script<br>End-user must
            read and consent to all of the following legal agreements<br>FQDN
            fails generic validity regex<br>Invalid character(s)
            error<br>Invalid period range<br>Invalid tld error<br>Non-IDN domain
            name must not have dashes at the third and fourth
            position<br>Reserved name error<br>`authCode` cannot be
            empty<br>`domain` must match `sld.tld`<br>domain must be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/domains/{domain}/verifyRegistrantEmail:
    post:
      tags:
        - v1
      summary: Re-send Contact E-mail Verification for specified Domain
      operationId: V1_resendContactEmailVerification
      parameters:
        - description: >-
            Shopper for whom domain contact e-mail should be verified. NOTE:
            This is only required if you are a Reseller managing a domain
            purchased outside the scope of your reseller account. For instance,
            if you're a Reseller, but purchased a Domain via
            http://www.godaddy.com
          in: header
          name: X-Shopper-Id
          required: false
          schema:
            type: string
        - description: Domain whose Contact E-mail should be verified.
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`domain` is not a valid Domain name'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/javascript:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            text/javascript:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/forwards/{fqdn}:
    delete:
      tags:
        - Domains
      summary: Submit a forwarding cancellation request for the given fqdn
      operationId: Domains_cancelForwardingRequest
      description: >-
        <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as
        **customerId**.  **shopperId** is a number of max length 10 digits
        (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:*
        295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      parameters:
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: >-
            The fully qualified domain name whose forwarding details are to be
            deleted.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Request was successful
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: A valid `fqdn` must be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Domains
      summary: Retrieve the forwarding information for the given fqdn
      operationId: Domains_getForwardingInfo
      description: >-
        <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as
        **customerId**.  **shopperId** is a number of max length 10 digits
        (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:*
        295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      parameters:
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: >-
            The fully qualified domain name whose forwarding details are to be
            retrieved.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
        - description: >-
            Optionally include all sub domains if the fqdn specified is a domain
            and not a sub domain.
          in: query
          name: includeSubs
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainsGetForwardingInfoResponse'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: A valid `fqdn` must be specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Domains
      summary: Create a new forwarding configuration for the given FQDN
      operationId: Domains_createForwardingConfiguration
      description: >-
        <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as
        **customerId**.  **shopperId** is a number of max length 10 digits
        (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:*
        295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      parameters:
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your own
            customer id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: >-
            The fully qualified domain name whose forwarding details are to be
            modified.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
      requestBody:
        description: Domain forwarding rule to create for the specified fqdn
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainForwardingCreate'
        required: true
      responses:
        '204':
          description: Request was successful
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Provided `fqdn` already has forwarding setup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Request body doesn't fulfill schema, see details in `fields`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Domains
      summary: Modify the forwarding information for the given fqdn
      operationId: Domains_modifyForwardingInfo
      description: >-
        <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as
        **customerId**.  **shopperId** is a number of max length 10 digits
        (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:*
        295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
      parameters:
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: >-
            The fully qualified domain name whose forwarding details are to be
            modified.
          in: path
          name: fqdn
          required: true
          schema:
            type: string
      requestBody:
        description: Domain forwarding rule to create or replace on the fqdn
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainForwardingCreate'
        required: true
      responses:
        '204':
          description: Request was successful
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Request body doesn't fulfill schema, see details in `fields`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/notifications:
    get:
      tags:
        - Notifications
      summary: Retrieve the next domain notification
      operationId: Notifications_getNextDomain
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainNotification'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The customer does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/notifications/optIn:
    get:
      tags:
        - Notifications
      summary: Retrieve a list of notification types that are opted in
      operationId: Notifications_listOptedInTypes
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsListOptedInTypesResponse'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The customer does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Notifications
      summary: Opt in to recieve notifications for the submitted notification types
      operationId: Notifications_optInNotifications
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The notification types that should be opted in
          explode: false
          in: query
          name: types
          required: true
          schema:
            items:
              enum:
                - AUTH_CODE_PURCHASE
                - AUTH_CODE_REGENERATE
                - AUTO_RENEWAL
                - BACKORDER
                - BACKORDER_PURCHASE
                - BACKORDER_DELETE
                - BACKORDER_UPDATE
                - CONTACT_CREATE
                - CONTACT_DELETE
                - CONTACT_UPDATE
                - DNS_VERIFICATION
                - DNSSEC_CREATE
                - DNSSEC_DELETE
                - DOMAIN_DELETE
                - DOMAIN_UPDATE
                - DOMAIN_UPDATE_CONTACTS
                - DOMAIN_UPDATE_NAME_SERVERS
                - EXPIRY
                - HOST_CREATE
                - HOST_DELETE
                - ICANN_VERIFICATION
                - MIGRATE
                - MIGRATE_IN
                - PREMIUM
                - PRIVACY_PURCHASE
                - PRIVACY_DELETE
                - REDEEM
                - REGISTER
                - RENEW
                - RENEW_UNDO
                - TRADE
                - TRADE_CANCEL
                - TRADE_PURCHASE
                - TRADE_PURCHASE_AUTH_TEXT_MESSAGE
                - TRADE_RESEND_AUTH_EMAIL
                - TRANSFER
                - TRANSFER_IN
                - TRANSFER_IN_ACCEPT
                - TRANSFER_IN_CANCEL
                - TRANSFER_IN_RESTART
                - TRANSFER_IN_RETRY
                - TRANSFER_OUT
                - TRANSFER_OUT_ACCEPT
                - TRANSFER_OUT_REJECT
                - TRANSFER_OUT_REQUESTED
                - TRANSIT
              type: string
            type: array
          style: form
      responses:
        '204':
          description: Command successful
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The customer does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`type` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/notifications/schemas/{type}:
    get:
      tags:
        - Notifications
      summary: >-
        Retrieve the schema for the notification data for the specified
        notification type
      operationId: Notifications_getSchema
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The notification type whose schema should be retrieved
          in: path
          name: type
          required: true
          schema:
            enum:
              - AUTO_RENEWAL
              - BACKORDER
              - BACKORDER_PURCHASE
              - EXPIRY
              - PREMIUM
              - PRIVACY_PURCHASE
              - REDEEM
              - REGISTER
              - RENEW
              - TRADE
              - TRANSFER
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The schema type does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`type` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/notifications/{notificationId}/acknowledge:
    post:
      tags:
        - Notifications
      summary: Acknowledge a domain notification
      operationId: Notifications_acknowledgeDomainNotification
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The notification ID to acknowledge
          in: path
          name: notificationId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Message acknowledged
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/register:
    post:
      tags:
        - Domains
      summary: Purchase and register the specified Domain
      operationId: Domains_purchaseRegisterDomain
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DomainPurchaseV2'
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/REGISTER to poll
            status
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Based on restrictions declared in JSON schema returned by
            `./schema/{tld}`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/register/schema/{tld}:
    get:
      tags:
        - Domains
      summary: >-
        Retrieve the schema to be submitted when registering a Domain for the
        specified TLD
      operationId: Domains_getRegisterSchema
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: The Top-Level Domain whose schema should be retrieved
          in: path
          name: tld
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The tld does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`tld` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/register/validate:
    post:
      tags:
        - Domains
      summary: >-
        Validate the request body using the Domain Registration Schema for the
        specified TLD
      operationId: Domains_validateDomainRegistration
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DomainPurchaseV2'
      responses:
        '204':
          description: Request was successful
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The customer does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Based on restrictions declared in JSON schema returned by
            `./schema/{tld}`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}:
    get:
      tags:
        - Domains
      summary: Retrieve details for the specified Domain
      operationId: Domains_getDetails
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain name whose details are to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: Optional details to be included in the response
          explode: false
          in: query
          name: includes
          required: false
          schema:
            items:
              enum:
                - actions
                - contacts
                - dnssecRecords
                - registryStatusCodes
              type: string
            type: array
          style: form
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDetailV2'
        '203':
          description: >-
            Request was partially successful, but actions, contacts, and/or
            verifications may not be included.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDetailV2'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The contact does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: '`domain` must be specified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/actions:
    get:
      tags:
        - Actions
      summary: Retrieves a list of the most recent actions for the specified domain
      operationId: Actions_getRecentList
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain whose actions are to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsGetRecentListResponse'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/actions/{type}:
    delete:
      tags:
        - Actions
      summary: Cancel the most recent user action for the specified domain
      operationId: Actions_cancelRecentAction
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain whose action is to be cancelled
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: The type of action to cancel
          in: path
          name: type
          required: true
          schema:
            enum:
              - AUTH_CODE_PURCHASE
              - AUTH_CODE_REGENERATE
              - BACKORDER_PURCHASE
              - BACKORDER_DELETE
              - BACKORDER_UPDATE
              - DNSSEC_CREATE
              - DNSSEC_DELETE
              - DOMAIN_DELETE
              - DOMAIN_UPDATE
              - DOMAIN_UPDATE_CONTACTS
              - DOMAIN_UPDATE_NAME_SERVERS
              - MIGRATE
              - PRIVACY_PURCHASE
              - PRIVACY_DELETE
              - REDEEM
              - REGISTER
              - RENEW
              - RENEW_UNDO
              - TRADE
              - TRADE_CANCEL
              - TRADE_PURCHASE
              - TRADE_PURCHASE_AUTH_TEXT_MESSAGE
              - TRADE_RESEND_AUTH_EMAIL
              - TRANSFER
              - TRANSFER_IN_ACCEPT
              - TRANSFER_IN_CANCEL
              - TRANSFER_IN_RESTART
              - TRANSFER_IN_RETRY
              - TRANSFER_OUT_ACCEPT
              - TRANSFER_OUT_REJECT
              - TRANSFER_OUT_REQUESTED
              - TRANSIT
            type: string
      responses:
        '204':
          description: Request was successful
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The action status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Actions
      summary: Retrieves the most recent action for the specified domain
      operationId: Actions_getRecentAction
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain whose action is to be retrieved
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: The type of action to retrieve
          in: path
          name: type
          required: true
          schema:
            enum:
              - AUTH_CODE_PURCHASE
              - AUTH_CODE_REGENERATE
              - AUTO_RENEWAL
              - BACKORDER_PURCHASE
              - BACKORDER_DELETE
              - BACKORDER_UPDATE
              - DNS_VERIFICATION
              - DNSSEC_CREATE
              - DNSSEC_DELETE
              - DOMAIN_DELETE
              - DOMAIN_UPDATE
              - DOMAIN_UPDATE_CONTACTS
              - DOMAIN_UPDATE_NAME_SERVERS
              - EXPIRY
              - ICANN_VERIFICATION
              - MIGRATE
              - MIGRATE_IN
              - PREMIUM
              - PRIVACY_PURCHASE
              - PRIVACY_DELETE
              - REDEEM
              - REGISTER
              - RENEW
              - RENEW_UNDO
              - TRADE
              - TRADE_CANCEL
              - TRADE_PURCHASE
              - TRADE_PURCHASE_AUTH_TEXT_MESSAGE
              - TRADE_RESEND_AUTH_EMAIL
              - TRANSFER
              - TRANSFER_IN
              - TRANSFER_IN_ACCEPT
              - TRANSFER_IN_CANCEL
              - TRANSFER_IN_RESTART
              - TRANSFER_IN_RETRY
              - TRANSFER_OUT
              - TRANSFER_OUT_ACCEPT
              - TRANSFER_OUT_REJECT
              - TRANSFER_OUT_REQUESTED
              - TRANSIT
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/redeem:
    post:
      tags:
        - Domains
      summary: Purchase a restore for the given domain to bring it out of redemption
      operationId: Domains_redeemDomainRestore
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to request redeem for
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Options for redeeming existing Domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRedeemV2'
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/REDEEM to poll
            status
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Domain invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/renew:
    post:
      tags:
        - Domains
      summary: Renew the specified Domain
      operationId: Domains_renewDomain
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to be renewed
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Options for renewing existing Domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRenewV2'
        required: true
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/RENEW to poll
            status
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Request body doesn't fulfill schema, see details in `fields`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transfer:
    post:
      tags:
        - Domains
      summary: Purchase and start or restart transfer process
      operationId: Domains_purchaseTransferProcess
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to transfer in
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        description: Details for domain transfer purchase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainTransferInV2'
        required: true
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER to poll
            status
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: >-
            Based on restrictions declared in JSON schema returned by
            `./schema/{tld}`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferInAccept:
    post:
      tags:
        - Domains
      summary: Accepts the transfer in
      operationId: Domains_acceptTransferIn
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to accept the transfer in for
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DomainTransferAuthCode'
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_ACCEPT
            to poll status
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Request body doesn't fulfill schema, see details in `fields`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferInCancel:
    post:
      tags:
        - Domains
      summary: Cancels the transfer in
      operationId: Domains_cancelTransferIn
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to cancel the transfer in for
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_CANCEL
            to poll status
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferInRestart:
    post:
      tags:
        - Domains
      summary: Restarts transfer in request from the beginning
      operationId: Domains_restartTransferIn
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to restart the transfer in
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RESTART
            to poll status
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferInRetry:
    post:
      tags:
        - Domains
      summary: Retries the current transfer in request with supplied Authorization code
      operationId: Domains_retryTransferInProcess
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to retry the transfer in
          in: path
          name: domain
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/DomainTransferAuthCode'
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_IN_RETRY
            to poll status
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The domain status does not allow performing the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Request body doesn't fulfill schema, see details in `fields`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferOut:
    post:
      tags:
        - Domains
      summary: Initiate transfer out to another registrar for a .uk domain.
      operationId: Domains_initiateTransferOut
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to initiate the transfer out for
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: Registrar tag to push transfer to
          in: query
          name: registrar
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REQUESTED
            to poll status
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Domain invalid. TLD must be .uk
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferOutAccept:
    post:
      tags:
        - Domains
      summary: Accept transfer out
      operationId: Domains_acceptTransferOut
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to accept the transfer out for
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_ACCEPT
            to poll status
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/customers/{customerId}/domains/{domain}/transferOutReject:
    post:
      tags:
        - Domains
      summary: Reject transfer out
      operationId: Domains_rejectTransferOut
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            The Customer identifier<br/> Note: For API Resellers, performing
            actions on behalf of your customers, you need to specify the
            Subaccount you're operating on behalf of; otherwise use your shopper
            id.
          in: path
          name: customerId
          required: true
          schema:
            type: string
        - description: Domain to reject the transfer out for
          in: path
          name: domain
          required: true
          schema:
            type: string
        - description: Transfer out reject reason
          in: query
          name: reason
          required: false
          schema:
            enum:
              - EVIDENCE_OF_FRAUD
              - URDP_ACTION
              - COURT_ORDER
              - DISPUTE_OVER_IDENTITY
              - NO_PAYMENT_FOR_PREVIOUS_REGISTRATION_PERIOD
              - WRITTEN_OBJECTION
              - TRANSFERRED_WITHIN_SIXTY_DAYS
            type: string
      responses:
        '202':
          description: >-
            Request Accepted. You may use GET
            /v2/customers/{customerId}/domains/{domain}/actions/TRANSFER_OUT_REJECT
            to poll status
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: There is already a similar action processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/domains/maintenances:
    get:
      tags:
        - Domains
      summary: Retrieve a list of upcoming system Maintenances
      operationId: Domains_getUpcomingMaintenancesList
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: >-
            Only include results with the selected `status` value.  Returns all
            results if omitted<br/><ul><li><strong style='margin-left:
            12px;'>ACTIVE</strong> - The upcoming maintenance is
            active.</li><li><strong style='margin-left:
            12px;'>CANCELLED</strong> - The upcoming maintenance has been
            cancelled.</li></ul>
          in: query
          name: status
          required: false
          schema:
            enum:
              - ACTIVE
              - CANCELLED
            type: string
        - description: Only include results with `modifiedAt` after the supplied date
          in: query
          name: modifiedAtAfter
          required: false
          schema:
            format: iso-datetime
            type: string
        - description: Only include results with `startsAt` after the supplied date
          in: query
          name: startsAtAfter
          required: false
          schema:
            format: iso-datetime
            type: string
        - description: Maximum number of results to return
          in: query
          name: limit
          required: false
          schema:
            default: 100
            maximum: 100
            minimum: 1
            type: integer
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Maintenance'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Filter parameters don't match schema and/or restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/domains/maintenances/{maintenanceId}:
    get:
      tags:
        - Domains
      summary: Retrieve the details for an upcoming system Maintenances
      operationId: Domains_getUpcomingMaintenanceDetails
      parameters:
        - description: A client provided identifier for tracking this request.
          in: header
          name: X-Request-Id
          required: false
          schema:
            type: string
        - description: The identifier for the system maintenance
          in: path
          name: maintenanceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceDetail'
        '400':
          description: Request was malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication info not sent or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Authenticated user is not allowed access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The maintenance does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests received within interval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLimit'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  requestBodies:
    DomainPurchase:
      description: >-
        An instance document expected to match the JSON schema returned by
        `./schema/{tld}`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DomainPurchase'
        application/xml:
          schema:
            $ref: '#/components/schemas/DomainPurchase'
        text/xml:
          schema:
            $ref: '#/components/schemas/DomainPurchase'
      required: true
    DomainPurchaseV2:
      description: >-
        An instance document expected to match the JSON schema returned by
        `./schema/{tld}`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DomainPurchaseV2'
      required: true
    DomainTransferAuthCode:
      description: An Authorization code for transferring the Domain
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DomainTransferAuthCode'
      required: true
  schemas:
    Action:
      properties:
        completedAt:
          description: Timestamp indicating when the action was completed
          format: iso-datetime
          type: string
        createdAt:
          description: Timestamp indicating when the action was created
          format: iso-datetime
          type: string
        modifiedAt:
          description: Timestamp indicating when the action was last modified
          format: iso-datetime
          type: string
        origination:
          description: >-
            The origination of the action<br/><ul><li><strong
            style='margin-left: 12px;'>USER</strong> - These are user
            requests.</li><li><strong style='margin-left: 12px;'>SYSTEM</strong>
            - These are system processing actions.</li></ul>
          enum:
            - USER
            - SYSTEM
          type: string
        reason:
          $ref: '#/components/schemas/ActionReason'
        requestId:
          description: >-
            A client provided identifier (via X-Request-Id header) used for
            tracking individual requests
          type: string
        startedAt:
          description: Timestamp indicating when the action was started
          format: iso-datetime
          type: string
        status:
          description: >-
            The current status of the action<br/><ul><li><strong
            style='margin-left: 12px;'>ACCEPTED</strong> - The action has been
            queued, processing has not started.</li><li><strong
            style='margin-left: 12px;'>AWAITING</strong> - The action is waiting
            on a user input.</li><li><strong style='margin-left:
            12px;'>CANCELLED</strong> - The action has been cancelled by the
            user.</li><li><strong style='margin-left: 12px;'>FAILED</strong> -
            An error occurred while the action was processing, no more
            processing will be performed.</li><li><strong style='margin-left:
            12px;'>PENDING</strong> - The action is being
            processed.</li><li><strong style='margin-left:
            12px;'>SUCCESS</strong> - The action has completed, no additional
            processing is required.</li></ul>
          default: ACCEPTED
          enum:
            - ACCEPTED
            - AWAITING
            - CANCELLED
            - FAILED
            - PENDING
            - SUCCESS
          type: string
        type:
          description: >-
            The type of action being performed<br/><ul><li><strong
            style='margin-left: 12px;'>AUTH_CODE_PURCHASE</strong> - Request for
            an auth code for a .de domain via POST
            /v2/customers/{customerId}/domains/{domain}/purchaseAuthCode.</li><li><strong
            style='margin-left: 12px;'>AUTH_CODE_REGENERATE</strong> - Request
            to regenerate the authCode for a domain via POST
            /v2/customers/{customerId}/domains/{domain}/regenerateAuthCode</li><li><strong
            style='margin-left: 12px;'>AUTO_RENEWAL</strong> - A Domain Auto
            Renew is in progress.</li><li><strong style='margin-left:
            12px;'>BACKORDER_PURCHASE</strong> - Request to purchase a domain
            backorder via POST
            /v2/customers/{customerId}/domains/backorders/purchase.</li><li><strong
            style='margin-left: 12px;'>BACKORDER_DELETE</strong> - Request to
            cancel the current domain backorder via DELETE
            /v2/customers/{customerId}/domains/backorders/{domain}.</li><li><strong
            style='margin-left: 12px;'>BACKORDER_UPDATE</strong> - Request
            update the current domain backorder via PATCH
            /v2/customers/{customerId}/domains/backorders/{domain}.</li><li><strong
            style='margin-left: 12px;'>CONTACT_CREATE</strong> - Request to
            create a contact via POST
            /v2/customers/{customerId}/domains/contacts.</li><li><strong
            style='margin-left: 12px;'>CONTACT_DELETE</strong> - Request to
            delete a contact via DELETE
            /v2/customers/{customerId}/domains/contacts/{contactId}</li><li><strong
            style='margin-left: 12px;'>CONTACT_UPDATE</strong> - Request to
            update a contact via PATCH
            /v2/customers/{customerId}/domains/contacts/{contactId}</li><li><strong
            style='margin-left: 12px;'>DNS_VERIFICATION</strong> - Domain
            requires zone file setup.</li><li><strong style='margin-left:
            12px;'>DNSSEC_CREATE</strong> - Request to create DNSSEC record for
            the domain via PATCH
            /v2/customers/{customerId}/domains/{domain}/dnssecRecords.</li><li><strong
            style='margin-left: 12px;'>DNSSEC_DELETE</strong> - Request to
            delete DNSSEC record for the domain via DELETE
            /v2/customers/{customerId}/domains/{domain}/dnssecRecords.</li><li><strong
            style='margin-left: 12px;'>DOMAIN_DELETE</strong> - Request to
            delete the domain via DELETE
            /v2/customers/{customerId}/domains/{domain}</li><li><strong
            style='margin-left: 12px;'>DOMAIN_UPDATE</strong> - Request to
            update the domain via PATCH
            /v2/customers/{customerId}/domains/{domain}</li><li><strong
            style='margin-left: 12px;'>DOMAIN_UPDATE_CONTACTS</strong> -Request
            to update the domain contacts via PATCH
            /v2/customers/{customerId}/domains/{domain}/contacts</li><li><strong
            style='margin-left: 12px;'>DOMAIN_UPDATE_NAME_SERVERS</strong> -
            Request to update the domain name servers via PUT
            /v2/customers/{customerId}/domains/{domain}/nameServers</li><li><strong
            style='margin-left: 12px;'>EXPIRY</strong> - A Domain Expiration is
            in progress.</li><li><strong style='margin-left:
            12px;'>HOST_CREATE</strong> - Request to create a hostname via PUT
            /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}</li><li><strong
            style='margin-left: 12px;'>HOST_DELETE</strong> - Request to delete
            a hostname via DELETE
            /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}</li><li><strong
            style='margin-left: 12px;'>ICANN_VERIFICATION</strong> - Domain
            requires registrant verification for Icann.</li><li><strong
            style='margin-left: 12px;'>PREMIUM</strong> - Premium Domain domain
            sale is in progress.</li><li><strong style='margin-left:
            12px;'>PRIVACY_PURCHASE</strong> - Request to purchase privacy for a
            domain via POST
            /v2/customers/{customerId}/domains/{domain}/privacy/purchase</li><li><strong
            style='margin-left: 12px;'>PRIVACY_DELETE</strong> - Request to
            remove privacy from a domain via DELETE
            /v2/customers/{customerId}/domains/{domain}/privacy</li><li><strong
            style='margin-left: 12px;'>REDEEM</strong> - Request to redeem a
            domain via POST
            /v2/customers/{customerId}/domains/{domain}/redeem</li><li><strong
            style='margin-left: 12px;'>REGISTER</strong> - Request to register a
            domain via POST
            /v2/customers/{customerId}/domains/{domain}/register</li><li><strong
            style='margin-left: 12px;'>RENEW</strong> - Request to renew a
            domain via POST
            /v2/customers/{customerId}/domains/{domain}/renew</li><li><strong
            style='margin-left: 12px;'>RENEW_UNDO</strong> - Request to undo a
            renewal for a uk domain via POST
            /v2/customers/{customerId}/domains/{domain}/undoRenew</li><li><strong
            style='margin-left: 12px;'>TRADE</strong> - A domain trade request
            is in progress</li><li><strong style='margin-left:
            12px;'>TRADE_CANCEL</strong> - Request to cancel a trade for a
            domain via POST
            /v2/customers/{customerId}/domains/{domain}/tradeCancel</li><li><strong
            style='margin-left: 12px;'>TRADE_PURCHASE</strong> - Request to
            purchase a trade for a domain via POST
            /v2/customers/{customerId}/domains/{domain}/tradePurchase</li><li><strong
            style='margin-left: 12px;'>TRADE_PURCHASE_AUTH_TEXT_MESSAGE</strong>
            - Request for a trade purchase text message for a domain via POST
            /v2/customers/{customerId}/domains/{domain}/tradePurchaseAuthorizationTextMessage</li><li><strong
            style='margin-left: 12px;'>TRADE_RESEND_AUTH_EMAIL</strong> -
            Request to resend the trade auth email message for a domain via POST
            /v2/customers/{customerId}/domains/{domain}/tradeResendAuthorizationEmail</li><li><strong
            style='margin-left: 12px;'>TRANSFER</strong> - Request to transfer a
            domain via POST
            /v2/customers/{customerId}/domains/{domain}/transfer</li><li><strong
            style='margin-left: 12px;'>TRANSFER_IN</strong> - A domain transfer
            in request is in progress.</li><li><strong style='margin-left:
            12px;'>TRANSFER_IN_ACCEPT</strong> - Request to accept a domain
            transfer in via POST
            /v2/customers/{customerId}/domains/{domain}/transferInAccept</li><li><strong
            style='margin-left: 12px;'>TRANSFER_IN_CANCEL</strong> - Request to
            cancel a domain transfer via POST
            /v2/customers/{customerId}/domains/{domain}/transferInCancel</li><li><strong
            style='margin-left: 12px;'>TRANSFER_IN_RESTART</strong> - Request to
            restart a domain transfer in via POST
            /v2/customers/{customerId}/domains/{domain}/transferInRestart</li><li><strong
            style='margin-left: 12px;'>TRANSFER_IN_RETRY</strong> - Request to
            retry a domain transfer in via POST
            /v2/customers/{customerId}/domains/{domain}/transferInRetry</li><li><strong
            style='margin-left: 12px;'>TRANSFER_OUT</strong> - A domain transfer
            out request is in progress.</li><li><strong style='margin-left:
            12px;'>TRANSFER_OUT_ACCEPT</strong> - Request to accept a transfer
            out request for a domain via POST
            /v2/customers/{customerId}/domains/{domain}/transferOutAccept</li><li><strong
            style='margin-left: 12px;'>TRANSFER_OUT_REJECT</strong> - Request to
            reject a transfer out request for a domain via POST
            /v2/customers/{customerId}/domains/{domain}/transferOutReject</li><li><strong
            style='margin-left: 12px;'>TRANSFER_OUT_REQUESTED</strong> - Request
            to transfer out for a domain (.de) via POST
            /v2/customers/{customerId}/domains/{domain}/transferOut</li><li><strong
            style='margin-left: 12px;'>TRANSIT</strong> - Request to transit a
            de or at domain at the registry via POST
            /v2/customers/{customerId}/domains/{domain}/transit</li></ul>
          enum:
            - AUTH_CODE_PURCHASE
            - AUTH_CODE_REGENERATE
            - AUTO_RENEWAL
            - BACKORDER_PURCHASE
            - BACKORDER_DELETE
            - BACKORDER_UPDATE
            - CONTACT_CREATE
            - CONTACT_DELETE
            - CONTACT_UPDATE
            - DNS_VERIFICATION
            - DNSSEC_CREATE
            - DNSSEC_DELETE
            - DOMAIN_DELETE
            - DOMAIN_UPDATE
            - DOMAIN_UPDATE_CONTACTS
            - DOMAIN_UPDATE_NAME_SERVERS
            - EXPIRY
            - HOST_CREATE
            - HOST_DELETE
            - ICANN_VERIFICATION
            - MIGRATE
            - MIGRATE_IN
            - PREMIUM
            - PRIVACY_PURCHASE
            - PRIVACY_DELETE
            - REDEEM
            - REGISTER
            - RENEW
            - RENEW_UNDO
            - TRADE
            - TRADE_CANCEL
            - TRADE_PURCHASE
            - TRADE_PURCHASE_AUTH_TEXT_MESSAGE
            - TRADE_RESEND_AUTH_EMAIL
            - TRANSFER
            - TRANSFER_IN
            - TRANSFER_IN_ACCEPT
            - TRANSFER_IN_CANCEL
            - TRANSFER_IN_RESTART
            - TRANSFER_IN_RETRY
            - TRANSFER_OUT
            - TRANSFER_OUT_ACCEPT
            - TRANSFER_OUT_REJECT
            - TRANSFER_OUT_REQUESTED
            - TRANSIT
          type: string
      required:
        - type
        - origination
        - createdAt
        - status
    ActionReason:
      additionalProperties: false
      properties:
        code:
          description: >-
            Short identifier, suitable for indicating the reason for the current
            status and how to handle within client code
          format: constant
          pattern: ^[A-Z_][A-Z0-9_]*$
          type: string
        fields:
          description: >-
            List of the specific fields, and the errors found with their
            contents
          items:
            $ref: '#/components/schemas/ErrorField'
          type: array
        message:
          description: Human-readable, English description of the code
          type: string
      required:
        - code
    Address:
      properties:
        address1:
          format: street-address
          type: string
        address2:
          format: street-address2
          type: string
        city:
          format: city-name
          type: string
        country:
          description: >-
            Two-letter ISO country code to be used as a hint for target
            region<br/><br/>

            NOTE: These are sample values, there are many

            <a href='http://www.iso.org/iso/country_codes.htm'>more</a>
          default: US
          enum:
            - AC
            - AD
            - AE
            - AF
            - AG
            - AI
            - AL
            - AM
            - AO
            - AQ
            - AR
            - AS
            - AT
            - AU
            - AW
            - AX
            - AZ
            - BA
            - BB
            - BD
            - BE
            - BF
            - BG
            - BH
            - BI
            - BJ
            - BM
            - BN
            - BO
            - BQ
            - BR
            - BS
            - BT
            - BV
            - BW
            - BY
            - BZ
            - CA
            - CC
            - CD
            - CF
            - CG
            - CH
            - CI
            - CK
            - CL
            - CM
            - CN
            - CO
            - CR
            - CV
            - CW
            - CX
            - CY
            - CZ
            - DE
            - DJ
            - DK
            - DM
            - DO
            - DZ
            - EC
            - EE
            - EG
            - EH
            - ER
            - ES
            - ET
            - FI
            - FJ
            - FK
            - FM
            - FO
            - FR
            - GA
            - GB
            - GD
            - GE
            - GF
            - GG
            - GH
            - GI
            - GL
            - GM
            - GN
            - GP
            - GQ
            - GR
            - GS
            - GT
            - GU
            - GW
            - GY
            - HK
            - HM
            - HN
            - HR
            - HT
            - HU
            - ID
            - IE
            - IL
            - IM
            - IN
            - IO
            - IQ
            - IS
            - IT
            - JE
            - JM
            - JO
            - JP
            - KE
            - KG
            - KH
            - KI
            - KM
            - KN
            - KR
            - KV
            - KW
            - KY
            - KZ
            - LA
            - LB
            - LC
            - LI
            - LK
            - LR
            - LS
            - LT
            - LU
            - LV
            - LY
            - MA
            - MC
            - MD
            - ME
            - MG
            - MH
            - MK
            - ML
            - MM
            - MN
            - MO
            - MP
            - MQ
            - MR
            - MS
            - MT
            - MU
            - MV
            - MW
            - MX
            - MY
            - MZ
            - NA
            - NC
            - NE
            - NF
            - NG
            - NI
            - NL
            - 'NO'
            - NP
            - NR
            - NU
            - NZ
            - OM
            - PA
            - PE
            - PF
            - PG
            - PH
            - PK
            - PL
            - PM
            - PN
            - PR
            - PS
            - PT
            - PW
            - PY
            - QA
            - RE
            - RO
            - RS
            - RU
            - RW
            - SA
            - SB
            - SC
            - SE
            - SG
            - SH
            - SI
            - SJ
            - SK
            - SL
            - SM
            - SN
            - SO
            - SR
            - ST
            - SV
            - SX
            - SZ
            - TC
            - TD
            - TF
            - TG
            - TH
            - TJ
            - TK
            - TL
            - TM
            - TN
            - TO
            - TP
            - TR
            - TT
            - TV
            - TW
            - TZ
            - UA
            - UG
            - UM
            - US
            - UY
            - UZ
            - VA
            - VC
            - VE
            - VG
            - VI
            - VN
            - VU
            - WF
            - WS
            - YE
            - YT
            - ZA
            - ZM
            - ZW
          format: iso-country-code
          type: string
        postalCode:
          description: Postal or zip code
          format: postal-code
          type: string
        state:
          description: State or province or territory
          format: state-province-territory
          type: string
      required:
        - address1
        - city
        - state
        - postalCode
        - country
    ArrayOfDNSRecord:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    Consent:
      properties:
        agreedAt:
          description: >-
            Timestamp indicating when the end-user consented to these legal
            agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: >-
            Originating client IP address of the end-user's computer when they
            consented to these legal agreements
          type: string
        agreementKeys:
          description: >-
            Unique identifiers of the legal agreements to which the end-user has
            agreed, as returned from the/domains/agreements endpoint
          items:
            type: string
          type: array
      required:
        - agreementKeys
        - agreedBy
        - agreedAt
    ConsentDomainUpdate:
      properties:
        agreedAt:
          description: Timestamp indicating when the end-user consented to these agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: >-
            Originating client IP address of the end-user's computer when they
            consented to the agreements
          type: string
        agreementKeys:
          description: >-
            Unique identifiers of the agreements to which the end-user has
            agreed, as required by the elements being
            updated<br/><ul><li><strong style='margin-left:
            12px;'>EXPOSE_WHOIS</strong> - Required when the exposeWhois field
            is updated to true</li></ul>
          items:
            enum:
              - EXPOSE_WHOIS
            type: string
          type: array
      required:
        - agreementKeys
        - agreedBy
        - agreedAt
    ConsentRedemption:
      additionalProperties: false
      properties:
        agreedAt:
          description: >-
            Timestamp indicating when the end-user consented to these legal
            agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: >-
            Originating client IP address of the end-user's computer when they
            consented to these legal agreements
          type: string
        currency:
          description: Currency in which the `price` and `fee` are listed
          default: USD
          format: iso-currency-code
          pattern: ^[A-Z][A-Z][A-Z]$
          type: string
        fee:
          description: >-
            Fee charged for the domain redemption. Please use GET
            /v2/customers/{customerId}/domains/{domain} to retrieve the
            redemption fee and currency for the domain
          format: currency-micro-unit
          type: integer
        price:
          description: >-
            Price for the domain renewal (if domain renewal required for
            redemption). Please use GET
            /v2/customers/{customerId}/domains/{domain} to retrieve the
            redemption price and currency for the domain
          format: currency-micro-unit
          type: integer
      required:
        - price
        - fee
        - currency
        - agreedBy
        - agreedAt
    ConsentRenew:
      additionalProperties: false
      properties:
        agreedAt:
          description: >-
            Timestamp indicating when the end-user consented to these legal
            agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: >-
            Originating client IP address of the end-user's computer when they
            consented to these legal agreements
          type: string
        currency:
          description: Currency in which the `price` is listed
          default: USD
          format: iso-currency-code
          pattern: ^[A-Z][A-Z][A-Z]$
          type: string
        price:
          description: >-
            Price of the domain excluding taxes or fees. Please use GET
            /v2/customers/{customerId}/domains/{domain} to retrieve the renewal
            price and currency for the domain
          format: currency-micro-unit
          type: integer
        registryPremiumPricing:
          description: >-
            Only required for hosted registrar if domain is premium. If true
            indicates that the `price` and `currency` listed are the registry
            premium price and currency for the domain
          type: boolean
      required:
        - price
        - currency
        - agreedBy
        - agreedAt
    ConsentV2:
      additionalProperties: false
      properties:
        agreedAt:
          description: >-
            Timestamp indicating when the end-user consented to these legal
            agreements
          format: iso-datetime
          type: string
        agreedBy:
          description: >-
            Originating client IP address of the end-user's computer when they
            consented to these legal agreements
          type: string
        agreementKeys:
          description: >-
            Unique identifiers of the legal agreements to which the end-user has
            agreed, as returned from the/domains/agreements endpoint
          items:
            type: string
          type: array
        claimToken:
          description: >-
            The trademark claim token, only needed if the domain has an active
            trademark claim
          type: string
        currency:
          description: Currency in which the `price` is listed
          default: USD
          format: iso-currency-code
          pattern: ^[A-Z][A-Z][A-Z]$
          type: string
        price:
          description: >-
            Price of the domain excluding taxes or fees. Please use GET
            /v1/domains/available to retrieve the price and currency for the
            domain
          format: currency-micro-unit
          type: integer
        registryPremiumPricing:
          description: >-
            Only required for hosted registrar if domain is premium. If true
            indicates that the `price` and `currency` listed are the registry
            premium price and currency for the domain
          type: boolean
      required:
        - agreementKeys
        - price
        - currency
        - agreedBy
        - agreedAt
    Contact:
      properties:
        addressMailing:
          $ref: '#/components/schemas/Address'
        email:
          format: email
          type: string
        fax:
          format: phone
          type: string
        jobTitle:
          type: string
        nameFirst:
          format: person-name
          type: string
        nameLast:
          format: person-name
          type: string
        nameMiddle:
          type: string
        organization:
          format: organization-name
          type: string
        phone:
          format: phone
          type: string
      required:
        - nameFirst
        - nameLast
        - email
        - phone
        - addressMailing
    ContactDomain:
      properties:
        _createdAt:
          description: Timestamp indicating when the contact was created
          format: iso-datetime
          type: string
        _deleted:
          description: >-
            Flag indicating if the contact has been logically deleted in the
            system
          type: boolean
        _modifiedAt:
          description: Timestamp indicating when the contact was last modified
          format: iso-datetime
          type: string
        _revision:
          description: The current revision number of the contact.
          type: integer
        addressMailing:
          $ref: '#/components/schemas/Address'
        contactId:
          description: Unique identifier for this Contact
          type: string
        email:
          format: email
          maxLength: 80
          type: string
        encoding:
          description: >-
            The encoding of the contact data<br/><ul><li><strong
            style='margin-left: 12px;'>ASCII</strong> - Data contains only ASCII
            characters that are not region or language specific</li><li><strong
            style='margin-left: 12px;'>UTF-8</strong> - Data contains characters
            that are specific to a region or language</li></ul>
          default: ASCII
          enum:
            - ASCII
            - UTF-8
          type: string
        exposeWhois:
          description: Whether or not the contact details should be shown in the WHOIS
          type: boolean
        fax:
          format: phone
          maxLength: 17
          type: string
        jobTitle:
          type: string
        metadata:
          description: >-
            The contact eligibility data fields as specified by GET
            /v2/customers/{customerId}/domains/contacts/schema/{tld}
          type: object
        nameFirst:
          format: person-name
          maxLength: 30
          type: string
        nameLast:
          format: person-name
          maxLength: 30
          type: string
        nameMiddle:
          type: string
        organization:
          format: organization-name
          maxLength: 100
          type: string
        phone:
          format: phone
          maxLength: 17
          type: string
        tlds:
          description: The tlds that this contact can be assigned to
          items:
            type: string
          type: array
      required:
        - nameFirst
        - nameLast
        - email
        - phone
        - addressMailing
        - exposeWhois
    ContactDomainCreate:
      additionalProperties: false
      properties:
        addressMailing:
          $ref: '#/components/schemas/Address'
        email:
          format: email
          maxLength: 80
          type: string
        encoding:
          description: >-
            The encoding of the contact data<br/><ul><li><strong
            style='margin-left: 12px;'>ASCII</strong> - Data contains only ASCII
            characters that are not region or language specific</li><li><strong
            style='margin-left: 12px;'>UTF-8</strong> - Data contains characters
            that are specific to a region or language</li></ul>
          default: ASCII
          enum:
            - ASCII
            - UTF-8
          type: string
        fax:
          format: phone
          maxLength: 17
          type: string
        jobTitle:
          type: string
        metadata:
          description: >-
            The contact eligibility data fields as specified by GET
            /v2/customers/{customerId}/domains/contacts/schema/{tld}
          type: object
        nameFirst:
          format: person-name
          maxLength: 30
          type: string
        nameLast:
          format: person-name
          maxLength: 30
          type: string
        nameMiddle:
          type: string
        organization:
          format: organization-name
          maxLength: 100
          type: string
        phone:
          format: phone
          maxLength: 17
          type: string
      required:
        - encoding
        - nameFirst
        - nameLast
        - email
        - phone
        - addressMailing
    DNSRecord:
      properties:
        data:
          type: string
        name:
          format: domain
          type: string
        port:
          description: Service port (SRV only)
          maximum: 65535
          minimum: 1
          type: integer
        priority:
          description: Record priority (MX and SRV only)
          format: integer-positive
          type: integer
        protocol:
          description: Service protocol (SRV only)
          type: string
        service:
          description: Service type (SRV only)
          type: string
        ttl:
          format: integer-positive
          type: integer
        type:
          enum:
            - A
            - AAAA
            - CNAME
            - MX
            - NS
            - SOA
            - SRV
            - TXT
          type: string
        weight:
          description: Record weight (SRV only)
          format: integer-positive
          type: integer
      required:
        - type
        - name
        - data
    DNSRecordCreateType:
      properties:
        data:
          type: string
        name:
          format: domain
          type: string
        port:
          description: Service port (SRV only)
          maximum: 65535
          minimum: 1
          type: integer
        priority:
          description: Record priority (MX and SRV only)
          format: integer-positive
          type: integer
        protocol:
          description: Service protocol (SRV only)
          type: string
        service:
          description: Service type (SRV only)
          type: string
        ttl:
          format: integer-positive
          type: integer
        weight:
          description: Record weight (SRV only)
          format: integer-positive
          type: integer
      required:
        - name
        - data
    DNSRecordCreateTypeName:
      properties:
        data:
          type: string
        port:
          description: Service port (SRV only)
          maximum: 65535
          minimum: 1
          type: integer
        priority:
          description: Record priority (MX and SRV only)
          format: integer-positive
          type: integer
        protocol:
          description: Service protocol (SRV only)
          type: string
        service:
          description: Service type (SRV only)
          type: string
        ttl:
          format: integer-positive
          type: integer
        weight:
          description: Record weight (SRV only)
          format: integer-positive
          type: integer
      required:
        - data
    DomainAvailableBulk:
      properties:
        domains:
          description: Domain available response array
          items:
            $ref: '#/components/schemas/DomainAvailableResponse'
          type: array
      required:
        - domains
    DomainAvailableBulkMixed:
      properties:
        domains:
          description: Domain available response array
          items:
            $ref: '#/components/schemas/DomainAvailableResponse'
          type: array
        errors:
          description: Errors encountered while performing a domain available check
          items:
            $ref: '#/components/schemas/DomainAvailableError'
          type: array
      required:
        - domains
    DomainAvailableError:
      properties:
        code:
          description: >-
            Short identifier for the error, suitable for indicating the specific
            error within client code
          format: constant
          type: string
        domain:
          description: Domain name
          type: string
        message:
          description: Human-readable, English description of the error
          type: string
        path:
          description: >-
            <ul>

            <li style='margin-left: 12px;'>JSONPath referring to a field
            containing an error</li>

            <strong style='margin-left: 12px;'>OR</strong>

            <li style='margin-left: 12px;'>JSONPath referring to a field that
            refers to an object containing an error, with more detail in
            `pathRelated`</li>

            </ul>
          format: json-path
          type: string
        status:
          description: HTTP status code that would return for a single check
          type: integer
      required:
        - code
        - domain
        - path
        - status
    DomainAvailableResponse:
      properties:
        available:
          description: Whether or not the domain name is available
          type: boolean
        currency:
          description: >-
            Currency in which the `price` is listed. Only returned if tld is
            offered
          default: USD
          format: iso-currency-code
          type: string
        definitive:
          description: >-
            Whether or not the `available` answer has been definitively verified
            with the registry
          type: boolean
        domain:
          description: Domain name
          type: string
        period:
          description: >-
            Number of years included in the price. Only returned if tld is
            offered
          format: integer-positive
          type: integer
        price:
          description: >-
            Price of the domain excluding taxes or fees. Only returned if tld is
            offered
          format: currency-micro-unit
          type: integer
      required:
        - domain
        - available
        - definitive
    DomainContacts:
      properties:
        contactAdmin:
          $ref: '#/components/schemas/Contact'
        contactBilling:
          $ref: '#/components/schemas/Contact'
        contactRegistrant:
          $ref: '#/components/schemas/Contact'
        contactTech:
          $ref: '#/components/schemas/Contact'
      required:
        - contactRegistrant
    DomainContactsCreateV2:
      properties:
        admin:
          $ref: '#/components/schemas/ContactDomainCreate'
        adminId:
          description: >
            Unique identifier of the contact that the user wants to use for the
            domain admin contact. This can be specified instead of the `admin`
            property.
          type: string
        billing:
          $ref: '#/components/schemas/ContactDomainCreate'
        billingId:
          description: >
            Unique identifier of the contact that the user wants to use for the
            domain billing contact. This can be specified instead of the
            `billing` property.
          type: string
        registrant:
          $ref: '#/components/schemas/ContactDomainCreate'
        registrantId:
          description: >
            Unique identifier of the contact that the user wants to use for the
            domain registrant contact. This can be specified instead of the
            `registrant` property.
          type: string
        tech:
          $ref: '#/components/schemas/ContactDomainCreate'
        techId:
          description: >
            Unique identifier of the contact that the user wants to use for the
            domain tech contact. This can be specified instead of the `tech`
            property.
          type: string
      type: object
    DomainContactsV2:
      additionalProperties: false
      properties:
        admin:
          $ref: '#/components/schemas/ContactDomain'
        billing:
          $ref: '#/components/schemas/ContactDomain'
        registrant:
          $ref: '#/components/schemas/ContactDomain'
        tech:
          $ref: '#/components/schemas/ContactDomain'
    DomainDetail:
      properties:
        authCode:
          description: Authorization code for transferring the Domain
          type: string
        contactAdmin:
          $ref: '#/components/schemas/Contact'
        contactBilling:
          $ref: '#/components/schemas/Contact'
        contactRegistrant:
          $ref: '#/components/schemas/Contact'
        contactTech:
          $ref: '#/components/schemas/Contact'
        createdAt:
          description: Date and time when this domain was created
          format: date-time
          type: string
        deletedAt:
          description: Date and time when this domain was deleted
          format: date-time
          type: string
        domain:
          description: Name of the domain
          type: string
        domainId:
          description: Unique identifier for this Domain
          format: double
          type: number
        expirationProtected:
          description: Whether or not the domain is protected from expiration
          type: boolean
        expires:
          description: Date and time when this domain will expire
          format: date-time
          type: string
        exposeWhois:
          description: >-
            Whether or not the domain contact details should be shown in the
            WHOIS
          type: boolean
        holdRegistrar:
          description: Whether or not the domain is on-hold by the registrar
          type: boolean
        locked:
          description: Whether or not the domain is locked to prevent transfers
          type: boolean
        nameServers:
          description: Fully-qualified domain names for DNS servers
          items:
            format: host-name
            type: string
          type: array
        privacy:
          description: Whether or not the domain has privacy protection
          type: boolean
        registrarCreatedAt:
          description: Date and time when this domain was created by the registrar
          format: iso-datetime
          type: string
        renewAuto:
          description: Whether or not the domain is configured to automatically renew
          type: boolean
        renewDeadline:
          description: Date the domain must renew on
          format: date-time
          type: string
        status:
          description: >-
            Processing status of the domain<br/><ul>

            <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is
            well</li>

            <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System
            is waiting for the end-user to complete an action</li>

            <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain
            has been cancelled, and may or may not be reclaimable</li>

            <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain
            has been confiscated, usually for abuse, chargeback, or fraud</li>

            <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain
            has been disabled</li>

            <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain
            has been excluded from Firehose registration</li>

            <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain
            has expired</li>

            <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has
            failed a required action, and the system is no longer retrying</li>

            <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has
            been placed on hold, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has
            been locked, and likely requires intervention from Support</li>

            <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has
            been parked, and likely requires intervention from Support</li>

            <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is
            working its way through an automated workflow</li>

            <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain
            is reserved, and likely requires intervention from Support</li>

            <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain
            has been reverted, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain
            has been suspended, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> -
            Domain has been transferred out</li>

            <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is
            in an unknown state</li>

            <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain
            has been unlocked, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain
            has been unparked, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain
            ownership has been transferred to another account</li>

            </ul>
          type: string
        subaccountId:
          description: Reseller subaccount shopperid who can manage the domain
          type: string
        transferAwayEligibleAt:
          description: Date and time when this domain is eligible to transfer
          format: date-time
          type: string
        transferProtected:
          description: Whether or not the domain is protected from transfer
          type: boolean
        verifications:
          $ref: '#/components/schemas/VerificationsDomain'
      required:
        - domainId
        - domain
        - status
        - expirationProtected
        - holdRegistrar
        - locked
        - privacy
        - renewAuto
        - renewDeadline
        - transferProtected
        - createdAt
        - authCode
        - nameServers
        - contactRegistrant
        - contactBilling
        - contactAdmin
        - contactTech
    DomainDetailV2:
      additionalProperties: false
      properties:
        actions:
          description: List of current actions in progress for this domain
          items:
            $ref: '#/components/schemas/Action'
          type: array
        authCode:
          description: Authorization code for transferring the Domain
          type: string
        contacts:
          $ref: '#/components/schemas/DomainContactsV2'
        createdAt:
          description: Date and time when this domain was created
          format: iso-datetime
          type: string
        deletedAt:
          description: Date and time when this domain was deleted
          format: iso-datetime
          type: string
        dnssecRecords:
          description: List of active DNSSEC records for this domain
          items:
            $ref: '#/components/schemas/DomainDnssec'
          type: array
        domain:
          description: Name of the domain
          format: domain
          type: string
        domainId:
          description: Unique identifier for this Domain
          type: string
        expirationProtected:
          description: Whether or not the domain is protected from expiration
          type: boolean
        expiresAt:
          description: Date and time when this domain will expire
          format: iso-datetime
          type: string
        holdRegistrar:
          description: Whether or not the domain is on-hold by the registrar
          type: boolean
        hostnames:
          description: Hostnames owned by the domain
          items:
            format: host-name
            type: string
          type: array
        locked:
          description: Whether or not the domain is locked to prevent transfers
          type: boolean
        modifiedAt:
          description: Date and time when this domain was last modified
          format: iso-datetime
          type: string
        nameServers:
          description: Fully-qualified domain names for DNS servers
          items:
            format: host-name
            type: string
          type: array
        privacy:
          description: Whether or not the domain has privacy protection
          type: boolean
        registrarCreatedAt:
          description: Date and time when this domain was created by the registrar
          format: iso-datetime
          type: string
        registryStatusCodes:
          description: >-
            The current registry status codes of the domain<br/><ul><li><strong
            style='margin-left: 12px;'>ADD_PERIOD</strong> - This grace period
            is provided after the initial registration of a domain
            name.</li><li><strong style='margin-left:
            12px;'>AUTO_RENEW_PERIOD</strong> - This grace period is provided
            after a domain name registration period expires and is extended
            (renewed) automatically by the registry.</li><li><strong
            style='margin-left: 12px;'>CLIENT_DELETE_PROHIBITED</strong> - This
            status code tells your domain's registry to reject requests to
            delete the domain.</li><li><strong style='margin-left:
            12px;'>CLIENT_HOLD</strong> - This status code tells your domain's
            registry to not activate your domain in the DNS and as a
            consequence, it will not resolve.</li><li><strong
            style='margin-left: 12px;'>CLIENT_RENEW_PROHIBITED</strong> - This
            status code tells your domain's registry to reject requests to renew
            your domain.</li><li><strong style='margin-left:
            12px;'>CLIENT_TRANSFER_PROHIBITED</strong> - This status code tells
            your domain's registry to reject requests to transfer the domain
            from your current registrar to another.</li><li><strong
            style='margin-left: 12px;'>CLIENT_UPDATE_PROHIBITED</strong> - This
            status code tells your domain's registry to reject requests to
            update the domain.</li><li><strong style='margin-left:
            12px;'>INACTIVE</strong> - This status code indicates that
            delegation information (name servers) has not been associated with
            your domain.</li><li><strong style='margin-left: 12px;'>OK</strong>
            - This is the standard status for a domain, meaning it has no
            pending operations or prohibitions.</li><li><strong
            style='margin-left: 12px;'>PENDING_CREATE</strong> - This status
            code indicates that a request to create your domain has been
            received and is being processed.</li><li><strong style='margin-left:
            12px;'>PENDING_DELETE</strong> - This status code indicates that the
            domain is either in a redemption period if combined with either
            REDEMPTION_PERIOD or PENDING_RESTORE, if not combined with these,
            then indicates that the redemption period for the domain has ended
            and domain will be be purged and dropped from the registry
            database.</li><li><strong style='margin-left:
            12px;'>PENDING_RENEW</strong> - This status code indicates that a
            request to renew your domain has been received and is being
            processed.</li><li><strong style='margin-left:
            12px;'>PENDING_RESTORE</strong> - This status code indicates that
            your registrar has asked the registry to restore your domain that
            was in REDEMPTION_PERIOD status</li><li><strong style='margin-left:
            12px;'>PENDING_TRANSFER</strong> - This status code indicates that a
            request to transfer your domain to a new registrar has been received
            and is being processed.</li><li><strong style='margin-left:
            12px;'>PENDING_UPDATE</strong> - This status code indicates that a
            request to update your domain has been received and is being
            processed.</li><li><strong style='margin-left:
            12px;'>REDEMPTION_PERIOD</strong> - This status code indicates that
            your registrar has asked the registry to delete your
            domain.</li><li><strong style='margin-left:
            12px;'>RENEW_PERIOD</strong> - This grace period is provided after a
            domain name registration period is explicitly extended (renewed) by
            the registrar.</li><li><strong style='margin-left:
            12px;'>SERVER_DELETE_PROHIBITED</strong> - This status code prevents
            your domain from being deleted. </li><li><strong style='margin-left:
            12px;'>SERVER_HOLD</strong> - This status code is set by your
            domain's Registry Operator. Your domain is not activated in the
            DNS.</li><li><strong style='margin-left:
            12px;'>SERVER_RENEW_PROHIBITED</strong> - This status code indicates
            your domain's Registry Operator will not allow your registrar to
            renew your domain.</li><li><strong style='margin-left:
            12px;'>SERVER_TRANSFER_PROHIBITED</strong> - This status code
            prevents your domain from being transferred from your current
            registrar to another. </li><li><strong style='margin-left:
            12px;'>SERVER_UPDATE_PROHIBITED</strong> - This status code locks
            your domain preventing it from being updated.</li><li><strong
            style='margin-left: 12px;'>TRANSFER_PERIOD</strong> - This grace
            period is provided after the successful transfer of a domain name
            from one registrar to another. </li></ul>
          items:
            enum:
              - ADD_PERIOD
              - AUTO_RENEW_PERIOD
              - CLIENT_DELETE_PROHIBITED
              - CLIENT_HOLD
              - CLIENT_RENEW_PROHIBITED
              - CLIENT_TRANSFER_PROHIBITED
              - CLIENT_UPDATE_PROHIBITED
              - INACTIVE
              - OK
              - PENDING_CREATE
              - PENDING_DELETE
              - PENDING_RENEW
              - PENDING_RESTORE
              - PENDING_TRANSFER
              - PENDING_UPDATE
              - REDEMPTION_PERIOD
              - RENEW_PERIOD
              - SERVER_DELETE_PROHIBITED
              - SERVER_HOLD
              - SERVER_RENEW_PROHIBITED
              - SERVER_TRANSFER_PROHIBITED
              - SERVER_UPDATE_PROHIBITED
              - TRANSFER_PERIOD
            type: string
          type: array
        renewAuto:
          description: Whether or not the domain is configured to automatically renew
          type: boolean
        renewDeadline:
          description: Date the domain must renew on
          format: iso-datetime
          type: string
        renewal:
          $ref: '#/components/schemas/RenewalDetails'
        status:
          description: >-
            The current status of the domain<br/><ul><li><strong
            style='margin-left: 12px;'>ACTIVE</strong> - Domain has been
            registered and is active.</li><li><strong style='margin-left:
            12px;'>CANCELLED</strong> - Domain has been cancelled by the user or
            system, and is not be reclaimable.</li><li><strong
            style='margin-left: 12px;'>DELETED_REDEEMABLE</strong> - Domain is
            deleted but is redeemable.</li><li><strong style='margin-left:
            12px;'>EXPIRED</strong> - Domain has expired.</li><li><strong
            style='margin-left: 12px;'>FAILED</strong> - Domain registration or
            transfer error.</li><li><strong style='margin-left:
            12px;'>LOCKED_REGISTRAR</strong> - Domain is locked at the registrar
            - this is usually the result of a spam, abuse, etc.</li><li><strong
            style='margin-left: 12px;'>PARKED</strong> - Domain has been
            parked.</li><li><strong style='margin-left:
            12px;'>HELD_REGISTRAR</strong> - Domain is held at the registrar and
            cannot be transferred or modified - this is usually the result of a
            dispute.</li><li><strong style='margin-left:
            12px;'>OWNERSHIP_CHANGED</strong> - Domain has been moved to another
            account.</li><li><strong style='margin-left:
            12px;'>PENDING_TRANSFER</strong> - Domain transfer has been
            requested and is pending the transfer process.</li><li><strong
            style='margin-left: 12px;'>PENDING_REGISTRATION</strong> - Domain is
            pending setup at the registry.</li><li><strong style='margin-left:
            12px;'>REPOSSESSED</strong> - Domain has been confiscated - this is
            usually the result of a chargeback, fraud, abuse,
            etc.).</li><li><strong style='margin-left: 12px;'>SUSPENDED</strong>
            - Domain is in violation and has been suspended.</li><li><strong
            style='margin-left: 12px;'>TRANSFERRED</strong> - Domain has been
            transferred to another registrar.</li></ul>
          enum:
            - ACTIVE
            - CANCELLED
            - DELETED_REDEEMABLE
            - EXPIRED
            - FAILED
            - LOCKED_REGISTRAR
            - PARKED
            - HELD_REGISTRAR
            - OWNERSHIP_CHANGED
            - PENDING_TRANSFER
            - PENDING_REGISTRATION
            - REPOSSESSED
            - SUSPENDED
            - TRANSFERRED
          type: string
        subaccountId:
          description: Reseller subaccount shopperid who can manage the domain
          type: string
        transferAwayEligibleAt:
          description: Date and time when this domain is eligible to transfer
          format: iso-datetime
          type: string
        transferProtected:
          description: Whether or not the domain is protected from transfer
          type: boolean
        verifications:
          $ref: '#/components/schemas/VerificationsDomainV2'
      required:
        - domainId
        - domain
        - status
        - expirationProtected
        - holdRegistrar
        - locked
        - privacy
        - renewAuto
        - renewDeadline
        - transferProtected
        - createdAt
        - authCode
        - nameServers
        - contacts
    DomainDnssec:
      properties:
        algorithm:
          description: >-
            This identifies the cryptographic algorithm used to generate the
            signature<br/><ul><li><strong style='margin-left:
            12px;'>RSAMD5</strong> - [01] DRSA/MD5 </li><li><strong
            style='margin-left: 12px;'>DSA</strong> - [03]
            DSA/SHA1</li><li><strong style='margin-left: 12px;'>RSASHA1</strong>
            - [05] RSA/SHA-1</li><li><strong style='margin-left:
            12px;'>DSA_NSEC3_SHA1</strong> - [06] DSA-NSEC3-SHA1</li><li><strong
            style='margin-left: 12px;'>RSASHA1_NSEC3_SHA1</strong> - [07]
            RSASHA1-NSEC3-SHA1</li><li><strong style='margin-left:
            12px;'>RSASHA256</strong> - [08] RSA/SHA-256</li><li><strong
            style='margin-left: 12px;'>RSASHA512</strong> - [10]
            RSA/SHA-512</li><li><strong style='margin-left:
            12px;'>ECC_GOST</strong> - [12] GOST R 34.10-2001</li><li><strong
            style='margin-left: 12px;'>ECDSAP256SHA256</strong> - [13] ECDSA
            Curve P-256 with SHA-256</li><li><strong style='margin-left:
            12px;'>ECDSAP384SHA384</strong> - [14] ECDSA Curve P-384 with
            SHA-384</li><li><strong style='margin-left: 12px;'>ED25519</strong>
            - [15] Ed25519</li><li><strong style='margin-left:
            12px;'>ED448</strong> - [16] Ed448</li></ul>
          enum:
            - RSAMD5
            - DH
            - DSA
            - RSASHA1
            - DSA_NSEC3_SHA1
            - RSASHA1_NSEC3_SHA1
            - RSASHA256
            - RSASHA512
            - ECC_GOST
            - ECDSAP256SHA256
            - ECDSAP384SHA384
            - ED25519
            - ED448
            - PRIVATEDNS
            - PRIVATEOID
          type: string
        digest:
          description: The digest is an alpha-numeric value
          type: string
        digestType:
          description: >-
            This identifies the algorithm used to construct the
            digest<br/><ul><li><strong style='margin-left: 12px;'>SHA1</strong>
            - [01] SHA-1</li><li><strong style='margin-left:
            12px;'>SHA256</strong> - [02] SHA-256</li><li><strong
            style='margin-left: 12px;'>GOST</strong> - [03] GOST R
            34.11-94</li><li><strong style='margin-left: 12px;'>SHA384</strong>
            - [04] SHA-384</li></ul>
          enum:
            - SHA1
            - SHA256
            - GOST
            - SHA384
          type: string
        flags:
          description: >-
            This identifies the key type; either a Zone-Signing Key or a
            Key-Signing Key<br/><ul><li><strong style='margin-left:
            12px;'>ZSK</strong> - [256] Zone-Signing Key</li><li><strong
            style='margin-left: 12px;'>KSK</strong> - [257] Key-Signing
            Key</li></ul>
          enum:
            - ZSK
            - KSK
          type: string
        keyTag:
          description: >-
            This is an integer value less than 65536 used to identify the DNSSEC
            record for the domain name.
          format: integer-positive
          maximum: 65536
          type: integer
        maxSignatureLife:
          description: >-
            This specifies the validity period for the signature. The value is
            expressed in seconds. You can use any integer value larger than zero
          format: integer-positive
          type: integer
        publicKey:
          description: >-
            Registries use this value to encrypt DS records. Decryption requires
            a matching public key
          type: string
      required:
        - algorithm
    DomainForwarding:
      properties:
        fqdn:
          description: >-
            The fqdn (domain or sub domain) to forward (ex somedomain.com or
            sub.somedomain.com)
          type: string
        mask:
          $ref: '#/components/schemas/DomainForwardingMask'
        type:
          description: >-
            The type of fowarding to implement<br/><ul><li><strong
            style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded
            domain or subdomain URL from displaying in the browser's address
            bar.</li><li><strong style='margin-left:
            12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you
            specified in the forwardTo field using a `301 Moved Permanently`
            HTTP response. The HTTP 301 response code tells user-agents
            (including search engines) that the location has permanently
            moved.</li><li><strong style='margin-left:
            12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you
            specified in the forwardTo field using a `302 Found` HTTP response.
            The HTTP 302 response code tells user-agents (including search
            engines) that the location has temporarily moved.</li></ul>
          default: REDIRECT_PERMANENT
          enum:
            - MASKED
            - REDIRECT_PERMANENT
            - REDIRECT_TEMPORARY
          type: string
        url:
          description: >-
            Forwards http(s) traffic to this destination url (ex.
            http://www.somedomain.com/)
          format: url
          type: string
      required:
        - fqdn
        - type
        - url
    DomainForwardingCreate:
      properties:
        mask:
          $ref: '#/components/schemas/DomainForwardingMask'
        type:
          description: >-
            The type of fowarding to implement<br/><ul><li><strong
            style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded
            domain or subdomain URL from displaying in the browser's address
            bar.</li><li><strong style='margin-left:
            12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you
            specified in the forwardTo field using a `301 Moved Permanently`
            HTTP response. The HTTP 301 response code tells user-agents
            (including search engines) that the location has permanently
            moved.</li><li><strong style='margin-left:
            12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you
            specified in the forwardTo field using a `302 Found` HTTP response.
            The HTTP 302 response code tells user-agents (including search
            engines) that the location has temporarily moved.</li></ul>
          default: REDIRECT_PERMANENT
          enum:
            - MASKED
            - REDIRECT_PERMANENT
            - REDIRECT_TEMPORARY
          type: string
        url:
          description: >-
            Forwards http(s) traffic to this destination url (ex.
            http://www.somedomain.com/)
          format: url
          type: string
      required:
        - type
        - url
    DomainForwardingMask:
      properties:
        title:
          description: Displays at the top of the browser window and in search results.
          type: string
        description:
          description: >-
            A short description of your website to display in search engine
            results.
          type: string
        keywords:
          description: >-
            A list of comma-separated keywords that describes the content and
            purpose of your website.
          type: string
    DomainNotification:
      properties:
        addedAt:
          description: The date the notification was added
          default: ''
          format: iso-datetime
          type: string
        metadata:
          description: >-
            The notification data for the given type as specifed by GET
            /v2/customers/{customerId}/domains/notifications/schema
          default: ''
          type: object
        notificationId:
          description: >-
            The notification ID to be used in POST
            /v2/customers/{customerId}/domains/notifications to acknowledge the
            notification
          default: ''
          type: string
        requestId:
          description: >-
            A client provided identifier (via X-Request-Id header) indicating
            the request this notification is for
          type: string
        resource:
          description: The resource the notification pertains to.
          default: ''
          type: string
        resourceType:
          description: The type of resource the notification relates to
          enum:
            - CONTACT
            - DOMAIN
            - HOST
          type: string
        status:
          description: The resulting status of the action.
          enum:
            - AWAITING
            - CANCELLED
            - FAILED
            - PENDING
            - SUCCESS
          type: string
        type:
          description: The type of action the notification relates to
          enum:
            - AUTH_CODE_PURCHASE
            - AUTH_CODE_REGENERATE
            - AUTO_RENEWAL
            - BACKORDER
            - BACKORDER_PURCHASE
            - BACKORDER_DELETE
            - BACKORDER_UPDATE
            - CONTACT_CREATE
            - CONTACT_DELETE
            - CONTACT_UPDATE
            - DNS_VERIFICATION
            - DNSSEC_CREATE
            - DNSSEC_DELETE
            - DOMAIN_DELETE
            - DOMAIN_UPDATE
            - DOMAIN_UPDATE_CONTACTS
            - DOMAIN_UPDATE_NAME_SERVERS
            - EXPIRY
            - HOST_CREATE
            - HOST_DELETE
            - ICANN_VERIFICATION
            - MIGRATE
            - MIGRATE_IN
            - PREMIUM
            - PRIVACY_PURCHASE
            - PRIVACY_DELETE
            - REDEEM
            - REGISTER
            - RENEW
            - RENEW_UNDO
            - TRADE
            - TRADE_CANCEL
            - TRADE_PURCHASE
            - TRADE_PURCHASE_AUTH_TEXT_MESSAGE
            - TRADE_RESEND_AUTH_EMAIL
            - TRANSFER
            - TRANSFER_IN
            - TRANSFER_IN_ACCEPT
            - TRANSFER_IN_CANCEL
            - TRANSFER_IN_RESTART
            - TRANSFER_IN_RETRY
            - TRANSFER_OUT
            - TRANSFER_OUT_ACCEPT
            - TRANSFER_OUT_REJECT
            - TRANSFER_OUT_REQUESTED
            - TRANSIT
          type: string
      required:
        - notificationId
        - type
        - resource
        - resourceType
        - status
        - addedAt
    DomainNotificationType:
      properties:
        type:
          description: The notification type
          enum:
            - AUTH_CODE_PURCHASE
            - AUTH_CODE_REGENERATE
            - AUTO_RENEWAL
            - BACKORDER
            - BACKORDER_PURCHASE
            - BACKORDER_DELETE
            - BACKORDER_UPDATE
            - CONTACT_CREATE
            - CONTACT_DELETE
            - CONTACT_UPDATE
            - DNS_VERIFICATION
            - DNSSEC_CREATE
            - DNSSEC_DELETE
            - DOMAIN_DELETE
            - DOMAIN_UPDATE
            - DOMAIN_UPDATE_CONTACTS
            - DOMAIN_UPDATE_NAME_SERVERS
            - EXPIRY
            - HOST_CREATE
            - HOST_DELETE
            - ICANN_VERIFICATION
            - MIGRATE
            - MIGRATE_IN
            - PREMIUM
            - PRIVACY_PURCHASE
            - PRIVACY_DELETE
            - REDEEM
            - REGISTER
            - RENEW
            - RENEW_UNDO
            - TRADE
            - TRADE_CANCEL
            - TRADE_PURCHASE
            - TRADE_PURCHASE_AUTH_TEXT_MESSAGE
            - TRADE_RESEND_AUTH_EMAIL
            - TRANSFER
            - TRANSFER_IN
            - TRANSFER_IN_ACCEPT
            - TRANSFER_IN_CANCEL
            - TRANSFER_IN_RESTART
            - TRANSFER_IN_RETRY
            - TRANSFER_OUT
            - TRANSFER_OUT_ACCEPT
            - TRANSFER_OUT_REJECT
            - TRANSFER_OUT_REQUESTED
            - TRANSIT
          type: string
      required:
        - type
    DomainPurchase:
      properties:
        consent:
          $ref: '#/components/schemas/Consent'
        contactAdmin:
          $ref: '#/components/schemas/Contact'
        contactBilling:
          $ref: '#/components/schemas/Contact'
        contactRegistrant:
          $ref: '#/components/schemas/Contact'
        contactTech:
          $ref: '#/components/schemas/Contact'
        domain:
          description: >-
            For internationalized domain names with non-ascii characters, the
            domain name is converted to punycode before format and pattern
            validation rules are checked
          format: domain
          type: string
        nameServers:
          items:
            format: host-name
            type: string
          type: array
        period:
          default: 1
          format: integer-positive
          maximum: 10
          minimum: 1
          type: integer
        privacy:
          default: false
          type: boolean
        renewAuto:
          default: true
          type: boolean
      required:
        - domain
        - consent
    DomainPurchaseResponse:
      properties:
        currency:
          description: Currency in which the `total` is listed
          default: USD
          format: iso-currency-code
          type: string
        itemCount:
          description: Number items included in the order
          format: integer-positive
          type: integer
        orderId:
          description: Unique identifier of the order processed to purchase the domain
          format: int64
          type: integer
        total:
          description: Total cost of the domain and any selected add-ons
          format: currency-micro-unit
          type: integer
      required:
        - orderId
        - itemCount
        - total
    DomainPurchaseV2:
      additionalProperties: false
      properties:
        consent:
          $ref: '#/components/schemas/ConsentV2'
        contacts:
          $ref: '#/components/schemas/DomainContactsCreateV2'
        domain:
          description: >-
            For internationalized domain names with non-ascii characters, the
            domain name is converted to punycode before format and pattern
            validation rules are checked
          format: domain
          pattern: ^[^.]{1,63}.[^.]{2,}$
          type: string
        metadata:
          description: >-
            The domain eligibility data fields as specified by GET
            /v2/customers/{customerId}/domains/register/schema/{tld}
          type: object
        nameServers:
          items:
            format: host-name
            type: string
          maxItems: 2
          type: array
        period:
          default: 1
          format: integer-positive
          maximum: 10
          minimum: 1
          pattern: ^[0-9]+$
          type: integer
        privacy:
          default: false
          type: boolean
        renewAuto:
          default: true
          type: boolean
      required:
        - domain
        - consent
    DomainRedeemV2:
      additionalProperties: false
      properties:
        consent:
          $ref: '#/components/schemas/ConsentRedemption'
      required:
        - consent
    DomainRenew:
      properties:
        period:
          description: >-
            Number of years to extend the Domain. Must not exceed maximum for
            TLD. When omitted, defaults to `period` specified during original
            purchase
          format: integer-positive
          maximum: 10
          minimum: 1
          type: integer
    DomainRenewV2:
      additionalProperties: false
      properties:
        consent:
          $ref: '#/components/schemas/ConsentRenew'
        expires:
          description: Current date when this domain will expire
          format: iso-datetime
          type: string
        period:
          description: >-
            Number of years to extend the Domain. Must not exceed maximum for
            TLD. When omitted, defaults to `period` specified during original
            purchase
          format: integer-positive
          maximum: 10
          minimum: 1
          pattern: ^[0-9]+$
          type: integer
      required:
        - consent
        - expires
    DomainSuggestion:
      properties:
        domain:
          description: Suggested domain name
          type: string
      required:
        - domain
    DomainSummary:
      properties:
        authCode:
          description: Authorization code for transferring the Domain
          type: string
        contactAdmin:
          $ref: '#/components/schemas/Contact'
        contactBilling:
          $ref: '#/components/schemas/Contact'
        contactRegistrant:
          $ref: '#/components/schemas/Contact'
        contactTech:
          $ref: '#/components/schemas/Contact'
        createdAt:
          description: Date and time when this domain was created
          format: date-time
          type: string
        deletedAt:
          description: Date and time when this domain was deleted
          format: date-time
          type: string
        domain:
          description: Name of the domain
          type: string
        domainId:
          description: Unique identifier for this Domain
          format: double
          type: number
        expirationProtected:
          description: Whether or not the domain is protected from expiration
          type: boolean
        expires:
          description: Date and time when this domain will expire
          format: date-time
          type: string
        exposeWhois:
          description: >-
            Whether or not the domain contact details should be shown in the
            WHOIS
          type: boolean
        holdRegistrar:
          description: Whether or not the domain is on-hold by the registrar
          type: boolean
        locked:
          description: Whether or not the domain is locked to prevent transfers
          type: boolean
        nameServers:
          description: Fully-qualified domain names for DNS servers
          items:
            format: host-name
            type: string
          type: array
        privacy:
          description: Whether or not the domain has privacy protection
          type: boolean
        registrarCreatedAt:
          description: Date and time when this domain was created by the registrar
          format: iso-datetime
          type: string
        renewAuto:
          description: Whether or not the domain is configured to automatically renew
          type: boolean
        renewDeadline:
          description: Date the domain must renew on
          format: date-time
          type: string
        renewable:
          description: Whether or not the domain is eligble for renewal based on status
          type: boolean
        status:
          description: >-
            Processing status of the domain<br/><ul>

            <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is
            well</li>

            <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System
            is waiting for the end-user to complete an action</li>

            <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain
            has been cancelled, and may or may not be reclaimable</li>

            <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain
            has been confiscated, usually for abuse, chargeback, or fraud</li>

            <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain
            has been disabled</li>

            <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain
            has been excluded from Firehose registration</li>

            <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain
            has expired</li>

            <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has
            failed a required action, and the system is no longer retrying</li>

            <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has
            been placed on hold, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has
            been locked, and likely requires intervention from Support</li>

            <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has
            been parked, and likely requires intervention from Support</li>

            <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is
            working its way through an automated workflow</li>

            <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain
            is reserved, and likely requires intervention from Support</li>

            <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain
            has been reverted, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain
            has been suspended, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> -
            Domain has been transferred out</li>

            <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is
            in an unknown state</li>

            <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain
            has been unlocked, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain
            has been unparked, and likely requires intervention from
            Support</li>

            <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain
            ownership has been transferred to another account</li>

            </ul>
          type: string
        transferAwayEligibleAt:
          description: Date and time when this domain is eligible to transfer
          format: date-time
          type: string
        transferProtected:
          description: Whether or not the domain is protected from transfer
          type: boolean
      required:
        - domainId
        - domain
        - status
        - expirationProtected
        - holdRegistrar
        - locked
        - privacy
        - renewAuto
        - renewDeadline
        - transferProtected
        - createdAt
        - contactRegistrant
    DomainTransferAuthCode:
      properties:
        authCode:
          description: Authorization code for transferring the Domain
          type: string
      required:
        - authCode
      type: object
    DomainTransferIn:
      properties:
        authCode:
          description: Authorization code from registrar for transferring a domain
          type: string
        consent:
          $ref: '#/components/schemas/Consent'
        contactAdmin:
          $ref: '#/components/schemas/Contact'
        contactBilling:
          $ref: '#/components/schemas/Contact'
        contactRegistrant:
          $ref: '#/components/schemas/Contact'
        contactTech:
          $ref: '#/components/schemas/Contact'
        period:
          description: >-
            Can be more than 1 but no more than 10 years total including current
            registration length
          default: 1
          format: integer-positive
          maximum: 10
          minimum: 1
          type: integer
        privacy:
          description: Whether or not privacy has been requested
          default: false
          type: boolean
        renewAuto:
          description: >-
            Whether or not the domain should be configured to automatically
            renew
          default: true
          type: boolean
      required:
        - authCode
        - consent
    DomainTransferInV2:
      additionalProperties: false
      properties:
        authCode:
          description: Authorization code from registrar for transferring a domain
          type: string
        consent:
          $ref: '#/components/schemas/ConsentV2'
        contacts:
          $ref: '#/components/schemas/DomainContactsCreateV2'
        identityDocumentId:
          description: >-
            Unique identifier of the identify document that the user wants to
            associate with the domain being transferred in. This is required
            only if the gaining registry has a requirement for an approved
            identity document
          type: string
        metadata:
          description: >-
            The domain eligibility data fields as specified by GET
            /v2/customers/{customerId}/domains/register/schema/{tld}
          type: object
        period:
          description: >-
            Can be more than 1 but no more than 10 years total including current
            registration length
          default: 1
          format: integer-positive
          maximum: 10
          minimum: 1
          pattern: ^[0-9]+$
          type: integer
        privacy:
          description: Whether or not privacy has been requested
          default: false
          type: boolean
        renewAuto:
          description: >-
            Whether or not the domain should be configured to automatically
            renew
          default: true
          type: boolean
      required:
        - authCode
        - consent
    DomainUpdate:
      properties:
        consent:
          $ref: '#/components/schemas/ConsentDomainUpdate'
        exposeWhois:
          description: >-
            Whether or not the domain contact details should be shown in the
            WHOIS
          type: boolean
        locked:
          description: Whether or not the domain should be locked to prevent transfers
          type: boolean
        nameServers:
          description: >-
            Fully-qualified domain names for Name Servers to associate with the
            domain
          items:
            format: host-name
          type: array
        renewAuto:
          description: >-
            Whether or not the domain should be configured to automatically
            renew
          type: boolean
        subaccountId:
          description: Reseller subaccount shopperid who can manage the domain
          type: string
    DomainsContactsBulk:
      properties:
        contactAdmin:
          $ref: '#/components/schemas/Contact'
        contactBilling:
          $ref: '#/components/schemas/Contact'
        contactPresence:
          $ref: '#/components/schemas/Contact'
        contactRegistrant:
          $ref: '#/components/schemas/Contact'
        contactTech:
          $ref: '#/components/schemas/Contact'
        domains:
          description: >-
            An array of domain names to be validated against. Alternatively, you
            can specify the extracted tlds. However, full domain names are
            required if the tld is `uk`
          items:
            format: domain
            type: string
          type: array
        entityType:
          description: Canadian Presence Requirement (CA)
          enum:
            - ABORIGINAL
            - ASSOCIATION
            - CITIZEN
            - CORPORATION
            - EDUCATIONAL
            - GOVERNMENT
            - HOSPITAL
            - INDIAN_BAND
            - LEGAL_REPRESENTATIVE
            - LIBRARY_ARCHIVE_MUSEUM
            - MARK_REGISTERED
            - MARK_TRADE
            - PARTNERSHIP
            - POLITICAL_PARTY
            - RESIDENT_PERMANENT
            - TRUST
            - UNION
          type: string
      required:
        - domains
    Error:
      properties:
        code:
          description: >-
            Short identifier for the error, suitable for indicating the specific
            error within client code
          format: constant
          type: string
        fields:
          description: >-
            List of the specific fields, and the errors found with their
            contents
          items:
            $ref: '#/components/schemas/ErrorField'
          type: array
        message:
          description: Human-readable, English description of the error
          type: string
      required:
        - code
    ErrorDomainContactsValidate:
      properties:
        code:
          description: >-
            Short identifier for the error, suitable for indicating the specific
            error within client code
          format: constant
          type: string
        fields:
          description: >-
            List of the specific fields, and the errors found with their
            contents
          items:
            $ref: '#/components/schemas/ErrorFieldDomainContactsValidate'
          type: array
        message:
          description: Human-readable, English description of the error
          type: string
        stack:
          description: >-
            Stack trace indicating where the error occurred.<br/>NOTE: This
            attribute <strong>MAY</strong> be included for Development and Test
            environments. However, it <strong>MUST NOT</strong> be exposed from
            OTE nor Production systems
          items:
            type: string
          type: array
      required:
        - code
    ErrorField:
      properties:
        code:
          description: >-
            Short identifier for the error, suitable for indicating the specific
            error within client code
          format: constant
          type: string
        message:
          description: >-
            Human-readable, English description of the problem with the contents
            of the field
          type: string
        path:
          description: >-
            <ul>

            <li style='margin-left: 12px;'>JSONPath referring to a field
            containing an error</li>

            <strong style='margin-left: 12px;'>OR</strong>

            <li style='margin-left: 12px;'>JSONPath referring to a field that
            refers to an object containing an error, with more detail in
            `pathRelated`</li>

            </ul>
          format: json-path
          type: string
        pathRelated:
          description: >-
            JSONPath referring to a field containing an error, which is
            referenced by `path`
          format: json-path
          type: string
      required:
        - path
        - code
    ErrorFieldDomainContactsValidate:
      properties:
        code:
          description: >-
            Short identifier for the error, suitable for indicating the specific
            error within client code
          format: constant
          type: string
        domains:
          description: >-
            An array of domain names the error is for. If tlds are specified in
            the request, `domains` will contain tlds. For example, if `domains`
            in request is ["test1.com", "test2.uk", "net"], and the field is
            invalid for com and net, then one of the `fields` in response will
            have ["test1.com", "net"] as `domains`
          items:
            type: string
          type: array
        message:
          description: >-
            Human-readable, English description of the problem with the contents
            of the field
          type: string
        path:
          description: >-
            1) JSONPath referring to the field within the data containing an
            error<br/>or<br/>2) JSONPath referring to an object containing an
            error
          format: json-path
          type: string
        pathRelated:
          description: >-
            JSONPath referring to the field on the object referenced by `path`
            containing an error
          format: json-path
          type: string
      required:
        - code
        - domains
        - path
    ErrorLimit:
      properties:
        code:
          description: >-
            Short identifier for the error, suitable for indicating the specific
            error within client code
          format: constant
          type: string
        fields:
          description: >-
            List of the specific fields, and the errors found with their
            contents
          items:
            $ref: '#/components/schemas/ErrorField'
          type: array
        message:
          description: Human-readable, English description of the error
          type: string
        retryAfterSec:
          description: Number of seconds to wait before attempting a similar request
          format: integer-positive
          type: integer
      required:
        - retryAfterSec
        - code
    JsonDataType:
      properties:
        format:
          type: string
        pattern:
          type: string
        type:
          type: string
      required:
        - type
        - $ref
    JsonProperty:
      properties:
        defaultValue:
          type: string
        format:
          type: string
        items:
          items:
            $ref: '#/components/schemas/JsonDataType'
          type: object
        maxItems:
          type: integer
        maximum:
          type: integer
        minItems:
          type: integer
        minimum:
          type: integer
        pattern:
          type: string
        required:
          type: boolean
        type:
          type: string
      required:
        - type
        - $ref
        - required
    JsonSchema:
      properties:
        id:
          type: string
        models:
          items:
            $ref: '#/components/schemas/JsonSchema'
          type: object
        properties:
          items:
            $ref: '#/components/schemas/JsonProperty'
          type: object
        required:
          items:
            type: string
          type: array
      required:
        - id
        - properties
        - required
        - models
    LegalAgreement:
      properties:
        title:
          description: Title of the legal agreement
          type: string
        agreementKey:
          description: Unique identifier for the legal agreement
          type: string
        content:
          description: Contents of the legal agreement, suitable for embedding
          type: string
        url:
          description: URL to a page containing the legal agreement
          format: url
          type: string
      required:
        - agreementKey
        - title
        - content
    Maintenance:
      additionalProperties: false
      properties:
        summary:
          description: A brief description of what is being performed
          type: string
        createdAt:
          description: Date and time (UTC) when this maintenance was created
          format: iso-datetime
          type: string
        endsAt:
          description: Date and time (UTC) when this maintenance will complete
          format: iso-datetime
          type: string
        environment:
          description: >-
            The environment on which the maintenance will be
            performed<br/><ul><li><strong style='margin-left:
            12px;'>OTE</strong> - The Operational Testing
            Environment.</li><li><strong style='margin-left:
            12px;'>PRODUCTION</strong> - The Live Production
            Environment.</li></ul>
          enum:
            - OTE
            - PRODUCTION
          type: string
        maintenanceId:
          description: The identifier for the system maintenance
          type: string
        modifiedAt:
          description: Date and time (UTC) when this maintenance was last modified
          format: iso-datetime
          type: string
        reason:
          description: >-
            The reason for the maintenance being performed<br/><ul><li><strong
            style='margin-left: 12px;'>EMERGENCY</strong> - Unexpected Emergency
            maintenance.</li><li><strong style='margin-left:
            12px;'>PLANNED</strong> - Planned system maintenance.</li></ul>
          enum:
            - EMERGENCY
            - PLANNED
          type: string
        startsAt:
          description: Date and time (UTC) when this maintenance will start
          format: iso-datetime
          type: string
        status:
          description: >-
            The status of maintenance<br/><ul><li><strong style='margin-left:
            12px;'>ACTIVE</strong> - The upcoming maintenance is
            active.</li><li><strong style='margin-left:
            12px;'>CANCELLED</strong> - The upcoming maintenance has been
            cancelled.</li></ul>
          enum:
            - ACTIVE
            - CANCELLED
          type: string
        tlds:
          description: >-
            List of tlds that are in maintenance.  Generally only applies when
            `type` is REGISTRY
          items:
            type: string
          type: array
        type:
          description: >-
            The type of maintenance being performed<br/><ul><li><strong
            style='margin-left: 12px;'>API</strong> - Programmatic Api
            components.</li><li><strong style='margin-left:
            12px;'>REGISTRY</strong> - The underlying Registry providing the
            tld(s).</li><li><strong style='margin-left: 12px;'>UI</strong> -
            User Interface components.</li></ul>
          enum:
            - API
            - REGISTRY
            - UI
          type: string
      required:
        - createdAt
        - endsAt
        - environment
        - maintenanceId
        - modifiedAt
        - reason
        - startsAt
        - status
        - summary
        - type
    MaintenanceDetail:
      additionalProperties: false
      properties:
        summary:
          description: A brief description of what is being performed
          type: string
        createdAt:
          description: Date and time (UTC) when this maintenance was created
          format: iso-datetime
          type: string
        endsAt:
          description: Date and time (UTC) when this maintenance will complete
          format: iso-datetime
          type: string
        environment:
          description: >-
            The environment on which the maintenance will be
            performed<br/><ul><li><strong style='margin-left:
            12px;'>OTE</strong> - The Operational Testing
            Environment.</li><li><strong style='margin-left:
            12px;'>PRODUCTION</strong> - The Live Production
            Environment.</li></ul>
          enum:
            - OTE
            - PRODUCTION
          type: string
        maintenanceId:
          description: The identifier for the system maintenance
          type: string
        modifiedAt:
          description: Date and time (UTC) when this maintenance was last modified
          format: iso-datetime
          type: string
        reason:
          description: >-
            The reason for the maintenance being performed<br/><ul><li><strong
            style='margin-left: 12px;'>EMERGENCY</strong> - Unexpected Emergency
            maintenance.</li><li><strong style='margin-left:
            12px;'>PLANNED</strong> - Planned system maintenance.</li></ul>
          enum:
            - EMERGENCY
            - PLANNED
          type: string
        startsAt:
          description: Date and time (UTC) when this maintenance will start
          format: iso-datetime
          type: string
        status:
          description: >-
            The status of maintenance<br/><ul><li><strong style='margin-left:
            12px;'>ACTIVE</strong> - The upcoming maintenance is
            active.</li><li><strong style='margin-left:
            12px;'>CANCELLED</strong> - The upcoming maintenance has been
            cancelled.</li></ul>
          enum:
            - ACTIVE
            - CANCELLED
          type: string
        systems:
          description: List of systems that are impacted by the maintenance.
          items:
            $ref: '#/components/schemas/MaintenanceSystem'
          type: array
        tlds:
          description: >-
            List of tlds that are in maintenance.  Generally only applies when
            `type` is REGISTRY
          items:
            type: string
          type: array
        type:
          description: >-
            The type of maintenance being performed<br/><ul><li><strong
            style='margin-left: 12px;'>API</strong> - Programmatic Api
            components.</li><li><strong style='margin-left:
            12px;'>REGISTRY</strong> - The underlying Registry providing the
            tld(s).</li><li><strong style='margin-left: 12px;'>UI</strong> -
            User Interface components.</li></ul>
          enum:
            - API
            - REGISTRY
            - UI
          type: string
      required:
        - createdAt
        - endsAt
        - environment
        - maintenanceId
        - modifiedAt
        - reason
        - startsAt
        - status
        - summary
        - type
    MaintenanceSystem:
      additionalProperties: false
      properties:
        impact:
          description: >-
            The impact of the maintenance to the system<br/><ul><li><strong
            style='margin-left: 12px;'>DELAYED</strong> - This response
            generally applies to systems where the request is queued up and
            processed once the system is back online.</li><li><strong
            style='margin-left: 12px;'>DOWN</strong> - The system will be
            entirely offline; errors are expected.</li><li><strong
            style='margin-left: 12px;'>NON_AUTHORITATIVE</strong> - This
            response generally applies to DOMAIN_CHECKS and DOMAIN_MANAGEMENT
            `system` values where a cached answer will be
            supplied.</li><li><strong style='margin-left:
            12px;'>PARTIAL</strong> - The system will experience partial feature
            outages; some errors are expected.</li></ul>
          items:
            enum:
              - DELAYED
              - DOWN
              - NON_AUTHORITATIVE
              - PARTIAL
            type: string
          type: array
        name:
          description: >-
            The name of the system affected by the
            maintenance<br/><ul><li><strong style='margin-left:
            12px;'>DOMAIN_CHECKS</strong> - Refers to domain availability
            checks.</li><li><strong style='margin-left:
            12px;'>DOMAIN_MANAGEMENT</strong> - Refers to domain management
            options including various update options on the domain, contacts,
            records, etc.</li><li><strong style='margin-left:
            12px;'>DOMAIN_REGISTRATION</strong> - Refers to domain
            registrations, renewals, transfers.</li><li><strong
            style='margin-left: 12px;'>DOMAIN_REGISTRATION_DATA</strong> -
            Refers to RDAP and WHOIS Service queries for
            domains.</li><li><strong style='margin-left:
            12px;'>DOMAIN_RESOLUTION</strong> - Refers to DNS resolution for
            domains.</li><li><strong style='margin-left:
            12px;'>RESELLER_ADMIN_PORTAL</strong> - Refers to Admin portals to
            manage the reseller account and settings.</li><li><strong
            style='margin-left: 12px;'>RESELLER_STOREFRONT</strong> - Refers to
            the Reseller Storefront features (Standard and Custom).</li></ul>
          enum:
            - DOMAIN_CHECKS
            - DOMAIN_MANAGEMENT
            - DOMAIN_REGISTRATION
            - DOMAIN_REGISTRATION_DATA
            - DOMAIN_RESOLUTION
            - RESELLER_ADMIN_PORTAL
            - RESELLER_STOREFRONT
          type: string
      required:
        - name
        - impact
    PrivacyPurchase:
      properties:
        consent:
          $ref: '#/components/schemas/Consent'
      required:
        - consent
    RealNameValidation:
      properties:
        status:
          enum:
            - APPROVED
            - PENDING
            - PENDING_ASSOCIATION_WITH_DOMAIN
            - PENDING_SUBMISSION_TO_VERIFICATION_SERVICE
            - PENDING_VERIFICATION_SERVICE_REPLY
            - PENDING_SUBMISSION_TO_REGISTRY
            - PENDING_REGISTRY_REPLY
            - PENDING_DOMAIN_UPDATE
            - REJECTED
          type: string
    RenewalDetails:
      properties:
        currency:
          description: Currency in which the `price` is listed
          default: USD
          format: iso-currency-code
          pattern: ^[A-Z][A-Z][A-Z]$
          type: string
        price:
          description: Price for the domain renewal excluding taxes or fees
          format: currency-micro-unit
          type: integer
        renewable:
          description: Whether or not the domain is eligble for renewal based on status
          type: boolean
      required:
        - price
        - currency
    TldSummary:
      properties:
        name:
          description: Name of the top-level domain
          format: tld
          type: string
        type:
          description: Type of the top-level domain
          default: GENERIC
          enum:
            - COUNTRY_CODE
            - GENERIC
          type: string
      required:
        - name
        - type
    VerificationDomainName:
      properties:
        status:
          description: Status of the domain name verification
          enum:
            - APPROVED
            - PENDING
            - REJECTED
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
      required:
        - status
    VerificationRealName:
      properties:
        status:
          description: >-
            Status of the real name verification<br/><ul> <li><strong
            style='margin-left: 12px;'>APPROVED</strong> - All is well</li>
            <li><strong style='margin-left: 12px;'>PENDING</strong> - Real name
            verification is working its way through the workflow</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government
            verification shows there is a newer version of your document. 
            Upload the latest version of the document and retry real name
            verification</li> <li><strong style='margin-left:
            12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license
            is expired</li> <li><strong style='margin-left:
            12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization
            code certificate number has expired</li> <li><strong
            style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong>
            - There isn’t a clear name on your uploaded document, please upload
            a different document to retry real name verification</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant
            identification is not clear.  Upload a better image to retry</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant
            identification is incomplete</li> <li><strong style='margin-left:
            12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> -
            Registration letter is incomplete</li> <li><strong
            style='margin-left:
            12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided
            identity card is inconsistent with the identity card on record</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided
            organization information is inconsistent with the results obtained
            using the submitted organization code</li> <li><strong
            style='margin-left:
            12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the
            registrant identification does not match the name in the system</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong>
            - Your document contains an invalid business license or organization
            code certificate number</li> <li><strong style='margin-left:
            12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid. 
            Please upload another document to retry real name verification</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not
            match the business id in the document</li> <li><strong
            style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong>
            - Business name does not match the business name in the
            document</li> <li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not
            match the id in the document</li> <li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does
            not match the name in the document</li> <li><strong
            style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong>
            - Document type does not match the document</li> <li><strong
            style='margin-left:
            12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information
            provided for the registrant does not match the document</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant
            region is overseas, but a local identity document was provided</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name
            has been changed, so the request must be resubmitted</li>
            <li><strong style='margin-left:
            12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification
            could not be opened.  Please upload the document again to retry real
            name verification</li> <li><strong style='margin-left:
            12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate
            verification.  Please upload the document again to retry real name
            verification</li> <li><strong style='margin-left:
            12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due
            to an unknown error. For more information, contact customer
            support</li> <li><strong style='margin-left:
            12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve
            status for the real name verification process.  Retry, if this
            status persists, contact customer support</li> </ul>
          enum:
            - APPROVED
            - PENDING
            - REJECTED_DOCUMENT_OUTDATED
            - REJECTED_EXPIRED_BUSINESS_LICENSE
            - REJECTED_EXPIRED_ORGANIZATION_CODE
            - REJECTED_ILLEGIBLE_DOCUMENT_NAME
            - REJECTED_ILLEGIBLE_IDENTIFICATION
            - REJECTED_INCOMPLETE_IDENTIFICATION
            - REJECTED_INCOMPLETE_REGISTRATION_LETTER
            - REJECTED_INCONSISTENT_IDENTITY_CARD
            - REJECTED_INCONSISTENT_ORGANIZATION_CODE
            - REJECTED_INCONSISTENT_REGISTRANT_NAME
            - REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE
            - REJECTED_INVALID_DOCUMENT
            - REJECTED_MISMATCH_BUSINESS_ID
            - REJECTED_MISMATCH_BUSINESS_NAME
            - REJECTED_MISMATCH_DOCUMENT_ID
            - REJECTED_MISMATCH_DOCUMENT_NAME
            - REJECTED_MISMATCH_DOCUMENT_TYPE
            - REJECTED_MISMATCH_REGISTRANT_INFO
            - REJECTED_MISMATCH_REGISTRANT_LOCALITY
            - REJECTED_MISMATCH_REGISTRANT_NAME
            - REJECTED_UNABLE_TO_OPEN
            - REJECTED_UNABLE_TO_VERIFY
            - REJECTED_UNKNOWN_ERROR
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
      required:
        - status
    VerificationsDomain:
      properties:
        domainName:
          $ref: '#/components/schemas/VerificationDomainName'
        realName:
          $ref: '#/components/schemas/VerificationRealName'
    VerificationsDomainV2:
      additionalProperties: false
      properties:
        domainName:
          description: >-
            Status of the verification of the domain name against a prohibited
            list maintained by the government
          enum:
            - APPROVED
            - PENDING
            - REJECTED
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
        icann:
          description: >-
            Status of the Icann verification of domain registrant contact by
            completing email and/or phone verification<br/><ul><li><strong
            style='margin-left: 12px;'>COMPLETED</strong> - Icann verification
            has been completed.</li><li><strong style='margin-left:
            12px;'>PENDING</strong> - Icann verification has not been
            completed.</li><li><strong style='margin-left:
            12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Icann verification not
            supported for specified TLD.</li></ul>
          enum:
            - COMPLETED
            - PENDING
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
        realName:
          description: >-
            Status of the real name verification of an identity by comparing
            registration data against government issued
            documents<br/><ul><li><strong style='margin-left:
            12px;'>APPROVED</strong> - All is well</li><li><strong
            style='margin-left: 12px;'>PENDING</strong> - Real name verification
            is working its way through the workflow</li><li><strong
            style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> -
            Local government verification shows there is a newer version of your
            document.  Upload the latest version of the document and retry real
            name verification</li><li><strong style='margin-left:
            12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license
            is expired</li><li><strong style='margin-left:
            12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization
            code certificate number has expired</li><li><strong
            style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong>
            - There isn’t a clear name on your uploaded document, please upload
            a different document to retry real name verification</li><li><strong
            style='margin-left:
            12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant
            identification is not clear.  Upload a better image to
            retry</li><li><strong style='margin-left:
            12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant
            identification is incomplete</li><li><strong style='margin-left:
            12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> -
            Registration letter is incomplete</li><li><strong
            style='margin-left:
            12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided
            identity card is inconsistent with the identity card on
            record</li><li><strong style='margin-left:
            12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided
            organization information is inconsistent with the results obtained
            using the submitted organization code</li><li><strong
            style='margin-left:
            12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the
            registrant identification does not match the name in the
            system</li><li><strong style='margin-left:
            12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong>
            - Your document contains an invalid business license or organization
            code certificate number</li><li><strong style='margin-left:
            12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid. 
            Please upload another document to retry real name
            verification</li><li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not
            match the business id in the document</li><li><strong
            style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong>
            - Business name does not match the business name in the
            document</li><li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not
            match the id in the document</li><li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does
            not match the name in the document</li><li><strong
            style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong>
            - Document type does not match the document</li><li><strong
            style='margin-left:
            12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information
            provided for the registrant does not match the
            document</li><li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant
            region is overseas, but a local identity document was
            provided</li><li><strong style='margin-left:
            12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name
            has been changed, so the request must be resubmitted</li><li><strong
            style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> -
            Registrant identification could not be opened.  Please upload the
            document again to retry real name verification</li><li><strong
            style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> -
            Unable to initiate verification.  Please upload the document again
            to retry real name verification</li><li><strong style='margin-left:
            12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due
            to an unknown error. For more information, contact customer
            support</li><li><strong style='margin-left:
            12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve
            status for the real name verification process.  Retry, if this
            status persists, contact customer support</li></ul>
          enum:
            - APPROVED
            - PENDING
            - REJECTED_DOCUMENT_OUTDATED
            - REJECTED_EXPIRED_BUSINESS_LICENSE
            - REJECTED_EXPIRED_ORGANIZATION_CODE
            - REJECTED_ILLEGIBLE_DOCUMENT_NAME
            - REJECTED_ILLEGIBLE_IDENTIFICATION
            - REJECTED_INCOMPLETE_IDENTIFICATION
            - REJECTED_INCOMPLETE_REGISTRATION_LETTER
            - REJECTED_INCONSISTENT_IDENTITY_CARD
            - REJECTED_INCONSISTENT_ORGANIZATION_CODE
            - REJECTED_INCONSISTENT_REGISTRANT_NAME
            - REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE
            - REJECTED_INVALID_DOCUMENT
            - REJECTED_MISMATCH_BUSINESS_ID
            - REJECTED_MISMATCH_BUSINESS_NAME
            - REJECTED_MISMATCH_DOCUMENT_ID
            - REJECTED_MISMATCH_DOCUMENT_NAME
            - REJECTED_MISMATCH_DOCUMENT_TYPE
            - REJECTED_MISMATCH_REGISTRANT_INFO
            - REJECTED_MISMATCH_REGISTRANT_LOCALITY
            - REJECTED_MISMATCH_REGISTRANT_NAME
            - REJECTED_UNABLE_TO_OPEN
            - REJECTED_UNABLE_TO_VERIFY
            - REJECTED_UNKNOWN_ERROR
            - UNABLE_TO_RETRIEVE_STATUS
          type: string
    domain:
      properties:
        id:
          format: double
          type: number
    V1CheckDomainAvailabilityPostRequest:
      items:
        type: string
      maximum: 500
      type: array
    V1CheckDomainAvailabilityPostRequest1:
      items:
        type: string
      maximum: 500
      type: array
    V1CheckDomainAvailabilityPostRequest2:
      items:
        type: string
      maximum: 500
      type: array
    V1ReplaceDnsRecordsRequest:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1ReplaceDnsRecordsRequest1:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1ReplaceDnsRecordsRequest2:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1ReplaceDnsRecordsTypeRequest:
      items:
        $ref: '#/components/schemas/DNSRecordCreateType'
      type: array
    V1ReplaceDnsRecordsTypeRequest1:
      items:
        $ref: '#/components/schemas/DNSRecordCreateType'
      type: array
    V1ReplaceDnsRecordsTypeRequest2:
      items:
        $ref: '#/components/schemas/DNSRecordCreateType'
      type: array
    V1ReplaceDnsRecordsTypeRequest3:
      items:
        $ref: '#/components/schemas/DNSRecordCreateTypeName'
      type: array
    V1ReplaceDnsRecordsTypeRequest4:
      items:
        $ref: '#/components/schemas/DNSRecordCreateTypeName'
      type: array
    V1ReplaceDnsRecordsTypeRequest5:
      items:
        $ref: '#/components/schemas/DNSRecordCreateTypeName'
      type: array
    V1GetDomainsListResponse:
      items:
        $ref: '#/components/schemas/DomainSummary'
      type: array
    V1GetDomainsList200Response:
      items:
        $ref: '#/components/schemas/DomainSummary'
      type: array
    V1GetDomainsList200Response1:
      items:
        $ref: '#/components/schemas/DomainSummary'
      type: array
    V1GetDomainsList200Response2:
      items:
        $ref: '#/components/schemas/DomainSummary'
      type: array
    V1GetDomainsList200Response3:
      items:
        $ref: '#/components/schemas/DomainSummary'
      type: array
    V1GetLegalAgreementsResponse:
      items:
        $ref: '#/components/schemas/LegalAgreement'
      type: array
    V1GetLegalAgreements200Response:
      items:
        $ref: '#/components/schemas/LegalAgreement'
      type: array
    V1GetLegalAgreements200Response1:
      items:
        $ref: '#/components/schemas/LegalAgreement'
      type: array
    V1GetLegalAgreements200Response2:
      items:
        $ref: '#/components/schemas/LegalAgreement'
      type: array
    V1GetLegalAgreements200Response3:
      items:
        $ref: '#/components/schemas/LegalAgreement'
      type: array
    V1SuggestAlternateDomainsResponse:
      items:
        $ref: '#/components/schemas/DomainSuggestion'
      type: array
    V1SuggestAlternateDomains200Response:
      items:
        $ref: '#/components/schemas/DomainSuggestion'
      type: array
    V1SuggestAlternateDomains200Response1:
      items:
        $ref: '#/components/schemas/DomainSuggestion'
      type: array
    V1SuggestAlternateDomains200Response2:
      items:
        $ref: '#/components/schemas/DomainSuggestion'
      type: array
    V1SuggestAlternateDomains200Response3:
      items:
        $ref: '#/components/schemas/DomainSuggestion'
      type: array
    V1GetTldsListResponse:
      items:
        $ref: '#/components/schemas/TldSummary'
      type: array
    V1GetTldsList200Response:
      items:
        $ref: '#/components/schemas/TldSummary'
      type: array
    V1GetTldsList200Response1:
      items:
        $ref: '#/components/schemas/TldSummary'
      type: array
    V1GetTldsList200Response2:
      items:
        $ref: '#/components/schemas/TldSummary'
      type: array
    V1GetTldsList200Response3:
      items:
        $ref: '#/components/schemas/TldSummary'
      type: array
    V1GetDnsRecordsResponse:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1GetDnsRecords200Response:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1GetDnsRecords200Response1:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1GetDnsRecords200Response2:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    V1GetDnsRecords200Response3:
      items:
        $ref: '#/components/schemas/DNSRecord'
      type: array
    DomainsGetForwardingInfoResponse:
      items:
        $ref: '#/components/schemas/DomainForwarding'
      type: array
    NotificationsListOptedInTypesResponse:
      items:
        $ref: '#/components/schemas/DomainNotification'
      type: array
    ActionsGetRecentListResponse:
      items:
        $ref: '#/components/schemas/Action'
      type: array
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: apiKey
    apiSecret:
      type: apiKey
      in: header
      name: apiSecret
security:
  - apiKey: []
  - apiSecret: []
