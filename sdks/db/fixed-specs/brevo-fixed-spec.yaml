openapi: 3.0.1
info:
  title: Brevo API
  description: >
    Brevo provide a RESTFul API that can be used with any languages. With this
    API, you will be able to :
      - Manage your campaigns and get the statistics
      - Manage your contacts
      - Send transactional Emails and SMS
      - and much more...

    You can download our wrappers at https://github.com/orgs/brevo


    **Possible responses**
      | Code | Message |
      | :-------------: | ------------- |
      | 200  | OK. Successful Request  |
      | 201  | OK. Successful Creation |
      | 202  | OK. Request accepted |
      | 204  | OK. Successful Update/Deletion  |
      | 400  | Error. Bad Request  |
      | 401  | Error. Authentication Needed  |
      | 402  | Error. Not enough credit, plan upgrade needed  |
      | 403  | Error. Permission denied  |
      | 404  | Error. Object does not exist |
      | 405  | Error. Method not allowed  |
      | 406  | Error. Not Acceptable  |
  version: 3.0.0
  contact:
    name: Brevo Support
    url: https://account.brevo.com/support
    email: contact@brevo.com
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - url: https://api.brevo.com/v3
tags:
  - name: Contacts
  - name: Master account
  - name: Transactional emails
  - name: Reseller
  - name: Ecommerce
  - name: Email Campaigns
  - name: SMS Campaigns
  - name: Deals
  - name: WhatsApp Campaigns
  - name: Conversations
  - name: Senders
  - name: Companies
  - name: Webhooks
  - name: User
  - name: Tasks
  - name: Domains
  - name: Notes
  - name: Files
  - name: Coupons
  - name: External Feeds
  - name: Transactional SMS
  - name: Inbound Parsing
  - name: Payments
  - name: Account
  - name: Process
  - name: Transactional WhatsApp
  - name: Event
paths:
  /emailCampaigns:
    get:
      tags:
        - Email Campaigns
      summary: Return all your created email campaigns
      operationId: EmailCampaigns_getAll
      parameters:
        - description: Filter on the type of the campaigns
          name: type
          in: query
          schema:
            type: string
            enum:
              - classic
              - trigger
        - description: Filter on the status of the campaign
          name: status
          in: query
          schema:
            type: string
            enum:
              - suspended
              - archive
              - sent
              - queued
              - draft
              - inProcess
        - description: >-
            Filter on the type of statistics required. Example **globalStats**
            value will only fetch globalStats info of the campaign in returned
            response.
          name: statistics
          in: query
          schema:
            type: string
            enum:
              - globalStats
              - linksStats
              - statsByDomain
        - description: >
            **Mandatory if endDate is used**. Starting (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email
            campaigns.

            **Prefer to pass your timezone in date-time format for accurate
            result** ( only available if either 'status' not passed and if
            passed is set to 'sent' )
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used**. Ending (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email
            campaigns.

            **Prefer to pass your timezone in date-time format for accurate
            result** ( only available if either 'status' not passed and if
            passed is set to 'sent' )
          name: endDate
          in: query
          schema:
            type: string
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: >-
            Use this flag to exclude htmlContent from the response body. If set
            to **true**, htmlContent field will be returned as empty string in
            the response body
          name: excludeHtmlContent
          in: query
          schema:
            type: boolean
            enum:
              - true
              - false
      responses:
        '200':
          description: Email campaigns informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailCampaigns'
              examples:
                response:
                  value:
                    count: 2
                    campaigns:
                      - id: 12
                        name: EN - Sales Summer 2017
                        subject: 20% OFF for 2017 Summer Sales
                        previewText: Don't miss the sale
                        type: classic
                        status: sent
                        scheduledAt: '2017-06-01T12:30:00.000Z'
                        testSent: true
                        header: '[DEFAULT_HEADER]'
                        footer: '[DEFAULT_FOOTER]'
                        sender:
                          email: marketing@mycompany.com
                          name: Marketing
                          id: 26
                        replyTo: replyto@domain.com
                        toField: '{FNAME} {LNAME}'
                        htmlContent: This is my HTML Content
                        shareLink: http://example.com/fhsgccc.html?t=9865448900
                        tag: Newsletter
                        createdAt: '2017-05-01T12:30:00.000Z'
                        modifiedAt: '2017-05-01T12:30:00.000Z'
                        inlineImageActivation: true
                        mirrorActive: true
                        recurring: false
                        recipients:
                          lists:
                            - 5
                          exclusionLists:
                            - 13
                        statistics:
                          globalStats:
                            uniqueClicks: 2300
                            clickers: 2665
                            complaints: 1
                            delivered: 19765
                            sent: 19887
                            softBounces: 100
                            hardBounces: 87
                            uniqueViews: 7779
                            trackableViews: 5661
                            trackableViewsRate: 23.45
                            estimatedViews: 560
                            unsubscriptions: 2
                            viewed: 8999
                          campaignStats:
                            - listId: 5
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              trackableViews: 5661
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
                          mirrorClick: 120
                          remaining: 1000
                          linksStats:
                            http://myUrl1.domain.com: 80
                          statsByDomain:
                            yahoo.com:
                              uniqueClicks: 298
                              clickers: 533
                              complaints: 0
                              sent: 25601
                              softBounces: 5
                              hardBounces: 0
                              uniqueViews: 3527
                              unsubscriptions: 17
                              viewed: 5255
                              delivered: 25596
                            hotmail.co.uk:
                              uniqueClicks: 1970
                              clickers: 2720
                              complaints: 5
                              sent: 117055
                              softBounces: 111
                              hardBounces: 0
                              uniqueViews: 21111
                              unsubscriptions: 105
                              viewed: 35251
                              delivered: 117056
                      - id: 22
                        name: Weekly - 1
                        subject: Week 1 - Newsletter
                        previewText: your weekly newsletter
                        type: Classic
                        status: draft
                        scheduledAt: ''
                        testSent: false
                        header: '[DEFAULT_HEADER]'
                        footer: '[DEFAULT_FOOTER]'
                        sender:
                          email: newsletter@mycompany.com
                          name: Newsletter
                          id: 26
                        replyTo: replyto@domain.com
                        toField: '{FNAME} {LNAME}'
                        htmlContent: This is my HTML Content
                        shareLink: http://example.com/fhsgccc.html?t=9865448900
                        tag: Newsletter
                        createdAt: '2017-05-01T12:30:00.000Z'
                        modifiedAt: '2017-05-01T12:30:00.000Z'
                        inlineImageActivation: true
                        mirrorActive: true
                        recurring: false
                        recipients:
                          lists:
                            - 10
                          exclusionLists:
                            - 45
                        statistics:
                          globalStats:
                            uniqueClicks: 2300
                            clickers: 2665
                            complaints: 1
                            delivered: 19765
                            sent: 19887
                            softBounces: 100
                            hardBounces: 87
                            uniqueViews: 7779
                            trackableViews: 5661
                            trackableViewsRate: 23.45
                            estimatedViews: 560
                            unsubscriptions: 2
                            viewed: 8999
                          campaignStats:
                            - listId: 10
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              trackableViews: 5661
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
                          mirrorClick: 120
                          remaining: 1000
                          linksStats:
                            http://myUrl1.domain.com:
                              nbClick: 80
                            http://myUrl2.domain.com:
                              nbClick: 80
                            http://myUrl3.domain.com:
                              nbClick: 80
                          statsByDomain:
                            gmail:
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
                            aol:
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Email Campaigns
      summary: Create an email campaign
      operationId: EmailCampaigns_createCampaign
      requestBody:
        description: Values to create a campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEmailCampaign'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}:
    get:
      tags:
        - Email Campaigns
      summary: Get an email campaign report
      operationId: EmailCampaigns_getReport
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: >-
            Filter on the type of statistics required. Example **globalStats**
            value will only fetch globalStats info of the campaign in returned
            response.
          name: statistics
          in: query
          required: false
          schema:
            type: string
            enum:
              - globalStats
              - linksStats
              - statsByDomain
              - statsByDevice
              - statsByBrowser
      responses:
        '200':
          description: Email campaign informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailCampaign'
              examples:
                response:
                  value:
                    id: 22
                    name: Weekly - 1
                    subject: Week 1 - Newsletter
                    previewText: your weekly newsletter!
                    type: classic
                    status: draft
                    scheduledAt: '2017-09-22T12:30:00.000Z'
                    testSent: false
                    header: '[DEFAULT_HEADER]'
                    footer: '[DEFAULT_FOOTER]'
                    sender:
                      email: newsletter@mycompany.com
                      name: Newsletter
                      id: 26
                    replyTo: replyto@domain.com
                    toField: '{FNAME} {LNAME}'
                    htmlContent: This is my HTML Content
                    shareLink: http://dhh.brevo.com/fhsgccc.html?t=9865448900
                    tag: Newsletter
                    createdAt: '2017-05-01T12:30:00.000Z'
                    modifiedAt: '2017-05-01T12:30:00.000Z'
                    inlineImageActivation: true
                    mirrorActive: true
                    recurring: false
                    recipients:
                      lists:
                        - 22
                      exclusionLists:
                        - 45
                    statistics:
                      globalStats:
                        uniqueClicks: 2300
                        clickers: 2665
                        complaints: 1
                        delivered: 19765
                        sent: 19887
                        softBounces: 100
                        hardBounces: 87
                        uniqueViews: 7779
                        trackableViews: 5661
                        trackableViewsRate: 23.45
                        estimatedViews: 560
                        unsubscriptions: 2
                        viewed: 8999
                      campaignStats:
                        - listId: 22
                          uniqueClicks: 2300
                          clickers: 2665
                          complaints: 1
                          delivered: 19765
                          sent: 19887
                          softBounces: 100
                          hardBounces: 87
                          uniqueViews: 7779
                          trackableViews: 5661
                          unsubscriptions: 2
                          viewed: 8999
                          deferred: 30
                      mirrorClick: 120
                      remaining: 1000
                      linksStats:
                        http://myUrl1.domain.com:
                          nbClick: 80
                        http://myUrl2.domain.com:
                          nbClick: 80
                        http://myUrl3.domain.com:
                          nbClick: 80
                      statsByDomain:
                        gmail:
                          uniqueClicks: 2300
                          clickers: 2665
                          complaints: 1
                          delivered: 19765
                          sent: 19887
                          softBounces: 100
                          hardBounces: 87
                          uniqueViews: 7779
                          unsubscriptions: 2
                          viewed: 8999
                          deferred: 30
                      statsByDevice:
                        desktop:
                          mac:
                            clickers: 1
                            uniqueClicks: 0
                            viewed: 2
                            uniqueViews: 1
                        mobile:
                          androidMobile:
                            clickers: 1
                            uniqueClicks: 0
                            viewed: 1
                            uniqueViews: 0
                          iPhone:
                            clickers: 1
                            uniqueClicks: 0
                            viewed: 2
                            uniqueViews: 0
                      statsByBrowser:
                        thunderbird:
                          clickers: 1
                          uniqueClicks: 0
                          viewed: 1
                          uniqueViews: 0
                        safari:
                          clickers: 1
                          uniqueClicks: 0
                          viewed: 1
                          uniqueViews: 0
                        internetExplorer:
                          clickers: 0
                          uniqueClicks: 0
                          viewed: 1
                          uniqueViews: 0
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Email Campaigns
      summary: Update an email campaign
      operationId: EmailCampaigns_updateCampaign
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEmailCampaign'
        required: true
      responses:
        '204':
          description: Email campaign updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Email Campaigns
      summary: Delete an email campaign
      operationId: EmailCampaigns_removeCampaign
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Email campaign has been deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sendNow:
    post:
      tags:
        - Email Campaigns
      summary: Send an email campaign immediately, based on campaignId
      operationId: EmailCampaigns_sendImmediate
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Email campaign has been scheduled
          content: {}
        '400':
          description: Campaign could not be sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '402':
          description: >-
            You don't have enough credit to send your campaign. Please update
            your plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sendTest:
    post:
      tags:
        - Email Campaigns
      summary: Send an email campaign to your test list
      operationId: EmailCampaigns_sendTestToTestList
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestEmail'
        required: true
      responses:
        '204':
          description: Test email has been sent successfully to all recipients
          content: {}
        '400':
          description: Test email could not be sent to the following email addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
  /emailCampaigns/{campaignId}/status:
    put:
      tags:
        - Email Campaigns
      summary: Update an email campaign status
      operationId: EmailCampaigns_updateStatus
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Status of the campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCampaignStatus'
        required: true
      responses:
        '204':
          description: The campaign status has been updated successfully
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sendReport:
    post:
      tags:
        - Email Campaigns
      summary: Send the report of a campaign
      operationId: EmailCampaigns_sendReport
      description: A PDF will be sent to the specified email addresses
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values for send a report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReport'
        required: true
      responses:
        '204':
          description: Report has been successfully sent to the defined recipients
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/abTestCampaignResult:
    get:
      tags:
        - Email Campaigns
      summary: Get an A/B test email campaign results
      operationId: EmailCampaigns_getAbTestResult
      description: Obtain winning version of an A/B test email campaign
      parameters:
        - description: Id of the A/B test campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A/B test email campaign Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/abTestCampaignResult'
              examples:
                response:
                  value:
                    winningVersion: B
                    winningCriteria: Click
                    openRate: 100%
                    clickRate: 50%
                    winningVersionRate: 0%
                    statistics:
                      openers:
                        Version A: 20%
                        Version B: 100%
                      clicks:
                        Version A: 0%
                        Version B: 50%
                      unsubscribed:
                        Version A: 20%
                        Version B: 0%
                      softBounces:
                        Version A: 0%
                        Version B: 0%
                      hardBounces:
                        Version A: 0%
                        Version B: 0%
                      complaints:
                        Version A: 0%
                        Version B: 0%
                    clickedLinks:
                      Version A:
                        - link: https://google.com
                          clicksCount: 0
                          clickRate: 0%
                        - link: https://youtube.com
                          clicksCount: 0
                          clickRate: 0%
                      Version B:
                        - link: http://www.github.com
                          clicksCount: 2
                          clickRate: 40%
                        - link: http://www.stackoverflow.com
                          clicksCount: 3
                          clickRate: 60%
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: A/B test Email Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sharedUrl:
    get:
      tags:
        - Email Campaigns
      summary: Get a shared template url
      operationId: EmailCampaigns_getSharedUrl
      description: >-
        Get a unique URL to share & import an email template from one Brevo
        account to another.
      parameters:
        - description: Id of the campaign or template
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Shared template URL information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSharedTemplateUrl'
              examples:
                response:
                  value:
                    sharedUrl: >-
                      https://my.brevo.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign/Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '405':
          description: Only email campaigns or templates are allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
        - Email Campaigns
      summary: Export the recipients of an email campaign
      operationId: EmailCampaigns_exportRecipientsPost
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to send for a recipient export request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailExportRecipients'
        required: false
      responses:
        '202':
          $ref: '#/components/responses/createdProcessId'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/images:
    post:
      tags:
        - Email Campaigns
      summary: Upload an image to your account's image gallery
      operationId: EmailCampaigns_uploadImageToGallery
      requestBody:
        description: Parameters to upload an image
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uploadImageToGallery'
        required: true
      responses:
        '201':
          description: Image has been successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadImageModel'
              examples:
                response:
                  value:
                    url: >-
                      https://img.mailinblue.com/100000/images/rnb/original/62casdase8wewq9df1c2f27c.jpeg
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/email:
    post:
      tags:
        - Transactional emails
      summary: Send a transactional email
      operationId: TransactionalEmails_sendTransactionalEmail
      requestBody:
        description: Values to send a transactional email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendSmtpEmail'
        required: true
      responses:
        '201':
          description: transactional email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSmtpEmail'
              examples:
                response:
                  value:
                    messageId: <201798300811.5787683@relay.domain.com>
        '202':
          description: transactional email scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduleSmtpEmail'
              examples:
                response:
                  value:
                    messageId: <201798300811.5787683@relay.domain.com>
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/emails:
    get:
      tags:
        - Transactional emails
      summary: Get the list of transactional emails on the basis of allowed filters
      operationId: TransactionalEmails_getList
      description: >-
        This endpoint will show the list of emails for past 30 days by default.
        To retrieve emails before that time, please pass startDate and endDate
        in query filters.
      parameters:
        - description: >
            **Mandatory if templateId and messageId are not passed in query
            filters.** Email address to which transactional email has been sent.
          name: email
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if email and messageId are not passed in query
            filters.** Id of the template that was used to compose transactional
            email.
          name: templateId
          in: query
          schema:
            type: integer
            format: int64
        - description: >
            **Mandatory if templateId and email are not passed in query
            filters.** Message ID of the transactional email sent.
          name: messageId
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from
            which you want to fetch the list. **Maximum time period that can be
            selected is one month**.
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till
            which you want to fetch the list. **Maximum time period that can be
            selected is one month.**
          name: endDate
          in: query
          schema:
            type: string
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: Number of documents returned per page
          name: limit
          in: query
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 500
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: List of transactional emails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacEmailsList'
              examples:
                response:
                  value:
                    count: 120
                    transactionalEmails:
                      - email: abc@xyz.com
                        subject: summer camp
                        templateId: 15
                        messageId: <201798300811.5787683@relay.domain.com>
                        uuid: 5a78c-209ok98262910-std2341
                        date: '2019-05-25T11:53:26.000Z'
                      - email: test@test.com
                        subject: details verification
                        templateId: 15
                        messageId: <201798300811.5700093@relay.domain.com>
                        uuid: 5a78c-209ok98262910-s99a341
                        date: '2019-05-25T07:28:11.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/emails/{uuid}:
    get:
      tags:
        - Transactional emails
      summary: Get the personalized content of a sent transactional email
      operationId: TransactionalEmails_getContentByUuid
      parameters:
        - description: >-
            Unique id of the transactional email that has been sent to a
            particular contact
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transactional email content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacEmailContent'
              examples:
                response:
                  value:
                    email: abc@example.com
                    subject: Summer Camps
                    templateId: 12
                    date: '2016-02-25T11:53:26.000Z'
                    events:
                      - name: sent
                        time: '2016-02-25T11:53:26.000Z'
                      - name: delivered
                        time: '2016-02-25T11:55:26.000Z'
                      - name: opened
                        time: '2016-02-26T09:53:26.000Z'
                    body: >-
                      <!DOCTYPE html> <html> <body> <h1>Greetings from the
                      team</h1> <p>This is the actual html content sent</p>
                      </body> </html>
  /smtp/log/{identifier}:
    delete:
      tags:
        - Transactional emails
      summary: Delete an SMTP transactional log
      operationId: TransactionalEmails_deleteLog
      parameters:
        - description: MessageId or Email of the transactional log(s) to delete
          name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Transactional Logs deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Message ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/templates:
    get:
      tags:
        - Transactional emails
      summary: Get the list of email templates
      operationId: TransactionalEmails_listTemplates
      parameters:
        - description: >-
            Filter on the status of the template. Active = true, inactive =
            false
          name: templateStatus
          in: query
          schema:
            type: boolean
        - description: Number of documents returned per page
          name: limit
          in: query
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: transactional email templates informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmtpTemplates'
              examples:
                response:
                  value:
                    count: 2
                    templates:
                      - id: 5
                        name: ChristomasTimeTemplate
                        subject: Merry Christmas
                        isActive: false
                        testSent: false
                        sender:
                          name: John
                          email: john.smith@example.com
                          id: 23
                        replyTo: replyto@domain.com
                        toField: ''
                        tag: Festival
                        htmlContent: HTML CONTENT 1
                        createdAt: '2016-02-24T14:44:24.000Z'
                        modifiedAt: '2016-02-24T15:37:11.000Z'
                      - id: 12
                        name: SummerSales2017Template
                        subject: Enjoy our summer Sales !
                        isActive: true
                        testSent: false
                        sender:
                          name: John
                          email: john.smith@example.com
                          id: 23
                        replyTo: replyto@domain.com
                        toField: ''
                        tag: Summer
                        htmlContent: HTML CONTENT 2
                        createdAt: '2016-02-25T11:53:26.000Z'
                        modifiedAt: '2016-02-25T11:53:26.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Transactional emails
      summary: Create an email template
      operationId: TransactionalEmails_createTemplate
      requestBody:
        description: values to update in transactional email template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSmtpTemplate'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/templates/{templateId}:
    get:
      tags:
        - Transactional emails
      summary: Returns the template information
      operationId: TransactionalEmails_getTemplateInfo
      parameters:
        - description: id of the template
          name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Email template informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmtpTemplateOverview'
              examples:
                response:
                  value:
                    id: 33
                    name: OrderConfirmation
                    subject: 'Order Confirmation : Thanks for your Purchase !'
                    isActive: true
                    testSent: false
                    sender:
                      name: John
                      email: john.smith@example.com
                      id: 26
                    replyTo: replyto@domain.com
                    toField: ''
                    tag: ''
                    htmlContent: HTML CONTENT 4
                    createdAt: '2016-02-25T11:53:26.000Z'
                    modifiedAt: '2016-02-25T11:53:26.000Z'
                    doiTemplate: false
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Transactional emails
      summary: Update an email template
      operationId: TransactionalEmails_updateTemplate
      parameters:
        - description: id of the template
          name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: values to update in transactional email template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSmtpTemplate'
        required: true
      responses:
        '204':
          description: transactional email template updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Transactional emails
      summary: Delete an inactive email template
      operationId: TransactionalEmails_deleteTemplateById
      parameters:
        - description: id of the template
          name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Inactive transactional email template has been deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/templates/{templateId}/sendTest:
    post:
      tags:
        - Transactional emails
      summary: Send a template to your test list
      operationId: TransactionalEmails_sendTestTemplate
      parameters:
        - description: Id of the template
          name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestEmail'
        required: true
      responses:
        '204':
          description: Test email has been sent successfully to all recipients
          content: {}
        '400':
          description: Test email could not be sent to the following email addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
        '404':
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/statistics/aggregatedReport:
    get:
      tags:
        - Transactional emails
      summary: Get your transactional email activity aggregated over a period of time
      operationId: TransactionalEmails_getAggregatedReport
      description: >-
        This endpoint will show the aggregated stats for past 90 days by default
        if `startDate` and `endDate` OR `days` is not passed. The date range can
        not exceed 90 days
      parameters:
        - description: >
            **Mandatory if endDate is used.** Starting date of the report
            (YYYY-MM-DD). Must be lower than equal to endDate
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date of the report
            (YYYY-MM-DD). Must be greater than equal to startDate
          name: endDate
          in: query
          schema:
            type: string
        - description: >
            Number of days in the past including today (positive integer). _Not
            compatible with 'startDate' and 'endDate'_
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: Tag of the emails
          name: tag
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Aggregated report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAggregatedReport'
              examples:
                response:
                  value:
                    range: 2016-09-08|2017-04-28
                    requests: 19887
                    delivered: 18996
                    hardBounces: 234
                    softBounces: 1533
                    clicks: 9987
                    uniqueClicks: 8766
                    opens: 17654
                    uniqueOpens: 13688
                    spamReports: 1
                    blocked: 2
                    invalid: 0
                    unsubscribed: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/statistics/reports:
    get:
      tags:
        - Transactional emails
      summary: Get your transactional email activity aggregated per day
      operationId: TransactionalEmails_getActivityPerDay
      parameters:
        - description: Number of documents returned per page
          name: limit
          in: query
          schema:
            maximum: 30
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Index of the first document on the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >
            **Mandatory if endDate is used.** Starting date of the report
            (YYYY-MM-DD)
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date of the report
            (YYYY-MM-DD)
          name: endDate
          in: query
          schema:
            type: string
        - description: >
            Number of days in the past including today (positive integer). _Not
            compatible with 'startDate' and 'endDate'_
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: Tag of the emails
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Aggregated report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getReports'
              examples:
                response:
                  value:
                    reports:
                      - date: '2017-04-30T00:00:00.000Z'
                        requests: 10756
                        delivered: 10103
                        hardBounces: 21
                        softBounces: 137
                        clicks: 1026
                        uniqueClicks: 720
                        opens: 5091
                        uniqueOpens: 2318
                        spamReports: 0
                        blocked: 519
                        invalid: 1
                        unsubscribed: 0
                      - date: '2017-05-01T00:00:00.000Z'
                        requests: 18812
                        delivered: 17499
                        hardBounces: 34
                        softBounces: 254
                        clicks: 1514
                        uniqueClicks: 1090
                        opens: 10089
                        uniqueOpens: 4393
                        spamReports: 0
                        blocked: 920
                        invalid: 2
                        unsubscribed: 3
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/statistics/events:
    get:
      tags:
        - Transactional emails
      summary: Get all your transactional email activity (unaggregated events)
      operationId: TransactionalEmails_getAllActivity
      description: >-
        This endpoint will show the aggregated stats for past 30 days by default
        if `startDate` and `endDate` OR `days` is not passed. The date range can
        not exceed 90 days
      parameters:
        - description: Number limitation for the result returned
          name: limit
          in: query
          schema:
            maximum: 5000
            type: integer
            format: int64
            default: 2500
            minimum: 0
        - description: Beginning point in the list to retrieve from.
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >
            **Mandatory if endDate is used.** Starting date of the report
            (YYYY-MM-DD). Must be lower than equal to endDate
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date of the report
            (YYYY-MM-DD). Must be greater than equal to startDate
          name: endDate
          in: query
          schema:
            type: string
        - description: >
            Number of days in the past including today (positive integer). _Not
            compatible with 'startDate' and 'endDate'_
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: Filter the report for a specific email addresses
          name: email
          in: query
          schema:
            type: string
            format: email
        - description: Filter the report for a specific event type
          name: event
          in: query
          schema:
            type: string
            enum:
              - bounces
              - hardBounces
              - softBounces
              - delivered
              - spam
              - requests
              - opened
              - clicks
              - invalid
              - deferred
              - blocked
              - unsubscribed
              - error
              - loadedByProxy
        - description: Filter the report for tags (serialized and urlencoded array)
          name: tags
          in: query
          schema:
            type: string
        - description: Filter on a specific message id
          name: messageId
          in: query
          schema:
            type: string
        - description: Filter on a specific template id
          name: templateId
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Email events report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailEventReport'
              examples:
                response:
                  value:
                    events:
                      - email: john.smith@example.com
                        date: '2017-03-12T12:30:00.000Z'
                        messageId: <201798300811.5787683@example.domain.com>
                        event: deferred
                        reason: Error connection timeout
                        tag: OrderConfirmation
                        from: john@example.com
                        templateId: 4
                      - email: john.smith@example.com
                        date: '2017-03-13T16:30:00.000Z'
                        messageId: <201798300811.5787683@example.domain.com>
                        event: delivered
                        tag: OrderConfirmation
                        from: john@example.com
                        templateId: 5
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedContacts/{email}:
    delete:
      tags:
        - Transactional emails
      summary: Unblock or resubscribe a transactional contact
      operationId: TransactionalEmails_unblockContact
      parameters:
        - description: contact email (urlencoded) to unblock.
          name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Contact unblocked
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Contact email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedContacts:
    get:
      tags:
        - Transactional emails
      summary: Get the list of blocked or unsubscribed transactional contacts
      operationId: TransactionalEmails_listBlockedContacts
      parameters:
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from
            which you want to fetch the blocked or unsubscribed contacts
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till
            which you want to fetch the blocked or unsubscribed contacts
          name: endDate
          in: query
          schema:
            type: string
        - description: Number of documents returned per page
          name: limit
          in: query
          schema:
            maximum: 100
            type: integer
            format: int64
            default: 50
            minimum: 0
        - description: Index of the first document on the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Comma separated list of emails of the senders from which contacts
            are blocked or unsubscribed
          name: senders
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: List of blocked or unsubscribed transactional contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacBlockedContacts'
              examples:
                response:
                  value:
                    count: 1
                    contacts:
                      - email: abc@xyz.com
                        senderEmail: ez312@gmal.com
                        reason:
                          message: Admin blocked
                          code: adminBlocked
                        blockedAt: '2017-05-01T12:30:00.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedDomains:
    get:
      tags:
        - Transactional emails
      summary: Get the list of blocked domains
      operationId: TransactionalEmails_getBlockedDomains
      description: Get the list of blocked domains
      responses:
        '200':
          description: List of blocked domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBlockedDomains'
              examples:
                response:
                  value:
                    domains:
                      - example.com
                      - testdomain.com
    post:
      tags:
        - Transactional emails
      summary: Add a new domain to the list of blocked domains
      operationId: TransactionalEmails_addBlockedDomain
      description: Blocks a new domain in order to avoid messages being sent to the same
      requestBody:
        description: Name of the domain to be blocked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blockDomain'
        required: true
      responses:
        '201':
          description: Domain is successfully blocked
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedDomains/{domain}:
    delete:
      tags:
        - Transactional emails
      summary: Unblock an existing domain from the list of blocked domains
      operationId: TransactionalEmails_unblockDomain
      description: Unblocks an existing domain from the list of blocked domains
      parameters:
        - description: The name of the domain to be deleted
          name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Domain is successfully deleted from the list of blocked domains
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/deleteHardbounces:
    post:
      tags:
        - Transactional emails
      summary: Delete hardbounces
      operationId: TransactionalEmails_removeHardbounces
      description: >-
        Delete hardbounces. To use carefully (e.g. in case of temporary ISP
        failures)
      requestBody:
        description: values to delete hardbounces
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteHardbounces'
        required: false
      responses:
        '204':
          description: Hardbounces deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/emailStatus/{identifier}:
    get:
      tags:
        - Transactional emails
      summary: Fetch scheduled emails by batchId or messageId
      operationId: TransactionalEmails_getEmailStatusById
      description: >-
        Fetch scheduled batch of emails by batchId or single scheduled email by
        messageId (Can retrieve data upto 30 days old)
      parameters:
        - description: >-
            The `batchId` of scheduled emails batch (Should be a valid UUIDv4)
            or the `messageId` of scheduled email.
          name: identifier
          in: path
          required: true
          examples:
            batchId:
              summary: batchId of scheduled batch
              value: 4320f270-a4e3-4a2e-b591-edfe30a5e627
            messageId:
              summary: messageId of scheduled email
              value: <202202231031.53307417725@smtp-relay.mailin.fr>
          schema:
            type: string
        - description: >-
            Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from
            which you want to fetch the list. Can be maximum 30 days older tha
            current date.
          name: startDate
          in: query
          example: '2022-02-02'
          required: false
          schema:
            type: string
            format: date
        - description: >-
            Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till
            which you want to fetch the list. Maximum time period that can be
            selected is one month.
          name: endDate
          in: query
          example: '2022-03-02'
          required: false
          schema:
            type: string
            format: date
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed.
            Not valid when identifier is `messageId`.
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: >-
            Filter the records by `status` of the scheduled email batch or
            message. Not valid when identifier is `messageId`.
          name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - processed
              - inProgress
              - queued
        - description: >-
            Number of documents returned per page. Not valid when identifier is
            `messageId`.
          name: limit
          in: query
          required: false
          example: 100
          schema:
            type: integer
            format: int64
            default: 100
            maximum: 500
            minimum: 0
        - description: >-
            Index of the first document on the page.  Not valid when identifier
            is `messageId`.
          name: offset
          in: query
          required: false
          example: 0
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: Scheduled email batches
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/TransactionalEmailsGetEmailStatusByIdResponse
              examples:
                batchId:
                  value:
                    count: 3
                    batches:
                      - scheduledAt: '2022-02-28T11:36:43.576000000Z'
                        createdAt: '2022-02-26T11:36:43.576000000Z'
                        status: queued
                      - scheduledAt: '2022-02-25T11:36:43.576000000Z'
                        createdAt: '2022-02-24T11:36:43.576000000Z'
                        status: processed
                      - scheduledAt: '2022-02-26T11:36:43.576000000Z'
                        createdAt: '2022-02-25T11:36:43.576000000Z'
                        status: inProgress
                messageId:
                  value:
                    scheduledAt: '2022-02-28T11:36:43.576000000Z'
                    createdAt: '2022-02-26T11:36:43.576000000Z'
                    status: queued
        '400':
          description: Invalid parameters passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Record(s) for identifier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/email/{identifier}:
    delete:
      tags:
        - Transactional emails
      summary: Delete scheduled emails by batchId or messageId
      operationId: TransactionalEmails_deleteScheduledEmails
      description: >-
        Delete scheduled batch of emails by batchId or single scheduled email by
        messageId
      parameters:
        - description: >-
            The `batchId` of scheduled emails batch (Should be a valid UUIDv4)
            or the `messageId` of scheduled email.
          name: identifier
          in: path
          required: true
          examples:
            batchId:
              summary: batchId of scheduled batch
              value: 4320f270-a4e3-4a2e-b591-edfe30a5e627
            messageId:
              summary: messageId of scheduled email
              value: <202202231031.53307417725@smtp-relay.mailin.fr>
          schema:
            type: string
      responses:
        '204':
          description: Scheduled email(s) deleted
          content: {}
        '400':
          description: Invalid parameters passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Record(s) for identifier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts:
    get:
      tags:
        - Contacts
      summary: Get all the contacts
      operationId: Contacts_getAllContacts
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >
            Filter (urlencoded) the contacts modified after a given UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone
            in date-time format for accurate result.**
          name: modifiedSince
          in: query
          schema:
            type: string
        - description: >
            Filter (urlencoded) the contacts created after a given UTC date-time
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          name: createdSince
          in: query
          schema:
            type: string
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: Id of the segment. **Either listIds or segmentId can be passed.**
          name: segmentId
          in: query
          schema:
            type: integer
            format: int64
        - description: Ids of the list. **Either listIds or segmentId can be passed.**
          name: listIds
          in: query
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        '200':
          description: All contacts listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts'
              examples:
                response:
                  value:
                    contacts:
                      - email: contact1@example.com
                        id: 247
                        emailBlacklisted: true
                        smsBlacklisted: true
                        createdAt: '2017-05-01T17:05:03.000Z'
                        modifiedAt: '2017-05-01T17:05:03.000Z'
                        listIds:
                          - 43
                          - 58
                        attributes:
                          SMS: '33058407250'
                          IDENTIFICATION: 1-3RHQ-259
                          CIV: MS
                          LAST_NAME: Brennon
                          FIRST_NAME: Meg
                          DOB: '1986-05-02T00:00:00.000Z'
                          ADDRESS: 1 5th avenue
                          ZIP_CODE: '44300'
                          CITY: New-York
                          ACTION_CODE: 17HH98CH
                      - email: 33058407248@mailin-sms.com
                        id: 245
                        emailBlacklisted: true
                        smsBlacklisted: false
                        createdAt: '2017-05-01T17:05:03.000Z'
                        modifiedAt: '2017-05-01T17:05:03.000Z'
                        listIds:
                          - 43
                          - 61
                          - 58
                        attributes:
                          SMS: '33058407248'
                          IDENTIFICATION: 1-78JS-432
                          CIV: MS
                          LAST_NAME: Press
                          FIRST_NAME: Sophia
                          DOB: '1980-09-11T00:00:00.000Z'
                          ADDRESS: 5 Flower Street
                          ZIP_CODE: '44119'
                          CITY: Seattle
                          ACTION_CODE: 17HU765
                    count: 3
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Contacts
      summary: Create a contact
      operationId: Contacts_createNewContact
      requestBody:
        description: Values to create a contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createContact'
        required: true
      responses:
        '201':
          description: Contact created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateContactModel'
              examples:
                response:
                  value:
                    id: 21
        '204':
          description: Contact updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/doubleOptinConfirmation:
    post:
      tags:
        - Contacts
      summary: Create Contact via DOI (Double-Opt-In) Flow
      operationId: Contacts_createDoubleOptInContact
      requestBody:
        description: Values to create the Double opt-in (DOI) contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDoiContact'
        required: true
      responses:
        '201':
          description: DOI Contact created
          content: {}
        '204':
          description: DOI Contact updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: createDoiContact
  /contacts/{identifier}:
    get:
      tags:
        - Contacts
      summary: Get a contact's details
      operationId: Contacts_getDetails
      description: >-
        Along with the contact details, this endpoint will show the statistics
        of contact for the recent 90 days by default. To fetch the earlier
        statistics, please use Get contact campaign stats
        ``https://developers.brevo.com/reference/contacts-7#getcontactstats``
        endpoint with the appropriate date ranges.
      parameters:
        - description: Email (urlencoded) OR ID of the contact OR its SMS attribute value
          name: identifier
          in: path
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
            statistic events specific to campaigns. Must be lower than equal to
            endDate
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
            statistic events specific to campaigns. Must be greater than equal
            to startDate.
          name: endDate
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Contact informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getExtendedContactDetails'
              examples:
                response:
                  value:
                    email: peggy.rain@example.com
                    id: 42
                    emailBlacklisted: false
                    smsBlacklisted: false
                    createdAt: '2017-05-02T16:40:31.000Z'
                    modifiedAt: '2017-05-02T16:40:31.000Z'
                    attributes:
                      FIRST_NAME: Peggy
                      LAST_NAME: Rain
                      SMS: '3087433387669'
                      CIV: '1'
                      DOB: '1986-04-13T00:00:00.000Z'
                      ADDRESS: 987 5th avenue
                      ZIP_CODE: '87544'
                      CITY: New-York
                      AREA: NY
                    listIds:
                      - 40
                    statistics:
                      messagesSent:
                        - campaignId: 21
                          eventTime: '2016-05-03T20:15:13.000Z'
                        - campaignId: 42
                          eventTime: '2016-10-17T10:30:01.000Z'
                      opened:
                        - campaignId: 21
                          count: 2
                          eventTime: '2016-05-03T21:24:56.000Z'
                          ip: 66.249.93.118
                        - campaignId: 68
                          count: 1
                          eventTime: '2017-01-30T13:56:40.000Z'
                          ip: 66.249.93.217
                      clicked:
                        - campaignId: 21
                          links:
                            - count: 2
                              eventTime: '2016-05-03T21:25:01.000Z'
                              ip: 66.249.93.118
                              url: >-
                                https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=brevo&utm_campaign=test_camp&utm_medium=email
                      delivered:
                        - campaignId: 21
                          count: 2
                          eventTime: '2016-05-03T21:24:56.000Z'
                          ip: 66.249.93.118
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Contact's email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Contacts
      summary: Delete a contact
      operationId: Contacts_deleteContact
      parameters:
        - description: Email (urlencoded) OR ID of the contact
          name: identifier
          in: path
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '204':
          description: Contact deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '405':
          description: You're not allowed to delete registered email contact with Brevo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Contacts
      summary: Update a contact
      operationId: Contacts_updateContactById
      parameters:
        - description: Email (urlencoded) OR ID of the contact
          name: identifier
          in: path
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      requestBody:
        description: Values to update a contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateContact'
        required: true
      responses:
        '204':
          description: Contact updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Contact's email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateContact
  /contacts/batch:
    post:
      tags:
        - Contacts
      summary: Update multiple contacts
      operationId: Contacts_updateMultiple
      requestBody:
        description: Values to update multiple contacts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateBatchContacts'
        required: true
      responses:
        '204':
          description: All contacts updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/{identifier}/campaignStats:
    get:
      tags:
        - Contacts
      summary: Get email campaigns' statistics for a contact
      operationId: Contacts_getEmailCampaignStats
      parameters:
        - description: Email (urlencoded) OR ID of the contact
          name: identifier
          in: path
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
            statistic events specific to campaigns. Must be lower than equal to
            endDate
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
            statistic events specific to campaigns. Must be greater than equal
            to startDate. Maximum difference between startDate and endDate
            should not be greater than 90 days
          name: endDate
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Contact campaign statistics informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactCampaignStats'
              examples:
                response:
                  value:
                    messagesSent:
                      - campaignId: 21
                        eventTime: '2016-05-03T20:15:13.000Z'
                      - campaignId: 42
                        eventTime: '2016-10-17T10:30:01.000Z'
                      - campaignId: 45
                        eventTime: '2016-11-09T11:45:02.000Z'
                    opened:
                      - campaignId: 21
                        count: 2
                        eventTime: '2016-05-03T21:24:56.000Z'
                        ip: 66.249.93.118
                      - campaignId: 45
                        count: 1
                        eventTime: '2017-01-30T13:56:40.000Z'
                        ip: 66.249.93.217
                    clicked:
                      - campaignId: 21
                        links:
                          - count: 2
                            eventTime: '2016-05-03T21:25:01.000Z'
                            ip: 66.249.93.118
                            url: >-
                              https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=brevo&utm_campaign=test_camp&utm_medium=email
                    delivered:
                      - campaignId: 21
                        count: 2
                        eventTime: '2016-05-03T21:24:56.000Z'
                        ip: 66.249.93.118
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Contact's email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/attributes:
    get:
      tags:
        - Contacts
      summary: List all attributes
      operationId: Contacts_listAttributes
      responses:
        '200':
          description: Attributes listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAttributes'
              examples:
                response:
                  value:
                    attributes:
                      - name: LASTNAME
                        category: normal
                        type: text
                      - name: FIRSTNAME
                        category: normal
                        type: text
                      - name: DOB
                        category: normal
                        type: date
                      - name: GENDER
                        category: category
                        type: text
                        enumeration:
                          - value: 1
                            label: Men
                          - value: 2
                            label: Women
                          - value: 3
                            label: Kid
  /contacts/attributes/{attributeCategory}/{attributeName}:
    put:
      tags:
        - Contacts
      summary: Update contact attribute
      operationId: Contacts_updateAttribute
      parameters:
        - description: Category of the attribute
          name: attributeCategory
          in: path
          required: true
          schema:
            type: string
            enum:
              - category
              - calculated
              - global
        - description: Name of the existing attribute
          name: attributeName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Values to update an attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAttribute'
        required: true
      responses:
        '204':
          description: Attribute updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateAttribute
    post:
      tags:
        - Contacts
      summary: Create contact attribute
      operationId: Contacts_createAttribute
      parameters:
        - description: Category of the attribute
          name: attributeCategory
          in: path
          required: true
          schema:
            type: string
            enum:
              - normal
              - transactional
              - category
              - calculated
              - global
        - description: Name of the attribute
          name: attributeName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Values to create an attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createAttribute'
        required: true
      responses:
        '201':
          description: Attribute created
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Contacts
      summary: Delete an attribute
      operationId: Contacts_removeAttribute
      parameters:
        - description: Category of the attribute
          name: attributeCategory
          in: path
          required: true
          schema:
            type: string
            enum:
              - normal
              - transactional
              - category
              - calculated
              - global
        - description: Name of the existing attribute
          name: attributeName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Attribute deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/folders:
    get:
      tags:
        - Contacts
      summary: Get all folders
      operationId: Contacts_getAllFolders
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          required: true
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Index of the first document of the page
          name: offset
          in: query
          required: true
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Folders informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFolders'
              examples:
                response:
                  value:
                    folders:
                      - id: 42
                        name: Ninja_Form
                        totalBlacklisted: 98
                        totalSubscribers: 4567
                        uniqueSubscribers: 4665
                      - id: 29
                        name: Prestashop
                        totalBlacklisted: 10
                        totalSubscribers: 6543
                        uniqueSubscribers: 6553
                    count: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Contacts
      summary: Create a folder
      operationId: Contacts_createFolder
      requestBody:
        description: Name of the folder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateFolder'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: createFolder
  /contacts/folders/{folderId}:
    get:
      tags:
        - Contacts
      summary: Returns a folder's details
      operationId: Contacts_getFolderDetails
      parameters:
        - description: id of the folder
          name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Folder details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFolder'
              examples:
                response:
                  value:
                    id: 1
                    name: Client_Folder
                    totalBlacklisted: 987
                    totalSubscribers: 16778
                    uniqueSubscribers: 17765
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Contacts
      summary: Update a folder
      operationId: Contacts_updateFolder
      parameters:
        - description: Id of the folder
          name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Name of the folder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateFolder'
        required: true
      responses:
        '204':
          description: Folder updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateFolder
    delete:
      tags:
        - Contacts
      summary: Delete a folder (and all its lists)
      operationId: Contacts_deleteFolder
      parameters:
        - description: Id of the folder
          name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Folder deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/folders/{folderId}/lists:
    get:
      tags:
        - Contacts
      summary: Get lists in a folder
      operationId: Contacts_getFolderLists
      parameters:
        - description: Id of the folder
          name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Folder's Lists details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFolderLists'
              examples:
                response:
                  value:
                    lists:
                      - id: 46
                        name: Reactiv
                        totalSubscribers: 7655
                        totalBlacklisted: 0
                        uniqueSubscribers: 7655
                      - id: 41
                        name: NY_Area
                        totalSubscribers: 3654
                        totalBlacklisted: 23
                        uniqueSubscribers: 3677
                      - id: 22
                        name: VIP_Customer
                        totalSubscribers: 8753
                        totalBlacklisted: 72
                        uniqueSubscribers: 8825
                    count: 3
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists:
    get:
      tags:
        - Contacts
      summary: Get all the lists
      operationId: Contacts_getAllLists
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Lists informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLists'
              examples:
                response:
                  value:
                    lists:
                      - id: 53
                        name: Spanish_Speakers
                        totalSubscribers: 5432
                        totalBlacklisted: 65
                        uniqueSubscribers: 5497
                        folderId: 1
                      - id: 50
                        name: Other
                        totalSubscribers: 10976
                        totalBlacklisted: 765
                        uniqueSubscribers: 11741
                        folderId: 2
                    count: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Contacts
      summary: Create a list
      operationId: Contacts_createList
      requestBody:
        description: Values to create a list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createList'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}:
    get:
      tags:
        - Contacts
      summary: Get a list's details
      operationId: Contacts_getListDetails
      parameters:
        - description: Id of the list
          name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: >
            **Mandatory if endDate is used**. Ending (urlencoded) UTC date-time
            (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for
            a specific list id.

            **Prefer to pass your timezone in date-time format for accurate
            result**
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used**. Ending (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email
            campaigns for a specific list id.

            **Prefer to pass your timezone in date-time format for accurate
            result**
          name: endDate
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getExtendedList'
              examples:
                response:
                  value:
                    id: 12
                    name: Newsletter_Weekly
                    startDate: '2023-09-30T00:00:00.000Z'
                    endDate: '2023-03-31T00:00:00.000Z'
                    totalSubscribers: 6533
                    totalBlacklisted: 63
                    uniqueSubscribers: 6596
                    folderId: 1
                    createdAt: '2016-02-26T11:56:08.000Z'
                    campaignStats:
                      - campaignId: 15
                        stats:
                          uniqueClicks: 701
                          clickers: 789
                          complaints: 0
                          delivered: 6632
                          sent: 6645
                          softBounces: 34
                          hardBounces: 4
                          uniqueViews: 3442
                          unsubscriptions: 4
                          viewed: 4322
                          deferred: 0
                      - campaignId: 45
                        stats:
                          uniqueClicks: 654
                          clickers: 788
                          complaints: 1
                          delivered: 4078
                          sent: 4334
                          softBounces: 18
                          hardBounces: 2
                          uniqueViews: 987
                          unsubscriptions: 4
                          viewed: 1555
                          deferred: 0
                    dynamicList: false
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Contacts
      summary: Update a list
      operationId: Contacts_updateList
      parameters:
        - description: Id of the list
          name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateList'
        required: true
      responses:
        '204':
          description: List updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Contacts
      summary: Delete a list
      operationId: Contacts_deleteList
      parameters:
        - description: Id of the list
          name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: List deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/segments:
    get:
      tags:
        - Contacts
      summary: Get all the segments
      operationId: Contacts_getAllSegments
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Segments informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSegments'
              examples:
                response:
                  value:
                    segments:
                      - id: 53
                        segmentName: Segment1
                        categoryName: Name1
                        updatedAt: '2017-03-12T12:30:00.000Z'
                      - id: 50
                        segmentName: Segment2
                        categoryName: Name2
                        updatedAt: '2017-03-12T12:30:00.000Z'
                    count: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}/contacts:
    get:
      tags:
        - Contacts
      summary: Get contacts in a list
      operationId: Contacts_getListContacts
      parameters:
        - description: Id of the list
          name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - description: >
            Filter (urlencoded) the contacts modified after a given UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone
            in date-time format for accurate result.**
          name: modifiedSince
          in: query
          schema:
            type: string
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 500
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Contact informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts'
              examples:
                response:
                  value:
                    contacts:
                      - email: alex.pain@example.com
                        id: 45
                        emailBlacklisted: false
                        smsBlacklisted: true
                        createdAt: '2017-05-12T12:30:00.000Z'
                        modifiedAt: '2017-05-12T12:30:00.000Z'
                        listIds:
                          - 12
                          - 9
                          - 20
                        listUnsubscribed:
                          - 1
                          - 2
                        attributes:
                          LASTNAME: Pain
                          FIRSTNAME: Alex
                          DOB: '2010-12-31T00:00:00.000Z'
                          GENDER: Kid
                      - email: john.smith@example.com
                        id: 32
                        emailBlacklisted: true
                        smsBlacklisted: false
                        createdAt: '2017-05-12T12:30:00.000Z'
                        modifiedAt: '2017-05-12T12:30:00.000Z'
                        listIds:
                          - 12
                        listUnsubscribed:
                          - 1
                        attributes:
                          LASTNAME: Smith
                          FIRSTNAME: John
                          DOB: '1986-06-21T00:00:00.000Z'
                          GENDER: Men
                      - email: helen.rose@example.com
                        id: 65
                        emailBlacklisted: true
                        smsBlacklisted: false
                        createdAt: '2017-05-12T12:30:00.000Z'
                        modifiedAt: '2017-05-12T12:30:00.000Z'
                        listIds:
                          - 12
                          - 9
                          - 20
                        listUnsubscribed:
                          - 1
                        attributes:
                          LASTNAME: Rose
                          FIRSTNAME: Helen
                          DOB: '1988-11-02T00:00:00.000Z'
                          GENDER: Women
                          SMS: '3375599887766'
                    count: 17655
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}/contacts/add:
    post:
      tags:
        - Contacts
      summary: Add existing contacts to a list
      operationId: Contacts_addToList
      parameters:
        - description: Id of the list
          name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Emails addresses OR IDs of the contacts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactsAddToListRequest'
            examples:
              emailsArray:
                summary: Passing emails array
                value:
                  emails:
                    - jeff32@example.com
                    - jim56@example.com
              idsArray:
                summary: Passing ids array
                value:
                  ids:
                    - 1
                    - 2
        required: true
      responses:
        '201':
          description: >-
            All contacts have been added successfully to the list with details
            of failed ones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postContactInfo'
              examples:
                emailsArray:
                  summary: Response example when emails array is passed
                  value:
                    success:
                      - jeff32@example.com
                      - jim56@example.com
                    failure:
                      - david@example.com
                idsArray:
                  summary: Response example when ids array is paased
                  value:
                    success:
                      - 1
                      - 2
                    failure:
                      - 5
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}/contacts/remove:
    post:
      tags:
        - Contacts
      summary: Delete a contact from a list
      operationId: Contacts_removeContactFromList
      parameters:
        - description: Id of the list
          name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Emails adresses OR IDs of the contacts OR 'all' true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactsRemoveContactFromListRequest'
            examples:
              emailsArray:
                summary: Passing emails array
                value:
                  emails:
                    - jeff32@example.com
                    - jim56@example.com
              idsArray:
                summary: Passing ids array
                value:
                  ids:
                    - 1
                    - 2
              allTrue:
                summary: Passing 'all' true
                value:
                  all: true
        required: true
      responses:
        '201':
          description: >-
            All contacts have been removed successfully from the list with
            details of failed ones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postContactInfo'
              examples:
                emailsArray:
                  summary: Response example when emails array is passed
                  value:
                    success:
                      - jeff32@example.com
                      - jim56@example.com
                    failure:
                      - david@example.com
                idsArray:
                  summary: Response example when ids array is paased
                  value:
                    success:
                      - 1
                      - 2
                    failure:
                      - 5
                allTrue:
                  summary: Response example when 'all' is passed as true
                  value:
                    total: 23
                    processId: 5
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: contactEmails
  /contacts/export:
    post:
      tags:
        - Contacts
      summary: Export contacts
      operationId: Contacts_exportProcessId
      description: >-
        It returns the background process ID which on completion calls the
        notify URL that you have set in the input. File will be available in
        csv.
      requestBody:
        description: Values to request a contact export
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContactExport'
        required: true
      responses:
        '202':
          $ref: '#/components/responses/createdProcessId'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/import:
    post:
      tags:
        - Contacts
      summary: Import contacts
      operationId: Contacts_importContactsProcess
      description: >
        It returns the background process ID which on completion calls

        the notify URL that you have set in the input.


        **Note**:

        - Any contact attribute that doesn't exist in your account will be
        ignored at import end.
      requestBody:
        description: >-
          Values to import contacts in Brevo. To know more about the expected
          format, please have a look at
          ``https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContactImport'
        required: true
      responses:
        '202':
          $ref: '#/components/responses/createdProcessId'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns:
    get:
      tags:
        - SMS Campaigns
      summary: Returns the information for all your created SMS campaigns
      operationId: SmsCampaigns_getAllInformation
      parameters:
        - description: Status of campaign.
          name: status
          in: query
          schema:
            type: string
            enum:
              - suspended
              - archive
              - sent
              - queued
              - draft
              - inProcess
        - description: >
            **Mandatory if endDate is used.** Starting (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms
            campaigns. **Prefer to pass your timezone in date-time format for
            accurate result** ( only available if either 'status' not passed and
            if passed is set to 'sent' )
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms
            campaigns. **Prefer to pass your timezone in date-time format for
            accurate result** ( only available if either 'status' not passed and
            if passed is set to 'sent' )
          name: endDate
          in: query
          schema:
            type: string
        - description: Number limitation for the result returned
          name: limit
          in: query
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 500
        - description: Beginning point in the list to retrieve from.
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: SMS campaigns informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmsCampaigns'
              examples:
                response:
                  value:
                    campaigns:
                      - id: 2
                        name: PROMO CODE
                        status: sent
                        content: Visit our Store and get some discount !
                        scheduledAt: '2017-06-01T12:30:00.000Z'
                        testSent: true
                        sender: MyCompany
                        createdAt: '2017-06-01T12:30:00.000Z'
                        modifiedAt: '2017-05-01T12:30:00.000Z'
                        sentDate: '2017-06-01T12:30:00.000Z'
                        recipients:
                          lists:
                            - 21
                          exclusionLists:
                            - 13
                        statistics:
                          delivered: 2987
                          sent: 3000
                          processing: 0
                          softBounces: 3
                          hardBounces: 1
                          unsubscriptions: 3
                          answered: 2
                      - id: 10
                        name: SUMMER SALE
                        status: draft
                        content: >-
                          Summer Sale is starting tomorrow. Get extra 10% with
                          this code:SUM17
                        scheduledAt: '2017-08-04T12:30:00.000Z'
                        testSent: false
                        sender: MyCompany
                        createdAt: '2017-06-01T12:30:00.000Z'
                        modifiedAt: '2017-05-01T12:30:00.000Z'
                        sentDate: '2017-06-01T12:30:00.000Z'
                        recipients:
                          lists:
                            - 21
                          exclusionLists:
                            - 13
                        statistics:
                          delivered: 2987
                          sent: 3000
                          processing: 0
                          softBounces: 3
                          hardBounces: 1
                          unsubscriptions: 3
                          answered: 2
                    count: 12
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - SMS Campaigns
      summary: Creates an SMS campaign
      operationId: SmsCampaigns_createCampaign
      requestBody:
        description: Values to create an SMS Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSmsCampaign'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}:
    get:
      tags:
        - SMS Campaigns
      summary: Get an SMS campaign
      operationId: SmsCampaigns_getCampaignById
      parameters:
        - description: id of the SMS campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: SMS campaign informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmsCampaign'
              examples:
                response:
                  value:
                    id: 2
                    name: PROMO CODE
                    status: sent
                    content: Visit our Store and get some discount !
                    scheduledAt: '2017-06-01T12:30:00.000Z'
                    testSent: true
                    sender: MyCompany
                    createdAt: '2017-06-01T12:30:00.000Z'
                    modifiedAt: '2017-05-01T12:30:00.000Z'
                    recipients:
                      lists:
                        - 21
                      exclusionLists:
                        - 13
                    statistics:
                      delivered: 2987
                      sent: 3000
                      processing: 0
                      softBounces: 3
                      hardBounces: 1
                      unsubscriptions: 3
                      answered: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - SMS Campaigns
      summary: Update an SMS campaign
      operationId: SmsCampaigns_updateCampaignById
      parameters:
        - description: id of the SMS campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update an SMS Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSmsCampaign'
        required: true
      responses:
        '204':
          description: SMS campaign updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - SMS Campaigns
      summary: Delete an SMS campaign
      operationId: SmsCampaigns_removeCampaignById
      parameters:
        - description: id of the SMS campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: SMS campaign has been deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}/sendNow:
    post:
      tags:
        - SMS Campaigns
      summary: Send your SMS campaign immediately
      operationId: SmsCampaigns_sendImmediately
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: SMS campaign has been scheduled
          content: {}
        '400':
          description: SMS Campaign could not be sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '402':
          description: >-
            You don't have enough credit to send your campaign. Please update
            your plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}/status:
    put:
      tags:
        - SMS Campaigns
      summary: Update a campaign's status
      operationId: SmsCampaigns_updateStatus
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Status of the campaign.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCampaignStatus'
        required: true
      responses:
        '204':
          description: The campaign status has been updated successfully
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: status
  /smsCampaigns/{campaignId}/sendTest:
    post:
      tags:
        - SMS Campaigns
      summary: Send a test SMS campaign
      operationId: SmsCampaigns_sendTestSms
      parameters:
        - description: Id of the SMS campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: >
          Mobile number of the recipient with the country code. This number
          **must belong to one of your contacts in Brevo account and must not be
          blacklisted**
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestSms'
        required: true
      responses:
        '204':
          description: Test SMS has been sent successfully to the recipient
          content: {}
        '400':
          description: Test SMS could not be sent to the following email addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendSmsTestFailed'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
        - SMS Campaigns
      summary: Export an SMS campaign's recipients
      operationId: SmsCampaigns_exportRecipientsProcess
      description: >-
        It returns the background process ID which on completion calls the
        notify URL that you have set in the input.
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to send for a recipient export request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestSmsRecipientExport'
        required: false
      responses:
        '202':
          $ref: '#/components/responses/createdProcessId'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: recipientExport
  /smsCampaigns/{campaignId}/sendReport:
    post:
      tags:
        - SMS Campaigns
      summary: Send an SMS campaign's report
      operationId: SmsCampaigns_sendCampaignReport
      description: >-
        Send report of Sent and Archived campaign, to the specified email
        addresses, with respective data and a pdf attachment in detail.
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values for send a report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReport'
        required: true
      responses:
        '204':
          description: Report has been successfully sent to the defined recipients
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /transactionalSMS/sms:
    post:
      tags:
        - Transactional SMS
      summary: Send SMS message to a mobile number
      operationId: TransactionalSms_sendSmsMessageToMobile
      requestBody:
        description: Values to send a transactional SMS
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTransacSms'
        required: true
      responses:
        '201':
          description: SMS has been sent successfully to the recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendSms'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '402':
          description: >-
            You don't have enough credit to send your SMS. Please update your
            plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sendTransacSms
  /transactionalSMS/statistics/aggregatedReport:
    get:
      tags:
        - Transactional SMS
      summary: Get your SMS activity aggregated over a period of time
      operationId: TransactionalSms_getAggregatedReport
      parameters:
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
            report
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
            report
          name: endDate
          in: query
          schema:
            type: string
        - description: >
            Number of days in the past including today (positive integer). **Not
            compatible with startDate and endDate**
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: Filter on a tag
          name: tag
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Aggregated SMS report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacAggregatedSmsReport'
              examples:
                response:
                  value:
                    range: 2015-05-22|2017-11-29
                    requests: 54
                    delivered: 16
                    hardBounces: 5
                    softBounces: 26
                    blocked: 4
                    unsubscribed: 10
                    replied: 8
                    accepted: 6
                    rejected: 14
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /transactionalSMS/statistics/reports:
    get:
      tags:
        - Transactional SMS
      summary: Get your SMS activity aggregated per day
      operationId: TransactionalSms_getSmsActivityAggregatedPerDay
      parameters:
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
            report
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
            report
          name: endDate
          in: query
          schema:
            type: string
        - description: >
            Number of days in the past including today (positive integer). **Not
            compatible with 'startDate' and 'endDate'**
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: Filter on a tag
          name: tag
          in: query
          schema:
            type: string
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Aggregated SMS report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacSmsReport'
              examples:
                response:
                  value:
                    reports:
                      - date: '2017-04-30T00:00:00.000Z'
                        requests: 10756
                        delivered: 10103
                        hardBounces: 21
                        softBounces: 137
                        blocked: 1026
                        unsubscribed: 720
                        replied: 5091
                        accepted: 2318
                        rejected: 0
                      - date: '2017-05-01T00:00:00.000Z'
                        requests: 18812
                        delivered: 17499
                        hardBounces: 34
                        softBounces: 254
                        blocked: 1514
                        unsubscribed: 1090
                        replied: 10089
                        accepted: 4393
                        rejected: 0
                      - date: '2017-05-02T00:00:00.000Z'
                        requests: 14321
                        delivered: 13427
                        hardBounces: 16
                        softBounces: 176
                        blocked: 1646
                        unsubscribed: 1170
                        replied: 11563
                        accepted: 4689
                        rejected: 0
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /transactionalSMS/statistics/events:
    get:
      tags:
        - Transactional SMS
      summary: Get all your SMS activity (unaggregated events)
      operationId: TransactionalSms_getAllEvents
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: >
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the
            report
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the
            report
          name: endDate
          in: query
          schema:
            type: string
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >
            Number of days in the past including today (positive integer). **Not
            compatible with 'startDate' and 'endDate'**
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: Filter the report for a specific phone number
          name: phoneNumber
          in: query
          schema:
            type: string
        - description: Filter the report for specific events
          name: event
          in: query
          schema:
            type: string
            enum:
              - bounces
              - hardBounces
              - softBounces
              - delivered
              - sent
              - accepted
              - unsubscription
              - replies
              - blocked
              - rejected
        - description: >-
            Filter the report for specific tags passed as a serialized
            urlencoded array
          name: tags
          in: query
          schema:
            type: string
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Sms events report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmsEventReport'
              examples:
                response:
                  value:
                    events:
                      - phoneNumber: '00911059469013'
                        date: '2015-05-20T12:30:00.000Z'
                        messageId: '1473139351170140'
                        event: sent
                        reason: Recipient is currently unreachable
                        tag: cabWaiting
                      - phoneNumber: '00911059469013'
                        date: '2015-05-20T16:30:00.000Z'
                        messageId: '1473139351170140'
                        event: delivered
                        reason: Recipient is currently unreachable
                        tag: cabRequest
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/{campaignId}:
    get:
      tags:
        - WhatsApp Campaigns
      summary: Get a WhatsApp campaign
      operationId: WhatsAppCampaigns_getCampaignById
      parameters:
        - description: Id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get WhatsApp campaign information on the basis of campaignId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappCampaignOverview'
              examples:
                response:
                  value:
                    id: 1672035851100690
                    campaignName: Test WhatsApp Campaign
                    campaignStatus: sent
                    scheduledAt: '2022-12-26T09:50:00.000Z'
                    senderNumber: 9368207029
                    recipients:
                      type: list
                      includedLists:
                        - 22
                      excludedLists:
                        - 45
                    template:
                      components:
                        - type: BODY
                          text: making it look like readable English.
                        - type: BUTTONS
                          buttons:
                            - type: URL
                              text: vLorem Ipsum is simply du
                              url: app.brevo
                            - type: PHONE_NUMBER
                              text: Lorem Ipsum is simply dum
                              phone_number: '+918800613137'
                      name: official_campaign8
                      category: MARKETING
                      language: en
                      contains_button: true
                      display_header: false
                      header_variables:
                        - name: FIRSTNAME
                          default: INVALID HEADER
                          index: 1
                          datatype: text
                      header_type: text
                      body_variable: []
                      button_type: CALL_TO_ACTION
                      header_footer: true
                    stats:
                      sent: 3,
                      delivered: 3,
                      read: 2,
                      unsubscribe: 0,
                      notSent: 4
                    createdAt: '2022-12-26T06:50:00.000Z'
                    modifiedAt: '2022-12-26T08:50:00.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - WhatsApp Campaigns
      summary: Delete a WhatsApp campaign
      operationId: WhatsAppCampaigns_deleteCampaign
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: WhatsApp campaign has been deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Campaign Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - WhatsApp Campaigns
      summary: Update a WhatsApp campaign
      operationId: WhatsAppCampaigns_updateCampaignById
      parameters:
        - description: id of the campaign
          name: campaignId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a WhatsApp Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateWhatsAppCampaign'
        required: true
      responses:
        '204':
          description: WhatsApp campaign has been deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/template-list:
    get:
      tags:
        - WhatsApp Campaigns
      summary: Return all your created WhatsApp templates
      operationId: WhatsAppCampaigns_getTemplates
      parameters:
        - description: >
            **Mandatory if endDate is used**. Starting (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates
            created.

            **Prefer to pass your timezone in date-time format for accurate
            result**
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used**. Ending (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates
            created.

            **Prefer to pass your timezone in date-time format for accurate
            result**
          name: endDate
          in: query
          schema:
            type: string
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            modification. Default order is **descending** if `sort` is not
            passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: source of the template
          name: source
          in: query
          required: false
          schema:
            type: string
            enum:
              - Automation
              - Conversations
      responses:
        '200':
          description: WhatsApp templates informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappTemplates'
              examples:
                response:
                  value:
                    count: 2
                    templates:
                      - id: 235
                        name: campaign_22
                        type: whatsapp
                        status: approved
                        language: en
                        category: MARKETING
                        errorReason: NONE
                        createdAt: '2017-05-01T12:30:00.000Z'
                        modifiedAt: '2017-05-01T12:30:00.000Z'
                      - id: 124
                        name: test-template
                        type: whatsapp
                        status: draft
                        language: ''
                        category: MARKETING
                        errorReason: NONE
                        createdAt: 2017-0
                        modifiedAt: '2017-05-01T12:30:00.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns:
    post:
      tags:
        - WhatsApp Campaigns
      summary: Create and Send a WhatsApp campaign
      operationId: WhatsAppCampaigns_createAndSend
      requestBody:
        description: Values to create a WhatsApp Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWhatsAppCampaign'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    get:
      tags:
        - WhatsApp Campaigns
      summary: Return all your created WhatsApp campaigns
      operationId: WhatsAppCampaigns_getAll
      parameters:
        - description: >
            **Mandatory if endDate is used**. Starting (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the WhatsApp
            campaigns created.

            **Prefer to pass your timezone in date-time format for accurate
            result**
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used**. Ending (urlencoded) UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the WhatsApp
            campaigns created.

            **Prefer to pass your timezone in date-time format for accurate
            result**
          name: endDate
          in: query
          schema:
            type: string
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            modification. Default order is **descending** if `sort` is not
            passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: WhatsApp campaigns information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappCampaigns'
              examples:
                response:
                  value:
                    count: 23
                    campaigns:
                      - id: 1672035851100690
                        campaignName: campaign_22
                        campaignStatus: sent
                        templateId: 637660278078655
                        scheduledAt: '2022-12-27T09:50:00.000Z'
                        errorReason: ''
                        invalidatedContacts: 0
                        stats:
                          sent: 3
                          delivered: 3
                          read: 2
                          unsubscribe: 0
                          notSent: 4
                        readPercentage: 28.57
                        createdAt: '2017-05-01T12:30:00.000Z'
                        modifiedAt: '2017-05-01T12:30:00.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/template:
    post:
      tags:
        - WhatsApp Campaigns
      summary: Create a WhatsApp template
      operationId: WhatsAppCampaigns_createTemplate
      requestBody:
        description: Values to create a WhatsApp template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWhatsAppTemplate'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/template/approval/{templateId}:
    post:
      tags:
        - WhatsApp Campaigns
      summary: Send your WhatsApp template for approval
      operationId: WhatsAppCampaigns_sendTemplateForApproval
      parameters:
        - description: id of the template
          name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: WhatsApp template sent for approval
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/config:
    get:
      tags:
        - WhatsApp Campaigns
      summary: Get your WhatsApp API account information
      operationId: WhatsAppCampaigns_getAccountInfo
      responses:
        '200':
          description: Get all the information of your WhatsApp API account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsAppConfig'
              examples:
                response:
                  value:
                    whatsappBusinessAccountID: 105569359072383
                    sendingLimit: TIER_1K
                    phoneNumberQuality: GREEN
                    whatsappBusinessAccountStatus: APPROVED
                    businessStatus: verified
                    phoneNumberNameStatus: APPROVED
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders:
    get:
      tags:
        - Senders
      summary: Get the list of all your senders
      operationId: Senders_listAll
      parameters:
        - description: >
            Filter your senders for a specific ip. **Available for dedicated IP
            usage only**
          name: ip
          in: query
          schema:
            type: string
        - description: Filter your senders for a specific domain
          name: domain
          in: query
          schema:
            type: string
      responses:
        '200':
          description: list of senders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSendersList'
              examples:
                response:
                  value:
                    senders:
                      - id: 1
                        name: Marketing
                        email: marketing@mycompany.com
                        active: true
                        ips:
                          - ip: 123.98.689.7
                            domain: mycompany.com
                            weight: 100
                      - id: 2
                        name: Newsletter
                        email: newsletter@mycompany.com
                        active: false
                        ips:
                          - ip: 123.98.689.7
                            domain: mycompany.com
                            weight: 50
                          - ip: 123.98.643.2
                            domain: news.mycompany.com
                            weight: 50
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Senders
      summary: Create a new sender
      operationId: Senders_createNewSender
      requestBody:
        description: sender's name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSender'
        required: false
      responses:
        '201':
          description: sender created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSenderModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sender
  /senders/{senderId}:
    put:
      tags:
        - Senders
      summary: Update a sender
      operationId: Senders_updateSenderById
      parameters:
        - description: Id of the sender
          name: senderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: sender's name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSender'
        required: false
      responses:
        '204':
          description: sender updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sender
    delete:
      tags:
        - Senders
      summary: Delete a sender
      operationId: Senders_removeSender
      parameters:
        - description: Id of the sender
          name: senderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: sender deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders/{senderId}/validate:
    put:
      tags:
        - Senders
      summary: Validate Sender using OTP
      operationId: Senders_validateSenderUsingOtp
      parameters:
        - description: Id of the sender
          name: senderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: otp
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otp'
        required: false
      responses:
        '204':
          description: Sender verified
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sender
  /senders/{senderId}/ips:
    get:
      tags:
        - Senders
      summary: Get all the dedicated IPs for a sender
      operationId: Senders_getAllDedicatedIps
      parameters:
        - description: Id of the sender
          name: senderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of dedicated IPs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIpsFromSender'
              examples:
                response:
                  value:
                    ips:
                      - id: 3
                        ip: 123.65.8.22
                        domain: mailing.myshop.dom
                        weight: 40
                      - id: 5
                        ip: 123.43.21.3
                        domain: newsletter.myshop.dom
                        weight: 60
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders/ips:
    get:
      tags:
        - Senders
      summary: Get all the dedicated IPs for your account
      operationId: Senders_getDedicatedIps
      responses:
        '200':
          description: list of dedicated IPs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIps'
              examples:
                response:
                  value:
                    ips:
                      - id: 3
                        ip: 67.145.89.3
                        active: true
                        domain: mailing.myshop.com
                      - id: 5
                        ip: 76.76.125.9
                        active: true
                        domain: newsletter.myshop.com
                      - id: 6
                        ip: 123.65.8.22
                        active: false
                        domain: notifications.myshop.com
  /senders/domains:
    get:
      tags:
        - Domains
      summary: Get the list of all your domains
      operationId: Domains_getAll
      responses:
        '200':
          description: list of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDomainsList'
              examples:
                response:
                  value:
                    domains:
                      - id: 1
                        domain_name: mycompany.com
                        authenticated: true
                        verified: true
                        ip: 123.98.689.7
                      - id: 2
                        domain_name: myexample.com
                        authenticated: false
                        verified: true
                        ip: null
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Domains
      summary: Create a new domain
      operationId: Domains_createNewDomain
      requestBody:
        description: domain's name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDomain'
        required: false
      responses:
        '200':
          description: domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createDomainModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: domain
  /senders/domains/{domainName}:
    delete:
      tags:
        - Domains
      summary: Delete a domain
      operationId: Domains_deleteDomain
      parameters:
        - description: Domain name
          name: domainName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: domain deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    get:
      tags:
        - Domains
      summary: Validate domain configuration
      operationId: Domains_validateConfiguration
      parameters:
        - description: Domain name
          name: domainName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: domain configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDomainConfigurationModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders/domains/{domainName}/authenticate:
    put:
      tags:
        - Domains
      summary: Authenticate a domain
      operationId: Domains_authenticateDomain
      parameters:
        - description: Domain name
          name: domainName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: domain authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticateDomainModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: Get all webhooks
      operationId: Webhooks_getAll
      parameters:
        - description: Filter on webhook type
          name: type
          in: query
          schema:
            type: string
            default: transactional
            enum:
              - marketing
              - transactional
              - inbound
        - description: >-
            Sort the results in the ascending/descending order of webhook
            creation
          name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        '200':
          description: Webhooks informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWebhooks'
              examples:
                response:
                  value:
                    webhooks:
                      - description: Webhook triggered on campaign openings
                        url: >-
                          https://example.domain.com/webhook/events/kzfxxxxxxxx0uyo1
                        id: 9864
                        events:
                          - opened
                        type: transac
                        createdAt: '2016-07-18T12:30:09.000Z'
                        modifiedAt: '2016-07-18T16:00:50.000Z'
                        batched: true
                        auth:
                          type: bearer
                          token: test-auth-token1234
                        headers:
                          - key: cf-secret
                            value: test-header-value
                      - description: Webhook triggered on campaign hard bounces
                        url: http://exmaple.domain.com/15kxxxxxn1
                        id: 22770
                        events:
                          - hardBounces
                        type: marketing
                        createdAt: '2017-02-20T14:30:00.000Z'
                        modifiedAt: '2017-02-20T19:00:00.000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Webhooks
      summary: Create a webhook
      operationId: Webhooks_createHook
      requestBody:
        description: Values to create a webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWebhook'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/createModel'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /webhooks/{webhookId}:
    get:
      tags:
        - Webhooks
      summary: Get a webhook details
      operationId: Webhooks_getDetails
      parameters:
        - description: Id of the webhook
          name: webhookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Webhook informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWebhook'
              examples:
                response:
                  value:
                    description: >-
                      Webhook triggered on campaign openings and addition of
                      lists
                    url: http://example.domain.com/1brxxxxxx5p1
                    id: 7287
                    events:
                      - listAdditions
                      - opened
                    type: marketing
                    createdAt: '2016-06-07T09:10:10.000Z'
                    modifiedAt: '2016-06-08T11:30:00.000Z'
                    batched: true
                    auth:
                      type: bearer
                      token: test-auth-token1234
                    headers:
                      - key: cf-secret
                        value: test-header-value
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Webhook ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Webhooks
      summary: Update a webhook
      operationId: Webhooks_updateWebhookById
      parameters:
        - description: Id of the webhook
          name: webhookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateWebhook'
        required: true
      responses:
        '204':
          description: Webhook updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Webhook ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateWebhook
    delete:
      tags:
        - Webhooks
      summary: Delete a webhook
      operationId: Webhooks_deleteWebhook
      parameters:
        - description: Id of the webhook
          name: webhookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Webhook deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Webhook ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /webhooks/export:
    post:
      tags:
        - Webhooks
      summary: Export all webhook events
      operationId: Webhooks_exportAllEvents
      description: >-
        This endpoint will submit a request to get the history of webhooks in
        the CSV file. The link to download the CSV file will be sent to the
        webhook that was provided in the notifyURL.
      requestBody:
        description: Values to submit for webhooks history
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksExportAllEventsRequest'
        required: true
      responses:
        '202':
          description: Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProcessId'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children:
    get:
      tags:
        - Reseller
      summary: Get the list of all children accounts
      operationId: Reseller_listChildrenAccounts
      parameters:
        - description: Number of documents for child accounts information per page
          name: limit
          in: query
          schema:
            maximum: 20
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: list of children
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildrenList'
              examples:
                response:
                  value:
                    children:
                      - email: john.smith@example.com
                        firstName: John
                        lastName: Smith
                        companyName: MyCompany
                        credits:
                          emailCredits: 98555
                          smsCredits: 87556
                        statistics:
                          previousMonthTotalSent: 7654
                          currentMonthTotalSent: 4566
                          totalSent: 987554
                        password: abC0xxxxxx3jkL
                        ips:
                          - 176.2.39.4
                          - 231.43.21.7
                        apiKeys:
                          v2:
                            - name: N˚2
                              key: nOpxxxxxy7z
                          v3:
                            - name: N˚3
                              key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
                        id: 187588
                      - email: alex.pain@example.com
                        firstName: Alex
                        lastName: Pain
                        companyName: MyStore
                        credits:
                          emailCredits: 2000
                          smsCredits: 0
                        statistics:
                          previousMonthTotalSent: 654
                          currentMonthTotalSent: 300
                          totalSent: 6553
                        password: abC0xxxxx64kL
                        ips:
                          - 176.2.39.4
                          - 231.43.21.7
                        apiKeys:
                          v2:
                            - name: N˚2
                              key: nOpxxxxxy7z
                          v3:
                            - name: N˚3
                              key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
                        id: 187669
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Reseller
      summary: Creates a reseller child
      operationId: Reseller_createChild
      requestBody:
        description: reseller child to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChild'
        required: false
      responses:
        '201':
          description: child created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createReseller'
              examples:
                response:
                  value:
                    authKey: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
                    id: 1234567
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}:
    get:
      tags:
        - Reseller
      summary: Get a child account's details
      operationId: Reseller_getChildDetails
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information for the child
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildInfo'
              examples:
                response:
                  value:
                    email: john.smith@example.com
                    firstName: John
                    lastName: Smith
                    companyName: MyCompany
                    credits:
                      emailCredits: 98555
                      smsCredits: 87556
                    statistics:
                      previousMonthTotalSent: 7654
                      currentMonthTotalSent: 4566
                      totalSent: 987554
                    password: abC0xxxxx3jkL
                    ips:
                      - 176.2.39.4
                      - 231.43.21.7
                    apiKeys:
                      v2:
                        - name: N˚2
                          key: nOpxxxxxy7z
                      v3:
                        - name: N˚3
                          key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Reseller
      summary: Update info of reseller's child based on the child identifier supplied
      operationId: Reseller_updateChildInfo
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: values to update in child profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateChild'
        required: true
      responses:
        '204':
          description: reseller's child updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: resellerChild
    delete:
      tags:
        - Reseller
      summary: Delete a single reseller child based on the child identifier supplied
      operationId: Reseller_deleteChildByIdentifier
      parameters:
        - description: Either auth key or child id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: child deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/accountStatus:
    put:
      tags:
        - Reseller
      summary: >-
        Update info of reseller's child account status based on the identifier
        supplied
      operationId: Reseller_updateChildAccountStatus
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: values to update in child account status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateChildAccountStatus'
        required: true
      responses:
        '204':
          description: reseller's child account status updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/accountCreationStatus:
    get:
      tags:
        - Reseller
      summary: >-
        Get the status of a reseller's child account creation, whether it is
        successfully created (exists) or not based on the childIdentifier
        supplied
      operationId: Reseller_getChildAccountCreationStatus
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: status of reseller's child account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildAccountCreationStatus'
              examples:
                response:
                  value:
                    childAccountCreated: true
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/ips/associate:
    post:
      tags:
        - Reseller
      summary: Associate a dedicated IP to the child
      operationId: Reseller_associateDedicatedIpToChild
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: IP to associate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/manageIp'
        required: true
      responses:
        '204':
          description: Dedicated IP is associated to the child
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: ip
  /reseller/children/{childIdentifier}/ips/dissociate:
    post:
      tags:
        - Reseller
      summary: Dissociate a dedicated IP to the child
      operationId: Reseller_dissociateIpToChild
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: IP to dissociate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/manageIp'
        required: true
      responses:
        '204':
          description: Dedicated IP is dissociated from the child
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: ip
  /reseller/children/{childIdentifier}/credits/add:
    post:
      tags:
        - Reseller
      summary: Add Email and/or SMS credits to a specific child account
      operationId: Reseller_addChildCredits
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Values to post to add credit to a specific child account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addCredits'
        required: true
      responses:
        '200':
          description: Credits added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remainingCreditModel'
              examples:
                response:
                  value:
                    child:
                      sms: 500
                      email: 2000
                    reseller:
                      sms: 12900
                      email: 2000000
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/credits/remove:
    post:
      tags:
        - Reseller
      summary: Remove Email and/or SMS credits from a specific child account
      operationId: Reseller_removeCreditsFromChild
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Values to post to remove email or SMS credits from a specific child
          account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeCredits'
        required: true
      responses:
        '200':
          description: Credits removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remainingCreditModel'
              examples:
                response:
                  value:
                    child:
                      sms: 500
                      email: 2000
                    reseller:
                      sms: 12900
                      email: 2000000
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: removeCredits
  /reseller/children/{childIdentifier}/domains:
    get:
      tags:
        - Reseller
      summary: Get all sender domains for a specific child account
      operationId: Reseller_getChildDomains
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sender domains of the child
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildDomains'
              examples:
                response:
                  value:
                    - domain: mycustomdomain.com
                      active: true
                    - domain: mynewdomain.com
                      active: true
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Reseller
      summary: Create a domain for a child account
      operationId: Reseller_createChildDomain
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Sender domain to add for a specific child account. This will not be
          displayed to the parent account.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addChildDomain'
        required: true
      responses:
        '201':
          description: Domain added
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/domains/{domainName}:
    put:
      tags:
        - Reseller
      summary: >-
        Update the sender domain of reseller's child based on the
        childIdentifier and domainName passed
      operationId: Reseller_updateSenderDomain
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
        - description: Pass the existing domain that needs to be updated
          name: domainName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: value to update for sender domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateChildDomain'
        required: true
      responses:
        '204':
          description: reseller's child domain updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Reseller
      summary: >-
        Delete the sender domain of the reseller child based on the
        childIdentifier and domainName passed
      operationId: Reseller_deleteSenderDomainByChildIdentifierAndDomainName
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
        - description: Pass the existing domain that needs to be deleted
          name: domainName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: child domain deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/auth:
    get:
      tags:
        - Reseller
      summary: Get session token to access Brevo (SSO)
      operationId: Reseller_getSessionToken
      description: >-
        It returns a session [token] which will remain valid for a short period
        of time. A child account will be able to access a white-labeled section
        by using the following url pattern =>
        https:/email.mydomain.com/login/sso?token=[token]
      parameters:
        - description: Either auth key or id of reseller's child
          name: childIdentifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSsoToken'
              examples:
                response:
                  value:
                    token: 5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /account:
    get:
      tags:
        - Account
      summary: Get your account information, plan and credits details
      operationId: Account_informationDetails
      responses:
        '200':
          description: account informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
              examples:
                response:
                  value:
                    plan:
                      - type: payAsYouGo
                        credits: 5000
                        creditsType: sendLimit
                      - type: subscription
                        credits: 39983
                        creditsType: sendLimit
                        startDate: '2017-03-11T00:00:00.000Z'
                        endDate: '2017-04-11T00:00:00.000Z'
                      - type: sms
                        credits: 999.5360000000001
                        creditsType: sendLimit
                    relay:
                      enabled: true
                      data:
                        userName: john.smith@example.com
                        relay: smtp-relay.domain.com
                        port: 587
                    marketingAutomation:
                      key: kzfr5xxxxxxttuyo1
                      enabled: true
                    email: john.smith@example.com
                    firstName: John
                    lastName: Smith
                    companyName: MyShop
                    address:
                      city: New-York
                      street: 1677B 8th Avenue
                      zipCode: '7665'
                      country: USA
  /organization/activities:
    get:
      tags:
        - Account
        - Master account
      summary: Get user activity logs
      operationId: Account_getUserActivityLogs
      parameters:
        - description: >-
            Mandatory if endDate is used. Enter start date in UTC date
            (YYYY-MM-DD) format to filter the activity in your account. Maximum
            time period that can be selected is one month. Additionally, you can
            retrieve activity logs from the past 12 months from the date of your
            search.
          name: startDate
          in: query
          required: false
          schema:
            type: string
        - description: >-
            Mandatory if startDate is used. Enter end date in UTC date
            (YYYY-MM-DD) format to filter the activity in your account. Maximum
            time period that can be selected is one month.
          name: endDate
          in: query
          required: false
          schema:
            type: string
        - description: Number of documents per page
          name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 10
            maximum: 100
            minimum: 1
        - description: Index of the first document in the page.
          name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: list of user activity logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountActivity'
              examples:
                response:
                  value:
                    logs:
                      - action: login-success
                        date: '2023-03-16T11:19:23.000Z'
                        user_email: test@mycompany.com
                        user_ip: 192.158.1.34
                        user_agent: >-
                          Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X;
                          en-us)
                      - action: update-profile
                        date: '2023-03-15T11:19:23.000Z'
                        user_email: test@myexample.com
                        user_ip: 192.158.1.38
                        user_agent: >-
                          Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X;
                          en-us)
                        count: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/invited/users:
    get:
      tags:
        - User
      summary: Get the list of all your users
      operationId: User_getAllUsers
      responses:
        '200':
          description: list of all your users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvitedUsersList'
              examples:
                response:
                  value:
                    users:
                      - email: owner@company.com
                        is_owner: true
                        status: active
                        feature_access:
                          marketing: owner
                          conversations: owner
                          crm: owner
                      - email: pendingInvitedUser@company.com
                        is_owner: false
                        status: pending
                        feature_access:
                          marketing: custom
                          conversations: none
                          crm: full
                      - email: connectedInvitedUser@company.com
                        is_owner: false
                        status: active
                        feature_access:
                          marketing: none
                          conversations: full
                          crm: none
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/{email}/permissions:
    get:
      tags:
        - User
      summary: Check user permission
      operationId: User_checkPermission
      parameters:
        - description: Email of the invited user.
          name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list of all the user's permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserPermission'
              examples:
                response:
                  value:
                    email: invitedUser@company.com
                    status: active
                    privileges:
                      - feature: Email campaign
                        permissions:
                          - Create / edit / delete
                          - Send / schedule / suspend
                      - feature: Templates
                        permissions:
                          - Create / edit / delete
                          - Activate / deactivate
                      - feature: SMS campaign
                        permissions:
                          - Create / edit / delete
                          - Send / schedule / suspend
                      - feature: Facebook Ads
                        permissions:
                          - Schedule / pause
                      - feature: Landing pages
                        permissions:
                          - All
                      - feature: Workflows
                        permissions:
                          - Create / edit / delete
                          - Activate / deactivate / Pause
                      - feature: Contacts
                        permissions:
                          - View
                          - Contact forms
                      - feature: SMTP & API
                        permissions:
                          - SMTP
                          - API Keys
                          - Authorized IPs
                      - feature: User management
                        permissions:
                          - None
                      - feature: Sales Platform
                        permissions:
                          - Manage Owned Deals / Tasks / Companies
                          - Manage Others Deals / Tasks / Companies
                          - Reports
                          - Settings
                      - feature: Conversations
                        permissions:
                          - None
                      - feature: Senders, Domains & Dedicated IPs
                        permissions:
                          - Senders management
                          - Domains management
                          - Dedicated IPs management
                      - feature: Push
                        permissions:
                          - View
                          - Create / edit / delete
                          - Send
                          - Settings
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/invitation/revoke/{email}:
    put:
      tags:
        - User
      summary: Revoke user permission
      operationId: User_revokePermissionByEmail
      parameters:
        - description: Email of the invited user.
          name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credit note exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putRevokeUserPermissionResponse'
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/invitation/{action}/{email}:
    put:
      tags:
        - User
      summary: Resend / Cancel invitation
      operationId: User_resendInvitation
      parameters:
        - description: action
          name: action
          in: path
          required: true
          schema:
            type: string
            enum:
              - resend
              - cancel
        - description: Email of the invited user.
          name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putresendcancelinvitationResponse'
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/invitation/send:
    post:
      tags:
        - User
      summary: Send invitation to user
      operationId: User_sendInvitation
      description: >
        `Feature` - A Feature represents a specific functionality like Email
        campaign, Deals, Calls, Automations, etc. on Brevo. While inviting a
        user, determine which feature you want to manage access to. You must
        specify the feature accurately to avoid errors.


        `Permission` - A Permission defines the level of access or control a
        user has over a specific feature. While inviting user, decide on the
        permission level required for the selected feature. Make sure the chosen
        permission is related to the selected feature.


        Features and their respective permissions are as below:


        - `email_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `sms_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `contacts`:
          - "view"
          - "create_edit_delete"
          - "import"
          - "export"
          - "list_and_attributes"
          - "forms"
        - `templates`:
          - "create_edit_delete"
          - "activate_deactivate"
        - `workflows`:
          - "create_edit_delete"
          - "activate_deactivate_pause"
          - "settings"
        - `facebook_ads`:
          - "create_edit_delete"
          - "schedule_pause"
        - `landing_pages`:
          - "all"
        - `transactional_emails`:
          - "settings"
          - "logs"
        - `smtp_api`:
          - "smtp"
          - "api_keys"
          - "authorized_ips"
        - `user_management`:
          - "all"
        - `sales_platform`:
          - "manage_owned_deals_tasks_companies"
          - "manage_others_deals_tasks_companies"
          - "reports"
          - "settings"
        - `phone`:
          - "all"
        - `conversations`:
          - "access"
          - "assign"
          - "configure"
        - `senders_domains_dedicated_ips`:
          - "senders_management"
          - "domains_management"
          - "dedicated_ips_management"
        - `push_notifications`:
          - "view"
          - "create_edit_delete"
          - "send"
          - "settings"

        **Note**:

        - If `all_features_access: false` then only privileges are required
        otherwise if `true` then it's assumed that all permissions will be there
        for the invited user.

        - The availability of feature and its permission depends on your current
        plan. Please select the features and permissions accordingly.
      requestBody:
        description: Values to create an invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteuser'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inviteuserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/update/permissions:
    post:
      tags:
        - User
      summary: Update permission for a user
      operationId: User_updatePermissions
      description: >
        `Feature` - A Feature represents a specific functionality like Email
        campaign, Deals, Calls, Automations, etc. on Brevo. While inviting a
        user, determine which feature you want to manage access to. You must
        specify the feature accurately to avoid errors.


        `Permission` - A Permission defines the level of access or control a
        user has over a specific feature. While inviting user, decide on the
        permission level required for the selected feature. Make sure the chosen
        permission is related to the selected feature.


        Features and their respective permissions are as below:


        - `email_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `sms_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `contacts`:
          - "view"
          - "create_edit_delete"
          - "import"
          - "export"
          - "list_and_attributes"
          - "forms"
        - `templates`:
          - "create_edit_delete"
          - "activate_deactivate"
        - `workflows`:
          - "create_edit_delete"
          - "activate_deactivate_pause"
          - "settings"
        - `facebook_ads`:
          - "create_edit_delete"
          - "schedule_pause"
        - `landing_pages`:
          - "all"
        - `transactional_emails`:
          - "settings"
          - "logs"
        - `smtp_api`:
          - "smtp"
          - "api_keys"
          - "authorized_ips"
        - `user_management`:
          - "all"
        - `sales_platform`:
          - "manage_owned_deals_tasks_companies"
          - "manage_others_deals_tasks_companies"
          - "reports"
          - "settings"
        - `phone`:
          - "all"
        - `conversations`:
          - "access"
          - "assign"
          - "configure"
        - `senders_domains_dedicated_ips`:
          - "senders_management"
          - "domains_management"
          - "dedicated_ips_management"
        - `push_notifications`:
          - "view"
          - "create_edit_delete"
          - "send"
          - "settings"

        **Note**:

        - The privileges array remains the same as in the send invitation; the
        user simply needs to provide the permissions that need to be updated.

        - The availability of feature and its permission depends on your current
        plan. Please select the features and permissions accordingly.
      requestBody:
        description: Values to create an invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteuser'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /processes:
    get:
      tags:
        - Process
      summary: Return all the processes for your account
      operationId: Process_getAllProcesses
      parameters:
        - description: Number limitation for the result returned
          name: limit
          in: query
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - description: Beginning point in the list to retrieve from.
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: processes informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProcesses'
              examples:
                response:
                  value:
                    processes:
                      - id: 40
                        status: completed
                        name: TRANS-CALC
                      - id: 43
                        status: queued
                        name: TRANS-GLOBAL-CALC
                      - id: 194
                        status: completed
                        name: SEARCH_EXPORT_USERS
                        export_url: >-
                          <a href="https://export-url.com/upload/file-name.csv"
                          target="_blank">filename.csv</a>
                    count: 3
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /processes/{processId}:
    get:
      tags:
        - Process
      summary: Return the informations for a process
      operationId: Process_getProcessInformation
      parameters:
        - description: Id of the process
          name: processId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: process informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProcess'
              examples:
                response:
                  value:
                    id: 194
                    status: completed
                    name: SEARCH_EXPORT_USERS
                    export_url: >-
                      <a href="https://export-url.com/upload/file-name.csv"
                      target="_blank">filename.csv</a>
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Process ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: processId is invalid
  /inbound/events:
    get:
      tags:
        - Inbound Parsing
      summary: Get the list of all the events for the received emails.
      operationId: InboundParsing_getAllEvents
      description: >-
        This endpoint will show the list of all the events for the received
        emails.
      parameters:
        - description: Email address of the sender.
          name: sender
          in: query
          required: false
          schema:
            type: string
        - description: >-
            Mandatory if endDate is used. Starting date (YYYY-MM-DD or
            YYYY-MM-DDTHH:mm:ss.SSSZ) from which you want to fetch the list.
            Maximum time period that can be selected is one month.
          name: startDate
          in: query
          required: false
          schema:
            type: string
            format: datetime
        - description: >-
            Mandatory if startDate is used. Ending date (YYYY-MM-DD or
            YYYY-MM-DDTHH:mm:ss.SSSZ) till which you want to fetch the list.
            Maximum time period that can be selected is one month.
          name: endDate
          in: query
          required: false
          schema:
            type: string
            format: datetime
        - description: Number of documents returned per page
          name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 100
            maximum: 500
            minimum: 0
        - description: Index of the first document on the page
          name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation
          name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        '200':
          description: List of events for received emails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInboundEmailEvents'
              examples:
                response:
                  value:
                    events:
                      - uuid: 1a825d56-029b-4a41-b8e4-1a825d56
                        date: '2017-03-11T12:30:00.000Z'
                        sender: john@example.com
                        recipient: alexa@example.com
                      - uuid: 1a825d56-029b-4a41-b8e4-61670463431b
                        date: '2017-03-12T12:30:00.000Z'
                        sender: alice@example.com
                        recipient: bob@example.com
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /inbound/events/{uuid}:
    get:
      tags:
        - Inbound Parsing
      summary: Fetch all events history for one particular received email.
      operationId: InboundParsing_getEmailEvents
      description: >-
        This endpoint will show the list of all events history for one
        particular received email.
      parameters:
        - description: UUID to fetch events specific to recieved email
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email campaign informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInboundEmailEventsByUuid'
              examples:
                response:
                  value:
                    receivedAt: '2017-03-12T12:30:00.000Z'
                    deliveredAt: '2017-03-12T12:31:00.000Z'
                    sender: alice@example.com
                    recipient: bob@example.com
                    messageId: <a_nice@message.id>
                    subject: 'Re: Question about your API'
                    attachments:
                      - name: invoice.pdf
                        contentType: application/pdf
                        contentId: null
                        contentLength: 12345
                    logs:
                      - date: '2017-03-12T12:30:00.000Z'
                        type: received
                      - date: '2017-03-12T12:30:04.000Z'
                        type: webhookFailed
                      - date: '2017-03-12T12:31:04.000Z'
                        type: webhookDelivered
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /inbound/attachments/{downloadToken}:
    get:
      tags:
        - Inbound Parsing
      summary: Retrieve inbound attachment with download token.
      operationId: InboundParsing_getAttachmentByToken
      description: This endpoint will retrieve inbound attachment with download token.
      parameters:
        - description: Token to fetch a particular attachment
          name: downloadToken
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Attachment information
          content:
            application/octet-stream:
              schema:
                $ref: >-
                  #/components/schemas/InboundParsingGetAttachmentByTokenResponse
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="download.png"
            Content-Length:
              schema:
                type: integer
                example: 4032
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /corporate/subAccount:
    get:
      tags:
        - Master account
      summary: Get the list of all the sub-accounts of the master account.
      operationId: MasterAccount_listSubAccounts
      description: >-
        This endpoint will provide the list all the sub-accounts of the master
        account.
      parameters:
        - description: Index of the first sub-account in the page
          name: offset
          in: query
          required: true
          schema:
            type: integer
        - description: Number of sub-accounts to be displayed on each page
          name: limit
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sub-accounts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subAccountsResponse'
              examples:
                response:
                  value:
                    count: 3
                    subAccounts:
                      - id: 4043629
                        companyName: Company1
                        active: true,
                        createdAt: 1631523176
                      - id: 3984002
                        companyName: Company2
                        active: true
                        createdAt: 1629439311
                      - id: 3524191
                        companyName: Company3
                        active: true
                        createdAt: 1614713641
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Master account
      summary: Create a new sub-account under a master account.
      operationId: MasterAccount_createSubAccount
      description: This endpoint will create a new sub-account under a master account
      requestBody:
        description: Request body with sub-account organization name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSubAccount'
        required: true
      responses:
        '201':
          description: Created sub-account ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSubAccountResponse'
              examples:
                response:
                  value:
                    id: 4109344
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: missing_parameter
                message: Missing companyName attribute in the request
  /corporate/subAccount/{id}:
    get:
      tags:
        - Master account
      summary: Get sub-account details
      operationId: MasterAccount_getSubAccountDetails
      description: >-
        This endpoint will provide the details for the specified sub-account
        company
      parameters:
        - description: Id of the sub-account organization
          name: id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        '200':
          description: Sub-account organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subAccountDetailsResponse'
              example:
                name: Uday Pandit
                email: uday+1@brevo.com
                companyName: API-Sub-26thOct21-4
                planInfo:
                  credits:
                    sms: 1234
                    emails:
                      quantity: 2000
                      remaining: 1955
                    features:
                      inbox:
                        quantity: 20
                        remaining: 12
                      landingPage:
                        quantity: 25
                        remaining: 14
                      users:
                        quantity: 30
                        remaining: 14
                    planType: paid
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Master account
      summary: Delete a sub-account
      operationId: MasterAccount_deleteSubAccount
      parameters:
        - description: Id of the sub-account organization to be deleted
          name: id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        '204':
          description: Returned when sub-account is deleted succesfully
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: missing_parameter
                message: Sub-account 2039dfsddf885 is not valid
        '404':
          description: sub-account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: document_not_found
                message: Sub-account 2039885 was not found
  /corporate/subAccount/{id}/plan:
    put:
      tags:
        - Master account
      summary: Update sub-account plan
      operationId: MasterAccount_updateSubAccountPlan
      description: This endpoint will update the sub-account plan
      parameters:
        - description: Id of the sub-account organization
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a sub-account plan
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subAccountUpdatePlanRequest'
        required: true
      responses:
        '204':
          description: Sub account plan updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a master account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: permission_denied
                    message: Access forbidden.
  /corporate/ssoToken:
    post:
      tags:
        - Master account
      summary: Generate SSO token to access admin account
      operationId: MasterAccount_generateSsoToken
      description: >-
        This endpoint generates an SSO token to authenticate and access the
        admin account using the endpoint
        https://account-app.brevo.com/account/login/corporate/sso/[token], where
        [token] will be replaced by the actual token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterAccountGenerateSsoTokenRequest'
      responses:
        '200':
          description: Session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSsoToken'
              examples:
                response:
                  value:
                    token: 5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid email address
        '403':
          description: Current account is not an admin account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: permission_denied
                    message: Access forbidden.
  /corporate/subAccount/ssoToken:
    post:
      tags:
        - Master account
      summary: Generate SSO token to access sub-account
      operationId: MasterAccount_generateSsoToken
      description: >-
        This endpoint generates an sso token to authenticate and access a
        sub-account of the master using the account endpoint
        https://account-app.brevo.com/account/login/sub-account/sso/[token],
        where [token] will be replaced by the actual token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterAccountGenerateSsoTokenRequest1'
      responses:
        '200':
          description: Session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSsoToken'
              examples:
                response:
                  value:
                    token: 5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid sub-account id.
        '403':
          description: Current account is not a master account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: permission_denied
                    message: Access forbidden.
  /corporate/masterAccount:
    get:
      tags:
        - Master account
      summary: Get the details of requested master account
      operationId: MasterAccount_getDetails
      description: This endpoint will provide the details of the master account.
      responses:
        '200':
          description: Master account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/masterDetailsResponse'
              example:
                email: sample@example.com
                companyName: Corp Sample 1-1
                id: 1003286
                currencyCode: INR
                timezone: Europe/Paris
                billingInfo:
                  email: sample@example.com
                  companyName: Corp Sample 1-1
                  name:
                    givenName: Uday
                    familyName: Pandit
                  address:
                    streetAddress: C-92
                    locality: Pandav Nagar, New Delhi
                    postalCode: '560048'
                    stateCode: UP
                    countryCode: IN
                planInfo:
                  currencyCode: INR
                  nextBillingAt: 1637739295
                  price: 2100
                  planPeriod: month
                  subAccounts: 15
                  features:
                    - name: MULTI_USER
                      unitValue: 1
                      quantity: 10
                      used: 15
                      remaining: 0
                    - name: ADVANCED_REPORTING
                      unitValue: 1
                      quantity: 12
                      used: 1
                      remaining: 11
                    - name: INBOX
                      unitValue: 1
                      quantity: 10
                      used: 10
                      remaining: 0
                    - name: LANDING_PAGE
                      unitValue: 5
                      quantity: 10
                      used: 11
                      remaining: 0
                    - name: RECURRING_CREDITS
                      unitValue: 1
                      quantity: 500
                      used: 1
                      remaining: 499
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /corporate/subAccount/key:
    post:
      tags:
        - Master account
      summary: Create an API key for a sub-account
      operationId: MasterAccount_createSubAccountKey
      description: This endpoint will generate an API v3 key for a sub account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterAccountCreateSubAccountKeyRequest'
      responses:
        '201':
          description: API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createApiKeyResponse'
              examples:
                response:
                  value:
                    status: success
                    key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: id should be a positive number
  /corporate/subAccount/{id}/applications/toggle:
    put:
      tags:
        - Master account
      summary: Enable/disable sub-account application(s)
      operationId: MasterAccount_enableDisable
      description: >-
        API endpoints for the Corporate owner to enable/disable applications on
        the sub-account
      parameters:
        - description: Id of the sub-account organization (mandatory)
          name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of applications to activate or deactivate on a sub-account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subAccountAppsToggleRequest'
        required: true
      responses:
        '204':
          description: Sub-account application(s) enabled/disabled
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: Current account is not a master account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: permission_denied
                    message: Access forbidden.
  /corporate/group:
    post:
      tags:
        - Master account
      summary: Create a group of sub-accounts
      operationId: MasterAccount_createGroupOfSubAccounts
      description: This endpoint allows to create a group of sub-accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/MasterAccountCreateGroupOfSubAccountsRequest
      responses:
        '201':
          description: Group ID
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/MasterAccountCreateGroupOfSubAccountsResponse
              examples:
                response:
                  value:
                    id: 659xxxxxxxxxxxxxxxx6ef9c8
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
  /corporate/group/{id}:
    get:
      tags:
        - Master account
      summary: GET a group details
      operationId: MasterAccount_getGroupDetails
      description: >-
        This endpoint allows you to retrieve a specific group’s information such
        as the list of sub-organizations and the user associated with the group.
      parameters:
        - description: Id of the group of sub-organization
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/corporateGroupDetailsResponse'
              example:
                group:
                  id: 5f926dba72a405440a4efc97
                  groupName: My group
                  createdAt: '2024-02-09T06:14:40+00:00'
                sub-accounts:
                  - id: 7866556
                    companyName: My sub organization
                    createdAt: '2024-02-09T06:14:40+00:00'
                  - id: 6563051
                    companyName: Your sub organization
                    createdAt: '2024-01-05T03:11:40+00:00'
                users:
                  - email: my-user@my-org.com
                    lastName: Smith
                    firstName: John
                  - email: your-user@your-org.com
    put:
      tags:
        - Master account
      summary: Update a group of sub-accounts
      operationId: MasterAccount_updateGroupSubAccounts
      description: This endpoint allows to update a group of sub-accounts
      parameters:
        - description: Id of the group
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Group details to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MasterAccountUpdateGroupSubAccountsRequest'
        required: true
      responses:
        '204':
          description: Group details updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
    delete:
      tags:
        - Master account
      summary: Delete a group
      operationId: MasterAccount_deleteGroup
      description: >-
        This endpoint allows you to delete a group of sub-organizations. When a
        group is deleted, the sub-organizations are no longer part of this
        group. The users associated with the group are no longer associated with
        the group once deleted.
      parameters:
        - description: Id of the group
          name: id
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: Group deleted
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
  /corporate/group/unlink/{groupId}/subAccounts:
    put:
      tags:
        - Master account
      summary: Delete sub-account from group
      operationId: MasterAccount_unlinkSubAccountFromGroup
      description: This endpoint allows you to remove a sub-organization from a group.
      parameters:
        - description: Group id
          name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: List of sub-account ids
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/MasterAccountUnlinkSubAccountFromGroupRequest
      responses:
        '204':
          description: SubAccounts removed from the group
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: subAccountIds should be array of numeric ids only
  /corporate/user/invitation/send:
    post:
      tags:
        - Master account
      summary: Send invitation to an admin user
      operationId: MasterAccount_sendInvitationToAdminUser
      description: >
        `This endpoint allows you to invite a member to manage the Admin account


        Features and their respective permissions are as below:


        - `my_plan`:
          - "all"
        - `api`:
          - "none"
        - `user_management`:
          - "all"
        - `app_management` | Not available in ENTv2:
          - "all"

        **Note**:

        - If `all_features_access: false` then only privileges are required
        otherwise if `true` then it's assumed that all permissions will be there
        for the invited admin user.
      requestBody:
        description: Payload to send an invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteAdminUser'
      responses:
        '201':
          description: Invitation ID
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/MasterAccountSendInvitationToAdminUserResponse
              examples:
                response:
                  value:
                    id: 659xxxxxxxxxxxxxxxx6ef9c8X
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /corporate/user/invitation/{action}/{email}:
    put:
      tags:
        - Master account
      summary: Resend / cancel admin user invitation
      operationId: MasterAccount_resendCancelAdminUserInvitation
      description: |
        This endpoint will allow the user to: 
        - Resend an admin user invitation
        - Cancel an admin user invitation
      parameters:
        - description: Action to be performed (cancel / resend)
          name: action
          in: path
          required: true
          schema:
            type: string
            enum:
              - resend
              - cancel
        - description: Email address of the recipient
          name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response of the action performed
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/MasterAccountResendCancelAdminUserInvitationResponse
              example:
                message: Invitation resent successfully
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invitation not found
  /corporate/user/revoke/{email}:
    delete:
      tags:
        - Master account
      summary: Revoke an admin user
      operationId: MasterAccount_revokeAdminUser
      description: >-
        This endpoint allows to revoke/remove an invited member of your Admin
        account
      parameters:
        - description: Email of the invited user
          name: email
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: User revoked
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
  /corporate/invited/users:
    get:
      tags:
        - Master account
      summary: Get the list of all admin users
      operationId: MasterAccount_listAdminUsers
      description: This endpoint allows you to list all Admin users of your Admin account
      responses:
        '200':
          description: list of all admin users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCorporateInvitedUsersList'
              examples:
                response:
                  value:
                    users:
                      - groups:
                          - id: 65b1f22c09d6ed67ef1cd123,
                            name: Test Group1
                          - id: 43b1f16c09db4d67af1cd342,
                            name: Test Group2
                        email: master-user2@company.com
                        is_owner: false
                        status: active
                        feature_access:
                          user_management:
                            - none
                          api_keys:
                            - all
                          my_plan:
                            - all
                          apps_management:
                            - none
                      - groups: []
                        email: master-user3@company.com
                        is_owner: false
                        status: active
                        feature_access:
                          user_management:
                            - all
                          api_keys:
                            - none
                          my_plan:
                            - none
                          apps_management:
                            - all
  /corporate/user/{email}/permissions:
    get:
      tags:
        - Master account
      summary: Check admin user permissions
      operationId: MasterAccount_checkAdminUserPermissions
      parameters:
        - description: Email of the invited user.
          name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user's permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCorporateUserPermission'
              examples:
                response:
                  value:
                    email: invitedUser@company.com
                    status: active
                    groups:
                      - id: 6543ab3667ffbb00142e4486
                        name: Support
                      - id: 174bab366732bbce142e4412
                        name: Technical
                    feature_access:
                      api_keys:
                        - all
                      my_plan:
                        - all
                      user_management:
                        - none
                      apps_management:
                        - all
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /corporate/groups:
    get:
      tags:
        - Master account
      summary: Get the list of groups
      operationId: MasterAccount_listGroups
      description: >-
        This endpoint allows you to list all groups created on your Admin
        account.
      responses:
        '200':
          description: list of all the sub-account groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MasterAccountListGroupsResponse'
              example:
                - id: d3b142c709d6ed67ef1cd903
                  groupName: My group 1
                - id: a5b192a709d6ed67ef8fd922
                  groupName: My group 2
                - id: bbb142c709d6ed67ef1cd910
                  groupName: My group 3
  /companies:
    get:
      tags:
        - Companies
      summary: Get all Companies
      operationId: Companies_getAll
      parameters:
        - description: >-
            Filter by attrbutes. If you have filter for owner on your side
            please send it as {"attributes.owner":"6299dcf3874a14eacbc65c46"}
          name: filters
          in: query
          schema:
            type: string
        - description: Filter by linked contacts ids
          name: linkedContactsIds
          in: query
          schema:
            type: integer
            format: int64
        - description: Filter by linked Deals ids
          name: linkedDealsIds
          in: query
          schema:
            type: string
            format: objectID
        - description: Index of the first document of the page
          name: page
          in: query
          schema:
            type: integer
            format: int64
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            Sort the results in the ascending/descending order. Default order is
            **descending** by creation if `sort` is not passed
          name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
        - description: The field used to sort field names.
          name: sortBy
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns companies list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompaniesList'
        '400':
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
    post:
      tags:
        - Companies
      summary: Create a company
      operationId: Companies_createCompany
      requestBody:
        description: Company create data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompaniesCreateCompanyRequest'
      responses:
        '200':
          description: Created new Company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompaniesCreateCompanyResponse'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
  /companies/{id}:
    get:
      tags:
        - Companies
      summary: Get a company
      operationId: Companies_getCompanyById
      parameters:
        - description: Get Company Details
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the Company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route company id is not valid.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    delete:
      tags:
        - Companies
      summary: Delete a company
      operationId: Companies_deleteCompany
      parameters:
        - description: Company ID to delete
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: When company deleted
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route company id is not valid.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    patch:
      tags:
        - Companies
      summary: Update a company
      operationId: Companies_updateCompany
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated company details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompaniesUpdateCompanyRequest'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when company id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
  /companies/attributes:
    get:
      tags:
        - Companies
      summary: Get company attributes
      operationId: Companies_getAttributes
      responses:
        '200':
          description: Returns list of company attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyAttributes'
  /companies/link-unlink/{id}:
    patch:
      tags:
        - Companies
      summary: Link and Unlink company with contact and deal
      operationId: Companies_linkUnlinkWithContactDeal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Linked / Unlinked contacts and deals ids.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompaniesLinkUnlinkWithContactDealRequest'
      responses:
        '204':
          description: Successfully linked/unlinked contacts/deals with the company.
        '400':
          description: >-
            Returned when query params are invalid or invalid data provided in
            request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
  /crm/pipeline/details:
    get:
      tags:
        - Deals
      summary: Get pipeline stages
      operationId: Deals_getPipelineStages
      description: >-
        This endpoint is deprecated. Prefer /crm/pipeline/details/{pipelineID}
        instead.
      responses:
        '200':
          description: Returns list of pipeline stages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
      deprecated: true
  /crm/pipeline/details/{pipelineID}:
    get:
      tags:
        - Deals
      summary: Get a pipeline
      operationId: Deals_getDetails
      parameters:
        - name: pipelineID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns pipeline and its details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipelines'
        '400':
          description: Returned when pipeline id is invalid or does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                Pipeline Not Exist:
                  value:
                    message: Pipeline not found
  /crm/pipeline/details/all:
    get:
      tags:
        - Deals
      summary: Get all pipelines
      operationId: Deals_getAllPipelines
      responses:
        '200':
          description: Returns list of pipeline and its details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipelines'
        '400':
          description: Returned when pipeline id is invalid or does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                Pipeline Not Exist:
                  value:
                    message: Pipeline not found
  /crm/attributes/deals:
    get:
      tags:
        - Deals
      summary: Get deal attributes
      operationId: Deals_getAttributes
      responses:
        '200':
          description: Returns list of deal attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealAttributes'
  /crm/deals:
    get:
      tags:
        - Deals
      summary: Get all deals
      operationId: Deals_getAllDeals
      parameters:
        - description: >-
            Filter by attributes. If you have a filter for the owner on your
            end, please send it as filters[attributes.deal_owner] and utilize
            the account email for the filtering.
          name: filters[attributes.deal_name]
          in: query
          schema:
            type: string
        - description: Filter by linked companies ids
          name: filters[linkedCompaniesIds]
          in: query
          schema:
            type: string
        - description: Filter by linked companies ids
          name: filters[linkedContactsIds]
          in: query
          schema:
            type: string
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            Sort the results in the ascending/descending order. Default order is
            **descending** by creation if `sort` is not passed
          name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Returns deals list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealsList'
        '400':
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
    post:
      tags:
        - Deals
      summary: Create a deal
      operationId: Deals_createNewDeal
      requestBody:
        description: Deal create data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DealsCreateNewDealRequest'
      responses:
        '201':
          description: Created new Deal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealsCreateNewDealResponse'
        '400':
          description: Returned when invalid data posted
  /crm/deals/{id}:
    get:
      tags:
        - Deals
      summary: Get a deal
      operationId: Deals_getById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the deal by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
        '400':
          description: Returned when task id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    delete:
      tags:
        - Deals
      summary: Delete a deal
      operationId: Deals_deleteDeal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when item deleted
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when deal id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    patch:
      tags:
        - Deals
      summary: Update a deal
      operationId: Deals_updateDealById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated deal details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DealsUpdateDealByIdRequest'
      responses:
        '204':
          description: Deal updated successfully
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when deal id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
  /crm/deals/link-unlink/{id}:
    patch:
      tags:
        - Deals
      summary: Link and Unlink a deal with contacts and companies
      operationId: Deals_linkUnlinkPatch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Linked / Unlinked contacts and companies ids.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DealsLinkUnlinkPatchRequest'
      responses:
        '204':
          description: Successfully linked/unlinked contacts/companies with the deal.
        '400':
          description: >-
            Returned when query params are invalid or invalid data provided in
            request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
  /crm/tasktypes:
    get:
      tags:
        - Tasks
      summary: Get all task types
      operationId: Tasks_getAllTaskTypes
      responses:
        '200':
          description: Returns all the Task types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypes'
  /crm/tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      operationId: Tasks_getAll
      parameters:
        - description: Filter by task type (ID)
          name: filter[type]
          in: query
          schema:
            type: string
        - description: Filter by task status
          name: filter[status]
          in: query
          schema:
            type: string
            enum:
              - done
              - undone
        - description: Filter by date
          name: filter[date]
          in: query
          schema:
            type: string
            enum:
              - overdue
              - today
              - tomorrow
              - week
              - range
        - description: >-
            Filter by the "assignTo" ID. You can utilize account emails for the
            "assignTo" attribute.
          name: filter[assignTo]
          in: query
          schema:
            type: string
        - description: Filter by contact ids
          name: filter[contacts]
          in: query
          schema:
            type: string
        - description: Filter by deals ids
          name: filter[deals]
          in: query
          schema:
            type: string
        - description: Filter by companies ids
          name: filter[companies]
          in: query
          schema:
            type: string
        - description: dateFrom to date range filter type (timestamp in milliseconds)
          name: dateFrom
          in: query
          schema:
            type: integer
        - description: dateTo to date range filter type (timestamp in milliseconds)
          name: dateTo
          in: query
          schema:
            type: integer
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            type: integer
            default: 50
            format: int64
        - description: >-
            Sort the results in the ascending/descending order. Default order is
            **descending** by creation if `sort` is not passed
          name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
        - description: The field used to sort field names.
          name: sortBy
          in: query
          schema:
            type: string
          example: name
      responses:
        '200':
          description: Returns task list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
        '400':
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
    post:
      tags:
        - Tasks
      summary: Create a task
      operationId: Tasks_createNewTask
      requestBody:
        description: Task name.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TasksCreateNewTaskRequest'
      responses:
        '201':
          description: Created new task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksCreateNewTaskResponse'
        '400':
          description: Returned when invalid data posted
  /crm/tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get a task
      operationId: Tasks_getTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the Task by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Returned when task id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    delete:
      tags:
        - Tasks
      summary: Delete a task
      operationId: Tasks_removeTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when item deleted
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when task id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    patch:
      tags:
        - Tasks
      summary: Update a task
      operationId: Tasks_updateTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated task details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TasksUpdateTaskRequest'
      responses:
        '204':
          description: Task updated succussfully
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when task id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
  /crm/notes:
    get:
      tags:
        - Notes
      summary: Get all notes
      operationId: Notes_getAll
      parameters:
        - description: Filter by note entity type
          name: entity
          in: query
          schema:
            type: string
            enum:
              - companies
              - deals
              - contacts
        - description: Filter by note entity IDs
          name: entityIds
          in: query
          schema:
            type: string
        - description: dateFrom to date range filter type (timestamp in milliseconds)
          name: dateFrom
          in: query
          schema:
            type: integer
        - description: dateTo to date range filter type (timestamp in milliseconds)
          name: dateTo
          in: query
          schema:
            type: integer
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            type: integer
            default: 50
            format: int64
        - description: >-
            Sort the results in the ascending/descending order. Default order is
            **descending** by creation if `sort` is not passed
          name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Returns notes list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteList'
        '400':
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
    post:
      tags:
        - Notes
      summary: Create a note
      operationId: Notes_createNewNote
      requestBody:
        description: Note data to create a note.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteData'
      responses:
        '200':
          description: Created new note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteId'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
        '415':
          description: Format is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: The format not supported for deserialization.
  /crm/notes/{id}:
    get:
      tags:
        - Notes
      summary: Get a note
      operationId: Notes_getById
      parameters:
        - description: Note ID to get
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the Note by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    patch:
      tags:
        - Notes
      summary: Update a note
      operationId: Notes_updateNoteById
      parameters:
        - description: Note ID to update
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Note data to update a note.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteData'
      responses:
        '204':
          description: Note updated successfully
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
        '415':
          description: Format is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: The format not supported for deserialization.
    delete:
      tags:
        - Notes
      summary: Delete a note
      operationId: Notes_removeById
      parameters:
        - description: Note ID to delete
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when item deleted
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid.
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
  /crm/files:
    get:
      tags:
        - Files
      summary: Get all files
      operationId: Files_getAllFiles
      parameters:
        - description: Filter by file entity type
          name: entity
          in: query
          schema:
            type: string
            enum:
              - companies
              - deals
              - contacts
          required: false
        - description: Filter by file entity IDs
          name: entityIds
          in: query
          schema:
            type: string
          required: false
        - description: dateFrom to date range filter type (timestamp in milliseconds)
          name: dateFrom
          in: query
          schema:
            type: integer
          required: false
        - description: dateTo to date range filter type (timestamp in milliseconds)
          name: dateTo
          in: query
          schema:
            type: integer
          required: false
        - description: Index of the first document of the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
          required: false
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            type: integer
            format: int64
            default: 50
          required: false
        - description: >-
            Sort the results in the ascending/descending order. Default order is
            **descending** by creation if `sort` is not passed
          name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          required: false
      responses:
        '200':
          description: Returns files list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        '400':
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Not valid data.
    post:
      tags:
        - Files
      summary: Upload a file
      operationId: Files_uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FilesUploadFileRequest'
      responses:
        '201':
          description: Returns the created File with additional details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileData'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Invalid deals ids format.
  /crm/files/{id}:
    get:
      tags:
        - Files
      summary: Download a file
      operationId: Files_downloadFile
      parameters:
        - description: File id to download.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns downloadable file link. Valid for next 5 minutes only.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDownloadableLink'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
    delete:
      tags:
        - Files
      summary: Delete a file
      operationId: Files_deleteFile
      parameters:
        - description: File id to delete.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when file is deleted.
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
  /crm/files/{id}/data:
    get:
      tags:
        - Files
      summary: Get file details
      operationId: Files_getFileDetails
      parameters:
        - description: File id to get file data.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned when file is found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileData'
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Route attribute id is not valid
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    message: Document not found
  /conversations/messages:
    post:
      tags:
        - Conversations
      summary: Send a message as an agent
      operationId: Conversations_sendMessageAsAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationsSendMessageAsAgentRequest'
            examples:
              Basic use:
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: Hello! How can I help you?
                  agentId: d9nKoegKSjmCtyK78
              receivedFrom:
                description: >-
                  When you receive a webhook, you might want to distinguish
                  messages created by you from the others. Use receivedFrom
                  property to mark your messages
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: Hello! How can I help you?
                  agentId: d9nKoegKSjmCtyK78
                  receivedFrom: SuperAwesomeHelpdesk
              agentEmail + agentName + receivedFrom:
                description: >-
                  When sending messages from a standalone system, it’s hard to
                  maintain a 1-to-1 relationship between the users of both
                  systems. In this case, an agent can be specified by their
                  email address. If there’s no agent with the specified email
                  address in your Brevo organization, a dummy agent will be
                  created automatically.
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: Hello! How can I help you?
                  agentEmail: liz@getwear.com
                  agentName: Liz
                  receivedFrom: SuperAwesomeHelpdesk
      responses:
        '200':
          description: Newly created message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                response:
                  value:
                    id: eYBEm3gq3zc5ayE2g
                    type: agent
                    text: Hello! How can I help you?
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1482512803740
                    receivedFrom: SuperAwesomeHelpdesk
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/messages/{id}:
    get:
      tags:
        - Conversations
      summary: Get a message
      operationId: Conversations_getMessageById
      parameters:
        - description: ID of the message
          in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Requested message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                requested message:
                  value:
                    id: eYBEm3gq3zc5ayE2gX
                    type: agent
                    text: Hello! How can I help you?
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1482512803740
                    receivedFrom: SuperAwesomeHelpdesk
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Conversations
      summary: Update a message sent by an agent
      operationId: Conversations_updateAgentMessage
      description: Only agents’ messages can be edited.
      parameters:
        - description: ID of the message
          in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationsUpdateAgentMessageRequest'
            examples:
              edition:
                value:
                  text: Good morning! How can I help you?
      responses:
        '200':
          description: Updated message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                edited message:
                  value:
                    id: eYBEm3gq3zc5ayE2gX
                    type: agent
                    text: Hello! How can I help you?
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1482512803740
                    receivedFrom: SuperAwesomeHelpdesk
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Conversations
      summary: Delete a message sent by an agent
      operationId: Conversations_deleteMessageSentByAgent
      description: Only agents’ messages can be deleted.
      parameters:
        - description: ID of the message
          in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: The message was deleted from the conversation
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/pushedMessages:
    post:
      tags:
        - Conversations
      summary: Send an automated message to a visitor
      operationId: Conversations_sendAutomatedMessage
      description: >-
        Example of automated messages: order status, announce new features in
        your web app, etc.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationsSendAutomatedMessageRequest'
            examples:
              Random agent:
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: >-
                    Your order has shipped! Here’s your tracking number: 9114
                    5847 3325 9667 4328 88
              Agent group:
                description: >-
                  Send a message on behalf of a random agent from one of your
                  agent groups
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: >-
                    Your order has shipped! Here’s your tracking number: 9114
                    5847 3325 9667 4328 88
                  groupId: PjRBMhWGen6aRHjif
              Specific agent:
                description: Send a message on behalf of a specific agent
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: >-
                    Your order has shipped! Here’s your tracking number: 9114
                    5847 3325 9667 4328 88
                  agentId: d9nKoegKSjmCtyK78
      responses:
        '200':
          description: Newly created message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                response:
                  value:
                    id: AXCR3k9bpSY7bpuh7
                    type: agent
                    text: >-
                      Your order has shipped! Here’s your tracking number: 9114
                      5847 3325 9667 4328 88
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1470222622433
                    isPushed: true
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/pushedMessages/{id}:
    get:
      tags:
        - Conversations
      summary: Get an automated message
      operationId: Conversations_getAutomatedMessage
      parameters:
        - description: ID of the message sent previously
          in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Requested message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                requested message:
                  value:
                    id: AXCR3k9bpSY7bpuh7X
                    type: agent
                    text: >-
                      Your order has shipped! Here’s your tracking number: 9114
                      5847 3325 9667 4328 88
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1470222622433
                    isPushed: true
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Conversations
      summary: Update an automated message
      operationId: Conversations_updatePushedMessage
      parameters:
        - description: ID of the message
          in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationsUpdatePushedMessageRequest'
            examples:
              edition:
                value:
                  text: >-
                    Your order has shipped! Here’s your tracking number: 9114
                    5847 4668 7775 9233 54
      responses:
        '200':
          description: Updated message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                updated message:
                  value:
                    id: AXCR3k9bpSY7bpuh7X
                    type: agent
                    text: >-
                      Your order has shipped! Here’s your tracking number: 9114
                      5847 4668 7775 9233 54
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1470222622433
                    isPushed: true
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Conversations
      summary: Delete an automated message
      operationId: Conversations_deleteAutomatedMessage
      parameters:
        - description: ID of the message
          in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: The message was deleted from the conversation
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/agentOnlinePing:
    post:
      tags:
        - Conversations
      summary: Sets agent’s status to online for 2-3 minutes
      operationId: Conversations_setAgentOnlineStatus
      description: >-
        We recommend pinging this endpoint every minute for as long as the agent
        has to be considered online.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationsSetAgentOnlineStatusRequest'
            examples:
              Basic use:
                value:
                  agentId: d9nKoegKSjmCtyK78
              agentEmail + agentName + receivedFrom:
                value:
                  agentEmail: liz@getwear.com
                  agentName: Liz
                  receivedFrom: SuperAwesomeHelpdesk
      responses:
        '201':
          description: >-
            Status of the agent was set successfully. Response body will be
            empty.
        '400':
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /ecommerce/activate:
    post:
      tags:
        - Ecommerce
      summary: Activate the eCommerce app
      operationId: Ecommerce_activateApp
      description: Getting access to Brevo eCommerce.
      responses:
        '200':
          description: eCommerce activation is in process, please wait for 5 minutes.
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: api-key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /ecommerce/attribution/metrics:
    get:
      tags:
        - Ecommerce
      summary: Get attribution metrics for one or more Brevo campaigns
      operationId: Ecommerce_getAttributionMetrics
      parameters:
        - description: >-
            When getting metrics for a specific period, define the starting
            datetime in RFC3339 format
          in: query
          name: periodFrom
          schema:
            type: string
            format: date-time
            example: '2022-01-02T00:00:00Z'
        - description: >-
            When getting metrics for a specific period, define the end datetime
            in RFC3339 format
          in: query
          name: periodTo
          schema:
            type: string
            format: date-time
            example: '2022-01-03T00:00:00Z'
        - description: The email campaign id(s) to get metrics for
          in: query
          name: emailCampaignId[]
          schema:
            type: array
            items:
              type: number
              format: integer
              example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcommerceGetAttributionMetricsResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /ecommerce/attribution/metrics/{conversionSource}/{conversionSourceId}:
    get:
      tags:
        - Ecommerce
      summary: Get detailed attribution metrics for a single Brevo campaign
      operationId: Ecommerce_getAttributionMetrics
      parameters:
        - description: The Brevo campaign type for which data will be retrieved
          in: path
          name: conversionSource
          required: true
          schema:
            type: string
            enum:
              - email_campaign
        - description: The Brevo campaign id for which data will be retrieved
          in: path
          name: conversionSourceId
          required: true
          schema:
            type: number
            format: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcommerceGetAttributionMetrics200Response'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /ecommerce/attribution/products/{conversionSource}/{conversionSourceId}:
    get:
      tags:
        - Ecommerce
      summary: Get attributed product sales for a single Brevo campaign
      operationId: Ecommerce_getAttributedProductSales
      parameters:
        - description: The Brevo campaign type for which data will be retrieved
          in: path
          name: conversionSource
          required: true
          schema:
            type: string
            enum:
              - email_campaign
        - description: The Brevo campaign id for which data will be retrieved
          in: path
          name: conversionSourceId
          required: true
          schema:
            type: number
            format: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/EcommerceGetAttributedProductSalesResponse
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /orders:
    get:
      tags:
        - Ecommerce
      summary: Get order details
      operationId: Ecommerce_getOrders
      description: Get all the orders
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 100
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: >
            Filter (urlencoded) the orders modified after a given UTC date-time
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          name: modifiedSince
          in: query
          schema:
            type: string
        - description: >
            Filter (urlencoded) the orders created after a given UTC date-time
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          name: createdSince
          in: query
          schema:
            type: string
      responses:
        '200':
          description: orders fetched successfully
          content:
            application/json:
              examples:
                response:
                  value:
                    orders:
                      - id: order1803
                        createdAt: '2021-12-31T11:42:35.638Z'
                        updatedAt: '2022-03-03T14:48:31.867Z'
                        contact_id: 2
                        status: complete
                        amount: 2000
                        billing:
                          address: Sec 62, Noida
                          city: Noida
                          countryCode: IN
                          phone: 9238283982
                          postCode: 110001
                          paymentMethod: Net banking
                          region: North India
                        products:
                          - productId: 21
                            quantity: 2
                            variantId: P100
                            price: 100
                          - productId: 21
                            quantity: 2
                            variantId: P15756
                            price: 100
                        email: testvisitor@sendinblue.com
                        coupons:
                          - flat50
                          - flat40
                    count: 1
              schema:
                $ref: '#/components/schemas/EcommerceGetOrdersResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /orders/status:
    post:
      tags:
        - Ecommerce
      summary: Managing the status of the order
      operationId: Ecommerce_manageOrderStatus
      description: Manages the transactional status of the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        '204':
          description: Order Event posted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /orders/status/batch:
    post:
      tags:
        - Ecommerce
      summary: Create orders in batch
      operationId: Ecommerce_createOrderBatch
      description: Create multiple orders at one time instead of one order at a time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderBatch'
      responses:
        '202':
          $ref: '#/components/responses/createdBatchId'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /events:
    post:
      tags:
        - Event
      summary: Create an event
      operationId: Event_trackInteraction
      description: Create an event to track a contact's interaction.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        '204':
          description: An event posted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /categories:
    get:
      tags:
        - Ecommerce
      summary: Return all your categories
      operationId: Ecommerce_getAllCategories
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 100
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: Filter by category ids
          name: ids
          in: query
          schema:
            type: array
            items:
              type: string
        - description: Filter by category name
          name: name
          in: query
          schema:
            type: string
        - description: >
            Filter (urlencoded) the categories modified after a given UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone
            in date-time format for accurate result.**
          name: modifiedSince
          in: query
          schema:
            type: string
        - description: >
            Filter (urlencoded) the categories created after a given UTC
            date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone
            in date-time format for accurate result.**
          name: createdSince
          in: query
          schema:
            type: string
      responses:
        '200':
          description: All categories listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCategories'
              examples:
                response:
                  value:
                    categories:
                      - id: 19
                        name: Food
                        url: http://mydomain.com/category/food
                        modifiedAt: '2022-03-03T14:48:31.867Z'
                        createdAt: '2021-12-31T11:42:35.638Z'
                      - id: 20
                        name: clothing
                        url: http://mydomain.com/category/clothing
                        modifiedAt: '2022-03-03T14:48:31.867Z'
                        createdAt: '2021-12-31T11:42:35.638Z'
                        isDeleted: true
                    count: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Ecommerce
      summary: Create/Update a category
      operationId: Ecommerce_createCategory
      requestBody:
        description: Values to create/update a category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateCategory'
        required: true
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCategoryModel'
              examples:
                response:
                  value:
                    id: 21
        '204':
          description: Category updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /categories/{id}:
    get:
      tags:
        - Ecommerce
      summary: Get a category details
      operationId: Ecommerce_getCategoryDetails
      parameters:
        - description: Category ID
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCategoryDetails'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Category id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /categories/batch:
    post:
      tags:
        - Ecommerce
      summary: Create categories in batch
      operationId: Ecommerce_createCategoriesBatch
      requestBody:
        description: Values to create a batch of categories
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateBatchCategory'
        required: true
      responses:
        '201':
          description: Category created and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateBatchCategoryModel'
              examples:
                response:
                  value:
                    createdCount: 2
                    updatedCount: 7
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /products:
    get:
      tags:
        - Ecommerce
      summary: Return all your products
      operationId: Ecommerce_listAllProducts
      parameters:
        - description: Number of documents per page
          name: limit
          in: query
          schema:
            maximum: 1000
            type: integer
            format: int64
            default: 50
        - description: Index of the first document in the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: Filter by product ids
          name: ids
          in: query
          schema:
            type: array
            items:
              type: string
        - description: >-
            Filter by product name, minimum 3 characters should be present for
            search
          name: name
          in: query
          schema:
            type: string
        - description: Price filter for products less than and equals to particular amount
          name: price[lte]
          in: query
          schema:
            type: number
        - description: >-
            Price filter for products greater than and equals to particular
            amount
          name: price[gte]
          in: query
          schema:
            type: number
        - description: Price filter for products less than particular amount
          name: price[lt]
          in: query
          schema:
            type: number
        - description: Price filter for products greater than particular amount
          name: price[gt]
          in: query
          schema:
            type: number
        - description: Price filter for products equals to particular amount
          name: price[eq]
          in: query
          schema:
            type: number
        - description: Price filter for products not equals to particular amount
          name: price[ne]
          in: query
          schema:
            type: number
        - description: Filter by product categories
          name: categories
          in: query
          schema:
            type: array
            items:
              type: string
        - description: >
            Filter (urlencoded) the orders modified after a given UTC date-time
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          name: modifiedSince
          in: query
          schema:
            type: string
        - description: >
            Filter (urlencoded) the orders created after a given UTC date-time
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          name: createdSince
          in: query
          schema:
            type: string
      responses:
        '200':
          description: All products listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProducts'
              examples:
                response:
                  value:
                    products:
                      - id: 7498033266862
                        name: Alpina Panoma Classic
                        url: https://mydomain.com/products/alpina-panoma-classic
                        sku: 186622-9
                        imageUrl: http://mydomain.com/product-absoulte-url/img.jpeg
                        categories:
                          - '279638835374'
                          - '279502848174'
                        price: 49.95
                        modifiedAt: '2022-06-30T10:29:16.078Z'
                        createdAt: '2022-06-30T10:29:16.078Z'
                        s3Original: >-
                          https://img-ecom.mailinblue.com/path-to-original/img.jpg
                        s3ThumbAnalytics: >-
                          https://img-ecom.mailinblue.com/path-to-analytics/img.jpg
                        s3ThumbEditor: https://img-ecom.mailinblue.com/path-to-editor/img.jpg
                      - id: 7498033266862
                        name: Alpina Panoma Classic2
                        url: https://mydomain.com/products/alpina-panoma-classic2
                        sku: 186622-9
                        imageUrl: http://mydomain.com/product-absoulte-url/img.jpeg
                        categories:
                          - 2d79638835374
                          - 27d9502848174
                        price: 49.95
                        metaInfo:
                          description: Shoes for sports
                          brand: addidas
                        modifiedAt: '2022-06-30T10:29:16.078Z'
                        createdAt: '2022-06-30T10:29:16.078Z'
                        s3Original: >-
                          https://img-ecom.mailinblue.com/path-to-original/img.jpg
                        s3ThumbAnalytics: >-
                          https://img-ecom.mailinblue.com/path-to-analytics/img.jpg
                        s3ThumbEditor: https://img-ecom.mailinblue.com/path-to-editor/img.jpg
                        isDeleted: true
                    count: 2
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Ecommerce
      summary: Create/Update a product
      operationId: Ecommerce_createProduct
      requestBody:
        description: Values to create/update a product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateProduct'
        required: true
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProductModel'
              examples:
                response:
                  value:
                    id: 21
        '204':
          description: Product updated
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /products/{id}:
    get:
      tags:
        - Ecommerce
      summary: Get a product's details
      operationId: Ecommerce_getProductDetails
      parameters:
        - description: Product ID
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProductDetails'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Product's id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /products/batch:
    post:
      tags:
        - Ecommerce
      summary: Create products in batch
      operationId: Ecommerce_createProductsBatch
      requestBody:
        description: Values to create a batch of products
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateBatchProducts'
        required: true
      responses:
        '201':
          description: Products created and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateBatchProductsModel'
              examples:
                response:
                  value:
                    createdCount: 2
                    updatedCount: 7
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /couponCollections:
    get:
      tags:
        - Coupons
      summary: Get all your coupon collections
      operationId: Coupons_listCouponCollections
      parameters:
        - description: Number of documents returned per page
          name: limit
          in: query
          schema:
            type: integer
            format: int64
            default: 50
            minimum: 0
            maximum: 100
        - description: Index of the first document on the page
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
        - description: Sort the results by creation time in ascending/descending order
          name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - description: The field used to sort coupon collections
          name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum:
              - createdAt
              - remainingCoupons
              - expirationDate
            default: createdAt
      responses:
        '200':
          description: Coupon collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCouponCollection'
              examples:
                response:
                  value:
                    collections:
                      - id: 23befbae-1505-47a8-bd27-e30ef739f32c
                        name: Summer
                        defaultCoupon: 10 OFF
                        createdAt: '2017-03-12T12:30:00.000Z'
                        totalCoupons: 10000
                        remainingCoupons: 5000
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Coupons
      summary: Create а coupon collection
      operationId: Coupons_createCollection
      requestBody:
        description: Values to create a coupon collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponsCreateCollectionRequest'
      responses:
        '201':
          description: Coupon collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponsCreateCollectionResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /couponCollections/{id}:
    get:
      tags:
        - Coupons
      summary: Get a coupon collection by id
      operationId: Coupons_getById
      parameters:
        - description: Id of the collection to return
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        '200':
          description: Coupon collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCouponCollection'
              examples:
                response:
                  value:
                    - id: 23befbae-1505-47a8-bd27-e30ef739f32cX
                      name: Summer
                      defaultCoupon: 10 OFF
                      createdAt: '2017-03-12T12:30:00.000Z'
                      totalCoupons: 10000
                      remainingCoupons: 5000
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Coupon collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    patch:
      tags:
        - Coupons
      summary: Update a coupon collection by id
      operationId: Coupons_updateCouponCollectionById
      parameters:
        - description: Id of the collection to update
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuidv4
      requestBody:
        description: Values to update the coupon collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponsUpdateCouponCollectionByIdRequest'
      responses:
        '200':
          description: Coupon collection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponsUpdateCouponCollectionByIdResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /coupons:
    post:
      tags:
        - Coupons
      summary: Create coupons for a coupon collection
      operationId: Coupons_createCouponCollection
      requestBody:
        description: Values to create coupons
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponsCreateCouponCollectionRequest'
      responses:
        '204':
          description: Coupons creation in progress
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Coupon collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsapp/sendMessage:
    post:
      tags:
        - Transactional WhatsApp
      summary: Send a WhatsApp message
      operationId: TransactionalWhatsApp_sendMessage
      description: >-
        This endpoint is used to send a WhatsApp message. <br/>(**The first
        message you send using the API must contain a Template ID. You must
        create a template on WhatsApp on the Brevo platform to fetch the
        Template ID.**)
      requestBody:
        description: Values to send WhatsApp message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionalWhatsAppSendMessageRequest'
        required: true
      responses:
        '201':
          description: successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionalWhatsAppSendMessageResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsapp/statistics/events:
    get:
      tags:
        - Transactional WhatsApp
      summary: Get all your WhatsApp activity (unaggregated events)
      operationId: TransactionalWhatsApp_getActivity
      description: >-
        This endpoint will show the unaggregated statistics for WhatsApp
        activity (30 days by default if `startDate` and `endDate` or `days` is
        not passed. The date range can not exceed 90 days)
      parameters:
        - description: Number limitation for the result returned
          name: limit
          in: query
          schema:
            maximum: 5000
            type: integer
            format: int64
            default: 2500
            minimum: 0
        - description: Beginning point in the list to retrieve from
          name: offset
          in: query
          schema:
            type: integer
            format: int64
            default: 0
        - description: >
            **Mandatory if endDate is used.** Starting date of the report
            (YYYY-MM-DD). Must be lower than equal to endDate
          name: startDate
          in: query
          schema:
            type: string
        - description: >
            **Mandatory if startDate is used.** Ending date of the report
            (YYYY-MM-DD). Must be greater than equal to startDate
          name: endDate
          in: query
          schema:
            type: string
        - description: >
            Number of days in the past including today (positive integer). _Not
            compatible with 'startDate' and 'endDate'_
          name: days
          in: query
          schema:
            type: integer
            format: int64
        - description: >-
            Filter results for specific contact (WhatsApp Number with country
            code. Example, 85264318721)
          name: contactNumber
          in: query
          schema:
            type: string
            format: mobile
        - description: Filter the report for a specific event type
          name: event
          in: query
          schema:
            type: string
            enum:
              - sent
              - delivered
              - read
              - error
              - unsubscribe
              - reply
              - soft-bounce
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        '200':
          description: WhatsApp events report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappEventReport'
              examples:
                response:
                  value:
                    events:
                      - contactNumber: 919876543211
                        date: '2017-03-12T12:30:00.000Z'
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: sent
                        senderNumber: 919876543210
                      - contactNumber: 919876543211
                        date: '2017-03-12T12:30:00.000Z'
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: error
                        reason: error reason
                        senderNumber: 919876543210
                      - contactNumber: 919876543211
                        date: '2017-03-12T12:30:00.000Z'
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: soft-bounce
                        reason: invalid whatsapp contact
                        senderNumber: 919876543210
                      - contactNumber: 919876543211
                        date: '2017-03-12T12:30:00.000Z'
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: reply
                        body: body only in case of text reply & url will be empty
                        mediaUrl: >-
                          media url only in case media reply & body will be
                          empty
                        senderNumber: 919876543210
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /feeds:
    get:
      tags:
        - External Feeds
      summary: Fetch all external feeds
      operationId: ExternalFeeds_getAllFeeds
      description: This endpoint can fetch all created external feeds.
      parameters:
        - description: Can be used to filter records by search keyword on feed name
          name: search
          in: query
          example: search
          required: false
          schema:
            type: string
        - description: >-
            Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from
            which you want to fetch the list. Can be maximum 30 days older than
            current date.
          name: startDate
          in: query
          example: '2022-09-04'
          required: false
          schema:
            type: string
            format: date
        - description: >-
            Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till
            which you want to fetch the list. Maximum time period that can be
            selected is one month.
          name: endDate
          in: query
          example: '2022-10-01'
          required: false
          schema:
            type: string
            format: date
        - description: >-
            Sort the results in the ascending/descending order of record
            creation. Default order is **descending** if `sort` is not passed.
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - description: Filter the records by `authType` of the feed.
          name: authType
          in: query
          required: false
          schema:
            type: string
            enum:
              - basic
              - token
              - noAuth
        - description: Number of documents returned per page.
          name: limit
          in: query
          required: false
          example: 100
          schema:
            type: integer
            format: int64
            default: 50
            maximum: 500
            minimum: 0
        - description: Index of the first document on the page.
          name: offset
          in: query
          required: false
          example: 0
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: External feeds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllExternalFeeds'
              example:
                count: 3
                feeds:
                  - id: d955aaa4-f4d6-4557-aa14-24286542ed8d
                    name: api feed token
                    url: https://abc.com/
                    authType: token
                    token: jfhdkjdfhjkfdhjkdfhjkdfhkj
                    headers:
                      - name: key
                        value: val
                    maxRetries: 4
                    cache: true
                    createdAt: '2022-10-06T05:03:47.053000000Z'
                    modifiedAt: '2022-10-06T05:03:47.053000000Z'
                  - id: 311a71ac-bebc-42cf-963d-d8666dfe53e9
                    name: api feed basic
                    url: https://abc.com/
                    authType: basic
                    username: user
                    password: pass
                    headers: null
                    maxRetries: 2
                    cache: false
                    createdAt: '2022-10-06T04:48:19.767000000Z'
                    modifiedAt: '2022-10-06T04:48:19.767000000Z'
        '400':
          description: Invalid parameters passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - External Feeds
      summary: Create an external feed
      operationId: ExternalFeeds_createFeed
      description: This endpoint will create an external feed.
      requestBody:
        description: Values to create a feed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createExternalFeed'
        required: true
      responses:
        '201':
          description: successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalFeedsCreateFeedResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /feeds/{uuid}:
    get:
      tags:
        - External Feeds
      summary: Get an external feed by UUID
      operationId: ExternalFeeds_getFeedByUuid
      description: This endpoint will update an external feed.
      parameters:
        - description: UUID of the feed to fetch
          name: uuid
          example: 38f351fb-6e77-4b38-979a-a2465260449e
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: External feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getExternalFeedByUUID'
              example:
                id: d955aaa4-f4d6-4557-aa14-24286542ed8dX
                name: api feed token
                url: https://abc.com/
                authType: token
                token: jfhdkjdfhjkfdhjkdfhjkdfhkj
                headers:
                  - name: key
                    value: val
                maxRetries: 4
                cache: true
                createdAt: '2022-10-06T05:03:47.053000000Z'
                modifiedAt: '2022-10-06T05:03:47.053000000Z'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - External Feeds
      summary: Update an external feed
      operationId: ExternalFeeds_updateFeedByUUID
      description: This endpoint will update an external feed.
      parameters:
        - description: UUID of the feed to update
          name: uuid
          example: 38f351fb-6e77-4b38-979a-a2465260449e
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Values to update a feed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateExternalFeed'
        required: true
      responses:
        '204':
          description: Feed updated
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - External Feeds
      summary: Delete an external feed
      operationId: ExternalFeeds_deleteFeedByUUID
      description: This endpoint will delete an external feed.
      parameters:
        - description: UUID of the feed to delete
          name: uuid
          example: 38f351fb-6e77-4b38-979a-a2465260449e
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Feed deleted
          content: {}
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /payments/requests:
    post:
      tags:
        - Payments
      summary: Create a payment request
      operationId: Payments_createPaymentRequest
      requestBody:
        description: |
          Create a payment request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPaymentRequest'
        required: true
      responses:
        '201':
          description: Payment request created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createModel'
              examples:
                response:
                  value:
                    id: 6d4ec0b2b48ef803df4103ve
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: >-
            Permission denied. Either you don't have access to Brevo Payments or
            your Brevo Payments account is not validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /payments/requests/{id}:
    get:
      tags:
        - Payments
      summary: Get payment request details
      operationId: Payments_getDetails
      parameters:
        - description: Id of the payment Request
          name: id
          in: path
          required: true
          schema:
            type: string
          example: 050db7b0-9bb7-4c1e-9c68-5a8dace8c1dc
      responses:
        '200':
          description: Payment request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPaymentRequest'
              example:
                reference: |
                  Invoice #INV0001
                status: paid
                configuration:
                  customSuccessUrl: https://my-company.com/payment-success
                contactId: 43
                cart:
                  currency: EUR
                  specificAmount: 1200
                notification:
                  channel: email
                  text: Please pay for your yoga class.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: >-
            Permission denied. Either you don't have access to Brevo Payments or
            your Brevo Payments account is not validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Payment request not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Payments
      summary: Delete a payment request.
      operationId: Payments_deleteRequest
      parameters:
        - description: ID of the payment request.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 9ae7d68a-565c-4695-9381-d8fb3e3a14cc
      responses:
        '204':
          description: Payment request deleted successfully.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '403':
          description: >-
            Permission denied. Either you don't have access to Brevo Payments or
            your Brevo Payments account is not validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        '404':
          description: Payment request not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
components:
  responses:
    createModel:
      description: successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createModel'
    createdProcessId:
      description: process id created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createdProcessId'
    createdBatchId:
      description: batch id created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createdBatchId'
  schemas:
    getAccount:
      allOf:
        - $ref: '#/components/schemas/getExtendedClient'
        - required:
            - plan
            - relay
          type: object
          properties:
            plan:
              description: Information about your plans and credits
              type: array
              items:
                required:
                  - credits
                  - creditsType
                  - type
                type: object
                properties:
                  type:
                    description: Displays the plan type of the user
                    type: string
                    example: subscription
                    enum:
                      - payAsYouGo
                      - free
                      - subscription
                      - sms
                      - reseller
                  creditsType:
                    description: >-
                      This is the type of the credit, "Send Limit" is one of the
                      possible types of credit of a user. "Send Limit" implies
                      the total number of emails you can send to the subscribers
                      in your account.
                    type: string
                    example: sendLimit
                    enum:
                      - sendLimit
                  credits:
                    description: Remaining credits of the user
                    type: number
                    format: float
                    example: 8755
                  startDate:
                    description: >-
                      Date of the period from which the plan will start (only
                      available for "subscription" and "reseller" plan type)
                    type: string
                    format: date
                    example: '2016-12-31T00:00:00.000Z'
                  endDate:
                    description: >-
                      Date of the period from which the plan will end (only
                      available for "subscription" and "reseller" plan type)
                    type: string
                    format: date
                    example: '2017-01-31T00:00:00.000Z'
                  userLimit:
                    description: >-
                      Only in case of reseller account. It implies the total
                      number of child accounts you can add to your account.
                    type: integer
                    example: 10
            relay:
              description: Information about your transactional email account
              required:
                - data
                - enabled
              type: object
              properties:
                enabled:
                  description: >-
                    Status of your transactional email Account (true=Enabled,
                    false=Disabled)
                  type: boolean
                  example: true
                data:
                  description: Data regarding the transactional email account
                  required:
                    - port
                    - relay
                    - userName
                  type: object
                  properties:
                    userName:
                      description: Email to use as login on transactional platform
                      type: string
                      format: email
                      example: john.smith@example.com
                    relay:
                      description: URL of the SMTP Relay
                      type: string
                      example: relay.domain.com
                    port:
                      description: Port used for SMTP Relay
                      type: integer
                      example: 125
            marketingAutomation:
              required:
                - enabled
              type: object
              properties:
                key:
                  description: Marketing Automation Tracker ID
                  type: string
                  example: iso05aopqych87ysy0jymf
                enabled:
                  description: >-
                    Status of Marketing Automation Plateform activation for your
                    account (true=enabled, false=disabled)
                  type: boolean
                  example: false
    getAccountActivity:
      type: object
      properties:
        logs:
          description: Get user activity logs
          type: array
          items:
            required:
              - action
              - date
              - user_email
              - user_ip
              - user_agent
            type: object
            properties:
              action:
                description: Type of activity in the account.
                type: string
                example: login-success
              date:
                description: Time of the activity.
                type: string
                example: '2023-03-27T16:30:00Z'
              user_email:
                description: >-
                  Email address of the user who performed activity in the
                  account.
                type: string
                example: test@mycompany.com
              user_ip:
                description: IP address of the user who performed activity in the account.
                type: string
                example: 192.158.1.38
              user_agent:
                description: Browser details of the user who performed the activity.
                type: string
                example: Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)
    getInvitedUsersList:
      type: object
      properties:
        users:
          description: Get invited users list
          type: array
          items:
            required:
              - email
              - is_owner
              - status
              - feature_access
            type: object
            properties:
              email:
                description: Email address of the user.
                type: string
                example: pendingInvitedUser@company.com
              is_owner:
                description: Flag for indicating is user owner of the organization.
                type: string
                example: true
              status:
                description: Status of the invited user.
                type: string
                example: active
              feature_access:
                description: Feature accessiblity given to the user.
                type: object
                properties:
                  marketing:
                    description: Marketing features accessiblity.
                    type: string
                    example: custom
                  conversations:
                    description: Conversations features accessiblity.
                    type: string
                    example: none
                  crm:
                    description: CRM features accessiblity.
                    type: string
                    example: full
    getCorporateInvitedUsersList:
      type: object
      properties:
        users:
          description: Get invited users list
          type: array
          items:
            required:
              - email
              - is_owner
              - status
              - feature_access
            type: object
            properties:
              groups:
                description: Admin user groups list
                type: object
                properties:
                  id:
                    description: group id
                    type: string
                    example: a5c4f22c08d9ed37ef1ca342
                  name:
                    description: group name
                    type: string
                    example: My group
              email:
                description: Email address of the user.
                type: string
                example: pendingInvitedUser@company.com
              is_owner:
                description: Flag for indicating is user owner of the organization.
                type: string
                example: false
              status:
                description: Status of the invited user.
                type: string
                example: active
              feature_access:
                description: >-
                  Feature accessiblity given to the user. (Required only if
                  status is active)
                type: object
                properties:
                  user_management:
                    description: User management accessiblity.
                    type: array
                    items:
                      type: string
                      example: all / none
                  api_keys:
                    description: Api keys accessiblity.
                    type: array
                    items:
                      type: string
                      example: all / none
                  my_plan:
                    description: My plan accessiblity.
                    type: array
                    items:
                      type: string
                      example: all / none
                  apps_management:
                    description: Apps management accessiblity | Not available in ENTv2
                    type: array
                    items:
                      type: string
                      example: all / none
    getCorporateUserPermission:
      description: Check admin user permissions
      type: object
      required:
        - email
        - status
        - groups
        - feature_access
      properties:
        email:
          description: Email address of the user.
          type: string
          example: invitedUser@company.com
        status:
          description: Status of the invited user.
          type: string
          example: active / pending
        groups:
          type: array
          items:
            description: Groups details
            type: object
            properties:
              id:
                description: group identifier
                type: string
                example: 6cbcxxxxxxxxxxxxxxxx457a
              name:
                description: Group name
                type: string
                example: Staff
        feature_access:
          description: Granular feature permissions given to the user.
          type: object
          properties:
            api_keys:
              description: Permission on api keys
              type: array
              items:
                description: Permission details
                type: string
                example: all
            my_plan:
              description: Permission on my plan
              type: array
              items:
                description: Permission details
                type: string
                example: all
            user_management:
              description: Permission on user management
              type: array
              items:
                description: Permission details
                type: string
                example: none
            apps_management:
              description: Permission on apps management
              type: array
              items:
                description: Permission details
                type: string
                example: all
    getUserPermission:
      description: Check user permission
      type: object
      required:
        - email
        - status
        - privileges
      properties:
        email:
          description: Email address of the user.
          type: string
          example: invitedUser@company.com
        status:
          description: Status of the invited user.
          type: string
          example: active
        privileges:
          description: Granular feature permissions given to the user.
          type: array
          items:
            required:
              - feature
              - permissions
            type: object
            properties:
              feature:
                type: string
                example: Email campaign
              permissions:
                type: array
                items:
                  type: string
                  example: Create / edit / delete
    putRevokeUserPermission:
      description: Revoke user permission
      type: object
      required:
        - email
      properties:
        email:
          description: Email address of the user.
          type: string
          example: invitedUser@company.com
    putRevokeUserPermissionResponse:
      required:
        - status
      type: object
      properties:
        status:
          description: Status of the API operation.
          type: string
          example: OK
        credit_notes:
          description: Credit note
          type: array
          items:
            type: string
            example: TEST-123
    putresendcancelinvitation:
      description: Revoke user permission
      type: object
      required:
        - email
      properties:
        email:
          description: Email address of the user.
          type: string
          example: invitedUser@company.com
    putresendcancelinvitationResponse:
      required:
        - status
      type: object
      properties:
        status:
          description: Status of the API operation.
          type: string
          example: OK
        credit_notes:
          description: Credit note
          type: array
          items:
            type: string
            example: TEST-123
    inviteAdminUser:
      type: object
      required:
        - email
        - all_features_access
        - privileges
      properties:
        email:
          description: Email address for the organization
          type: string
          format: email
          example: inviteuser@example.com
        all_features_access:
          description: All access to the features
          type: boolean
          example: true
          enum:
            - true
            - false
        groupIds:
          description: Ids of Group
          type: array
          items:
            description: Group Id
            type: string
          example:
            - 2baxxxxxxxxxxxxxxxxxxxxxcaa
            - 65axxxxxxxxxxxxxxxxxxxxxc5a
        privileges:
          type: array
          items:
            description: Privileges given to the user
            type: object
            properties:
              feature:
                description: Feature name
                type: string
                enum:
                  - my_plan
                  - api
                  - user_management
                  - app_management
                example: user_management
              permissions:
                description: Permissions for a given feature
                type: array
                items:
                  type: string
                  enum:
                    - all
                    - none
                  example: '''all'', ''none'''
            example:
              - feature: my_plan
                permissions:
                  - all
              - feature: api
                permissions:
                  - none
    inviteuser:
      type: object
      required:
        - email
        - all_features_access
        - privileges
      properties:
        email:
          description: Email address for the organization
          type: string
          format: email
          example: inviteuser@example.com
        all_features_access:
          description: All access to the features
          type: boolean
          example: true
          enum:
            - true
            - false
        privileges:
          type: array
          items:
            description: Privileges given to the user
            type: object
            properties:
              feature:
                description: Feature name
                type: string
                enum:
                  - email_campaigns
                  - sms_campaigns
                  - contacts
                  - templates
                  - workflows
                  - facebook_ads
                  - landing_pages
                  - transactional_emails
                  - smtp_api
                  - user_management
                  - sales_platform
                  - phone
                  - conversations
                  - senders_domains_dedicated_ips
                  - push_notifications
                example: email_campaigns
              permissions:
                description: Permissions for a given feature
                type: array
                items:
                  type: string
                  enum:
                    - create_edit_delete
                    - send_schedule_suspend
                    - view
                    - import
                    - export
                    - list_and_attributes
                    - forms
                    - activate_deactivate
                    - activate_deactivate_pause
                    - settings
                    - schedule_pause
                    - all
                    - logs
                    - access
                    - assign
                    - configure
                    - manage_owned_deals_tasks_companies
                    - manage_others_deals_tasks_companies
                    - reports
                    - senders_management
                    - domains_management
                    - dedicated_ips_management
                    - send
                    - smtp
                    - api_keys
                    - authorized_ips
                    - none
                  example: '''create_edit_delete'', ''send_schedule_suspend'''
            example:
              - feature: email_campaigns
                permissions:
                  - create_edit_delete
                  - send_schedule_suspend
              - feature: sms_campaigns
                permissions:
                  - create_edit_delete
                  - send_schedule_suspend
              - feature: facebook_ads
                permissions:
                  - create_edit_delete
                  - schedule_pause
    inviteuserResponse:
      required:
        - status
      type: object
      properties:
        status:
          description: Status of the API operation.
          type: string
          example: OK
        invoice_id:
          description: Invoice id
          type: string
          items:
            type: string
            example: TEST-ID
    updateUserResponse:
      required:
        - status
      type: object
      properties:
        status:
          description: Status of the API operation.
          type: string
          example: OK
        credit_notes:
          description: Credit note
          type: array
          items:
            type: string
            example: TEST-123
        invoice_id:
          description: Invoice id
          type: string
          items:
            type: string
            example: TEST-ID
    getChildrenList:
      type: object
      properties:
        children:
          description: Your children's account information
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getChildInfo'
              - type: object
                properties:
                  id:
                    description: ID of the child
                    type: integer
                    format: int64
                    example: 187588
        count:
          description: Number of child accounts
          type: integer
          format: int64
          example: 24
    getChildInfo:
      allOf:
        - $ref: '#/components/schemas/getClient'
        - required:
            - password
          type: object
          properties:
            credits:
              description: Credits available for your child
              type: object
              properties:
                emailCredits:
                  description: Email credits available for your child
                  type: integer
                  format: int64
                  example: 98555
                smsCredits:
                  description: SMS credits available for your child
                  type: integer
                  format: int64
                  example: 87556
            statistics:
              description: Statistics about your child account activity
              type: object
              properties:
                previousMonthTotalSent:
                  description: Overall emails sent for the previous month
                  type: integer
                  format: int64
                  example: 7654
                currentMonthTotalSent:
                  description: Overall emails sent for current month
                  type: integer
                  format: int64
                  example: 4566
                totalSent:
                  description: Overall emails sent for since the account exists
                  type: integer
                  format: int64
                  example: 987554
            password:
              description: The encrypted password of child account
              type: string
              format: password
              example: abC01De2fGHI3jkL
            ips:
              description: IP(s) associated to a child account user
              type: array
              items:
                description: IP(s) associated to the user
                type: string
                example: ''
            apiKeys:
              description: API Keys associated to child account
              required:
                - v2
              type: object
              properties:
                v2:
                  type: array
                  items:
                    required:
                      - key
                      - name
                    type: object
                    properties:
                      name:
                        description: Name of the key for version 2
                        type: string
                        example: N˚2
                      key:
                        description: API Key for version 2
                        type: string
                        example: nOpxxxxxy7z
                v3:
                  type: array
                  items:
                    required:
                      - key
                      - name
                    type: object
                    properties:
                      name:
                        description: Name of the key for version 3
                        type: string
                        example: N˚3
                      key:
                        description: API Key for version 3
                        type: string
                        example: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
    getChildAccountCreationStatus:
      required:
        - childAccountCreated
      type: object
      properties:
        childAccountCreated:
          description: >-
            Status of child account creation whether it is successfully created
            (exists) or not.
          type: boolean
          example: true
    getChildDomains:
      type: array
      items:
        $ref: '#/components/schemas/getChildDomain'
    getSsoToken:
      required:
        - token
      type: object
      properties:
        token:
          description: Session token, it will remain valid for 15 days.
          type: string
          example: ede520dxxxxxxxxxxxx76d631fba2
    createApiKeyResponse:
      required:
        - status
        - key
      type: object
      properties:
        status:
          description: Status of the API operation.
          type: string
          example: success
        key:
          description: API key
          type: string
          example: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
    getChildDomain:
      type: object
      properties:
        domain:
          description: Sender domain
          type: string
          example: mycustomdomain.com
        active:
          description: indicates whether a domain is verified or not
          type: boolean
          example: true
    getClient:
      required:
        - companyName
        - email
        - firstName
        - lastName
      type: object
      properties:
        email:
          description: Login Email
          type: string
          format: email
          example: john.smith@example.com
        firstName:
          description: First Name
          type: string
          example: John
        lastName:
          description: Last Name
          type: string
          example: Smith
        companyName:
          description: Name of the company
          type: string
          example: MyCompany
    getExtendedClient:
      allOf:
        - $ref: '#/components/schemas/getClient'
        - required:
            - address
          type: object
          properties:
            address:
              description: Address informations
              required:
                - city
                - country
                - street
                - zipCode
              type: object
              properties:
                street:
                  description: Street information
                  type: string
                  example: 47 Harbour Street
                city:
                  description: City information
                  type: string
                  example: New-York
                zipCode:
                  description: Zip Code information
                  type: string
                  example: '9867'
                country:
                  description: Country information
                  type: string
                  example: United States of America
    getSendersList:
      type: object
      properties:
        senders:
          description: List of the senders available in your account
          type: array
          items:
            required:
              - active
              - email
              - id
              - name
            type: object
            properties:
              id:
                description: Id of the sender
                type: integer
                format: int64
                example: 0
              name:
                description: From Name associated to the sender
                type: string
                example: Marketing
              email:
                description: From Email associated to the sender
                type: string
                example: marketing@mycompany.com
              active:
                description: Status of sender (true=activated, false=deactivated)
                type: boolean
                example: false
              ips:
                description: >-
                  List of dedicated IP(s) available in the account. This data is
                  displayed only for dedicated IPs
                type: array
                items:
                  required:
                    - domain
                    - ip
                    - weight
                  type: object
                  properties:
                    ip:
                      description: Dedicated IP available in your account
                      type: string
                      example: 123.98.689.7
                    domain:
                      description: Domain of the IP
                      type: string
                      example: mycompany.com
                    weight:
                      description: Weight of the IP for this sender
                      type: integer
                      format: int64
                      example: 50
    getDomainsList:
      type: object
      properties:
        domains:
          description: List of the domains available in your account
          type: array
          items:
            required:
              - id
              - domain_name
              - authenticated
              - verified
            type: object
            properties:
              id:
                description: Id of the domain
                type: integer
                format: int64
                example: 1
              domain_name:
                description: Domain name
                type: string
                example: mycompany.com
              authenticated:
                description: >-
                  Status of domain authentication (true=authenticated, false=non
                  authenticated)
                type: boolean
                example: true
              verified:
                description: >-
                  Status of domain verification (true=verified, false=non
                  verified)
                type: boolean
                example: false
              ip:
                description: Dedicated IP associated with domain
                type: string
                example: 123.98.689.7
    createChild:
      required:
        - companyName
        - email
        - firstName
        - lastName
        - password
      type: object
      properties:
        email:
          description: Email address to create the child account
          type: string
          format: email
          example: josh.cruise@example.com
        firstName:
          description: First name to use to create the child account
          type: string
          example: Josh
        lastName:
          description: Last name to use to create the child account
          type: string
          example: Cruise
        companyName:
          description: Company name to use to create the child account
          type: string
          example: Your Company
        password:
          description: Password for the child account to login
          type: string
          format: password
          example: Pa55w0rd65
        language:
          description: Language of the child account
          type: string
          example: en
          enum:
            - fr
            - es
            - pt
            - it
            - de
            - en
    createSender:
      required:
        - email
        - name
      type: object
      properties:
        name:
          description: From Name to use for the sender
          type: string
          example: Newsletter
        email:
          description: >-
            From email to use for the sender. A verification email will be sent
            to this address.
          type: string
          format: email
          example: newsletter@mycompany.com
        ips:
          description: >
            **Mandatory in case of dedicated IP**. IPs to associate to the
            sender
          type: array
          items:
            required:
              - domain
              - ip
            type: object
            properties:
              ip:
                description: Dedicated IP available in your account
                type: string
                example: 123.98.689.7
              domain:
                description: Domain of the IP
                type: string
                example: mycompany.com
              weight:
                description: >-
                  Weight to apply to the IP. Sum of all IP weights must be 100.
                  Should be passed for either ALL or NONE of the IPs. If it's
                  not passed, the sending will be equally balanced on all IPs.
                maximum: 100
                minimum: 1
                type: integer
                format: int64
                example: 50
    updateSender:
      type: object
      properties:
        name:
          description: From Name to update the sender
          type: string
          example: Newsletter
        email:
          description: From Email to update the sender
          type: string
          format: email
          example: newsletter@mycompany.com
        ips:
          description: >
            **Only in case of dedicated IP**. IPs to associate to the sender. If
            passed, will replace all the existing IPs.
          type: array
          items:
            required:
              - domain
              - ip
            type: object
            properties:
              ip:
                description: Dedicated IP available in your account
                type: string
                example: 123.98.689.7
              domain:
                description: Domain of the IP
                type: string
                example: mycompany.com
              weight:
                description: >-
                  Weight to apply to the IP. Sum of all IP weights must be 100.
                  Should be passed for either ALL or NONE of the IPs. If it's
                  not passed, the sending will be equally balanced on all IPs.
                maximum: 100
                minimum: 1
                type: integer
                format: int64
                example: 50
    otp:
      required:
        - otp
      type: object
      properties:
        otp:
          description: 6 digit OTP received on email
          type: integer
          example: 123456
    createDomain:
      required:
        - name
      type: object
      properties:
        name:
          description: Domain name
          type: string
          example: mycompany.com
    updateChild:
      type: object
      properties:
        email:
          description: New Email address to update the child account
          type: string
          format: email
          example: josh.cruise@example.com
        firstName:
          description: New First name to use to update the child account
          type: string
          example: Josh
        lastName:
          description: New Last name to use to update the child account
          type: string
          example: Cruise
        companyName:
          description: New Company name to use to update the child account
          type: string
          example: Your Company
        password:
          description: New password for the child account to login
          type: string
          format: password
          example: Pa55w0rd65
    updateChildAccountStatus:
      type: object
      properties:
        transactionalEmail:
          description: >-
            Status of Transactional Email Platform activation for your account
            (true=enabled, false=disabled)
          type: boolean
          example: false
        transactionalSms:
          description: >-
            Status of Transactional SMS Platform activation for your account
            (true=enabled, false=disabled)
          type: boolean
          example: false
        marketingAutomation:
          description: >-
            Status of Marketing Automation Platform activation for your account
            (true=enabled, false=disabled)
          type: boolean
          example: true
        smsCampaign:
          description: >-
            Status of SMS Campaign Platform activation for your account
            (true=enabled, false=disabled)
          type: boolean
          example: true
    errorModel:
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: Error code displayed in case of a failure
          type: string
          example: method_not_allowed
          enum:
            - invalid_parameter
            - missing_parameter
            - out_of_range
            - campaign_processing
            - campaign_sent
            - document_not_found
            - reseller_permission_denied
            - not_enough_credits
            - permission_denied
            - duplicate_parameter
            - duplicate_request
            - method_not_allowed
            - unauthorized
            - account_under_validation
            - not_acceptable
            - bad_request
        message:
          description: Readable message associated to the failure
          type: string
          example: POST Method is not allowed on this path
    remainingCreditModel:
      required:
        - child
        - reseller
      type: object
      properties:
        child:
          description: Credits remaining for child account
          required:
            - email
            - sms
          type: object
          properties:
            sms:
              description: SMS Credits remaining for child account
              type: number
              format: double
              example: 500
            email:
              description: Email Credits remaining for child account
              type: number
              format: double
              example: 2000
        reseller:
          required:
            - email
            - sms
          type: object
          properties:
            sms:
              description: SMS Credits remaining for reseller account
              type: number
              format: double
              example: 12900
            email:
              description: Email Credits remaining for reseller account
              type: number
              format: double
              example: 2000000
    addCredits:
      type: object
      properties:
        sms:
          description: >
            **Required if email credits are empty.** SMS credits to be added to
            the child account
          type: integer
          format: int64
          example: 450
        email:
          description: >
            **Required if sms credits are empty.** Email credits to be added to
            the child account
          type: integer
          format: int64
          example: 1200
    removeCredits:
      type: object
      properties:
        sms:
          description: >
            **Required if email credits are empty.** SMS credits to be removed
            from the child account
          type: integer
          format: int64
          example: 300
        email:
          description: >
            **Required if sms credits are empty.** Email credits to be removed
            from the child account
          type: integer
          format: int64
          example: 500
    addChildDomain:
      type: object
      properties:
        domain:
          description: Sender domain to add for a specific child account
          type: string
          example: mychilddomain.com
    updateChildDomain:
      type: object
      properties:
        domain:
          description: Value for the sender domain that will replace the existing domain
          type: string
          example: myupdateddomain.com
    getProcesses:
      type: object
      properties:
        processes:
          description: List of processes available on your account
          type: array
          items:
            $ref: '#/components/schemas/getProcess'
        count:
          description: Number of processes available on your account
          type: integer
          format: int64
          example: 5
    getProcess:
      required:
        - id
        - name
        - status
      type: object
      properties:
        id:
          description: Id of the process
          type: integer
          format: int64
          example: 145
        status:
          description: Status of the process
          type: string
          example: queued
          enum:
            - queued
            - in_process
            - completed
        name:
          description: Process name
          type: string
          example: IMPORTUSER
        export_url:
          description: >-
            URL on which send export the of contacts once the process is
            completed
          type: string
          example: http://requestb.in/16ua3aj1
    getEmailCampaigns:
      type: object
      properties:
        campaigns:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getExtendedCampaignOverview'
              - required:
                  - recipients
                  - statistics
                type: object
                properties:
                  recipients:
                    $ref: '#/components/schemas/getCampaignRecipients'
                  statistics:
                    $ref: '#/components/schemas/getExtendedCampaignStats'
                  shareLink:
                    description: Link to share the campaign on social medias
                    type: string
                    format: url
                    example: http://dhh.brevo.com/fhsgccc.html?t=9865448900
                x-konfig-properties:
                  recipients:
                    type: object
                  statistics:
                    type: object
        count:
          description: Number of Email campaigns retrieved
          type: integer
          format: int64
          example: 24
    getSmsCampaigns:
      type: object
      properties:
        campaigns:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getSmsCampaignOverview'
              - required:
                  - recipients
                  - statistics
                type: object
                properties:
                  recipients:
                    $ref: '#/components/schemas/getCampaignRecipients'
                  statistics:
                    $ref: '#/components/schemas/getSmsCampaignStats'
                x-konfig-properties:
                  recipients:
                    type: object
                  statistics:
                    type: object
        count:
          description: Number of SMS campaigns retrieved
          type: integer
          format: int64
          example: 12
    getSmsCampaign:
      allOf:
        - $ref: '#/components/schemas/getSmsCampaignOverview'
        - required:
            - recipients
            - statistics
          type: object
          properties:
            recipients:
              $ref: '#/components/schemas/getCampaignRecipients'
            statistics:
              $ref: '#/components/schemas/getSmsCampaignStats'
          x-konfig-properties:
            recipients:
              type: object
            statistics:
              type: object
    getEmailCampaign:
      allOf:
        - $ref: '#/components/schemas/getExtendedCampaignOverview'
        - required:
            - recipients
            - statistics
          type: object
          properties:
            recipients:
              $ref: '#/components/schemas/getCampaignRecipients'
            statistics:
              $ref: '#/components/schemas/getExtendedCampaignStats'
          x-konfig-properties:
            recipients:
              type: object
            statistics:
              type: object
    getCampaignOverview:
      required:
        - id
        - name
        - status
        - type
      type: object
      properties:
        id:
          description: ID of the campaign
          type: integer
          format: int64
          example: 12
        name:
          description: Name of the campaign
          type: string
          example: EN - Sales Summer 2017
        subject:
          description: >-
            Subject of the campaign. Only available if `abTesting` flag of the
            campaign is `false`
          type: string
          example: 20% OFF for 2017 Summer Sales
        previewText:
          description: Preview text or preheader of the email campaign
          type: string
          example: Thanks for your order!
        type:
          description: Type of campaign
          type: string
          example: classic
          enum:
            - classic
            - trigger
        status:
          description: Status of the campaign
          type: string
          example: sent
          enum:
            - draft
            - sent
            - archive
            - queued
            - suspended
            - in_process
        scheduledAt:
          description: >-
            UTC date-time on which campaign is scheduled
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-06-01T12:30:00.000Z'
        abTesting:
          description: >-
            Status of A/B Test for the campaign. abTesting = false means it is
            disabled, & abTesting = true means it is enabled.
          type: boolean
          example: true
        subjectA:
          description: >-
            Subject A of the ab-test campaign. Only available if `abTesting`
            flag of the campaign is `true`
          type: string
          example: Discover the New Collection!
        subjectB:
          description: >-
            Subject B of the ab-test campaign. Only available if `abTesting`
            flag of the campaign is `true`
          type: string
          example: Want to discover the New Collection?
        splitRule:
          description: >-
            The size of your ab-test groups. Only available if `abTesting` flag
            of the campaign is `true`
          type: integer
          example: 25
        winnerCriteria:
          description: >-
            Criteria for the winning version. Only available if `abTesting` flag
            of the campaign is `true`
          type: string
          example: open
        winnerDelay:
          description: >-
            The duration of the test in hours at the end of which the winning
            version will be sent. Only available if `abTesting` flag of the
            campaign is `true`
          type: integer
          example: 50
        sendAtBestTime:
          description: >-
            It is true if you have chosen to send your campaign at best time,
            otherwise it is false
          type: boolean
          example: true
    getExtendedCampaignOverview:
      allOf:
        - $ref: '#/components/schemas/getCampaignOverview'
        - required:
            - createdAt
            - footer
            - header
            - htmlContent
            - modifiedAt
            - replyTo
            - sender
            - testSent
          type: object
          properties:
            testSent:
              description: >-
                Retrieved the status of test email sending. (true=Test email has
                been sent  false=Test email has not been sent)
              type: boolean
              example: true
            header:
              description: Header of the campaign
              type: string
              example: '[DEFAULT_HEADER]'
            footer:
              description: Footer of the campaign
              type: string
              example: '[DEFAULT_FOOTER]'
            sender:
              type: object
              properties:
                name:
                  description: Sender name of the campaign
                  type: string
                  example: Marketing
                email:
                  description: Sender email of the campaign
                  type: string
                  format: email
                  example: marketing@mycompany.com
                id:
                  description: Sender id of the campaign
                  type: integer
                  format: int64
                  example: 43
            replyTo:
              description: Email defined as the "Reply to" of the campaign
              type: string
              format: email
              example: replyto@domain.com
            toField:
              description: Customisation of the "to" field of the campaign
              type: string
              example: '{FNAME} {LNAME}'
            htmlContent:
              description: HTML content of the campaign
              type: string
              example: This is my HTML Content
            shareLink:
              description: Link to share the campaign on social medias
              type: string
              format: url
              example: http://dhh.brevo.com/fhsgccc.html?t=9865448900
            tag:
              description: Tag of the campaign
              type: string
              example: Newsletter
            createdAt:
              description: >-
                Creation UTC date-time of the campaign
                (YYYY-MM-DDTHH:mm:ss.SSSZ)
              type: string
              example: '2017-05-01T12:30:00.000Z'
            modifiedAt:
              description: >-
                UTC date-time of last modification of the campaign
                (YYYY-MM-DDTHH:mm:ss.SSSZ)
              type: string
              example: '2017-05-01T12:30:00.000Z'
            inlineImageActivation:
              description: >-
                Status of inline image. inlineImageActivation = false means
                image can’t be embedded, & inlineImageActivation = true means
                image can be embedded, in the email.
              type: boolean
              example: true
            mirrorActive:
              description: >-
                Status of mirror links in campaign. mirrorActive = false means
                mirror links are deactivated, & mirrorActive = true means mirror
                links are activated, in the campaign
              type: boolean
              example: true
            recurring:
              description: >-
                FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false
                means contact can receive the same Trigger campaign only once, &
                recurring = true means contact can receive the same Trigger
                campaign several times
              type: boolean
              example: true
            sentDate:
              description: >-
                Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ).
                Only available if 'status' of the campaign is 'sent'
              type: string
              example: '2018-12-01T16:30:00.000Z'
            returnBounce:
              description: >-
                Total number of non-delivered campaigns for a particular
                campaign id.
              type: integer
              format: int64
              example: 5
    getCampaignRecipients:
      required:
        - exclusionLists
        - lists
      type: object
      properties:
        lists:
          type: array
          items:
            description: List IDs included in the campaign
            type: integer
            format: int64
            example: 21
        exclusionLists:
          type: array
          items:
            description: List IDs excluded of the campaign
            type: integer
            format: int64
            example: 13
    getExtendedCampaignStats:
      required:
        - campaignStats
        - globalStats
        - linksStats
        - mirrorClick
        - remaining
        - statsByBrowser
        - statsByDevice
        - statsByDomain
      type: object
      properties:
        globalStats:
          $ref: '#/components/schemas/getCampaignStats'
        campaignStats:
          description: List-wise statistics of the campaign.
          type: array
          items:
            $ref: '#/components/schemas/getCampaignStats'
        mirrorClick:
          description: Number of clicks on mirror link
          type: integer
          format: int64
          example: 120
        remaining:
          description: Number of remaning emails to send
          type: integer
          format: int64
          example: 1000
        linksStats:
          description: Statistics about the number of clicks for the links
          type: object
          properties: {}
          example:
            example.abc.com: 7
            example.domain.com: 10
        statsByDomain:
          $ref: '#/components/schemas/getStatsByDomain'
        statsByDevice:
          $ref: '#/components/schemas/getStatsByDevice'
        statsByBrowser:
          $ref: '#/components/schemas/getStatsByBrowser'
      x-konfig-properties:
        globalStats:
          description: Overall statistics of the campaign
          type: object
    getStatsByDomain:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/getCampaignStats'
    getStatsByDevice:
      type: object
      properties:
        desktop:
          description: Statistics of the campaign on the basis of desktop devices
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
        mobile:
          description: Statistics of the campaign on the basis of mobile devices
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
        tablet:
          description: Statistics of the campaign on the basis of tablet devices
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
        unknown:
          description: Statistics of the campaign on the basis of unknown devices
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
    getStatsByBrowser:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/getDeviceBrowserStats'
    addContactToListByEmails:
      type: object
      properties:
        emails:
          description: >
            Emails to add to a list. You can pass a **maximum of 150 emails**
            for addition in one request. **_If you need to add the emails in
            bulk, please prefer /contacts/import api._**
          maxItems: 150
          minItems: 1
          type: array
          items:
            description: Email to add to a list
            type: string
            format: email
            example: john.smith@contact.com
    addContactToListByIDs:
      type: object
      properties:
        ids:
          description: >
            IDs to add to a list. You can pass a **maximum of 150 IDs** for
            addition in one request. **_If you need to add the emails in bulk,
            please prefer /contacts/import api._**
          maxItems: 150
          minItems: 1
          type: array
          items:
            description: ID to add to a list
            type: integer
            format: int64
            example: 10
    removeContactFromListByEmails:
      type: object
      properties:
        emails:
          description: >
            **Required if 'all' is false and 'ids' is empty.** Emails to remove
            from a list. You can pass a **maximum of 150 emails** for removal in
            one request.
          maxItems: 150
          minItems: 1
          type: array
          items:
            description: Email to remove from a list
            type: string
            format: email
            example: john.smith@contact.com
    removeContactFromListByIDs:
      type: object
      properties:
        ids:
          description: >
            **Required if 'all' is false and 'emails' is empty.** IDs to remove
            from a list. You can pass a **maximum of 150 IDs** for removal in
            one request.
          maxItems: 150
          minItems: 1
          type: array
          items:
            description: ID to remove from a list
            type: integer
            format: int64
            example: 10
    removeContactFromListByAll:
      type: object
      properties:
        all:
          description: >
            **Required if 'emails' and 'ids' are empty.** Remove all existing
            contacts from a list. A process will be created in this scenario.
            You can fetch the process details to know about the progress
          type: boolean
          example: true
    getSmsCampaignOverview:
      required:
        - content
        - createdAt
        - id
        - modifiedAt
        - name
        - sender
        - status
      type: object
      properties:
        id:
          description: ID of the SMS Campaign
          type: integer
          format: int64
          example: 2
        name:
          description: Name of the SMS Campaign
          type: string
          example: PROMO CODE
        status:
          description: Status of the SMS Campaign
          type: string
          example: draft
          enum:
            - draft
            - sent
            - archive
            - queued
            - suspended
            - inProcess
        content:
          description: Content of the SMS Campaign
          type: string
          example: Visit our Store and get some discount !
        scheduledAt:
          description: >-
            UTC date-time on which SMS campaign is scheduled. Should be in
            YYYY-MM-DDTHH:mm:ss.SSSZ format
          type: string
          example: '2017-06-01T12:30:00.000Z'
        sender:
          description: Sender of the SMS Campaign
          type: string
          example: MyCompany
        createdAt:
          description: >-
            Creation UTC date-time of the SMS campaign
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-06-01T12:30:00.000Z'
        modifiedAt:
          description: >-
            UTC date-time of last modification of the SMS campaign
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-01T12:30:00.000Z'
    getWhatsappCampaignOverview:
      required:
        - id
        - campaignName
        - campaignStatus
        - senderNumber
        - recipients
        - createdAt
        - template
        - modifiedAt
      type: object
      properties:
        id:
          description: ID of the WhatsApp Campaign
          type: integer
          format: int64
          example: 1672035851100690
        campaignName:
          description: Name of the WhatsApp Campaign
          type: string
          example: Test Campaign
        campaignStatus:
          description: Status of the WhatsApp Campaign
          type: string
          example: draft
          enum:
            - draft
            - scheduled
            - pending
            - approved
            - running
            - suspended
            - rejected
            - sent
        scheduledAt:
          description: >-
            UTC date-time on which WhatsApp campaign is scheduled. Should be in
            YYYY-MM-DDTHH:mm:ss.SSSZ format
          type: string
          example: '2017-06-01T12:30:00.000Z'
        senderNumber:
          description: Sender of the WhatsApp Campaign
          type: string
          example: 9368207029
        stats:
          $ref: '#/components/schemas/WhatsappCampStats'
        template:
          $ref: '#/components/schemas/WhatsappCampTemplate'
        createdAt:
          description: >-
            Creation UTC date-time of the WhatsApp campaign
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-06-01T12:30:00.000Z'
        modifiedAt:
          description: >-
            UTC date-time of last modification of the WhatsApp campaign
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-01T12:30:00.000Z'
    WhatsappCampStats:
      type: object
      required:
        - sent
        - delivered
        - read
        - unsubscribe
        - notSent
      properties:
        sent:
          type: integer
          example: 3
        delivered:
          type: integer
          example: 3
        read:
          type: integer
          example: 2
        unsubscribe:
          type: integer
          example: 0
        notSent:
          type: integer
          example: 4
    WhatsappCampTemplate:
      type: object
      properties:
        components:
          description: array of component item objects
          type: array
          items:
            $ref: '#/components/schemas/componentItems'
        name:
          description: name of the template
          type: string
          example: wta107
        category:
          description: description of the template
          type: string
          example: Marketing
        language:
          description: language of the template
          type: string
          example: en_GB
        contains_button:
          type: boolean
          example: false
        display_header:
          type: boolean
          example: true
        header_type:
          description: type of header
          type: string
          example: text
        header_variables:
          description: array of variables item object
          type: array
          items:
            $ref: '#/components/schemas/variablesItems'
        body_variables:
          description: array of variables item variables
          type: array
          items:
            $ref: '#/components/schemas/variablesItems'
        button_type:
          type: string
          example: QUICK_REPLIES
        hide_footer:
          type: boolean
          example: true
    componentItems:
      type: object
      properties:
        type:
          type: string
          example: BODY
        text:
          type: string
          example: Life is a long lesson in humility
    variablesItems:
      type: object
      properties:
        name:
          type: string
          example: FIRSTNAME
        default:
          type: string
          example: INVALID_HEADER
        datatype:
          type: string
          example: text
    bodyVariablesItems:
      type: object
    getWhatsappTemplates:
      type: object
      properties:
        templates:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - status
              - type
              - language
              - category
              - createdAt
              - modifiedAt
            properties:
              id:
                description: ID of the WhatsApp template
                type: integer
                format: int64
                example: 235
              name:
                description: Name of the WhatsApp template
                type: string
                example: Test template
              status:
                description: Status of the WhatsApp template
                type: string
                example: approved
              language:
                description: Language in which template exists
                type: string
                example: en
              category:
                description: category of the template
                type: string
                example: MARKETING
              errorReason:
                description: Error reason in the template creation
                type: string
                example: NONE
              createdAt:
                description: >-
                  Creation UTC date-time of the WhatsApp template
                  (YYYY-MM-DDTHH:mm:ss.SSSZ)
                type: string
                example: '2017-06-01T12:30:00.000Z'
              modifiedAt:
                description: >-
                  UTC date-time of last modification of the WhatsApp template
                  (YYYY-MM-DDTHH:mm:ss.SSSZ)
                type: string
                example: '2017-05-01T12:30:00.000Z'
        count:
          description: Number of WhatsApp templates retrieved
          type: integer
          format: int64
          example: 24
    getWhatsappCampaigns:
      type: object
      properties:
        campaigns:
          type: array
          items:
            type: object
            required:
              - id
              - campaignName
              - campaignStatus
              - templateId
              - scheduledAt
              - createdAt
              - modifiedAt
            properties:
              id:
                description: ID of the WhatsApp Campaign
                type: integer
                format: int64
                example: 1672035851100690
              campaignName:
                description: Name of the WhatsApp Campaign
                type: string
                example: Test Campaign
              templateId:
                description: Id of the WhatsApp template
                type: string
                example: 637660278078655
              campaignStatus:
                description: Status of the WhatsApp Campaign
                type: string
                example: draft
                enum:
                  - draft
                  - scheduled
                  - pending
                  - approved
                  - running
                  - suspended
                  - rejected
                  - sent
              scheduledAt:
                description: >-
                  UTC date-time on which WhatsApp campaign is scheduled. Should
                  be in YYYY-MM-DDTHH:mm:ss.SSSZ format
                type: string
                example: '2017-06-01T12:30:00.000Z'
              errorReason:
                description: Error Reason associated with the WhatsApp campaign sending
                type: string
              invalidatedContacts:
                description: Count of invalidated contacts
                type: integer
                format: int64
                example: 0
              readPercentage:
                description: Read percentage of the the WhatsApp campaign created
                type: number
                format: float
                example: 28.57
              stats:
                $ref: '#/components/schemas/WhatsappCampStats'
              createdAt:
                description: >-
                  Creation UTC date-time of the WhatsApp template
                  (YYYY-MM-DDTHH:mm:ss.SSSZ)
                type: string
                example: '2017-06-01T12:30:00.000Z'
              modifiedAt:
                description: >-
                  UTC date-time of last modification of the WhatsApp template
                  (YYYY-MM-DDTHH:mm:ss.SSSZ)
                type: string
                example: '2017-05-01T12:30:00.000Z'
        count:
          description: Number of WhatsApp campaigns retrieved
          type: integer
          format: int64
          example: 40
    createWhatsAppCampaign:
      type: object
      required:
        - name
        - templateId
        - scheduledAt
        - recipients
      properties:
        name:
          description: Name of the WhatsApp campaign creation
          type: string
          example: Test Campaign
        templateId:
          description: Id of the WhatsApp template in **approved** state
          type: integer
          example: 19
        scheduledAt:
          description: >
            Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass
            your timezone in date-time format for accurate result.For example:
            **2017-06-01T12:30:00+02:00**
          type: string
          example: '2017-06-01T10:30:00.000Z'
        recipients:
          description: Segment ids and List ids to include/exclude from campaign
          type: object
          properties:
            excludedListIds:
              description: List ids to exclude from the campaign
              type: array
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              description: >
                **Mandatory if scheduledAt is not empty**. List Ids to send the
                campaign to
              type: array
              items:
                type: integer
                format: int64
                example: 32
            segments:
              description: >
                **Mandatory if listIds are not used**. Segment ids to send the
                campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
    getWhatsAppConfig:
      type: object
      properties:
        whatsappBusinessAccountId:
          description: Id of the WhatsApp business account
          type: string
          example: 105569359072383
        sendingLimit:
          description: Sending limit Information of the WhatsApp API account
          type: string
          example: TIER_1K
        phoneNumberQuality:
          description: >-
            Quality status of phone number associated with WhatsApp account.
            There are three quality ratings. example - **High (GREEN) , Medium
            (YELLOW) and Low(RED)**
          type: string
          example: GREEN
          enum:
            - GREEN
            - YELLOW
            - RED
        whatsappBusinessAccountStatus:
          description: Status information related to WhatsApp API account
          type: string
          example: APPROVED
          enum:
            - APPROVED
            - PENDING
            - REJECTED
        businessStatus:
          description: Verification status information of the Business account
          type: string
          example: verified
        phoneNumberNameStatus:
          description: Status of the name associated with WhatsApp Phone number
          type: string
          example: APPROVED
          enum:
            - APPROVED
            - PENDING
            - REJECTED
    createWhatsAppTemplate:
      type: object
      required:
        - name
        - language
        - category
        - bodyText
      properties:
        name:
          description: Name of the template
          type: string
          example: Test template
        language:
          description: |
            Language of the template. For Example :
            **en** for English
          type: string
          example: en
        category:
          description: Category of the template
          type: string
          example: MARKETING
          enum:
            - MARKETING
            - UTILITY
        mediaUrl:
          description: >
            Absolute url of the media file **(no local file)** for the header.
            **Use this field in you want to add media in Template header and
            headerText is empty**.

            Allowed extensions for media files are:

            #### jpeg | png | mp4 | pdf
          type: string
          example: https://attachment.domain.com
        bodyText:
          description: Body of the template. **Maximum allowed characters are 1024**
          type: string
          example: making it look like readable English
        headerText:
          description: >
            Text content of the header in the template. **Maximum allowed
            characters are 45**

            **Use this field to add text content in template header and if
            mediaUrl is empty**
          type: string
          example: Test WhatsApp campaign
        source:
          description: source of the template
          type: string
          enum:
            - Automation
            - Conversations
    updateWhatsAppCampaign:
      type: object
      properties:
        campaignName:
          description: Name of the campaign
          type: string
          example: Test WhatsApp
        campaignStatus:
          description: Status of the campaign
          type: string
          example: scheduled
          enum:
            - scheduled
            - suspended
          default: scheduled
        rescheduleFor:
          description: >
            Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of
            campaign. **Prefer to pass your timezone in date-time format for
            accurate result.For example: **2017-06-01T12:30:00+02:00**

            Use this field to update the scheduledAt of any existing draft or
            scheduled WhatsApp campaign.
          type: string
          example: '2017-06-01T10:30:00.000Z'
        recipients:
          description: Segment ids and List ids to include/exclude from campaign
          type: object
          properties:
            excludedListIds:
              description: List ids to exclude from the campaign
              type: array
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              description: >
                **Mandatory if scheduledAt is not empty**. List Ids to send the
                campaign to
              type: array
              items:
                type: integer
                format: int64
                example: 32
            segments:
              description: >
                **Mandatory if listIds are not used**. Segment ids to send the
                campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
    createModel:
      required:
        - id
      type: object
      properties:
        id:
          description: ID of the object created
          type: integer
          format: int64
          example: 5
    createUpdateContactModel:
      type: object
      properties:
        id:
          description: ID of the contact when a new contact is created
          type: integer
          format: int64
          example: 122
    updateBatchContactsModel:
      type: object
      properties:
        successIds:
          type: array
          items:
            description: IDs which are successfully updated
            type: integer
            format: int64
          example: 1,2
        failureIds:
          type: array
          items:
            description: IDs which are not updated
            type: integer
            format: int64
          example: 3,4
    createSenderModel:
      required:
        - id
      type: object
      properties:
        id:
          description: ID of the Sender created
          type: integer
          format: int64
          example: 5
        spfError:
          description: >-
            Status of SPF configuration for the sender (true = SPF not well
            configured, false = SPF well configured)
          type: boolean
          example: true
        dkimError:
          description: >-
            Status of DKIM configuration for the sender (true = DKIM not well
            configured, false = DKIM well configured)
          type: boolean
          example: false
    createDomainModel:
      required:
        - id
      type: object
      properties:
        id:
          description: ID of the Domain created
          type: integer
          format: int64
          example: 5
        domain_name:
          description: Domain
          type: string
          example: example.com
        domain_provider:
          description: Domain Provider
          type: string
          example: GoDaddy
        message:
          description: Success message
          type: string
          example: >-
            Domain added successfully. To authenticate it, add following DNS
            records
        dns_records:
          type: object
          properties:
            dkim_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            brevo_code:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            dmarc_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
    authenticateDomainModel:
      required:
        - domain_name
        - message
      type: object
      properties:
        domain_name:
          description: Domain
          type: string
          example: myexample.com
        message:
          description: Success message
          type: string
          example: Domain has been authenticated successfully.
    getDomainConfigurationModel:
      required:
        - domain
        - verified
        - authenticated
        - dns_records
      type: object
      properties:
        domain:
          description: Domain
          type: string
          example: myexample.com
        verified:
          description: Status of domain verification (true=verified, false=non verified)
          type: boolean
          example: true
        authenticated:
          description: >-
            Status of domain authentication (true=authenticated, false=non
            authenticated)
          type: boolean
          example: false
        dns_records:
          type: object
          properties:
            dkim_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            brevo_code:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            dmarc_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
    createSmtpEmail:
      type: object
      properties:
        messageId:
          description: Message ID of the transactional email sent
          type: string
          example: <201798300811.5787683@relay.domain.com>
        messageIds:
          type: array
          items:
            description: version wise message ID's of the transactional emails sent
            type: string
            example:
              - <201798300811.5787683@relay.domain.com>
              - <201798300811.5787683@relay.domain.com>
    uploadImageModel:
      type: object
      properties:
        url:
          description: URL of the image uploaded
          type: string
          example: >-
            https://img.mailinblue.com/100000/images/rnb/original/62casdase8wewq9df1c2f27c.jpeg
    scheduleSmtpEmail:
      type: object
      properties:
        messageId:
          description: Message ID of the transactional email scheduled
          type: string
          example: <201798300811.5787683@relay.domain.com>
        messageIds:
          type: array
          items:
            description: version wise message ID's of the transactional emails scheduled
            type: string
        batchId:
          description: Batch ID of the batch transactional email scheduled
          type: string
          example: 5c6cfa04-eed9-42c2-8b5c-6d470d978e9d
    createReseller:
      required:
        - authKey
      type: object
      properties:
        authKey:
          description: AuthKey of Reseller child created
          type: string
          example: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
        id:
          description: Id of Reseller child created
          type: integer
          format: int64
          example: 1234567
    sendSms:
      required:
        - messageId
        - reference
      type: object
      properties:
        reference:
          type: string
          example: ab1cde2fgh3i4jklmno
        messageId:
          type: integer
          format: int64
          example: 1511882900176220
        smsCount:
          description: Count of SMS's to send multiple text messages
          type: integer
          format: int64
          example: 2
        usedCredits:
          description: SMS credits used per text message
          type: number
          format: float
          example: 0.7
        remainingCredits:
          description: Remaining SMS credits of the user
          type: number
          format: float
          example: 82.85
    createdProcessId:
      required:
        - processId
      type: object
      properties:
        processId:
          description: Id of the process created
          type: integer
          format: int64
          example: 78
    createUpdateFolder:
      type: object
      properties:
        name:
          description: Name of the folder
          type: string
          example: Wordpress Contacts
    postSendFailed:
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: Response code
          type: string
          example: invalid_parameter
        message:
          description: Response message
          type: string
          example: The email could not be sent to all recipients
        unexistingEmails:
          type: array
          items:
            description: >-
              Email addresses you tried to sent an email to, but not existing in
              your contacts
            type: string
            format: email
            example: matthew.dow@example.com, elisa.carrely@example.com
        withoutListEmails:
          type: array
          items:
            description: Email addresses you sent an email to, without a contact list
            type: string
            format: email
            example: jeff.dean@example.com, jim.sue@example.com
        blackListedEmails:
          type: array
          items:
            description: >-
              Email addresses which are blacklisted. ONLY FOR email-campign's
              sendTest OR smtp-template's sendTest api's.
            type: string
            format: email
            example: jeff.dean@example.com, jim.sue@example.com
    postSendSmsTestFailed:
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: Response code
          type: string
          example: invalid_parameter
        message:
          description: Response message
          type: string
          example: The SMS could not be sent to all recipients
        unexistingSms:
          type: array
          items:
            description: >-
              Email addresses you tried to sent a SMS to, but not existing in
              your contacts
            type: string
            format: email
            example: 337699086644@mailin.com, 41778899954@mailin.com
        withoutListSms:
          type: array
          items:
            description: Email addresses you sent a SMS to, without a contact list
            type: string
            format: email
            example: 3542388988@mailin.com, 10976444477@mailin.com
    postContactInfo:
      required:
        - contacts
      type: object
      properties:
        contacts:
          type: object
          properties:
            success:
              oneOf:
                - type: array
                  items:
                    description: Email addresses which are successfully imported/removed
                    type: string
                    format: email
                  example: jeff32@example.com, jim56@example.com
                - type: array
                  items:
                    description: IDs which are successfully imported/removed
                    type: integer
                    format: int64
                  example: 1, 2
            failure:
              oneOf:
                - type: array
                  items:
                    description: >-
                      Email addresses which can not be imported/removed, could
                      be already in/out list and/or doesn't exist
                    type: string
                    format: email
                    example: jeff32@example.com, jim56@example.com
                - type: array
                  items:
                    description: >-
                      IDs which can not be imported/removed, could be already
                      in/out list and/or doesn't exist
                    type: integer
                    format: int64
                    example: 5
            total:
              description: >-
                Displays the count of total number of contacts removed from list
                when user opts for "all" option.
              type: integer
              format: int64
              example: 27
            processId:
              description: >-
                Id of the process created to remove contacts from list when user
                opts for "all" option.
              type: integer
              format: int64
              example: 78
    getAggregatedReport:
      type: object
      properties:
        range:
          description: Time frame of the report
          type: string
          example: 2016-09-08|2017-04-06
        requests:
          description: Number of requests for the timeframe
          type: integer
          format: int64
          example: 263
        delivered:
          description: Number of delivered emails for the timeframe
          type: integer
          format: int64
          example: 249
        hardBounces:
          description: Number of hardbounces for the timeframe
          type: integer
          format: int64
          example: 1
        softBounces:
          description: Number of softbounces for the timeframe
          type: integer
          format: int64
          example: 4
        clicks:
          description: Number of clicks for the timeframe
          type: integer
          format: int64
          example: 12
        uniqueClicks:
          description: Number of unique clicks for the timeframe
          type: integer
          format: int64
          example: 8
        opens:
          description: Number of openings for the timeframe
          type: integer
          format: int64
          example: 47
        uniqueOpens:
          description: Number of unique openings for the timeframe
          type: integer
          format: int64
          example: 37
        spamReports:
          description: Number of complaint (spam report) for the timeframe
          type: integer
          format: int64
          example: 0
        blocked:
          description: Number of blocked contact emails for the timeframe
          type: integer
          format: int64
          example: 2
        invalid:
          description: Number of invalid emails for the timeframe
          type: integer
          format: int64
          example: 0
        unsubscribed:
          description: Number of unsubscribed emails for the timeframe
          type: integer
          format: int64
          example: 0
    getTransacBlockedContacts:
      type: object
      properties:
        count:
          description: Count of blocked or unsubscribed contact
          type: integer
          format: int64
          example: 1
        contacts:
          type: array
          items:
            required:
              - blockedAt
              - email
              - reason
              - senderEmail
            type: object
            properties:
              email:
                description: Email address of the blocked or unsubscribed contact
                type: string
                format: email
                example: john.smith@example.com
              senderEmail:
                description: Sender email address of the blocked or unsubscribed contact
                type: string
                format: email
                example: john.smith@example.com
              reason:
                description: Reason for blocking / unsubscribing
                type: object
                properties:
                  code:
                    description: >-
                      Reason code for blocking / unsubscribing (This code is
                      safe for comparison)
                    type: string
                    example: AdminBlocked
                    enum:
                      - unsubscribedViaMA
                      - unsubscribedViaEmail
                      - adminBlocked
                      - unsubscribedViaApi
                      - hardBounce
                      - contactFlaggedAsSpam
                  message:
                    description: >-
                      Reason for blocking / unsubscribing (This string is not
                      safe for comparison)
                    type: string
                    example: Admin blocked
                example: Admin blocked
              blockedAt:
                description: Date when the contact was blocked or unsubscribed on
                type: string
                example: '2017-05-01T12:30:00.000Z'
    getReports:
      type: object
      properties:
        reports:
          type: array
          items:
            required:
              - blocked
              - clicks
              - date
              - delivered
              - hardBounces
              - invalid
              - opens
              - requests
              - softBounces
              - spamReports
              - uniqueClicks
              - uniqueOpens
              - unsubscribed
            type: object
            properties:
              date:
                description: Date of the statistics
                type: string
                format: date
                example: '2017-04-06T00:00:00.000Z'
              requests:
                description: Number of requests for the date
                type: integer
                format: int64
                example: 65
              delivered:
                description: Number of delivered emails for the date
                type: integer
                format: int64
                example: 63
              hardBounces:
                description: Number of hardbounces for the date
                type: integer
                format: int64
                example: 1
              softBounces:
                description: Number of softbounces for the date
                type: integer
                format: int64
                example: 1
              clicks:
                description: Number of clicks for the date
                type: integer
                format: int64
                example: 6
              uniqueClicks:
                description: Number of unique clicks for the date
                type: integer
                format: int64
                example: 5
              opens:
                description: Number of openings for the date
                type: integer
                format: int64
                example: 58
              uniqueOpens:
                description: Number of unique openings for the date
                type: integer
                format: int64
                example: 52
              spamReports:
                description: Number of complaints (spam reports) for the date
                type: integer
                format: int64
                example: 0
              blocked:
                description: Number of blocked emails for the date
                type: integer
                format: int64
                example: 0
              invalid:
                description: Number of invalid emails for the date
                type: integer
                format: int64
                example: 0
              unsubscribed:
                description: Number of unsubscribed emails for the date
                type: integer
                format: int64
                example: 0
    getEmailEventReport:
      type: object
      properties:
        events:
          type: array
          items:
            required:
              - date
              - email
              - event
              - messageId
            type: object
            properties:
              email:
                description: Email address which generates the event
                type: string
                format: email
                example: john.smith@example.com
              date:
                description: UTC date-time on which the event has been generated
                type: string
                example: '2017-03-12T12:30:00.000Z'
              subject:
                description: Subject of the event
                type: string
                example: Sib client test
              messageId:
                description: Message ID which generated the event
                type: string
                example: <201798300811.5787683@relay.domain.com>
              event:
                description: Event which occurred
                type: string
                example: delivered
                enum:
                  - bounces
                  - hardBounces
                  - softBounces
                  - delivered
                  - spam
                  - requests
                  - opened
                  - clicks
                  - invalid
                  - deferred
                  - blocked
                  - unsubscribed
                  - error
                  - loadedByProxy
              reason:
                description: >-
                  Reason of bounce (only available if the event is hardbounce or
                  softbounce)
                type: string
                example: Error connection timeout
              tag:
                description: Tag of the email which generated the event
                type: string
                example: OrderConfirmation
              ip:
                description: >-
                  IP from which the user has opened the email or clicked on the
                  link (only available if the event is opened or clicks)
                type: string
                example: 165.87.3.15
              link:
                description: >-
                  The link which is sent to the user (only available if the
                  event is requests or opened or clicks)
                type: string
                example: https://www.someexamplelink.com
              from:
                description: Sender email from which the emails are sent
                type: string
                format: email
                example: john@example.com
              templateId:
                description: >-
                  ID of the template (only available if the email is template
                  based)
                type: integer
                format: int64
                example: 4
    getSmsEventReport:
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            properties:
              phoneNumber:
                description: Phone number which has generated the event
                type: string
                example: '00189001094'
              date:
                description: UTC date-time on which the event has been generated
                type: string
                example: '2017-03-12T12:30:00.000Z'
              messageId:
                description: Message ID which generated the event
                type: string
                example: '1472640582425378'
              event:
                description: Event which occurred
                type: string
                example: accepted
                enum:
                  - bounces
                  - hardBounces
                  - softBounces
                  - delivered
                  - sent
                  - accepted
                  - unsubscription
                  - replies
                  - blocked
                  - rejected
              reason:
                description: >-
                  Reason of bounce (only available if the event is hardbounce or
                  softbounce)
                type: string
                example: >-
                  Message is undeliverable due to an incorrect / invalid /
                  blacklisted / permanently barred MSISDN for this operator
              reply:
                type: string
              tag:
                description: Tag of the SMS which generated the event
                type: string
                example: CabWaiting
    getSmtpTemplateOverview:
      required:
        - createdAt
        - htmlContent
        - id
        - isActive
        - modifiedAt
        - name
        - replyTo
        - sender
        - subject
        - tag
        - testSent
        - toField
      type: object
      properties:
        id:
          description: ID of the template
          type: integer
          format: int64
          example: 4
        name:
          description: Name of the template
          type: string
          example: Order Confirmation - EN
        subject:
          description: Subject of the template
          type: string
          example: Thanks for your order !
        isActive:
          description: Status of template (true=active, false=inactive)
          type: boolean
          example: true
        testSent:
          description: >-
            Status of test sending for the template (true=test email has been
            sent, false=test email has not been sent)
          type: boolean
          example: true
        sender:
          type: object
          properties:
            name:
              description: From email for the template
              type: string
              example: Mary form MyShop
            email:
              description: From email for the template
              type: string
              format: email
              example: contact@myshop.fr
            id:
              description: Sender id of the template
              type: string
              example: '43'
        replyTo:
          description: Email defined as the "Reply to" for the template
          type: string
          format: email
          example: replyto@domain.com
        toField:
          description: Customisation of the "to" field for the template
          type: string
          example: '{FIRSTNAME} {LASTNAME}'
        tag:
          description: Tag of the template
          type: string
          example: sports
        htmlContent:
          description: HTML content of the template
          type: string
          example: Your order n°xxxxx has been confirmed. Thanks for your purchase.
        createdAt:
          description: Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-01T12:30:00.000Z'
        modifiedAt:
          description: >-
            Last modification UTC date-time of the template
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        doiTemplate:
          description: >-
            It is true if template is a valid Double opt-in (DOI) template,
            otherwise it is false. This field will be available only in case of
            single template detail call.
          type: boolean
          example: false
    getSmtpTemplates:
      type: object
      properties:
        count:
          description: Count of transactional email templates
          type: integer
          format: int64
          example: 1
        templates:
          type: array
          items:
            $ref: '#/components/schemas/getSmtpTemplateOverview'
    getWebhook:
      required:
        - createdAt
        - description
        - events
        - id
        - modifiedAt
        - type
        - url
      type: object
      properties:
        description:
          description: Description of the webhook
          type: string
          example: Webhook triggered on campaign openings
        url:
          description: URL of the webhook
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        id:
          description: ID of the webhook
          type: integer
          format: int64
          example: 654
        events:
          type: array
          items:
            description: Events which will trigger the webhook when they occure
            type: string
            example: opens,clicks
        type:
          description: Type of webhook (marketing or transactional)
          type: string
          example: marketing
          enum:
            - marketing
            - transactional
        createdAt:
          description: Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2016-12-01T12:50:00.000Z'
        modifiedAt:
          description: >-
            Last modification UTC date-time of the webhook
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T13:15:00.000Z'
        batched:
          description: >-
            Batching configuration of the webhook, we send batched webhooks if
            its true
          type: boolean
          example: true
        auth:
          description: Authentication header to be send with the webhook requests
          type: object
          example:
            type: bearer
            token: test-auth-token1234
        headers:
          type: array
          items:
            description: Headers send with the requests to the webhook
            type: object
            example:
              key: cf-secret
              value: test-header-value
    getWebhooks:
      required:
        - webhooks
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/getWebhook'
    getContactDetails:
      required:
        - attributes
        - createdAt
        - emailBlacklisted
        - id
        - listIds
        - modifiedAt
        - smsBlacklisted
      type: object
      properties:
        email:
          description: Email address of the contact for which you requested the details
          type: string
          format: email
          example: john.smith@example.com
        id:
          description: ID of the contact for which you requested the details
          type: integer
          format: int64
          example: 32
        emailBlacklisted:
          description: >-
            Blacklist status for email campaigns (true=blacklisted, false=not
            blacklisted)
          type: boolean
          example: false
        smsBlacklisted:
          description: >-
            Blacklist status for SMS campaigns (true=blacklisted, false=not
            blacklisted)
          type: boolean
          example: true
        createdAt:
          description: Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        modifiedAt:
          description: >-
            Last modification UTC date-time of the contact
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        listIds:
          type: array
          items:
            description: List(s) in which the contact is included
            type: integer
            format: int64
        listUnsubscribed:
          type: array
          items:
            description: >-
              List(s) in which the contact is included (only available if
              unsubscription per list is activated for the account)
            type: integer
            format: int64
        attributes:
          description: Set of attributes of the contact
          type: object
          properties: {}
          example:
            name: Joe
            email: joe@example.com
    getExtendedContactDetails:
      allOf:
        - $ref: '#/components/schemas/getContactDetails'
        - required:
            - statistics
          type: object
          properties:
            statistics:
              description: Campaign statistics of the contact
              type: object
              properties:
                messagesSent:
                  description: Listing of the sent campaign for the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      eventTime:
                        description: UTC date-time of the event
                        type: string
                        example: '2017-03-12T20:15:13.000Z'
                hardBounces:
                  description: Listing of the hardbounes generated by the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      eventTime:
                        description: UTC date-time of the event
                        type: string
                        example: '2017-03-12T20:15:13.000Z'
                softBounces:
                  description: Listing of the softbounes generated by the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      eventTime:
                        description: UTC date-time of the event
                        type: string
                        example: '2017-03-12T20:15:13.000Z'
                complaints:
                  description: Listing of the complaints generated by the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      eventTime:
                        description: UTC date-time of the event
                        type: string
                        example: '2017-03-12T20:15:13.000Z'
                unsubscriptions:
                  description: Listing of the unsubscription for the contact
                  required:
                    - adminUnsubscription
                    - userUnsubscription
                  type: object
                  properties:
                    userUnsubscription:
                      description: >-
                        Contact unsubscribe via unsubscription link in a
                        campaign
                      type: array
                      items:
                        required:
                          - campaignId
                          - eventTime
                        type: object
                        properties:
                          campaignId:
                            description: ID of the campaign which generated the event
                            type: integer
                            format: int64
                            example: 3
                          eventTime:
                            description: UTC date-time of the event
                            type: string
                            example: '2017-03-12T20:15:13.000Z'
                          ip:
                            description: IP from which the user has unsubscribed
                            type: string
                            example: 165.87.3.15
                    adminUnsubscription:
                      description: Contact has been unsubscribed from the administrator
                      type: array
                      items:
                        required:
                          - eventTime
                        type: object
                        properties:
                          eventTime:
                            description: UTC date-time of the event
                            type: string
                            example: '2017-03-12T20:15:13.000Z'
                          ip:
                            description: IP from which the user has been unsubscribed
                            type: string
                            example: 165.87.3.15
                opened:
                  description: Listing of the openings generated by the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - count
                      - eventTime
                      - ip
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      count:
                        description: Number of openings for the campaign
                        type: integer
                        format: int64
                        example: 1
                      eventTime:
                        description: UTC date-time of the event
                        type: string
                        example: '2017-03-12T20:15:13.000Z'
                      ip:
                        description: IP from which the user has opened the email
                        type: string
                        example: 165.87.3.15
                clicked:
                  description: Listing of the clicks generated by the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - links
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      links:
                        description: Listing of the clicked links for the campaign
                        type: array
                        items:
                          required:
                            - count
                            - eventTime
                            - ip
                            - url
                          type: object
                          properties:
                            count:
                              description: Number of clicks on this link for the campaign
                              type: integer
                              format: int64
                              example: 1
                            eventTime:
                              description: UTC date-time of the event
                              type: string
                              example: '2017-03-12T20:15:13.000Z'
                            ip:
                              description: IP from which the user has clicked on the link
                              type: string
                              example: 165.87.3.15
                            url:
                              description: URL of the clicked link
                              type: string
                              example: www.myshop.com
                transacAttributes:
                  description: Listing of the transactional attributes for the contact
                  type: array
                  items:
                    type: object
                    properties: {}
                delivered:
                  description: Listing of the delivered campaign for the contact
                  type: array
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        description: ID of the campaign which generated the event
                        type: integer
                        format: int64
                        example: 3
                      eventTime:
                        description: UTC date-time of the event
                        type: string
                        example: '2017-03-12T20:15:13.000Z'
    getContactCampaignStats:
      description: Campaign Statistics for the contact
      type: object
      properties:
        messagesSent:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              eventTime:
                description: UTC date-time of the event
                type: string
                example: '2017-03-12T20:15:13.000Z'
        hardBounces:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              eventTime:
                description: UTC date-time of the event
                type: string
                example: '2017-03-12T20:15:13.000Z'
        softBounces:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              eventTime:
                description: UTC date-time of the event
                type: string
                example: '2017-03-12T20:15:13.000Z'
        complaints:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              eventTime:
                description: UTC date-time of the event
                type: string
                example: '2017-03-12T20:15:13.000Z'
        unsubscriptions:
          required:
            - adminUnsubscription
            - userUnsubscription
          type: object
          properties:
            userUnsubscription:
              description: >-
                Contact has unsubscribed via the unsubscription link in the
                email
              type: array
              items:
                required:
                  - campaignId
                  - eventTime
                type: object
                properties:
                  campaignId:
                    description: ID of the campaign which generated the event
                    type: integer
                    format: int64
                    example: 3
                  eventTime:
                    description: UTC date-time of the event
                    type: string
                    example: '2017-03-12T20:15:13.000Z'
                  ip:
                    description: IP from which the user has unsubscribed
                    type: string
                    example: 165.87.3.15
            adminUnsubscription:
              description: Contact has been unsubscribed from the administrator
              type: array
              items:
                required:
                  - eventTime
                type: object
                properties:
                  eventTime:
                    description: UTC date-time of the event
                    type: string
                    example: '2017-03-12T20:15:13.000Z'
                  ip:
                    description: IP from which the user has been unsubscribed
                    type: string
                    example: 165.87.3.15
        opened:
          type: array
          items:
            required:
              - campaignId
              - count
              - eventTime
              - ip
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              count:
                description: Number of openings of the campaign
                type: integer
                format: int64
                example: 3
              eventTime:
                description: UTC date-time of the event
                type: string
                example: '2017-03-12T20:15:13.000Z'
              ip:
                description: IP from which the user has opened the campaign
                type: string
                example: 165.87.3.15
        clicked:
          type: array
          items:
            required:
              - campaignId
              - links
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              links:
                type: array
                items:
                  required:
                    - count
                    - eventTime
                    - ip
                    - url
                  type: object
                  properties:
                    count:
                      description: Number of clicks on this link for the campaign
                      type: integer
                      format: int64
                      example: 1
                    eventTime:
                      description: UTC date-time of the event
                      type: string
                      example: '2017-03-12T20:15:13.000Z'
                    ip:
                      description: IP from which the user has clicked on the link
                      type: string
                      example: 165.87.3.15
                    url:
                      description: URL of the clicked link
                      type: string
                      example: www.myshop.com
        transacAttributes:
          type: array
          items:
            required:
              - orderDate
              - orderId
              - orderPrice
            type: object
            properties:
              orderDate:
                description: Date of the order
                type: string
                format: date
                example: '2017-03-12T00:00:00.000Z'
              orderPrice:
                description: Price of the order
                type: number
                format: float
                example: 24.99
              orderId:
                description: ID of the order
                type: integer
                format: int64
                example: 248
        delivered:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                description: ID of the campaign which generated the event
                type: integer
                format: int64
                example: 3
              eventTime:
                description: UTC date-time of the event
                type: string
                example: '2017-03-12T20:15:13.000Z'
    getContacts:
      required:
        - contacts
        - count
      type: object
      properties:
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/getContactDetails'
        count:
          description: Number of contacts
          type: integer
          format: int64
          example: 17655
    getAttributes:
      required:
        - attributes
      type: object
      properties:
        attributes:
          description: Listing of available contact attributes in your account
          type: array
          items:
            required:
              - category
              - name
            type: object
            properties:
              name:
                description: Name of the attribute
                type: string
                example: LASTNAME
              category:
                description: Category of the attribute
                type: string
                example: category
                enum:
                  - normal
                  - transactional
                  - category
                  - calculated
                  - global
              type:
                description: Type of the attribute
                type: string
                example: text
                enum:
                  - text
                  - date
                  - float
                  - id
                  - boolean
              enumeration:
                description: Parameter only available for "category" type attributes.
                type: array
                items:
                  required:
                    - label
                    - value
                  type: object
                  properties:
                    value:
                      description: ID of Value of the "category" type attribute
                      type: integer
                      format: int64
                      example: 1
                    label:
                      description: Label of the "category" type attribute
                      type: string
                      example: Women
              calculatedValue:
                description: Calculated value formula
                type: string
                example: COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]
    getFolders:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/getFolder'
        count:
          description: Number of folders available in your account
          type: integer
          format: int64
          example: 10
    getFolder:
      required:
        - id
        - name
        - totalBlacklisted
        - totalSubscribers
        - uniqueSubscribers
      type: object
      properties:
        id:
          description: ID of the folder
          type: integer
          format: int64
          example: 2
        name:
          description: Name of the folder
          type: string
          example: Magento Customers
        totalBlacklisted:
          description: Number of blacklisted contacts in the folder
          type: integer
          format: int64
          example: 32
        totalSubscribers:
          description: Number of contacts in the folder
          type: integer
          format: int64
          example: 19777
        uniqueSubscribers:
          description: Number of unique contacts in the folder
          type: integer
          format: int64
          example: 16222
    getFolderLists:
      type: object
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/getList'
        count:
          description: Number of lists in the folder
          type: integer
          format: int64
          example: 6
    getLists:
      type: object
      properties:
        lists:
          description: Listing of all the lists available in your account
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getList'
              - required:
                  - folderId
                type: object
                properties:
                  folderId:
                    description: ID of the folder
                    type: integer
                    format: int64
                    example: 2
        count:
          description: Number of lists in your account
          type: integer
          format: int64
          example: 150
    getSegments:
      type: object
      properties:
        segments:
          description: Listing of all the segments available in your account
          type: array
          items:
            type: object
            required:
              - id
              - name
              - segmentName
              - categoryName
          properties:
            id:
              description: ID of the list
              type: integer
              format: int64
              example: 23
            segmentName:
              description: Name of the Segment
              type: string
              example: My Segment
            categoryName:
              description: Name of the Segment Category
              type: string
              format: string
              example: New Category
            updatedAt:
              description: Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)
              type: string
              example: '2017-03-13T17:05:09Z'
        count:
          description: Number of Segments in your account
          type: integer
          format: int64
          example: 10
    getList:
      required:
        - id
        - name
        - totalBlacklisted
        - totalSubscribers
        - uniqueSubscribers
      type: object
      properties:
        id:
          description: ID of the list
          type: integer
          format: int64
          example: 23
        name:
          description: Name of the list
          type: string
          example: Magento Customers - EN
        totalBlacklisted:
          description: Number of blacklisted contacts in the list
          type: integer
          format: int64
          example: 13
        totalSubscribers:
          description: Number of contacts in the list
          type: integer
          format: int64
          example: 1776
        uniqueSubscribers:
          description: Number of unique contacts in the list
          type: integer
          format: int64
          example: 1789
    getExtendedList:
      allOf:
        - $ref: '#/components/schemas/getList'
        - required:
            - createdAt
            - folderId
          type: object
          properties:
            folderId:
              description: ID of the folder
              type: integer
              format: int64
              example: 2
            createdAt:
              description: Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
              type: string
              example: '2017-03-13T17:05:09.000Z'
            campaignStats:
              type: array
              items:
                required:
                  - campaignId
                  - stats
                type: object
                properties:
                  campaignId:
                    description: ID of the campaign
                    type: integer
                    format: int64
                    example: 143
                  stats:
                    $ref: '#/components/schemas/getCampaignStats'
            dynamicList:
              description: >-
                Status telling if the list is dynamic or not (true=dynamic,
                false=not dynamic)
              type: boolean
              example: false
    getSmsCampaignStats:
      required:
        - answered
        - delivered
        - hardBounces
        - processing
        - sent
        - softBounces
        - unsubscriptions
      type: object
      properties:
        delivered:
          description: Number of delivered SMS
          type: integer
          format: int64
          example: 2987
        sent:
          description: Number of sent SMS
          type: integer
          format: int64
          example: 3000
        processing:
          description: Number of processing SMS
          type: integer
          format: int64
          example: 0
        softBounces:
          description: Number of softbounced SMS
          type: integer
          format: int64
          example: 3
        hardBounces:
          description: Number of hardbounced SMS
          type: integer
          format: int64
          example: 1
        unsubscriptions:
          description: Number of unsubscription SMS
          type: integer
          format: int64
          example: 3
        answered:
          description: Number of replies to the SMS
          type: integer
          format: int64
          example: 2
    getDeviceBrowserStats:
      required:
        - clickers
        - uniqueClicks
        - uniqueViews
        - viewed
      type: object
      properties:
        clickers:
          description: Number of total clicks for the campaign using the particular browser
          type: integer
          format: int64
          example: 2665
        uniqueClicks:
          description: >-
            Number of unique clicks for the campaign using the particular
            browser
          type: integer
          format: int64
          example: 2300
        viewed:
          description: Number of openings for the campaign using the particular browser
          type: integer
          format: int64
          example: 8999
        uniqueViews:
          description: >-
            Number of unique openings for the campaign using the particular
            browser
          type: integer
          format: int64
          example: 7779
    getCampaignStats:
      required:
        - clickers
        - complaints
        - delivered
        - hardBounces
        - sent
        - softBounces
        - uniqueClicks
        - uniqueViews
        - unsubscriptions
        - viewed
        - trackableViews
      type: object
      properties:
        listId:
          description: >-
            List Id of email campaign (only in case of get email campaign(s)(not
            for global stats))
          type: integer
          format: int64
          example: 2
        uniqueClicks:
          description: Number of unique clicks for the campaign
          type: integer
          format: int64
          example: 2300
        clickers:
          description: Number of total clicks for the campaign
          type: integer
          format: int64
          example: 2665
        complaints:
          description: Number of complaints (Spam reports) for the campaign
          type: integer
          format: int64
          example: 1
        delivered:
          description: Number of delivered emails for the campaign
          type: integer
          format: int64
          example: 19765
        sent:
          description: Number of sent emails for the campaign
          type: integer
          format: int64
          example: 19887
        softBounces:
          description: Number of softbounce for the campaign
          type: integer
          format: int64
          example: 100
        hardBounces:
          description: Number of harbounce for the campaign
          type: integer
          format: int64
          example: 87
        uniqueViews:
          description: Number of unique openings for the campaign
          type: integer
          format: int64
          example: 7779
        trackableViews:
          description: >-
            Recipients without any privacy protection option enabled in their
            email client
          type: integer
          format: int64
          example: 5661
        trackableViewsRate:
          description: >-
            Rate of recipients without any privacy protection option enabled in
            their email client
          type: number
          format: float
          example: 23.45
        estimatedViews:
          description: >-
            Rate of recipients without any privacy protection option enabled in
            their email client, applied to all delivered emails
          type: integer
          format: int64
          example: 560
        unsubscriptions:
          description: Number of unsubscription for the campaign
          type: integer
          format: int64
          example: 2
        viewed:
          description: Number of openings for the campaign
          type: integer
          format: int64
          example: 8999
        deferred:
          description: Number of deferred emails for the campaign
          type: integer
          format: int64
          example: 30
        returnBounce:
          description: >-
            Total number of non-delivered campaigns for a particular campaign
            id.
          type: integer
          format: int64
          example: 5
    updateSmtpTemplate:
      type: object
      properties:
        tag:
          description: Tag of the template
          type: string
          example: OrderConfirmation
        sender:
          description: >
            Sender details including id or email and name (_optional_). Only one
            of either Sender's email or Sender's ID shall be passed in one
            request at a time. For example:

            **{"name":"xyz", "email":"example@abc.com"}**

            **{"name":"xyz", "id":123}**
          type: object
          properties:
            name:
              description: Name of the sender
              type: string
              example: Mary from MyShop
            email:
              description: Email of the sender
              type: string
              format: email
              example: contact@myshop.com
            id:
              description: >
                Select the sender for the template on the basis of sender id.

                _In order to select a sender with specific pool of IP’s,
                dedicated ip users shall pass id (instead of email)_.
              type: integer
              format: int64
              example: 3
        templateName:
          description: Name of the template
          type: string
          example: Order Confirmation - EN
        htmlContent:
          description: >
            **Required if htmlUrl is empty**. If the template is designed using
            Drag & Drop editor via HTML content, then the design page will not
            have Drag & Drop editor access for that template. Body of the
            message (HTML must have more than 10 characters)
          type: string
          example: The order n°xxxxx has been confirmed. Thanks for your purchase
        htmlUrl:
          description: >
            **Required if htmlContent is empty**. URL to the body of the email
            (HTML)
          type: string
          format: url
          example: https://html.domain.com
        subject:
          description: Subject of the email
          type: string
          example: Thanks for your purchase !
        replyTo:
          description: Email on which campaign recipients will be able to reply to
          type: string
          format: email
          example: support@myshop.com
        toField:
          description: >
            To personalize the **To** Field. If you want to include the first
            name and last name of your recipient, add **{FNAME} {LNAME}**. These
            contact attributes must already exist in your Brevo account. If
            input parameter **params** used please use **{{contact.FNAME}}
            {{contact.LNAME}}** for personalization
          type: string
          example: '{FNAME} {LNAME}'
        attachmentUrl:
          description: >
            Absolute url of the attachment (**no local file**). Extensions
            allowed:

            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
            png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
            pptx, tar, ez, ics, mobi, msg, pub and eps
          type: string
          format: url
          example: https://attachment.domain.com
        isActive:
          description: >-
            Status of the template. isActive = false means template is inactive,
            isActive = true means template is active
          type: boolean
          example: true
    updateCampaignStatus:
      description: Status of the campaign
      type: object
      properties:
        status:
          description: >
            Note:- **replicateTemplate** status will be available **only for
            template type campaigns.**
          type: string
          enum:
            - suspended
            - archive
            - darchive
            - sent
            - queued
            - replicate
            - replicateTemplate
            - draft
      example: draft
    createSmtpTemplate:
      required:
        - sender
        - subject
        - templateName
      type: object
      properties:
        tag:
          description: Tag of the template
          type: string
          example: OrderConfirmation
        sender:
          description: >
            Sender details including id or email and name (_optional_). Only one
            of either Sender's email or Sender's ID shall be passed in one
            request at a time. For example:

            **{"name":"xyz", "email":"example@abc.com"}**

            **{"name":"xyz", "id":123}**
          type: object
          properties:
            name:
              description: |
                Name of the sender. **If not passed, will be set to default**
              type: string
              example: Mary from MyShop
            email:
              description: Email of the sender
              type: string
              format: email
              example: contact@myshop.com
            id:
              description: >
                Select the sender for the template on the basis of sender id.

                _In order to select a sender with specific pool of IP’s,
                dedicated ip users shall pass id (instead of email)_.
              type: integer
              format: int64
              example: 3
        templateName:
          description: Name of the template
          type: string
          example: Order Confirmation - EN
        htmlContent:
          description: >
            Body of the message (HTML version). The field must have more than 10
            characters. **REQUIRED if htmlUrl is empty**
          type: string
          example: The order n°xxxxx has been confirmed. Thanks for your purchase
        htmlUrl:
          description: >-
            Url which contents the body of the email message. REQUIRED if
            htmlContent is empty
          type: string
          format: url
          example: https://html.domain.com
        subject:
          description: Subject of the template
          type: string
          example: Thanks for your purchase !
        replyTo:
          description: Email on which campaign recipients will be able to reply to
          type: string
          format: email
          example: support@myshop.com
        toField:
          description: >
            To personalize the **To** Field. If you want to include the first
            name and last name of your recipient, add **{FNAME} {LNAME}**. These
            contact attributes must already exist in your Brevo account. If
            input parameter **params** used please use **{{contact.FNAME}}
            {{contact.LNAME}}** for personalization
          type: string
          example: '{FNAME} {LNAME}'
        attachmentUrl:
          description: >
            Absolute url of the attachment (**no local file**). Extension
            allowed:

            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
            png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
            pptx, tar, ez, ics, mobi, msg, pub and eps'
          type: string
          format: url
          example: https://attachment.domain.com
        isActive:
          description: >-
            Status of template. isActive = true means template is active and
            isActive = false means template is inactive
          type: boolean
          example: true
    createEmailCampaign:
      required:
        - name
        - sender
      type: object
      properties:
        tag:
          description: Tag of the campaign
          type: string
          example: Newsletter
        sender:
          description: >
            Sender details including id or email and name (_optional_). Only one
            of either Sender's email or Sender's ID shall be passed in one
            request at a time. For example:

            **{"name":"xyz", "email":"example@abc.com"}**

            **{"name":"xyz", "id":123}**
          type: object
          properties:
            name:
              description: Sender Name
              type: string
              example: Mary from MyShop
            email:
              description: Sender email
              type: string
              format: email
              example: newsletter@myshop.com
            id:
              description: >
                Select the sender for the campaign on the basis of sender id.

                _In order to select a sender with specific pool of IP’s,
                dedicated ip users shall pass id (instead of email)_.
              type: integer
              format: int64
              example: 3
        name:
          description: Name of the campaign
          type: string
          example: Newsletter - May 2017
        htmlContent:
          description: >
            Mandatory if htmlUrl and templateId are empty. Body of the message
            (HTML).
          type: string
          example: >-
            <!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please
            confirm your email address by clicking on the link below</p> </body>
            </html>
        htmlUrl:
          description: >
            **Mandatory if htmlContent and templateId are empty**. Url to the
            message (HTML). For example:

            **https://html.domain.com**
          type: string
          format: url
          example: https://html.domain.com
        templateId:
          description: >
            **Mandatory if htmlContent and htmlUrl are empty**. Id of the
            transactional

            email template with status _active_. Used to copy only its content
            fetched

            from htmlContent/htmlUrl to an email campaign for RSS feature.
          type: integer
          format: int64
        scheduledAt:
          description: >
            Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass
            your timezone in date-time format for accurate result**.

            If sendAtBestTime is set to true, your campaign will be sent
            according to the date passed (ignoring the time part). For example:

            **2017-06-01T12:30:00+02:00**
          type: string
          example: '2017-06-01T10:30:00.000Z'
        subject:
          description: |
            Subject of the campaign. **Mandatory if abTesting is false**.
            Ignored if abTesting is true.
          type: string
          example: Discover the New Collection !
        previewText:
          description: Preview text or preheader of the email campaign
          type: string
          example: Thanks for your order!
        replyTo:
          description: Email on which the campaign recipients will be able to reply to
          type: string
          format: email
          example: support@myshop.com
        toField:
          description: >
            To personalize the **To** Field. If you want to include the first
            name and last name of your recipient, add **{FNAME} {LNAME}**. These
            contact attributes must already exist in your Brevo account. If
            input parameter **params** used please use **{{contact.FNAME}}
            {{contact.LNAME}}** for personalization
          type: string
          example: '{FNAME} {LNAME}'
        recipients:
          description: Segment ids and List ids to include/exclude from campaign
          type: object
          properties:
            exclusionListIds:
              description: List ids to exclude from the campaign
              type: array
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              description: >
                **Mandatory if scheduledAt is not empty**. List Ids to send the
                campaign to
              type: array
              items:
                type: integer
                format: int64
                example: 32
            segmentIds:
              description: >
                **Mandatory if listIds are not used**. Segment ids to send the
                campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
        attachmentUrl:
          description: >
            Absolute url of the attachment (no local file).

            Extension allowed:

            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
            png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
            pptx, tar, ez, ics, mobi, msg, pub and eps
          type: string
          format: url
          example: https://attachment.domain.com
        inlineImageActivation:
          description: >
            Use true to embedded the images in your email. Final size of

            the email should be less than **4MB**. Campaigns with embedded
            images can

            _not be sent to more than 5000 contacts_
          type: boolean
          example: true
          default: false
        mirrorActive:
          description: Use true to enable the mirror link
          type: boolean
          example: true
        footer:
          description: Footer of the email campaign
          type: string
          example: '[DEFAULT_FOOTER]'
        header:
          description: Header of the email campaign
          type: string
          example: '[DEFAULT_HEADER]'
        utmCampaign:
          description: >-
            Customize the utm_campaign value. If this field is empty, the
            campaign name will be used. Only alphanumeric characters and spaces
            are allowed
          type: string
          example: NL_05_2017
        params:
          description: >
            Pass the set of attributes to customize the type classic campaign.
            For example: **{"FNAME":"Joe", "LNAME":"Doe"}**. Only available if
            **type** is **classic**. It's considered only if campaign is in _New
            Template Language format_. The New Template Language is dependent on
            the values of **subject, htmlContent/htmlUrl, sender.name &
            toField**
          type: object
          additionalProperties: {}
          example:
            FNAME: Joe
            LNAME: Doe
        sendAtBestTime:
          description: Set this to true if you want to send your campaign at best time.
          type: boolean
          example: true
          default: false
        abTesting:
          description: >
            Status of A/B Test. abTesting = false means it is disabled &
            abTesting = true means it is enabled. **subjectA, subjectB,
            splitRule, winnerCriteria & winnerDelay** will be considered when
            abTesting is set to true.

            subjectA & subjectB are mandatory together & subject if passed is
            ignored. **Can be set to true only if sendAtBestTime is false**.

            You will be able to set up two subject lines for your campaign and
            send them to a random sample of your total recipients. Half of the
            test group will receive version A, and the other half will receive
            version B
          type: boolean
          example: true
          default: false
        subjectA:
          description: |
            Subject A of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          type: string
          example: Discover the New Collection!
        subjectB:
          description: |
            Subject B of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          type: string
          example: Want to discover the New Collection?
        splitRule:
          description: >
            Add the size of your test groups. **Mandatory if abTesting = true &
            'recipients' is passed**. We'll send version A and B to a random
            sample of recipients, and then the winning version to everyone else
          maximum: 50
          minimum: 1
          type: integer
          format: int64
          example: 50
        winnerCriteria:
          description: >
            Choose the metrics that will determinate the winning version.
            **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
            `winnerCriteria` is ignored if passed
          type: string
          example: open
          enum:
            - open
            - click
        winnerDelay:
          description: >
            Choose the duration of the test in hours. Maximum is 7 days, pass
            24*7 = 168 hours. The winning version will be sent at the end of the
            test. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
            `winnerDelay` is ignored if passed
          maximum: 168
          minimum: 1
          type: integer
          format: int64
          example: 50
        ipWarmupEnable:
          description: >
            **Available for dedicated ip clients**. Set this to true if you wish
            to warm up your ip.
          type: boolean
          example: true
          default: false
        initialQuota:
          description: >
            **Mandatory if ipWarmupEnable is set to true**. Set an initial quota
            greater than 1 for warming up your ip. We recommend you set a value
            of 3000.
          type: integer
          format: int64
          example: 3000
        increaseRate:
          description: >
            **Mandatory if ipWarmupEnable is set to true**. Set a percentage
            increase rate for warming up your ip. We recommend you set the
            increase rate to 30% per day. If you want to send the same number of
            emails every day, set the daily increase value to 0%.
          maximum: 100
          minimum: 0
          type: integer
          format: int64
          example: 70
        unsubscriptionPageId:
          description: >
            Enter an unsubscription page id. The page id is a 24 digit
            alphanumeric id that can be found in the URL when editing the page.
            If not entered, then the default unsubscription page will be used.
          type: string
          example: 62cbb7fabbe85021021aac52
        updateFormId:
          description: >
            **Mandatory if templateId is used containing the {{ update_profile
            }} tag**. Enter an update profile form id. The form id is a 24 digit
            alphanumeric id that can be found in the URL when editing the form.
            If not entered, then the default update profile form will be used.
          type: string
          example: 6313436b9ad40e23b371d095
    updateEmailCampaign:
      type: object
      properties:
        tag:
          description: Tag of the campaign
          type: string
          example: Newsletter
        sender:
          description: >
            Sender details including id or email and name (optional). Only one
            of either Sender's email or Sender's ID shall be passed in one
            request at a time. For example:

            **{"name":"xyz", "email":"example@abc.com"}**

            **{"name":"xyz", "id":123}**
          type: object
          properties:
            name:
              description: Sender Name from which the campaign emails are sent
              type: string
              example: Mary from MyShop
            email:
              description: Sender email from which the campaign emails are sent
              type: string
              format: email
              example: newsletter@myshop.com
            id:
              description: >
                Select the sender for the campaign on the basis of sender id.
                **In order to select a sender with specific pool of IP’s,
                dedicated ip users shall pass id (instead of email)**.
              type: integer
              format: int64
              example: 3
        name:
          description: Name of the campaign
          type: string
          example: Newsletter - May 2017
        htmlContent:
          description: >
            Body of the message (HTML version). If the campaign is designed
            using Drag & Drop editor via HTML content, then the design page will
            not have Drag & Drop editor access for that campaign. **REQUIRED if
            htmlUrl is empty**
          type: string
          example: >-
            <!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please
            confirm your email address by clicking on the link below</p> </body>
            </html>
        htmlUrl:
          description: >
            Url which contents the body of the email message. **REQUIRED if
            htmlContent is empty**
          type: string
          format: url
          example: https://html.domain.com
        scheduledAt:
          description: >
            UTC date-time on which the campaign has to run
            (YYYY-MM-DDTHH:mm:ss.SSSZ).

            **Prefer to pass your timezone in date-time format for accurate
            result.**

            If sendAtBestTime is set to true, your campaign will be sent
            according

            to the date passed (ignoring the time part).
          type: string
          example: '2017-06-01T10:30:00.000Z'
        subject:
          description: Subject of the campaign
          type: string
          example: Discover the New Collection !
        previewText:
          description: Preview text or preheader of the email campaign
          type: string
          example: Thanks for your order!
        replyTo:
          description: Email on which campaign recipients will be able to reply to
          type: string
          format: email
          example: support@myshop.com
        toField:
          description: >
            To personalize the **To** Field. If you want to include the first

            name and last name of your recipient, add **{FNAME} {LNAME}**. These
            contact

            attributes must already exist in your Brevo account. If input
            parameter

            **params** used please use **{{contact.FNAME}} {{contact.LNAME}}**
            for personalization
          type: string
          example: '{FNAME} {LNAME}'
        recipients:
          description: Segment ids and List ids to include/exclude from campaign
          type: object
          properties:
            exclusionListIds:
              description: List ids which have to be excluded from a campaign
              type: array
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              description: >
                Lists Ids to send the campaign to. **Campaign should only be
                updated with listIds if listIds were used to create it. REQUIRED
                if already not present in campaign and scheduledAt is not
                empty**
              type: array
              items:
                type: integer
                format: int64
                example: 32
            segmentIds:
              description: >
                **Mandatory if listIds are not used. Campaign should only be
                updated with segmentIds if segmentIds were used to create it.**
                Segment ids to send the campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
        attachmentUrl:
          description: >
            Absolute url of the attachment (no local file).

            Extension allowed:

            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
            png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
            pptx, tar, ez, ics, mobi, msg, pub and eps'
          type: string
          format: url
          example: https://attachment.domain.com
        inlineImageActivation:
          description: >
            Status of inline image. inlineImageActivation = false means image
            can’t be embedded, & inlineImageActivation = true means image can be
            embedded, in the email.

            You cannot send a campaign of more than **4MB** with images embedded
            in the email. Campaigns with the images embedded in the email _must
            be sent to less than 5000 contacts_.
          type: boolean
          example: true
          default: false
        mirrorActive:
          description: >-
            Status of mirror links in campaign. mirrorActive = false means
            mirror links are deactivated, & mirrorActive = true means mirror
            links are activated, in the campaign
          type: boolean
          example: true
        recurring:
          description: >
            **FOR TRIGGER ONLY !** Type of trigger campaign.recurring = false
            means contact can receive the same Trigger campaign only once, &
            recurring = true means contact can receive the same Trigger campaign
            several times
          type: boolean
          example: false
          default: false
        footer:
          description: Footer of the email campaign
          type: string
          example: '[DEFAULT_FOOTER]'
        header:
          description: Header of the email campaign
          type: string
          example: '[DEFAULT_HEADER]'
        utmCampaign:
          description: >-
            Customize the utm_campaign value. If this field is empty, the
            campaign name will be used. Only alphanumeric characters and spaces
            are allowed
          type: string
          example: NL_05_2017
        params:
          description: >
            Pass the set of attributes to customize the type classic campaign.
            For example: **{"FNAME":"Joe", "LNAME":"Doe"}**. Only available if
            **type** is **classic**. It's considered only if campaign is in _New
            Template Language format_. The New Template Language is dependent on
            the values of **subject, htmlContent/htmlUrl, sender.name &
            toField**
          type: object
          additionalProperties: {}
          example:
            FNAME: Joe
            LNAME: Doe
        sendAtBestTime:
          description: |
            Set this to true if you want to send your campaign at best time.
            Note:- **if true, warmup ip will be disabled.**
          type: boolean
          example: true
        abTesting:
          description: >
            Status of A/B Test. abTesting = false means it is disabled &
            abTesting = true means it is enabled. **subjectA, subjectB,
            splitRule, winnerCriteria & winnerDelay** will be considered when
            abTesting is set to true.

            subjectA & subjectB are mandatory together & subject if passed is
            ignored. **Can be set to true only if sendAtBestTime is false**.

            You will be able to set up two subject lines for your campaign and
            send them to a random sample of your total recipients. Half of the
            test group will receive version A, and the other half will receive
            version B
          type: boolean
          example: true
          default: false
        subjectA:
          description: |
            Subject A of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          type: string
          example: Discover the New Collection!
        subjectB:
          description: |
            Subject B of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          type: string
          example: Want to discover the New Collection?
        splitRule:
          description: >
            Add the size of your test groups. **Mandatory if abTesting = true &
            'recipients' is passed**. We'll send version A and B to a random
            sample of recipients, and then the winning version to everyone else
          maximum: 50
          minimum: 1
          type: integer
          format: int64
          example: 50
        winnerCriteria:
          description: >
            Choose the metrics that will determinate the winning version.
            **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
            `winnerCriteria` is ignored if passed
          type: string
          example: open
          enum:
            - open
            - click
        winnerDelay:
          description: >
            Choose the duration of the test in hours. Maximum is 7 days, pass
            24*7 = 168 hours. The winning version will be sent at the end of the
            test. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50,
            `winnerDelay` is ignored if passed
          maximum: 168
          minimum: 1
          type: integer
          format: int64
          example: 50
        ipWarmupEnable:
          description: >
            **Available for dedicated ip clients**. Set this to true if you wish
            to warm up your ip.
          type: boolean
          example: true
          default: false
        initialQuota:
          description: >
            Set an initial quota greater than 1 for warming up your ip. We
            recommend you set a value of 3000.
          type: integer
          format: int64
          example: 3000
        increaseRate:
          description: >
            Set a percentage increase rate for warming up your ip. We recommend
            you set the increase rate to 30% per day. If you want to send the
            same number of emails every day, set the daily increase value to 0%.
          maximum: 100
          minimum: 0
          type: integer
          format: int64
          example: 70
        unsubscriptionPageId:
          description: >
            Enter an unsubscription page id. The page id is a 24 digit
            alphanumeric id that can be found in the URL when editing the page.
          type: string
          example: 62cbb7fabbe85021021aac52
        updateFormId:
          description: >
            **Mandatory if templateId is used containing the {{ update_profile
            }} tag**. Enter an update profile form id. The form id is a 24 digit
            alphanumeric id that can be found in the URL when editing the form.
          type: string
          example: 6313436b9ad40e23b371d095
    getSharedTemplateUrl:
      required:
        - sharedUrl
      type: object
      properties:
        sharedUrl:
          description: >-
            A unique URL for the email campaign or transactional template. This
            URL can be shared with other Brevo users.
          type: string
          format: url
          example: >-
            https://my.brevo.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
    abTestCampaignResult:
      type: object
      properties:
        winningVersion:
          description: >-
            Winning Campaign Info. pending = Campaign has been picked for
            sending and winning version is yet to be decided, tie = A tie
            happened between both the versions, notAvailable = Campaign has not
            yet been picked for sending.
          type: string
          example: A
          enum:
            - notAvailable
            - pending
            - tie
            - A
            - B
        winningCriteria:
          description: Criteria choosen for winning version (Open/Click)
          type: string
          example: Open
          enum:
            - Open
            - Click
        winningSubjectLine:
          description: Subject Line of current winning version
          type: string
          example: Subject Line A
        openRate:
          description: Open rate for current winning version
          type: string
          example: 70%
        clickRate:
          description: Click rate for current winning version
          type: string
          example: 70%
        winningVersionRate:
          description: Open/Click rate for the winner version
          type: string
          example: 70%
        statistics:
          required:
            - clicks
            - complaints
            - hardBounces
            - openers
            - softBounces
            - unsubscribed
          type: object
          properties:
            openers:
              $ref: '#/components/schemas/abTestVersionStats'
            clicks:
              $ref: '#/components/schemas/abTestVersionStats'
            unsubscribed:
              $ref: '#/components/schemas/abTestVersionStats'
            hardBounces:
              $ref: '#/components/schemas/abTestVersionStats'
            softBounces:
              $ref: '#/components/schemas/abTestVersionStats'
            complaints:
              $ref: '#/components/schemas/abTestVersionStats'
        clickedLinks:
          required:
            - Version A
            - Version B
          type: object
          properties:
            Version A:
              $ref: '#/components/schemas/abTestVersionClicks'
            Version B:
              $ref: '#/components/schemas/abTestVersionClicks'
    emailExportRecipients:
      required:
        - recipientsType
      type: object
      properties:
        notifyURL:
          description: >-
            Webhook called once the export process is finished. For reference,
            https://help.brevo.com/hc/en-us/articles/360007666479
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        recipientsType:
          description: Type of recipients to export for a campaign
          type: string
          example: openers
          enum:
            - all
            - nonClickers
            - nonOpeners
            - clickers
            - openers
            - softBounces
            - hardBounces
            - unsubscribed
    requestSmsRecipientExport:
      required:
        - recipientsType
      type: object
      properties:
        notifyURL:
          description: >-
            URL that will be called once the export process is finished. For
            reference, https://help.brevo.com/hc/en-us/articles/360007666479
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        recipientsType:
          description: Filter the recipients based on how they interacted with the campaign
          type: string
          example: answered
          enum:
            - all
            - delivered
            - answered
            - softBounces
            - hardBounces
            - unsubscribed
    sendReport:
      required:
        - email
      type: object
      properties:
        language:
          description: Language of email content for campaign report sending.
          type: string
          example: en
          default: fr
          enum:
            - fr
            - es
            - pt
            - it
            - de
            - en
        email:
          description: Custom attributes for the report email.
          required:
            - body
            - to
          type: object
          properties:
            to:
              description: Email addresses of the recipients
              type: array
              items:
                description: Email address of the recipient
                type: string
                format: email
                example: jim.suehan@example.com
            body:
              description: Custom text message to be presented in the report email.
              type: string
              example: Please find attached the report of our last email campaign.
    uploadImageToGallery:
      required:
        - imageUrl
      type: object
      properties:
        imageUrl:
          description: >
            The absolute url of the image (**no local file**). Maximum allowed
            size for image is **2MB**.

            Allowed extensions for images are:

            #### jpeg, jpg, png, bmp, gif.
          type: string
          example: https://somedomain.com/image1.jpg
        name:
          description: Name of the image.
          type: string
          example: nature.jpg
    sendSmtpEmail:
      type: object
      properties:
        tags:
          description: Tag your emails to find them more easily
          type: array
          items:
            type: string
            example: tag1
        sender:
          description: >
            **Mandatory if `templateId` is not passed**. Pass name (_optional_)
            and email or id of sender from which emails will be sent. **`name`
            will be ignored if passed along with sender `id`**. For example,

            **{"name":"Mary from MyShop", "email":"no-reply@myshop.com"}**

            **{"id":2}**
          type: object
          properties:
            name:
              description: >
                description: Name of the sender from which the emails will be
                sent. **Maximum allowed characters are 70**. Applicable only
                when email is passed.
              type: string
              example: Mary from MyShop
            email:
              description: >-
                Email of the sender from which the emails will be sent.
                Mandatory if sender id is not passed.
              type: string
              format: email
              example: no-reply@myshop.com
            id:
              description: >-
                Id of the sender from which the emails will be sent. In order to
                select a sender with specific pool of IP’s, dedicated ip users
                shall pass id (instead of email). Mandatory if email is not
                passed.
              type: integer
              format: int64
              example: 2
        to:
          description: >
            **Mandatory if messageVersions are not passed, ignored if
            messageVersions are passed**

            List of email addresses and names (_optional_) of the recipients.
            For example,

            **[{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe",
            "email":"joe@example.com"}]**
          type: array
          items:
            required:
              - email
            type: object
            properties:
              email:
                description: Email address of the recipient
                type: string
                format: email
                example: jimmy98@example.com
              name:
                description: |
                  Name of the recipient. **Maximum allowed characters are 70**.
                type: string
                example: Jimmy
        bcc:
          description: >
            List of email addresses and names (_optional_) of the recipients in
            bcc
          type: array
          items:
            required:
              - email
            type: object
            properties:
              email:
                description: Email address of the recipient in bcc
                type: string
                format: email
                example: helen9766@example.com
              name:
                description: >
                  Name of the recipient in bcc. **Maximum allowed characters are
                  70**.
                type: string
                example: Helen
        cc:
          description: >
            List of email addresses and names (_optional_) of the recipients in
            cc
          type: array
          items:
            required:
              - email
            type: object
            properties:
              email:
                description: Email address of the recipient in cc
                type: string
                format: email
                example: ann6533@example.com
              name:
                description: >
                  Name of the recipient in cc. **Maximum allowed characters are
                  70**.
                type: string
                example: Ann
        htmlContent:
          description: >
            HTML body of the message. **Mandatory if 'templateId' is not passed,
            ignored if 'templateId' is passed**
          type: string
          example: >-
            <!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please
            confirm your email address by clicking on the link below</p> </body>
            </html>
        textContent:
          description: >
            Plain Text body of the message. **Ignored if 'templateId' is
            passed**
          type: string
          example: >-
            Please confirm your email address by clicking on the link
            https://text.domain.com
        subject:
          description: |
            Subject of the message. **Mandatory if 'templateId' is not passed**
          type: string
          example: Login Email confirmation
        replyTo:
          description: >
            Email (**required**), along with name (_optional_), on which
            transactional mail recipients will be able to reply back. For
            example,

            **{"email":"ann6533@example.com", "name":"Ann"}**
          required:
            - email
          type: object
          properties:
            email:
              description: Email address in reply to
              type: string
              format: email
              example: ann6533@example.com
            name:
              description: |
                Name in reply to. **Maximum allowed characters are 70**.
              type: string
              example: Ann
        attachment:
          description: >
            Pass the _absolute URL_ (**no local file**) or the _base64 content_
            of the attachment along with the attachment name. **Mandatory if
            attachment content is passed**. For example,

            **[{"url":"https://attachment.domain.com/myAttachmentFromUrl.jpg",
            "name":"myAttachmentFromUrl.jpg"}, {"content":"base64 example
            content", "name":"myAttachmentFromBase64.jpg"}]**.

            Allowed extensions for attachment file:

            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg,
            png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt,
            pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma,
            ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg, wmv,
            pkpass and xlsm.

            If `templateId` is passed and is in New Template Language format
            then both attachment url and content are accepted. If template is in
            Old template Language format, then `attachment` is ignored
          type: array
          items:
            type: object
            properties:
              url:
                description: |
                  Absolute url of the attachment (**no local file**).
                type: string
                format: url
                example: https://attachment.domain.com/myAttachmentFromUrl.jpg
              content:
                description: >-
                  Base64 encoded chunk data of the attachment generated on the
                  fly
                pattern: >-
                  ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                format: byte
                example: b3JkZXIucGRm
              name:
                description: |
                  **Required if content is passed**. Name of the attachment
                type: string
                example: myAttachment.png
        headers:
          description: >
            Pass the set of custom headers (_not the standard headers_) that
            shall be sent along the mail headers in the original email.
            **'sender.ip'** header can be set (**only for dedicated ip users**)
            to mention the IP to be used for sending transactional emails.
            Headers are allowed in `This-Case-Only` (i.e. words separated by
            hyphen with first letter of each word in capital letter), they will
            be converted to such case styling if not in this format in the
            request payload. For example,

            **{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header",
            "idempotencyKey":"abc-123"}**.
          type: object
          additionalProperties: {}
          example:
            sender.ip: 1.2.3.4
            X-Mailin-custom: some_custom_header
            idempotencyKey: abc-123
        templateId:
          description: Id of the template.
          type: integer
          format: int64
          example: 2
        params:
          description: >
            Pass the set of attributes to customize the template. For example,
            **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered only if
            template is in New Template Language format**.
          type: object
          additionalProperties: {}
          example:
            FNAME: Joe
            LNAME: Doe
        messageVersions:
          description: >
            You can customize and send out multiple versions of a mail.
            **templateId** can be customized only if global parameter contains
            templateId. **htmlContent and textContent** can be customized only
            if any of the two, htmlContent or textContent, is present in global
            parameters. Some global parameters such as **to(mandatory), bcc, cc,
            replyTo, subject** can also be customized specific to each version.

            Total number of recipients in one API request must not exceed 2000.
            However, you can still pass upto 99 recipients maximum in one
            message version.

            The size of individual params in all the messageVersions shall not
            exceed **100 KB** limit and that of cumulative params shall not
            exceed **1000 KB**.

            You can follow this **step-by-step guide** on how to use
            **messageVersions** to batch send emails -
            **https://developers.brevo.com/docs/batch-send-transactional-emails**
          type: array
          items:
            type: object
            required:
              - to
            properties:
              to:
                description: >
                  List of email addresses and names (_optional_) of the
                  recipients. For example,

                  **[{"name":"Jimmy", "email":"jimmy98@example.com"},
                  {"name":"Joe", "email":"joe@example.com"}]**
                type: array
                items:
                  required:
                    - email
                  type: object
                  properties:
                    email:
                      description: Email address of the recipient
                      type: string
                      format: email
                      example: jimmy98@example.com
                    name:
                      description: >
                        Name of the recipient. **Maximum allowed characters are
                        70**.
                      type: string
                      example: Jimmy
              params:
                description: >
                  Pass the set of attributes to customize the template. For
                  example, **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered
                  only if template is in New Template Language format**.
                type: object
                additionalProperties: {}
                example:
                  FNAME: Joe
                  LNAME: Doe
              bcc:
                description: >
                  List of email addresses and names (_optional_) of the
                  recipients in bcc
                type: array
                items:
                  required:
                    - email
                  type: object
                  properties:
                    email:
                      description: Email address of the recipient in bcc
                      type: string
                      format: email
                      example: helen9766@example.com
                    name:
                      description: >
                        Name of the recipient in bcc. **Maximum allowed
                        characters are 70**.
                      type: string
                      example: Helen
              cc:
                description: >
                  List of email addresses and names (_optional_) of the
                  recipients in cc
                type: array
                items:
                  required:
                    - email
                  type: object
                  properties:
                    email:
                      description: Email address of the recipient in cc
                      type: string
                      format: email
                      example: ann6533@example.com
                    name:
                      description: >
                        Name of the recipient in cc. **Maximum allowed
                        characters are 70**.
                      type: string
                      example: Ann
              replyTo:
                description: >
                  Email (**required**), along with name (_optional_), on which
                  transactional mail recipients will be able to reply back. For
                  example,

                  **{"email":"ann6533@example.com", "name":"Ann"}**
                required:
                  - email
                type: object
                properties:
                  email:
                    description: Email address in reply to
                    type: string
                    format: email
                    example: ann6533@example.com
                  name:
                    description: |
                      Name in reply to. **Maximum allowed characters are 70**.
                    type: string
                    example: Ann
              subject:
                description: |
                  Custom subject specific to message version
                type: string
                example: Login Email confirmation
              htmlContent:
                description: >
                  HTML body of the message. **Mandatory if 'templateId' is not
                  passed, ignored if 'templateId' is passed**
                type: string
                example: >-
                  <!DOCTYPE html> <html> <body> <h1>Confirm you email</h1>
                  <p>Please confirm your email address by clicking on the link
                  below</p> </body> </html>
              textContent:
                description: >
                  Plain Text body of the message. **Ignored if 'templateId' is
                  passed**
                type: string
                example: >-
                  Please confirm your email address by clicking on the link
                  https://text.domain.com
        scheduledAt:
          description: >-
            UTC date-time on which the email has to schedule
            (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in
            date-time format for scheduling. There can be an expected delay of
            +5 minutes in scheduled email delivery. **Please note this feature
            is currently a public beta**.
          type: string
          format: date-time
          example: '2022-04-05T12:30:00+02:00'
        batchId:
          description: >-
            Valid UUIDv4 batch id to identify the scheduled batches
            transactional email. If not passed we will create a valid UUIDv4
            batch id at our end.
          type: string
          example: 5c6cfa04-eed9-42c2-8b5c-6d470d978e9d
    deleteHardbounces:
      type: object
      properties:
        startDate:
          description: >-
            Starting date (YYYY-MM-DD) of the time period for deletion. The
            hardbounces occurred after this date will be deleted. Must be less
            than or equal to the endDate
          type: string
          example: '2016-12-31T00:00:00.000Z'
        endDate:
          description: >-
            Ending date (YYYY-MM-DD) of the time period for deletion. The
            hardbounces until this date will be deleted. Must be greater than or
            equal to the startDate
          type: string
          example: '2017-01-31T00:00:00.000Z'
        contactEmail:
          description: Target a specific email address
          type: string
          format: email
          example: alex76@example.com
    blockDomain:
      type: object
      required:
        - domain
      properties:
        domain:
          description: name of the domain to be blocked
          type: string
          example: example.com
    createWebhook:
      required:
        - events
        - url
      type: object
      properties:
        description:
          description: Description of the webhook
          type: string
          example: Webhook triggered on unsubscription
        url:
          description: URL of the webhook
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        events:
          description: >
            - Events triggering the webhook. Possible values for
            **Transactional** type webhook:

            #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`,
            `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`,
            `uniqueOpened` and `unsubscribed`

            - Possible values for **Marketing** type webhook:

            #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`,
            `unsubscribed`, `listAddition` & `delivered`

            - Possible values for **Inbound** type webhook:

            #### `inboundEmailProcessed`
          type: array
          items:
            type: string
            example: unsubscribed
            enum:
              - sent
              - hardBounce
              - softBounce
              - blocked
              - spam
              - delivered
              - request
              - click
              - invalid
              - deferred
              - opened
              - uniqueOpened
              - unsubscribed
              - listAddition
              - contactUpdated
              - contactDeleted
              - inboundEmailProcessed
        type:
          description: Type of the webhook
          type: string
          example: marketing
          default: transactional
          enum:
            - transactional
            - marketing
            - inbound
        domain:
          description: Inbound domain of webhook, required in case of event type `inbound`
          type: string
          example: example.com
        batched:
          description: >-
            Batching configuration of the webhook, we send batched webhooks if
            its true
          type: boolean
          example: true
        auth:
          description: Authentication header to be send with the webhook requests
          type: object
          example:
            type: bearer
            token: test-auth-token1234
        headers:
          type: array
          items:
            description: Headers send with the requests to the webhook
            type: object
            example:
              key: cf-secret
              value: test-header-value
    updateWebhook:
      type: object
      properties:
        description:
          description: Description of the webhook
          type: string
          example: Webhook triggered on contact hardbounce
        url:
          description: URL of the webhook
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        events:
          description: >
            - Events triggering the webhook. Possible values for
            **Transactional** type webhook:

            #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`,
            `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`,
            `uniqueOpened` and `unsubscribed`

            - Possible values for **Marketing** type webhook:

            #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`,
            `unsubscribed`, `listAddition` & `delivered`

            - Possible values for **Inbound** type webhook:

            #### `inboundEmailProcessed`
          type: array
          items:
            type: string
            example: hardBounce
            enum:
              - sent
              - hardBounce
              - softBounce
              - blocked
              - spam
              - delivered
              - request
              - click
              - invalid
              - deferred
              - opened
              - uniqueOpened
              - unsubscribed
              - listAddition
              - contactUpdated
              - contactDeleted
              - inboundEmailProcessed
        domain:
          description: Inbound domain of webhook, used in case of event type `inbound`
          type: string
          example: example.com
        batched:
          description: >-
            Batching configuration of the webhook, we send batched webhooks if
            its true
          type: boolean
          example: true
        auth:
          description: Authentication header to be send with the webhook requests
          type: object
          example:
            type: bearer
            token: test-auth-token1234
        headers:
          type: array
          items:
            description: Headers send with the requests to the webhook
            type: object
            example:
              key: cf-secret
              value: test-header-value
    createDoiContact:
      required:
        - email
        - includeListIds
        - redirectionUrl
        - templateId
      type: object
      properties:
        email:
          description: >-
            Email address where the confirmation email will be sent. This email
            address will be the identifier for all other contact attributes.
          type: string
          format: email
          example: elly@example.com
        attributes:
          description: >
            Pass the set of attributes and their values. **These attributes must
            be present in your Brevo account**. For eg. **{'FNAME':'Elly',
            'LNAME':'Roger'}**
          type: object
          additionalProperties: {}
          example:
            FNAME: Elly
            LNAME: Roger
        includeListIds:
          description: Lists under user account where contact should be added
          type: array
          items:
            description: Id of the list
            type: integer
            format: int64
            example: 36
        excludeListIds:
          description: Lists under user account where contact should not be added
          type: array
          items:
            description: Id of the list
            type: integer
            format: int64
            example: 36
        templateId:
          description: Id of the Double opt-in (DOI) template
          type: integer
          format: int64
          example: 2
        redirectionUrl:
          description: >
            URL of the web page that user will be redirected to after clicking
            on the double opt in URL. When editing your DOI template you can
            reference this URL by using the tag **{{ params.DOIurl }}**.
          type: string
          format: url
          example: http://requestb.in/173lyyx1
    createContact:
      type: object
      properties:
        email:
          description: >
            Email address of the user. **Mandatory if "SMS" field is not passed
            in "attributes" parameter**. Mobile Number in **SMS** field should
            be passed with proper country code. For example:

            **{"SMS":"+91xxxxxxxxxx"}** or **{"SMS":"0091xxxxxxxxxx"}**
          type: string
          format: email
          example: elly@example.com
        ext_id:
          description: Pass your own Id to create a contact.
          type: string
          example: externalId
        attributes:
          description: >
            Pass the set of attributes and their values. The attribute's
            parameter should be passed in capital letter while creating a
            contact. Values that don't match the attribute type (e.g. text or
            string in a date attribute) will be ignored. **These attributes must
            be present in your Brevo account.**. For eg:

            **{"FNAME":"Elly", "LNAME":"Roger"}**
          type: object
          additionalProperties: {}
          example:
            FNAME: Elly
            LNAME: Roger
        emailBlacklisted:
          description: >-
            Set this field to blacklist the contact for emails (emailBlacklisted
            = true)
          type: boolean
          example: false
        smsBlacklisted:
          description: >-
            Set this field to blacklist the contact for SMS (smsBlacklisted =
            true)
          type: boolean
          example: false
        listIds:
          description: Ids of the lists to add the contact to
          type: array
          items:
            description: Id of the list to add the contact to
            type: integer
            format: int64
            example: 36
        updateEnabled:
          description: >-
            Facilitate to update the existing contact in the same request
            (updateEnabled = true)
          type: boolean
          example: false
          default: false
        smtpBlacklistSender:
          description: >-
            transactional email forbidden sender for contact. Use only for email
            Contact ( only available if updateEnabled = true )
          type: array
          items:
            type: string
            format: email
    updateContact:
      type: object
      properties:
        attributes:
          description: >
            Pass the set of attributes to be updated. **These attributes must be
            present in your account**. To update existing email address of a
            contact with the new one please pass EMAIL in attributes. For
            example, **{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie",
            "LNAME":"Roger"}**.

            The attribute's parameter should be passed in capital letter while
            updating a contact. Values that don't match the attribute type (e.g.
            text or string in a date attribute) will be ignored. Keep in mind
            transactional attributes can be updated the same way as normal
            attributes. Mobile Number in **SMS** field should be passed with
            proper country code. For example: **{"SMS":"+91xxxxxxxxxx"} or
            {"SMS":"0091xxxxxxxxxx"}**
          type: object
          additionalProperties: {}
          example:
            EMAIL: newemail@domain.com
            FNAME: Ellie
            LNAME: Roger
        ext_id:
          description: Pass your own Id to update ext_id of a contact.
          type: string
          example: updateExternalId
        emailBlacklisted:
          description: >-
            Set/unset this field to blacklist/allow the contact for emails
            (emailBlacklisted = true)
          type: boolean
          example: false
        smsBlacklisted:
          description: >-
            Set/unset this field to blacklist/allow the contact for SMS
            (smsBlacklisted = true)
          type: boolean
          example: true
        listIds:
          description: Ids of the lists to add the contact to
          type: array
          items:
            description: Id of the list to add the contact to
            type: integer
            format: int64
            example: 65
        unlinkListIds:
          description: Ids of the lists to remove the contact from
          type: array
          items:
            description: Id of the list to remove the contact from
            type: integer
            format: int64
            example: 36
        smtpBlacklistSender:
          description: >-
            transactional email forbidden sender for contact. Use only for email
            Contact
          type: array
          items:
            type: string
            format: email
    updateBatchContacts:
      type: object
      properties:
        contacts:
          description: List of contacts to be updated
          type: array
          items:
            type: object
            properties:
              email:
                description: >-
                  Email address of the user to be updated (For each operation
                  only pass one of the supported contact identifiers. Email, id
                  or sms)
                type: string
                format: email
                example: elly@example.com
              id:
                description: >-
                  id of the user to be updated (For each operation only pass one
                  of the supported contact identifiers. Email, id or sms)
                type: integer
                format: int64
                example: 31
              sms:
                description: >-
                  SMS of the user to be updated (For each operation only pass
                  one of the supported contact identifiers. Email, id or sms)
                type: string
                example: +91xxxxxxxxxx
              ext_id:
                description: Pass your own Id to update ext_id of a contact.
                type: string
                example: UpdateExternalId
              attributes:
                description: >
                  Pass the set of attributes to be updated. **These attributes
                  must be present in your account**. To update existing email
                  address of a contact with the new one please pass EMAIL in
                  attribtes. For example, **{ "EMAIL":"newemail@domain.com",
                  "FNAME":"Ellie", "LNAME":"Roger"}**.

                  Keep in mind transactional attributes can be updated the same
                  way as normal attributes. Mobile Number in **SMS** field
                  should be passed with proper country code. For example:
                  **{"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}**
                type: object
                additionalProperties: {}
                example:
                  EMAIL: newemail@domain.com
                  FNAME: Ellie
                  LNAME: Roger
              emailBlacklisted:
                description: >-
                  Set/unset this field to blacklist/allow the contact for emails
                  (emailBlacklisted = true)
                type: boolean
                example: false
              smsBlacklisted:
                description: >-
                  Set/unset this field to blacklist/allow the contact for SMS
                  (smsBlacklisted = true)
                type: boolean
                example: true
              listIds:
                description: Ids of the lists to add the contact to
                type: array
                items:
                  description: Id of the list to add the contact to
                  type: integer
                  format: int64
                  example: 65
              unlinkListIds:
                description: Ids of the lists to remove the contact from
                type: array
                items:
                  description: Id of the list to remove the contact from
                  type: integer
                  format: int64
                  example: 36
              smtpBlacklistSender:
                description: >-
                  transactional email forbidden sender for contact. Use only for
                  email Contact
                type: array
                items:
                  type: string
                  format: email
    createAttribute:
      type: object
      properties:
        value:
          description: >
            Value of the attribute. **Use only if the attribute's category is
            'calculated' or 'global'**
          type: string
          example: COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]
        isRecurring:
          description: >
            Type of the attribute. **Use only if the attribute's category is
            'calculated' or 'global'**
          type: boolean
          example: true
        enumeration:
          description: >
            List of values and labels that the attribute can take. **Use only if
            the attribute's category is "category"**. For example:

            **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
          type: array
          items:
            required:
              - label
              - value
            type: object
            properties:
              value:
                description: Id of the value
                type: integer
                example: 1
              label:
                description: Label of the value
                type: string
                example: Women
        type:
          description: >
            Type of the attribute. **Use only if the attribute's category is
            'normal', 'category' or 'transactional'**

            Type **boolean** is only available if the category is **normal**
            attribute

            Type **id** is only available if the category is **transactional**
            attribute

            Type **category** is only available if the category is **category**
            attribute
          type: string
          example: text
          enum:
            - text
            - date
            - float
            - boolean
            - id
            - category
    updateAttribute:
      type: object
      properties:
        value:
          description: >
            Value of the attribute to update. **Use only if the attribute's
            category is 'calculated' or 'global'**
          type: string
          example: COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]
        enumeration:
          description: >
            List of the values and labels that the attribute can take. **Use
            only if the attribute's category is "category"**. For example,

            **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
          type: array
          items:
            required:
              - label
              - value
            type: object
            properties:
              value:
                description: Id of the value
                type: integer
                example: 1
              label:
                description: Label of the value
                type: string
                example: Men
    createList:
      required:
        - folderId
        - name
      type: object
      properties:
        name:
          description: Name of the list
          type: string
          example: Magento Customer - ES
        folderId:
          description: Id of the parent folder in which this list is to be created
          type: integer
          format: int64
          example: 2
    updateList:
      type: object
      properties:
        name:
          description: >-
            Name of the list. Either of the two parameters (name, folderId) can
            be updated at a time.
          type: string
          example: Magento Customer - ES
        folderId:
          description: >-
            Id of the folder in which the list is to be moved. Either of the two
            parameters (name, folderId) can be updated at a time.
          type: integer
          format: int64
          example: 2
    requestContactExport:
      type: object
      required:
        - customContactFilter
      properties:
        exportAttributes:
          description: >
            List of all the attributes that you want to export. **These
            attributes must be present in your contact database.** For example:

            **['fname', 'lname', 'email']**
          type: array
          items:
            type: string
            example: NAME
        customContactFilter:
          description: |
            Set the filter for the contacts to be exported.
          type: object
          properties:
            actionForContacts:
              description: >
                **Mandatory if neither actionForEmailCampaigns nor
                actionForSmsCampaigns is passed.** This will export the contacts
                on the basis of provided action applied on contacts as per the
                list id.

                * **allContacts** - Fetch the list of all contacts for a
                particular list.

                * **subscribed & unsubscribed** - Fetch the list of subscribed /
                unsubscribed (blacklisted via any means) contacts for a
                particular list.

                * **unsubscribedPerList** - Fetch the list of contacts that are
                unsubscribed from a particular list only.
              type: string
              enum:
                - allContacts
                - subscribed
                - unsubscribed
                - unsubscribedPerList
            actionForEmailCampaigns:
              description: >
                **Mandatory if neither actionForContacts nor
                actionForSmsCampaigns is passed.** This will export the contacts
                on the basis of provided action applied on email campaigns.

                * **openers & nonOpeners** - emailCampaignId is mandatory. Fetch
                the list of readers / non-readers for a particular email
                campaign.

                * **clickers & nonClickers** - emailCampaignId is mandatory.
                Fetch the list of clickers / non-clickers for a particular email
                campaign.

                * **unsubscribed** - emailCampaignId is mandatory. Fetch the
                list of all unsubscribed (blacklisted via any means) contacts
                for a particular email campaign.

                * **hardBounces & softBounces** - emailCampaignId is optional.
                Fetch the list of hard bounces / soft bounces for a particular /
                all email campaign(s).
              type: string
              enum:
                - openers
                - nonOpeners
                - clickers
                - nonClickers
                - unsubscribed
                - hardBounces
                - softBounces
            actionForSmsCampaigns:
              description: >
                **Mandatory if neither actionForContacts nor
                actionForEmailCampaigns is passed.** This will export the
                contacts on the basis of provided action applied on sms
                campaigns.

                * **unsubscribed** - Fetch the list of all unsubscribed
                (blacklisted via any means) contacts for all / particular sms
                campaigns.

                * **hardBounces & softBounces** - Fetch the list of hard bounces
                / soft bounces for all / particular sms campaigns.
              type: string
              enum:
                - hardBounces
                - softBounces
                - unsubscribed
            listId:
              description: >
                **Mandatory if actionForContacts is passed, ignored otherwise.**
                Id of the list for which the corresponding action shall be
                applied in the filter.
              type: integer
              format: int64
              example: 2
            emailCampaignId:
              description: >
                Considered only if **actionForEmailCampaigns** is passed,
                ignored otherwise. **Mandatory if action is one of the following
                - openers, nonOpeners, clickers, nonClickers, unsubscribed.**

                The id of the email campaign for which the corresponding action
                shall be applied in the filter.
              type: integer
              format: int64
              example: 12
            smsCampaignId:
              description: >
                Considered only if **actionForSmsCampaigns** is passed, ignored
                otherwise. The id of sms campaign for which the corresponding
                action shall be applied in the filter.
              type: integer
              format: int64
              example: 12
        notifyUrl:
          description: >-
            Webhook that will be called once the export process is finished. For
            reference, https://help.brevo.com/hc/en-us/articles/360007666479
          type: string
          format: url
          example: http://requestb.in/173lyyx1
    requestContactImport:
      type: object
      properties:
        fileUrl:
          description: >
            **Mandatory if fileBody and jsonBody is not defined.** URL of the
            file to be imported (**no local file**). Possible file formats:

            #### .txt, .csv, .json
          type: string
          format: url
          example: https://importfile.domain.com
        fileBody:
          description: >
            **Mandatory if fileUrl and jsonBody is not defined.** CSV content to
            be imported. Use semicolon to separate multiple attributes.
            **Maximum allowed file body size is 10MB** . However we recommend a
            safe limit of around 8 MB to avoid the issues caused due to increase
            of file body size while parsing. Please use fileUrl instead to
            import bigger files.
          type: string
          example: |-
            NAME;SURNAME;EMAIL
            Smith;John;john.smith@example.com
            Roger;Ellie;ellie36@example.com
        jsonBody:
          description: >
            **Mandatory if fileUrl and fileBody is not defined.** JSON content
            to be imported. **Maximum allowed json body size is 10MB** . However
            we recommend a safe limit of around 8 MB to avoid the issues caused
            due to increase of json body size while parsing. Please use fileUrl
            instead to import bigger files.
          type: array
          items:
            type: object
            properties:
              email:
                type: string
              attributes:
                description: List of attributes to be imported
                type: object
                additionalProperties: true
            example:
              email: ndicky0@ocn.ne.jp
              attributes:
                LNAME: Noemi
                FNAME: Dicky
                COUNTRY: DE
                BIRTHDAY: 11/02/1989
                PREFERED_COLOR: BLACK
                WHATSAPP: '33689965433'
                LANDLINE_NUMBER: '33689965433'
                SMS: '33689965433'
        listIds:
          description: >
            **Mandatory if newList is not defined.** Ids of the lists in which
            the contacts shall be imported. For example, **[2, 4, 7]**.
          type: array
          items:
            description: List Id in which the contacts shall be imported
            type: integer
            format: int64
            example: 76
        notifyUrl:
          description: >-
            URL that will be called once the import process is finished. For
            reference, https://help.brevo.com/hc/en-us/articles/360007666479
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        newList:
          description: >-
            To create a new list and import the contacts into it, pass the
            listName and an optional folderId.
          type: object
          properties:
            listName:
              description: >
                List with listName will be created first and users will be
                imported in it. **Mandatory if listIds is empty**.
              type: string
              example: ContactImport - 2017-05
            folderId:
              description: >
                Id of the folder where this new list shall be created.
                **Mandatory if listName is not empty**
              type: integer
              format: int64
              example: 2
        emailBlacklist:
          description: To blacklist all the contacts for email
          type: boolean
          example: false
          default: false
        disableNotification:
          description: To disable email notification
          type: boolean
          example: false
          default: false
        smsBlacklist:
          description: To blacklist all the contacts for sms
          type: boolean
          example: false
          default: false
        updateExistingContacts:
          description: To facilitate the choice to update the existing contacts
          type: boolean
          example: true
          default: true
        emptyContactsAttributes:
          description: >
            To facilitate the choice to erase any attribute of the existing
            contacts with empty value. emptyContactsAttributes = true means the
            empty fields in your import will erase any attribute that currently
            contain data in Brevo, & emptyContactsAttributes = false means the
            empty fields will not affect your existing data ( **only available
            if `updateExistingContacts` set to true **)
          type: boolean
          example: true
          default: false
    createSmsCampaign:
      required:
        - content
        - name
        - sender
      type: object
      properties:
        name:
          description: Name of the campaign
          type: string
          example: Spring Promo Code
        sender:
          description: >
            Name of the sender. **The number of characters is limited to 11 for
            alphanumeric characters and 15 for numeric characters**
          maxLength: 15
          type: string
          example: MyShop
        content:
          description: >
            Content of the message. The **maximum characters used per SMS is
            160**, if used more than that, it will be counted as more than one
            SMS
          type: string
          example: 'Get a discount by visiting our NY store and saying : Happy Spring!'
        recipients:
          required:
            - listIds
          type: object
          properties:
            listIds:
              description: >
                Lists Ids to send the campaign to. **REQUIRED if scheduledAt is
                not empty**
              type: array
              items:
                description: List Id to send the campaign to
                type: integer
                format: int64
                example: 54
            exclusionListIds:
              description: List ids which have to be excluded from a campaign
              type: array
              items:
                description: List Id to exclude from the campaign
                type: integer
                format: int64
                example: 15
        scheduledAt:
          description: >
            UTC date-time on which the campaign has to run
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          type: string
          example: '2017-05-05T10:30:00.000Z'
        unicodeEnabled:
          description: >
            Format of the message. It indicates whether the content should be
            treated as unicode or not.
          type: boolean
          example: true
          default: false
        organisationPrefix:
          description: >-
            A recognizable prefix will ensure your audience knows who you are.
            Recommended by U.S. carriers. This will be added as your Brand Name
            before the message content. **Prefer verifying maximum length of 160
            characters including this prefix in message content to avoid
            multiple sending of same sms.**
          type: string
          example: MyCompany
        unsubscribeInstruction:
          description: >-
            Instructions to unsubscribe from future communications. Recommended
            by U.S. carriers. Must include **STOP** keyword. This will be added
            as instructions after the end of message content. **Prefer verifying
            maximum length of 160 characters including this instructions in
            message content to avoid multiple sending of same sms.**
          type: string
          example: send Stop if you want to unsubscribe.
    updateSmsCampaign:
      type: object
      properties:
        name:
          description: Name of the campaign
          type: string
          example: Spring Promo Code
        sender:
          description: >
            Name of the sender. **The number of characters is limited to 11 for
            alphanumeric characters and 15 for numeric characters**
          maxLength: 15
          type: string
          example: MyShop
        content:
          description: >
            Content of the message. The **maximum characters used per SMS is
            160**, if used more than that, it will be counted as more than one
            SMS
          type: string
          example: 'Get a discount by visiting our NY store and saying : Happy Spring!'
        recipients:
          required:
            - listIds
          type: object
          properties:
            listIds:
              description: >
                Lists Ids to send the campaign to. **REQUIRED if scheduledAt is
                not empty**
              type: array
              items:
                description: List Id to send the campaign to
                type: integer
                format: int64
                example: 54
            exclusionListIds:
              description: List ids which have to be excluded from a campaign
              type: array
              items:
                description: List Id to exclude from the campaign
                type: integer
                format: int64
                example: 15
        scheduledAt:
          description: >
            UTC date-time on which the campaign has to run
            (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in
            date-time format for accurate result.**
          type: string
          example: '2017-05-05T10:30:00.000Z'
        unicodeEnabled:
          description: >
            Format of the message. It indicates whether the content should be
            treated as unicode or not.
          type: boolean
          example: true
          default: false
        organisationPrefix:
          description: >-
            A recognizable prefix will ensure your audience knows who you are.
            Recommended by U.S. carriers. This will be added as your Brand Name
            before the message content. **Prefer verifying maximum length of 160
            characters including this prefix in message content to avoid
            multiple sending of same sms.**
          type: string
          example: MyCompany
        unsubscribeInstruction:
          description: >-
            Instructions to unsubscribe from future communications. Recommended
            by U.S. carriers. Must include **STOP** keyword. This will be added
            as instructions after the end of message content. **Prefer verifying
            maximum length of 160 characters including this instructions in
            message content to avoid multiple sending of same sms.**
          type: string
          example: send Stop if you want to unsubscribe.
    sendTransacSms:
      required:
        - content
        - recipient
        - sender
      type: object
      properties:
        sender:
          description: >
            Name of the sender. **The number of characters is limited to 11 for
            alphanumeric characters and 15 for numeric characters**
          maxLength: 15
          type: string
          example: MyShop
        recipient:
          description: Mobile number to send SMS with the country code
          type: string
          example: '33689965433'
        content:
          description: >
            Content of the message. If more than **160 characters** long, will
            be sent as multiple text messages
          type: string
          example: Enter this code:CCJJG8 to validate your account
        type:
          description: >-
            Type of the SMS. Marketing SMS messages are those sent typically
            with marketing content. Transactional SMS messages are sent to
            individuals and are triggered in response to some action, such as a
            sign-up, purchase, etc.
          type: string
          example: marketing
          default: transactional
          enum:
            - transactional
            - marketing
        tag:
          description: Tag of the message
          type: string
          example: accountValidation
        webUrl:
          description: >-
            Webhook to call for each event triggered by the message (delivered
            etc.)
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        unicodeEnabled:
          description: >
            Format of the message. It indicates whether the content should be
            treated as unicode or not.
          type: boolean
          example: true
          default: false
        organisationPrefix:
          description: >-
            A recognizable prefix will ensure your audience knows who you are.
            Recommended by U.S. carriers. This will be added as your Brand Name
            before the message content. **Prefer verifying maximum length of 160
            characters including this prefix in message content to avoid
            multiple sending of same sms.**
          type: string
          example: MyCompany
    sendTestEmail:
      type: object
      properties:
        emailTo:
          description: >
            List of the email addresses of the recipients whom you wish to send
            the test mail.

            _If left empty, the test mail will be sent to your entire test list.
            You can not send more than 50 test emails per day_.
          type: array
          items:
            description: Email addres of the recipient
            type: string
            format: email
            example: helen.jurger@example.com
    sendTestSms:
      type: object
      properties:
        phoneNumber:
          description: >
            Mobile number of the recipient with the country code. This number
            **must belong to one of your contacts in Brevo account and must not
            be blacklisted**
          type: string
          example: '33689965433'
    getTransacAggregatedSmsReport:
      type: object
      properties:
        range:
          description: Time frame of the report
          type: string
          example: 2016-09-08|2017-04-06
        requests:
          description: Number of requests for the timeframe
          type: integer
          format: int64
          example: 263
        delivered:
          description: Number of delivered SMS for the timeframe
          type: integer
          format: int64
          example: 249
        hardBounces:
          description: Number of hardbounces for the timeframe
          type: integer
          format: int64
          example: 1
        softBounces:
          description: Number of softbounces for the timeframe
          type: integer
          format: int64
          example: 4
        blocked:
          description: Number of blocked contact for the timeframe
          type: integer
          format: int64
          example: 2
        unsubscribed:
          description: Number of unsubscription for the timeframe
          type: integer
          format: int64
          example: 6
        replied:
          description: Number of answered SMS for the timeframe
          type: integer
          format: int64
          example: 12
        accepted:
          description: Number of accepted for the timeframe
          type: integer
          format: int64
          example: 252
        rejected:
          description: Number of rejected for the timeframe
          type: integer
          format: int64
          example: 8
    getTransacSmsReport:
      type: object
      properties:
        reports:
          type: array
          items:
            type: object
            properties:
              date:
                description: Date for which statistics are retrieved
                type: string
                format: date
                example: '2017-03-17T00:00:00.000Z'
              requests:
                description: Number of requests for the date
                type: integer
                format: int64
                example: 87
              delivered:
                description: Number of delivered SMS for the date
                type: integer
                format: int64
                example: 85
              hardBounces:
                description: Number of hardbounces for the date
                type: integer
                format: int64
                example: 1
              softBounces:
                description: Number of softbounces for the date
                type: integer
                format: int64
                example: 1
              blocked:
                description: Number of blocked contact for the date
                type: integer
                format: int64
                example: 0
              unsubscribed:
                description: Number of unsubscription for the date
                type: integer
                format: int64
                example: 1
              replied:
                description: Number of answered SMS for the date
                type: integer
                format: int64
                example: 2
              accepted:
                description: Number of accepted for the date
                type: integer
                format: int64
                example: 85
              rejected:
                description: Number of rejected for the date
                type: integer
                format: int64
                example: 1
    getIp:
      required:
        - active
        - domain
        - id
        - ip
      type: object
      properties:
        id:
          description: ID of the dedicated IP
          type: integer
          format: int64
          example: 3
        ip:
          description: Dedicated IP
          type: string
          example: 123.65.8.22
        active:
          description: Status of the IP (true=active, false=inactive)
          type: boolean
          example: true
        domain:
          description: Domain associated to the IP
          type: string
          example: mailing.myshop.com
    getIpsFromSender:
      required:
        - ips
      type: object
      properties:
        ips:
          description: Dedicated IP(s) linked to a sender
          type: array
          items:
            $ref: '#/components/schemas/getIpFromSender'
    getIps:
      required:
        - ips
      type: object
      properties:
        ips:
          description: Dedicated IP(s) available on your account
          type: array
          items:
            $ref: '#/components/schemas/getIp'
    getIpFromSender:
      required:
        - domain
        - id
        - ip
        - weight
      type: object
      properties:
        id:
          description: ID of the dedicated IP
          type: integer
          format: int64
          example: 3
        ip:
          description: Dedicated IP
          type: string
          example: 123.65.8.22
        domain:
          description: Domain associated to the IP
          type: string
          example: mailing.myshop.dom
        weight:
          description: Weight of the IP
          type: integer
          format: int64
          example: 75
    manageIp:
      type: object
      properties:
        ip:
          description: Dedicated ID
          type: string
          example: 123.65.8.22
    getTransacEmailContent:
      required:
        - attachmentCount
        - body
        - date
        - email
        - events
        - subject
      type: object
      properties:
        email:
          description: Email address to which transactional email has been sent
          type: string
          format: email
          example: abc@example.com
        subject:
          description: Subject of the sent email
          type: string
          example: Summer Camp
        templateId:
          description: Id of the template
          type: integer
          format: int64
          example: 2
        date:
          description: Date on which transactional email was sent
          type: string
          example: '2017-03-12T12:30:00.000Z'
        events:
          description: Series of events which occurred on the transactional email
          type: array
          items:
            required:
              - name
              - time
            type: object
            properties:
              name:
                description: Name of the event that occurred on the sent email
                type: string
                example: delivered
              time:
                description: Time at which the event occurred
                type: string
                example: '2017-03-12T12:30:00.000Z'
        body:
          description: Actual content of the transactional email that has been sent
          type: string
          example: >-
            <!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1>
            <p>This is the actual html content sent</p> </body> </html>
        attachmentCount:
          description: Count of the attachments that were sent in the email
          type: integer
          format: int64
          example: 2
    getTransacEmailsList:
      type: object
      properties:
        count:
          description: >-
            Total number of transactional emails available on your account
            according to the passed filter
          type: integer
          format: int64
          example: 5
        transactionalEmails:
          type: array
          items:
            required:
              - date
              - email
              - messageId
              - subject
              - uuid
            type: object
            properties:
              tags:
                description: Tags used for your email
                type: array
                items:
                  type: string
                  example: tag1
              email:
                description: Email address to which transactional email has been sent
                type: string
                format: email
                example: john.smith@example.com
              subject:
                description: Subject of the sent email
                type: string
                example: Summer Camp
              templateId:
                description: Id of the template
                type: integer
                format: int64
                example: 2
              messageId:
                description: Message Id of the sent email
                type: string
                example: <201798300811.5700093@relay.domain.com>
              uuid:
                description: Unique id of the email sent to a particular contact
                type: string
                example: 5a78c-209ok98262910-s99a341
              date:
                description: Date on which transactional email was sent
                type: string
                example: '2017-03-12T12:30:00.000Z'
              from:
                description: Email address of the sender from which the email was sent
                type: string
                format: email
                example: diana.doe@example.com
    getBlockedDomains:
      type: object
      required:
        - domains
      properties:
        domains:
          description: List of all blocked domains
          type: array
          items:
            description: name of blocked domain
            type: string
            example: contact.com
    abTestVersionStats:
      description: Percentage of a particular event for both versions
      required:
        - Version A
        - Version B
      type: object
      properties:
        Version A:
          description: percentage of an event for version A
          type: string
          example: 50%
        Version B:
          description: percentage of an event for version B
          type: string
          example: 50%
    abTestVersionClicks:
      description: Information on clicked links for a particular version
      type: array
      items:
        required:
          - clickRate
          - clicksCount
          - link
        type: object
        properties:
          link:
            description: URL of the link
            type: string
            example: https://facbook.com/versionA
          clicksCount:
            description: Number of times a link is clicked
            type: integer
            format: int64
            example: 3
          clickRate:
            description: Percentage of clicks of link with respect to total clicks
            type: string
            example: 40%
    getInboundEmailEvents:
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            required:
              - uuid
              - sender
              - date
              - recipient
            properties:
              uuid:
                description: UUID that can be used to fetch additional data
                type: string
                format: uuid
              date:
                description: Date when email was received on SMTP relay
                type: string
                format: date-time
              sender:
                description: Sender’s email address
                type: string
                format: email
              recipient:
                description: Recipient’s email address
                type: string
                format: email
    getInboundEmailEventsByUuid:
      type: object
      properties:
        receivedAt:
          description: Date when email was received on SMTP relay
          type: string
          format: date-time
          example: '2019-05-25T11:53:26Z'
        deliveredAt:
          description: Date when email was delivered successfully to client’s webhook
          type: string
          nullable: true
          format: date-time
        recipient:
          description: Recipient’s email address
          type: string
          format: email
        sender:
          description: Sender’s email address
          type: string
          format: email
        messageId:
          description: >-
            Value of the Message-ID header. This will be present only after the
            processing is done.
          type: string
        subject:
          description: >-
            Value of the Subject header. This will be present only after the
            processing is done. 
          type: string
        attachments:
          description: >-
            List of attachments of the email. This will be present only after
            the processing is done.
          type: array
          items:
            type: object
            properties:
              name:
                description: >-
                  filename specified in the Content-Disposition header of the
                  attachment
                type: string
              contentType:
                description: value of the Content-Type header of the attachment
                type: string
              contentId:
                description: value of the Content-ID header of the attachment.
                type: string
              contentLength:
                description: size of the attachment in bytes
                type: integer
        logs:
          description: >-
            List of events/logs that describe the lifecycle of the email on SIB
            platform
          type: array
          items:
            type: object
            properties:
              date:
                description: Date of the event
                type: string
                format: date-time
              type:
                description: Type of the event
                type: string
                enum:
                  - received
                  - processed
                  - webhookFailed
                  - webhookDelivered
    getScheduledEmailByBatchId:
      type: object
      properties:
        count:
          description: Total number of batches
          type: integer
        batches:
          type: array
          items:
            type: object
            required:
              - scheduledAt
              - createdAt
              - status
            properties:
              scheduledAt:
                description: Datetime for which the batch was scheduled
                type: string
                format: date-time
              createdAt:
                description: Datetime on which the batch was scheduled
                type: string
                format: date-time
              status:
                description: Current status of the scheduled batch
                type: string
                enum:
                  - inProgress
                  - queued
                  - processed
                  - error
    getScheduledEmailByMessageId:
      type: object
      required:
        - scheduledAt
        - createdAt
        - status
      properties:
        scheduledAt:
          description: Datetime for which the email was scheduled
          type: string
          format: date-time
        createdAt:
          description: Datetime on which the email was scheduled
          type: string
          format: date-time
        status:
          description: Current status of the scheduled email
          type: string
          enum:
            - inProgress
            - queued
            - processed
            - error
    subAccountsResponse:
      type: object
      properties:
        count:
          description: Total number of subaccounts
          type: integer
        subAccounts:
          type: array
          items:
            type: object
            required:
              - id
              - companyName
              - active
              - createdAt
            properties:
              id:
                description: id of the sub-account
                type: integer
                format: int64
              companyName:
                description: Name of the sub-account company
                type: string
              active:
                description: Whether the sub-account is active or not
                type: boolean
              createdAt:
                description: Timestamp when the sub-account was created
                type: integer
                format: int64
    createSubAccount:
      type: object
      required:
        - companyName
        - email
      properties:
        companyName:
          description: Set the name of the sub-account company
          type: string
        email:
          description: Email address for the organization
          type: string
        language:
          description: Set the language of the sub-account
          type: string
          enum:
            - en
            - fr
            - it
            - es
            - pt
            - de
        timezone:
          description: Set the timezone of the sub-account
          type: string
      example:
        companyName: Test Sub-account
        email: test-sub@example.com
        timezone: Europe/Paris
        language: en
    createSubAccountResponse:
      required:
        - id
      type: object
      properties:
        id:
          description: ID of the sub-account created
          type: integer
          format: int64
          example: 5
    corporateGroupDetailsResponse:
      type: object
      properties:
        group:
          type: object
          properties:
            id:
              description: Group id
              type: string
            groupName:
              description: Name of the group
              type: string
            createdAt:
              description: Group creation date
              type: string
        sub-accounts:
          type: array
          items:
            type: object
            properties:
              id:
                description: Id of the sub-account organzation
                type: integer
                format: int64
              companyName:
                description: Name of the sub-account organzation
                type: string
              createdAt:
                description: Creation date of the sub-account organzation
                type: string
        users:
          type: array
          items:
            type: object
            properties:
              email:
                description: Email address of the user
                type: string
              lastName:
                description: Last name of the user
                type: string
              firstName:
                description: First name of the user
                type: string
    masterDetailsResponse:
      type: object
      properties:
        email:
          description: Email id of master account
          type: string
        companyName:
          description: Company name of master account organization
          type: string
        id:
          description: Unique identifier of the master account organization
          type: integer
          format: int64
        currencyCode:
          description: Currency code of the master account organization
          type: string
        timezone:
          description: Timezone of the master account organization
          type: string
        billingInfo:
          description: Billing details of the master account organization
          type: object
          properties:
            email:
              description: Billing email id of master account
              type: string
            companyName:
              description: Company name of master account
              type: string
            name:
              description: Billing name of master account holder
              type: object
              properties:
                givenName:
                  description: First name for billing
                  type: string
                familyName:
                  description: Last name for billing
                  type: string
            address:
              description: Billing address of master account
              type: object
              properties:
                streetAddress:
                  description: Street address
                  type: string
                locality:
                  description: Locality
                  type: string
                postalCode:
                  description: Postal code
                  type: string
                stateCode:
                  description: State code
                  type: string
                countryCode:
                  description: Country code
                  type: string
        planInfo:
          description: Plan details
          type: object
          properties:
            currencyCode:
              description: Plan currency
              type: string
            nextBillingAt:
              description: Timestamp of next billing date
              type: integer
              format: int64
            price:
              description: Plan amount
              type: number
            planPeriod:
              description: Plan period type
              type: string
              enum:
                - month
                - year
            subAccounts:
              description: Number of sub-accounts
              type: integer
            features:
              description: List of provided features in the plan
              type: array
              items:
                type: object
                properties:
                  name:
                    description: Name of the feature
                    type: string
                  unitValue:
                    description: Unit value of the feature
                    type: string
                  quantity:
                    description: Quantity provided in the plan
                    type: integer
                    format: int64
                  quantityWithOverages:
                    description: >-
                      Quantity with overages provided in the plan (only
                      applicable on ENTv2)
                    type: integer
                    format: int64
                  used:
                    description: Quantity consumed by master
                    type: integer
                    format: int64
                  usedOverages:
                    description: >-
                      Quantity consumed by sub-organizations over the admin plan
                      limit (only applicable on ENTv2)
                    type: integer
                    format: int64
                  remaining:
                    description: Quantity remaining in the plan
                    type: integer
                    format: int64
    subAccountDetailsResponse:
      type: object
      properties:
        name:
          description: Name of the sub-account user
          type: string
        email:
          description: Email id of the sub-account organization
          type: string
        companyName:
          description: Sub-account company name
          type: string
        planInfo:
          description: Sub-account plan details
          type: object
          properties:
            credits:
              description: Credits quota and remaining credits on the sub-account
              type: object
              properties:
                sms:
                  description: SMS credits remaining on the sub-account
                  type: integer
                  format: int64
                emails:
                  description: Email credits remaining on the sub-account
                  type: object
                  properties:
                    quantity:
                      description: Quantity of email messaging limits provided
                      type: integer
                      format: int64
                    remaining:
                      description: Available email messaging limits for use
                      type: integer
                      format: int64
            features:
              description: Features available on the sub-account
              type: object
              properties:
                inbox:
                  description: Inbox details / Not available on ENTv2
                  type: object
                  properties:
                    quantity:
                      description: Quantity of inbox provided
                      type: integer
                      format: int64
                    remaining:
                      description: Available inboxes for use
                      type: integer
                      format: int64
                landingPage:
                  description: Landing page details / Not available on ENTv2
                  type: object
                  properties:
                    quantity:
                      description: Quantity of landing pages provided
                      type: integer
                      format: int64
                    remaining:
                      description: Available landing pages for use
                      type: integer
                      format: int64
                users:
                  description: Multi-account details
                  type: object
                  properties:
                    quantity:
                      description: Quantity of multi-account's provided
                      type: integer
                      format: int64
                    remaining:
                      description: Available multi-accounts for use
                      type: integer
                      format: int64
            planType:
              description: type of the plan
              type: string
    subAccountUpdatePlanRequest:
      description: Details of the plan to be changed
      type: object
      properties:
        credits:
          description: Credit details to update
          type: object
          properties:
            email:
              description: Number of email credits
              type: integer
              format: int64
        features:
          description: Features details to update
          type: object
          properties:
            users:
              description: Number of multi-users
              type: integer
              format: int64
            landingPage:
              description: Number of landing pages / Not required on ENTv2
              type: integer
              format: int64
            inbox:
              description: Number of inboxes / Not required on ENTv2
              type: integer
              format: int64
      example:
        credits:
          email: 5000
        features:
          users: 15
          landingPage: 20
          inbox: 10
    subAccountAppsToggleRequest:
      description: List of enable/disable applications on the sub-account
      type: object
      properties:
        inbox:
          description: >-
            Set this field to enable or disable Inbox on the sub-account / Not
            applicable on ENTv2
          type: boolean
        whatsapp:
          description: >-
            Set this field to enable or disable Whatsapp campaigns on the
            sub-account
          type: boolean
        automation:
          description: Set this field to enable or disable Automation on the sub-account
          type: boolean
        email-campaigns:
          description: >-
            Set this field to enable or disable Email Campaigns on the
            sub-account
          type: boolean
        sms-campaigns:
          description: Set this field to enable or disable SMS Marketing on the sub-account
          type: boolean
        landing-pages:
          description: Set this field to enable or disable Landing pages on the sub-account
          type: boolean
        transactional-emails:
          description: >-
            Set this field to enable or disable Transactional Email on the
            sub-account
          type: boolean
        transactional-sms:
          description: >-
            Set this field to enable or disable Transactional SMS on the
            sub-account
          type: boolean
        facebook-ads:
          description: Set this field to enable or disable Facebook ads on the sub-account
          type: boolean
        web-push:
          description: Set this field to enable or disable Web Push on the sub-account
          type: boolean
        meetings:
          description: Set this field to enable or disable Meetings on the sub-account
          type: boolean
        conversations:
          description: Set this field to enable or disable Conversations on the sub-account
          type: boolean
        crm:
          description: Set this field to enable or disable Sales CRM on the sub-account
          type: boolean
      example:
        landing-pages: true
        sms-campaigns: false
        whatsapp: true
        meetings: true
        web-push: false
    TaskTypes:
      description: Task types details
      type: object
      properties:
        title:
          description: Title of task type
          type: string
          example: Email
        id:
          description: Id of task type
          type: string
          example: 61a88a2eb7a574180261234
    Task:
      description: Task Details
      required:
        - taskTypeId
        - name
        - date
      type: object
      properties:
        id:
          description: Unique task id
          type: string
          example: 61a5cd07ca1347c82306ad06
        taskTypeId:
          description: Id for type of task e.g Call / Email / Meeting etc.
          type: string
          example: 61a5cd07ca1347c82306ad09
        name:
          description: Name of task
          type: string
          example: 'Task: Connect with client'
        contactsIds:
          description: Contact ids for contacts linked to this task
          items:
            type: integer
          type: array
          example:
            - 1
            - 2
            - 3
        dealsIds:
          description: Deal ids for deals a task is linked to
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        companiesIds:
          description: Companies ids for companies a task is linked to
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
    TaskReminder:
      description: Task reminder date/time for a task
      required:
        - value
        - unit
        - types
      type: object
      properties:
        value:
          description: Value of time unit before reminder is to be sent
          type: integer
          example: 10
        unit:
          description: Unit of time before reminder is to be sent
          type: string
          enum:
            - minutes
            - hours
            - weeks
            - days
        types:
          description: Type of task reminder e.g email, push
          items:
            type: string
            enum:
              - email
              - push
          type: array
          example:
            - email
    FileList:
      description: List of files
      type: array
      items:
        $ref: '#/components/schemas/FileData'
    FileDownloadableLink:
      description: Downloadable file link
      type: object
      properties:
        fileUrl:
          description: A unique link to download the requested file.
          type: string
          example: https://storage.googleapis.com/brevo-app-crm.......-sample.pdf
    FileData:
      description: File data that is uploaded
      type: object
      properties:
        name:
          description: Name of uploaded file
          type: string
          example: example.png
        authorId:
          description: Account id of user which created the file
          type: string
          example: 61a5ce58y5d4795761045991
        contactId:
          description: Contact id of contact on which file is uploaded
          type: integer
          format: int64
          example: 1
        dealId:
          description: Deal id linked to a file
          type: string
          example: 61a5ce58c5d4795761045991
        companyId:
          description: Company id linked to a file
          type: string
          example: 61a5ce58c5d4795761045991
        size:
          description: Size of file in bytes
          type: integer
          format: int64
          example: 10
        createdAt:
          description: File created date/time
          type: string
          format: date-time
          example: '2017-05-01T17:05:03.000Z'
    NoteData:
      description: Note data to be saved
      required:
        - text
      type: object
      properties:
        text:
          description: Text content of a note
          type: string
          maxLength: 3000
          minLength: 1
          example: In communication with client for resolution of queries.
        contactIds:
          description: Contact Ids linked to a note
          items:
            type: integer
          type: array
          example:
            - 247
            - 1
            - 2
        dealIds:
          description: Deal Ids linked to a note
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
        companyIds:
          description: Company Ids linked to a note
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
    Note:
      description: Note Details
      required:
        - text
      type: object
      properties:
        id:
          description: Unique note Id
          type: string
          example: 61a5cd07ca1347c82306ad09
        text:
          description: Text content of a note
          type: string
          maxLength: 3000
          minLength: 1
          example: In communication with client for resolution of queries.
        contactIds:
          description: Contact ids linked to a note
          items:
            type: integer
          type: array
          example:
            - 247
            - 1
            - 2
        dealIds:
          description: Deal ids linked to a note
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
        authorId:
          description: Account details of user which created the note
          type: object
          example:
            id: 61a5ce58y5d4795761045991
            email: johndoe@example.com
            locale: en_GB
            timezone: Asia/Kolkata
            name:
              fullName: John Doe
        createdAt:
          description: Note created date/time
          type: string
          format: date-time
          example: '2017-05-01T17:05:03.000Z'
        updatedAt:
          description: Note updated date/time
          type: string
          format: date-time
          example: '2017-05-01T17:05:03.000Z'
    NoteId:
      description: Updated Note ID
      type: object
      properties:
        id:
          description: Unique note Id
          type: string
          example: 61a5cd07ca1347c82306ad09
    NoteList:
      description: List of notes
      type: array
      items:
        $ref: '#/components/schemas/Note'
    TaskList:
      description: List of tasks
      type: object
      properties:
        items:
          description: List of tasks
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Pipelines:
      description: List of pipeline
      type: array
      items:
        $ref: '#/components/schemas/Pipeline'
    PipelineStage:
      description: List of stages
      type: object
      properties:
        id:
          description: Stage id
          type: string
          example: 9e577ff7-8e42-4ab3-be26-2b5e01b42518
        name:
          description: Stage name
          type: string
          example: New
    Pipeline:
      description: List of stages
      type: object
      properties:
        pipeline_name:
          description: Pipeline name
          type: string
          example: Sales Pipeline
        pipeline:
          description: Pipeline id
          type: string
          example: 5ea675e3da0dd085acaea610
        stages:
          description: List of stages
          type: array
          items:
            $ref: '#/components/schemas/PipelineStage'
    DealAttributes:
      description: List of deal attributes
      type: array
      items:
        description: List of attributes
        type: object
        properties:
          internalName:
            type: string
            example: deal_name
          label:
            type: string
            example: Deal Name
          attributeTypeName:
            type: string
            example: text
          attributeOptions:
            type: array
            items:
              type: object
              example:
                key: custom key
                value: custom label
          isRequired:
            type: boolean
            example: true
    DealsList:
      description: List of Deals
      type: object
      properties:
        items:
          description: List of deals
          type: array
          items:
            $ref: '#/components/schemas/Deal'
    Deal:
      description: Deal Details
      type: object
      properties:
        id:
          description: Unique deal id
          type: string
          example: 629475917295261d9b1f4403
        attributes:
          description: Deal attributes with values
          type: object
          example:
            deal_name: testname
            deal_owner: 6093d2425a9b436e9519d034
            amount: 12
            pipeline: 6093d296ad1e9c5cf2140a58
            deal_stage: 9e577ff7-8e42-4ab3-be26-2b5e01b42518
            stage_updated_at: '2022-05-30T07:42:05.671Z'
            created_at: '2022-05-30T07:42:05.671Z'
            number_of_contacts: 1
            last_updated_date: '2022-06-06T08:38:36.761Z'
            last_activity_date: '2022-06-06T08:38:36.000Z'
            next_activity_date: null
            number_of_activities: 0
        linkedContactsIds:
          description: Contact ids for contacts linked to this deal
          items:
            type: integer
          type: array
          example:
            - 1
            - 2
            - 3
        linkedCompaniesIds:
          description: Companies ids for companies linked to this deal
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
    CompaniesList:
      description: List of companies
      type: object
      properties:
        items:
          description: List of compaies
          type: array
          items:
            $ref: '#/components/schemas/Company'
    Company:
      description: Company Details
      type: object
      properties:
        id:
          description: Unique comoany id
          type: string
          example: 629475917295261d9b1f4403
        attributes:
          description: Company attributes with values
          type: object
          example:
            created_at: '2022-01-13T19:04:24.376+05:30'
            domain: xyz
            last_updated_at: '2022-04-01T18:47:48.283+05:30'
            name: text
            number_of_contacts: 0
            owner: 62260474111b1101704a9d85
            owner_assign_date: '2022-04-01T18:21:13.379+05:30'
            phone_number: 8171844192
            revenue: 10
        linkedContactsIds:
          description: Contact ids for contacts linked to this company
          items:
            type: integer
          type: array
          format: in64
          example:
            - 1
            - 2
            - 3
        linkedDealsIds:
          description: Deals ids for companies linked to this company
          items:
            type: string
          type: array
          format: objectID
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
    CompanyAttributes:
      description: List of company attributes
      type: array
      items:
        description: List of attributes
        type: object
        properties:
          internalName:
            type: string
            example: name
          label:
            type: string
            example: Company Name
          attributeTypeName:
            type: string
            example: text
          attributeOptions:
            type: array
            items:
              type: object
              example:
                key: custom key
                value: custom label
          isRequired:
            type: boolean
            example: true
    ConversationsMessage:
      description: a Conversations message
      type: object
      properties:
        id:
          description: >-
            Message ID. It can be used for further manipulations with the
            message.
          type: string
          example: eYBEm3gq3zc5ayE2g
        type:
          description: '`"agent"` for agents’ messages, `"visitor"` for visitors’ messages.'
          type: string
          enum:
            - agent
            - visitor
          example: agent
        text:
          description: Message text or name of the attached file
          type: string
          example: Good morning! How can I help you?
        visitorId:
          description: visitor’s ID
          type: string
          example: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
        agentId:
          description: >-
            ID of the agent on whose behalf the message was sent (only in
            messages sent by an agent).
          type: string
          example: d9nKoegKSjmCtyK78
        agentName:
          description: >-
            Agent’s name as displayed to the visitor. Only in the messages sent
            by an agent.
          type: string
          example: Liz
        createdAt:
          description: Timestamp in milliseconds.
          type: integer
          format: int64
          minimum: 0
          example: 1470222622433
        isPushed:
          description: '`true` for pushed messages'
          type: boolean
          example: true
        receivedFrom:
          description: >-
            In two-way integrations, messages sent via REST API can be marked
            with receivedFrom property and then filtered out when received in a
            webhook to avoid infinite loop.
          type: string
          example: SuperAwesomeHelpdesk
        file:
          type: object
          properties:
            filename:
              description: Name of the file
              type: string
              example: conversations.png
            size:
              description: Size in bytes
              type: integer
              format: int64
              minimum: 0
              example: 15538
            isImage:
              description: Whether the file is an image
              type: boolean
              example: true
            url:
              description: URL of the file
              type: string
              format: url
              example: https://ucarecdn.com/cee5c10c-8302-45c1-b1fb-43860ca941a9/
            imageInfo:
              description: image info is passed in case the file is an image
              type: object
              properties:
                width:
                  description: Width of the image
                  type: integer
                  format: int64
                  minimum: 0
                  example: 1129
                height:
                  description: height of the image
                  type: integer
                  format: int64
                  minimum: 0
                  example: 525
                previewUrl:
                  description: URL of the preview
                  type: string
                  format: url
                  example: >-
                    https://ucarecdn.com/03cd56cd-1de9-4f65-996d-08afdf27fa1b/-/preview/800x800/-/quality/lighter/
    event:
      type: object
      required:
        - event_name
        - identifiers
      properties:
        event_name:
          description: >-
            The name of the event that occurred. This is how you will find your
            event in Brevo. Limited to 255 characters, alphanumerical characters
            and - _ only.
          type: string
          example: video_played
        event_date:
          description: >-
            Timestamp of when the event occurred (e.g.
            "2024-01-24T17:39:57+01:00"). If no value is passed, the timestamp
            of the event creation is used.
          type: string
          example: '2024-02-06T20:59:23.383Z'
        identifiers:
          description: >-
            Identifies the contact associated with the event. At least one
            identifier is required.
          type: object
          minProperties: 1
          properties:
            email_id:
              description: Email Id associated with the event
              type: string
              example: jane.doe@example.com
            sms:
              description: SMS associated with the event
              type: string
              example: +91xxxxxxxxxx
            whatsapp:
              description: whatsapp associated with the event
              type: string
              example: +91xxxxxxxxxx
            landline_number:
              description: landline_number associated with the event
              type: string
              example: +91xxxxxxxxxx
            ext_id:
              description: ext_id associated with the event
              type: string
              example: abc123
        contact_properties:
          description: >-
            Properties defining the state of the contact associated to this
            event. Useful to update contact attributes defined in your contacts
            database while passing the event. For example: **"FIRSTNAME": "Jane"
            , "AGE": 37**
          type: object
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
          example:
            AGE: 32
            GENDER: FEMALE
        event_properties:
          description: >-
            Properties of the event. Top level properties and nested properties
            can be used to better segment contacts and personalise workflow
            conditions. The following field type are supported: string, number,
            boolean (true/false), date (Timestamp e.g.
            "2024-01-24T17:39:57+01:00"). Keys are limited to 255 characters,
            alphanumerical characters and - _ only. Size is limited to 50Kb.
          type: object
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: object
              - type: array
                items:
                  description: >-
                    WARNING: Missing items property in array schema. Missing
                    items property has been filled with this AnyType schema.
          example:
            video_title: Brevo — The most approachable CRM suite
            vide_description: Create your free account today!
            duration: 142
            autoplayed: false
            upload_date: '2023-11-24T12:09:10+01:00'
    ConversionSourceMetrics:
      type: object
      required:
        - id
        - conversionSource
        - ordersCount
        - revenue
        - averageBasket
      properties:
        id:
          type: number
          format: integer
        conversionSource:
          type: string
          enum:
            - email_campaign
        ordersCount:
          type: number
          format: integer
        revenue:
          type: number
          format: float
        averageBasket:
          type: number
          format: float
    ConversionSourceProduct:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: '1'
        name:
          type: string
          example: Milky Way Galaxy
        sku:
          type: string
          example: sku-1
        price:
          type: number
          format: float
          example: 1000
        url:
          type: string
          example: https://mydomain.com/products/alpina-panoma-classic
        imageUrl:
          type: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        ordersCount:
          type: integer
          example: 200
        revenue:
          type: number
          format: float
          example: 999.99
    order:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - status
        - amount
        - products
      properties:
        id:
          description: Unique ID of the order.
          type: string
          example: '14'
        createdAt:
          description: >-
            Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is
            actually created.
          type: string
          example: '2021-07-29T20:59:23.383Z'
        updatedAt:
          description: >-
            Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status
            of the order is actually changed/updated.
          type: string
          example: '2021-07-30T10:59:23.383Z'
        status:
          description: State of the order.
          type: string
          example: completed
        amount:
          description: >-
            Total amount of the order, including all shipping expenses, tax and
            the price of items.
          type: number
          example: 308.42
        products:
          type: array
          items:
            description: Details for the Products in an order.
            type: object
            required:
              - productId
              - quantity
              - price
            properties:
              productId:
                description: ID of the product.
                type: string
                example: P1
              quantity:
                description: >-
                  How many pieces of the product the visitor has added to the
                  cart.
                type: number
                example: 10
              variantId:
                description: Product ID of the red color shirts.
                type: string
                example: P100
              price:
                description: The price of a unit of product
                type: number
                example: 99.99
        email:
          description: >-
            Email of the contact, Mandatory if "phone" field is not passed in
            "billing" parameter.
          type: string
          example: example@brevo.com
        billing:
          description: Billing details of an order.
          type: object
          properties:
            address:
              description: Full billing address.
              type: string
              example: 15 Somewhere Road, Brynmenyn
            city:
              description: Exact city of the address.
              type: string
              example: Basel
            countryCode:
              description: Billing country 2-letter ISO code.
              type: string
              example: CA
            phone:
              description: >-
                Phone number to contact for further details about the order,
                Mandatory if "email" field is not passed.
              type: string
              example: 01559 032133
            postCode:
              description: Postcode for delivery and billing.
              type: string
              example: '4052'
            paymentMethod:
              description: >-
                How the visitor will pay for the item(s), e.g. paypal, check,
                etc.
              type: string
              example: PayPal
            region:
              description: Exact region (state/province) for delivery and billing.
              type: string
              example: Northwestern Switzerland
        coupons:
          description: Coupons applied to the order. Stored case insensitive.
          type: array
          example:
            - EASTER15OFF
          items:
            type: string
    orderBatch:
      type: object
      required:
        - orders
      properties:
        orders:
          description: array of order objects
          type: array
          items:
            $ref: '#/components/schemas/order'
        notifyUrl:
          description: Notify Url provided by client to get the status of batch request
          type: string
          example: https://en.wikipedia.org/wiki/Webhook
        historical:
          description: >-
            Defines wether you want your orders to be considered as live data or
            as historical data (import of past data, synchronising data). True:
            orders will not trigger any automation workflows. False: orders will
            trigger workflows as usual.
          type: boolean
          default: true
          example: true
    createdBatchId:
      type: object
      required:
        - batchId
      properties:
        batchId:
          description: Batch ID of the request
          type: number
          example: 1
        count:
          description: Number of orders
          type: integer
          format: int64
          example: 17655
    getCategories:
      required:
        - categories
        - count
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/getCategoryDetails'
        count:
          description: Number of categories
          type: integer
          format: int64
          example: 17655
    getCategoryDetails:
      required:
        - id
        - name
        - createdAt
        - modifiedAt
      type: object
      properties:
        id:
          description: Category ID for which you requested the details
          type: string
          format: string
          example: C11
        name:
          description: Name of the category for which you requested the details
          type: string
          format: string
          example: Electronics
        createdAt:
          description: Creation UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        modifiedAt:
          description: >-
            Last modification UTC date-time of the category
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        url:
          description: URL to the category
          type: string
          format: string
          example: http://mydomain.com/category/clothing
        isDeleted:
          description: category deleted from the shop's database
          type: boolean
          format: string
          example: true
    createUpdateCategory:
      type: object
      required:
        - id
      properties:
        id:
          description: |
            Unique Category ID as saved in the shop
          type: string
          format: email
          example: CAT123
        name:
          description: >
            **Mandatory in case of creation**. Name of the Category, as
            displayed in the shop
          type: string
          example: Electronics
        url:
          description: URL to the category
          type: string
          example: http://mydomain.com/category/electronics
        updateEnabled:
          description: >-
            Facilitate to update the existing category in the same request
            (updateEnabled = true)
          type: boolean
          example: false
          default: false
        deletedAt:
          description: >-
            UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted
            from the shop's database
          type: string
          example: '2017-05-12T12:30:00.000Z'
    createUpdateCategories:
      type: object
      required:
        - id
      properties:
        id:
          description: |
            Unique Category ID as saved in the shop
          type: string
          format: email
          example: CAT123
        name:
          description: >
            **Mandatory in case of creation**. Name of the Category, as
            displayed in the shop
          type: string
          example: Electronics
        url:
          description: URL to the category
          type: string
          example: http://mydomain.com/category/electronics
        deletedAt:
          description: >-
            UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted
            from the shop's database
          type: string
          example: '2017-05-12T12:30:00.000Z'
    createUpdateBatchCategory:
      type: object
      required:
        - categories
      properties:
        categories:
          description: array of categories objects
          type: array
          items:
            $ref: '#/components/schemas/createUpdateCategories'
        updateEnabled:
          description: >-
            Facilitate to update the existing categories in the same request
            (updateEnabled = true)
          type: boolean
    createCategoryModel:
      type: object
      properties:
        id:
          description: ID of the category when a new category is created
          type: integer
          format: int64
          example: 122
    createUpdateBatchCategoryModel:
      type: object
      properties:
        createdCount:
          description: Number of the new created categories
          type: integer
          format: int64
          example: 7
        updatedCount:
          description: Number of the existing categories updated
          type: integer
          format: int64
          example: 5
    getProducts:
      required:
        - products
        - count
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/getProductDetails'
        count:
          description: Number of products
          type: integer
          format: int64
          example: 17655
    getProductDetails:
      required:
        - id
        - name
        - createdAt
        - modifiedAt
        - s3ThumbAnalytics
        - s3ThumbEditor
      type: object
      properties:
        id:
          description: Product ID for which you requested the details
          type: string
          format: string
          example: P11
        name:
          description: Name of the product for which you requested the details
          type: string
          format: string
          example: Iphone 11
        createdAt:
          description: Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        modifiedAt:
          description: >-
            Last modification UTC date-time of the product
            (YYYY-MM-DDTHH:mm:ss.SSSZ)
          type: string
          example: '2017-05-12T12:30:00.000Z'
        url:
          description: URL to the product
          type: string
          format: string
          example: http://mydomain.com/product/electronics/product1
        imageUrl:
          description: Absolute URL to the cover image of the product
          type: string
          format: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        sku:
          description: Product identifier from the shop
          type: string
          format: string
        price:
          description: Price of the product
          type: number
          format: float
        categories:
          description: Category ID-s of the product
          type: array
          items:
            type: string
        parentId:
          description: Parent product id of the product
          type: string
          format: string
        s3Original:
          description: S3 url of original image
          type: string
          format: string
        s3ThumbAnalytics:
          description: >-
            S3 thumbnail url of original image in 120x120 dimension for
            analytics section
          type: string
          format: string
        s3ThumbEditor:
          description: >-
            S3 thumbnail url of original image in 600x400 dimension for editor
            section
          type: string
          format: string
        metaInfo:
          description: >-
            Meta data of product such as description, vendor, producer, stock
            level, etc.
          type: object
          example:
            description: Shoes for sports
            brand: addidas
        isDeleted:
          description: product deleted from the shop's database
          type: boolean
          example: true
    createUpdateProduct:
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: Product ID for which you requested the details
          type: string
          format: string
          example: P11
        name:
          description: >-
            Mandatory in case of creation**. Name of the product for which you
            requested the details
          type: string
          format: string
          example: Iphone 11
        url:
          description: URL to the product
          type: string
          format: string
          example: http://mydomain.com/product/electronics/product1
        imageUrl:
          description: Absolute URL to the cover image of the product
          type: string
          format: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        sku:
          description: Product identifier from the shop
          type: string
          format: string
        price:
          description: Price of the product
          type: number
          format: float
        categories:
          description: Category ID-s of the product
          type: array
          items:
            type: string
        parentId:
          description: Parent product id of the product
          type: string
          format: string
        metaInfo:
          description: >-
            Meta data of product such as description, vendor, producer, stock
            level. The size of cumulative metaInfo shall not exceed **1000 KB**.
            Maximum length of metaInfo object can be 10.
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: integer
          example:
            description: Shoes for sports
            brand: addidas
        updateEnabled:
          description: >-
            Facilitate to update the existing category in the same request
            (updateEnabled = true)
          type: boolean
          example: false
          default: false
        deletedAt:
          description: >-
            UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from
            the shop's database
          type: string
    createUpdateBatchProducts:
      type: object
      required:
        - products
      properties:
        products:
          description: array of products objects
          type: array
          items:
            $ref: '#/components/schemas/createUpdateProducts'
        updateEnabled:
          description: >-
            Facilitate to update the existing categories in the same request
            (updateEnabled = true)
          type: boolean
    createUpdateProducts:
      type: object
      required:
        - id
        - name
      properties:
        id:
          description: Product ID for which you requested the details
          type: string
          format: string
          example: P11
        name:
          description: >-
            Mandatory in case of creation**. Name of the product for which you
            requested the details
          type: string
          format: string
          example: Iphone 11
        url:
          description: URL to the product
          type: string
          format: string
          example: http://mydomain.com/product/electronics/product1
        imageUrl:
          description: Absolute URL to the cover image of the product
          type: string
          format: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        sku:
          description: Product identifier from the shop
          type: string
          format: string
        price:
          description: Price of the product
          type: number
          format: float
        categories:
          description: Category ID-s of the product
          type: array
          items:
            type: string
        parentId:
          description: Parent product id of the product
          type: string
          format: string
        metaInfo:
          description: >-
            Meta data of product such as description, vendor, producer, stock
            level. The size of cumulative metaInfo shall not exceed **1000 KB**.
            Maximum length of metaInfo object can be 10.
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: integer
          example:
            description: Shoes for sports
            brand: addidas
        deletedAt:
          description: >-
            UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from
            the shop's database
          type: string
    createProductModel:
      type: object
      properties:
        id:
          description: ID of the Product when a new product is created
          type: integer
          format: int64
          example: 122
    createUpdateBatchProductsModel:
      type: object
      properties:
        createdCount:
          description: Number of the new created products
          type: integer
          format: int64
          example: 7
        updatedCount:
          description: Number of the existing products updated
          type: integer
          format: int64
          example: 5
    getCouponCollection:
      required:
        - id
        - name
        - defaultCoupon
        - createdAt
        - totalCoupons
        - remainingCoupons
      type: object
      properties:
        id:
          description: The id of the collection.
          type: string
          format: uuidv4
          example: 23befbae-1505-47a8-bd27-e30ef739f32c
        name:
          description: The name of the collection.
          type: string
          format: uuidv4
          example: SummerPromotions
        defaultCoupon:
          description: The default coupon of the collection.
          type: string
          example: 10 OFF
        createdAt:
          description: Datetime on which the collection was created.
          type: string
          format: date-time
          example: '2023-01-06T05:03:47.053Z'
        totalCoupons:
          description: Total number of coupons in the collection.
          type: integer
          format: int64
          example: 10000
        remainingCoupons:
          description: Number of coupons that have not been sent yet.
          type: integer
          format: int64
          example: 5000
        expirationDate:
          description: Expiration date for the coupon collection in RFC3339 format.
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
        remainingDaysAlert:
          description: >-
            If present, an email notification is going to be sent the defined
            amount of days before to the expiration date.
          type: integer
          example: 5
        remainingCouponsAlert:
          description: >-
            If present, an email notification is going to be sent when the total
            number of available coupons falls below the defined threshold.
          type: integer
          example: 5
    sendWhatsappMessageTemplate:
      required:
        - senderNumber
        - templateId
        - contactNumbers
      type: object
      properties:
        templateId:
          description: ID of the template to send
          type: integer
          example: 123
        senderNumber:
          description: WhatsApp Number with country code. Example, 85264318721
          type: string
          format: mobile
          example: 919876543210
        params:
          description: >-
            Pass the set of attributes to customize the template. For example,
            {"FNAME":"Joe", "LNAME":"Doe"}.
          type: object
          example:
            FNAME: Joe
            LNAME: Doe
        contactNumbers:
          description: List of phone numbers of the contacts
          type: array
          items:
            description: WhatsApp Number with country code. Example, 85264318721
            type: string
            format: mobile
            example: 919876543210
    sendWhatsappMessageText:
      required:
        - senderNumber
        - contactNumbers
        - authType
        - text
      type: object
      properties:
        senderNumber:
          description: WhatsApp Number with country code. Example, 85264318721
          type: string
          format: mobile
          example: 919876543210
        text:
          description: >-
            Text to be sent as message body (will be overridden if templateId is
            passed in the same request)
          type: string
          example: Hi! There i am a message
        contactNumbers:
          description: List of phone numbers of the contacts
          type: array
          items:
            description: WhatsApp Number with country code. Example, 85264318721
            type: string
            format: mobile
            example: 919876543210
    getWhatsappEventReport:
      type: object
      properties:
        events:
          type: array
          items:
            required:
              - contactNumber
              - date
              - messageId
              - event
              - senderNumber
            type: object
            properties:
              contactNumber:
                description: WhatsApp Number with country code. Example, 85264318721
                type: string
                format: mobile
                example: 919876543210
              date:
                description: UTC date-time on which the event has been generated
                type: string
                example: '2017-03-12T12:30:00.000Z'
              messageId:
                description: Message ID which generated the event
                type: string
                example: 23befbae-1505-47a8-bd27-e30ef739f32c
              event:
                description: Event which occurred
                type: string
                example: delivered
                enum:
                  - sent
                  - delivered
                  - read
                  - error
                  - unsubscribe
                  - reply
                  - soft-bounce
              reason:
                description: >-
                  Reason for the event (will be there in case of `error` and
                  `soft-bounce` events)
                type: string
                example: 23befbae-1505-47a8-bd27-e30ef739f32c
              body:
                description: >-
                  Text of the reply (will be there only in case of `reply` event
                  with text)
                type: string
                example: Hi! I am a reply
              mediaUrl:
                description: >-
                  Url of the media reply (will be there only in case of `reply`
                  event with media)
                type: string
                format: url
                example: https://example.com/media.png
              senderNumber:
                description: WhatsApp Number with country code. Example, 85264318721
                type: string
                format: mobile
                example: 919876543210
    getExternalFeedByUUID:
      type: object
      required:
        - id
        - name
        - url
        - authType
        - headers
        - maxRetries
        - cache
        - createdAt
        - modifiedAt
      properties:
        id:
          description: ID of the feed
          type: string
          format: uuidv4
          example: 54377442-20a2-4c20-b761-d636c72de7b7
        name:
          description: Name of the feed
          type: string
          example: New feed
        url:
          description: URL of the feed
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        authType:
          description: |
            Auth type of the feed: * `basic` * `token` * `noAuth`
          type: string
          enum:
            - basic
            - token
            - noAuth
        username:
          description: Username for authType `basic`
          type: string
          example: user
        password:
          description: Password for authType `basic`
          type: string
          example: password
        token:
          description: Token for authType `token`
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        headers:
          description: Custom headers for the feed
          type: array
          items:
            type: object
            properties:
              name:
                description: Name of the header
                type: string
                example: userId
              value:
                description: Value of the header
                type: string
                example: user12345
        maxRetries:
          description: Maximum number of retries on the feed url
          type: integer
          example: 5
          minimum: 0
          maximum: 5
          default: 5
        cache:
          description: Toggle caching of feed url response
          type: boolean
          example: true
        createdAt:
          description: Datetime on which the feed was created
          type: string
          format: date-time
          example: '2022-10-06T05:03:47.053000000Z'
        modifiedAt:
          description: Datetime on which the feed was modified
          type: string
          format: date-time
          example: '2022-10-06T05:03:47.053000000Z'
    getAllExternalFeeds:
      type: object
      properties:
        count:
          description: Total number of batches
          type: integer
        feeds:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - url
              - authType
              - headers
              - maxRetries
              - cache
              - createdAt
              - modifiedAt
            properties:
              id:
                description: ID of the feed
                type: string
                format: uuidv4
                example: 54377442-20a2-4c20-b761-d636c72de7b7
              name:
                description: Name of the feed
                type: string
                example: New feed
              url:
                description: URL of the feed
                type: string
                format: url
                example: http://requestb.in/173lyyx1
              authType:
                description: |
                  Auth type of the feed: * `basic` * `token` * `noAuth`
                type: string
                enum:
                  - basic
                  - token
                  - noAuth
              username:
                description: Username for authType `basic`
                type: string
                example: user
              password:
                description: Password for authType `basic`
                type: string
                example: password
              token:
                description: Token for authType `token`
                type: string
                example: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              headers:
                description: Custom headers for the feed
                type: array
                items:
                  type: object
                  properties:
                    name:
                      description: Name of the header
                      type: string
                      example: userId
                    value:
                      description: Value of the header
                      type: string
                      example: user12345
              maxRetries:
                description: Maximum number of retries on the feed url
                type: integer
                example: 5
                minimum: 0
                maximum: 5
                default: 5
              cache:
                description: Toggle caching of feed url response
                type: boolean
                example: true
              createdAt:
                description: Datetime on which the feed was created
                type: string
                format: date-time
                example: '2022-10-06T05:03:47.053000000Z'
              modifiedAt:
                description: Datetime on which the feed was modified
                type: string
                format: date-time
                example: '2022-10-06T05:03:47.053000000Z'
    createExternalFeed:
      required:
        - name
        - url
      type: object
      properties:
        name:
          description: Name of the feed
          type: string
          example: New feed
        url:
          description: URL of the feed
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        authType:
          description: |
            Auth type of the feed:
             * `basic`
             * `token`
             * `noAuth`
          type: string
          enum:
            - basic
            - token
            - noAuth
          default: noAuth
        username:
          description: Username for authType `basic`
          type: string
          example: user
        password:
          description: Password for authType `basic`
          type: string
          example: password
        token:
          description: Token for authType `token`
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        headers:
          description: Custom headers for the feed
          type: array
          items:
            type: object
            properties:
              name:
                description: Name of the header
                type: string
                example: userId
              value:
                description: Value of the header
                type: string
                example: user12345
          example:
            - name: header1
              value: value1
            - name: header2
              value: value2
        maxRetries:
          description: Maximum number of retries on the feed url
          type: integer
          example: 5
          minimum: 0
          maximum: 5
          default: 5
        cache:
          description: Toggle caching of feed url response
          type: boolean
          example: true
          default: false
    updateExternalFeed:
      type: object
      properties:
        name:
          description: Name of the feed
          type: string
          example: New feed
        url:
          description: URL of the feed
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        authType:
          description: |
            Auth type of the feed:
             * `basic`
             * `token`
             * `noAuth`
          type: string
          enum:
            - basic
            - token
            - noAuth
        username:
          description: Username for authType `basic`
          type: string
          example: user
        password:
          description: Password for authType `basic`
          type: string
          example: password
        token:
          description: Token for authType `token`
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        headers:
          description: Custom headers for the feed
          type: array
          items:
            type: object
            properties:
              name:
                description: Name of the header
                type: string
                example: userId
              value:
                description: Value of the header
                type: string
                example: user12345
          example:
            - name: header1
              value: value1
            - name: header2
              value: value2
        maxRetries:
          description: Maximum number of retries on the feed url
          type: integer
          example: 5
          minimum: 0
          maximum: 5
          default: 5
        cache:
          description: Toggle caching of feed url response
          type: boolean
          example: true
          default: false
    exportWebhooksHistory:
      required:
        - event
        - notifyURL
        - type
      type: object
      properties:
        days:
          description: >-
            Number of days in the past including today (positive integer). _Not
            compatible with 'startDate' and 'endDate'_
          type: integer
          example: 7
        startDate:
          description: >-
            Mandatory if endDate is used. Starting date of the history
            (YYYY-MM-DD). Must be lower than equal to endDate
          type: string
          example: '2023-02-13T00:00:00.000Z'
        endDate:
          description: >-
            Mandatory if startDate is used. Ending date of the report
            (YYYY-MM-DD). Must be greater than equal to startDate
          type: string
          example: '2023-02-17T00:00:00.000Z'
        sort:
          description: Sorting order of records (asc or desc)
          type: string
          example: desc
        type:
          description: Filter the history based on webhook type
          type: string
          example: transactional
          enum:
            - transactional
            - marketing
        event:
          description: Filter the history for a specific event type
          type: string
          example: request
          enum:
            - invalid_parameter
            - missing_parameter
            - hardBounce
            - softBounce
            - delivered
            - spam
            - request
            - opened
            - click
            - invalid
            - deferred
            - blocked
            - unsubscribed
            - error
            - uniqueOpened
            - loadedByProxy
            - allEvents
        notifyURL:
          description: Webhook URL to receive CSV file link
          type: string
          example: https://brevo.com
        webhookId:
          description: Filter the history for a specific webhook id
          type: integer
          example: 2345
        email:
          description: Filter the history for a specific email
          type: string
          example: example@brevo.com
        messageId:
          description: >-
            Filter the history for a specific message id. Applicable only for
            transactional webhooks.
          type: integer
          example: .nan
    createPaymentRequest:
      required:
        - reference
        - contactId
        - cart
        - configuration
      type: object
      properties:
        reference:
          description: >
            Reference of the payment request, it will appear on the payment
            page.
          type: string
          example: 'Invoice #INV0001'
        cart:
          $ref: '#/components/schemas/cart'
        contactId:
          description: |
            Brevo ID of the contact requested to pay.
          type: integer
          format: int64
          example: 43
        notification:
          $ref: '#/components/schemas/notification'
        configuration:
          $ref: '#/components/schemas/configuration'
    configuration:
      description: >
        Optional. Redirect contact to a custom success page once payment is
        successful. If empty the default Brevo page will be displayed once a
        payment is validated
      required:
        - customSuccessUrl
      properties:
        customSuccessUrl:
          description: |
            Absolute URL of the custom success page.
          type: string
          format: url
          example: https://my-company.com/payment-success
    cart:
      description: |
        Specify the payment currency and amount.
      type: object
      required:
        - currency
        - specificAmount
      properties:
        currency:
          description: |
            Currency code for the payment amount.
          type: string
          example: EUR
          enum:
            - EUR
        specificAmount:
          description: >
            Payment amount, in cents.

            e.g. if you want to request €12.00, then the amount in cents is
            1200.
          type: integer
          format: int64
          example: 1200
    notification:
      description: >
        Optional. Use this object if you want to let Brevo send an email to the
        contact, with the payment request URL. If empty, no notifications
        (message and reminders) will be sent.
      required:
        - channel
        - text
      type: object
      properties:
        channel:
          description: |
            Channel used to send the notifications.
          type: string
          example: email
          enum:
            - email
        text:
          description: >
            Use this field if you want to give more context to your contact
            about the payment request.
          type: string
          example: Please pay for your yoga class.
    getPaymentRequest:
      type: object
      properties:
        reference:
          description: >
            Reference of the payment request, it will appear on the payment
            page.
          type: string
          example: |
            Invoice #INV0001
        status:
          description: Status of the payment request.
          type: string
          enum:
            - created
            - sent
            - reminderSent
            - paid
          example: paid
        configuration:
          $ref: '#/components/schemas/configuration'
        contactId:
          description: |
            Brevo ID of the contact requested to pay.
          type: integer
          format: int64
          example: 43
        cart:
          $ref: '#/components/schemas/cart'
        notification:
          $ref: '#/components/schemas/notification'
      required:
        - reference
        - status
        - cart
        - notification
    ContactsAddToListRequest:
      oneOf:
        - $ref: '#/components/schemas/addContactToListByEmails'
        - $ref: '#/components/schemas/addContactToListByIDs'
    ContactsRemoveContactFromListRequest:
      oneOf:
        - $ref: '#/components/schemas/removeContactFromListByEmails'
        - $ref: '#/components/schemas/removeContactFromListByIDs'
        - $ref: '#/components/schemas/removeContactFromListByAll'
    WebhooksExportAllEventsRequest:
      oneOf:
        - $ref: '#/components/schemas/exportWebhooksHistory'
    MasterAccountGenerateSsoTokenRequest:
      required:
        - email
      type: object
      properties:
        email:
          description: User email of admin account
          type: string
          example: vipin+ent-user@brevo.com
    MasterAccountGenerateSsoTokenRequest1:
      required:
        - id
      type: object
      properties:
        id:
          description: Id of the sub-account organization
          type: integer
          format: int64
          example: 3232323
        email:
          description: User email of sub-account organization
          type: string
          example: vipin+subaccount@brevo.com
        target:
          description: >
            **Set target after login success**

            * **automation** - Redirect to Automation after login

            * **email_campaign** - Redirect to Email Campaign after login

            * **contacts** - Redirect to Contacts after login

            * **landing_pages** - Redirect to Landing Pages after login

            * **email_transactional** - Redirect to Email Transactional after
            login

            * **senders** - Redirect to Senders after login

            * **sms_campaign** - Redirect to Sms Campaign after login

            * **sms_transactional** - Redirect to Sms Transactional after login
          type: string
          enum:
            - automation
            - email_campaign
            - contacts
            - landing_pages
            - email_transactional
            - senders
            - sms_campaign
            - sms_transactional
          example: contacts
        url:
          description: >-
            Set the full target URL after login success. The user will land
            directly on this target URL after login
          type: string
          example: https://app.brevo.com/senders/domain/list
    MasterAccountCreateSubAccountKeyRequest:
      required:
        - id
        - name
      type: object
      properties:
        id:
          description: Id of the sub-account organization
          type: integer
          format: int64
          example: 3232323
        name:
          description: Name of the API key
          type: string
          example: My Api Key
    MasterAccountCreateGroupOfSubAccountsRequest:
      required:
        - groupName
      type: object
      properties:
        groupName:
          description: The name of the group of sub-accounts
          type: string
          example: My group
        subAccountIds:
          description: Pass the list of sub-account Ids to be included in the group
          items:
            type: integer
            format: int64
          type: array
          example:
            - 234322
            - 325553
            - 893432
    MasterAccountUpdateGroupSubAccountsRequest:
      type: object
      properties:
        groupName:
          description: The name of the group of sub-accounts
          type: string
          example: My group
        subAccountIds:
          description: Pass the list of sub-account Ids to be included in the group
          items:
            type: integer
            format: int64
          type: array
          example:
            - 234322
            - 325553
            - 893432
    MasterAccountUnlinkSubAccountFromGroupRequest:
      required:
        - subAccountIds
      type: object
      properties:
        subAccountIds:
          description: List of sub-account ids
          type: array
          items:
            type: integer
            format: int64
          example:
            - 423432
            - 234323
            - 87678
    CompaniesCreateCompanyRequest:
      required:
        - name
      properties:
        name:
          description: Name of company
          type: string
          example: company
        attributes:
          description: Attributes for company creation
          type: object
          example:
            domain: https://example.com
            industry: Fabric
            owner: 60e68d60582a3b006f524197
        countryCode:
          description: Country code if phone_number is passed in attributes.
          type: integer
          format: int64
          example: 91
      type: object
    CompaniesUpdateCompanyRequest:
      properties:
        name:
          description: Name of company
          type: string
          example: company
        attributes:
          description: Attributes for company update
          type: object
          example:
            category: label_2
            domain: xyz
            date: '2022-05-04T00:00:00+05:30'
            industry: flipkart
            number_of_contacts: 1
            number_of_employees: 100
            owner: 5b1a17d914b73d35a76ca0c7
            phone_number: '81718441912'
            revenue: 10000.34222
        countryCode:
          description: Country code if phone_number is passed in attributes.
          type: integer
          format: int64
          example: 91
      type: object
    CompaniesLinkUnlinkWithContactDealRequest:
      properties:
        linkContactIds:
          description: Contact ids for contacts to be linked with company
          items:
            type: integer
            format: int64
          type: array
          example:
            - 1
            - 2
            - 3
        unlinkContactIds:
          description: Contact ids for contacts to be unlinked from company
          items:
            type: integer
            format: int64
          type: array
          example:
            - 4
            - 5
            - 6
        linkDealsIds:
          description: Deal ids for deals to be linked with company
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        unlinkDealsIds:
          description: Deal ids for deals to be unlinked from company
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045994
            - 61a5ce58c5d479576104595
            - 61a5ce58c5d4795761045996
      type: object
    DealsCreateNewDealRequest:
      required:
        - name
      properties:
        name:
          description: Name of deal
          type: string
          example: 'Deal: Connect with company'
        attributes:
          description: >
            Attributes for deal creation


            To assign owner of a Deal you can send attributes.deal_owner and
            utilize the account email or ID.


            If you want to create a deal on a specific pipeline and stage you
            can use the following attributes `pipeline` and `deal_stage`.


            Pipeline and deal_stage are ids you can fetch using this endpoint
            `/crm/pipeline/details/{pipelineID}`
          type: object
          example:
            deal_owner: 6093d2425a9b436e9519d034
            amount: 12
      type: object
    DealsUpdateDealByIdRequest:
      properties:
        name:
          description: Name of deal
          type: string
          example: 'Deal: Connect with client'
        attributes:
          description: >
            Attributes for deal update


            To assign owner of a Deal you can send attributes.deal_owner and
            utilize the account email or ID.


            If you wish to update the pipeline of a deal you need to provide the
            `pipeline` and the `deal_stage`


            Pipeline and deal_stage are ids you can fetch using this endpoint
            `/crm/pipeline/details/{pipelineID}`
          type: object
          example:
            deal_owner: 6093d2425a9b436e9519d034
            amount: 12
      type: object
    DealsLinkUnlinkPatchRequest:
      properties:
        linkContactIds:
          description: Contact ids for contacts to be linked with deal
          items:
            type: integer
            format: int64
          type: array
          example:
            - 1
            - 2
            - 3
        unlinkContactIds:
          description: Contact ids for contacts to be unlinked from deal
          items:
            type: integer
            format: int64
          type: array
          example:
            - 4
            - 5
            - 6
        linkCompanyIds:
          description: Company ids to be linked with deal
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        unlinkCompanyIds:
          description: Company ids to be unlinked from deal
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045994
            - 61a5ce58c5d479576104595
            - 61a5ce58c5d4795761045996
      type: object
    TasksCreateNewTaskRequest:
      required:
        - name
        - taskTypeId
        - date
      properties:
        name:
          description: Name of task
          type: string
          example: 'Task: Connect with client'
        duration:
          description: Duration of task in milliseconds [1 minute = 60000 ms]
          type: integer
          example: 600000
          format: int64
          minimum: 0
        taskTypeId:
          description: Id for type of task e.g Call / Email / Meeting etc.
          type: string
          example: 61a5cd07ca1347c82306ad09
        date:
          description: Task due date and time
          type: string
          format: date-time
          example: '2021-11-01T17:44:54.668Z'
        notes:
          description: Notes added to a task
          type: string
          example: In communication with client for resolution of queries.
        done:
          description: Task marked as done
          type: boolean
          example: false
        assignToId:
          description: >-
            To assign a task to a user you can use either the account email or
            ID.
          type: string
          example: 5faab4b7f195bb3c4c31e62a
        contactsIds:
          description: Contact ids for contacts linked to this task
          items:
            type: integer
          type: array
          example:
            - 1
            - 2
            - 3
        dealsIds:
          description: Deal ids for deals a task is linked to
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        companiesIds:
          description: Companies ids for companies a task is linked to
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        reminder:
          $ref: '#/components/schemas/TaskReminder'
      type: object
    TasksUpdateTaskRequest:
      properties:
        name:
          description: Name of task
          type: string
          example: 'Task: Connect with client'
        duration:
          description: Duration of task in milliseconds [1 minute = 60000 ms]
          type: integer
          format: int64
          example: 600000
        taskTypeId:
          description: Id for type of task e.g Call / Email / Meeting etc.
          type: string
          example: 61a5cd07ca1347c82306ad09
        date:
          description: Task date/time
          type: string
          format: date-time
          example: '2021-11-01T17:44:54.668Z'
        notes:
          description: Notes added to a task
          type: string
          example: In communication with client for resolution of queries.
        done:
          description: Task marked as done
          type: boolean
          example: false
        assignToId:
          description: >-
            To assign a task to a user you can use either the account email or
            ID.
          type: string
          example: 5faab4b7f195bb3c4c31e62a
        contactsIds:
          description: Contact ids for contacts linked to this task
          items:
            type: integer
          type: array
          example:
            - 1
            - 2
            - 3
        dealsIds:
          description: Deal ids for deals a task is linked to
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        companiesIds:
          description: Companies ids for companies a task is linked to
          items:
            type: string
          type: array
          example:
            - 61a5ce58c5d4795761045990
            - 61a5ce58c5d4795761045991
            - 61a5ce58c5d4795761045992
        reminder:
          $ref: '#/components/schemas/TaskReminder'
      type: object
    FilesUploadFileRequest:
      type: object
      properties:
        file:
          description: File data to create a file.
          type: string
          format: binary
        dealId:
          type: string
        contactId:
          type: integer
          format: int64
        companyId:
          type: string
      required:
        - file
    ConversationsSendMessageAsAgentRequest:
      type: object
      required:
        - visitorId
        - text
      properties:
        visitorId:
          description: >-
            visitor’s ID received <a
            href="https://developers.brevo.com/docs/conversations-webhooks">from
            a webhook</a> or generated by you to <a
            href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind
            existing user account to Conversations</a>
        text:
          description: message text
        agentId:
          description: >-
            agent ID. It can be found on agent’s page or received <a
            href="https://developers.brevo.com/docs/conversations-webhooks">from
            a webhook</a>. Alternatively, you can use `agentEmail` + `agentName`
            + `receivedFrom` instead (all 3 fields required).
        receivedFrom:
          description: >-
            mark your messages to distinguish messages created by you from the
            others.
        agentEmail:
          description: >-
            agent email. When sending messages from a standalone system, it’s
            hard to maintain a 1-to-1 relationship between the users of both
            systems. In this case, an agent can be specified by their email
            address.
        agentName:
          description: agent name
    ConversationsUpdateAgentMessageRequest:
      type: object
      required:
        - text
      properties:
        text:
          description: edited message text
          type: string
    ConversationsSendAutomatedMessageRequest:
      type: object
      required:
        - visitorId
        - text
      properties:
        visitorId:
          description: >-
            visitor’s ID received <a
            href="https://developers.brevo.com/docs/conversations-webhooks">from
            a webhook</a> or generated by you to <a
            href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind
            existing user account to Conversations</a>
        text:
          description: message text
        agentId:
          description: >-
            agent ID. It can be found on agent’s page or received <a
            href="https://developers.brevo.com/docs/conversations-webhooks">from
            a webhook</a>.
        groupId:
          description: group ID. It can be found on group’s page.
    ConversationsUpdatePushedMessageRequest:
      type: object
      required:
        - text
      properties:
        text:
          description: edited message text
          type: string
    ConversationsSetAgentOnlineStatusRequest:
      type: object
      properties:
        agentId:
          description: >-
            agent ID. It can be found on agent’s page or received <a
            href="https://developers.brevo.com/docs/conversations-webhooks">from
            a webhook</a>. Alternatively, you can use `agentEmail` + `agentName`
            + `receivedFrom` instead (all 3 fields required).
        receivedFrom:
          description: >-
            mark your messages to distinguish messages created by you from the
            others.
        agentEmail:
          description: >-
            agent email. When sending online pings from a standalone system,
            it’s hard to maintain a 1-to-1 relationship between the users of
            both systems. In this case, an agent can be specified by their email
            address. If there’s no agent with the specified email address in
            your Brevo organization, a dummy agent will be created
            automatically.
        agentName:
          description: agent name
    CouponsCreateCollectionRequest:
      required:
        - name
        - defaultCoupon
      type: object
      properties:
        name:
          description: Name of the coupons collection
          type: string
          example: 10%OFF
        defaultCoupon:
          description: Default coupons collection name
          type: string
          example: Winter
        expirationDate:
          description: >-
            Specify an expiration date for the coupon collection in RFC3339
            format. Use null to remove the expiration date.
          type: string
          format: date-time
          example: '2022-01-02T00:00:00Z'
        remainingDaysAlert:
          description: >-
            Send a notification alert (email) when the remaining days until the
            expiration date are equal or fall bellow this number. Use null to
            disable alerts.
          type: integer
          example: 5
        remainingCouponsAlert:
          description: >-
            Send a notification alert (email) when the remaining coupons count
            is equal or fall bellow this number. Use null to disable alerts.
          type: integer
          example: 5
    CouponsUpdateCouponCollectionByIdRequest:
      type: object
      properties:
        defaultCoupon:
          description: A default coupon to be used in case there are no coupons left
          type: string
          example: 10 OFF
        expirationDate:
          description: >-
            Specify an expiration date for the coupon collection in RFC3339
            format. Use null to remove the expiration date.
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
        remainingDaysAlert:
          description: >-
            Send a notification alert (email) when the remaining days until the
            expiration date are equal or fall bellow this number. Use null to
            disable alerts.
          type: integer
          example: 5
        remainingCouponsAlert:
          description: >-
            Send a notification alert (email) when the remaining coupons count
            is equal or fall bellow this number. Use null to disable alerts.
          type: integer
          example: 5
    CouponsCreateCouponCollectionRequest:
      required:
        - collectionId
        - coupons
      type: object
      properties:
        collectionId:
          description: >-
            The id of the coupon collection for which the coupons will be
            created
          type: string
          format: uuidv4
          example: 23befbae-1505-47a8-bd27-e30ef739f32c
        coupons:
          type: array
          minItems: 1
          maxItems: 1000
          uniqueItems: true
          items:
            description: Name of the coupon
            type: string
            example: Uf12AF
    TransactionalWhatsAppSendMessageRequest:
      oneOf:
        - $ref: '#/components/schemas/sendWhatsappMessageTemplate'
        - $ref: '#/components/schemas/sendWhatsappMessageText'
    TransactionalEmailsGetEmailStatusByIdResponse:
      oneOf:
        - $ref: '#/components/schemas/getScheduledEmailByBatchId'
        - $ref: '#/components/schemas/getScheduledEmailByMessageId'
    InboundParsingGetAttachmentByTokenResponse:
      type: string
      format: binary
    MasterAccountCreateGroupOfSubAccountsResponse:
      type: object
      properties:
        id:
          type: string
    MasterAccountSendInvitationToAdminUserResponse:
      type: object
      properties:
        id:
          type: string
    MasterAccountResendCancelAdminUserInvitationResponse:
      type: object
      properties:
        message:
          description: Action success message
          type: string
    MasterAccountListGroupsResponse:
      type: array
      items:
        type: object
        properties:
          id:
            description: Unique id of the group
            type: string
          groupName:
            description: The name of the group of sub-accounts
            type: string
    CompaniesCreateCompanyResponse:
      description: Created company id
      required:
        - id
      type: object
      properties:
        id:
          description: Unique company id
          type: string
          example: 61a5cd07ca1347c82306ad06
    DealsCreateNewDealResponse:
      description: Created deal id
      required:
        - id
      type: object
      properties:
        id:
          description: Unique deal id
          type: string
          example: 61a5cd07ca1347c82306ad06
    TasksCreateNewTaskResponse:
      description: Task Details
      required:
        - id
      type: object
      properties:
        id:
          description: Unique task id
          type: string
          example: 61a5cd07ca1347c82306ad06
    EcommerceGetAttributionMetricsResponse:
      type: object
      required:
        - results
        - totals
      properties:
        results:
          description: List of conversion attribution metrics
          type: array
          example:
            - id: 2
              conversionSource: email_campaign
              ordersCount: 300
              revenue: 900
              averageBasket: 3
            - id: 1
              conversionSource: email_campaign
              ordersCount: 200
              revenue: 800
              averageBasket: 4
          items:
            type: object
            $ref: '#/components/schemas/ConversionSourceMetrics'
        totals:
          description: Attribution list aggregated totals
          type: object
          example:
            ordersCount: 500
            revenue: 1700
            averageBasket: 3.4
          required:
            - ordersCount
            - revenue
            - averageBasket
          properties:
            ordersCount:
              type: number
              format: integer
            revenue:
              type: number
              format: float
            averageBasket:
              type: number
              format: float
    EcommerceGetAttributionMetrics200Response:
      allOf:
        - $ref: '#/components/schemas/ConversionSourceMetrics'
        - type: object
          required:
            - newCustomersCount
          properties:
            newCustomersCount:
              type: number
              format: integer
    EcommerceGetAttributedProductSalesResponse:
      type: object
      required:
        - products
      properties:
        products:
          description: List of attributed products
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ConversionSourceProduct'
    EcommerceGetOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: order1803
              createdAt:
                type: string
                example: '2021-12-31T11:42:35.638Z'
              updatedAt:
                type: string
                example: '2022-03-03T14:48:31.867Z'
              contact_id:
                type: number
                example: 2
              status:
                type: string
                example: complete
              amount:
                type: number
                example: 2000
              billing:
                type: object
                properties:
                  address:
                    type: string
                    example: Sec 62, Noida
                  city:
                    type: string
                    example: Noida
                  countryCode:
                    type: string
                    example: IN
                  phone:
                    type: number
                    example: 9238283982
                  postCode:
                    type: number
                    example: 110001
                  paymentMethod:
                    type: string
                    example: Net banking
                  region:
                    type: string
                    example: North India
              products:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: number
                      example: 21
                    quantity:
                      type: number
                      example: 2
                    variantId:
                      type: string
                      example: P100
                    price:
                      type: number
                      example: 100
              email:
                type: string
                example: testvisitor@sendinblue.com
              coupons:
                type: array
                items:
                  type: string
                  example: flat50
        count:
          type: number
          example: 1
      example:
        orders:
          - id: order1803X
            createdAt: '2021-12-31T11:42:35.638Z'
            updatedAt: '2022-03-03T14:48:31.867Z'
            contact_id: 2
            status: complete
            amount: 2000
            billing:
              address: Sec 62, Noida
              city: Noida
              countryCode: IN
              phone: 9238283982
              postCode: 110001
              paymentMethod: Net banking
              region: North India
            products:
              - productId: 21
                quantity: 2
                variantId: P100
                price: 100
              - productId: 21
                quantity: 2
                variantId: P15756
                price: 100
            email: testvisitor@sendinblue.com
            coupons:
              - flat50
              - flat40
        count: 1
    CouponsCreateCollectionResponse:
      required:
        - id
      type: object
      properties:
        id:
          description: The id of the created collection
          type: string
          format: uuidv4
          example: 23befbae-1505-47a8-bd27-e30ef739f32c
    CouponsUpdateCouponCollectionByIdResponse:
      required:
        - id
        - name
        - defaultCoupon
      type: object
      properties:
        id:
          description: The id of the collection
          type: string
          format: uuidv4
          example: 23befbae-1505-47a8-bd27-e30ef739f32c
        name:
          description: The name of the collection
          type: string
          format: uuidv4
          example: SummerPromotions
        defaultCoupon:
          description: The default coupon of the collection
          type: string
          example: 10 OFF
    TransactionalWhatsAppSendMessageResponse:
      required:
        - messageId
      type: object
      properties:
        messageId:
          description: messageId of sent message
          type: string
          format: uuidv4
          example: 23befbae-1505-47a8-bd27-e30ef739f32c
    ExternalFeedsCreateFeedResponse:
      required:
        - id
      type: object
      properties:
        id:
          description: ID of the object created
          type: string
          format: uuidv4
          example: 23befbae-1505-47a8-bd27-e30ef739f32c
  securitySchemes:
    api-key:
      description: >-
        The API key should be passed in the request headers as `api-key` for
        authentication.
      type: apiKey
      name: api-key
      in: header
security:
  - api-key: []
x-samples-languages:
  - curl
